class PlayerStatItem : Inventory 
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	int PrevTimeFreezeTimer;
	int InitEXPTables;
	int ClassCheck;
	int outputdamage;
	int CharacterClass;
	int jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down;
	
	int LevelupSpeechTimer2;
	int PrevBackPacksCollected;

	// Strife Flag Checks
	int StrifeQuestFlag25, StrifeQuestFlag29;
	
	int EXPComboTimer, MaxEXPCombotimer, ComboTimerDelay;
	
	double HPRegenTimer, HPDelayInterval;
	double HPDegenTimer, HPDelayInterval2;
	double MPRegenTimer, MPDelayInterval;
	double RuinousShieldDegenTimer, CursedShieldDegenTimer;
	double DivineRegenTimer, DivineRegenInterval;
	double DoveRegenTimer, DoveRegenInterval;
	double PoisonTimer, PoisonMaxInterval;
	double RuinousPtsCurrent, RuinousPtsNeeded;
	double UncurseInterval, UncurseMaxInterval;

	int LifeUpPerkComboCheck; // [9901]
	int LifeUpPerkFactor; // [9902]
	int LifeUpPerkBaseFactor; // [9903]
	int MagiUpPerkComboCheck; // [9904]
	int MagiUpPerkFactor; // [9905]
	int MagiUpPerkBaseFactor; // [9906]
	int StamUpgradeHPComboCheck; // [9907]
	int StamUpgradeHPPerkFactor; // [9908]
	int StamUpgradeHPPerkBaseFactor; // [9909]
	int StamUpgradeMPComboCheck; // [9910]
	int StamUpgradeMPPerkFactor; // [9911]
	int StamUpgradeMPPerkBaseFactor; // [9912]

	int landdmgbonus;
	int heldtime;
	int PrevHealthRatio;
	int PoisonHits;
	int dvds_sceptrestartlvl;
	int SceptreEXPRatio;
	
	int TensionLevel; // [181]
	int TensionTimer; // [183]
	int TensionWarmupTimer; // [185]
	int TensionCooldownTimer; // [186]
	int TensionChargeLoopTimer; // [189]
	int TensionActivePulseTimer; // [190]
	int TensionOverPsycheTimer; // [250]
	int TensionOverchargeTimer; // [251]
	int TensionMaxOverchargeTimer; // [261]
	int TensionMaxOverPsycheTimer; // [262]
	int TensionSpeedRatio; // [193]
	
	int DeathCheck, WasDead;
	int ArcanaRegenDelay;

	String nm, nn, no, np;
	String pm, pn, po, pp;
	
	int PlayerLevel;
	int PlayerMaxHP;
	int MaxHealthLimit;
	int PlayerMaxMP;
	int PlayerAGL;
	int PlayerDEF;
	int PlayerDFT;
	int PlayerSOR;
	int PlayerSTR;
	int PlayerTHE;
	int PlayerJUMP;
	int PlayerAeonPts;
	int PlayerCurrentStamina;
	int CurrentStamina;
	int PlayerMaxStamina;
	int PlayerCurrentMP;
	int PlayerCurrentHealth;
	int IsFocusOn;
	int FocusTimer;
	int FocusHumTimer;
	int BaseSceptreEXP;
	int SceptreLevelEXP;

	int SkillFactor;
	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int HellcoreOverheatLevel;
	int ClassicDoomType;
	int ModType;
	
	int buttons;
	int FreezePlayer;
	int Player1TID;
	
	int EvasionRate; // Based on 0.1% to 100.0% [though the displays only show full %]
	int AglEvadeCheck, DftEvadeCheck;

	int ArmorResistance;
	int BasePerkFactor;
	int PerkFactor;
	int TotalMass;
	int delaycount;
	int HealthRatio;
	int previousdelaycount;
	int ArmorBits;
	
	int minigunheat;
	int minigunheatmax;

	int MaxHealthTrue;
	int MaxMana;
	int MortalHitSurviveRate;
	int AGL, DEF, DFT, SOR, STR, THE, AeonPts;

	int HellcoreCoolRatio;
	
	int perks3mastered;
	int aeonptsperksused;
	int LifeUpPerkLvl;
	int LifeUpExPerkLvl;
	int MagiUpPerkLvl;
	int MagiUpExPerkLvl;
	int StamUpPerkLvl;
	int StamUpEXPerkLvl;
	int DodgeMorePerkLvl;
	int DodgeMoreEXPerkLvl;
	int JmpMorePerkLvl;
	int JmpMoreEXPerkLvl;
	int PsychFstPerkLvl;
	int PsychFstEXPerkLvl;
	int RegHPFstPerkLvl;
	int RegHPFstEXPerkLvl;
	int RegMPFstPerkLvl;
	int RegMPFstEXPerkLvl;
	int RegStamFastLvl;
	int RegStamFastEXLvl;
	int BulletAccPerkLvl;
	int BulletAccEXPerkLvl;
	//
	int OTMPerkLvl;
	int OTMEXPerkLvl;
	//
	int WandMastPerkLvl;
	int WandMastEXPerkLvl;
	int ClearMindPerkLvl;
	int ClearMindEXPerkLvl;
	
	int StrifeStamLvl;
	int StrifeAccuLvl;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, APPackCheck5, APPackCheck6, APPackCheck7, APPackCheck8, APPackCheck9, APPackCheck10, APPackCheck11, APPackCheck12;
	private class<Inventory> iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4, iDTech1Check5, iDTech1Check6, iDTech1Check7, iDTech1Check8, iDTech1Check9, iDTech1Check10, iDTech1Check11, iDTech1Check12;
	
	override void DoEffect()
	{
		Player1TID = 1001;
		let playeractor = AetheriusPlayerPawn(owner);
		if (!playeractor) { owner.A_SetInventory("PlayerStatItem",0); super.DoEffect(); } // Removes itself if given to a non-Aetherius Player Class

		let weapon = owner.player.ReadyWeapon;
		buttons = owner.GetPlayerInput(INPUT_BUTTONS);
		
		CharacterClass = CallACS("CheckCharacterClass");
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		TensionSpeedRatio = dvds_tensionspeed;
		PlayerLevel = CallACS("StatCheck",0);
		PlayerMaxHP = CallACS("StatCheck",1);
		MaxHealthLimit = PlayerMaxHP * 2;
		PlayerMaxMP = CallACS("StatCheck",2);
		PlayerAGL = CallACS("StatCheck",3);
		PlayerDEF = CallACS("StatCheck",4);
		PlayerDFT = CallACS("StatCheck",5);
		PlayerSOR = CallACS("StatCheck",6);
		PlayerSTR = CallACS("StatCheck",7);
		PlayerTHE = CallACS("StatCheck",8);
		PlayerJUMP = CallACS("StatCheck",9);
		PlayerAeonPts = CallACS("StatCheck",11);
		PlayerCurrentStamina = CallACS("StatCheck",12);
		CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		PlayerMaxStamina = CallACS("StatCheck",13);
		PlayerCurrentMP = CallACS("StatCheck",14);
		PlayerCurrentHealth = owner.health;
		IsFocusOn = CallACS("MiscVarCheckDECORATE",212);
		FocusTimer = CallACS("MiscVarCheckDECORATE",231);

		ClassCheck = CallACS("OtherVarCheckDECORATE",4);
		CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		ModType = CallACS("OtherVarCheckDECORATE",8);
		TrueGameSkill = dvds_gendifficultycurve + Skill;

		BasePerkFactor = 0;
		PerkFactor = 0;
		TotalMass = 100;
		previousdelaycount = 0;

		minigunheat = Owner.CountInv("MinigunHeat");
		minigunheatmax = 100;
		
		// Perks
		perks3mastered;
		LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		MagiUpPerkLvl = CallACS("MiscVarCheckDECORATE",10003);
		MagiUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10004);
		StamUpPerkLvl = CallACS("MiscVarCheckDECORATE",10005);
		StamUpEXPerkLvl = CallACS("MiscVarCheckDECORATE",10006);
		DodgeMorePerkLvl = CallACS("MiscVarCheckDECORATE",10007);
		DodgeMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10008);
		JmpMorePerkLvl = CallACS("MiscVarCheckDECORATE",10009);
		JmpMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10010);
		PsychFstPerkLvl = CallACS("MiscVarCheckDECORATE",10011);
		PsychFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10012);
		RegHPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10013);
		RegHPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10014);
		RegMPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10015);
		RegMPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10016);
		RegStamFastLvl = CallACS("MiscVarCheckDECORATE",10017);
		RegStamFastEXLvl = CallACS("MiscVarCheckDECORATE",10018);
		BulletAccPerkLvl = CallACS("MiscVarCheckDECORATE",10019);
		BulletAccEXPerkLvl = CallACS("MiscVarCheckDECORATE",10020);
		//
		OTMPerkLvl = CallACS("MiscVarCheckDECORATE",10045);
		OTMEXPerkLvl = CallACS("MiscVarCheckDECORATE",10046);
		//
		WandMastPerkLvl = CallACS("MiscVarCheckDECORATE",10053);
		WandMastEXPerkLvl = CallACS("MiscVarCheckDECORATE",10054);
		ClearMindPerkLvl = CallACS("MiscVarCheckDECORATE",10055);
		ClearMindEXPerkLvl = CallACS("MiscVarCheckDECORATE",10056);
		
		// Strife
		StrifeStamLvl = CallACS("MiscVarCheckDECORATE",317);
		StrifeAccuLvl = CallACS("MiscVarCheckDECORATE",318);
		
		// Buff Checks
		int FlightTimer = CallACS("GetBuffTimer",2);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int GoETimer = CallACS("GetBuffTimer",129);
		
		
		
		
		//**********************
		//*Initialization Stuff*
		//**********************
		if (playeractor)
		{
			if (ClassCheck == 0) // Will run the check only once at the beginning of a new game
			{
				CallACS("MiscVarSetDECORATE",1999,-1);
				CallACS("MiscVarSetDECORATE",2000,dvds_newhud);
			}
			// Check for HUD type settings
			if (CallACS("MiscVarCheckDECORATE",1999) == -1)
			{
			}
			if (ClassCheck == 1) // Will run the check only once at the beginning of a new game
			{
				// Hacky Way to assume the player has some trace of all ammo items in their inventory listing [so it can be counted on the stats screen before getting ammo proper]
				pm = "DiarisArrow"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "PoisonNeedleAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "Clip"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "Shell"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "RocketAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "Cell"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "GoldWandAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "CrossbowAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "BlasterAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "PhoenixRodAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "SkullRodAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "MaceAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "ElectricBolts"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "PoisonBolts"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "ClipOfBullets"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "MiniMissiles"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "EnergyPod"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "HEGrenadeRounds"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "PhosphorusGrenadeRounds"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "RifleAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "PopcornPiece"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "GoreBalloons"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "CGrenadeAmmo"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "ClownSouls"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }
				pm = "CZBall"; iDTech1Check = pm; if (CountInv(iDTech1Check) <= 0) { owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1); }

				owner.A_GiveInventory("GreaterVimstone",1);  owner.A_TakeInventory("GreaterVimstone",1);
				owner.A_GiveInventory("LesserVimstone",1);  owner.A_TakeInventory("LesserVimstone",1);
				owner.A_GiveInventory("MonsterMunchies",1);  owner.A_TakeInventory("MonsterMunchies",1);
				owner.A_GiveInventory("MercuryBandana",1);  owner.A_TakeInventory("MercuryBandana",1);
				owner.A_GiveInventory("PaxaPunch",1);  owner.A_TakeInventory("PaxaPunch",1);
				owner.A_GiveInventory("RockbombShard",1);  owner.A_TakeInventory("RockbombShard",1);
				owner.A_GiveInventory("YggdrasilDew",1);  owner.A_TakeInventory("YggdrasilDew",1);
				owner.A_GiveInventory("MiraclePotion",1);  owner.A_TakeInventory("MiraclePotion",1);
				owner.A_GiveInventory("ElfinElixir",1);  owner.A_TakeInventory("ElfinElixir",1);
				owner.A_GiveInventory("SageElixir",1);  owner.A_TakeInventory("SageElixir",1);
				owner.A_GiveInventory("MagicWater",1);  owner.A_TakeInventory("MagicWater",1);
				owner.A_GiveInventory("SpecialMedicine",1);  owner.A_TakeInventory("SpecialMedicine",1);
				owner.A_GiveInventory("StrongMedicine",1);  owner.A_TakeInventory("StrongMedicine",1);
				owner.A_GiveInventory("MedicinalHerb",1);  owner.A_TakeInventory("MedicinalHerb",1);
				if (ClassicDoomType == 2) // Heretic
				{
					pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiInvisibilityNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiEggNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
				}
				if (ClassicDoomType == 3) // Hexen
				{
					pm = "ArtiInvulnerability2New"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiPorkNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiDarkServantNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportOtherNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiBoostManaNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealingRadiusNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
				}
				if (ClassicDoomType == 4) // Strife
				{
					pm = "DegninOreNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "TeleporterBeaconNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ShadowArmorNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "EnvironmentalSuitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "TargeterNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ScannerNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "SurgeryKitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "MedicalKitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "MedPatchNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);

					pm = "Coin"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					if (TrueGameSkill <= SKILL_VERY_EASY) owner.A_GiveInventory(iDTech1Check,random[statitem](175,225));
					if (TrueGameSkill == SKILL_EASY) owner.A_GiveInventory(iDTech1Check,random[statitem](150,200));
					if (TrueGameSkill == SKILL_NORMAL) owner.A_GiveInventory(iDTech1Check,random[statitem](125,175));
					if (TrueGameSkill == SKILL_HARD) owner.A_GiveInventory(iDTech1Check,random[statitem](100,150));
					if (TrueGameSkill == SKILL_VERY_HARD) owner.A_GiveInventory(iDTech1Check,random[statitem](50,100));
					if (TrueGameSkill == SKILL_EXTREME) owner.A_GiveInventory(iDTech1Check,random[statitem](40,80));
					if (TrueGameSkill == SKILL_HORRIBLE) owner.A_GiveInventory(iDTech1Check,random[statitem](30,60));
					if (TrueGameSkill == SKILL_IMPOSSIBLE) owner.A_GiveInventory(iDTech1Check,random[statitem](20,40));
					if (TrueGameSkill >= SKILL_OMEGA) owner.A_GiveInventory(iDTech1Check,random[statitem](10,20));
				}

				// Checks initial actorname of the player's PlayerPawn actor in order to assess the right class #. If you want to try to define extra characters, make sure you use the character's Player-class name.
				if (playeractor && playeractor.GetClassName() == "DeggarisMontegger") CharacterClass = 0;
				else if (playeractor && playeractor.GetClassName() == "IlluciaHendershot") CharacterClass = 1;
				else if (playeractor && playeractor.GetClassName() == "FloraBriscoletti") CharacterClass = 2;
				else if (playeractor && playeractor.GetClassName() == "Corvus") CharacterClass = 3;
				else if (playeractor && playeractor.GetClassName() == "Baratus") CharacterClass = 4;
				else if (playeractor && playeractor.GetClassName() == "Parias") CharacterClass = 5;
				else if (playeractor && playeractor.GetClassName() == "Daedolon") CharacterClass = 6;
				else if (playeractor && playeractor.GetClassName() == "StrifeGuy") CharacterClass = 7;
				else if (playeractor && playeractor.GetClassName() == "Ailish") CharacterClass = 8;
				else if (playeractor && playeractor.GetClassName() == "PetraLagerkvist") CharacterClass = 9;
				else { CharacterClass = -1; PlayerMaxHP = 100; }
				if (dvdsdebug_initdisplays) Console.Printf("Class Init: %s, %d", playeractor.GetClassName(), CharacterClass);
				CallACS("CheckCharacterClass",1,CharacterClass); // Sets CharacterClass directly
				
				
				// Initial Stat Calculations
				if (CharacterClass == 0) // Deggaris
				{
					// HP Range
					MaxHealthTrue = (103 + random[statitem](-4,12) * (random[statitem](90,110) / 100) + random[statitem](6,10)); // 96-136 HP [103 Base]

					// MP Range
					MaxMana = (20 + random[statitem](-18,8) * (random[statitem](100,116) / 100) + random[statitem](0,4)); // 2-36 MP [20 Base]

					// Mortal Hit Survivality Rate [x.x% format] (Deggaris is the lowest ranking in Base Survivability)
					MortalHitSurviveRate = 32 + random[statitem](-16,16); // [1.6%-4.8%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);

					// Seed Stat Randomization
					AGL = random[statitem](1,3); // Agility [31]
					DEF = random[statitem](4,6); // Defense [32]
					DFT = random[statitem](2,4); // Deftness [33]
					SOR = random[statitem](1,3); // Sorcery [34]
					STR = random[statitem](5,7); // Strength [35]
					THE = random[statitem](2,4); // Therapeusis [36]
				}
				if (CharacterClass == 1) // Illucia
				{
					// HP Range
					MaxHealthTrue = (81 + random[statitem](-8,8) * (random[statitem](90,110) / 100) + random[statitem](3,7)); // 69-104 HP [81 Base]

					// MP Range
					MaxMana = (26 + random[statitem](-13,13) * (random[statitem](116,132) / 100) + random[statitem](3,7)); // 18-58 MP [26 Base]

					// Mortal Hit Survivality Rate [x.x% format] (Illucia is the highest ranking in Base Survivability)
					MortalHitSurviveRate = 46 + random[statitem](-16,16); // [3.0%-6.2%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);

					// Seed Stat Randomization
					AGL = random[statitem](3,5); // Agility [31]
					DEF = random[statitem](2,4); // Defense [32]
					DFT = random[statitem](2,4); // Deftness [33]
					SOR = random[statitem](3,5); // Sorcery [34]
					STR = random[statitem](3,5); // Strength [35]
					THE = random[statitem](2,4); // Therapeusis [36]
				}
				// Deggaris and Illucia get the same randomizations to stats and armor type setups
				if (CharacterClass == 0 || CharacterClass == 1)
				{
					int ArmorAmt;
					if (TrueGameSkill <= SKILL_VERY_EASY) // 33-57
					{
						AGL += random[statitem](3,5); // Agility
						DEF += random[statitem](3,5); // Defense
						DFT += random[statitem](3,5); // Deftness
						SOR += random[statitem](3,5); // Sorcery
						STR += random[statitem](3,5); // Strength
						THE += random[statitem](3,5); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
						owner.A_SetInventory("DSBlueArmorClass", 1);
						ArmorAmt = 200; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSGreenArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_EASY) // 21-45
					{
						AGL += random[statitem](1,3); // Agility
						DEF += random[statitem](1,3); // Defense
						DFT += random[statitem](1,3); // Deftness
						SOR += random[statitem](1,3); // Sorcery
						STR += random[statitem](1,3); // Strength
						THE += random[statitem](1,3); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
						owner.A_SetInventory("DSBlueArmorClass", 1);
						ArmorAmt = 150; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSGreenArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_NORMAL) // 15-45
					{
						AGL += random[statitem](0,3); // Agility
						DEF += random[statitem](0,3); // Defense
						DFT += random[statitem](0,3); // Deftness
						SOR += random[statitem](0,3); // Sorcery
						STR += random[statitem](0,3); // Strength
						THE += random[statitem](0,3); // Therapeusis
					
						if (random[statitem](0,1) == 0)
						{
							CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
							CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
							owner.A_SetInventory("DSBlueArmorClass", 1);
							ArmorAmt = 100; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
							owner.A_SetInventory("DSNoArmorClass", 0);
							owner.A_SetInventory("DSGreenArmorClass", 0);
							owner.A_SetInventory("DSStoneArmorClass1", 0);
							owner.A_SetInventory("DSDiamondArmorClass1", 0);
							owner.A_SetInventory("DSStoneArmorClass2", 0);
							owner.A_SetInventory("DSDiamondArmorClass2", 0);
						}
						else
						{
							CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
							CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
							owner.A_SetInventory("DSGreenArmorClass", 1);
							ArmorAmt = 100; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
							owner.A_SetInventory("DSNoArmorClass", 0);
							owner.A_SetInventory("DSBlueArmorClass", 0);
							owner.A_SetInventory("DSStoneArmorClass1", 0);
							owner.A_SetInventory("DSDiamondArmorClass1", 0);
							owner.A_SetInventory("DSStoneArmorClass2", 0);
							owner.A_SetInventory("DSDiamondArmorClass2", 0);
						}
					}
					if (TrueGameSkill == SKILL_HARD) // 15-39
					{
						AGL += random[statitem](0,2); // Agility
						DEF += random[statitem](0,2); // Defense
						DFT += random[statitem](0,2); // Deftness
						SOR += random[statitem](0,2); // Sorcery
						STR += random[statitem](0,2); // Strength
						THE += random[statitem](0,2); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 50; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 9-33
					{
						AGL += random[statitem](0,1); // Agility
						DEF += random[statitem](0,1); // Defense
						DFT += random[statitem](0,1); // Deftness
						SOR += random[statitem](0,1); // Sorcery
						STR += random[statitem](0,1); // Strength
						THE += random[statitem](0,1); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 25; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_EXTREME) // 9-33
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 20; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 15; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 10; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random[statitem](-2,0); // Agility
						DEF += random[statitem](-2,0); // Defense
						DFT += random[statitem](-2,0); // Deftness
						SOR += random[statitem](-2,0); // Sorcery
						STR += random[statitem](-2,0); // Strength
						THE += random[statitem](-2,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_SetInventory("DSGreenArmorClass", 1);
						ArmorAmt = 5; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
				}
				if (CharacterClass == 2) // Flora
				{
					// HP Range
					MaxHealthTrue = (73 + random[statitem](-12,4) * (random[statitem](90,110) / 100) + random[statitem](0,4)); // 55-88 HP [73 Base]

					// MP Range
					MaxMana = (35 + random[statitem](-8,18) * (random[statitem](132,164) / 100) + random[statitem](6,10)); // 35-79 MP [35 Base]

					// Mortal Hit Survivability Rate [x.x% format] (Flora is the middle ranking in Base Survivability)
					MortalHitSurviveRate = 39 + random[statitem](-16,16); // [3.0%-6.2%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Randomization
					AGL = random[statitem](5,7); // Agility [31]
					DEF = random[statitem](1,3); // Defense [32]
					DFT = random[statitem](4,6); // Deftness [33]
					SOR = random[statitem](4,6); // Sorcery [34]
					STR = random[statitem](1,3); // Strength [35]
					THE = random[statitem](3,5); // Therapeusis [36]
					BaseSceptreEXP = 312;
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 33-57
					{
						AGL += random[statitem](3,5); // Agility
						DEF += random[statitem](3,5); // Defense
						DFT += random[statitem](3,5); // Deftness
						SOR += random[statitem](3,5); // Sorcery
						STR += random[statitem](3,5); // Strength
						THE += random[statitem](3,5); // Therapeusis
						BaseSceptreEXP = 240;
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random[statitem](1,3); // Agility
						DEF += random[statitem](1,3); // Defense
						DFT += random[statitem](1,3); // Deftness
						SOR += random[statitem](1,3); // Sorcery
						STR += random[statitem](1,3); // Strength
						THE += random[statitem](1,3); // Therapeusis
						BaseSceptreEXP = 288;
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random[statitem](0,3); // Agility
						DEF += random[statitem](0,3); // Defense
						DFT += random[statitem](0,3); // Deftness
						SOR += random[statitem](0,3); // Sorcery
						STR += random[statitem](0,3); // Strength
						THE += random[statitem](0,3); // Therapeusis
						BaseSceptreEXP = 312;
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random[statitem](0,3); // Agility
						DEF += random[statitem](0,3); // Defense
						DFT += random[statitem](0,3); // Deftness
						SOR += random[statitem](0,3); // Sorcery
						STR += random[statitem](0,3); // Strength
						THE += random[statitem](0,3); // Therapeusis
						BaseSceptreEXP = 312;
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random[statitem](0,2); // Agility
						DEF += random[statitem](0,2); // Defense
						DFT += random[statitem](0,2); // Deftness
						SOR += random[statitem](0,2); // Sorcery
						STR += random[statitem](0,2); // Strength
						THE += random[statitem](0,2); // Therapeusis
						BaseSceptreEXP = 336;
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random[statitem](0,1); // Agility
						DEF += random[statitem](0,1); // Defense
						DFT += random[statitem](0,1); // Deftness
						SOR += random[statitem](0,1); // Sorcery
						STR += random[statitem](0,1); // Strength
						THE += random[statitem](0,1); // Therapeusis
						BaseSceptreEXP = 384;
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
						BaseSceptreEXP = 408;
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
						BaseSceptreEXP = 432;
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
						BaseSceptreEXP = 456;
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random[statitem](-2,0); // Agility
						DEF += random[statitem](-2,0); // Defense
						DFT += random[statitem](-2,0); // Deftness
						SOR += random[statitem](-2,0); // Sorcery
						STR += random[statitem](-2,0); // Strength
						THE += random[statitem](-2,0); // Therapeusis
						BaseSceptreEXP = 480;
					}
					
					// Ensures Flora will not start off with armor. :P
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_SetInventory("Armor", 0);
					owner.A_SetInventory("BasicArmor", 0);
					owner.A_SetInventory("DSNoArmorClass", 1);
					owner.A_SetInventory("DSGreenArmorClass", 0);
					owner.A_SetInventory("DSBlueArmorClass", 0);
					owner.A_SetInventory("DSStoneArmorClass1", 0);
					owner.A_SetInventory("DSDiamondArmorClass1", 0);
					owner.A_SetInventory("DSStoneArmorClass2", 0);
					owner.A_SetInventory("DSDiamondArmorClass2", 0);
					
					if (dvds_sceptrestartlvl < 0) dvds_sceptrestartlvl = 0;
					if (dvds_sceptrestartlvl > 16) dvds_sceptrestartlvl = 16;
					while (dvds_sceptrestartlvl > 0)
					{
						SceptreEXPRatio += dvds_sceptrestartlvl;
						dvds_sceptrestartlvl -= 1;
					}
					SceptreLevelEXP = BaseSceptreEXP * SceptreEXPRatio;
					CallACS("OtherVarSetDECORATE",10,SceptreLevelEXP);
					
					// Mod Type Checks
					if (ModType == 0) // Classic Mode
					{
						if (dvds_florastartpoisonneedle)
						{
							owner.A_SetInventory("PoisonNeedle",1);
							if (dvds_florastartextrapoisonneedles > 0) owner.A_SetInventory("PoisonNeedleAmmo",dvds_florastartextrapoisonneedles);
							if (owner.CountInv("SceptreOfEmpyrea") < 1) owner.A_SelectWeapon("PoisonNeedle");
						}
						if (dvds_florastartsapphirewand)
						{
							owner.A_SetInventory("SapphireWandNew",1);
							if (dvds_florastartsapphirewand > 1) owner.A_SetInventory("DualSapphireWandsNew",1);
						}
						if (dvds_florastartdiarislongbow)
						{
							owner.A_SetInventory("DiarisLongbow",1);
							owner.A_SetInventory("DiarisArrow",0);
						}
					
						// Individual Game Checks
						if (ClassicDoomType == 2) // Heretic
						{
							if (dvds_florastartelvenwands >= 1) 
							{
								nm = "GoldWandNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartelvenwands >= 2) 
							{
								nm = "DualGoldWandNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartcrossbows >= 1) 
							{
								nm = "CrossbowNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartcrossbows >= 2) 
							{
								nm = "DualCrossbowNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartscrossbows >= 1) 
							{
								nm = "SuperCrossbowNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartscrossbows >= 2) 
							{
								nm = "DualSuperCrossbowNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartdragonclaws >= 1) 
							{
								nm = "DragonClawNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartdragonclaws >= 2) 
							{
								nm = "DualDragonClawNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastarthellstaves >= 1) 
							{
								nm = "HellStaffNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastarthellstaves >= 2) 
							{
								nm = "DualHellStaffNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartphoenixrods >= 1) 
							{
								nm = "PhoenixRodNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartphoenixrods >= 2) 
							{
								nm = "DualPhoenixRodNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartfiremaces >= 1) 
							{
								nm = "FiremaceNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartfiremaces >= 2) 
							{
								nm = "DualFiremaceNew"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartdsparilstaves >= 1) 
							{
								nm = "DSparilStaff"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
							if (dvds_florastartdsparilstaves >= 2) 
							{
								nm = "DualDSparilStaff"; APPackCheck = nm;
								owner.A_SetInventory(APPackCheck,1);
							}
						}
					}
					
					if (dvds_florastartsceptre || ModType != 0)
					{
						owner.A_SetInventory("SceptreOfEmpyrea",1);
						owner.A_SelectWeapon("SceptreOfEmpyrea");
					}
				}
				if (CharacterClass == 8) // Ailish
				{
					// HP Range
					MaxHealthTrue = (63 + random[statitem](-12,4) * (random[statitem](90,110) / 100) + random[statitem](0,3)); //
					
					// MP Range
					MaxMana = (43 + random[statitem](-8,18) * (random[statitem](132,164) / 100) + random[statitem](6,10)); //
					
					// Mortal Hit Survivality Rate [x.x% format] (Ailish's survivability rate is the lowest of the playables at this point)
					MortalHitSurviveRate = 18 + random[statitem](-16,16); // [0.2%-3.4%]
					CallACS("MiscVarsETDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Ranomization
					AGL = random[statitem](5,7); // Agility
					DEF = random[statitem](1,3); // Defense
					DFT = random[statitem](4,6); // Deftness
					SOR = random[statitem](4,6); // Sorcery
					STR = random[statitem](1,3); // Strength
					THE = random[statitem](3,5); // Therapeusis
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 37-60
					{
						AGL += random[statitem](3,5); // Agility
						DEF += random[statitem](3,5); // Defense
						DFT += random[statitem](3,5); // Deftness
						SOR += random[statitem](3,5); // Sorcery
						STR += random[statitem](3,5); // Strength
						THE += random[statitem](3,5); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random[statitem](1,3); // Agility
						DEF += random[statitem](1,3); // Defense
						DFT += random[statitem](1,3); // Deftness
						SOR += random[statitem](1,3); // Sorcery
						STR += random[statitem](1,3); // Strength
						THE += random[statitem](1,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random[statitem](0,3); // Agility
						DEF += random[statitem](0,3); // Defense
						DFT += random[statitem](0,3); // Deftness
						SOR += random[statitem](0,3); // Sorcery
						STR += random[statitem](0,3); // Strength
						THE += random[statitem](0,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random[statitem](0,2); // Agility
						DEF += random[statitem](0,2); // Defense
						DFT += random[statitem](0,2); // Deftness
						SOR += random[statitem](0,2); // Sorcery
						STR += random[statitem](0,2); // Strength
						THE += random[statitem](0,2); // Therapeusis
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random[statitem](-2,0); // Agility
						DEF += random[statitem](-2,0); // Defense
						DFT += random[statitem](-2,0); // Deftness
						SOR += random[statitem](-2,0); // Sorcery
						STR += random[statitem](-2,0); // Strength
						THE += random[statitem](-2,0); // Therapeusis
					}
					
					// Ensures Ailish will not start off with armor. :P
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_SetInventory("Armor", 0);
					owner.A_SetInventory("BasicArmor", 0);
					owner.A_SetInventory("DSNoArmorClass", 1);
					owner.A_SetInventory("DSGreenArmorClass", 0);
					owner.A_SetInventory("DSBlueArmorClass", 0);
					owner.A_SetInventory("DSStoneArmorClass1", 0);
					owner.A_SetInventory("DSDiamondArmorClass1", 0);
					owner.A_SetInventory("DSStoneArmorClass2", 0);
					owner.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CharacterClass == 9) // Petra
				{
					// HP Range
					MaxHealthTrue = (102 + random[statitem](-4,12) * (random[statitem](90,110) / 100) + random[statitem](4,12)); //
					
					// MP Range
					MaxMana = (25 + random[statitem](-12,12) * (random[statitem](114,130) / 100) + random[statitem](3,7)); // 18-55 MP [25 Base]
					
					// Mortal Hit Survivality Rate [x.x% format] (Petra's is the highest of the playables at this point)
					MortalHitSurviveRate = 64 + random[statitem](0,32); // [6.4%-9.6%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Ranomization
					AGL = random[statitem](3,5); // Agility
					DEF = random[statitem](4,6); // Defense
					DFT = random[statitem](2,4); // Deftness
					SOR = random[statitem](3,4); // Sorcery
					STR = random[statitem](1,3); // Strength
					THE = random[statitem](4,6); // Therapeusis
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 37-60
					{
						AGL += random[statitem](3,5); // Agility
						DEF += random[statitem](3,5); // Defense
						DFT += random[statitem](3,5); // Deftness
						SOR += random[statitem](3,5); // Sorcery
						STR += random[statitem](3,5); // Strength
						THE += random[statitem](3,5); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random[statitem](1,3); // Agility
						DEF += random[statitem](1,3); // Defense
						DFT += random[statitem](1,3); // Deftness
						SOR += random[statitem](1,3); // Sorcery
						STR += random[statitem](1,3); // Strength
						THE += random[statitem](1,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random[statitem](0,3); // Agility
						DEF += random[statitem](0,3); // Defense
						DFT += random[statitem](0,3); // Deftness
						SOR += random[statitem](0,3); // Sorcery
						STR += random[statitem](0,3); // Strength
						THE += random[statitem](0,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random[statitem](0,2); // Agility
						DEF += random[statitem](0,2); // Defense
						DFT += random[statitem](0,2); // Deftness
						SOR += random[statitem](0,2); // Sorcery
						STR += random[statitem](0,2); // Strength
						THE += random[statitem](0,2); // Therapeusis
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random[statitem](-1,1); // Agility
						DEF += random[statitem](-1,1); // Defense
						DFT += random[statitem](-1,1); // Deftness
						SOR += random[statitem](-1,1); // Sorcery
						STR += random[statitem](-1,1); // Strength
						THE += random[statitem](-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random[statitem](-1,0); // Agility
						DEF += random[statitem](-1,0); // Defense
						DFT += random[statitem](-1,0); // Deftness
						SOR += random[statitem](-1,0); // Sorcery
						STR += random[statitem](-1,0); // Strength
						THE += random[statitem](-1,0); // Therapeusis
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random[statitem](-2,0); // Agility
						DEF += random[statitem](-2,0); // Defense
						DFT += random[statitem](-2,0); // Deftness
						SOR += random[statitem](-2,0); // Sorcery
						STR += random[statitem](-2,0); // Strength
						THE += random[statitem](-2,0); // Therapeusis
					}
					
					//Like Flora and Ailish, Petra can't use Marine armor.
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_SetInventory("Armor", 0);
					owner.A_SetInventory("BasicArmor", 0);
					owner.A_SetInventory("DSNoArmorClass", 1);
					owner.A_SetInventory("DSGreenArmorClass", 0);
					owner.A_SetInventory("DSBlueArmorClass", 0);
					owner.A_SetInventory("DSStoneArmorClass1", 0);
					owner.A_SetInventory("DSDiamondArmorClass1", 0);
					owner.A_SetInventory("DSStoneArmorClass2", 0);
					owner.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				
				// Post Initial Stat Calculations
				AeonPts += dvds_startingaeonpts;
				AeonPts = (AeonPts * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				AGL = (AGL * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				DEF = (DEF * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				DFT = (DFT * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				SOR = (SOR * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				STR = (STR * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				THE = (THE * dvds_startotherstatsfactor) / 100; // Check Start Other Stats Factor
				CallACS("MiscVarSetDECORATE",25,AeonPts);
				CallACS("MiscVarSetDECORATE",31,AGL);
				CallACS("MiscVarSetDECORATE",32,DEF);
				CallACS("MiscVarSetDECORATE",33,DFT);
				CallACS("MiscVarSetDECORATE",34,SOR);
				CallACS("MiscVarSetDECORATE",35,STR);
				CallACS("MiscVarSetDECORATE",36,THE);

				MaxMana = (MaxMana * dvds_starthpmanafactor) / 100; // Check Start Mana Factor
				if (MaxMana < 1) MaxMana = 1;
				CallACS("OtherVarSetDECORATE",1,MaxMana); // MaxMana
				CallACS("OtherVarSetDECORATE",2,MaxMana); // CurrentMana
				
				if (CharacterClass == 2 || CharacterClass == 8) // Deggaris, Illucia and Petra have an extra randomization to their HP, while Flora and Ailish have a slightly more varied randomization which works more to her favor on easier skill levels.
				{
					if (TrueGameSkill <= SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random[statitem](120,140) / 100;	// 66-118 HP [spread of 52]
					if (TrueGameSkill == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random[statitem](110,130) / 100;		// 60-109 HP [spread of 49]
					if (TrueGameSkill == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random[statitem](100,120) / 100;		// 55-101 HP [spread of 46]
					if (TrueGameSkill == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random[statitem](90,110) / 100; 		// 49-92 HP [spread of 43]
					if (TrueGameSkill == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random[statitem](80,100) / 100;	// 44-84 HP [spread of 40]
					if (TrueGameSkill == SKILL_EXTREME) MaxHealthTrue = MaxHealthTrue * random[statitem](70,90) / 100; 	
					if (TrueGameSkill == SKILL_HORRIBLE) MaxHealthTrue = MaxHealthTrue * random[statitem](60,80) / 100; 	
					if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxHealthTrue = MaxHealthTrue * random[statitem](50,70) / 100; 	
					if (TrueGameSkill >= SKILL_OMEGA) MaxHealthTrue = MaxHealthTrue * random[statitem](40,60) / 100; 	
				}
				else
				{
					if (TrueGameSkill <= SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random[statitem](100,120) / 100;	// Deg: 90-151 HP [spread of 61], Illu: 66-116 HP [spread of 50]
					if (TrueGameSkill == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random[statitem](95,115) / 100;			// Deg: 85-145 HP [spread of 60], Illu: 62-111 HP [spread of 49]
					if (TrueGameSkill == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random[statitem](90,110) / 100;		// Deg: 81-138 HP [spread of 57], Illu: 59-106 HP [spread of 47]
					if (TrueGameSkill == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random[statitem](85,105) / 100; 		// Deg: 76-132 HP [spread of 56], Illu: 56-102 HP [spread of 46]
					if (TrueGameSkill == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random[statitem](80,100) / 100; 	// Deg: 72-126 HP [spread of 54], Illu: 52-97 HP [spread of 45]
					if (TrueGameSkill == SKILL_EXTREME) MaxHealthTrue = MaxHealthTrue * random[statitem](75,95) / 100; 	
					if (TrueGameSkill == SKILL_HORRIBLE) MaxHealthTrue = MaxHealthTrue * random[statitem](70,90) / 100; 	
					if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxHealthTrue = MaxHealthTrue * random[statitem](65,85) / 100; 	
					if (TrueGameSkill >= SKILL_OMEGA) MaxHealthTrue = MaxHealthTrue * random[statitem](60,80) / 100; 	
				}
				MaxHealthTrue = (MaxHealthTrue * dvds_starthpmanafactor) / 100; // Check Start HP Factor
				if (MaxHealthTrue < 1) MaxHealthTrue = 1;
				owner.player.health = owner.player.mo.health = MaxHealthTrue;
				CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
				CallACS("MiscVarSetDECORATE",241,MaxHealthTrue);
				CallACS("MiscVarSetDECORATE",298,MaxHealthTrue); // Set the game's starting Max HP for Sigil damage calculations
			}
			if (ClassCheck == 2) { }
			if (ClassCheck == 3) { }
			if (ClassCheck == 4) { }
			if (ClassCheck == 5) { }
			if (ClassCheck < 6)
			{
				if (CallACS("MiscVarCheckDECORATE",31) < 0) CallACS("MiscVarSetDECORATE",31,0);
				if (CallACS("MiscVarCheckDECORATE",32) < 0) CallACS("MiscVarSetDECORATE",32,0);
				if (CallACS("MiscVarCheckDECORATE",33) < 0) CallACS("MiscVarSetDECORATE",33,0);
				if (CallACS("MiscVarCheckDECORATE",34) < 0) CallACS("MiscVarSetDECORATE",34,0);
				if (CallACS("MiscVarCheckDECORATE",35) < 0) CallACS("MiscVarSetDECORATE",35,0);
				if (CallACS("MiscVarCheckDECORATE",36) < 0) CallACS("MiscVarSetDECORATE",36,0);
				CallACS("MiscVarSetDECORATE",21,CallACS("MiscVarCheckDECORATE",22));
				if (dvdsdebug_initdisplays) Console.Printf("\cxClassCheck:\c- %d", ClassCheck);
			}
			// Mod Type Checks
			if (ClassCheck <= 2)
			{
				owner.A_SetInventory("PlayingDoom2",0);
				owner.A_SetInventory("PlayingDoom1",0);
				owner.A_SetInventory("PlayingHeretic",0);
				owner.A_SetInventory("PlayingHexen",0);
				owner.A_SetInventory("PlayingStrife",0);
				owner.A_SetInventory("PlayingDoom64",0);
				owner.A_SetInventory("PlayingPSXDoom",0);
				owner.A_SetInventory("PlayingDeusVultI",0);
				owner.A_SetInventory("PlayingDeusVultII",0);
				if (ModType == 0) // Classic Mode
				{
					// Individual Game Checks
					if (ClassicDoomType == 0) { owner.A_SetInventory("PlayingDoom2",1); } // Doom 2
					if (ClassicDoomType == 1) { owner.A_SetInventory("PlayingDoom1",1); } // Doom 1
					if (ClassicDoomType == 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
					if (ClassicDoomType == 3) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
					if (ClassicDoomType == 4) { owner.A_SetInventory("PlayingStrife",1); } // Strife
					if (ClassicDoomType == 5) { owner.A_SetInventory("PlayingDoom64",1); } // Doom64
					if (ClassicDoomType == 6) { owner.A_SetInventory("PlayingPSXDoom",1); } // PSXDoom
				}
				else if (ModType == 1) { owner.A_SetInventory("PlayingDeusVultI",1); } // DVI
				else if (ModType == 2) { owner.A_SetInventory("PlayingDeusVultII",1); } // DVII
			}
		}
		
		
		
		
		
		// HUD/Weapon Mana Costs
		A_PSI1DoEffectWeaponManaCostCheck();
		
		
		
		
		
		//**********************
		//**Misc Option Checks**
		//**********************
		A_PSI1DoEffectMiscOptions();
		
		
		
		
		
		//****************************************
		//**Checks for Aeon Point Cost for Perks**
		//****************************************
		CallACS("MiscVarSetDECORATE",280,dvdsperks_costratio);
		
		
		
		
		
		//****************************************************************************************************************************************************************
		//**Checks "user_PlayerDVDSSpecial[]" array on the player actors [used for various things, including disjointed MAP-specfic ACS scripts (TCOTD:A, Unloved, etc)]**
		//****************************************************************************************************************************************************************
		if (playeractor)
		{
			int DVDSSpecialArrayCheck = 0;
			int DVDSArrayValue;
			
			while (DVDSSpecialArrayCheck < 256)
			{
				DVDSArrayValue = playeractor.user_PlayerDVDSSpecial[DVDSSpecialArrayCheck];
				CallACS("DVDSSpecialArraySetDECORATE",DVDSSpecialArrayCheck,DVDSArrayValue);
				//Console.Printf("DVDSSpecialArrayCheck: %d / 256 - (%d)",DVDSSpecialArrayCheck, DVDSArrayValue);
				DVDSSpecialArrayCheck++;
			}
			// DVDSSpecialArrayValue[0] = Off = "Conscious", On = "Unconscious"

			// DVDSSpecialArrayValue[1] = Sets MP/Mana to 0 then unsets itself
			if (CallACS("DVDSSpecialArrayCheckDECORATE",1) > 0)
			{
				CallACS("OtherVarSetDECORATE",2,0);
				CallACS("DVDSSpecialArraySetDECORATE",1,0);
				playeractor.user_PlayerDVDSSpecial[1] = 0;
			}
			// DVDSSpecialArrayValue[2] = Sets Stamina to 0 then unsets itself
			if (CallACS("DVDSSpecialArrayCheckDECORATE",2) > 0)
			{
				CallACS("MiscVarSetDECORATE",21,0);
				CallACS("DVDSSpecialArraySetDECORATE",2,0);
				playeractor.user_PlayerDVDSSpecial[2] = 0;
			}
		
			// DVDSSpecialArrayValue[3] = Unloved Specfic - Makes Hellcore Weapons drop 4x more often, etc :o
			// DVDSSpecialArrayValue[4] = TCOTD:A Specfic
			// DVDSSpecialArrayValue[5] = Circus2 Specfic
			
			// DVDSSpecialArrayValue[6] = Make HUD invisible [for TITLEMAP usage]
			if (CallACS("DVDSSpecialArrayCheckDECORATE",6) > 0) 
			{
				CallACS("MiscVarSetDECORATE",2000,-1);
				CallACS("DVDSSpecialArraySetDECORATE",6,0);
				playeractor.user_PlayerDVDSSpecial[6] = 0;
			}
			// DVDSSpecialArrayValue[7] = Make HUD visible again
			if (CallACS("DVDSSpecialArrayCheckDECORATE",7) > 0) 
			{
				CallACS("MiscVarSetDECORATE",2000,1);
				CallACS("DVDSSpecialArraySetDECORATE",7,0);
				playeractor.user_PlayerDVDSSpecial[7] = 0;
			}
			// DVDSSpecialArrayValue[8] = Remove all weapons [TITLEMAP]
			if (CallACS("DVDSSpecialArrayCheckDECORATE",8) > 0) 
			{
				owner.ClearInventory();
				owner.A_SetInventory("SceptreOfEmpyrea",0);
				CallACS("DVDSSpecialArraySetDECORATE",8,0);
				playeractor.user_PlayerDVDSSpecial[8] = 0;
			}
			
			// DVDSSpecialArrayValue[9] = Prevents Dashing

			// DVDSSpecialArrayValue[10] = KDIZD Specfic
		}
		
		
		
		
		
		//*****************************************************
		//*Checks Flora's EXP for using the Sceptre of Empyrea*
		//*****************************************************
		A_PSI1DoEffectSceptreEXPTables();
		
		
		
		
		
		//******************************
		//** Armor Resistance Numbers **
		//******************************
		A_PSI1DoEffectArmorResNums();
		
		
		
		
		
		//********************
		//**Level Cap Checks**
		//********************
		if (playeractor)
		{
			int LevelCap = CallACS("OtherVarCheckDECORATE",13);
			if (CharacterClass != 2)
			{
				if (CharacterClass != 8 && CharacterClass != 9) { LevelCap = dvds_marines_maxlevel; } // Necessary to prevent the game from giving bogus EXP requirements at level 100-199
				if (CharacterClass == 8) { LevelCap = dvds_ailish_maxlevel; }
				if (CharacterClass == 9) { LevelCap = dvds_petra_maxlevel; }
				if (LevelCap < 0) LevelCap = 0;
				if (LevelCap > 200) LevelCap = 200;
			}
			else
			{
				if (dvds_flora_ignorearmormadelevelcap == 0)
				{
					LevelCap = 100;
					if (owner.CountInv("SafeTeaShoes") > 0) LevelCap += 9;
					if (owner.CountInv("PearlyCorset") > 0) LevelCap += 9;
					if (owner.CountInv("WaterFlyingDress") > 0) LevelCap += 9;
					if (owner.CountInv("EvenstarNecklace") > 0) LevelCap += 9;
					if (owner.CountInv("CloakofEvasion") > 0) LevelCap += 9;
					if (owner.CountInv("AnubisCufflinks") > 0) LevelCap += 9;
					if (owner.CountInv("KissaBra") > 0) LevelCap += 9;
					if (owner.CountInv("BalrogRing") > 0) LevelCap += 9;
					if (owner.CountInv("DoveRibbon") > 0) LevelCap += 9;
					if (owner.CountInv("FalconKnifeEarrings") > 0) LevelCap += 9;
					if (owner.CountInv("DivineShield") > 0) LevelCap += 9;
					if (owner.CountInv("RuinousShield") > 0) LevelCap += 4;
				
					if (LevelCap >= 199) LevelCap = 200;
				}
				else
				{
					LevelCap = dvds_flora_maxlevel;
					if (LevelCap < 0) LevelCap = 0;
					if (LevelCap > 200) LevelCap = 200;
				}
			}
			if (dvdsdebug_levelupdisplays) Console.Printf("LevelCap: %d", LevelCap);
			CallACS("OtherVarSetDECORATE",13,LevelCap);
		}
		
		
		
		
		
		//*****************************
		//* RadSuit Effects via Armor *
		//*****************************
		if (playeractor)
		{
			// Safe Tea Boots [25% chance of damagefloor/ironfeet guard during normal incursion of damage]
			// Cloak of Evasion [12.5% chance of damagefloor/ironfeet guard during normal incursion of damage]
			int IronFeetChance = 0;
			if (owner.CountInv("SafeTeaShoes") > 0) IronFeetChance += 250;
			if (owner.CountInv("CloakOfEvasion") > 0) IronFeetChance += 125;
			if (IronFeetChance > 1000) IronFeetChance = 1000;
			owner.A_SetInventory("FloraArmorFloorGuard",0);
			if (random[statitem](1,1000) <= IronFeetChance) owner.A_SetInventory("FloraArmorFloorGuard",1);
			
			int FearChance = 100;
			if (owner.CountInv("TheOneRing") > 0) FearChance = FearChance * 5 / 3;
			// Anubis Cufflinks [10% (16.667% with One Ring) chance of brief fear-effect on all hostile creatures with attacks]
			owner.A_SetInventory("AnubisCufflinksFear",0);   
			if (owner.CountInv("AnubisCufflinks") > 0 && random[statitem](1,1000) <= FearChance) owner.A_SetInventory("AnubisCufflinksFear",1);
		}
		
		
		
		
		//****************************
		//*Strife Sigil & Flag Checks*
		//****************************
		if (playeractor)
		{
			let sigl = owner.FindInventory("Sigil");
			if (sigl != null)
			{
				//Console.Printf("Sigil Pieces: %d", sigl.health);
				if (sigl.health == 1) owner.A_SetInventory("SigilPhase1", 1); else owner.A_SetInventory("SigilPhase1",0);
				if (sigl.health == 2) owner.A_SetInventory("SigilPhase2", 1); else owner.A_SetInventory("SigilPhase2",0);
				if (sigl.health == 3) owner.A_SetInventory("SigilPhase3", 1); else owner.A_SetInventory("SigilPhase3",0);
				if (sigl.health == 4) owner.A_SetInventory("SigilPhase4", 1); else owner.A_SetInventory("SigilPhase4",0);
				if (sigl.health == 5) owner.A_SetInventory("SigilComplete", 1); else owner.A_SetInventory("SigilComplete",0);
			}

			nm = "BestEndingFlag"; iDTech1Check = nm;
			if (owner.CountInv("QuestItem27") > 0 && owner.CountInv("QuestItem25") > 0) 
			{
				owner.A_SetInventory(iDTech1Check,1);
			}
			else
			{
				owner.A_SetInventory(iDTech1Check,0);
			}
			
			// Checks if you've destroyed the Acolyte Converter in Strife MAP24 [Conversion Chapel] (Flag 25)
			if (StrifeQuestFlag25 == 0)
			{
				if (owner.CountInv("QuestItem25") == 1)
				{
					owner.Stamina -= 10;
					owner.Accuracy -= 10;
					ACS_NamedExecuteAlways("StrifeComboUpgrade",0,1);
					StrifeQuestFlag25++;
				}
			}
			// Checks if you've destroyed the Drone Transmitter in Strife MAP14 [The Mines] (Flag 29)
			if (StrifeQuestFlag29 == 0) 
			{
				if (owner.CountInv("QuestItem29") == 1)
				{
					owner.Stamina -= 10;
					owner.Accuracy -= 10;
					ACS_NamedExecuteAlways("StrifeComboUpgrade",0,1);
					StrifeQuestFlag29++;
				}
			}
		}
		
		
		
		
		
		//*********************
		//*Grand-Mastery Perks*
		//*********************
		if (playeractor)
		{
			perks3mastered = 0;
			if (LifeUpPerkLvl >= 5) perks3mastered++;
			if (MagiUpPerkLvl >= 5) perks3mastered++;
			if (StamUpPerkLvl >= 5) perks3mastered++;
			if (DodgeMorePerkLvl >= 5) perks3mastered++;
			if (JmpMorePerkLvl >= 5) perks3mastered++;
			if (PsychFstPerkLvl >= 5) perks3mastered++;
			if (RegHPFstPerkLvl >= 5) perks3mastered++;
			if (RegMPFstPerkLvl >= 5) perks3mastered++;
			if (RegStamFastLvl >= 5) perks3mastered++;
			if (BulletAccPerkLvl >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10021) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10023) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10025) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10031) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10035) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10037) >= 7) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10043) >= 3) perks3mastered++;
			if (OTMPerkLvl >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10047) >= 5) perks3mastered++;
			if (CharacterClass == 1)
			{
				if (CallACS("MiscVarCheckDECORATE",10049) >= 4) perks3mastered++;
			}
			else
			{
				if (CallACS("MiscVarCheckDECORATE",10049) >= 5) perks3mastered++;
			}
			if (CallACS("MiscVarCheckDECORATE",10050) >= 4) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10051) >= 5) perks3mastered++;
			if (WandMastPerkLvl >= 5) perks3mastered++;
			if (ClearMindPerkLvl >= 5) perks3mastered += 2;
			
			if (perks3mastered >= 15) // Higher Learning Lvl 2 Enabled
			{
				owner.A_GiveInventory("HigherLearning2Gained",1);
				CallACS("MiscVarSetDECORATE",11001,2);
				if (owner.CountInv("HigherLearning2Gained") == 1) owner.A_PlaySound("menu/higherlearning",CHAN_WEAPON,1.75,0,ATTN_NORM);
			}
			else if (perks3mastered >= 5) // Higher Learning Enabled
			{ 
				owner.A_GiveInventory("HigherLearningGained",1);
				CallACS("MiscVarSetDECORATE",11001,1);
				if (owner.CountInv("HigherLearningGained") == 1) owner.A_PlaySound("menu/higherlearning",CHAN_WEAPON,1.5,0,ATTN_NORM);
			}
			else // Higher Learning Disabled
			{ 
				owner.A_SetInventory("HigherLearning2Gained",0);
				owner.A_SetInventory("HigherLearningGained",0);
				CallACS("MiscVarSetDECORATE",11001,0); 
			}
			
			CallACS("MiscVarSetDECORATE",40,perks3mastered);
			
			/*
			// Future Mastery Perk to come for having 768+ Aeon Pts spent on Perks
			aeonptsperksused = CallACS("MiscVarCheckDECORATE",42);
			int perkbasevalue = (768 * dvdsperks_costratio) / 100;
			int perkbasevalue2 = ((768 * 3) * dvdsperks_costratio) / 100;
			if (aeonptsperksused >= perkbasevalue2)
			{
				CallACS("MiscVarSetDECORATE",11002,2); 
			}
			else if (aeonptsperksused >= perkbasevalue)
			{
				CallACS("MiscVarSetDECORATE",11002,1); 
			}
			else
			{
				CallACS("MiscVarSetDECORATE",11002,0); 
			}
			*/
		}
		
		
		
		
		
		//*********************
		//*HP & MP Perk Checks*
		//*********************
		A_PSI1DoEffectHPMPPerkCheck();
		
		
		
		
		
		//****************************
		//*Check EXP Kill Combo Timer*
		//****************************
		A_PSI1DoEffectEXPComboTimer();
		
		
		
		
		
		//****************************************
		//*Get Health Ratio & Health Level Checks*
		//****************************************
		PlayerMaxHP = CallACS("StatCheck",1);
		if (playeractor && PlayerMaxHP > 0)
		{
			HealthRatio = (PlayerCurrentHealth * 1000) / PlayerMaxHP;
			if (HealthRatio < 0) HealthRatio = 0;
			if (HealthRatio > 2000) HealthRatio = 2000;

			if (PlayerCurrentHealth <= 0) { Owner.A_SetInventory("PlayerIsDead", 1); }
			else
			{
				Owner.A_SetInventory("PlayerIsDead", 0);
				if (HealthRatio != PrevHealthRatio)
				{
					if (HealthRatio < 625)
					{
						if (HealthRatio < 167)
						{
							if (HealthRatio < 21)
							{
								Owner.A_SetInventory("CriticalHealth", 1);
								Owner.A_SetInventory("LowHealth", 0);
								Owner.A_SetInventory("DecentHealth", 0);
								Owner.A_SetInventory("NormalHealth", 0);
							}
							else 
							{
								Owner.A_SetInventory("CriticalHealth", 0);
								Owner.A_SetInventory("LowHealth", 1);
								Owner.A_SetInventory("DecentHealth", 0);
								Owner.A_SetInventory("NormalHealth", 0);
							}
						}
						else 
						{
							Owner.A_SetInventory("CriticalHealth", 0);
							Owner.A_SetInventory("LowHealth", 0);
							Owner.A_SetInventory("DecentHealth", 1);
							Owner.A_SetInventory("NormalHealth", 0);
						}
					}
					else
					{
						Owner.A_SetInventory("CriticalHealth", 0);
						Owner.A_SetInventory("LowHealth", 0);
						Owner.A_SetInventory("DecentHealth", 0);
						Owner.A_SetInventory("NormalHealth", 1);
					}
					if (PlayerCurrentHealth >= PlayerMaxHP) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
					
					PrevHealthRatio = HealthRatio;
				}
			}
		}
		
		
		
		
		
		//********************
		//*Skill Level Checks*
		//********************
		if (playeractor)
		{
			if (Skill <= SKILL_VERY_EASY)
			{
				if (Owner.CountInv("IsSkill1") == 0) Owner.A_SetInventory("IsSkill1", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_SetInventory("IsEasySkill", 1);
			}
			if (Skill == SKILL_EASY)
			{
				if (Owner.CountInv("IsSkill2") == 0) Owner.A_SetInventory("IsSkill2", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_SetInventory("IsEasySkill", 1);
			}
			if (Skill == SKILL_NORMAL)
			{
				if (Owner.CountInv("IsSkill3") == 0) Owner.A_SetInventory("IsSkill3", 1);
			}
			if (Skill == SKILL_HARD)
			{
				if (Owner.CountInv("IsSkill4") == 0) Owner.A_SetInventory("IsSkill4", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_SetInventory("IsHardSkill", 1);
			}
			if (Skill == SKILL_VERY_HARD)
			{
				if (Owner.CountInv("IsSkill5") == 0) Owner.A_SetInventory("IsSkill5", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_SetInventory("IsHardSkill", 1);
			}
			if (Skill >= SKILL_EXTREME)
			{
				if (Owner.CountInv("IsSkill6") == 0) Owner.A_SetInventory("IsSkill6", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_SetInventory("IsHardSkill", 1);
			}
		}
		
		
		
		
		
		//**********************
		//**RadiusDamageFactor**
		//**********************
		A_PSI1DoEffectRadDmgFactor();
		
		
		
		
		
		//*************
		//**Mass Calc**
		//*************
		A_PSI1DoEffectMassCalc();
		
		
		
		
		
		//**************
		//**JumpZ Calc**
		//**************
		A_PSI1DoEffectJumpCalc();
		
		
		
		
		
		//**********************
		//**Survival Rate Calc**
		//**********************
		A_PSI1DoEffectSurviveCalc();
		
		
		
		
		
		//*******************
		//*RUINOUS SHIELD D:*
		//*******************
		A_PSI1DoEffectUncurseShield();
		
		
		
		
		
		//******************************************************
		//*Hellcore Cooldown Process [25 tics = 1% of cooldown]*
		//******************************************************
		A_PSI1DoEffectHellcoreCool();
		
		
		
		
		
		//****************
		//**Weapon Slots**
		//****************
		A_PSI1DoEffectWeaponSlot();
		
		
		
		
		
		//**************************
		//**Critical Hit Calc/Roll**
		//**************************
		A_PSI1DoEffectCritCalc();
		
		
		
		
		
		//*********************************
		//*Check Sauron Equipment Directly*
		//*********************************
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
		if (playeractor)
		{
			if (CharacterClass == 0) // Deggaris's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_SetInventory("SauronGauntletsItem", 1); } else { Owner.A_SetInventory("SauronGauntletsItem", 0); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_SetInventory("SauronGauntletsIllucia", 0); Owner.A_SetInventory("SauronGauntlets", 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_SetInventory("SauronGauntletsFlora", 0); Owner.A_SetInventory("SauronGauntlets", 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_SetInventory(APPackCheck, 0); Owner.A_SetInventory("SauronGauntlets", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_SetInventory(APPackCheck2, 0); Owner.A_SetInventory("SauronGauntlets", 1); }
			}
			if (CharacterClass == 1) // Illucia's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_SetInventory("SauronGauntlets", 0); Owner.A_SetInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_SetInventory("SauronGauntletsItem", 1); } else { Owner.A_SetInventory("SauronGauntletsItem", 0); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_SetInventory("SauronGauntletsFlora", 0); Owner.A_SetInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_SetInventory(APPackCheck, 0); Owner.A_SetInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_SetInventory(APPackCheck2, 0); Owner.A_SetInventory("SauronGauntletsIllucia", 1); }
			}
			if (CharacterClass == 2) // Flora's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_SetInventory("SauronGauntlets", 0); Owner.A_SetInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_SetInventory("SauronGauntletsIllucia", 0); Owner.A_SetInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_SetInventory("SauronGauntletsItem", 1); } else { Owner.A_SetInventory("SauronGauntletsItem", 0); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_SetInventory(APPackCheck, 0); Owner.A_SetInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_SetInventory(APPackCheck2, 0); Owner.A_SetInventory("SauronGauntletsFlora", 1); }
			}
			if (CharacterClass == 8) // Ailish's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_SetInventory("SauronGauntlets", 0); Owner.A_SetInventory(APPackCheck, 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_SetInventory("SauronGauntletsIllucia", 0); Owner.A_SetInventory(APPackCheck, 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_SetInventory("SauronGauntletsFlora", 0); Owner.A_SetInventory(APPackCheck, 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_SetInventory("SauronGauntletsItem", 1); } else { Owner.A_SetInventory("SauronGauntletsItem", 0); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_SetInventory(APPackCheck2, 0); Owner.A_SetInventory(APPackCheck, 1); }
			}
			if (CharacterClass == 9) // Petra's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_SetInventory("SauronGauntlets", 0); Owner.A_SetInventory(APPackCheck2, 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_SetInventory("SauronGauntletsIllucia", 0); Owner.A_SetInventory(APPackCheck2, 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_SetInventory("SauronGauntletsFlora", 0); Owner.A_SetInventory(APPackCheck2, 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_SetInventory(APPackCheck, 0); Owner.A_SetInventory(APPackCheck2, 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_SetInventory("SauronGauntletsItem", 1); } else { Owner.A_SetInventory("SauronGauntletsItem", 0); }
			}
			
			if (Owner.CountInv("TheOneRing") > 0)
			{
				Owner.A_SetInventory("RingFullMap", 1); // All characters get a full automap with the Ring
				Owner.A_SetInventory("RingScanner", 1); // All characters get a map scanner with the Ring
				if (CharacterClass == 0) Owner.A_SetInventory("RingGhost", 1); // Deggaris becomes Ghostly like with the Ring
				if (CharacterClass == 1) Owner.A_SetInventory("RingShadow", 1); // Illucia becomes Shadow like with the Ring 
			}
			else
			{
				Owner.A_SetInventory("RingFullMap", 0);
				Owner.A_SetInventory("RingScanner", 0);
				Owner.A_SetInventory("RingGhost", 0);
				Owner.A_SetInventory("RingShadow", 0);
			}
		}
		
		
		
		
		
		//***********************
		//*Infinite Ammo Chances*
		//***********************
		A_PSI1DoEffectInfAmmo();
		
		
		
		
		//****************************************
		//**IronFeet/Mask Implementation Effects**
		//****************************************
		if (playeractor)
		{
			if (Owner.CountInv("PowerIronFeet") > 0 || Owner.CountInv("AetheriusPowerIronFeet") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_SetInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_SetInventory("MaskNoFire",0);
			}
			else if (Owner.CountInv("PowerMask") > 0 || Owner.CountInv("AetheriusPowerMask") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_SetInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") == 0) Owner.A_SetInventory("MaskNoFire",1);
			}
			else
			{
				if (Owner.CountInv("IronFeetNoPoison") > 0) Owner.A_SetInventory("IronFeetNoPoison",0);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_SetInventory("MaskNoFire",0);
			}
		}
		
		
		
		
		
		//***********
		//**Evasion**
		//***********
		A_PSI1DoEffectEvasionStuff();
		
		
		
		
		
		//*********************
		//*Check Tension Level*
		//*********************
		A_PSI1DoEffectTensionStuff();
		
		
		
		
		
		//*********************
		//*Check Tension Auras*
		//*********************
		A_PSI1DoEffectTensionAuras();
		
		
		
		
		
		//*************************************
		//*Blacken Screen if Blinded or Asleep*
		//*************************************
		if (playeractor)
		{
			if (CallACS("GetBuffTimer",19) > 0) owner.A_SetBlend("00 00 00", 0.975, 25); // Constant Run
			if (SleepTimer > 0) owner.A_SetBlend("00 00 00", 0.9875, 25); // Constant Run
		}
		
		
		
		
		
		if (playeractor)
		{
			let playerarmor = BasicArmor(Owner.FindInventory("BasicArmor"));
			if (playerarmor != null)
			{
				if (dvdsdebug_armorbonusdisplays) 
				{
					Console.Printf("ArmorType: %s", playerarmor.ArmorType);
					if (playerarmor.ArmorType != 'None')
					{
						Console.Printf("SavePercent: %6f", (playerarmor.SavePercent*100));
						Console.Printf("Amount / MaxAmount: %d / %d", playerarmor.Amount, playerarmor.MaxAmount);
						if (playerarmor.bonuscount != 0) Console.Printf("BonusCount: %d", playerarmor.BonusCount);
						if (playerarmor.MaxAbsorb != 0) Console.Printf("MaxAbsorb: %d", playerarmor.MaxAbsorb);
						if (playerarmor.MaxFullAbsorb != 0) Console.Printf("MaxFullAbsorb: %d", playerarmor.MaxFullAbsorb);
						if (playerarmor.AbsorbCount != 0) Console.Printf("AbsorbCount: %d", playerarmor.AbsorbCount);
					}
				}
			}
		}
		
		
		
		
		
		//*******************
		//*Whistle Countdown*
		//*******************
		if (playeractor && PlayerCurrentHealth > 0 && CallACS("MiscVarCheckDECORATE",168) > 0) CallACS("MiscVarSetDECORATE",168,-1,1);
		
		
		
		
		
		//**************************************************************************************************************
		//*DQ-Style Seed System [DROPPED Versions only, naturally added Seeds/etc do not get despawned via this system]*
		//**************************************************************************************************************
		if (playeractor)
		{
			int SeedLimit = CallACS("MiscVarCheckDECORATE",29);
			// for the Seed limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) SeedLimit = 128;
			if (TrueGameSkill == SKILL_EASY) SeedLimit = 120;
			if (TrueGameSkill == SKILL_NORMAL) SeedLimit = 112;
			if (TrueGameSkill == SKILL_HARD) SeedLimit = 104;
			if (TrueGameSkill == SKILL_VERY_HARD) SeedLimit = 96;
			if (TrueGameSkill == SKILL_EXTREME) SeedLimit = 88;
			if (TrueGameSkill == SKILL_HORRIBLE) SeedLimit = 80;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SeedLimit = 72;
			if (TrueGameSkill >= SKILL_OMEGA) SeedLimit = 64;
			if (ModType == 0) SeedLimit *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",29,SeedLimit);
			
			int SeedLimit2 = CallACS("MiscVarCheckDECORATE",28);
			// for the Seed of Skill limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) SeedLimit2 = 32;
			if (TrueGameSkill == SKILL_EASY) SeedLimit2 = 30;
			if (TrueGameSkill == SKILL_NORMAL) SeedLimit2 = 28;
			if (TrueGameSkill == SKILL_HARD) SeedLimit2 = 26;
			if (TrueGameSkill == SKILL_VERY_HARD) SeedLimit2 = 24;
			if (TrueGameSkill == SKILL_EXTREME) SeedLimit2 = 22;
			if (TrueGameSkill == SKILL_HORRIBLE) SeedLimit2 = 20;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SeedLimit2 = 16;
			if (TrueGameSkill >= SKILL_OMEGA) SeedLimit2 = 14;
			if (ModType == 0) SeedLimit2 *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",28,SeedLimit2);
			
			int FyggLimit = CallACS("MiscVarCheckDECORATE",26);
			// for the Fygg limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) FyggLimit = 3;
			if (TrueGameSkill == SKILL_EASY) FyggLimit = 3;
			if (TrueGameSkill == SKILL_NORMAL) FyggLimit = 3;
			if (TrueGameSkill == SKILL_HARD) FyggLimit = 2;
			if (TrueGameSkill == SKILL_VERY_HARD) FyggLimit = 2;
			if (TrueGameSkill == SKILL_EXTREME) FyggLimit = 2;
			if (TrueGameSkill == SKILL_HORRIBLE) FyggLimit = 1;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) FyggLimit = 1;
			if (TrueGameSkill >= SKILL_OMEGA) FyggLimit = 1;
			if (ModType == 0) FyggLimit *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",26,FyggLimit);
		}
		
		
		
		
		
		//**************************
		//*Character Checks Misc #1*
		//**************************
		if (playeractor)
		{
			if (CharacterClass == 0) { if (Owner.CountInv("DeggarisInPlay") < 1) Owner.A_SetInventory("DeggarisInPlay",1); } else Owner.A_SetInventory("DeggarisInPlay",0);
			if (CharacterClass == 1) { if (Owner.CountInv("IlluciaInPlay") < 1) Owner.A_SetInventory("IlluciaInPlay",1); } else Owner.A_SetInventory("IlluciaInPlay",0);
			if (CharacterClass == 2) { if (Owner.CountInv("FloraInPlay") < 1) Owner.A_SetInventory("FloraInPlay",1); } else Owner.A_SetInventory("FloraInPlay",0);
			if (CharacterClass == 8) { if (Owner.CountInv("AilishInPlay") < 1) Owner.A_SetInventory("AilishInPlay",1); } else Owner.A_SetInventory("AilishInPlay",0);
			if (CharacterClass == 9) { if (Owner.CountInv("PetraInPlay") < 1) Owner.A_SetInventory("PetraInPlay",1); } else Owner.A_SetInventory("PetraInPlay",0);
			
			if (CharacterClass == 2)
			{
				// Slot 1
				if (Owner.CountInv("Chainsaw") > 0) Owner.A_SetInventory("Chainsaw", 0);
				if (Owner.CountInv("Chainsaw2") > 0) Owner.A_SetInventory("Chainsaw2", 0);
				// Slot 2
				if (Owner.CountInv("FloraLearnedPistols") == 0)
				{
					if (Owner.CountInv("Pistol") > 0) Owner.A_SetInventory("Pistol", 0);
					if (Owner.CountInv("Pistol2") > 0) Owner.A_SetInventory("Pistol2", 0);
				}
				// Slot 3
				if (Owner.CountInv("Shotgun") > 0) Owner.A_SetInventory("Shotgun", 0);
				if (Owner.CountInv("Shotgun2") > 0) Owner.A_SetInventory("Shotgun2", 0);
				// Slot 4
				if (Owner.CountInv("Chaingun") > 0) Owner.A_SetInventory("Chaingun", 0);
				if (Owner.CountInv("Chaingun2") > 0) Owner.A_SetInventory("Chaingun2", 0);
				// Slot 5
				if (Owner.CountInv("RocketLauncher") > 0) Owner.A_SetInventory("RocketLauncher", 0);
				if (Owner.CountInv("RocketLauncher2") > 0) Owner.A_SetInventory("RocketLauncher2", 0);
				// Slot 6
				if (Owner.CountInv("PlasmaRifle") > 0) Owner.A_SetInventory("PlasmaRifle", 0);
				if (Owner.CountInv("PlasmaRifle2") > 0) Owner.A_SetInventory("PlasmaRifle2", 0);
				if (Owner.CountInv("Railgun2") > 0) Owner.A_SetInventory("Railgun2", 0);
				if (Owner.CountInv("Repeater2") > 0) Owner.A_SetInventory("Repeater2", 0);
				if (Owner.CountInv("Karasawa2") > 0) Owner.A_SetInventory("Karasawa2", 0);
				// Slot 7
				if (Owner.CountInv("BFG9000") > 0) Owner.A_SetInventory("BFG9000", 0);
				if (Owner.CountInv("BFG90002") > 0) Owner.A_SetInventory("BFG90002", 0);
			}
			else
			{
				// Slot 1
				if (Owner.CountInv("SceptreOfEmpyrea") > 0) Owner.A_SetInventory("SceptreOfEmpyrea", 0);
				if (Owner.CountInv("DoubleBladedChainsaw") > 0 && Owner.CountInv("Chainsaw2")) Owner.A_SetInventory("Chainsaw2", 0);
				// Slot 3
				if (Owner.CountInv("DiarisLongbow") > 0) Owner.A_SetInventory("DiarisLongbow", 0);
				// Slot 4
				if (Owner.CountInv("ImpClaw") > 0) Owner.A_SetInventory("ImpClaw", 0);
				if (Owner.CountInv("DarkImpClaw") > 0) Owner.A_SetInventory("DarkImpClaw", 0);
				if (Owner.CountInv("CacodemonEye") > 0) Owner.A_SetInventory("CacodemonEye", 0);
				if (Owner.CountInv("CacolanternEye") > 0) Owner.A_SetInventory("CacolanternEye", 0);
				if (Owner.CountInv("AbaddonEye") > 0) Owner.A_SetInventory("AbaddonEye", 0);
				// Slot 5
				if (Owner.CountInv("KnightFist") > 0) Owner.A_SetInventory("KnightFist", 0);
				if (Owner.CountInv("BaronFist") > 0) Owner.A_SetInventory("BaronFist", 0);
				if (Owner.CountInv("BelphegorFist") > 0) Owner.A_SetInventory("BelphegorFist", 0);
				if (Owner.CountInv("BruiserFist") > 0) Owner.A_SetInventory("BruiserFist", 0);
				if (Owner.CountInv("ArchonFist") > 0) Owner.A_SetInventory("ArchonFist", 0);
				if (Owner.CountInv("PyroFist") > 0) Owner.A_SetInventory("PyroFist", 0);
				// Slot 6
				if (Owner.CountInv("IncarnateSkull") > 0) Owner.A_SetInventory("IncarnateSkull", 0);
				if (Owner.CountInv("ArchvileHand") > 0) Owner.A_SetInventory("ArchvileHand", 0);
				if (Owner.CountInv("DiabloistHand") > 0) Owner.A_SetInventory("DiabloistHand", 0);
				if (Owner.CountInv("BalrogFist") > 0) Owner.A_SetInventory("BalrogFist", 0);
			}
		}
		
		
		
		//****************
		//**Stamina Calc**
		//****************
		A_PSI1DoEffectStaminaCalc();
		
		
		
		
		
		//*************************
		//*All Regen/Degen Effects*
		//*************************
		A_PSI1DoEffectRegenDegenEffects();
		
		
		
		
		
		//*********************
		//*Check Aerial Damage*
		//*********************
		if (playeractor && weapon is "SceptreOfEmpyrea")
		{
			landdmgbonus = 0;
			if (FlightTimer < 1) // && buttons & BT_JUMP) // [not Flight]
			{
				if (owner.vel.z < -128.0)
				{
					landdmgbonus = 4;
					if (dvdsdebug_showplayeratkinformation == 1) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]: ZVel: %8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -32.0)
				{
					landdmgbonus = 3;
					if (dvdsdebug_showplayeratkinformation == 1) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]: ZVel: %8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -8.0)
				{
					landdmgbonus = 2;
					if (dvdsdebug_showplayeratkinformation == 1) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]: ZVel: %8f", owner.vel.z);
				}
				else
				if (owner.vel.z < -0.0625)
				{
					landdmgbonus = 1;
					if (dvdsdebug_showplayeratkinformation == 1) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]: ZVel: %8f", owner.vel.z);
				}
			}

			double SceptreJumpDmgMulti;
			SceptreJumpDmgMulti = owner.vel.z / -0.1;
			SceptreJumpDmgMulti += 100;
			if (SceptreJumpDmgMulti < 100) SceptreJumpDmgMulti = 100;
			if (dvdsdebug_showplayeratkinformation == 1 && SceptreJumpDmgMulti != 100) Console.Printf("    \ceSceptre Landing Dmg Multiplier: ZVel: %8f%", SceptreJumpDmgMulti);
		}
		
		
		
		
		//**************************************
		//***Inventory/Ammo Limit Enforcement***
		//**************************************
		A_PSI1DoEffectInvAmmoLimits();
		
		
		
		
		
		//**************************************
		//***Affects Powerup Timer Countdowns***
		//**************************************
		A_PSI1DoEffectBuffTimerCountdown();
		
		
		
		//****************************
		//** EXP Table Calculations **
		//****************************
		A_PSI1DoEffectEXPTables();
		
		
		
		//*******************
		//** LEVEL UP CODE **
		//*******************
		A_PSI1DoEffectLevelUp();
		
		
		
		
		//*******************************************
		// Gets Values for Accquired Kills & Secrets*
		//*******************************************
		A_PSI1DoEffectCountKSI();
		
		
		
		
		
		//************************************************
		//*Marine's Armor Checks (for color translations)*
		//************************************************
		A_PSI1DoEffectArmorChecks();
		
		
		
		
		
		A_PSI1DoEffectQuickuseVimstone();
		
		
		
		
		
		A_PSI1DoEffectUnspecPerks();
		
		// Final Stuff
		owner.Stamina = CallACS("StatCheck",1) - owner.SpawnHealth();
		
		double StaminaRatioFull = CallACS("MiscVarCheckDECORATE",21);
		StaminaRatioFull /= CallACS("MiscVarCheckDECORATE",22);
		StaminaRatioFull *= 10000;
		int StaminaRatioTrue = StaminaRatioFull;
		//Console.Printf("StaminaRatioFull: %4f, StaminaRatioTrue: %d", StaminaRatioFull, StaminaRatioTrue);
		CallACS("MiscVarSetDECORATE",8,StaminaRatioTrue);
		
		super.DoEffect();
	}
	
	//*****************************************
	//*Extra Functions to play from DoEffect()*
	//*****************************************
	// HUD/Weapon Mana Costs
	void A_PSI1DoEffectWeaponManaCostCheck()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		CharacterClass = CallACS("CheckCharacterClass");
		int result;
		int result2;
		CallACS("MiscVarSetDECORATE",1501,0);
		CallACS("MiscVarSetDECORATE",1502,0);
		double resextra = 0.0;
		if (playeractor)
		{
			// Weapon Checks
			nm = "EvilWarriorShield"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = ((dvds_florahwshieldmpcost * (16 - (CallACS("MiscVarCheckDECORATE",10053)+CallACS("MiscVarCheckDECORATE",10054)))) / 16);
				result2 = 0; // no altfire costs
			}
			nm = "SapphireWandNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = ((dvds_florawandmpcost * 1) * (14 - (CallACS("MiscVarCheckDECORATE",10053)+CallACS("MiscVarCheckDECORATE",10054))) / 14 );
				result2 = ((dvds_florawandmpcost * 3) * (14 - (CallACS("MiscVarCheckDECORATE",10053)+CallACS("MiscVarCheckDECORATE",10054))) / 14 );
			}
			nm = "DualSapphireWandsNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = ((dvds_florawandmpcost * 2) * (14 - (CallACS("MiscVarCheckDECORATE",10053)+CallACS("MiscVarCheckDECORATE",10054))) / 14 );
				result2 = ((dvds_florawandmpcost * 6) * (14 - (CallACS("MiscVarCheckDECORATE",10053)+CallACS("MiscVarCheckDECORATE",10054))) / 14 );
			}
			nm = "ImpalerXBow"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 1 * (12 - (CallACS("MiscVarCheckDECORATE",10053) + CallACS("MiscVarCheckDECORATE",10054))) / 12;
				result2 = 10 * (12 - (CallACS("MiscVarCheckDECORATE",10053) + CallACS("MiscVarCheckDECORATE",10054))) / 12;
			}
			nm = "DualImpalerXBow"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 2 * (12 - (CallACS("MiscVarCheckDECORATE",10053) + CallACS("MiscVarCheckDECORATE",10054))) / 12;
				result2 = 20 * (12 - (CallACS("MiscVarCheckDECORATE",10053) + CallACS("MiscVarCheckDECORATE",10054))) / 12;
			}
			nm = "ScepterOfSouls"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 1;
				result2 = 2;
			}
			nm = "DualScepterOfSouls"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 2;
				result2 = 4;
			}
			nm = "PoisonNeedle"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = CallACS("StatCheck",2) * ((15 - (CallACS("MiscVarCheckDECORATE",10035) * 2.25)) * 0.01);
				
				if (Owner.CountInv("EvenstarNecklace")) resextra += 0.1;
				if (Owner.CountInv("AnubisCufflinks")) resextra += 0.02;
				if (Owner.CountInv("BalrogRing")) resextra += 0.05;
				result2 *= (1.00 - resextra);

				if (!dvds_florathrownneedlemode) result2 = 0;
			}
			nm = "GoldWandNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostwand * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualGoldWandNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostwand * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "CrossbowNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostcrossbow * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualCrossbowNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostcrossbow * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "SuperCrossbowNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostscrossbow * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualSuperCrossbowNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostscrossbow * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DragonClawNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostdragonclaw * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualDragonClawNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostdragonclaw * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "HellStaffNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcosthellstaff * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualHellStaffNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcosthellstaff * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "PhoenixRodNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostphoenixrod * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualPhoenixRodNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostphoenixrod * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "FiremaceNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostfiremace * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualFiremaceNew"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostfiremace * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DSparilStaff"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostdsparilstaff * dvds_floratomedmpcostratio) / 100);
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "DualDSparilStaff"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 0;
				result2 = ((dvds_floratomedmpcostdsparilstaff * dvds_floratomedmpcostratio) / 100) * 2;
				result2 *= (1.00 - (CallACS("MiscVarCheckDECORATE",10053) * 0.02) + (CallACS("MiscVarCheckDECORATE",10054) * 0.05));
			}
			nm = "SerpentStaffAilish"; APPackCheck = nm;
			if (weapon is APPackCheck)
			{
				result = 1;
				result2 = 1;
			}
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("EvenstarNecklace")) resextra += 0.05;
				if (Owner.CountInv("AnubisCufflinks")) resextra += 0.01;
				if (Owner.CountInv("BalrogRing")) resextra += 0.025;

				nm = "PoisonNeedle"; APPackCheck = nm;
				if (weapon is APPackCheck) { }
				else
				{
					result *= (1.00 - resextra);
					result2 *= (1.00 - resextra);
				}
			}
			CallACS("MiscVarSetDECORATE",1501,result);
			CallACS("MiscVarSetDECORATE",1502,result2);
			owner.A_SetInventory("NormFireManaCost",result);
			owner.A_SetInventory("AltFireManaCost",result2);
		}
	}
	
	// Hellcore Cooling
	void A_PSI1DoEffectHellcoreCool()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int GoETimer = CallACS("GetBuffTimer",129);
		
		//******************************************************
		//*Hellcore Cooldown Process [25 tics = 1% of cooldown]*
		//******************************************************
		if (playeractor)
		{
			HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
			if (HellcoreOverheatLevel > 0 && PlayerCurrentHealth)
			{
				HellcoreCoolRatio = 400;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 1 - Cooldown Increment (Base)]: %d\c-, Heat Level:", HellcoreCoolRatio, HellcoreOverheatLevel);

				// Dove Ribbon quickly cools down Hellcore meter.
				previousdelaycount = HellcoreCoolRatio;
				if (Owner.CountInv("DoveRibbon") > 0) HellcoreCoolRatio *= 3;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 2 - Cooldown Increment (Dove Ribbon)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Divine Avatar speeds up cooldown by 100%
				previousdelaycount = HellcoreCoolRatio;
				if (DivineAvatarTimer > 0) HellcoreCoolRatio *= 2;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 3 - Cooldown Increment (Divine Avatar)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Divine Avatar speeds up cooldown by 400%
				previousdelaycount = HellcoreCoolRatio;
				if (GoETimer > 0) HellcoreCoolRatio *= 5;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 3a - Cooldown Increment (GoE)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Fatigue = 0.2x cooldown speed
				previousdelaycount = HellcoreCoolRatio;
				if (FatigueTimer > 0) HellcoreCoolRatio /= 5;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 4 - Cooldown Increment (Fatigue)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Sleep VERY quickly cools down Hellcore meter.
				previousdelaycount = HellcoreCoolRatio;
				if (SleepTimer > 0) HellcoreCoolRatio *= 5; 
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 5 - Cooldown Increment (Sleep)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Soul Mastery
				PerkFactor = 200;
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("MiscVarCheckDECORATE",10033) > 0)
				{
					PerkFactor = 200 + ((CallACS("MiscVarCheckDECORATE",10033) * 6) + (CallACS("MiscVarCheckDECORATE",10034) * 15));
					HellcoreCoolRatio = HellcoreCoolRatio * PerkFactor / 200;
				}
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 6 - Cooldown Increment (Soul Mastery)]: %d\c-, Previous: %d, PerkFactor %d / 200", HellcoreCoolRatio, previousdelaycount, PerkFactor);
				
				// "Cleared of Mind: Perk
				PerkFactor = 80;
				previousdelaycount = HellcoreCoolRatio;
				if (ClearMindPerkLvl > 0)
				{
					PerkFactor = 80 + ((ClearMindPerkLvl * 6) + (ClearMindEXPerkLvl * 15));
					HellcoreCoolRatio = HellcoreCoolRatio * PerkFactor / 80;
				}
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 7 - Cooldown Increment (Cleared of Mind)]: %d\c-, Previous: %d, PerkFactor %d / 80", HellcoreCoolRatio, previousdelaycount, PerkFactor);
				
				// Check Hellcore Cooldown Multiplier in Options
				previousdelaycount = HellcoreCoolRatio;
				HellcoreCoolRatio = (HellcoreCoolRatio * dvds_heatcoolmultiplier) / 100;
				if (HellcoreCoolRatio < 1) HellcoreCoolRatio = 1;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 8 - Cooldown Increment (Menu Option)]: %d\c-, Previous: %d, Multiplier %d%", HellcoreCoolRatio, previousdelaycount, dvds_heatcoolmultiplier);
				
				// ???????
				previousdelaycount = HellcoreCoolRatio;
				if (Owner.CountInv("IsHaSatanNow") > 0) HellcoreCoolRatio = HellcoreCoolRatio * 16;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 9 - Cooldown Increment (???????)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Playing Unloved [2x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0) HellcoreCoolRatio = HellcoreCoolRatio * 2;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 10a - Cooldown Increment (Playing Unloved)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Playing The City of the Damned: Apocalypse [1.25x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",4) > 0) HellcoreCoolRatio = (HellcoreCoolRatio * 5) / 4;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 10b - Cooldown Increment (Playing TCOTD:A)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Playing Happy Time Circus 2 [1.5x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",5) > 0) HellcoreCoolRatio = (HellcoreCoolRatio * 3) / 2;
				if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 10c - Cooldown Increment (Playing Happy Time Circus 2)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				
				if (UsingInGameMenu != 0) HellcoreCoolRatio = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their Hellcore Cooling to count
				{
					previousdelaycount = HellcoreOverheatLevel;
					HellcoreOverheatLevel -= HellcoreCoolRatio;
					if (dvdsdebug_hellcoreheatdisplay) Console.Printf("    \crHellcore Cooldown [Step 11 - Cooldown Increments]: New Heat Level: %d\c-, Old Heat Level: %d", HellcoreOverheatLevel, previousdelaycount);
				}
			}
			if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
			CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			
			// Check For If Using Hellcore Weapon
			SkillFactor = 0;
			if (weapon is "ImpClaw" || weapon is "DarkImpClaw" ||
					weapon is "CacodemonEye" || weapon is "CacolanternEye" || weapon is "AbaddonEye") SkillFactor += 1; 
			if (weapon is "KnightFist" || weapon is "BaronFist" || weapon is "BelphegorFist" ||
					weapon is "BruiserFist" || weapon is "ArchonFist" || weapon is "PyroFist") SkillFactor += 1; 
			if (weapon is "IncarnateSkull" || weapon is "ArchvileHand" || 
					weapon is "DiabloistHand" || weapon is "BalrogFist") SkillFactor += 1; 
			if (SkillFactor > 0) { Owner.A_SetInventory("FloraUsingHellcoreWeapon",1); } else { Owner.A_SetInventory("FloraUsingHellcoreWeapon",0); }
			
			if (CharacterClass == 2) 
			{
				if (HellcoreOverheatLevel < 250000) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",1);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",0);
				}
				if (HellcoreOverheatLevel > 249999 && HellcoreOverheatLevel < 500000) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",0);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",1);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",0);
				}
				if (HellcoreOverheatLevel > 499999 && HellcoreOverheatLevel < 750000) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",0);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",1);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",0);
				}
				if (HellcoreOverheatLevel > 749999 && HellcoreOverheatLevel < 1000000) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",0);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",1);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",0);
				}
				if (HellcoreOverheatLevel > 999999 && HellcoreOverheatLevel < 2500000) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",0);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",1);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",0);
				}
				if (HellcoreOverheatLevel > 2499999) 
				{
					Owner.A_SetInventory("FloraHellcoreNotOverheated",0);
					Owner.A_SetInventory("FloraHellcore25PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore50PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore75PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore100PercentOverheated",0);
					Owner.A_SetInventory("FloraHellcore250PercentOverheated",1);
				}
			}
			
			// Melee Weapon Inv Check
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			SkillFactor = 0;
			if (weapon is "Fist" || weapon is "FistDeggaris" || 
					weapon is "FistIllucia" || weapon is "FistFlora") SkillFactor += 1;
			if (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || 
					weapon is "SauronGauntletsFlora" || weapon is APPackCheck || 
					weapon is APPackCheck2 || weapon is "SceptreOfEmpyrea" || weapon is "PoisonNeedle") SkillFactor += 1;
			if (weapon is "Chainsaw" || weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw") SkillFactor += 1; 
			if (SkillFactor > 0) { Owner.A_SetInventory("UsingMeleeWeapon",1); } else { Owner.A_SetInventory("UsingMeleeWeapon",0); }
		}
	}
	
	// Weapon Slot Check
	void A_PSI1DoEffectWeaponSlot()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int SkillFactor;
		if (playeractor)
		{
			CallACS("MiscVarSetDECORATE",11,-1);
			CallACS("MiscVarSetDECORATE",411,-1);
			CallACS("MiscVarSetDECORATE",412,-1);
			CallACS("MiscVarSetDECORATE",413,-1);
			CallACS("MiscVarSetDECORATE",414,-1);
			CallACS("MiscVarSetDECORATE",415,-1);
			CallACS("MiscVarSetDECORATE",416,-1);
			CallACS("MiscVarSetDECORATE",417,-1);
			CallACS("MiscVarSetDECORATE",418,-1);
			CallACS("MiscVarSetDECORATE",419,-1);
			CallACS("MiscVarSetDECORATE",420,-1);

			nm = "FistAilish"; APPackCheck = nm;
			nm = "SauronGauntletsAilish"; APPackCheck2 = nm;
			nn = "FistPetra"; APPackCheck3 = nn;
			nn = "SauronGauntletsPetra"; APPackCheck4 = nn;
			nm = "RoyalScepter"; APPackCheck5 = nm;
			nn = "SoulWhisper"; APPackCheck6 = nn;
			// Slot 1
			if (owner.CountInv("Fist") || 
					owner.CountInv("Chainsaw") ||
					owner.CountInv("Chainsaw2") ||
					owner.CountInv("DoubleBladedChainsaw") ||
					owner.CountInv("FistDeggaris") ||
					owner.CountInv("SauronGauntlets") ||
					owner.CountInv("FistIllucia") ||
					owner.CountInv("SauronGauntletsIllucia") || 
					owner.CountInv("FistFlora") ||
					owner.CountInv("SauronGauntletsFlora") ||
					owner.CountInv("PoisonNeedle") ||
					owner.CountInv("SceptreOfEmpyrea") ||
					owner.CountInv(APPackCheck) ||
					owner.CountInv(APPackCheck2) ||
					owner.CountInv(APPackCheck3) ||
					owner.CountInv(APPackCheck4) ||
					owner.CountInv(APPackCheck5) ||
					owner.CountInv(APPackCheck6)) CallACS("MiscVarSetDECORATE",411,1);
			if (weapon is "Fist" || 
					weapon is "Chainsaw" ||
					weapon is "Chainsaw2" ||
					weapon is "DoubleBladedChainsaw" ||
					weapon is "FistDeggaris" ||
					weapon is "SauronGauntlets" ||
					weapon is "FistIllucia" ||
					weapon is "SauronGauntletsIllucia" || 
					weapon is "FistFlora" ||
					weapon is "SauronGauntletsFlora" ||
					weapon is "PoisonNeedle" ||
					weapon is "SceptreOfEmpyrea" ||
					weapon is APPackCheck ||
					weapon is APPackCheck2 ||
					weapon is APPackCheck3 ||
					weapon is APPackCheck4 ||
					weapon is APPackCheck5 ||
					weapon is APPackCheck6) CallACS("MiscVarSetDECORATE",11,1);

			// Slot 2
			pm = "ImpalerXBow"; iDTech1Check = pm;
			pm = "DualImpalerXBow"; iDTech1Check2 = pm;
			pm = "GoldWandNew"; iDTech1Check3 = pm;
			pm = "DualGoldWandNew"; iDTech1Check4 = pm;
			pm = "StrifeCrossbowNew"; iDTech1Check5 = pm;
			pm = "StrifeCrossbow2New"; iDTech1Check6 = pm;
			nm = "PetraRevolver"; APPackCheck = nm;
			nm = "PetraRevolver2"; APPackCheck2 = nm;
			nm = "AChristina"; APPackCheck3 = nm;
			nm = "ShockStaff"; APPackCheck4 = nm;
			if (owner.CountInv("SapphireWandNew") || 
					owner.CountInv("DualSapphireWandsNew") || 
					owner.CountInv("Pistol2") || 
					owner.CountInv("DualPistols") || 
					owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2) ||
					owner.CountInv(iDTech1Check3) ||
					owner.CountInv(iDTech1Check4) ||
					owner.CountInv(iDTech1Check5) ||
					owner.CountInv(iDTech1Check6) ||
					owner.CountInv(APPackCheck) ||
					owner.CountInv(APPackCheck2) ||
					owner.CountInv(APPackCheck3) ||
					owner.CountInv(APPackCheck4)) CallACS("MiscVarSetDECORATE",412,1);
			if (weapon is "SapphireWandNew" || 
					weapon is "DualSapphireWandsNew" || 
					weapon is "Pistol2" || 
					weapon is "DualPistols" || 
					weapon is iDTech1Check ||
					weapon is iDTech1Check2 ||
					weapon is iDTech1Check3 ||
					weapon is iDTech1Check4 ||
					weapon is iDTech1Check5 ||
					weapon is iDTech1Check6 ||
					weapon is APPackCheck ||
					weapon is APPackCheck2 ||
					weapon is APPackCheck3 ||
					weapon is APPackCheck4) CallACS("MiscVarSetDECORATE",11,2);

			// Slot 3
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",11,3);
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",413,1);

			// Slot 4
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",11,4);
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",414,1);

			// Slot 5
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",11,5);
			SkillFactor = 0;
			if (SkillFactor > 0) CallACS("MiscVarSetDECORATE",415,1);

			// Slot 6
			pm = "PhoenixRodNew"; iDTech1Check = pm;
			pm = "DualPhoenixRodNew"; iDTech1Check2 = pm;
			nm = "ChilltipCane"; APPackCheck = nm;
			nm = "PetraTeslaCannon"; APPackCheck2 = nm;
			nm = "PetraTeslaCannon2"; APPackCheck3 = nm;
			nm = "AChristinaHades"; APPackCheck4 = nm;
			nm = "AChristinaIronLich"; APPackCheck5 = nm;
			nm = "AChristinaHeresiarch"; APPackCheck6 = nm;
			if (owner.CountInv("IncarnateSkull") ||
					owner.CountInv("ArchvileHand") ||
					owner.CountInv("DiabloistHand") ||
					owner.CountInv("BalrogFist") ||
					owner.CountInv("PlasmaRifle2") ||
					owner.CountInv("Railgun2") ||
					owner.CountInv("Repeater2") ||
					owner.CountInv("Karasawa2") ||
					owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2) ||
					owner.CountInv(APPackCheck) ||
					owner.CountInv(APPackCheck2) ||
					owner.CountInv(APPackCheck3) ||
					owner.CountInv(APPackCheck4) ||
					owner.CountInv(APPackCheck5) ||
					owner.CountInv(APPackCheck6)) CallACS("MiscVarSetDECORATE",416,1);
			if (weapon is "IncarnateSkull" ||
					weapon is "ArchvileHand" ||
					weapon is "DiabloistHand" ||
					weapon is "BalrogFist" ||
					weapon is "PlasmaRifle2" ||
					weapon is "Railgun2" ||
					weapon is "Repeater2" ||
					weapon is "Karasawa2" ||
					weapon is iDTech1Check ||
					weapon is iDTech1Check2 ||
					weapon is APPackCheck ||
					weapon is APPackCheck2 ||
					weapon is APPackCheck3 ||
					weapon is APPackCheck4 ||
					weapon is APPackCheck5 ||
					weapon is APPackCheck6) CallACS("MiscVarSetDECORATE",11,6);

			// Slot 7
			pm = "FiremaceNew"; iDTech1Check = pm;
			pm = "DualFiremaceNew"; iDTech1Check2 = pm;
			nm = "NightShadow"; APPackCheck = nm;
			nm = "AChristinaBFG"; APPackCheck2 = nm;
			nm = "AChristinaPartinias"; APPackCheck3 = nm;
			if (owner.CountInv("BFG9000") ||
					owner.CountInv("BFG90002") ||
					owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2) ||
					owner.CountInv(APPackCheck) ||
					owner.CountInv(APPackCheck2) ||
					owner.CountInv(APPackCheck3)) CallACS("MiscVarSetDECORATE",417,1);
			if (weapon is "BFG9000" ||
					weapon is "BFG90002" ||
					weapon is iDTech1Check ||
					weapon is iDTech1Check2 ||
					weapon is APPackCheck ||
					weapon is APPackCheck2 ||
					weapon is APPackCheck3) CallACS("MiscVarSetDECORATE",11,7);

			// Slot 8
			pm = "PopcornGunNew"; iDTech1Check = pm;
			pm = "GoreBalloonNew"; iDTech1Check2 = pm;
			pm = "GoreBalloonNew"; iDTech1Check3 = pm;
			pm = "NNSigil"; iDTech1Check4 = pm;
			pm = "DSparilStaff"; iDTech1Check5 = pm;
			pm = "DualDSparilStaff"; iDTech1Check6 = pm;
			if (owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2) ||
					owner.CountInv(iDTech1Check3) ||
					owner.CountInv(iDTech1Check4) ||
					owner.CountInv(iDTech1Check5) ||
					owner.CountInv(iDTech1Check6)) CallACS("MiscVarSetDECORATE",418,1);
			if (weapon is iDTech1Check ||
					weapon is iDTech1Check2 ||
					weapon is iDTech1Check3 ||
					weapon is iDTech1Check4 ||
					weapon is iDTech1Check5 ||
					weapon is iDTech1Check6) CallACS("MiscVarSetDECORATE",11,8);

			// Slot 9
			pm = "ScepterofSouls"; iDTech1Check = pm;
			pm = "DualScepterofSouls"; iDTech1Check2 = pm;
			pm = "GasRocketLauncherNew"; iDTech1Check3 = pm;
			pm = "GutFlingerNew"; iDTech1Check4 = pm;
			if (owner.CountInv("EvilWarriorShield") || 
					owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2) ||
					owner.CountInv(iDTech1Check3) ||
					owner.CountInv(iDTech1Check4)) CallACS("MiscVarSetDECORATE",419,1);
			if (weapon is "EvilWarriorShield" || 
					weapon is iDTech1Check ||
					weapon is iDTech1Check2 ||
					weapon is iDTech1Check3 ||
					weapon is iDTech1Check4) CallACS("MiscVarSetDECORATE",11,9);

			// Slot 0
			pm = "ClownGrenadeNew"; iDTech1Check = pm;
			pm = "CrazyBall2New"; iDTech1Check2 = pm;
			if (owner.CountInv(iDTech1Check) ||
					owner.CountInv(iDTech1Check2)) CallACS("MiscVarSetDECORATE",420,1);
			if (weapon is iDTech1Check ||
					weapon is iDTech1Check2) CallACS("MiscVarSetDECORATE",11,0);
		}
	}

	// Regen/Degen Effects
	void A_PSI1DoEffectRegenDegenEffects()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		IsFocusOn = CallACS("MiscVarCheckDECORATE",212);
		CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaximumStamina = CallACS("MiscVarCheckDECORATE",22);
		int MenuModeToggle = CallACS("MiscVarCheckDECORATE",2500);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int GoETimer = CallACS("GetBuffTimer",129);
		int DegenMinimumHPFactor = 10; 
		int DegenMinimumManaFactor = 80;
		int DegenMinimumHP;
		int DegenMinimumMana;
		int CursedShieldDegenInterval;
		int DegenValue, CurseEffectRand;
		int DivineRegenAmount;
		int DoveRegenAmount;
		int RegenMaxHealth;
		int StamUpgradeDelay;
		int StaminaInputFactor;
		int HPRegenAmount;
		int HPDegenAmount;
		int PoisonIncrement;
		int PoisonHealth;
		int PoisonHealthThreshold;
		int PoisonDmg;
		int PoisonFlashColor;
		int SkillLevelManaDelay, ManaReDelay;
		int RegenedMana, regenedmanabasereq;
		int MaxRegenableMana, EquippedRegenCap;
		int MaxManaLimit;
		int ArcanaRegenDelaySkill, ArcanaRegenAmount;
		int staminaregenbase, staminaregenfinal;
		int defenddivisor;

		if (playeractor)
		{
			//***********************
			//*Check for Magic Focus*
			//***********************
			int FocusDrain;
			FreezePlayer = 0;
			if (MenuModeToggle > 0) FreezePlayer += 1;
			if (FatigueTimer > 0 && random[statitem](1,5) > 2) FreezePlayer += 1;
			if (SleepTimer > 0) FreezePlayer += 1;
			if (SilenceTimer > 0 && random[statitem](1,5) > 2) FreezePlayer += 1;
			buttons = owner.GetPlayerInput(INPUT_BUTTONS);
			//Console.Printf("    \cnFocusing [Step 0 - Input]: %d\c-", buttons);
			if (PlayerCurrentMP < PlayerMaxMP && buttons & BT_ZOOM && buttons & BT_SPEED && CurrentStamina >= FocusDrain && FreezePlayer == 0)
			{
				if (random[statitem](1,25) == 1) FocusDrain = (random[statitem](1,2) * 4);
													else FocusDrain = (random[statitem](4,8) * 5);
				if (StrifeStamLvl > 0) FocusDrain = FocusDrain * (100 - (StrifeStamLvl * 3)) / 100;
				if (Owner.CountInv("FalconKnifeEarrings") > 0) FocusDrain = FocusDrain * 9 / 10;
				//Console.Printf("    \cnFocusing [Step 1 - Base Drain]: %d\c-", FocusDrain);
				
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow Focus to activate
				{
					previousdelaycount = CurrentStamina;
					CurrentStamina -= FocusDrain;
					if (CurrentStamina < 0) CurrentStamina = 0;
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
					//Console.Printf("    \cnFocusing [Step 2 - Reduce Stamina]: Current: %d\c-, Previous: %d, DrainAmt: %d", CurrentStamina, previousdelaycount, FocusDrain);
				
					CallACS("MiscVarSetDECORATE",212,1); // "Focus" on
					CallACS("MiscVarSetDECORATE",231,1,1); // Increment Focus Timer

					// Focus Generator
					if (FocusTimer == 1)
					{
						owner.A_SpawnItemEx("FocusParticleSource",0,0,0,0.0,0.0,0.0,0,SXF_SETMASTER);
					}
				}
				else
				{
					CallACS("MiscVarSetDECORATE",212,0); // "Focus" off
					CallACS("MiscVarSetDECORATE",231,0);
					owner.A_RemoveChildren(true,RMVF_MISC,"FocusParticleSource");
				}
			}
			else
			{
				CallACS("MiscVarSetDECORATE",212,0); // "Focus" off
				CallACS("MiscVarSetDECORATE",231,0);
				owner.A_RemoveChildren(true,RMVF_MISC,"FocusParticleSource");
			}
			if (IsFocusOn > 0) // Focusing
			{
				if (PlayerCurrentHealth > 0) 
				{
					owner.A_SetBlend("00 00 30", 0.9375, 25); // Constant Run
					//Console.Printf("Focusing");
				}
			}
			
			
			//************************************************************************
			//**Ruinous Shield Degeneration Effect [will NOT kill the player though]**
			//************************************************************************
			if (Owner.CountInv("RuinousShield") > 0)
			{
				// Determines how low HP/MP can degenerate to when the Ruinous Shield is equipped. [used as Divisors]
				if (TrueGameSkill <= SKILL_VERY_EASY) { DegenMinimumHPFactor = 8; DegenMinimumManaFactor = 64; }
				if (TrueGameSkill == SKILL_EASY) { DegenMinimumHPFactor = 9; DegenMinimumManaFactor = 72; }
				if (TrueGameSkill == SKILL_NORMAL) { DegenMinimumHPFactor = 10; DegenMinimumManaFactor = 80; }
				if (TrueGameSkill == SKILL_HARD) { DegenMinimumHPFactor = 11; DegenMinimumManaFactor = 88; }
				if (TrueGameSkill == SKILL_VERY_HARD) { DegenMinimumHPFactor = 12; DegenMinimumManaFactor = 96; }
				if (TrueGameSkill == SKILL_EXTREME) { DegenMinimumHPFactor = 13; DegenMinimumManaFactor = 104; }
				if (TrueGameSkill == SKILL_HORRIBLE) { DegenMinimumHPFactor = 14; DegenMinimumManaFactor = 112; }
				if (TrueGameSkill == SKILL_IMPOSSIBLE) { DegenMinimumHPFactor = 15; DegenMinimumManaFactor = 120; }
				if (TrueGameSkill >= SKILL_OMEGA) { DegenMinimumHPFactor = 16; DegenMinimumManaFactor = 128; }
				DegenMinimumHPFactor = DegenMinimumHPFactor * 3 / 4;
				DegenMinimumManaFactor = DegenMinimumManaFactor * 3 / 4;
				DegenMinimumHP = PlayerMaxHP / DegenMinimumHPFactor;
				DegenMinimumMana = PlayerMaxMP / DegenMinimumManaFactor;
				if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 1 - Base Divisors]: HP %d, MP: %d\c-, LowHP: %d, LowMP: %d", DegenMinimumHPFactor, DegenMinimumManaFactor, DegenMinimumHP, DegenMinimumMana);
			
				// Set Curse Degeneration Intervals
				CursedShieldDegenInterval = 5;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) CursedShieldDegenInterval = CursedShieldDegenInterval * random[statitem](6,7) / 5;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) CursedShieldDegenInterval = CursedShieldDegenInterval * 7 / 5;
					if (buttons & BT_JUMP) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_CROUCH) CursedShieldDegenInterval = CursedShieldDegenInterval * 2 / 5;
				}
				if (random[statitem](1,16) == 1) CursedShieldDegenInterval *= 2;
				if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 2 - Base Degen Intervals (\cyInput: %d\cn)]: Interval: %d, Frozen?: %d", buttons, CursedShieldDegenInterval, FreezePlayer);
				
				// Checks Armor Items and other types for Degen speed.
				SkillFactor = 200;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor -= 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor -= 15;
					if (Owner.CountInv("BalrogRing") > 0) SkillFactor -= 25;
					// total of -34 = 66% speed with all four items
				}
				CursedShieldDegenInterval = CursedShieldDegenInterval * SkillFactor / 200;
				if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 3 - Degen Intervals (Post-Armor)]: %d, Factor: %d / 200", CursedShieldDegenInterval, SkillFactor);
				
				// Final Degen Interval
				if (UsingInGameMenu != 0) CursedShieldDegenInterval = 0;
				if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 4 - Degen Intervals (MenuCheck)]: %d", CursedShieldDegenInterval);

				if (UsingInGameMenu != 0) 
				{
					RuinousShieldDegenTimer += CursedShieldDegenInterval;
					if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 5 - Degen Intervals Timer]: %d / %d", RuinousShieldDegenTimer, CursedShieldDegenTimer);
				}

				// Curse Effect Execution
				if (RuinousShieldDegenTimer >= CursedShieldDegenTimer)
				{
					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth > DegenMinimumHP)
					{
						// HP Degeneration
						PlayerMaxHP = CallACS("StatCheck",1);
						CurseEffectRand = random[statitem](1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxHP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxHP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxHP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxHP / 266; break;
							case 8: DegenValue = PlayerMaxHP / 334; break;
						}
				
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentHealth -= DegenValue;
						if (PlayerCurrentHealth < DegenMinimumHP) PlayerCurrentHealth = DegenMinimumHP;

						owner.player.health = owner.player.mo.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 6a - HP Degen]: %d", DegenValue);
					}
				
					PlayerCurrentMP = CallACS("StatCheck",14);
					if (PlayerCurrentMP > DegenMinimumMana)
					{
						// MP Degeneration
						PlayerMaxMP = CallACS("StatCheck",2);
						CurseEffectRand = random[statitem](1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxMP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxMP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxMP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxMP / 266; break;
							case 8: DegenValue = PlayerMaxMP / 334; break;
						}
					
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentMP -= DegenValue;
						if (PlayerCurrentMP < DegenMinimumMana) PlayerCurrentMP = DegenMinimumMana;

						CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP);
						if (dvdsdebug_cursedmgdisplay) Console.Printf("    \cnCurse Degeneration [Step 6b - MP Degen]: %d", DegenValue);
					}
				
					RuinousShieldDegenTimer = 0;
					CursedShieldDegenTimer = 175 + random[statitem](-10,10);
				}
			}
			else
			{
				CurseEffectRand = 0;
				DegenValue = 0;
				RuinousShieldDegenTimer = 0;
				CursedShieldDegenTimer = 175 + random[statitem](-10,10);
			}
		
		
			//***************************
			//** Divine Avatar HP Regen**
			//***************************
			if (PlayerCurrentHealth > 0 && DivineAvatarTimer > 0)
			{
				if (UsingInGameMenu != 0) 
				{
					delaycount = 0;
				}
				else
				{
					delaycount = 20;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);
					
					previousdelaycount = delaycount;
					if (GoETimer > 0) delaycount *= 5;
					if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caDivineAvatar HP Regen [Step 1b - Interval Delay (GoE)]: %d, Previous: %d\c-", delaycount, previousdelaycount);
					
					if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their HP regen timer to count
					{
						DivineRegenTimer += delaycount;
						if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DivineRegenTimer, DivineRegenInterval, delaycount);
					}

					if (PlayerCurrentHealth > 0 && DivineRegenTimer >= DivineRegenInterval && PlayerCurrentHealth < MaxHealthLimit)
					{
						DivineRegenAmount = MaxHealthLimit * frandompick[statitem2](0.015,0.012,0.01,0.0085,0.0075);
						if (DivineRegenAmount < 1) DivineRegenAmount = 1;
						if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step R1 - Base Regen Amount]: %d\c-", DivineRegenAmount);

						previousdelaycount = DivineRegenAmount;
						if (Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount *= 1.0625;
						if (dvdsdebug_showhpregenstuff && DivineRegenAmount != previousdelaycount) Console.Printf("    \caDivineAvatar HP Regen [Step R2 - Regen Amount (Gauntlets)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

						previousdelaycount = DivineRegenAmount;
						if (Owner.CountInv("TheOneRing") > 0) DivineRegenAmount *= 1.125;
						if (dvdsdebug_showhpregenstuff && DivineRegenAmount != previousdelaycount) Console.Printf("    \caDivineAvatar HP Regen [Step R3 - Regen Amount (The One Ring)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

						PlayerCurrentHealth = owner.health;
						PlayerCurrentHealth += DivineRegenAmount;
						if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
						owner.player.health = owner.player.mo.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);

						DivineRegenTimer = 0;
						DivineRegenInterval = random[statitem](30,35) * 20;
					}
				}
			}
			else
			{
				DivineRegenTimer = 0;
				DivineRegenInterval = random[statitem](30,35) * 20;
			}
			
			
			//***************************
			//** Dove's Ribbon HP Regen**
			//***************************
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) // Flora
			{
				double countfactor = 1.00;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow Dove Ribbon HP Regen Timer to count
				{
					delaycount = 20;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);
					
					previousdelaycount = delaycount;
					if (Owner.CountInv("SafeTeaShoes") > 0) countfactor += 0.1;
					if (Owner.CountInv("PearlyCorset") > 0) countfactor += 0.1;
					if (Owner.CountInv("DivineShield") > 0) countfactor += 0.3;
					if (Owner.CountInv("CloakOfEvasion") > 0) countfactor += 0.1;
					delaycount *= countfactor;
					if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caDoveRibbon HP Regen [Step 1b - Interval Delay (Armor Items)]: %d, Previous: %d, CountFactor: %8f\c-", delaycount, previousdelaycount, countfactor);
					
					previousdelaycount = delaycount;
					if (GoETimer > 0) delaycount *= 5;
					if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caDoveRibbon HP Regen [Step 1c - Interval Delay (GoE)]: %d\c-, Previous: %d", delaycount, previousdelaycount);
					
					
					if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
					if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their HP regen timer to count
					{
						DoveRegenTimer += delaycount;
						if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DoveRegenTimer, DivineRegenInterval, delaycount);
					}
				}
	
				if (PlayerCurrentHealth > 0 && DoveRegenTimer >= DoveRegenInterval && PlayerCurrentHealth < MaxHealthLimit)
				{
					DoveRegenAmount = ((PlayerLevel * frandom[statitem2](0.9,1.1)) / RandomPick[statitem](40,45,50,55,60)) + RandomPick[statitem](1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
					if (DoveRegenAmount < 1) DoveRegenAmount = 1;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step R1 - Base Regen Amount]: %d\c-", DoveRegenAmount);

					previousdelaycount = DoveRegenAmount;
					if (Owner.CountInv("SauronGauntletsItem") > 0) DoveRegenAmount *= 1.0625;
					if (dvdsdebug_showhpregenstuff && DoveRegenAmount != previousdelaycount) Console.Printf("    \caDoveRibbon HP Regen [Step R2 - Regen Amount (Gauntlets)]: %d\c-, Previous: %d", DoveRegenAmount, previousdelaycount);

					previousdelaycount = DoveRegenAmount;
					if (Owner.CountInv("TheOneRing") > 0) DoveRegenAmount *= 1.125;
					if (dvdsdebug_showhpregenstuff && DoveRegenAmount != previousdelaycount) Console.Printf("    \caDoveRibbon HP Regen [Step R3 - Regen Amount (The One Ring)]: %d\c-, Previous: %d", DoveRegenAmount, previousdelaycount);

					PlayerCurrentHealth = owner.health;
					PlayerCurrentHealth += DoveRegenAmount;
					if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
					owner.player.health = owner.player.mo.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);

					DoveRegenTimer = 0;
					DoveRegenInterval = random[statitem](27,32) * 20;
				}
			}
			else
			{
				DoveRegenTimer = 0;
				DoveRegenInterval = random[statitem](27,32) * 20;
			}
			
			
			//****************
			//**Health Regen**
			//****************
			HPDelayInterval = 140;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			// Base Character Interval Max
			if (CharacterClass == 0) HPDelayInterval = 118; // Deggaris Regenerates the second Fastest [3.54 seconds]
			if (CharacterClass == 1) HPDelayInterval = 140; // Illucia has an even speed of Regeneration [4 seconds]
			if (CharacterClass == 2) HPDelayInterval = 162; // Flora Regenerates slower than Illucia [4.46 seconds]
			if (CharacterClass == 8) HPDelayInterval = 175; // Ailish Regenerates the slowest [5 seconds]
			if (CharacterClass == 9) HPDelayInterval = 81; // Petra Regenerates the fastest [2.314285714 seconds]
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 1a - Base Interval Delay]: %d\c-", HPDelayInterval);
			
			// Level Check [Interval Delay]
			previousdelaycount = HPDelayInterval;
			if (TrueGameSkill <= SKILL_VERY_EASY) HPDelayInterval -= 6;
			if (TrueGameSkill == SKILL_EASY) HPDelayInterval -= 2;
			if (TrueGameSkill == SKILL_NORMAL) HPDelayInterval += 0;
			if (TrueGameSkill == SKILL_HARD) HPDelayInterval += 2;
			if (TrueGameSkill == SKILL_VERY_HARD) HPDelayInterval += 6;
			if (TrueGameSkill == SKILL_EXTREME) HPDelayInterval += 8;
			if (TrueGameSkill == SKILL_HORRIBLE) HPDelayInterval += 12;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) HPDelayInterval += 14;
			if (TrueGameSkill >= SKILL_OMEGA) HPDelayInterval += 16;
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth && HPDelayInterval != previousdelaycount) Console.Printf("    \caHP Regen [Step 1b - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval -= (PlayerLevel / 7); 
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth && HPDelayInterval != previousdelaycount) Console.Printf("    \caHP Regen [Step 1c - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval *= 20;
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth && HPDelayInterval != previousdelaycount) Console.Printf("    \caHP Regen [Step 1d - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			PlayerCurrentHealth = owner.health;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 2 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);
			
			// Base Delay Count
			SkillFactor = 0;
			delaycount = 20;
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 3 - Get Base RegenTimer Increment]: %d\c-", delaycount);
			
			// Character Delay Count
			previousdelaycount = delaycount;
			SkillFactor = 0;
			if (CharacterClass == 0) SkillFactor = (PlayerDEF / 8); // 8pts of Defense will decrease regen wait by 1 tic each [Deggaris]
			if (CharacterClass == 1) SkillFactor = (PlayerDEF / 10); // 10pts of Defense will decrease regen wait by 1 tic each [Illucia]
			if (CharacterClass == 2) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Flora]
			if (CharacterClass == 8) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Ailish]
			if (CharacterClass == 9) SkillFactor = (PlayerDEF / 6); // 6pts of Defense will decrease regen wait by 1 tic each [Petra]
			delaycount += SkillFactor;
			if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caHP Regen [Step 4 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Stamina Upgrades [Strife]
			SkillFactor = (StrifeStamLvl * 4) / 3;
			delaycount += SkillFactor;
			if (dvdsdebug_showhpregenstuff && StrifeStamLvl != 0) Console.Printf("    \caHP Regen [Step 5 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Accelerates HP Regen when Tension is Boosted
			previousdelaycount = delaycount;
			SkillFactor = 20;
			if (TensionLevel >= 1) SkillFactor += 1; // "5" = +1 [+5%]
			if (TensionLevel >= 2) SkillFactor += 2; // "20" = +3 [+15%]
			if (TensionLevel >= 3) SkillFactor += 2; // "50" = +5 [+25%]
			if (TensionLevel >= 4) SkillFactor += 3; // "100" = +8 [+40%]
			if (TensionLevel >= 5) SkillFactor += 3; // "250" = +11 [+55%]
			if (TensionLevel >= 6) SkillFactor += 4; // "500" = +15 [+75%]
			if (TensionLevel >= 7) SkillFactor += 5; // "500" = +20 [+100%]
			delaycount = (delaycount * SkillFactor) / 20;
			if (TensionLevel >= 5 && CallACS("MiscVarCheckDECORATE",184) == 0) delaycount *= frandompick[statitem2](1.0,1.05,1.1,1.15,1.2,1.25); // +~25%
			if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caHP Regen [Step 6 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
			
			// Focusing will slightly accelerate HP regeneration on Strife Mode
			previousdelaycount = delaycount;
			SkillFactor = 0;
			if (IsFocusOn > 0 && StrifeStamLvl > 0)
			{
				if (FocusTimer >= 105 && StrifeStamLvl >= 1) SkillFactor += (StrifeStamLvl * 1) / 5;
				if (FocusTimer >= 210 && StrifeStamLvl >= 1) SkillFactor += (StrifeStamLvl * 1) / 5;
				if (FocusTimer >= 315 && StrifeStamLvl >= 2) SkillFactor += (StrifeStamLvl * 2) / 5;
				if (FocusTimer >= 420 && StrifeStamLvl >= 2) SkillFactor += (StrifeStamLvl * 2) / 5;
				if (FocusTimer >= 525 && StrifeStamLvl >= 3) SkillFactor += (StrifeStamLvl * 3) / 5;
				if (FocusTimer >= 630 && StrifeStamLvl >= 3) SkillFactor += (StrifeStamLvl * 3) / 5;
				if (FocusTimer >= 735 && StrifeStamLvl >= 4) SkillFactor += (StrifeStamLvl * 4) / 5;
				if (FocusTimer >= 840 && StrifeStamLvl >= 4) SkillFactor += (StrifeStamLvl * 4) / 5;
				if (FocusTimer >= 945 && StrifeStamLvl >= 5) SkillFactor += (StrifeStamLvl * 5) / 5;
				if (FocusTimer >= 1050 && StrifeStamLvl >= 5) SkillFactor += (StrifeStamLvl * 5) / 5;
				if (FocusTimer >= 1155 && StrifeStamLvl >= 6) SkillFactor += (StrifeStamLvl * 6) / 5;
				if (FocusTimer >= 1260 && StrifeStamLvl >= 6) SkillFactor += (StrifeStamLvl * 6) / 5;
				if (FocusTimer >= 1365 && StrifeStamLvl >= 7) SkillFactor += (StrifeStamLvl * 7) / 5;
				if (FocusTimer >= 1470 && StrifeStamLvl >= 7) SkillFactor += (StrifeStamLvl * 7) / 5;
				if (FocusTimer >= 1575 && StrifeStamLvl >= 8) SkillFactor += (StrifeStamLvl * 8) / 5;
				if (FocusTimer >= 1680 && StrifeStamLvl >= 8) SkillFactor += (StrifeStamLvl * 8) / 5;
				if (FocusTimer >= 1785 && StrifeStamLvl >= 9) SkillFactor += (StrifeStamLvl * 9) / 5;
				if (FocusTimer >= 1890 && StrifeStamLvl >= 9) SkillFactor += (StrifeStamLvl * 9) / 5;
				if (FocusTimer >= 1995 && StrifeStamLvl >= 10) SkillFactor += (StrifeStamLvl * 10) / 5;
				if (FocusTimer >= 2100 && StrifeStamLvl >= 10) SkillFactor += (StrifeStamLvl * 10) / 5;
			}
			delaycount += SkillFactor;
			if (dvdsdebug_showhpregenstuff  && delaycount != previousdelaycount) Console.Printf("    \caHP Regen [Step 7 - Get Focus/StrifeStam RegenTimer Inc]: %d\c-, Added: %d, FocusTimer: %d", delaycount, SkillFactor, FocusTimer);
			
			// Check Musou Power Trip Mode
			SkillFactor = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount *= 2.5; // 250%
			if (dvds_musou_powertripmode == 2) delaycount *= 5; // 500%
			if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 8 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

			// Check Movement Inputs
			StaminaInputFactor = 100;
			if (PlayerCurrentHealth < RegenMaxHealth)
			{
				SkillFactor = delaycount;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (!(Owner.CountInv("ShieldDefense") || Owner.CountInv("ShieldDefense2") || Owner.CountInv("ShieldDefense3")))
					{
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 40 / 100;
						if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 50 / 100;
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 60 / 100;
						if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 40 / 100;
						if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 180 / 100;
					}
					else
					{
						if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 140 / 100;
					}
				}
				delaycount = (delaycount * StaminaInputFactor) / 100;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 9 - Regen Intervals (\cyInput: %d\ca)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
				
				// Checks Armor Items and other types for regen speed.
				SkillFactor = delaycount;
				int ArmorFactor = 100;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor += 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor += 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor += 15;
					if (Owner.CountInv("BalrogRing") > 0) ArmorFactor += 25;
					// total of 70 = 170% speed with all four items
				}
				delaycount = (delaycount * ArmorFactor) / 100;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 10 - Regen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 100", delaycount, SkillFactor, ArmorFactor);
				
				// Divine Avatar = 200% Total Regeneration Speed
				SkillFactor = delaycount;
				if (DivineAvatarTimer > 0) delaycount *= 2;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 11a - Regen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// GoE = 500% Total Regeneration Speed
				SkillFactor = delaycount;
				if (GoETimer > 0) delaycount *= 5;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 11b - Regen Intervals (GoE)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Acceleratle = 120% regen speed
				SkillFactor = delaycount;
				if (DQAcceleratleTimer > 0) delaycount *= 1.2;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 12a - Regen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				// Deceleratle = 80% regen speed
				SkillFactor = delaycount;
				if (DQDeceleratleTimer > 0) delaycount *= 0.8; 
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 12b - Regen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Poison = random 0.25/0.375.0.5/0.625/0.75x regen speed
				SkillFactor = delaycount;
				if (PoisonedTimer > 0) delaycount = (delaycount * random[statitem](2,6)) / 8;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 13 - Regen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Fatigue = 0.2x regen speed
				SkillFactor = delaycount;
				if (FatigueTimer > 0) delaycount *= 0.2;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 14 - Regen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Sleep = x5 regen speed
				SkillFactor = delaycount;
				PerkFactor = 10000;
				if (SleepTimer > 0)
				{
					delaycount *= 5;
					PerkFactor = ((RegHPFstPerkLvl * 2000) + (RegHPFstEXPerkLvl * 5000)) + 10000;
					delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 15 - Regen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
				
				// Flora's Regeneration Speed is reduced by 5/8s [62.5%] when holding the Ruinous Shield [curse effect]
				SkillFactor = delaycount;
				if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount *= 0.375;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 16 - Regen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// RegenHPFast perks
				SkillFactor = delaycount;
				PerkFactor = 10;
				if (RegHPFstPerkLvl > 0)
				{
					PerkFactor = ((RegHPFstPerkLvl * 2) + (RegHPFstEXPerkLvl * 5)) + 10;
					delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 17 - Regen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
				
				// "Death Rage" Perk
				SkillFactor = delaycount;
				if (CallACS("MiscVarCheckDECORATE",9043) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",9043) <= 1) delaycount *= 2;
					if (CallACS("MiscVarCheckDECORATE",9043) == 2) delaycount *= 4;
					if (CallACS("MiscVarCheckDECORATE",9043) >= 3) delaycount *= 8;
				}
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 18 - Regen Intervals (Death Rage)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// "Cleared of Mind" Perks
				SkillFactor = delaycount;
				PerkFactor = 80;
				if (ClearMindPerkLvl > 0)
				{
					perkfactor = ((ClearMindPerkLvl * 2) + (ClearMindEXPerkLvl * 5)) + 80;
					delaycount = delaycount * perkfactor / 80;
				}
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 19 - Regen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Fists/PoisonNeedle
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = RandomPick[statitem](24,26,26,28,28,28,30,30,30,30,32,32,32,34,34,36);
				delaycount = (delaycount * PerkFactor) / 20;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 20 - Regen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: %d / 20", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Sceptre Shielding Alt-fire
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("ShieldDefense") > 0) PerkFactor = random[statitem](28,32);
				if (Owner.CountInv("ShieldDefense2") > 0) PerkFactor = random[statitem](34,38);
				if (Owner.CountInv("ShieldDefense3") > 0) PerkFactor = random[statitem](40,44);
				delaycount = (delaycount * PerkFactor) / 20;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 21 - Regen Intervals (Sceptre - Defend)]: Interval: %d\c-, Previous: %d, Factor: %d / 20", delaycount, SkillFactor, PerkFactor);

				// Checks Health Regen Rate Menu Option
				SkillFactor = delaycount;
				delaycount = delaycount * dvds_healthregenmultiplier / 100;
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 22 - Regen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthregenmultiplier);
				
				// Low Cap to 1 Tics
				SkillFactor = delaycount;
				if (delaycount < 1) delaycount = 1;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 23 - Regen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their HP regen timer to count
				{
					HPRegenTimer += delaycount;
				}
			}
			else 
			{
				// Reset the Timer
				HPRegenTimer = 20 * random[statitem](-2,2);
			}
			if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 24 - Regen Intervals (Timers)]: HPRegenTimer %d / %d", HPRegenTimer, HPDelayInterval);

			if (HPRegenTimer >= HPDelayInterval)
			{
				// Base of 1 HP regen
				HPRegenAmount = 1;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R1 - Regen Amount (Base)]: %d", HPRegenAmount);

				// Every 50 Levels = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerLevel / 50);
				if (dvdsdebug_showhpregenstuff && HPRegenAmount != SkillFactor) Console.Printf("    \caHP Regen [Step R2 - Regen Amount (PlayerLevel)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Every 15 Pts of Strength = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerSTR / 15);
				if (dvdsdebug_showhpregenstuff && HPRegenAmount != SkillFactor) Console.Printf("    \caHP Regen [Step R3 - Regen Amount (PlayerSTR)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R4 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Set Health [uptick]
				if (PlayerCurrentHealth > 0)
				{
					PlayerCurrentHealth += HPRegenAmount;
					if (PlayerCurrentHealth > RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
					owner.player.health = owner.player.mo.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R5 - Increment HP]: %d, Current Health: %d / %d", HPRegenAmount, PlayerCurrentHealth, PlayerMaxHP);
				}

				// Reset the Timer
				HPRegenTimer = 20 * random[statitem](-2,2);
			}
			//****************
			//**Health Degen**
			//****************
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (dvds_healthdegenmode == 1)
			{
				// Base Character Interval Max
				if (CharacterClass == 0) HPDelayInterval2 = 41; // Deggaris Degenerates the Slowest [1.17 seconds]
				if (CharacterClass == 1) HPDelayInterval2 = 35; // Illucia has an even speed of Degeneration [1 second]
				if (CharacterClass == 2) HPDelayInterval2 = 29; // Flora Degenerates the second fastest [0.83 seconds]
				if (CharacterClass == 8) HPDelayInterval2 = 25; // Ailish Degenerates the fastest
				if (CharacterClass == 9) HPDelayInterval2 = 52; // Petra Degenerates even slower than Deggaris
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 1a - Base Interval Delay]: %d\c-", HPDelayInterval2);
				
				// Level Check [Interval Delay]
				previousdelaycount = HPDelayInterval2;
				if (TrueGameSkill <= SKILL_VERY_EASY) HPDelayInterval2 += 3;
				if (TrueGameSkill == SKILL_EASY) HPDelayInterval2 += 1;
				if (TrueGameSkill == SKILL_NORMAL) HPDelayInterval2 += 0;
				if (TrueGameSkill == SKILL_HARD) HPDelayInterval2 -= 1;
				if (TrueGameSkill == SKILL_VERY_HARD) HPDelayInterval2 -= 3;
				if (TrueGameSkill == SKILL_EXTREME) HPDelayInterval2 -= 4;
				if (TrueGameSkill == SKILL_HORRIBLE) HPDelayInterval2 -= 6;
				if (TrueGameSkill == SKILL_IMPOSSIBLE) HPDelayInterval2 -= 7;
				if (TrueGameSkill >= SKILL_OMEGA) HPDelayInterval2 -= 8;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth && HPDelayInterval2 != previousdelaycount) Console.Printf("    \caHP Degen [Step 1b - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);
				
				// Level
				previousdelaycount = HPDelayInterval2;
				SkillFactor = (PlayerLevel / 14); // up to +14
				HPDelayInterval2 += SkillFactor; 
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth && HPDelayInterval2 != previousdelaycount) Console.Printf("    \caHP Degen [Step 1c - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

				// Final Interval Calc
				previousdelaycount = HPDelayInterval2;
				HPDelayInterval2 *= 20;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 1d - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

				// Dove Ribbon Health Limit Check
				PlayerCurrentHealth = owner.health;
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 2 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Base Delay Count
				SkillFactor = 0;
				delaycount = 20;
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 3 - Get Base RegenTimer Increment]: %d\c-", delaycount);
				
				// Character Delay Count
				previousdelaycount = delaycount;
				SkillFactor = 0;
				if (CharacterClass == 0) SkillFactor = (PlayerDEF / 16); // 16pts of Defense will increase degen wait by 1 tic each [Deggaris]
				if (CharacterClass == 1) SkillFactor = (PlayerDEF / 20); // 20pts of Defense will increase degen wait by 1 tic each [Illucia]
				if (CharacterClass == 2) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Flora]
				if (CharacterClass == 8) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Ailish]
				if (CharacterClass == 9) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will increase degen wait by 1 tic each [Petra]
				delaycount -= SkillFactor;
				if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caHP Degen [Step 4 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
				
				// Stamina Upgrades [Strife]
				SkillFactor = (StrifeStamLvl * 3) / 4;
				delaycount += SkillFactor;
				if (dvdsdebug_showhpregenstuff && StrifeStamLvl != 0) Console.Printf("    \caHP Degen [Step 5 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);

				// Accelerates HP Regen when Tension is Boosted
				SkillFactor = 20;
				previousdelaycount = delaycount;
				if (TensionLevel >= 1) SkillFactor -= 0; // "5" = -0 [-0%]
				if (TensionLevel >= 2) SkillFactor -= 1; // "20" = -1 [-5%]
				if (TensionLevel >= 3) SkillFactor -= 1; // "50" = -2 [-10%]
				if (TensionLevel >= 4) SkillFactor -= 2; // "100" = -3 [-15%]
				if (TensionLevel >= 5) SkillFactor -= 2; // "250" = -5 [-25%]
				if (TensionLevel >= 6) SkillFactor -= 2; // "500" = -7 [-35%]
				if (TensionLevel >= 7) SkillFactor -= 3; // "500" = -10 [-50%]
				delaycount = (delaycount * SkillFactor) / 20;
				if (TensionLevel >= 5 && CallACS("MiscVarCheckDECORATE",184) == 0) delaycount *= frandompick[statitem2](1.0,0.95,0.9,0.85,0.8,0.75); // +~25%
				if (dvdsdebug_showhpregenstuff && delaycount != previousdelaycount) Console.Printf("    \caHP Degen [Step 6 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
				
				// Check Musou Power Trip Mode
				SkillFactor = delaycount;
				if (dvds_musou_powertripmode == 1) delaycount *= 0.4; // 40%
				if (dvds_musou_powertripmode == 2) delaycount *= 0.2; // 20%
				if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 7 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

				// Check Movement Inputs
				StaminaInputFactor = 100;
				if (PlayerCurrentHealth > RegenMaxHealth)
				{
					SkillFactor = delaycount;
					FreezePlayer = 0;
					if (MenuModeToggle > 0) FreezePlayer += 1;
					if (SleepTimer > 0) FreezePlayer += 1;
					if (FreezePlayer == 0)
					{
						if (!(Owner.CountInv("ShieldDefense") || Owner.CountInv("ShieldDefense2") || Owner.CountInv("ShieldDefense3")))
						{
							if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 100 / 40;
							if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 100 / 50;
							if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 100 / 60;
							if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 100 / 40;
							if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 100 / 180;
						}
						else
						{
							if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 100 / 140;
						}
					}
					delaycount = (delaycount * StaminaInputFactor) / 100;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 8 - Degen Intervals (\cyInput: %d\ca)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
					
					// Checks Armor Items and other types for regen speed.
					SkillFactor = delaycount;
					int ArmorFactor = 200;
					if (CharacterClass == 2)
					{
						if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor -= 20;
						if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor -= 10;
						if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor -= 15;
						if (Owner.CountInv("BalrogRing") > 0) ArmorFactor -= 25;
						// total of 70 = 170% speed with all four items
					}
					delaycount = (delaycount * ArmorFactor) / 200;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 9 - Degen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 200", delaycount, SkillFactor, ArmorFactor);
					
					// Divine Avatar = 31.25% Total Degeneration Speed
					SkillFactor = delaycount;
					if (DivineAvatarTimer > 0) delaycount *= 0.3125;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Regen [Step 10a - Degen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// GoE = 12.5% Total Degeneration Speed
					SkillFactor = delaycount;
					if (GoETimer > 0) delaycount *= 0.125;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 10b - Degen Intervals (GoE)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// Acceleratle = 120% degen speed
					SkillFactor = delaycount;
					if (DQAcceleratleTimer > 0) delaycount *= 1.2; 
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 11a - Degen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// Deceleratle = 80% degen speed
					SkillFactor = delaycount;
					if (DQDeceleratleTimer > 0) delaycount *= 0.8; 
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 11b - Degen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// Poison = random 4.0/2.666~/2/1.6/1.333~x degen speed
					SkillFactor = delaycount;
					if (PoisonedTimer > 0) delaycount = (delaycount * 8) / random[statitem](2,6);
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 12 - Degen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// Fatigue = 0.2x regen speed
					SkillFactor = delaycount;
					if (FatigueTimer > 0) delaycount *= 5;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 13 - Degen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// Sleep = x0.2 degen speed
					SkillFactor = delaycount;
					PerkFactor = 10000;
					if (SleepTimer > 0)
					{
						delaycount *= 0.2;
						PerkFactor = 10000 - ((RegHPFstPerkLvl * 2000) + (RegHPFstEXPerkLvl * 5000));
						delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
					}
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 14 - Degen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
					
					// Flora's Degeneration Speed is multiplied by 2.667 when holding the Ruinous Shield [curse effect]
					SkillFactor = delaycount;
					if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount *= 2.667;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 15 - Degen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
					
					// RegenHPFast perks
					SkillFactor = delaycount;
					PerkFactor = 10;
					if (RegHPFstPerkLvl > 0)
					{
						PerkFactor = 10 - ((RegHPFstPerkLvl * 2) + (RegHPFstEXPerkLvl * 5));
						delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
					}
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 16 - Degen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
					
					// "Death Rage" Perk
					SkillFactor = delaycount;
					if (CallACS("MiscVarCheckDECORATE",9043) > 0)
					{
						if (CallACS("MiscVarCheckDECORATE",9043) <= 1) delaycount *= 0.5;
						if (CallACS("MiscVarCheckDECORATE",9043) == 2) delaycount *= 0.25;
						if (CallACS("MiscVarCheckDECORATE",9043) >= 3) delaycount *= 0.125;
					}
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 17 - Degen Intervals (Death Rage)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

					// "Cleared of Mind" Perks
					SkillFactor = delaycount;
					PerkFactor = 80;
					if (ClearMindPerkLvl > 0)
					{
						perkfactor = 80 - ((ClearMindPerkLvl * 2) + (ClearMindEXPerkLvl * 5));
						delaycount = delaycount * perkfactor / 80;
					}
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 18 - Degen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
					
					// If Defending via Fists/PoisonNeedle
					SkillFactor = delaycount;
					PerkFactor = 20;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = RandomPick[statitem](24,26,26,28,28,28,30,30,30,30,32,32,32,34,34,36);
					delaycount = (delaycount * 20) / PerkFactor;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 19 - Degen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: 20 / %d", delaycount, SkillFactor, PerkFactor);
					
					// If Defending via Sceptre Shielding Alt-fire
					SkillFactor = delaycount;
					PerkFactor = 20;
					if (Owner.CountInv("ShieldDefense") > 0) PerkFactor = random[statitem](28,32);
					if (Owner.CountInv("ShieldDefense2") > 0) PerkFactor = random[statitem](34,38);
					if (Owner.CountInv("ShieldDefense3") > 0) PerkFactor = random[statitem](40,44);
					delaycount = (delaycount * 20) / PerkFactor;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 20 - Regen Intervals (Sceptre - Defend)]: Interval: %d\c-, Previous: %d, Factor: %d / 20", delaycount, SkillFactor, PerkFactor);

					// Checks Health Regen Rate Menu Option
					SkillFactor = delaycount;
					delaycount = delaycount * dvds_healthdegenmultiplier / 100;
					if (dvdsdebug_showhpregenstuff && delaycount != SkillFactor) Console.Printf("    \caHP Degen [Step 21 - Degen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthdegenmultiplier);
					
					// Low Cap to 1 Tics
					SkillFactor = delaycount;
					if (delaycount < 1) delaycount = 1;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 22 - Degen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

					if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
					if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their HP degen timer to count
					{
						HPDegenTimer += delaycount;
					}
				}
				else 
				{
					// Reset the Timer
					HPDegenTimer = 20 * random[statitem](-2,2);
				}
				if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 23 - Degen Intervals (Timers)]: HPDegenTimer %d / %d", HPDegenTimer, HPDelayInterval2);

				if (HPDegenTimer >= HPDelayInterval2)
				{
					// Base of 1 HP Degen
					HPDegenAmount = 1;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step D1 - Degen Amount (Base)]: %d", HPDegenAmount);

					// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
					if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
					if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step D2 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

					// Set Health [uptick]
					if (PlayerCurrentHealth > 0)
					{
						PlayerCurrentHealth -= HPDegenAmount;
						if (PlayerCurrentHealth < RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
						owner.player.health = owner.player.mo.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						if (dvdsdebug_showhpregenstuff && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step D3 - Decrement HP]: %d, Current Health: %d / %d", HPDegenAmount, PlayerCurrentHealth, PlayerMaxHP);
					}

					// Reset the Timer
					HPDegenTimer = 20 * random[statitem](-2,2);
				}
			}
			
			
			//****************
			//*POISON AILMENT*
			//****************
			// Base Max Increment
			int debugpoison = dvdsdebug_poisonailmentdisplays;
			PoisonMaxInterval = 12;
			PoisonMaxInterval += (PlayerDEF / 8);
			PoisonMaxInterval += (PlayerSTR / 16);
			PoisonMaxInterval *= 20;
			if (debugpoison) Console.Printf("    \cuPoison Damage [Step 1 - Max Interval Base]: %d\c-, DEF: %d, STR: %d", PoisonMaxInterval, PlayerDEF, PlayerSTR);

			// Difficulty Level
			previousdelaycount = PoisonMaxInterval;
			if (TrueGameSkill <= SKILL_VERY_EASY) PoisonMaxInterval = PoisonMaxInterval * 22 / 20;
			if (TrueGameSkill == SKILL_EASY) PoisonMaxInterval = PoisonMaxInterval * 21 / 20;
			if (TrueGameSkill == SKILL_NORMAL) PoisonMaxInterval = PoisonMaxInterval * 20 / 20;
			if (TrueGameSkill == SKILL_HARD) PoisonMaxInterval = PoisonMaxInterval * 19 / 20;
			if (TrueGameSkill == SKILL_VERY_HARD) PoisonMaxInterval = PoisonMaxInterval * 18 / 20;
			if (TrueGameSkill == SKILL_EXTREME) PoisonMaxInterval = PoisonMaxInterval * 17 / 20;
			if (TrueGameSkill == SKILL_HORRIBLE) PoisonMaxInterval = PoisonMaxInterval * 16 / 20;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) PoisonMaxInterval = PoisonMaxInterval * 15 / 20;
			if (TrueGameSkill >= SKILL_OMEGA) PoisonMaxInterval = PoisonMaxInterval * 14 / 20;
			if (debugpoison && PoisonMaxInterval != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 2 - Max Interval (Difficulty)]: %d\c-, Previous: %d", PoisonMaxInterval, previousdelaycount);

			// Check for Poison [-Invuln]
			if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) // Being invulnerable will prevent poison damage from occuring.
			{
				if (UsingInGameMenu == 0) 
				{
					// Base Increment
					PoisonIncrement = 20;
					if (debugpoison) Console.Printf("    \cuPoison Damage [Step 3 - Count Interval Base]: %d\c-", PoisonIncrement);
			
					// Input Alterations
					previousdelaycount = PoisonIncrement;
					SkillFactor = 100;
					if (MenuModeToggle > 0) FreezePlayer += 1;
					if (SleepTimer > 0) FreezePlayer += 1;
					if (FreezePlayer == 0)
					{
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) SkillFactor = SkillFactor * 125 / 100;
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) SkillFactor = SkillFactor * random[statitem](112,113) / 100;
						if (buttons & BT_JUMP) SkillFactor = SkillFactor * 125 / 100;
						if (buttons & BT_CROUCH) SkillFactor = SkillFactor * 75 / 100;
						PoisonIncrement = PoisonIncrement * SkillFactor / 100;
					}
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (\cyInput: %d\cu)]: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, PoisonIncrement, previousdelaycount, SkillFactor, FreezePlayer);
			
					// Check Characters & Armor
					previousdelaycount = PoisonIncrement;
					if (CharacterClass == 2)
					{
						SkillFactor = 1000;
						if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 83;
						if (Owner.CountInv("DoveRibbon") > 0) SkillFactor -= 334;
						if (Owner.CountInv("DivineShield") > 0) SkillFactor -= 83;
						PoisonIncrement = PoisonIncrement * SkillFactor / 1000;
						if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Flora)]: %d\c-, Previous: %d, InputFactor: %d / 1000", PoisonIncrement, previousdelaycount, SkillFactor);
					}
					else
					if (CharacterClass == 0 || CharacterClass == 1)
					{
						SkillFactor = 100;
						if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor -= 2; // (-2% for Green Armor)
						if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor -= 4; // (-4% for Blue Armor)
						if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor -= 5; // (-5% for Stone Armor 1)
						if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor -= 7; // (-7% for Diamond Armor 1)
						if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor -= 6; // (-6% for Stone Armor 2)
						if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor -= 8; // (-8% for Diamond Armor 2)
						PoisonIncrement = PoisonIncrement * SkillFactor / 100;
						if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Marines)]: %d\c-, Previous: %d, InputFactor: %d / 100", PoisonIncrement, previousdelaycount, SkillFactor);
					}
					
					// Buffs
					previousdelaycount = PoisonIncrement;
					if (DQAcceleratleTimer > 0) PoisonIncrement *= 1.2; // Acceleratle = 120% Speed
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 5a - Count Interval (Acceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

					previousdelaycount = PoisonIncrement;
					if (DQDeceleratleTimer > 0) PoisonIncrement *= 0.8; // Deceleratle = 80% Speed
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 5b - Count Interval (Deceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

					previousdelaycount = PoisonIncrement;
					if (FatigueTimer > 0) PoisonIncrement *= 1.8; // Fatigue = 180% Speed
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 6 - Count Interval (Fatigue)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);
					
					previousdelaycount = PoisonIncrement;
					if (SleepTimer > 0) PoisonIncrement *= 0.2; // Sleep = 20% Speed
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 7 - Count Interval (Sleep)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

					previousdelaycount = PoisonIncrement;
					if (BerserkTimer > 0) PoisonIncrement *= 1.5; // Berserk = 150% Speed
					if (debugpoison && PoisonIncrement != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 8 - Count Interval (Berserk)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

					if (UsingInGameMenu == 0) 
					{
						PoisonTimer += PoisonIncrement;
						if (debugpoison) Console.Printf("    \cuPoison Damage [Step 9 - Timer]: %d / %d\c-, Increment: %d", PoisonTimer, PoisonMaxInterval, PoisonIncrement);
					}
				}

				// Poison Damage
				if (PoisonTimer >= PoisonMaxInterval)
				{
					PoisonTimer = 0;

					PoisonHealth = PlayerCurrentHealth;
					PoisonHealthThreshold = PlayerMaxHP / 50;
					if (PoisonHealthThreshold < 2) PoisonHealthThreshold = 2;
					if (debugpoison) Console.Printf("    \cuPoison Damage [Step 9 - Get Poison LowCap]: %d\c-, Health: %d", PoisonHealthThreshold, PoisonHealth);
					if (PoisonHealth > PoisonHealthThreshold)
					{
						PoisonDmg = PlayerMaxHP / 200;
						if (PoisonDmg < 1) PoisonDmg = 1;
						if (debugpoison) Console.Printf("    \cuPoison Damage [Step 10 - Base Poison Dmg]: %d\c-", PoisonDmg);

						previousdelaycount = PoisonDmg;
						if (random[statitem](1,8) == 8)
						{
							if (random[statitem](1,8) == 8) PoisonDmg *= 3; else PoisonDmg *= 2;
						}
						if (debugpoison && PoisonDmg != previousdelaycount) Console.Printf("    \cuPoison Damage [Step 11 - Random 2/3x Multi]: %d\c-, Previous: %d", PoisonDmg, previousdelaycount);
						
						// Flash Screen and Deal damage
						int PoisonFlash = random[statitem](1,5);
						string PoisonFlashClr = "00 DF 00";
						if (PoisonFlash == 1) PoisonFlashClr = "00 BF 00";
						if (PoisonFlash == 2) PoisonFlashClr = "00 CF 00";
						if (PoisonFlash == 3) PoisonFlashClr = "00 DF 00";
						if (PoisonFlash == 4) PoisonFlashClr = "00 EF 00";
						if (PoisonFlash == 5) PoisonFlashClr = "00 FF 00";
						owner.A_SetBlend(PoisonFlashClr,0.125,17);
						PoisonHealth -= PoisonDmg;
						if (PoisonHealth < PoisonHealthThreshold) PoisonHealth = PoisonHealthThreshold;
						owner.player.health = owner.player.mo.health = PoisonHealth;
						PlayerCurrentHealth = owner.player.health;
						if (debugpoison) Console.Printf("    \cuPoison Damage [Step 12 - Deal Damage]: Health %d\c-, Damage Dealt: %d", PoisonHealth, PoisonDmg);
						
						// Pain Sounds
						PoisonHits++;
						if (debugpoison) Console.Printf("    \cuPoison Damage [Step 13 - Hit Count], Hits: %d", PoisonHits);
						if (PoisonHits >= 3)
						{
							PoisonHits = 0;
							if (random[statitem](1,16) == 16)
							{
								if (debugpoison) Console.Printf("    \cyPoison Damage [Step 14 - Play Voice]", PoisonHits);
								owner.A_StopSound(CHAN_VOICE);
								if (CharacterClass == 9)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("PetraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("PetraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("PetraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 8)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("AilishPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("AilishPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("AilishPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 2)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("FloraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("FloraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("FloraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 1)
								{
									if (PoisonHealth > 0) owner.A_PlaySound("illucia/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 0)
								{
									if (PoisonHealth > 0) owner.A_PlaySound("deggaris/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
							}
						}
						
					}
				}
			}
			else
			{
				PoisonDmg = 0;
				PoisonTimer = 0;
				PoisonHits = 0;
			}
			
			
			//*********************
			//**Magic Regen/Degen**
			//*********************
			// Base Delay Count
			int debugmanaregen = dvdsdebug_showmanaregenstuff;
			if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their MP regen timer to count
			{
				if (PlayerCurrentMP < PlayerMaxMP)
				{
					if (UsingInGameMenu != 0) // If using In-Game Menus
					{
						delaycount = 0;
						if (debugmanaregen) Console.Printf("    \cjIn In-Game Menus\c-: %d / %d (%d)", PlayerCurrentMP, PlayerMaxMP, delaycount);
					}
					else
					{
						delaycount = 20;
						if (debugmanaregen) Console.Printf("    \cnMP Regen [Step 1 - Base Count]: %d\c-", delaycount);

						// Stamina Upgrades [Strife]
						previousdelaycount = delaycount;
						SkillFactor = (StrifeStamLvl * 2) / 3;
						delaycount += SkillFactor;
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 2 - Strife - Stamina Upgrade]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						// Accelerates MP Regen when Tension is Boosted
						previousdelaycount = delaycount;
						if (TensionLevel >= 1) delaycount += 1; // "5" = +1 [+5%]
						if (TensionLevel >= 2) delaycount += 2; // "20" = +3 [+15%]
						if (TensionLevel >= 3) delaycount += 2; // "50" = +5 [+25%]
						if (TensionLevel >= 4) delaycount += 3; // "100" = +8 [+40%]
						if (TensionLevel >= 5) delaycount += 3; // "250" = +11 [+55%]
						if (TensionLevel >= 6) delaycount += 4; // "500" = +15 [+75%]
						if (TensionLevel >= 7) delaycount += 5; // "1000" = +20 [+100%]
						if (TensionLevel >= 5 && CallACS("MiscVarCheckDECORATE",184) == 0) delaycount *= frandompick[statitem2](1.0,1.05,1.1,1.15,1.2,1.25); // +~25%
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 3 - Tension]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						// PowerTrip Mode
						previousdelaycount = delaycount;
						if (dvds_musou_powertripmode == 1) delaycount *= 2.5; // 250%
						if (dvds_musou_powertripmode == 2) delaycount *= 5.0; // 500%
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 4 - Musou/Power Trip Mode]: %d\c-, Previous: %d", delaycount, previousdelaycount);
						
						previousdelaycount = delaycount;
						if (DQAcceleratleTimer > 0) delaycount *= 1.2; // Acceleratle = 1.2x regen speed
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 5a - Acceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						previousdelaycount = delaycount;
						if (DQDeceleratleTimer > 0) delaycount *= 0.8; // Deceleratle = 0.8x regen speed
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 5b - Deceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						previousdelaycount = delaycount;
						if (FatigueTimer > 0) delaycount *= 0.2; // Fatigue = 0.2x regen speed
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 6 - Fatigue]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						previousdelaycount = delaycount;
						if (GoETimer > 0) delaycount *= 5; // GoE 5x regen speed
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 7a - GoE]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						previousdelaycount = delaycount;
						if (DivineAvatarTimer > 0) delaycount *= 1.125; // Divine Avatar = 1.125x regen speed
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 7b - Divine Avatar]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						previousdelaycount = delaycount;
						if (SleepTimer > 0)
						{
							delaycount *= 5; // Sleep = 5x regen speed
							PerkFactor = ((RegMPFstPerkLvl * 2000) + (RegMPFstEXPerkLvl * 5000)) + 10000;
							delaycount = delaycount * PerkFactor / 10000; // "RegenMPFast" and "RegenMPFast EX" perks.
						}
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 8 - Sleep]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						// Ruinous Shield - greatly reduces MP regeneration speed
						previousdelaycount = delaycount;
						if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount *= 0.375; // 37.5%
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 9 - Ruinous Shield]: %d\c-, Previous: %d", delaycount, previousdelaycount);
					
						// RegenMPFast perks
						previousdelaycount = delaycount;
						perkfactor = 10;
						if (RegMPFstPerkLvl > 0)
						{
							PerkFactor = 10 + ((RegMPFstPerkLvl * 2) + (RegMPFstEXPerkLvl * 5));
							delaycount = delaycount * PerkFactor / 10; // "RegenMPFast" and "RegenMPFast EX" perks.
						}
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 10 - Regen MP Fast]: %d\c-, Previous: %d, Factor: %d / 10", delaycount, previousdelaycount, PerkFactor);
					
						// "Cleared of Mind" Perks
						previousdelaycount = delaycount;
						perkfactor = 80;
						if (ClearMindPerkLvl > 0)
						{
							perkfactor = 80 + ((ClearMindPerkLvl * 2) + (ClearMindEXPerkLvl * 5));
							delaycount = delaycount * perkfactor / 80;
						}
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 11 - Cleared of Mind]: %d\c-, Previous: %d, Factor: %d / 80", delaycount, previousdelaycount, PerkFactor);
						
						// Checks Mana Regen Rate Menu Option
						previousdelaycount = delaycount;
						delaycount = delaycount * dvds_manaregenratemultiplier / 100;
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 12 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", delaycount, previousdelaycount, dvds_manaregenratemultiplier);
						
						// Focusing
						previousdelaycount = delaycount;
						if (IsFocusOn > 0)
						{
							// Slowly increases the speed of regen as focus lasts longer
							if (FocusTimer >= 140) delaycount += 1; // [4 seconds]
							if (FocusTimer >= 245) delaycount += 1; // [7 seconds]
							if (FocusTimer >= 350) delaycount += 2; // [10 seconds]
							if (FocusTimer >= 490) delaycount += 2; // [14 seconds]
							if (FocusTimer >= 630) delaycount += 3; // [18 seconds]
							if (FocusTimer >= 770) delaycount += 3; // [22 seconds]
							if (FocusTimer >= 980) delaycount += 4; // [28 seconds]
							if (FocusTimer >= 1190) delaycount += 4; // [34 seconds]
							if (FocusTimer >= 1470) delaycount += 5; // [42 seconds]
							if (FocusTimer >= 1750) delaycount += 5; // [50 seconds]
							if (FocusTimer >= 2100) delaycount += 6; // [60 seconds]
							if (FocusTimer >= 2450) delaycount += 6; // [70 seconds]
							if (FocusTimer >= 2870) delaycount += 7; // [82 seconds]
							if (FocusTimer >= 3290) delaycount += 7; // [94 seconds]
							if (FocusTimer >= 3780) delaycount += 8; // [108 seconds]
							if (FocusTimer >= 4270) delaycount += 8; // [122 seconds]
							if (FocusTimer >= 2100) delaycount = (delaycount * 3) / 2; // [60 seconds]
							if (FocusTimer >= 4200) delaycount = (delaycount * 3) / 2; // [60 seconds]
					
							if (StrifeStamLvl > 0)
							{
								if (FocusTimer >= 350) delaycount += (StrifeStamLvl * 1) / 4;
								if (FocusTimer >= 700 && StrifeStamLvl >= 2) delaycount += (StrifeStamLvl * 1) / 4;
								if (FocusTimer >= 1050 && StrifeStamLvl >= 4) delaycount += (StrifeStamLvl * 1) / 3;
								if (FocusTimer >= 1400 && StrifeStamLvl >= 6) delaycount += (StrifeStamLvl * 1) / 3;
								if (FocusTimer >= 1750 && StrifeStamLvl >= 8) delaycount += (StrifeStamLvl * 1) / 2;
								if (FocusTimer >= 2100 && StrifeStamLvl >= 10) delaycount += (StrifeStamLvl * 1) / 2;
							}
					
							if (random[statitem](1,25) == 1) delaycount *= 8; else delaycount *= 4;
					
							FocusHumTimer = FocusTimer % 25;
							if (FocusTimer >= 140) FocusHumTimer = FocusTimer % 24;
							if (FocusTimer >= 245) FocusHumTimer = FocusTimer % 23;
							if (FocusTimer >= 315) FocusHumTimer = FocusTimer % 22;
							if (FocusTimer >= 350) FocusHumTimer = FocusTimer % 21;
							if (FocusTimer >= 490) FocusHumTimer = FocusTimer % 19;
							if (FocusTimer >= 630) FocusHumTimer = FocusTimer % 17;
							if (FocusTimer >= 910) FocusHumTimer = FocusTimer % 15;
							if (FocusTimer >= 2100) FocusHumTimer = FocusTimer % 12;

							if (FocusHumTimer == 1) owner.A_PlaySound("focushum",7,1.125);
						}
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 13 - Focusing]: %d\c-, Previous: %d, FocusHumTimer: %d, FocusTimer: %d", delaycount, previousdelaycount, FocusHumTimer, FocusTimer);
					
						// Weapons
						previousdelaycount = delaycount;
						If (weapon is "SapphireWandNew")
						{
							if (WandMastPerkLvl <= 0) delaycount *= 1.05;
							if (WandMastPerkLvl == 1) delaycount *= 1.25;
							if (WandMastPerkLvl == 2) delaycount *= 1.45;
							if (WandMastPerkLvl == 3) delaycount *= 1.65;
							if (WandMastPerkLvl == 4) delaycount *= 1.85;
							if (WandMastPerkLvl >= 5) delaycount *= 2.05;
						}
						If (weapon is "DualSapphireWandsNew")
						{
							if (WandMastPerkLvl <= 0) delaycount *= 1.10;
							if (WandMastPerkLvl == 1) delaycount *= 1.50;
							if (WandMastPerkLvl == 2) delaycount *= 1.90;
							if (WandMastPerkLvl == 3) delaycount *= 2.30;
							if (WandMastPerkLvl == 4) delaycount *= 2.70;
							if (WandMastPerkLvl >= 5) delaycount *= 3.10;
						}
						if (debugmanaregen && delaycount != previousdelaycount) Console.Printf("    \cnMP Regen [Step 14 - Weapon Checking]: %d\c-, Previous: %d", delaycount, previousdelaycount);

						// Final Checks
						previousdelaycount = delaycount;
						if (delaycount < 1) delaycount = 1;
						// If Player is "Conscious" and Mana is below Max
						MPRegenTimer += delaycount;
						if (debugmanaregen) Console.Printf("    \cnMP Regen [Step 15 - Timer Check]: %d / %d\c-, delaycount: %d, Previous: %d", MPRegenTimer, MPDelayInterval, delaycount, previousdelaycount);
					}
				}
				else
				{
					delaycount = 0;
					if (debugmanaregen) Console.Printf("    \cjMP Neutral\c-: %d / %d", PlayerCurrentMP, PlayerMaxMP);
				}
			}
			
			RegenedMana = 0;
			if (MPRegenTimer >= MPDelayInterval)
			{
				if (PlayerCurrentMP < PlayerMaxMP && PlayerCurrentHealth > 0)
				{
					// A combined total of 12-20 points of Sorcery/Theraphesuis are needed for an extra point of MP regen.
					if (TrueGameSkill <= SKILL_VERY_EASY)
					{
						RegenedMana = 3;
						regenedmanabasereq = dvds_regenmanabasestatreq * 0.75;
					}
					if (TrueGameSkill == SKILL_EASY) 
					{
						RegenedMana = random[statitem](2,3);
						regenedmanabasereq = dvds_regenmanabasestatreq * 0.875;
					}
					if (TrueGameSkill == SKILL_NORMAL)
					{
						RegenedMana = 2;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1;
					}
					if (TrueGameSkill == SKILL_HARD) 
					{
						RegenedMana = random[statitem](1,2);
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.125;
					}
					if (TrueGameSkill == SKILL_VERY_HARD) 
					{
						RegenedMana = 1;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.25;
					}
					if (TrueGameSkill == SKILL_EXTREME) 
					{
						RegenedMana = 1;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.375;
					}
					if (TrueGameSkill == SKILL_HORRIBLE) 
					{
						RegenedMana = 1;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.5;
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) 
					{
						RegenedMana = 1;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.625;
					}
					if (TrueGameSkill == 8) 
					{
						RegenedMana = 1;
						regenedmanabasereq = dvds_regenmanabasestatreq * 1.75;
					}
					RegenedMana += ((PlayerSOR + PlayerTHE) / regenedmanabasereq);
				}
				if (debugmanaregen) Console.Printf("    \cnMP Regen [Step x1 - Base Regen Amount]: %d\c-, Required (SOR+THE) Pts: %d", RegenedMana, regenedmanabasereq);

				previousdelaycount = RegenedMana;
				if (DivineAvatarTimer > 0) // Divine Avatar
				{
					SkillFactor = PlayerLevel / 10;
					RegenedMana += SkillFactor;
					if (random[statitem](0,100) < 26)
					{
						RegenedMana = RegenedMana * 5 / 4;
					}
					else
					{
						if (random[statitem](0,100) < 51)
						{
							RegenedMana = RegenedMana * 9 / 8;
						}
					}
				}
				else
				{
					SkillFactor = PlayerLevel / 25;
					RegenedMana += SkillFactor;
					if (random[statitem](0,100) < 26)
					{
						RegenedMana = RegenedMana * 17 / 16;
					}
					else
					{
						if (random[statitem](0,100) < 51)
						{
							RegenedMana = RegenedMana * 33 / 32;
						}
					}
				}
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x2 - Divine Avatar Check]: %d\c-, Previous: %d, Added: %d", RegenedMana, previousdelaycount, SkillFactor);
	
				// Character-Based regen factors
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0) RegenedMana = RegenedMana * random[statitem](15,17) / 16; // Deggaris (93.75% - 106.25%)
				if (CharacterClass == 1) RegenedMana = RegenedMana * random[statitem](19,21) / 16; // Illucia (118.75% - 131.25%)
				if (CharacterClass == 2) RegenedMana = RegenedMana * random[statitem](23,25) / 16; // Flora (143.75% - 156.25%)
				if (CharacterClass == 8) RegenedMana = RegenedMana * random[statitem](23,25) / 16; // Ailish (143.75% - 156.25%)
				if (CharacterClass == 9) RegenedMana = RegenedMana * random[statitem](17,19) / 16; // Petra (106.25% - 118.75%)
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x3 - Character Check]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// Sauron's Helmet
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 11 / 8; // Deggaris w/ Helmet (137.5%)
				if (CharacterClass == 1 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 10 / 8; // Illucia w/ Helmet (125%)
				if (CharacterClass == 2 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 8 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 9 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 12 / 8; // Petra w/ Helmet (150%)
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x4a - Sauron's Helmet]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Sauron's Gauntlets
				previousdelaycount = RegenedMana;
				if (Owner.CountInv("SauronGauntletsItem") > 0)
				{
					if (CharacterClass == 0) RegenedMana = RegenedMana * 5 / 4; // Deggaris w/ Gauntlets (125%)
					if (CharacterClass == 1) RegenedMana = RegenedMana * 5 / 4; // Illucia w/ Gauntlets (125%)
					if (CharacterClass == 2) RegenedMana = RegenedMana * 5 / 4; // Flora w/ Gauntlets (125%)
					if (CharacterClass == 8) RegenedMana = RegenedMana * 5 / 4; // Ailish w/ Gauntlets (125%)
					if (CharacterClass == 9) RegenedMana = RegenedMana * 5 / 4; // Petra w/ Gauntlets (125%)
				}
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x4b - Sauron's Gauntlets]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// The One Ring
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Deggaris w/ Ring (62.5%)
				if (CharacterClass == 1 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Illucia w/ Ring (75%)
				if (CharacterClass == 2 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 7 / 8; // Flora w/ Ring (87.5%)
				if (CharacterClass == 8 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Ailish w/ Ring (87.5%)
				if (CharacterClass == 9 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Petra w/ Ring (62.5%)
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x4c - The One Ring]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				previousdelaycount = RegenedMana;
				if (DQAcceleratleTimer > 0) RegenedMana *= 1.2; // Acceleratle = +20% Regen
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x5a - Acceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
				previousdelaycount = RegenedMana;
				if (DQDeceleratleTimer > 0) RegenedMana *= 0.8; // Deceleratle = -20% Regen
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x5b - Deceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Poison = +8.334% Regen
				previousdelaycount = RegenedMana;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) RegenedMana = RegenedMana * 13 / 12;
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x6 - Poison]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Checks Mana Regen Rate Menu Option
				previousdelaycount = RegenedMana;
				RegenedMana = RegenedMana * dvds_manaregenmultiplier / 100;
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x7 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", RegenedMana, previousdelaycount, dvds_manaregenmultiplier);
					
				// Weapons
				previousdelaycount = RegenedMana;
				If (weapon is "SapphireWandNew")
				{
					if (WandMastPerkLvl == 1) RegenedMana = RegenedMana * 41 / 40;
					if (WandMastPerkLvl == 2) RegenedMana = RegenedMana * 43 / 40;
					if (WandMastPerkLvl == 3) RegenedMana = RegenedMana * 45 / 40;
					if (WandMastPerkLvl == 4) RegenedMana = RegenedMana * 48 / 40;
					if (WandMastPerkLvl == 5) RegenedMana = RegenedMana * 51 / 40;
				}
				If (weapon is "DualSapphireWandsNew")
				{
					if (WandMastPerkLvl == 1) RegenedMana = RegenedMana * 42 / 40;
					if (WandMastPerkLvl == 2) RegenedMana = RegenedMana * 46 / 40;
					if (WandMastPerkLvl == 3) RegenedMana = RegenedMana * 50 / 40;
					if (WandMastPerkLvl == 4) RegenedMana = RegenedMana * 56 / 40;
					if (WandMastPerkLvl == 5) RegenedMana = RegenedMana * 62 / 40;
				}
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x8 - Weapon Checking]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugmanaregen) Console.Printf("    \cnMP Regen [Step x9 - LOWCap 1]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// New Addition = Caps Maximum Mana Regeneration to a certain amount based on Difficulty and armor-type items.
				MaxRegenableMana = PlayerMaxMP * 50 / 100;
				if (TrueGameSkill <= SKILL_VERY_EASY) MaxRegenableMana = PlayerMaxMP * 61 / 100; 	// (61% of Max)
				if (TrueGameSkill == SKILL_EASY) MaxRegenableMana = PlayerMaxMP * 55 / 100; 				// (55% of Max)
				if (TrueGameSkill == SKILL_NORMAL) MaxRegenableMana = PlayerMaxMP * 50 / 100; 			// (50% of Max)
				if (TrueGameSkill == SKILL_HARD) MaxRegenableMana = PlayerMaxMP * 45 / 100; 				// (45% of Max)
				if (TrueGameSkill == SKILL_VERY_HARD) MaxRegenableMana = PlayerMaxMP * 39 / 100; 	// (39% of Max)
				if (TrueGameSkill == SKILL_EXTREME) MaxRegenableMana = PlayerMaxMP * 36 / 100; 		// (36% of Max)
				if (TrueGameSkill == SKILL_HORRIBLE) MaxRegenableMana = PlayerMaxMP * 33 / 100; 		// (33% of Max)
				if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxRegenableMana = PlayerMaxMP * 30 / 100; 	// (30% of Max)
				if (TrueGameSkill >= SKILL_OMEGA) MaxRegenableMana = PlayerMaxMP * 27 / 100; 			// (27% of Max)
				if (debugmanaregen) Console.Printf("    \cnMP Regen [Step x10 - Get Max Regen]: %d\c-, MaxRegen: %d", RegenedMana, MaxRegenableMana);
	
				EquippedRegenCap = 100; // in percent
				// All-Character Specfic Items
				if (Owner.CountInv("SauronHelmet") > 0) EquippedRegenCap -= 25;  // (-25% extension if Sauron's Helmet is equipped)
				if (Owner.CountInv("SauronGauntlets") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsFlora") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsAilish"; APPackCheck = nm; 
				if (Owner.CountInv(APPackCheck) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsPetra"; APPackCheck2 = nm; 
				if (Owner.CountInv(APPackCheck2) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("TheOneRing") > 0) EquippedRegenCap += 50;  // (+50% extension if The One Ring is equipped)
				// Marine Specfic Items (between -4% and -16%, since only one can be equipped at once
				if (Owner.CountInv("DSGreenArmorClass") > 0) EquippedRegenCap -= 4; // (-4% for Green Armor)
				if (Owner.CountInv("DSBlueArmorClass") > 0) EquippedRegenCap -= 8; // (-8% for Blue Armor)
				if (Owner.CountInv("DSStoneArmorClass1") > 0) EquippedRegenCap -= 10; // (-10% for Stone Armor 1)
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) EquippedRegenCap -= 14; // (-14% for Diamond Armor 1)
				if (Owner.CountInv("DSStoneArmorClass2") > 0) EquippedRegenCap -= 12; // (-12% for Stone Armor 2)
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) EquippedRegenCap -= 16; // (-16% for Diamond Armor 2)
				// Flora Specfic Items (up to +150%)
				if (Owner.CountInv("EvenstarNecklace") > 0) EquippedRegenCap += 25;  // (+25% extension if Evenstar Necklace is equipped)
				if (Owner.CountInv("AnubisCufflinks") > 0) EquippedRegenCap += 62;  // (+62% extension if Anubis Cufflinks are equipped)
				if (Owner.CountInv("KissaBra") > 0) EquippedRegenCap += 38; // (+38% extension if Kissa's Armor Brassiere is equipped)
				if (Owner.CountInv("BalrogRing") > 0) EquippedRegenCap += 25; // (+25% extension if Balrog's Ring is equipped)
				if (debugmanaregen && EquippedRegenCap != 100) Console.Printf("    \cnMP Regen [Step x11 - Get Equip Regen Cap]: %d\c-, EquipRegenCap: %d", RegenedMana, EquippedRegenCap);
	
				if (EquippedRegenCap < 20) EquippedRegenCap = 20;
				if (EquippedRegenCap > 640) EquippedRegenCap = 640;
				MaxRegenableMana = MaxRegenableMana * EquippedRegenCap / 100;
				if (debugmanaregen && EquippedRegenCap != 100) Console.Printf("    \cnMP Regen [Step x12 - Misc]: %d\c-, EquipRegenCap: %d, MaxRegenableMana: %d", RegenedMana, EquippedRegenCap, MaxRegenableMana);

				// Caps Mana Regeneration to a certain % of the maximum based on difficulty level
				previousdelaycount = RegenedMana;
				if (RegenedMana > MaxRegenableMana) RegenedMana = MaxRegenableMana;
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x13 - HighCap 1]: %d\c-, Previous: %d, MaxRegenableMana: %d%", RegenedMana, previousdelaycount, MaxRegenableMana);
	
				// Dove's Ribbon [Increases MP Regeneration]
				previousdelaycount = RegenedMana;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("DoveRibbon") > 0)
					{
						RegenedMana += random[statitem](2,4); // Only Flora can use the Dove's Ribbon (100% Chance of Extra 2-4 Mana)
						if (random[statitem](1,4) == 1) RegenedMana += random[statitem](1,2); // Only Flora can use the Dove's Ribbon (25% Chance of extra 1-2 Mana)
						if (random[statitem](1,16) == 1) RegenedMana += random[statitem](1,2); // Only Flora can use the Dove's Ribbon (6.25% Chance of extra 1-2 Mana)
						if (random[statitem](1,64) == 1) RegenedMana += random[statitem](1,2); // Only Flora can use the Dove's Ribbon (1.5625% Chance of extra 1-2 Mana)
					}
				}
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x14 - Dove's Ribbon]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				previousdelaycount = RegenedMana;
				SkillFactor = 36;
				// Focus = 12.5% more mana per interval
				if (IsFocusOn > 0)
				{
					if (CharacterClass == 2)
					{
						if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 2;
						if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 2;
						if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 2;
					}
					else
					{
						if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 1;
						if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 2;
						if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 3;
						if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 4;
						if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 5;
						if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 6;
					}
					RegenedMana = RegenedMana * SkillFactor / 20;
				}
				if (debugmanaregen && RegenedMana != previousdelaycount) Console.Printf("    \cnMP Regen [Step x15 - Focusing]: %d\c-, Previous: %d, Factor: %d / 20", RegenedMana, previousdelaycount, SkillFactor);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugmanaregen) Console.Printf("    \cnMP Regen [Step x16 - LOWCap 2]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// The actual Regeneration Part
				PlayerCurrentMP += RegenedMana;
				if (PlayerCurrentMP > PlayerMaxMP) PlayerCurrentMP = PlayerMaxMP;

				MaxManaLimit = PlayerMaxMP * 2;
	
				if (PlayerCurrentMP > MaxManaLimit) PlayerCurrentMP = MaxManaLimit;
				CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP); // Sets MaxMana in ACS
				CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP); // Sets "LastManaValue" in ACS
				CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP); // Sets "NewManaValue" in ACS

				// Reset Regen Delay
				if (TrueGameSkill <= SKILL_VERY_EASY) SkillLevelManaDelay = 600; // 30 tics
				if (TrueGameSkill == SKILL_EASY) SkillLevelManaDelay = 660; // 33 tics
				if (TrueGameSkill == SKILL_NORMAL) SkillLevelManaDelay = 740; // 37 tics
				if (TrueGameSkill == SKILL_HARD) SkillLevelManaDelay = 840; // 42 tics
				if (TrueGameSkill == SKILL_VERY_HARD) SkillLevelManaDelay = 960; // 48 tics
				if (TrueGameSkill == SKILL_EXTREME) SkillLevelManaDelay = 1020; // 51 tics
				if (TrueGameSkill == SKILL_HORRIBLE) SkillLevelManaDelay = 1080; // 54 tics
				if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillLevelManaDelay = 1140; // 57 tics
				if (TrueGameSkill >= SKILL_OMEGA) SkillLevelManaDelay = 1260; // 63 tics

				if (CharacterClass == 0) SkillLevelManaDelay += (20 * random[statitem](-3,5)); 
				if (CharacterClass == 1) SkillLevelManaDelay += (20 * random[statitem](-4,4));
				if (CharacterClass == 2) SkillLevelManaDelay += (20 * random[statitem](-5,3));
				if (CharacterClass == 8) SkillLevelManaDelay += (20 * random[statitem](-5,3));
				if (CharacterClass == 9) SkillLevelManaDelay += (20 * random[statitem](-4,4));

				if (CharacterClass == 0) ManaReDelay = PlayerLevel / 30; // Deggaris (up to 3/6)
				if (CharacterClass == 1) ManaReDelay = PlayerLevel / 25; // Illucia (up to 4/8)
				if (CharacterClass == 2) ManaReDelay = PlayerLevel / 20; // Flora (up to 5/10) 
				if (CharacterClass == 8) ManaReDelay = PlayerLevel / 21; // Ailish 
				if (CharacterClass == 9) ManaReDelay = PlayerLevel / 25; // Petra (up to 4/8)
				MPDelayInterval = SkillLevelManaDelay - ManaReDelay;

				// A combined total of 15 points of Sorcery/Theraphesuis are needed for a tic-point of faster regen time.
				ManaReDelay = (PlayerSOR + PlayerTHE) / 300;
				MPDelayInterval -= ManaReDelay;

				if (TrueGameSkill <= SKILL_VERY_EASY) if (MPDelayInterval < 20) MPDelayInterval = 20;
				if (TrueGameSkill == SKILL_EASY) if (MPDelayInterval < 40) MPDelayInterval = 40;
				if (TrueGameSkill == SKILL_NORMAL) if (MPDelayInterval < 80) MPDelayInterval = 80;
				if (TrueGameSkill == SKILL_HARD) if (MPDelayInterval < 140) MPDelayInterval = 140;
				if (TrueGameSkill == SKILL_VERY_HARD) if (MPDelayInterval < 220) MPDelayInterval = 220;
				if (TrueGameSkill == SKILL_EXTREME) if (MPDelayInterval < 240) MPDelayInterval = 240;
				if (TrueGameSkill == SKILL_HORRIBLE) if (MPDelayInterval < 260) MPDelayInterval = 260;
				if (TrueGameSkill == SKILL_IMPOSSIBLE) if (MPDelayInterval < 280) MPDelayInterval = 280;
				if (TrueGameSkill >= SKILL_OMEGA) if (MPDelayInterval < 300) MPDelayInterval = 300;

				MPRegenTimer = 0;
			}
			
			
			//******************************
			//**Arcana Gauge Regen (Petra)**
			//******************************
			int ArcanaPoints = CallACS("MiscVarCheckDECORATE",5001);
			if (CharacterClass == 9)
			{
				if (TrueGameSkill <= SKILL_VERY_EASY) { ArcanaRegenDelaySkill = 8; }
				if (TrueGameSkill == SKILL_EASY) { ArcanaRegenDelaySkill = 16; }
				if (TrueGameSkill == SKILL_NORMAL) { ArcanaRegenDelaySkill = 24; }
				if (TrueGameSkill == SKILL_HARD) { ArcanaRegenDelaySkill = 32; }
				if (TrueGameSkill == SKILL_VERY_HARD) { ArcanaRegenDelaySkill = 40; }
				if (TrueGameSkill == SKILL_EXTREME) { ArcanaRegenDelaySkill = 44; }
				if (TrueGameSkill == SKILL_HORRIBLE) { ArcanaRegenDelaySkill = 48; }
				if (TrueGameSkill == SKILL_IMPOSSIBLE) { ArcanaRegenDelaySkill = 52; }
				if (TrueGameSkill >= SKILL_OMEGA) { ArcanaRegenDelaySkill = 56; }
			}
			
			if (ArcanaPoints < 900) 
			{
				ArcanaRegenDelay += 1;
				if (ArcanaRegenDelay == ArcanaRegenDelaySkill)
				{
					ArcanaPoints += 1;
					ArcanaRegenDelay -= ArcanaRegenDelaySkill;
					if (ArcanaPoints == 100 || ArcanaPoints == 200 || ArcanaPoints == 300 || ArcanaPoints == 400 || ArcanaPoints == 500 || ArcanaPoints == 600 || ArcanaPoints == 700 || ArcanaPoints == 800 || ArcanaPoints == 900 )
					{
						owner.A_PlaySound("ArcanaGaugeLevelup",CHAN_7);
					}
				}
			}
			else ArcanaRegenDelay = 0;
			CallACS("MiscVarSetDECORATE",5001,ArcanaPoints);
			//Console.Printf("Arcana Regen: %d / %d, Points: %d", ArcanaRegenDelay, ArcanaRegenDelaySkill, ArcanaPoints);
			
			
			//***********************
			//**Stamina Regen/Degen**
			//***********************
			int debugstamregen = dvdsdebug_showstaminaregenstuff;
			PlayerCurrentStamina = CallACS("StatCheck",12);
			if (PlayerCurrentStamina < MaximumStamina)
			{
				staminaregenfinal = 0;
				// Base
				if (CharacterClass == 0) staminaregenbase = 15; // Deggaris (0.15%/tic = 5.25%/sec)
				if (CharacterClass == 1) staminaregenbase = 13; // Illucia (0.13%/tic = 4.55%/sec)
				if (CharacterClass == 2) staminaregenbase = 9; // Flora (0.09%/tic = 3.15%/sec)
				if (CharacterClass == 8) staminaregenbase = 8; // Ailish (0.08%/tic = 2.80%/sec)
				if (CharacterClass == 9) staminaregenbase = 14; // Petra (0.14%/tic = 4.90%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstamregen) Console.Printf("    \cdStamina Regeneration [Step 1: Character Base]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 14); // +7-15
				staminaregenfinal += staminaregenbase;
				if (debugstamregen) Console.Printf("    \cdStamina Regeneration [Step 2: Level Addition]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Stamina Bonuses [Strife]
				staminaregenbase = ((StrifeStamLvl * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstamregen && StrifeStamLvl != 0) Console.Printf("    \cdStamina Regeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);

				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1; // Menus are on
				if (SleepTimer > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (!(Owner.CountInv("ShieldDefense") || Owner.CountInv("ShieldDefense2") || Owner.CountInv("ShieldDefense3")))
					{
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 84 / 100;
						if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
						if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 120 / 100;
					}
					else
					{
						if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 110 / 100;
					}
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase += 12; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase += 25; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase += 50; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase += 100;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase += 75;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase += 150; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase -= 100; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase -= 100; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase -= 625;
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase += 100;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase += 25;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase += 75;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase += 125;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase += 50;  
				if (staminaregenbase < 125) staminaregenbase = 125;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstamregen && staminaregenbase != 1000) Console.Printf("    \cdStamina Regeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 8;
				// Initia1 Stat Check = 8pts of Strength = +1% Stamina Regen Speed
				// Secondary Stat Check = 8pts of [?] = +1% Stamina Regen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstamregen) Console.Printf("    \cdStamina Regeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal *= 1.025;
				if (TensionLevel == 2) staminaregenfinal *= 1.05;
				if (TensionLevel == 3) staminaregenfinal *= 1.1;
				if (TensionLevel == 4) staminaregenfinal *= 1.25;
				if (TensionLevel == 5) staminaregenfinal *= 1.5;
				if (TensionLevel == 6) staminaregenfinal *= 2.5;
				if (TensionLevel == 7) staminaregenfinal *= 5.0;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
				
				// Divine Avatar = +100% Regen
				staminaregenbase = staminaregenfinal;
				if (DivineAvatarTimer > 0) staminaregenfinal *= 2;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// GoE = +250% Regen
				staminaregenbase = staminaregenfinal;
				if (GoeTimer > 0) staminaregenfinal *= 3.5;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 8b: GoE]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
		
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (DQAcceleratleTimer > 0) staminaregenfinal *= 1.2; // Acceleratle
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (DQDeceleratleTimer > 0) staminaregenfinal *= 0.8; // Deceleratle
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Poison = -25% Regen
				staminaregenbase = staminaregenfinal;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) staminaregenfinal *= 0.75;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = -80% Regen
				staminaregenbase = staminaregenfinal;
				if (FatigueTimer > 0) staminaregenfinal *= 0.2;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
			
				// Sleeping = +400% Regen
				staminaregenbase = staminaregenfinal;
				if (SleepTimer > 0)
				{
					staminaregenfinal *= 5;
					PerkFactor = ((RegStamFastLvl * 2000) + (RegStamFastEXLvl * 5000)) + 10000;
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = +67% Regen
				staminaregenbase = staminaregenfinal;
				if (BerserkTimer > 0) staminaregenfinal *= 1.67;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * dvds_staminaregenmultiplier / 100;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: %d / 100", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 10;
				if (RegStamFastLvl > 0)
				{
					PerkFactor = 10 + ((RegStamFastLvl * 2) + (RegStamFastEXLvl * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					  weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 3 / 4;
				}
				If (weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 7 / 8;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 9 / 10;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				defenddivisor = 20;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is "PoisonNeedle" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 21 / 20;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) 
					{
						defenddivisor = RandomPick[statitem](24,26,26,28,28,28,30,30,30,30,32,32,32,34,34,36);
						staminaregenfinal = staminaregenfinal * defenddivisor / 20;
					}
				}
				If (weapon is "SceptreOfEmpyrea")
				{
					if (Owner.CountInv("ShieldDefense") > 0) defenddivisor = random[statitem](28,32);
					if (Owner.CountInv("ShieldDefense2") > 0) defenddivisor = random[statitem](34,38);
					if (Owner.CountInv("ShieldDefense3") > 0) defenddivisor = random[statitem](40,44);
					staminaregenfinal = staminaregenfinal * defenddivisor / 20;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 17: Weapons]: %d\c-, Previous: %d, defenddivisor: %d / 20", staminaregenfinal, staminaregenbase, defenddivisor);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (ClearMindPerkLvl > 0)
				{
					perkfactor = (80 + (ClearMindPerkLvl * 2) + (ClearMindEXPerkLvl * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
			
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal = staminaregenfinal * 5 / 2; // 250%
				if (dvds_musou_powertripmode == 2) staminaregenfinal = staminaregenfinal * 5; // 500%
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cdStamina Regeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal < 1) staminaregenfinal = 1;
				if (debugstamregen) Console.Printf("    \cdStamina Regeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				if (UsingInGameMenu != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their Stamina Regen to count
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina > MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstamregen) Console.Printf("    \cdStamina Regeneration: %d / %d\c-, Gain: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
			else if (PlayerCurrentStamina == MaximumStamina) 
			{
				staminaregenfinal = 0;
				if (debugstamregen) Console.Printf("    \cjStamina Neutral: %d / %d", PlayerCurrentStamina, MaximumStamina);
			}
			else
			{
				// Base
				staminaregenfinal = 0;
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = -4; // Deggaris (-0.04%/tic = -1.40%/sec)
				if (CharacterClass == 1) staminaregenbase = -6; // Illucia (-0.06%/tic = -2.10%/sec)
				if (CharacterClass == 2) staminaregenbase = -7; // Flora (-0.07%/tic = -2.45%/sec)
				if (CharacterClass == 8) staminaregenbase = -8; // Ailish (-0.08%/tic = -2.45%/sec)
				if (CharacterClass == 9) staminaregenbase = -4; // Petra (-0.04%/tic = -1.40%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstamregen) Console.Printf("    \cgStamina Degeneration [Step 1: Character Base]: %d\c-, Decrease: %d", staminaregenfinal, staminaregenbase);

				// Level
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 40); // +2-5
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 30); // +2-5
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 56); // +1-3
				staminaregenfinal += staminaregenbase;
				if (debugstamregen) Console.Printf("    \cgStamina Degeneration [Step 2: Level Subtraction]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				staminaregenbase = 0;
				// Stamina Bonuses [Strife]
				staminaregenbase = ((StrifeStamLvl * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstamregen && StrifeStamLvl != 0) Console.Printf("    \cgStamina Degeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1; // Menus are on
				if (SleepTimer > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (!(Owner.CountInv("ShieldDefense") || Owner.CountInv("ShieldDefense2") || Owner.CountInv("ShieldDefense3")))
					{
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 100 / 84;
						if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
						if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 100 / 120;
					}
					else
					{
						if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 100 / 110;
					}
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase -= 6; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase -= 12; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase -= 25; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase -= 50;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase -= 37;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase -= 75; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase += 50; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase += 50; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase += random[statitem](312,313);
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase -= 50;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase -= 13;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase -= 37;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase -= 63;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase -= 25;  
				if (staminaregenbase < 1) staminaregenbase = 1;
				if (staminaregenbase > 2500) staminaregenbase = 2500;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstamregen && staminaregenbase != 1000) Console.Printf("    \cgStamina Degeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 16;
				// 16pts of Strength = -1% Stamina Degen Speed
				// Secondary Stat Check = 16pts of [?] = -1% Stamina Degen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase *= -1;
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstamregen) Console.Printf("    \cgStamina Degeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal *= 0.990;
				if (TensionLevel == 2) staminaregenfinal *= 0.975;
				if (TensionLevel == 3) staminaregenfinal *= 0.950;
				if (TensionLevel == 4) staminaregenfinal *= 0.900;
				if (TensionLevel == 5) staminaregenfinal *= 0.750;
				if (TensionLevel == 6) staminaregenfinal *= 0.500;
				if (TensionLevel == 7) staminaregenfinal *= 0.200;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
				
				// Divine Avatar = -50% Degen
				staminaregenbase = staminaregenfinal;
				if (DivineAvatarTimer > 0) staminaregenfinal *= 0.5;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// GoE = -80% Degen
				staminaregenbase = staminaregenfinal;
				if (GoETimer > 0) staminaregenfinal *= 0.2;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (DQAcceleratleTimer > 0) staminaregenfinal *= 1.2; // Acceleratle
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (DQDeceleratleTimer > 0) staminaregenfinal *= 0.8; // Deceleratle
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				// Poison = +20% Degen
				staminaregenbase = staminaregenfinal;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) staminaregenfinal *= staminaregenfinal * 1.2;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = +400% Degen
				staminaregenbase = staminaregenfinal;
				if (FatigueTimer > 0) staminaregenfinal = staminaregenfinal * 5;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Sleep = -80% Degen
				staminaregenbase = staminaregenfinal;
				if (SleepTimer > 0)
				{
					staminaregenfinal *= 0.2;
					PerkFactor = 10000 - ((RegStamFastLvl * 2000) + (RegStamFastEXLvl * 5000));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = -40% Degen
				staminaregenbase = staminaregenfinal;
				if (BerserkTimer > 0) staminaregenfinal *= 0.6;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * 100 / dvds_staminaregenmultiplier;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: 100 / %d", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				staminaregenbase = staminaregenfinal;
				if (RegStamFastLvl > 0)
				{
					PerkFactor = 10 - ((RegStamFastLvl * 2) + (RegStamFastEXLvl * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					  weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 4 / 3;
				}
				If (weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 8 / 7;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 10 / 9;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				defenddivisor = 20;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is "PoisonNeedle" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 20 / 21;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) 
					{
						defenddivisor = RandomPick[statitem](24,26,26,28,28,28,30,30,30,30,32,32,32,34,34,36);
						staminaregenfinal = staminaregenfinal * 20 / defenddivisor;
					}
				}
				If (weapon is "SceptreOfEmpyrea")
				{
					defenddivisor = 20;
					if (Owner.CountInv("ShieldDefense") > 0) defenddivisor = random[statitem](28,32);
					if (Owner.CountInv("ShieldDefense2") > 0) defenddivisor = random[statitem](34,38);
					if (Owner.CountInv("ShieldDefense3") > 0) defenddivisor = random[statitem](40,44);
					staminaregenfinal = staminaregenfinal * 20 / defenddivisor;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 17: Weapons]: %d\c-, Previous: %d, defenddivisor: 20 / %d", staminaregenfinal, staminaregenbase, defenddivisor);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (ClearMindPerkLvl > 0)
				{
					perkfactor = 80 - ((ClearMindPerkLvl * 2) + (ClearMindEXPerkLvl * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal *= 0.4; // 40%
				if (dvds_musou_powertripmode == 2) staminaregenfinal *= 0.2; // 20%
				if (debugstamregen && staminaregenfinal != staminaregenbase) Console.Printf("    \cgStamina Degeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal > -1) staminaregenfinal = -1;
				if (debugstamregen) Console.Printf("    \cgStamina Degeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				if (UsingInGameMenu != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious", allow their Stamina Regen to Count
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina < MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstamregen) Console.Printf("    \cgStamina Degeneration: %d / %d\c-, Loss: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
		}
	}

	// Perk Checks
	void A_PSI1DoEffectHPMPPerkCheck()
	{
		//*********************
		//*HP & MP Perk Checks*
		//*********************
		int TempCombinedLevels = 0;
		int TempStartValue, TempEndValue;
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor)
		{
			// "LifeUp [EX]" perks
			TempCombinedLevels = LifeUpPerkLvl + LifeUpExPerkLvl;
			if (LifeUpPerkComboCheck != TempCombinedLevels)
			{
				if (LifeUpPerkComboCheck != 0)
				{
					LifeUpPerkBaseFactor = LifeUpPerkFactor;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
					TempEndValue = TempEndValue * ((1000000 / LifeUpPerkFactor)) / 1000;
					TempEndValue += random[statitem](0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:LifeUpPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					LifeUpPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
				}
				LifeUpPerkFactor = (LifeUpPerkLvl * 50) + (LifeUpExPerkLvl * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * LifeUpPerkFactor / 1000;
				TempEndValue += random[statitem](0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:LifeUpPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxHP = TempEndValue;
				CallACS("OtherVarSetDECORATE",0,PlayerMaxHP);
				
				LifeUpPerkComboCheck = TempCombinedLevels;
			}
			
			// [STRIFE-Compatibility] Stamina Upgrades [HP side]
			TempCombinedLevels = StrifeStamLvl;
			if (StamUpgradeHPComboCheck != TempCombinedLevels)
			{
				if (StamUpgradeHPComboCheck != 0)
				{
					StamUpgradeHPPerkBaseFactor = StamUpgradeHPPerkFactor;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
					TempEndValue = TempEndValue * ((1000000 / StamUpgradeHPPerkFactor)) / 1000;
					TempEndValue += random[statitem](0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeHPPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					StamUpgradeHPPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
				}
				StamUpgradeHPPerkFactor = (StrifeStamLvl * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * StamUpgradeHPPerkFactor / 1000;
				TempEndValue += random[statitem](0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeHPPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxHP = TempEndValue;
				CallACS("OtherVarSetDECORATE",0,PlayerMaxHP);
				
				StamUpgradeHPComboCheck = TempCombinedLevels;
			}


			// "MagiUp [EX]" perks
			TempCombinedLevels = MagiUpPerkLvl + MagiUpExPerkLvl;
			if (MagiUpPerkComboCheck != TempCombinedLevels)
			{
				if (MagiUpPerkComboCheck != 0)
				{
					MagiUpPerkBaseFactor = MagiUpPerkFactor;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
					TempEndValue = TempEndValue * ((1000000 / MagiUpPerkFactor)) / 1000;
					TempEndValue += random[statitem](0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:MagiUpPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					MagiUpPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
				}
				MagiUpPerkFactor = (MagiUpPerkLvl * 50) + (MagiUpExPerkLvl * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * MagiUpPerkFactor / 1000;
				TempEndValue += random[statitem](0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:MagiUpPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxMP = TempEndValue;
				CallACS("OtherVarSetDECORATE",1,PlayerMaxMP);
				
				MagiUpPerkComboCheck = TempCombinedLevels;
			}
			
			// [STRIFE-Compatibility] Stamina Upgrades [MP side]
			TempCombinedLevels = StrifeStamLvl;
			if (StamUpgradeMPComboCheck != TempCombinedLevels)
			{
				if (StamUpgradeMPComboCheck != 0)
				{
					StamUpgradeMPPerkBaseFactor = StamUpgradeMPPerkFactor;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
					TempEndValue = TempEndValue * ((1000000 / StamUpgradeMPPerkFactor)) / 1000;
					TempEndValue += random[statitem](0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeMPPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					StamUpgradeMPPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
				}
				StamUpgradeMPPerkFactor = (StrifeStamLvl * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * StamUpgradeMPPerkFactor / 1000;
				TempEndValue += random[statitem](0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeMPPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxMP = TempEndValue;
				CallACS("OtherVarSetDECORATE",1,PlayerMaxMP);
				
				StamUpgradeMPComboCheck = TempCombinedLevels;
			}
		}
	}

	// EXP Kill Combo Timer
	void A_PSI1DoEffectEXPComboTimer()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int GoETimer = CallACS("GetBuffTimer",129);
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		if (playeractor)
		{
			int ComboRank = CallACS("MiscVarCheckDECORATE",51);
			int TimerMulti, TimerPart1;
			int tempaeonpts = 0;
			ComboTimerDelay = CallACS("MiscVarCheckDECORATE",162);
			EXPComboTimer = CallACS("MiscVarCheckDECORATE",157);
			int basecomboneeded = dvdsperks_combobase;
			int comboamount = CallACS("MiscVarCheckDECORATE",158); // Temporarily saves the kill combo counter for Aeon Point Checks
			int combolevel1 = basecomboneeded * 1; // C
			int combolevel2 = basecomboneeded * 3; // B
			int combolevel3 = basecomboneeded * 7; // A
			int combolevel4 = basecomboneeded * 12; // S
			int combolevel5 = basecomboneeded * 18; // Z
			ComboRank = -1;
			if (comboamount <= 0) ComboRank = -1;
			else if (comboamount > 0 && comboamount < combolevel1) ComboRank = 0; // Rank D
			else if (comboamount >= combolevel1 && comboamount < combolevel2) ComboRank = 1; // Rank C
			else if (comboamount >= combolevel2 && comboamount < combolevel3) ComboRank = 2; // Rank B
			else if (comboamount >= combolevel3 && comboamount < combolevel4) ComboRank = 3; // Rank A
			else if (comboamount >= combolevel4 && comboamount < combolevel5) ComboRank = 4; // Rank S
			else if (comboamount >= combolevel5) ComboRank = 5; // Rank Z
			if (dvdsdebug_showcombostuff && comboamount > 0) Console.Printf("Combo Amount: %d, Combo Rank: %d", comboamount, ComboRank);
			
			if (EXPComboTimer > 0 && UsingInGameMenu == 0)
			{
				if (CallACS("GetBuffTimer",7) > 0)
				{
					if (ComboTimerDelay >= 175) ComboTimerDelay = 175;
				}
				else
				{
					if (ComboTimerDelay >= 140) ComboTimerDelay = 140;
				}
				if (!dvds_expdmgkilldelaytimer) ComboTimerDelay = 0;
				TimerMulti = (RandomPick[statitem](20,20,20,20,20,20,20,20,20,10) * dvds_expcombotimermultiplier) / 100;
				if (ComboTimerDelay >= 0)
				{
					if (ComboRank <= 0) TimerMulti *= 0.5;
					if (ComboRank == 1) TimerMulti *= 0.334;
					if (ComboRank == 2) TimerMulti *= 0.25;
					if (ComboRank == 3) TimerMulti *= 0.167;
					if (ComboRank == 4) TimerMulti *= 0.125;
					if (ComboRank >= 5) TimerMulti *= 0.10;
					TimerMulti *= 0.8;
					ComboTimerDelay -= 1;
					if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Delay: %d", ComboTimerDelay);
				}
				if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Decrement [Step 1 - Base]: %d", TimerMulti);
				TimerPart1 = 100;
				
				if (CharacterClass == 2)
				{
					if (owner.CountInv("SafeTeaShoes") > 0) TimerPart1 -= 10; // Item 1
					if (owner.CountInv("CloakofEvasion") > 0) TimerPart1 -= 5; // Item 5
					if (owner.CountInv("DivineShield") > 0) TimerPart1 -= 15; // Item 8
					if (owner.CountInv("RuinousShield") > 0) TimerPart1 *= 2;
				}
				else
				{
					if (owner.CountInv("DSGreenArmorClass") > 0) TimerPart1 -= 5;
					if (owner.CountInv("DSBlueArmorClass") > 0) TimerPart1 -= 10;
					if (owner.CountInv("DSStoneArmorClass1") > 0) TimerPart1 -= 15;
					if (owner.CountInv("DSDiamondArmorClass1") > 0) TimerPart1 -= 20;
					if (owner.CountInv("DSStoneArmorClass2") > 0) TimerPart1 -= 25;
					if (owner.CountInv("DSDiamondArmorClass2") > 0) TimerPart1 -= 30;
				}
				if (owner.CountInv("TheOneRing") > 0) TimerPart1 -= 20;
				if (TimerPart1 < 40) TimerPart1 = 40;
				if (TimerPart1 > 250) TimerPart1 = 250;
				if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Decrement [Step 2 - Multiplier Base]: %d", TimerPart1);

				if (GoETimer > 0) TimerPart1 /= 5;
				if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Decrement [Step 3 - GoE Check]: %d", TimerPart1);

				TimerMulti = (TimerMulti * TimerPart1) / 100;
				
				if (TimeFreezeTimer > 0) TimerMulti = TimerMulti / 15;
				if (TimerMulti < 1) TimerMulti = 1;
				if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Decrement [Step 4 - Decrement Timer]: %d, Timer: %d", TimerMulti, EXPComboTimer);
				EXPComboTimer -= TimerMulti;
			}
			
			if (EXPComboTimer <= 0) // Timer Runs out
			{
				tempaeonpts = 0;
				
				if (basecomboneeded > 0 && comboamount > 0)
				{
					if (ComboRank == 1) tempaeonpts = (comboamount / basecomboneeded);
					if (ComboRank == 2) tempaeonpts = (comboamount / basecomboneeded) * 3 / 2;
					if (ComboRank == 3) tempaeonpts = (comboamount / basecomboneeded) * 5 / 2;
					if (ComboRank == 4) tempaeonpts = (comboamount / basecomboneeded) * 4;
					if (ComboRank == 5) tempaeonpts = (comboamount / basecomboneeded) * 6;
					if (dvdsdebug_showcombostuff) Console.Printf("Combo Timer Decrement [Step 5 - Get Combo Amounts]: 1: %d, 2: %d, 3: %d, 4: %d, 5: %d, Current: %d, tempaeonpts: %d", combolevel1, combolevel2, combolevel3, combolevel4, combolevel5, comboamount, tempaeonpts);
					
					if (tempaeonpts > 0)
					{
						tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
						CallACS("MiscVarSetDECORATE",25,tempaeonpts,1); 
						CallACS("MiscVarSetDECORATE",224,tempaeonpts,1); 
						CallACS("MiscVarSetDECORATE",2033,105);
						if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197))
						{
							owner.A_PlaySound("misc/miniquestcomplete",CHAN_AUTO,1.5,false,ATTN_NONE);
							owner.A_Print(String.Format("\c[orange]You have gained %d Aeon Point[s] for a high enough kill combo!\n\n\c[orange]Remember to allocate your Aeon Points as soon as possible...", tempaeonpts), 2.75, "DVDSSMLFONT");
						}
					}
				}
				
				tempaeonpts = 0;
				comboamount = 0;
				CallACS("MiscVarSetDECORATE",158,0); // Set kill counter back to 0
				CallACS("MiscVarSetDECORATE",160,0); // Set EXP Combo Amount back to 0
			}
			CallACS("MiscVarSetDECORATE",157,EXPComboTimer); // Subtract
			CallACS("MiscVarSetDECORATE",162,ComboTimerDelay); // Subtract
			CallACS("MiscVarSetDECORATE",51,ComboRank);
		}
	}
	
	// RadiusDamageFactor
	void A_PSI1DoEffectRadDmgFactor()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int GoETimer = CallACS("GetBuffTimer",129);
		//**********************
		//**RadiusDamageFactor**
		//**********************
		if (playeractor)
		{
			double TotalRDFactor = 1.00;

			double EWShieldRDFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldRDFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldRDFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldRDFactor *= 0.0268;
			}

			double PlayerFistBlockRDFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) PlayerFistBlockRDFactor *= 0.5;
			if (Owner.CountInv("FistPlayerBlock2") > 0) PlayerFistBlockRDFactor *= 0.375;
			if (Owner.CountInv("FistPlayerBlock3") > 0) PlayerFistBlockRDFactor *= 0.25;
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) PlayerFistBlockRDFactor *= 0.1;
			
			double ArmorRDFactor = 1.00;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) ArmorRDFactor -= 0.01;
				if (Owner.CountInv("DSBlueArmorClass") > 0) ArmorRDFactor -= 0.04;
				if (Owner.CountInv("DSStoneArmorClass1") > 0) ArmorRDFactor -= 0.15;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) ArmorRDFactor -= 0.075;
				if (Owner.CountInv("DSStoneArmorClass2") > 0) ArmorRDFactor -= 0.30;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) ArmorRDFactor -= 0.35;
			}
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) ArmorRDFactor -= 0.20;
				if (Owner.CountInv("BalrogRing") > 0) ArmorRDFactor -= 0.25;
			}

			// "Demolition Expert" Perk
			double DemoExpertRDFactor = 1.00;
			DemoExpertRDFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) + (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
			if (DemoExpertRDFactor < 0.025) DemoExpertRDFactor = 0.025;

			// Death Rage [Invulnerablity?]
			double DeathRageRDFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageRDFactor = 0.0;
			
			// DQ Buffs
			double DQBuffRDFactor = 1.00;
			if (DQBuffTimer > 0) DQBuffRDFactor *= 0.50; // Buff
			if (DQSapTimer > 0) DQBuffRDFactor *= 2.00; // Sap
			if (SleepTimer > 0) // Sleep
			{
				if (random[statitem](1,16) == 1) DQBuffRDFactor *= 5.0; else DQBuffRDFactor *= 1.25;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseRDFactor = 1.0;
			if (Owner.CountInv("PrimingSceptre") > 0) SceptreDefenseRDFactor *= (0.985 - (CallACS("OtherVarCheckDECORATE",11) * 0.015));
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseRDFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseRDFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseRDFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseRDFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseRDFactor *= 0.06125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseRDFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseRDFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseRDFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseRDFactor *= 0.5;

			TotalRDFactor = 1.00
										* EWShieldRDFactor
										* PlayerFistBlockRDFactor
										* ArmorRDFactor
										* DemoExpertRDFactor
										* DeathRageRDFactor
										* DQBuffRDFactor
										* SceptreDefenseRDFactor;

			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor && playeractor.PlayerDefenseIgnoreFactor > 0.00)
			{
				BaseIgnoreFactor = (1.0 - TotalRDFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				TotalRDFactor += DefenseIgnoreFactor;
			}
			
			if (GoETimer > 0) TotalRDFactor *= 0.1;
			owner.RadiusDamageFactor = TotalRDFactor;

			int predmg = 0;
			if (playeractor && playeractor.mobjdmg > 0) 
			{
				predmg = playeractor.mobjdmg;
				playeractor.mobjdmg = 0;
			}
			if (dvdsdebug_playerdmgdisplays && predmg > 0) 
			{
				Console.Printf("    \czRADIUSDAMAGE\c-: \cxTotalRDFactor = %8f\c-, EWShieldRDFactor = %8f, PlayerFistBlockRDFactor = %8f, ArmorRDFactor = %8f, DemoExpertRDFactor = %8f, DeathRageRDFactor = %8f, DQBuffRDFactor = %8f, SceptreDefenseRDFactor = %8f", 
				TotalRDFactor, 
				EWShieldRDFactor, PlayerFistBlockRDFactor, 
				ArmorRDFactor, 
				DemoExpertRDFactor, DeathRageRDFactor, 
				DQBuffRDFactor, SceptreDefenseRDFactor);
			}
		}
	}
	
	// Stamina
	void A_PSI1DoEffectStaminaCalc()
	{
		//****************
		//**Stamina Calc**
		//****************
		int debugstamregen = dvdsdebug_showstaminaregenstuff;
		int MaximumStamina = 10000;
		int prevcount;
		int PreviousStaminaMax = MaximumStamina;
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor)
		{
			prevcount = MaximumStamina;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) MaximumStamina += 1000; // +10.00%
				if (Owner.CountInv("FalconKnifeEarrings") > 0) MaximumStamina += 1750; // +17.50%
				if (Owner.CountInv("DivineShield") > 0) MaximumStamina += 500; // +5.00%
				if (Owner.CountInv("BalrogRing") > 0) MaximumStamina += 1250; // +12.50%
				// Total = 45.00%
			}
			else
			{
				// Armor
				if (Owner.CountInv("DSGreenArmorClass") > 0) MaximumStamina += 125; // +1.25%
				if (Owner.CountInv("DSBlueArmorClass") > 0) MaximumStamina += 250; // +2.5%
				if (Owner.CountInv("DSStoneArmorClass1") > 0) MaximumStamina += 500; // +5%
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) MaximumStamina += 1000; // +10%
				if (Owner.CountInv("DSStoneArmorClass2") > 0) MaximumStamina += 1250; // +12.5%
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) MaximumStamina += 2500; // +25%
				// Other
				// To Be Added [maybe]
			}
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 1 - Armor Check]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			// Stats
			int staminastatfactor = 0;
			SkillFactor = 0;
			// Agility
			if (CharacterClass == 0) SkillFactor = PlayerAGL * 6;
			if (CharacterClass == 1) SkillFactor = PlayerAGL * 8;
			if (CharacterClass == 2) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 8) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 9) SkillFactor = PlayerAGL * 8;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2a - Stam - Stat Gain (AGL)]: %d, AGLAdd: %d, AGL: %d", staminastatfactor, SkillFactor, PlayerAGL);

			// Defense
			if (CharacterClass == 0) SkillFactor = PlayerDEF * 10;
			if (CharacterClass == 1) SkillFactor = PlayerDEF * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDEF * 6;
			if (CharacterClass == 8) SkillFactor = PlayerDEF * 5;
			if (CharacterClass == 9) SkillFactor = PlayerDEF * 10;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2b - Stam - Stat Gain (DEF)]: %d, DEFAdd: %d, DEF: %d", staminastatfactor, SkillFactor, PlayerDEF);

			// Deftness
			if (CharacterClass == 0) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 1) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 8) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 9) SkillFactor = PlayerDFT * 8;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2c - Stam - Stat Gain (DFT)]: %d, DFTAdd: %d, DFT: %d", staminastatfactor, SkillFactor, PlayerDFT);
			
			// Sorcery
			if (CharacterClass == 0) SkillFactor = PlayerSOR * 6;
			if (CharacterClass == 1) SkillFactor = PlayerSOR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSOR * 10;
			if (CharacterClass == 8) SkillFactor = PlayerSOR * 9;
			if (CharacterClass == 9) SkillFactor = PlayerSOR * 7;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2d - Stam - Stat Gain (SOR)]: %d, SORAdd: %d, SOR: %d", staminastatfactor, SkillFactor, PlayerSOR);
			
			// Strength
			if (CharacterClass == 0) SkillFactor = PlayerSTR * 10;
			if (CharacterClass == 1) SkillFactor = PlayerSTR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSTR * 6;
			if (CharacterClass == 8) SkillFactor = PlayerSTR * 4;
			if (CharacterClass == 9) SkillFactor = PlayerSTR * 6;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2e - Stam - Stat Gain (STR)]: %d, STRAdd: %d, STR: %d", staminastatfactor, SkillFactor, PlayerSTR);
			
			// Therapeusis
			if (CharacterClass == 0) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 1) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 2) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 8) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 9) SkillFactor = PlayerTHE * 8;
			staminastatfactor += SkillFactor;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum [Step 2f - Stam - Stat Gain (THE)]: %d, THEAdd: %d, THE: %d", staminastatfactor, SkillFactor, PlayerTHE);

			SkillFactor = 0;
			PreviousStaminaMax = MaximumStamina;
			// Final Calc
			if (TrueGameSkill <= SKILL_VERY_EASY) SkillFactor = 10000;
			if (TrueGameSkill == SKILL_EASY) SkillFactor = 11250;
			if (TrueGameSkill == SKILL_NORMAL) SkillFactor = 12500;
			if (TrueGameSkill == SKILL_HARD) SkillFactor = 15000;
			if (TrueGameSkill == SKILL_VERY_HARD) SkillFactor = 20000;
			if (TrueGameSkill == SKILL_EXTREME) SkillFactor = 21250;
			if (TrueGameSkill == SKILL_HORRIBLE) SkillFactor = 22500;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillFactor = 23750;
			if (TrueGameSkill >= SKILL_OMEGA) SkillFactor = 25000;
			staminastatfactor += SkillFactor;
			MaximumStamina = MaximumStamina * staminastatfactor / SkillFactor;
			if (debugstamregen && MaximumStamina != PreviousStaminaMax) Console.Printf("    \cfStamina Maximum [Step 2X - Stam - Stat Gain]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			PreviousStaminaMax = MaximumStamina;
			SkillFactor = ((StamUpPerkLvl * 500) + (StamUpEXPerkLvl * 1250)) + 10000;
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // "StamUp" and "StamUp EX" perks.
			if (debugstamregen && MaximumStamina != PreviousStaminaMax) Console.Printf("    \cfStamina Maximum [Step 3 - Stam Up Perk]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			PreviousStaminaMax = MaximumStamina;
			SkillFactor = 10000 + (StrifeStamLvl * 1250);
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			if (debugstamregen && MaximumStamina != PreviousStaminaMax) Console.Printf("    \cfStamina Maximum [Step 4 - STRIFE - Stamina]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			int MegaMaxStamina = MaximumStamina * 5;
			if (debugstamregen) Console.Printf("    \cfStamina Maximum: %d (5x: %d)", MaximumStamina, MegaMaxStamina);
			CallACS("MiscVarSetDECORATE",22,MaximumStamina);
			CallACS("MiscVarSetDECORATE",164,MegaMaxStamina);
		}
	}
	
	// Mass
	void A_PSI1DoEffectMassCalc()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int GoETimer = CallACS("GetBuffTimer",129);
		TotalMass = 100;
		if (playeractor)
		{
			if (CharacterClass == 0) // Deggaris
			{
				TotalMass = 116;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 27);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 8 levels for Deggaris [max of 25]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			if (CharacterClass == 1) // Illucia
			{
				TotalMass = 96;
				TotalMass += (PlayerDEF / 12);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 18);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 15);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 10 levels for Illucia [max of 20]
				TotalMass = TotalMass + (PlayerLevel / 10);
			}
			if (CharacterClass == 2) // Flora
			{
				TotalMass = 68;
				TotalMass += (PlayerDEF / 15);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 15);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 9);		// Therapeusis [Seeds]

				if (Owner.CountInv("SafeTeaShoes") > 0)						TotalMass += 1;
				if (Owner.CountInv("PearlyCorset") > 0)						TotalMass += 3;
				if (Owner.CountInv("WaterFlyingDress") > 0)				TotalMass += 4;
				if (Owner.CountInv("EvenstarNecklace") > 0)				TotalMass += 1;
				if (Owner.CountInv("CloakofEvasion") > 0)					TotalMass += 3;
				if (Owner.CountInv("AnubisCufflinks") > 0)				TotalMass += 2;
				if (Owner.CountInv("KissaBra") > 0)								TotalMass += 1;
				if (Owner.CountInv("BalrogRing") > 0)							TotalMass += 1;
				if (Owner.CountInv("DoveRibbon") > 0)							TotalMass += 2;
				if (Owner.CountInv("DivineShield") > 0)					{ TotalMass += 10; TotalMass *= 2; }
				if (Owner.CountInv("RuinousShield") > 0)				{ TotalMass -= 10; TotalMass /= 2; }

				if (Owner.CountInv("DSSpiritualExoskin1") > 0)	{ TotalMass += 4; TotalMass = TotalMass * 102 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin2") > 0)	{ TotalMass += 12; TotalMass = TotalMass * 106 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin3") > 0)	{ TotalMass += 30; TotalMass = TotalMass * 115 / 100;}

				if (Owner.CountInv("ShieldDefense") > 0)				{ TotalMass = TotalMass * 5 / 4; }
				if (Owner.CountInv("ShieldDefense2") > 0)				{ TotalMass = TotalMass * 3 / 2; }
				if (Owner.CountInv("ShieldDefense3") > 0)				{ TotalMass = TotalMass * 15 / 8; }
				
				// Add a point of mass for every 12 levels for Flora [max of 16/17]
				TotalMass = TotalMass + (PlayerLevel / 12);
			}
			if (CharacterClass == 8) // Ailish
			{
				TotalMass = 66;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]

				// Add a point of mass for every 13 levels for Ailish [max of 15]
				TotalMass = TotalMass + (PlayerLevel / 13);
			}
			if (CharacterClass == 9) // Petra
			{
				TotalMass = 70;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 23);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 13);		// Therapeusis [Seeds]

				// Add a point of mass for every 8 levels for Petra [max of 22]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			
			// Buff Timers
			if ((InvulnerabilityTimer > 0 || owner.bINVULNERABLE || owner.player.cheats & CF_GODMODE2 || owner.player.cheats & CF_GODMODE || owner.CountInv("InvulnerabilitySpell",AAPTR_PLAYER1) > 0 || owner.CountInv("IsInvulnerable",AAPTR_PLAYER1) > 0)) // 128x Mass when Invulnerable
			{
				//owner.A_SpawnItemEx("InvulnerabilityAura");
				TotalMass *= 1024; 
			}
			if (DivineAvatarTimer > 0) TotalMass *= 4;		// 4x Mass when using Divine Avatar
			if (GoETimer > 0) TotalMass *= 10;		// 10x Mass when using GoE
			if (DQBuffTimer > 0) TotalMass *= 2;		// 2x Mass when using Buff

			// Sauron Items
			if (Owner.CountInv("SauronHelmet") > 0)						{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	{ TotalMass += 6;  TotalMass = TotalMass * 106 / 100; }
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 104 / 100; }
			if (Owner.CountInv("SauronGauntlets") > 0)				{ TotalMass += 5;  TotalMass = TotalMass * 105 / 100; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 3;  TotalMass = TotalMass * 103 / 100; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 7;  TotalMass = TotalMass * 107 / 100; }
			if (Owner.CountInv("TheOneRing") > 0)							{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			
			// Fist Blocks
			if (Owner.CountInv("FistPlayerBlock") > 0)					TotalMass = TotalMass * 2;
			if (Owner.CountInv("FistPlayerBlock2") > 0)					TotalMass = TotalMass * 8 / 3;
			if (Owner.CountInv("FistPlayerBlock3") > 0)					TotalMass = TotalMass * 4;

			// Final Calculations
			owner.mass = TotalMass;
			CallACS("MiscVarSetDECORATE",201,TotalMass); // Set to the Total Mass
			//Console.Printf("    Calculated Mass: %d [Real Mass: %d]", TotalMass, owner.mass);
		}
	}

	// JumpZ
	void A_PSI1DoEffectJumpCalc()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int GoETimer = CallACS("GetBuffTimer",129);
		int debugjump = dvdsdebug_jumpzdisplays;
		if (playeractor)
		{
			double CharacterJumpZ = 8.0;
			if (CharacterClass == 0) CharacterJumpZ = 7.5;
			if (CharacterClass == 1) CharacterJumpZ = 8.5;
			if (CharacterClass == 2) CharacterJumpZ = 9.0;
			if (CharacterClass == 8) CharacterJumpZ = 7.0;
			if (CharacterClass == 9) CharacterJumpZ = 9.5;
			

			// Level
			double LevelJumpZ = 1.00;
			if (CharacterClass == 0) LevelJumpZ += (PlayerLevel * 0.00226);
			if (CharacterClass == 1) LevelJumpZ += (PlayerLevel * 0.00256);
			if (CharacterClass == 2) LevelJumpZ += (PlayerLevel * 0.00276);
			if (CharacterClass == 8) LevelJumpZ += (PlayerLevel * 0.00216);
			if (CharacterClass == 9) LevelJumpZ += (PlayerLevel * 0.00296);

			// AGL
			double AGLJumpZ = 1.00;
			if (CharacterClass == 0) AGLJumpZ += (PlayerAGL * 0.00076);
			if (CharacterClass == 1) AGLJumpZ += (PlayerAGL * 0.00086);
			if (CharacterClass == 2) AGLJumpZ += (PlayerAGL * 0.00093);
			if (CharacterClass == 8) AGLJumpZ += (PlayerAGL * 0.00070);
			if (CharacterClass == 9) AGLJumpZ += (PlayerAGL * 0.00100);

			// Armor
			double ArmorJumpZ = 1.00;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("SafeTeaShoes") > 0) 				ArmorJumpZ += 0.10;
				if (Owner.CountInv("PearlyCorset") > 0) 				ArmorJumpZ += 0.005;
				if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorJumpZ += 0.005;
				if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("CloakofEvasion") > 0)				ArmorJumpZ += 0.025;
				if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("KissaBra") > 0)							ArmorJumpZ += 0.025;
				if (Owner.CountInv("DivineShield") > 0)					ArmorJumpZ += 0.00625;
				if (Owner.CountInv("BalrogRing") > 0)						ArmorJumpZ += 0.0125;
				if (Owner.CountInv("DoveRibbon") > 0)						ArmorJumpZ += 0.05;
				if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorJumpZ += 0.0375;
			}
			else
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0)		ArmorJumpZ += 0.0334;
				if (Owner.CountInv("DSBlueArmorClass") > 0)			ArmorJumpZ += 0.05;
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		ArmorJumpZ += 0.0667;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	ArmorJumpZ += 0.09;
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		ArmorJumpZ += 0.0833;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	ArmorJumpZ += 0.095;
			}
			
			double SauronArmorJumpZ = 1.00;
			if (Owner.CountInv("SauronHelmet") > 0)						SauronArmorJumpZ -= 0.10;
			if (Owner.CountInv("SauronGauntlets") > 0)				SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("TheOneRing") > 0)							SauronArmorJumpZ += 0.25;

			double BuffJumpZ = 1.00;
			if (DQAcceleratleTimer > 0) BuffJumpZ += 0.25;
			if (DQDeceleratleTimer > 0) BuffJumpZ -= 0.25;

			double SceptreJumpZ = 1.00;
			if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreJumpZ -= 0.20;
			if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreJumpZ -= 0.10;
			if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreJumpZ -= 0.05;

			double DivineAvatarJumpZ = 1.00;
			if (DivineAvatarTimer > 0) DivineAvatarJumpZ *= 2.00;

			double GoEJumpZ = 1.00;
			if (GoETimer > 0) GoEJumpZ *= 2.50;

			double PerkFactorJumpZ = 1.0;
			PerkFactorJumpZ += ((JmpMorePerkLvl * 0.05) + (JmpMoreEXPerkLvl * 0.125));

			double StaminaJumpZ = 1.0;
			int StaminaLevel;
			int StaminaMax = 10000;
			if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
			StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;
			if (StaminaLevel < 157) StaminaJumpZ = -0.3375;
			if (StaminaLevel > 156 && StaminaLevel < 626) StaminaJumpZ = -0.2625;
			if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaJumpZ = -0.195;
			if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaJumpZ = -0.135;
			if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaJumpZ = -0.0825;
			if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaJumpZ = -0.0375;
			if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaJumpZ = 0.00;
			if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaJumpZ = 0.0375;
			if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaJumpZ = 0.0825;
			if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaJumpZ = 0.135;
			if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaJumpZ = 0.195;
			if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaJumpZ = 0.2625;
			if (StaminaLevel > 48750) StaminaJumpZ = 0.3375;
			StaminaJumpZ *= dvds_staminaaffectsjump;
			StaminaJumpZ += 1.00;

			double FistBlockJumpZ = 1.00;
			if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockJumpZ = 0.75;
			if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockJumpZ = 0.825;
			if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockJumpZ = 0.90;
			
			double TotalJumpZ = CharacterJumpZ
												* LevelJumpZ
												* AGLJumpZ
												* ArmorJumpZ
												* SauronArmorJumpZ
												* BuffJumpZ
												* SceptreJumpZ
												* PerkFactorJumpZ
												* StaminaJumpZ
												* FistBlockJumpZ
												* DivineAvatarJumpZ
												* GoeJumpZ;

			int TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			CallACS("MiscVarSetDECORATE",200,TrueJumpHeight); // Set to the True Jump Height
			if (debugjump)
			{
				Console.Printf("    \cwTotalJumpZ:\c- \cw%8f \cy(%8f)\c- [\cxTrueJumpHeight:\c- \cx%d\c-, \cyMaxStepHeight: %d\c-], CharacterJumpZ: %8f, LevelJumpZ: %8f, AGLJumpZ: %8f, ArmorJumpZ: %8f, SauronArmorJumpZ: %8f, BuffJumpZ: %8f, SceptreJumpZ: %8f, PerkFactorJumpZ: %8f, StaminaJumpZ: %8f, FistBlockJumpZ: %8f, DivineAvatarJumpZ: %8f, GoEJumpZ: %8f", 
														TotalJumpZ, PlayerPawn(Owner).JumpZ, TrueJumpHeight, owner.maxstepheight,
														CharacterJumpZ, LevelJumpZ, 
														AGLJumpZ, ArmorJumpZ, 
														SauronArmorJumpZ, BuffJumpZ, 
														SceptreJumpZ, PerkFactorJumpZ, 
														StaminaJumpZ, FistBlockJumpZ, 
														DivineAvatarJumpZ, GoEJumpZ);
			}
		}
	}
	
	// Survive Rate
	void A_PSI1DoEffectSurviveCalc()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int debugsurvival = dvdsdebug_showsurvivalstuff;
		int SurvivalRate = CallACS("MiscVarCheckDECORATE",0);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int GoETimer = CallACS("GetBuffTimer",129);
		int prevcount;
		if (playeractor)
		{
			// 0.1% for every 2 levels (max of 50 or 5.0% [max of 100 or 10.0% for Flora at Level 200])
			prevcount = SurvivalRate;
			SurvivalRate += (PlayerLevel * 0.5);
			if (debugsurvival) Console.Printf("    \cwSurvival Rate % [STEP 1 - Base]: %d\c-, Original: %d", SurvivalRate, prevcount);

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Every 3/4/5 Points of Defenses = 0.1% increase to Survivability Rate
			if (TrueGameSkill <= SKILL_VERY_EASY) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == SKILL_EASY) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == SKILL_NORMAL) SkillFactor = PlayerDEF / 4;
			if (TrueGameSkill == SKILL_HARD) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == SKILL_VERY_HARD) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == SKILL_EXTREME) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == SKILL_HORRIBLE) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillFactor = PlayerDEF / 7;
			if (TrueGameSkill >= SKILL_OMEGA) SkillFactor = PlayerDEF / 8;
			SurvivalRate += SkillFactor;
			if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 2 - DefStat Check]: %d,\c- Added: %d, Difficulty Level: %d", SurvivalRate, SkillFactor, TrueGameSkill);

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Abhorrent's Equipment Set
			if (Owner.CountInv("SauronHelmet") > 0) SkillFactor += 175; // Helmet = 17.5%
			if (Owner.CountInv("SauronGauntlets") > 0) SkillFactor += 50; // Gauntlets (Deggaris) = 5.0%
			if (Owner.CountInv("SauronGauntletsIllucia") > 0) SkillFactor += 60; // Gauntlets (Illucia) = 6.0%
			if (Owner.CountInv("SauronGauntletsFlora") > 0) SkillFactor += 40; // Gauntlets (Flora) = 4.0%
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 80; // Gauntlets (Ailish) = 8.0%
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 70; // Gauntlets (Petra) = 7.0%
			if (Owner.CountInv("TheOneRing") > 0) SkillFactor += 333; // The One Ring = 33.3%
			SurvivalRate += SkillFactor;
			if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 3 - Abhorrent's Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			prevcount = SurvivalRate;
			SkillFactor = 0;
			if (CharacterClass != 2) // Deggaris and Illucia take advantage of Doom-equse Armor, however Flora, Ailish, and Petra cannot.
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 5; // Green Armor = 0.5% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 10; // Blue Armor = 1.0% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 16; // Stone Skin [1] = 1.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 44; // Diamond Skin [1] = 4.4% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 66; // Stone Skin [2] = 6.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 176; // Diamond Skin [2] = 17.6% [Deggaris and Illucia Only]
			}
			if (CharacterClass == 2) // Items only Flora can make use of
			{
				if (Owner.CountInv("DSSpiritualExoskin1") > 0) SkillFactor += 32; // Spiritual Exoskin = 3.2% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 96; // Greater Spiritual Exoskin = 9.6% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 288; // Perfected Spiritual Exoskin = 28.8% [Flora Only]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 100; // Anubis Cufflinks = 10.0% [Flora Only]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 150; // Dove Ribbon = 15.0% [Flora Only]
			}
			SurvivalRate += SkillFactor;
			if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 4 - Armor Item Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Divine Avatar = (25.0% of remaining amount uncovered)
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.25;
				SurvivalRate += SkillFactor;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// GoE = (62.5% of remaining amount uncovered)
			if (GoETimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.625;
				SurvivalRate += SkillFactor;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 5a - GoE Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (StrifeStamLvl > 0)
			{
				SkillFactor = StrifeStamLvl * 11;
				SurvivalRate += SkillFactor;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Buff = (10.0% of remaining amount uncovered)
			if (DQBuffTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.1;
				SurvivalRate += SkillFactor;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 7a - Buff Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Sap = (-10.0% of remaining amount uncovered)
			if (DQSapTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.1;
				SurvivalRate -= SkillFactor;
				if (SurvivalRate < 0) SurvivalRate = 0;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 7b - Sap Check]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}
		
			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Life Up Perks = total of +6% Survival
			if (LifeUpPerkLvl > 0 || LifeUpExPerkLvl > 0)
			{
				SkillFactor = ((LifeUpPerkLvl * 6) + (LifeUpExPerkLvl * 15));
				SurvivalRate += SkillFactor;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 8 - LifeUp Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Kissa's Armored Brassiere = 25.0%
			if (Owner.CountInv("KissaBra") > 0)
			{
				SkillFactor += 250; 
				SurvivalRate += SkillFactor;
				if (SurvivalRate > 938) SurvivalRate = 938;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (Yes)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			else
			{
				if (SurvivalRate > 875) SurvivalRate = 875;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (No)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			prevcount = SurvivalRate;
			SkillFactor = 0;
			// Ruinous Shield
			if (Owner.CountInv("RuinousShield") > 0)
			{
				SkillFactor = SurvivalRate - (SurvivalRate * 0.2); // Ruinous Shield divides Survival Rate by 5
				SurvivalRate *= 0.2;
				if (debugsurvival && SurvivalRate != prevcount) Console.Printf("    \cwSurvival Rate % [STEP 10 - Ruinous Shield]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			int survivecalcfactor = dvds_survivecalcfactor;
			if (survivecalcfactor < 10) survivecalcfactor = 10;
			if (survivecalcfactor > 1000) survivecalcfactor = 1000;
			SurvivalRate = SurvivalRate * survivecalcfactor / 100;
			if (debugsurvival && SurvivalRate != SkillFactor) Console.Printf("    \cwSurvival Rate % [STEP 11 - Survive-Factor Calc]: %d,\c- Previous: %d, SurvivalCalcFactor: %d", SurvivalRate, SkillFactor, survivecalcfactor);

			SkillFactor = SurvivalRate;
			// Invulnerability
			if (InvulnerabilityTimer > 0)
			{
				SurvivalRate = 1000;
				if (debugsurvival && SurvivalRate != SkillFactor) Console.Printf("    \cwSurvival Rate % [STEP 12 - Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			// Death Rage's Invulnerability
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) 
			{
				SurvivalRate = 1000;
				if (debugsurvival && SurvivalRate != SkillFactor) Console.Printf("    \cwSurvival Rate % [STEP 12 - Death Rage Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}
			int SurviveRNGVal = random[statitem](1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",232,SurvivalRate);
			
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;
			
			if (debugsurvival)
			{
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
			}
		}
	}
	
	// Critical Hits
	void A_PSI1DoEffectCritCalc()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int GoETimer = CallACS("GetBuffTimer",129);
		//**************************
		//**Critical Hit Calc/Roll**
		//**************************
		int CriticalHitRate = CallACS("MiscVarCheckDECORATE",0);
		if (playeractor)
		{
			SkillFactor = 0;
			if (TrueGameSkill <= SKILL_VERY_EASY) CriticalHitRate /= 4;
			if (TrueGameSkill == SKILL_EASY) CriticalHitRate /= 5;
			if (TrueGameSkill == SKILL_NORMAL) CriticalHitRate /= 6; 
			if (TrueGameSkill == SKILL_HARD) CriticalHitRate /= 7; 
			if (TrueGameSkill == SKILL_VERY_HARD) CriticalHitRate /= 8;
			if (TrueGameSkill == SKILL_EXTREME) CriticalHitRate /= 8;
			if (TrueGameSkill == SKILL_HORRIBLE) CriticalHitRate /= 9;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) CriticalHitRate /= 9;
			if (TrueGameSkill >= SKILL_OMEGA) CriticalHitRate /= 10;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 1 - Base]: %d\c-, Difficulty Level", CriticalHitRate, TrueGameSkill);

			// Level + Stat Calculations
			SkillFactor = (PlayerLevel * 5) / 16; // Each level is +0.03125% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2a - Stats: Level]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerAGL * 3) / 16; // 1 pt of Agility is +0.01875% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2b - Stats: Agility]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDEF * 3) / 32; // 1 pt of Defense is +0.009375% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2c - Stats: Defense]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDFT * 7) / 4; // 1 pt of Deftness is +0.175% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2d - Stats: Deftness]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSOR * 1) / 32; // 1 pt of Sorcery is +0.003125% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2e - Stats: Sorcery]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSTR * 1) / 8; // 1 pt of Strength is +0.0125% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2f - Stats: Strength]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerTHE * 1) / 32; // 1 pt of Therapeusis is +0.003125% crit rate
			CriticalHitRate += SkillFactor;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 2g - Stats: Therapeusis]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);

			// Oomph/Blunt
			SkillFactor = 0;
			// Oomph = (5% of remaining amount uncovered)
			if (DQOomphTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.05;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 3a - Oomph Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Blunt = (-5% of remaining amount uncovered)
			if (DQBluntTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.05;
				CriticalHitRate -= SkillFactor;
				if (CriticalHitRate < 0) CriticalHitRate = 0;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 3b - Blunt Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			// Acceleratle/Deceleratle
			SkillFactor = 0;
			// Acceleratle (10% of remaining amount uncovered)
			if (DQAcceleratleTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.1;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 4a - Acceleratle Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Deceleratle (-10% of remaining amount uncovered)
			if (DQDeceleratleTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.1;
				CriticalHitRate -= SkillFactor;
				if (CriticalHitRate < 0) CriticalHitRate = 0;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 4b - Deceleratle Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Divine Avatar (12.5% of remaining amount uncovered)
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.125;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// GoE (31.25% of remaining amount uncovered)
			if (GoETimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.3125;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 5b - GoE Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades [up to 3.125% more Crit]
			if (StrifeStamLvl > 0)
			{
				SkillFactor = (StrifeStamLvl * 25) / 8;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Accuracy Upgrades [up to 1.875% more Crit]
			if (StrifeAccuLvl > 0)
			{
				SkillFactor = (StrifeAccuLvl * 15) / 8;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Accuracy Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			double baserate;
			SkillFactor = 0;
			nm = "ImpalerXBow"; APPackCheck = nm;
			nn = "DualImpalerXBow"; APPackCheck2 = nn;
			if (weapon is APPackCheck || weapon is APPackCheck2)
			{
				baserate = 0.05 + (CallACS("MiscVarCheckDECORATE",10031) * 0.005) + (CallACS("MiscVarCheckDECORATE",10032) * 0.0125);
				if (weapon is APPackCheck2) baserate = 0.075 + (CallACS("MiscVarCheckDECORATE",10031) * 0.0075) + (CallACS("MiscVarCheckDECORATE",10032) * 0.01875);
				SkillFactor = (1000 - CriticalHitRate) * baserate;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 6x7 - Impaler XBow(s)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			nm = "ScepterOfSouls"; APPackCheck = nm;
			nn = "DualScepterOfSouls"; APPackCheck2 = nn;
			if (weapon is APPackCheck || weapon is APPackCheck2)
			{
				baserate = 0.05 + (CallACS("MiscVarCheckDECORATE",10033) * 0.005) + (CallACS("MiscVarCheckDECORATE",10034) * 0.0125);
				if (weapon is APPackCheck2) baserate = 0.075 + (CallACS("MiscVarCheckDECORATE",10033) * 0.0075) + (CallACS("MiscVarCheckDECORATE",10034) * 0.01875);
				SkillFactor = (1000 - CriticalHitRate) * baserate;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 6x7 - Scepter(s) of Souls]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			int MeleeWeaponCritCheck = 0;
			nm = "FistAilish"; APPackCheck = nm;
			nn = "FistPetra"; APPackCheck2 = nn;
			no = "SauronGauntletsAilish"; APPackCheck3 = no;
			np = "SauronGauntletsPetra"; APPackCheck4 = np;
			If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2 ||
					weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4 ||
					weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw" || 
					weapon is "SceptreOfEmpyrea" || weapon is "PoisonNeedle") MeleeWeaponCritCheck = 1;

			// Uppercut Bonuses
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus1") > 0) // up to +4% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.04;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus2") > 0) // up to +8% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.08;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			// Kick Bonus
			SkillFactor = 0;
			if (Owner.CountInv("KickCritBonus1") > 0) // up to +2.5% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.025;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			if (Owner.CountInv("KickCritBonus2") > 0) // up to +6.25% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.0625;
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}


			// Dashing
			SkillFactor = 0;
			if (Owner.CountInv("PlayerDashing") > 0) // +2% more Crit [with most melee weapons], +0.5% with other weapons
			{
				If (MeleeWeaponCritCheck == 1) SkillFactor = (1000 - CriticalHitRate) * 0.02;
																	else SkillFactor = (1000 - CriticalHitRate) * 0.005;

				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) 
				{
					If (MeleeWeaponCritCheck == 1) Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
																		else Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (NON-Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			//if (weapon is "SceptreOfEmpyrea") MeleeWeaponCritCheck = 0;
			// Martial Arts Mastery = total of +8% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10035) > 0)
			{
				If (MeleeWeaponCritCheck == 1)
				{
					SkillFactor = (CallACS("MiscVarCheckDECORATE",10035) * 8) + (CallACS("MiscVarCheckDECORATE",10036) * 20);
					CriticalHitRate += SkillFactor;
					if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 10a - Martial Arts Mastery]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}
			// Berserker Fit = total of +16% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10051) > 0)
			{
				If (MeleeWeaponCritCheck == 1)
				{
					SkillFactor = (CallACS("MiscVarCheckDECORATE",10051) * 16) + (CallACS("MiscVarCheckDECORATE",10052) * 40);
					CriticalHitRate += SkillFactor;
					if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 10b - Berserker Fit Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			// Stam Up Perks = total of +2/6% Crit
			SkillFactor = 0;
			if (StamUpPerkLvl > 0)
			{
				If (MeleeWeaponCritCheck == 1) SkillFactor = (StamUpPerkLvl * 6) + (StamUpEXPerkLvl * 15);
																	else SkillFactor = (StamUpPerkLvl * 2) + (StamUpEXPerkLvl * 5);
				CriticalHitRate += SkillFactor;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 11 - Stam Up Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			// Armor
			SkillFactor = CriticalHitRate;
			if (owner.CountInv("RuinousShield") > 0)
			{
				CriticalHitRate /= 2.56;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 12 - Ruinous Shield]: %d,\c- Previous: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = CriticalHitRate;
			int criticalcalcfactor = dvds_criticalcalcfactor;
			if (criticalcalcfactor < 1) criticalcalcfactor = 1;
			if (criticalcalcfactor > 1000) criticalcalcfactor = 1000;
			CriticalHitRate = CriticalHitRate * criticalcalcfactor / 100;
			if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 13 - Factor Check]: %d,\c- Previous: %d, Factor: %d", CriticalHitRate, SkillFactor, criticalcalcfactor);

			// High-Cap Crit at 100.0%, Low-Cap it at 0.1%
			if (CriticalHitRate < 1) CriticalHitRate = 1;
			if (CriticalHitRate > 1000) CriticalHitRate = 1000;

			// Cheat for ALWAYS-CRIT
			if (Owner.CountInv("CheatCrit") > 0 || Owner.CountInv("CheatCritUltimate") > 0) 
			{
				CriticalHitRate = 2000;
				if (dvdsdebug_showcriticalhitstuff > 0) Console.Printf("    \cwCrit Rate % [STEP 13 - CRIT CHEAT IS ON]: %d", CriticalHitRate);
			}

			int CritRNGVal = random[statitem](1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (CritRNGVal <= CriticalHitRate) { if (owner.CountInv("DealCriticalHit") <= 0) owner.A_SetInventory("DealCriticalHit",1); }
																		else { if (owner.CountInv("DealCriticalHit") >= 1) owner.A_SetInventory("DealCriticalHit",0); }

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",235,CriticalHitRate);

			if (dvdsdebug_showcriticalhitstuff > 0)
			{
				if (CritRNGVal <= CriticalHitRate) Console.Printf("    \cdCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
																			else Console.Printf("    \cgCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
			}
		}
	}
	
	// Armor Resistance Numbers
	void A_PSI1DoEffectArmorResNums()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor)
		{
			ArmorResistance = 0;
			if (CharacterClass == 2)
			{
				if (owner.CountInv("SafeTeaShoes") > 0) ArmorResistance += 30; // Item 1
				if (owner.CountInv("PearlyCorset") > 0) ArmorResistance += 70; // Item 2
				if (owner.CountInv("WaterFlyingDress") > 0) ArmorResistance += 80; // Item 3
				if (owner.CountInv("EvenstarNecklace") > 0) ArmorResistance += 20; // Item 4
				if (owner.CountInv("CloakofEvasion") > 0) ArmorResistance += 40; // Item 5
				if (owner.CountInv("AnubisCufflinks") > 0) ArmorResistance += 50; // Item 6
				if (owner.CountInv("KissaBra") > 0) ArmorResistance += 60; // Item 7
				if (owner.CountInv("DivineShield") > 0) ArmorResistance += 160; // Item 8
				if (owner.CountInv("BalrogRing") > 0) ArmorResistance += 20; // Item 9
				if (owner.CountInv("DoveRibbon") > 0) ArmorResistance += 90; // Item 10
				if (owner.CountInv("FalconKnifeEarrings") > 0) ArmorResistance += 50; // Item 11
			}
			else
			{
				if (owner.CountInv("DSGreenArmorClass") > 0) ArmorResistance += 350;
				if (owner.CountInv("DSBlueArmorClass") > 0) ArmorResistance += 525;
				if (owner.CountInv("DSStoneArmorClass1") > 0) ArmorResistance += 708;
				if (owner.CountInv("DSDiamondArmorClass1") > 0) ArmorResistance += 937;
				if (owner.CountInv("DSStoneArmorClass2") > 0) ArmorResistance += 875;
				if (owner.CountInv("DSDiamondArmorClass2") > 0) ArmorResistance += 987;
			}
			CallACS("MiscVarSetDECORATE",233,ArmorResistance);
		}
	}

	// Evasion Stuff
	void A_PSI1DoEffectEvasionStuff()
	{
		//***********
		//**Evasion**
		//***********
		let playeractor = AetheriusPlayerPawn(owner);
		let weapon = owner.player.ReadyWeapon;
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int GoETimer = CallACS("GetBuffTimer",129);
		if (playeractor)
		{
			// Set's The Base increase from each point of Agility
			if (CharacterClass == 0) { AglEvadeCheck = 9;  DftEvadeCheck = 0; } // Deggaris
			if (CharacterClass == 1) { AglEvadeCheck = 10; DftEvadeCheck = 0; } // Illucia
			if (CharacterClass == 2) { AglEvadeCheck = 11; DftEvadeCheck = 0; } // Flora
			if (CharacterClass == 8) { AglEvadeCheck = 8;  DftEvadeCheck = 0; } // Ailish
			if (CharacterClass == 9) { AglEvadeCheck = 22; DftEvadeCheck = 0; } // Petra (Has double of Flora's)

			if (Owner.CountInv("SauronHelmet") > 0) { AglEvadeCheck += 1; DftEvadeCheck += 1; }
			if (CharacterClass == 0 && Owner.CountInv("SauronGauntlets") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 1 && Owner.CountInv("SauronGauntletsIllucia") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 2 && Owner.CountInv("SauronGauntletsFlora") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (CharacterClass == 8 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (CharacterClass == 9 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (Owner.CountInv("TheOneRing") > 0) { AglEvadeCheck += 6; DftEvadeCheck += 6; }
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate [STEP 0 - Agl/Def Evade Check]: %d / %d\c-", AglEvadeCheck, DftEvadeCheck);

			SkillFactor = 0;
			SkillFactor = ((PlayerAGL * AglEvadeCheck) + (PlayerDFT * DftEvadeCheck)) / 2;
			EvasionRate = SkillFactor;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate [STEP 1 - Base (Agl/Evade)]: %d\c-", EvasionRate);

			// Divine Avatar
			SkillFactor = 0;
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = EvasionRate * 1.75;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate [STEP 2 - Divine Avatar]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}
			
			// GoE
			SkillFactor = 0;
			if (GoETimer > 0)
			{
				SkillFactor = EvasionRate * 2.875;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate [STEP 2a - GoE]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// DodgeMore perks
			if (DodgeMorePerkLvl > 0 || DodgeMoreEXPerkLvl > 0)
			{
				SkillFactor = ((DodgeMorePerkLvl * 250) + (DodgeMoreEXPerkLvl * 625));
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate [STEP 3 - DodgeMore Perks]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (StrifeStamLvl > 0)
			{
				SkillFactor = StrifeStamLvl * 111;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 4 - Strife-Stamina Perk]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Checks Evasion Based on Level
			SkillFactor = PlayerLevel * 5;
			if (DivineAvatarTimer > 0) SkillFactor = SkillFactor * 7 / 5;
			EvasionRate += SkillFactor;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 5a - Level Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Flora Armor Checks
			if (CharacterClass == 2)
			{
				// Flora has Safe Tea Shoes? [+3.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("SafeTeaShoes") > 0) SkillFactor += 375;
				
				// Flora has Pearly Corset? [+0.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("PearlyCorset") > 0) SkillFactor += 75;
				
				// Flora has Water Flying Dress? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("WaterFlyingDress") > 0) SkillFactor += 125;
				
				// Flora has Evenstar Necklace? [+2.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 250;
				
				// Flora has Cloak of Evasion? [+12.50% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("CloakOfEvasion") > 0) SkillFactor += 1250;
				
				// Flora has Falcon Knife Earrings? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 125;
				
				// Flora has Anubis Cufflinks? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 50;
				
				// Flora has Kissa's Brasseire? [+1% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("KissaBra") > 0) SkillFactor += 100;
				
				// Flora has Balrog Ring? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 50;
				
				// Flora has Dove Ribbon? [+1.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 175;
			}
			EvasionRate += SkillFactor;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 6 - Flora Armor Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Someone has Sauron's Helmet [-1.56% Chance]
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SkillFactor = 156;
				EvasionRate -= SkillFactor;
				if (EvasionRate < 0) EvasionRate = 0;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 7a - Sauron Helm Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Someone has The One Ring [+6.25% Chance]
			if (Owner.CountInv("TheOneRing") > 0) 
			{
				SkillFactor = 625;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 7b - One Ring Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			if (CharacterClass == 2)
			{
				// Ruinous Shield [Evade reduced by 5/8ths]
				if (Owner.CountInv("RuinousShield") > 0)
				{
					SkillFactor = EvasionRate * 5 / 8;
					EvasionRate -= SkillFactor;
					if (EvasionRate < 0) EvasionRate = 0;
					if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 8 - Ruinous Shield Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
				}
				
				// Divine Shield [Evade Increased by 1/4ths]
				if (Owner.CountInv("DivineShield") > 0)
				{
					SkillFactor = EvasionRate * 1 / 4;
					EvasionRate += SkillFactor;
					if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 8 - Divine Shield Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
				}
			}
			
			SkillFactor = 0;
			// On The Move Perk
			int IsMoving = 0;
			if (owner.vel.x < minxymoveneg || owner.vel.x > minxymovepos) IsMoving++;
			if (owner.vel.y < minxymoveneg || owner.vel.y > minxymovepos) IsMoving++;
			if (owner.vel.z < minzmoveneg || owner.vel.z > minzmovepos) IsMoving++;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 9 - Vel Checks]: IsMoving?: %d, x%8f / y%8f / z%8f", IsMoving, owner.vel.x, owner.vel.y, owner.vel.z);
			if (OTMPerkLvl > 0 && IsMoving > 0) // "On The Move" Perk
			{
				if (OTMPerkLvl == 1) { SkillFactor = 250 + ((PlayerAGL * 100) / 40); }
				if (OTMPerkLvl == 2) { SkillFactor = 400 + ((PlayerAGL * 100) / 32); }
				if (OTMPerkLvl == 3) { SkillFactor = 550 + ((PlayerAGL * 100) / 24); }
				if (OTMPerkLvl == 4) { SkillFactor = 700 + ((PlayerAGL * 100) / 16); }
				if (OTMPerkLvl >= 5) { SkillFactor = 850 + ((PlayerAGL * 100) / 8); }
		
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 10 - On The Move]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			// Caps Evasion Chances out at 75% [unless you have the Dove's Ribbon, which it caps at 92.5%]
			int EvasionMin;
			int EvasionMax;
			if (Owner.CountInv("DoveRibbon") > 0)
			{
				EvasionMin = 175;
				EvasionMax = 9250;
				EvasionMin += ((DodgeMorePerkLvl * 25) + (DodgeMoreEXPerkLvl * 63) + (OTMPerkLvl * 16) + (OTMEXPerkLvl * 42));
				EvasionMax += ((DodgeMorePerkLvl * 50) + (DodgeMoreEXPerkLvl * 125) + (OTMPerkLvl * 33) + (OTMEXPerkLvl * 84));
			}
			else
			{
				EvasionMin = 0;
				EvasionMax = 7500;
				EvasionMin += ((DodgeMorePerkLvl * 20) + (DodgeMoreEXPerkLvl * 50) + (OTMPerkLvl * 13) + (OTMEXPerkLvl * 33));
				EvasionMax += ((DodgeMorePerkLvl * 30) + (DodgeMoreEXPerkLvl * 75) + (OTMPerkLvl * 20) + (OTMEXPerkLvl * 50));
			}
			if (EvasionRate < EvasionMin) EvasionRate = EvasionMin;
			if (EvasionRate > EvasionMax) EvasionRate = EvasionMax;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 11 - Dove Ribbon Check]: %d,\c- EvadeMin: %d, EvadeMax: %d", EvasionRate, EvasionMin, EvasionMax);
			
			
			// Check for Equipped Weapon
			If (weapon is "BFG90002") BasePerkFactor = -625;
			If (weapon is "RocketLauncher2") BasePerkFactor = -313;
			If (weapon is "Railgun2" || weapon is "Karasawa2" ||
					weapon is "Repeater2" || weapon is "PlasmaRifle2")
			{
				BasePerkFactor = -156;
			}

			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2)
			{
				BasePerkFactor = -156;
			}

			no = "FistAilish"; APPackCheck3 = no;
			np = "FistPetra"; APPackCheck4 = np;
			If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw") BasePerkFactor = -78;
			If (weapon is "Minigun") BasePerkFactor = -78;
			If (weapon is "EvilWarriorShield") BasePerkFactor = -63;
			If (weapon is "Chaingun2") BasePerkFactor = -39;
			If (weapon is "FistDeggaris" || 
					weapon is "FistIllucia" || 
					weapon is "FistFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4)
			{
				BasePerkFactor = 625;
			}
			If (weapon is "PoisonNeedle") BasePerkFactor = 1750;
			If (weapon is "SceptreOfEmpyrea") BasePerkFactor = 1250;
			
			If (weapon is "Shotgun2") BasePerkFactor = 63;
			If (weapon is "Pistol2") BasePerkFactor = 125;
			If (weapon is "DualPistols") BasePerkFactor = (125 * 3) / 2;
			
			// Hellcore Weapons
			int EvadeCurrHellcoreLevel = 0;
			If (weapon is "ImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",96); }
			If (weapon is "DarkImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",97); }
			If (weapon is "CacodemonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",98); }
			If (weapon is "CacolanternEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",99); }
			If (weapon is "AbaddonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",100); }
			If (weapon is "KnightFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",101); }
			If (weapon is "BaronFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",102); }
			If (weapon is "BelphegorFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",103); }
			If (weapon is "BruiserFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",104); }
			If (weapon is "ArchonFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",105); }
			If (weapon is "PyroFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",106); }
			If (weapon is "IncarnateSkull") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",107); }
			If (weapon is "ArchvileHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",108); }
			If (weapon is "DiabloistHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",109); }
			If (weapon is "BalrogFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",110); }
			if (EvadeCurrHellcoreLevel > 0) BasePerkFactor = (1250 * EvadeCurrHellcoreLevel) / 8;
			
			If (weapon is "SapphireWandNew") BasePerkFactor = 125;
			If (weapon is "DualSapphireWandsNew") BasePerkFactor = (125 * 3) / 2;
			nm = "ImpalerXBow"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "DualImpalerXBow"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (325 * 3) / 2;
			nm = "ScepterOfSouls"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 125;
			nm = "DualScepterOfSouls"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (125 * 3) / 2;
			nm = "GoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualGoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "CrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "DualCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (325 * 3) / 2;
			nm = "SuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 468;
			nm = "DualSuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (468 * 3) / 2;
			nm = "DragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualDragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "HellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualHellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "PhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualPhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "FiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 125;
			nm = "DualFiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (125 * 3) / 2;
			nm = "DSparilStaff"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualDSparilStaff"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "StrifeCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "StrifeCrossbow2New"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;

			if (BasePerkFactor != 0)
			{
				PerkFactor = BasePerkFactor;
				PerkFactor += ((DodgeMorePerkLvl * (BasePerkFactor / 20)) + (DodgeMoreEXPerkLvl * (BasePerkFactor / 8)));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 12 - Weapon Check]: %d,\c- Change: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			
			SkillFactor = 0;
			// Acceleratle = +1/5 of remaining % Evasion added (done after caps are normally calculated)
			if (DQAcceleratleTimer > 0)
			{
				PerkFactor = 2000;
				PerkFactor += ((DodgeMorePerkLvl * 200) + (DodgeMoreEXPerkLvl * 500));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 13a - Acceleratle Check]: %d,\c- Add: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			// Deceleratle = -1/5 of remaining % Current Evasion removed (done after caps are normally calculated)
			if (DQDeceleratleTimer > 0)
			{
				PerkFactor = 2000;
				PerkFactor -= ((DodgeMorePerkLvl * 100) + (DodgeMoreEXPerkLvl * 250));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate -= SkillFactor;
				if (EvasionRate < 0) EvasionRate = 0;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 13b - Deceleratle Check]: %d,\c- Subtracted: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = 0;
			// BlurSphere = +1/3 of remaining % Evasion added (done after caps are normally calculated) [in other words, make the Blur Sphere & Invisibility Spells actually USEFUL >__>;]
			if (Owner.CountInv("PowerInvisibility") > 0 || Owner.CountInv("InvisiblitySpell") > 0)
			{
				PerkFactor = 3334;
				PerkFactor += ((DodgeMorePerkLvl * 125) + (DodgeMoreEXPerkLvl * 313));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 14 - Invisibility Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = EvasionRate;
			int evadecalcfactor = dvds_evadecalcfactor;
			if (evadecalcfactor < 10) evadecalcfactor = 10;
			if (evadecalcfactor > 1000) evadecalcfactor = 1000;
			EvasionRate = EvasionRate * evadecalcfactor / 100;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 15 - Factor Check]: %d,\c- Previous: %d, Factor: %d", EvasionRate, SkillFactor, evadecalcfactor);
			
			int ultmaxevasionrate = 9875;
			if (EvasionRate < 0) EvasionRate = 0;
			if (EvasionRate > ultmaxevasionrate) EvasionRate = ultmaxevasionrate;
			if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cwEvasion Rate % [STEP 16 - Final Check]: %d / %d\c-", EvasionRate, ultmaxevasionrate);
			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",23,EvasionRate);

			int EvasionRNGVal = random[statitem](1,10000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (EvasionRNGVal <= EvasionRate) 
			{
				if (owner.CountInv("EvadeAnAttack") <= 0) owner.A_SetInventory("EvadeAnAttack",1); 
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cdEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
			else 
			{ 
				if (owner.CountInv("EvadeAnAttack") >= 1) owner.A_SetInventory("EvadeAnAttack",0); 
				if (dvdsdebug_showevadestuff > 0) Console.Printf("    \cgEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
		}
	}

	// Tension Stuff
	void A_PSI1DoEffectTensionStuff()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int GoETimer = CallACS("GetBuffTimer",129);
		int PsychFstPerkLvl = CallACS("MiscVarCheckDECORATE",10011);
		int PsychFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10012);
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		int MenuModeToggle = CallACS("MiscVarCheckDECORATE",2500);
		
		if (playeractor)
		{
			int TensionChargeFailRate;
			int TensionChargeTimeMax;
			int TensionStaminaPerTic;
			int randompulseinterval1;
			int randompulseinterval2;
			int randompulseinterval3;
			int randompulseinterval4;
			double pulsevolume;
			int maxpulseinterval;
			int TensionChargeAmount;
			int TensionCoolDownRatio;
			int TensionStaminaDivisor;
			int TensionChargeFailRatio = dvds_tension_failrateratio;
			int KillCounter = CallACS("MiscVarCheckDECORATE",158);
			int TensionOverChargeAllowed = dvds_allowtensionocdmg;

			TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int TensionLevelLastTic = CallACS("MiscVarCheckDECORATE",182);
			TensionTimer = CallACS("MiscVarCheckDECORATE",183);
			int TensionCountingDown = CallACS("MiscVarCheckDECORATE",184);
			TensionWarmupTimer = CallACS("MiscVarCheckDECORATE",185);
			TensionCooldownTimer = CallACS("MiscVarCheckDECORATE",186);
			int TensionMaxCooldownTimer = CallACS("MiscVarCheckDECORATE",188);
			TensionChargeLoopTimer = CallACS("MiscVarCheckDECORATE",189);
			TensionActivePulseTimer = CallACS("MiscVarCheckDECORATE",190);
			int TensionBackgroundAuraTimer = CallACS("MiscVarCheckDECORATE",246);
			TensionOverPsycheTimer = CallACS("MiscVarCheckDECORATE",250);
			TensionOverchargeTimer = CallACS("MiscVarCheckDECORATE",251);
			TensionMaxOverchargeTimer = CallACS("MiscVarCheckDECORATE",261);
			TensionMaxOverPsycheTimer = CallACS("MiscVarCheckDECORATE",262);
			if (TensionLevel == 0)  // 0 to 5 Tension [4 Seconds, 20% Total Stamina Use, 0% Fail Rate]
			{
				TensionChargeFailRate = 0;
				TensionChargeTimeMax = 14000;
				TensionStaminaPerTic = 2000;
				TensionMaxOverPsycheTimer = 99999999;
				TensionMaxOverchargeTimer = 99999999;
				TensionOverPsycheTimer = 0;
				TensionOverchargeTimer = 0;
			}
			
			if (TensionLevel == 1)  // 5 to 20 Tension [4.25~ Seconds, 22.5% Total Stamina Use, 2.5% Fail Rate]
			{
				TensionChargeFailRate = 25;
				TensionChargeTimeMax = 14880;
				TensionStaminaPerTic = 2250;
				TensionMaxOverPsycheTimer = 21000; // 600 Seconds [10 minutes]
				TensionMaxOverchargeTimer = 130; // 3.71 seconds
			}
			
			if (TensionLevel == 2)  // 20 to 50 Tension [4.5~ Seconds, 25% Total Stamina Use, 10% Fail Rate]
			{
				TensionChargeFailRate = 100;
				TensionChargeTimeMax = 15750;
				TensionStaminaPerTic = 2500;
				TensionMaxOverPsycheTimer = 15750; // 450 Seconds [7.5 minutes]
				TensionMaxOverchargeTimer = 110; // 3.14 seconds
			}
			
			if (TensionLevel == 3)  // 50 to 100 Tension [5 Seconds, 30% Total Stamina Use, 50% Fail Rate]
			{
				TensionChargeFailRate = 500;
				TensionChargeTimeMax = 17500;
				TensionStaminaPerTic = 3000;
				TensionMaxOverPsycheTimer = 10500; // 300 Seconds [5 minutes]
				TensionMaxOverchargeTimer = 90; // 2.57 seconds
			}
			
			if (TensionLevel == 4)  // 100 to 250 Tension [5.5 Seconds, 35% Total Stamina Use, 70% Fail Rate]
			{
				TensionChargeFailRate = 700;
				TensionChargeTimeMax = 19250;
				TensionStaminaPerTic = 3500;
				TensionMaxOverPsycheTimer = 5250; // 150 Seconds [2.5 minutes]
				TensionMaxOverchargeTimer = 70; // 2 seconds
			}
			
			if (TensionLevel == 5)  // 250 to 500 Tension [6 Seconds, 40% Total Stamina Use, 85% Fail Rate]
			{
				TensionChargeFailRate = 850;
				TensionChargeTimeMax = 21000;
				TensionStaminaPerTic = 4000;
				TensionMaxOverPsycheTimer = 2100; // 60 Seconds
				TensionMaxOverchargeTimer = 60; // 1.71 seconds
			}
			
			if (TensionLevel == 6)  // 500 to 1000 Tension [7.5 Seconds, 50% Total Stamina Use, 92.5% Fail Rate]
			{
				TensionChargeFailRate = 950;
				TensionChargeTimeMax = 26250;
				TensionStaminaPerTic = 5000;
				TensionMaxOverPsycheTimer = 1575; // 45 Seconds
				TensionMaxOverchargeTimer = 50; // 1.42 seconds
			}
			if (TensionLevel == 7)
			{
				TensionChargeFailRate = 1000;
				TensionChargeTimeMax = 26250;
				TensionStaminaPerTic = 5000;
				TensionMaxOverPsycheTimer = 1050; // 30 Seconds
				TensionMaxOverchargeTimer = 40; // 1.14 seconds
			}
			
			TensionMaxOverPsycheTimer *= 20;
			TensionMaxOverchargeTimer *= 20;
			
			if (DivineAvatarTimer > 0)
			{
				TensionMaxOverPsycheTimer *= 4;
				TensionMaxOverchargeTimer *= 4;
			}
			if (dvdsdebug_showtensioninformation) 
			{
				Console.Printf("Tension [Step 1 - Get Initial Values]: TensionLevel: %d, FailRate: %d, MaxChargeTime: %d, StamPerTic: %d, OverpsychTimer: %d / %d, OverchargeTimer: %d / %d", 
												TensionLevel, TensionChargeFailRate, TensionChargeTimeMax, TensionStaminaPerTic, TensionOverPsycheTimer, TensionMaxOverPsycheTimer, TensionOverchargeTimer, TensionMaxOverchargeTimer);
			}
			
			// Tension Per Tic Calcs
			TensionStaminaDivisor = TensionChargeTimeMax / 190;
			TensionStaminaPerTic = TensionStaminaPerTic / TensionStaminaDivisor;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 2 - Stam Use Calc P1]: StamPerTic: %d, MaxChargeTime: %d, Divisor: %d", TensionStaminaPerTic, TensionChargeTimeMax, TensionStaminaDivisor);
			// Check Tension Speed Option [also affects Stamina]
			TensionStaminaPerTic = (TensionStaminaPerTic * TensionSpeedRatio) / 100;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 3 - Stam Use Calc P2 - Tension Speed/Stam Multi]: StamPerTic: %d, Multiplier: %d%", TensionStaminaPerTic, TensionSpeedRatio);
			// Falcon Knife Earrings [-10% Consumption]
			if (Owner.CountInv("FalconKnifeEarrings") > 0) TensionStaminaPerTic = TensionStaminaPerTic * 9 / 10;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 4 - Stam Use Calc P3 - Falcon Knife Earrings]: StamPerTic: %d", TensionStaminaPerTic);
			
			// Fail Rate Calcs
			if (Owner.CountInv("AetheriusPowerStrength") > 0) TensionChargeFailRate -= 125; // -12.5% Fail Rate When Berserked
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 5 - Fail Rate Calc P1 - Berserk]: %d", TensionChargeFailRate);
			if (DivineAvatarTimer > 0) TensionChargeFailRate -= 250; // -25% Fail Rate When In Divine Avatar
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 6 - Fail Rate Calc P2 - Divine Avatar]: %d", TensionChargeFailRate);
			if (GoETimer > 0) TensionChargeFailRate /= 5; // 0.2x Fail Rate When In GoE
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 7 - Fail Rate Calc P3 - GoE]: %d", TensionChargeFailRate);
			
			if (TensionChargeFailRatio < 0) TensionChargeFailRatio = 0;
			if (TensionChargeFailRatio > 1000) TensionChargeFailRatio = 1000;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 8 - Fail Rate Calc P4 - Caps]: %d", TensionChargeFailRate);
			
			TensionChargeFailRate = (TensionChargeFailRate * TensionChargeFailRatio) / 100;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 9 - Fail Rate Calc P5 - Failure Ratio Multi]: %d, Multiplier: %d%", TensionChargeFailRate, TensionChargeFailRatio);

			PerkFactor = 10000 - ((PsychFstPerkLvl * 125) + (PsychFstEXPerkLvl * random[statitem](312,313)));
			TensionChargeFailRate = (TensionChargeFailRate * PerkFactor) / 10000;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 10 - Fail Rate Calc P6 - PsycheFast]: %d, PerkFactor: %d / 10000", TensionChargeFailRate, PerkFactor);

			if (dvds_musou_powertripmode == 1) TensionChargeFailRate = TensionChargeFailRate / 5; // Check "Power Trip" mode Cheat
			if (dvds_musou_powertripmode == 2) TensionChargeFailRate = TensionChargeFailRate / 10; // Check "Power Trip" mode Cheat
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 11 - Fail Rate Calc P7 - Power Trip Mode]: %d", TensionChargeFailRate);
			if (TensionChargeFailRate <= 0) TensionChargeFailRate = 0;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 12 - Fail Rate Calc P8 - LowCap]: %d", TensionChargeFailRate);
			
			// Cooldown Base
			TensionCoolDownRatio = 200;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 13 - Cooldown Calc P1 - Base]: %d", TensionCoolDownRatio);
			// PsycheFast Cooldown
			PerkFactor = ((PsychFstPerkLvl * 500) + (PsychFstEXPerkLvl * 1250)) + 10000;
			TensionCoolDownRatio = TensionCoolDownRatio * PerkFactor / 10000; // "PsycheMore" and "PsycheMore EX" perks.
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 14 - Cooldown Calc P2 - PsychFast]: %d, PerkFactor: %d / 10000", TensionCoolDownRatio, PerkFactor);
			// Cooldown Multiplier
			TensionCoolDownRatio = TensionCoolDownRatio * dvds_tension_cooldownmultiplier / 100;
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 15 - Cooldown Calc P3 - Cooldown Multiplier]: %d, Multiplier: %d%", TensionCoolDownRatio, dvds_tension_cooldownmultiplier);
			
			// Kill Combo
			if (KillCounter > 1)
			{
				if (KillCounter > 10 && KillCounter < 21) { TensionCoolDownRatio = (TensionCoolDownRatio * 1010) / 1000; }
				else if (KillCounter > 20 && KillCounter < 36) { TensionCoolDownRatio = (TensionCoolDownRatio * 1030) / 1000; }
				else if (KillCounter > 35 && KillCounter < 61) { TensionCoolDownRatio = (TensionCoolDownRatio * 1060) / 1000; }
				else if (KillCounter > 60 && KillCounter < 101) { TensionCoolDownRatio = (TensionCoolDownRatio * 1100) / 1000; }
				else if (KillCounter > 100 && KillCounter < 201) { TensionCoolDownRatio = (TensionCoolDownRatio * 1200) / 1000; }
				else if (KillCounter > 200 && KillCounter < 501) { TensionCoolDownRatio = (TensionCoolDownRatio * 1500) / 1000; }
				else if (KillCounter > 500) { TensionCoolDownRatio = (TensionCoolDownRatio * 1950) / 1000; }
			}
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 16 - Cooldown Calc P4 - Kill Counter]: %d, KillCount: %d", TensionCoolDownRatio, KillCounter);
			
			int DashTimer = CallACS("MiscVarCheckDECORATE",166);
			if (DashTimer <= 0 && UsingInGameMenu == 0) TensionCooldownTimer -= TensionCoolDownRatio;
			if (TensionCooldownTimer <= 0) { TensionCooldownTimer = 0; TensionMaxCooldownTimer = TensionCooldownTimer; }
			if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 17 - Cooldown Calc P5 - Final Countdown]: Timer: %d / %d, Decrease: %d", TensionCooldownTimer, TensionMaxCooldownTimer, TensionCoolDownRatio);
			
			if (PlayerCurrentHealth > 0)
			{
				TensionChargeAmount = 0;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (FatigueTimer > 0 && random[statitem](1,20) == 1) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (buttons & BT_USE && buttons & BT_SPEED && TensionCooldownTimer <= 0 && FreezePlayer == 0)
				{
					if (dvds_allowtension > 0 && CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // Tension is Enabled & If Player is "Conscious", Tension Charge Timer counts up
					{
						TensionCooldownTimer = 0;
						TensionMaxCooldownTimer = TensionCooldownTimer;
						
						if (TensionLevel <= 7 && TensionCountingDown <= 0)
						{
							CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
							if (CurrentStamina >= TensionStaminaPerTic)
							{
								if (TensionLevel < 7)
								{
									TensionChargeLoopTimer++; // Increase Charge-Up Sound Loop Timer
									if (TensionChargeLoopTimer == 1) owner.A_PlaySound("tensioncharge",CHAN_6,1.0);
									if (TensionChargeLoopTimer >= 63) TensionChargeLoopTimer = 0;
									
									if (TensionWarmupTimer == 0 && CharacterClass == 2) owner.A_PlaySound("FloraChargeTension",CHAN_VOICE,1.0,0,ATTN_NORM);
									owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION);
									if (TensionLevel > 3 && random[statitem](1,100) > 50) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "100"+ Tension
									if (TensionLevel > 4 && random[statitem](1,100) > 80) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "250"+ Tension
									if (TensionLevel > 5 && random[statitem](1,100) > 86) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "500"+ Tension
									if (TensionLevel > 6 && random[statitem](1,100) > 91) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "1000"+ Tension
								}
								else
								{
									TensionChargeLoopTimer = 0;
								}
								
								// Quaking
								if (TensionLevel == 0) owner.A_Quake(1,4,0,512,"null");
								if (TensionLevel == 1) owner.A_Quake(2,4,0,512,"null");
								if (TensionLevel == 2) owner.A_Quake(3,4,0,512,"null");
								if (TensionLevel == 3) owner.A_Quake(4,4,0,512,"null");
								if (TensionLevel == 4) owner.A_Quake(5,4,0,512,"null");
								if (TensionLevel == 5) owner.A_Quake(7,4,0,512,"null");
								if (TensionLevel == 6) owner.A_Quake(9,4,0,512,"null");
								if (TensionLevel < 7) 
								{
									CallACS("MiscVarSetDECORATE",21,TensionStaminaPerTic,2); // Subtract
								}
								
								// 100 = 1 tic
								TensionChargeAmount = 100;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18a - Charge Up P1]: %d", TensionChargeAmount);
								
								// -37.5% Charge Speed When Fatigued
								if (FatigueTimer > 0) TensionChargeAmount = TensionChargeAmount * 5 / 8;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18b - Charge Up P2 - Fatigue]: %d", TensionChargeAmount);

								// -25% Charge Speed When Berserked
								if (Owner.CountInv("AetheriusPowerStrength") > 0) TensionChargeAmount = TensionChargeAmount * 3 / 4;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18c - Charge Up P3 - Berserk]: %d", TensionChargeAmount);

								// -12.5% Charge Speed When in Divine Avatar
								if (DivineAvatarTimer > 0) TensionChargeAmount = TensionChargeAmount * 7 / 8;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18d - Charge Up P4 - Divine Avatar]: %d", TensionChargeAmount);

								// +50% Charge Speed When in GoE
								if (GoETimer > 0) TensionChargeAmount = TensionChargeAmount * 3 / 2;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18d - Charge Up P4 - Divine Avatar]: %d", TensionChargeAmount);

								// +5% Charge Speed When at Decent Health
								if (Owner.CountInv("DecentHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1050 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18e - Charge Up P5a - Decent Health]: %d", TensionChargeAmount);

								// +12.5% Charge Speed When Low on Health
								if (Owner.CountInv("LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1125 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18f - Charge Up P5b - Low Health]: %d", TensionChargeAmount);

								// +33.4% Charge Speed When Critically Low on Health
								if (Owner.CountInv("CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18g - Charge Up P5c - Critically-Low Health]: %d", TensionChargeAmount);

								// +33.4% Charge Speed for Flora
								if (CharacterClass == 2) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18h - Charge Up P6 - Flora Check]: %d", TensionChargeAmount);

								// +20% Charge Speed for Flora when Low on Health
								if (CharacterClass == 2 && Owner.CountInv("DecentHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1200 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18i - Charge Up P7 - Flora - Decent Health]: %d", TensionChargeAmount);

								// +50% Charge Speed for Flora when Low on Health
								if (CharacterClass == 2 && Owner.CountInv("LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1500 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18j - Charge Up P8 - Flora - Low Health]: %d", TensionChargeAmount);

								// +125% Charge Speed for Flora when Critically low on Health
								if (CharacterClass == 2 && Owner.CountInv("CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 2250 / 1000;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18k - Charge Up P9 - Flora - Critically-Low Health]: %d", TensionChargeAmount);

								// Check Tension Charge Multiplier Option
								TensionChargeAmount = TensionChargeAmount * dvds_tension_chargemultiplier / 100;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18l - Charge Up P10 - Charge Multiplier]: %d, Multiplier: %d%", TensionChargeAmount, dvds_tension_chargemultiplier);

								// Check Tension Speed Option [also affects Stamina]
								TensionChargeAmount = (TensionChargeAmount * TensionSpeedRatio) / 100;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18m - Charge Up P11 - Tension Speed Multi]: %d, Multiplier: %d%", TensionChargeAmount, TensionSpeedRatio);

								// Check "Power Trip" mode Cheat
								if (dvds_musou_powertripmode == 1) TensionChargeAmount *= 5;
								if (dvds_musou_powertripmode == 2) TensionChargeAmount *= 10;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18n - Charge Up P12 - Power Trip Mode]: %d", TensionChargeAmount);
								
								// Kill Combo
								if (KillCounter > 1)
								{
									if (KillCounter > 10 && KillCounter < 21) { TensionChargeAmount = (TensionChargeAmount * 1005) / 1000; }
									else if (KillCounter > 20 && KillCounter < 36) { TensionChargeAmount = (TensionChargeAmount * 1015) / 1000; }
									else if (KillCounter > 35 && KillCounter < 61) { TensionChargeAmount = (TensionChargeAmount * 1030) / 1000; }
									else if (KillCounter > 60 && KillCounter < 101) { TensionChargeAmount = (TensionChargeAmount * 1050) / 1000; }
									else if (KillCounter > 100 && KillCounter < 201) { TensionChargeAmount = (TensionChargeAmount * 1100) / 1000; }
									else if (KillCounter > 200 && KillCounter < 501) { TensionChargeAmount = (TensionChargeAmount * 1250) / 1000; }
									else if (KillCounter > 500) { TensionChargeAmount = (TensionChargeAmount * 1475) / 1000; }
								}
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18o - Charge Up P13 - Kill Counter]: %d, KillCount: %d", TensionChargeAmount, KillCounter);
								
								// PsycheMore perks
								PerkFactor = ((PsychFstPerkLvl * 750) + (PsychFstEXPerkLvl * 1875)) + 10000;
								TensionChargeAmount = TensionChargeAmount * PerkFactor / 10000; // "PsycheMore" and "PsycheMore EX" perks.
								TensionChargeAmount += (PsychFstPerkLvl / 2);
								TensionChargeAmount += PsychFstEXPerkLvl;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18p - Charge Up P14 - PsycheFast]: %d", TensionChargeAmount);
								
								// Kill-Combo Bonus
								int TensionChargeKillBonus = ((KillCounter * 3) / 4) + 100;
								if (KillCounter > 0) TensionChargeAmount = (TensionChargeAmount * TensionChargeKillBonus) / 100;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18q - Charge Up P15 - Kill Bonus]: %d, KillBonus: %d%", TensionChargeAmount, TensionChargeKillBonus);
								
								// Up-Clamp to 1 Tic
								if (TensionChargeAmount < 1) TensionChargeAmount = 1;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18r - Charge Up P16 - Clamp]: %d", TensionChargeAmount);
							}
							else
							{
								if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
						
								if (TensionLevel == 0) TensionCooldownTimer = 3500;
								else if (TensionLevel == 1) TensionCooldownTimer = 3720;
								else if (TensionLevel == 2) TensionCooldownTimer = 3940;
								else if (TensionLevel == 3) TensionCooldownTimer = 4380;
								else if (TensionLevel == 4) TensionCooldownTimer = 4810;
								else if (TensionLevel == 5) TensionCooldownTimer = 5250;
								else if (TensionLevel == 6) TensionCooldownTimer = 6560;
								TensionCooldownTimer = TensionCooldownTimer * 3 / 2;
								TensionMaxCooldownTimer = TensionCooldownTimer;
						
								if (TensionLevel < 7)
								{
									owner.A_PlaySound("tensionfailed",CHAN_7,1.0);
								}
						
								CallACS("MiscVarSetDECORATE",21,0);
								TensionChargeAmount -= 250;
								if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18 - Charge Up P1]: %d", TensionChargeAmount);
							}
						}

					}
				}
				else
				{
					if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
					TensionChargeAmount -= 250;
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 18 - Charge Up P1]: %d", TensionChargeAmount);
				}
				// Movement to decrease Tension charge.
				int C3 = 0;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					buttons = owner.GetPlayerInput(INPUT_BUTTONS);
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) C3 = -500;
					else if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) C3 = -500;
					else if (buttons & BT_JUMP || buttons & BT_CROUCH) C3 = -500;
				}
				if (C3 != 0 && TensionCooldownTimer < 7000 && FreezePlayer == 0)
				{
					if (dvds_allowtension > 0) // Tension is Enabled
					{
						TensionCooldownTimer = 7000; // 1 Sec
						TensionMaxCooldownTimer = TensionCooldownTimer;
					}
				}
				TensionChargeAmount += C3;
				if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 19 - Charge Up Input]: %d, input-change: %d", TensionChargeAmount, C3);
				
				if (TensionCountingDown <= 0 && UsingInGameMenu == 0) TensionWarmupTimer += TensionChargeAmount;
				if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 20 - Increase Warmup/Charge]:  %d / %d, Charge: %d", TensionWarmupTimer, TensionChargeTimeMax, TensionChargeAmount);

				if (TensionWarmupTimer <= 0) TensionWarmupTimer = 0;
				
				if (TensionWarmupTimer >= TensionChargeTimeMax)
				{
					
					if (random[statitem](1,1000) > TensionChargeFailRate)
					{
						TensionCountingDown = 0;
						
						if (TensionLevel == 0) { TensionCooldownTimer = 3500; owner.A_SetBlend("FE 68 FD",0.33,43); }
						else if (TensionLevel == 1) { TensionCooldownTimer = 3720; owner.A_SetBlend("FE 68 FD",0.33,48); }
						else if (TensionLevel == 2) { TensionCooldownTimer = 3940; owner.A_SetBlend("FE 68 FD",0.33,53); }
						else if (TensionLevel == 3) { TensionCooldownTimer = 4380; owner.A_SetBlend("FE 68 FD",0.33,56); }
						else if (TensionLevel == 4) { TensionCooldownTimer = 4810; owner.A_SetBlend("FE 68 FD",0.33,61); }
						else if (TensionLevel == 5) { TensionCooldownTimer = 5250; owner.A_SetBlend("FE 68 FD",0.33,66); }
						else if (TensionLevel == 6) { TensionCooldownTimer = 6560; owner.A_SetBlend("FE 68 FD",0.33,70); }
						TensionCooldownTimer *= 2;
						TensionMaxCooldownTimer = TensionCooldownTimer;
						TensionOverPsycheTimer = 0;
						TensionOverchargeTimer = 0;
						
						if (TensionLevel >= 0 && TensionLevel <= 2) // to 5,20,50
						{
							owner.A_PlaySound("tensionincrease",CHAN_7,1.0,0,ATTN_NORM);
						}
						if (TensionLevel >= 3 && TensionLevel <= 4)  // to 100,250 [Super High Tension]
						{
							owner.A_PlaySound("tensionhigh1",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2 && TensionLevel == 3 && random[statitem](1,3) == 1) owner.A_PlaySound("FloraEnterHighTension1",CHAN_VOICE,1.0,0,ATTN_NORM);
							if (CharacterClass == 2 && TensionLevel == 4 && random[statitem](1,2) == 1) owner.A_PlaySound("FloraEnterHighTension2",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						if (TensionLevel == 5) // to 500
						{
							owner.A_PlaySound("tensionhigh2",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2) owner.A_PlaySound("FloraEnterHighTension2",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						if (TensionLevel == 6) // to 1000
						{
							owner.A_PlaySound("tensionhigh3",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2) owner.A_PlaySound("FloraEnterHighTension3",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						
						double project_RealZ = (owner.player.viewHeight * 39 / 50) + 8.0;
						string blastwavetype;
						if (TensionLevel == 0) blastwavetype = "PlayerTension5BlastRadius";
						if (TensionLevel == 1) blastwavetype = "PlayerTension20BlastRadius";
						if (TensionLevel == 2) blastwavetype = "PlayerTension50BlastRadius";
						if (TensionLevel == 3) blastwavetype = "PlayerTension100BlastRadius";
						if (TensionLevel == 4) blastwavetype = "PlayerTension250BlastRadius";
						if (TensionLevel == 5) blastwavetype = "PlayerTension500BlastRadius";
						if (TensionLevel == 6) blastwavetype = "PlayerTension1000BlastRadius";
						owner.A_SpawnProjectile(blastwavetype,project_RealZ,0,0,CMF_TRACKOWNER,0);
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 21 - BlastWave SpawnZ]: %8f", project_RealZ);

						TensionLevel += 1;
						
						if (TensionLevel == 1) TensionTimer = 3600;
						if (TensionLevel == 2) TensionTimer = 4320;
						if (TensionLevel == 3) TensionTimer = 5184;
						if (TensionLevel == 4) TensionTimer = 6221;
						if (TensionLevel == 5) TensionTimer = 7465;
						if (TensionLevel == 6) TensionTimer = 8958;
						if (TensionLevel == 7) TensionTimer = 10750;
					}
					else // Psyche Up Fails D:
					{
						TensionCountingDown = 0;
						
						if (dvds_allowtension > 0) // Tension is Enabled
						{
							if (TensionLevel == 0) TensionCooldownTimer = 3500;
							else if (TensionLevel == 1) TensionCooldownTimer = 3720;
							else if (TensionLevel == 2) TensionCooldownTimer = 3940;
							else if (TensionLevel == 3) TensionCooldownTimer = 4380;
							else if (TensionLevel == 4) TensionCooldownTimer = 4810;
							else if (TensionLevel == 5) TensionCooldownTimer = 5250;
							else if (TensionLevel == 6) TensionCooldownTimer = 6560;
							TensionCooldownTimer = TensionCooldownTimer * 3 / 2;
							TensionMaxCooldownTimer = TensionCooldownTimer;
						
							if (TensionLevel < 7)
							{
								owner.A_PlaySound("tensionfailed",CHAN_7,1.0);
							}
						}
						
						if (TensionLevel == 1) TensionTimer = 3600;
						if (TensionLevel == 2) TensionTimer = 4320;
						if (TensionLevel == 3) TensionTimer = 5184;
						if (TensionLevel == 4) TensionTimer = 6221;
						if (TensionLevel == 5) TensionTimer = 7465;
						if (TensionLevel == 6) TensionTimer = 8958;
						if (TensionLevel == 7) TensionTimer = 10750;
					}
					TensionWarmupTimer = 0; // Reset Warmup Timer
				}
			}
			else
			{
				if (TensionLevel > 0) // Level
				{ 
					owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM); TensionLevel = 0; 
				}
				if (TensionLevelLastTic > 0) TensionLevelLastTic = 0; // Compare
				if (TensionTimer > 0) TensionTimer = 0; // Timer
				if (TensionCountingDown != 0) TensionCountingDown = 0; // Timer Counts Down?
				if (TensionWarmupTimer > 0) TensionWarmupTimer = 0;
				if (TensionCooldownTimer > 0) TensionCooldownTimer = 0;
				if (TensionMaxCooldownTimer > 0) TensionMaxCooldownTimer = 0;
				if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
				if (TensionActivePulseTimer > 0) TensionActivePulseTimer = 0;
			}

			// Tension Effects
			if (PlayerCurrentHealth > 0)
			{
				if (TensionLevel != 0)
				{
					if (TensionLevel == 1) { pulsevolume = frandom[statitem2](0.118110236,0.244094488); maxpulseinterval = random[statitem](21,23); }
					if (TensionLevel == 2) { pulsevolume = frandom[statitem2](0.141732283,0.37007874); maxpulseinterval = random[statitem](19,21); }
					if (TensionLevel == 3) { pulsevolume = frandom[statitem2](0.165354331,0.496062992); maxpulseinterval = random[statitem](17,19); }
					if (TensionLevel == 4) { pulsevolume = frandom[statitem2](0.188976378,0.622047244); maxpulseinterval = random[statitem](15,17); }
					if (TensionLevel == 5) { pulsevolume = frandom[statitem2](0.212598425,0.748031496); maxpulseinterval = random[statitem](13,15); }
					if (TensionLevel == 6) { pulsevolume = frandom[statitem2](0.236220472,0.874015748); maxpulseinterval = random[statitem](12,14); }
					if (TensionLevel == 7) { pulsevolume = frandom[statitem2](0.25984252,1.0); maxpulseinterval = random[statitem](11,13); }
					maxpulseinterval *= 2;
					if (random[statitem](1,4) == 1) randompulseinterval1 = maxpulseinterval * 2; else randompulseinterval1 = random[statitem](1,maxpulseinterval);
					if (random[statitem](1,4) == 1) randompulseinterval2 = maxpulseinterval * 2; else randompulseinterval2 = random[statitem](1,maxpulseinterval);
					if (random[statitem](1,4) == 1) randompulseinterval3 = maxpulseinterval * 2; else randompulseinterval3 = random[statitem](1,maxpulseinterval);
					if (random[statitem](1,4) == 1) randompulseinterval4 = maxpulseinterval * 2; else randompulseinterval4 = random[statitem](1,maxpulseinterval);
					TensionActivePulseTimer++; // Increase Charge-Up Sound Loop Timer
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 22 - PulseTimer]: %d", TensionActivePulseTimer);
					
					if (TensionActivePulseTimer == randompulseinterval1 && TensionLevel >= 1)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval1 = random[statitem](1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval2 && TensionLevel >= 3)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval2 = random[statitem](1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval3 && TensionLevel >= 5)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval3 = random[statitem](1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval4 && TensionLevel >= 7)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval4 = random[statitem](1,maxpulseinterval);
					}
					if (TensionActivePulseTimer >= maxpulseinterval) TensionActivePulseTimer = 0;
					
					// Background Sound for the humming of tension.
					TensionBackgroundAuraTimer++;
					if (TensionBackgroundAuraTimer == 1)
					{
						owner.A_StopSound(CHAN_6);
						if (TensionLevel == 1) owner.A_PlaySound("tensionaura5",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 2) owner.A_PlaySound("tensionaura20",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 3) owner.A_PlaySound("tensionaura50",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 4) owner.A_PlaySound("tensionaura100",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 5) owner.A_PlaySound("tensionaura250",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 6) owner.A_PlaySound("tensionaura500",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 7) owner.A_PlaySound("tensionaura1000",CHAN_6,1.0,0,ATTN_NORM);
					}
					if (TensionBackgroundAuraTimer >= 68) TensionBackgroundAuraTimer = 0;
					
					int TensionOverchargeDmgFactor;
					int TensionOverchargeDmgBase;
					int TensionOverchargeDmgFinal;
					int TensionOverchargeDmgThreshold = PlayerCurrentHealth / 256;
					if (TensionOverchargeDmgThreshold < 1) TensionOverchargeDmgThreshold = 1;
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 23 - Set Overcharge DMG Threshold]: %d", TensionOverchargeDmgThreshold);
					
					// Overcharge Tracking
					int TensionOCTimer1Amount = 20;
					int TensionOCTimer2Amount = 20;
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24 - Set Overcharge Increment Amts]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);
					
					if (InvulnerabilityTimer > 0) // Invulnerability stops the Overcharge timers while in effect
					{
						TensionOCTimer1Amount *= 0;
						TensionOCTimer2Amount *= 0;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24b - Set Overcharge Increment (Invuln)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQOomphTimer > 0) // Oomph Slows it down
					{
						TensionOCTimer1Amount *= 0.75;
						TensionOCTimer2Amount *= 0.75;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24c - Set Overcharge Increment (Oomph)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQBuffTimer > 0) // Buff Slows it down
					{
						TensionOCTimer1Amount *= 0.75;
						TensionOCTimer2Amount *= 0.75;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24d - Set Overcharge Increment (Buff)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQAcceleratleTimer > 0) // Accelerate Speeds it up
					{
						TensionOCTimer1Amount *= 1.2;
						TensionOCTimer2Amount *= 1.2;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24e - Set Overcharge Increment (Accelerate)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQDeceleratleTimer > 0) // Decelerate Slows it down
					{
						TensionOCTimer1Amount *= 0.8;
						TensionOCTimer2Amount *= 0.8;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24f - Set Overcharge Increment (Decelerate)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (PoisonedTimer > 0) // Poison Really Speeds it Up
					{
						TensionOCTimer1Amount *= 1.75;
						TensionOCTimer2Amount *= 1.75;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24g - Set Overcharge Increment (Poison)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (BerserkTimer > 0) // Berserk Speeds it up
					{
						TensionOCTimer1Amount *= 1.25;
						TensionOCTimer2Amount *= 1.25;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24h - Set Overcharge Increment (Berserk)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (TensionCountingDown == 1) // If Tension is draining
					{
						TensionOCTimer1Amount = TensionOCTimer1Amount / 3;
						TensionOCTimer2Amount = TensionOCTimer2Amount / 3;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24i - Set OverPsyche/Overcharge Increment (Tension CountDown)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DivineAvatarTimer == 1) // DivineAvatar
					{
						TensionOCTimer1Amount *= 0.5;
						TensionOCTimer2Amount *= 0.5;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24j - Set OverPsyche/Overcharge Increment (Divine Avatar)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (GoETimer > 0) // GoE
					{
						TensionOCTimer1Amount *= 0.2;
						TensionOCTimer2Amount *= 0.2;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 24k - Set OverPsyche/Overcharge Increment (GoE)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					// TensionOverCharge Allowed?
					if (TensionOverChargeAllowed > 0)
					{
						if (MenuModeToggle == 0) TensionOverPsycheTimer += TensionOCTimer1Amount; 
					}
					else
					{
						TensionOverPsycheTimer = 0;
					}
					if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 25 - OverPsyche Increment]: OverPsycheTimer: %d / %d, OverPsyche: %d", TensionOverPsycheTimer, TensionMaxOverPsycheTimer, TensionOCTimer1Amount);
					
					if (TensionOverPsycheTimer >= TensionMaxOverPsycheTimer && TensionOverChargeAllowed > 0)
					{
						TensionOverPsycheTimer = TensionMaxOverPsycheTimer;
						if (TensionOverChargeAllowed > 0) 
						{
							if (MenuModeToggle == 0) TensionOverchargeTimer += TensionOCTimer2Amount;
						}
						else 
						{
							TensionOverchargeTimer = 0;
						}
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 26 - OverCharge Increment]: OverChargeTimer: %d / %d, OverPsyche: %d", TensionOverchargeTimer, TensionMaxOverchargeTimer, TensionOCTimer2Amount);
						
						if (TensionOverchargeTimer >= TensionMaxOverchargeTimer && TensionOverChargeAllowed > 0)
						{
							TensionOverchargeTimer = 0;
							TensionMaxOverchargeTimer = 0;
							TensionOverchargeDmgFactor = random[statitem](6,10) * ((6 + ((TensionLevel * 9) / 4)) / 7);
							TensionOverchargeDmgBase = (random[statitem](2,3) * TensionOverchargeDmgFactor) / 8;
							if (TensionOverchargeDmgBase < 2 && TensionLevel > 4) TensionOverchargeDmgBase = 2;
							if (GoETimer > 0) TensionOverchargeDmgBase *= 0.2;
							if (TensionOverchargeDmgBase < 1) TensionOverchargeDmgBase = 1;
							TensionOverchargeDmgFinal = PlayerCurrentHealth - TensionOverchargeDmgBase;
							if (TensionOverchargeDmgFinal < TensionOverchargeDmgThreshold) TensionOverchargeDmgFinal = TensionOverchargeDmgThreshold;
							if (TensionOverchargeDmgFinal > TensionOverchargeDmgThreshold)
							{
								if (InvulnerabilityTimer == 0) // If not Invulnerable
								{
									if (random[statitem](1,5) == 1)
									{
										if (CharacterClass == 2)
										{
											//owner.A_StopSound(CHAN_VOICE); 
											if (health > 0)
											{
												if (HealthRatio >= 0.667) owner.A_PlaySound("FloraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
												else if (HealthRatio >= 0.334 && HealthRatio < 0.667) owner.A_PlaySound("FloraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
												else if (HealthRatio < 0.334) owner.A_PlaySound("FloraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
											}
										}
										if (CharacterClass == 8)
										{
											//owner.A_StopSound(CHAN_VOICE); 
											if (health > 0)
											{
												if (HealthRatio >= 0.667) owner.A_PlaySound("AilishPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
												else if (HealthRatio >= 0.334 && HealthRatio < 0.667) owner.A_PlaySound("AilishPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
												else if (HealthRatio < 0.334) owner.A_PlaySound("AilishPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
											}
										}
										if (CharacterClass == 9)
										{
											//owner.A_StopSound(CHAN_VOICE); 
											if (health > 0)
											{
												if (HealthRatio >= 0.667) owner.A_PlaySound("PetraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
												else if (HealthRatio >= 0.334 && HealthRatio < 0.667) owner.A_PlaySound("PetraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
												else if (HealthRatio < 0.334) owner.A_PlaySound("PetraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
											}
										}
									}
									owner.player.health = owner.player.mo.health = TensionOverchargeDmgFinal;
									PlayerCurrentHealth = owner.player.health;
								}
							}
						}
					}
					else
					{
						TensionOverchargeTimer = 0;
					}
					
					int tensiontimerdecrease;
					if (TensionCountingDown != 0 && TensionTimer >= 0)
					{
						tensiontimerdecrease = 20;
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 27 - TensionDecrease Increment]: %d", tensiontimerdecrease);

						tensiontimerdecrease = tensiontimerdecrease * dvds_tension_countdownmultiplier / 100;
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 27b - TensionDecrease Multiplier]: %d, Multiplier: %d%", tensiontimerdecrease, dvds_tension_countdownmultiplier);

						if (dvds_musou_powertripmode == 1) tensiontimerdecrease = tensiontimerdecrease / 5; // 'Power Trip' mode cheat
						if (dvds_musou_powertripmode == 2) tensiontimerdecrease = tensiontimerdecrease / 10; // 'Power Trip' mode cheat
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 27c - TensionDecrease - Power Trip]: %d", tensiontimerdecrease);

						if (owner.CountInv("MartArtsMaster1") > 0) tensiontimerdecrease = (tensiontimerdecrease * random[statitem](980,990)) / 1000;
						if (owner.CountInv("MartArtsMaster2") > 0) tensiontimerdecrease = (tensiontimerdecrease * random[statitem](960,980)) / 1000;
						if (owner.CountInv("MartArtsMaster3") > 0) tensiontimerdecrease = (tensiontimerdecrease * random[statitem](920,960)) / 1000;
						if (owner.CountInv("MartArtsMaster4") > 0) tensiontimerdecrease = (tensiontimerdecrease * random[statitem](800,900)) / 1000;
						if (owner.CountInv("MartArtsMaster5") > 0) tensiontimerdecrease = (tensiontimerdecrease * random[statitem](400,600)) / 1000;
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 27d - TensionDecrease - MartArts Mastery]: %d", tensiontimerdecrease);

						PerkFactor = 10000 - ((PsychFstPerkLvl * 250) + (PsychFstEXPerkLvl * 625));
						tensiontimerdecrease = (tensiontimerdecrease * PerkFactor) / 10000;
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 27e - TensionDecrease - PsycheFast]: %d, PerkFactor: %d / 10000", tensiontimerdecrease, PerkFactor);

						If (UsingInGameMenu == 0) TensionTimer -= tensiontimerdecrease;
						if (dvdsdebug_showtensioninformation) Console.Printf("Tension [Step 28 - TensionDecrease - Decrement]: %d, Decrease: %d", TensionTimer, tensiontimerdecrease);
					}
					
					if (TensionTimer <= 0) 
					{
						if (dvds_allowtension > 0) // Tension is Enabled
						{
							if (TensionLevel == 1) TensionCooldownTimer = 14000; // Cooldown Timer set to 4 seconds
							if (TensionLevel == 2) TensionCooldownTimer = 14880; // Cooldown Timer set to 4.25 seconds
							if (TensionLevel == 3) TensionCooldownTimer = 15750; // Cooldown Timer set to 4.5 seconds
							if (TensionLevel == 4) TensionCooldownTimer = 17500; // Cooldown Timer set to 5 seconds
							if (TensionLevel == 5) TensionCooldownTimer = 19250; // Cooldown Timer set to 5.5 seconds
							if (TensionLevel == 6) TensionCooldownTimer = 21000; // Cooldown Timer set to 6 seconds
							if (TensionLevel == 7) TensionCooldownTimer = 26250; // Cooldown Timer set to 7.5 seconds
							TensionCooldownTimer *= 2;
							TensionMaxCooldownTimer = TensionCooldownTimer;
						}
					
						TensionWarmupTimer = 0; // Warmup Timer
						TensionCountingDown = 0; // Tension Timer
						TensionLevel = 0; // Tension Level
						TensionBackgroundAuraTimer = 0; // Tension Aura-Sound Timer
						owner.A_StopSound(CHAN_5);
						owner.A_StopSound(CHAN_6);
						owner.A_StopSound(CHAN_7);
						owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM);
					}
				}
				
				if (dvds_allowtension > 0) // Tension is Enabled
				{
					if (TensionLevel < 0) TensionLevel = 0;
					if (TensionLevel > 7) TensionLevel = 7;
				}
				else
				{
					if (TensionLevel != 0) { TensionLevel = 0; owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM); }
					if (TensionTimer != 0) TensionTimer = 0; // Timer
					if (TensionCountingDown != 0) TensionCountingDown = 0; // Timer Counts Down?
					if (TensionWarmupTimer != 0) TensionWarmupTimer = 0;
					if (TensionCooldownTimer != 0) TensionCooldownTimer = 0;
					if (dvds_tension_chargemultiplier != 0) TensionChargeLoopTimer = 0;
					if (TensionMaxCooldownTimer != 0) TensionActivePulseTimer = 0;   
				}
	
				if (TensionLevel >= 4) { owner.A_SetInventory("TensionTrail", 1); } else { owner.A_SetInventory("TensionTrail", 0); } // Tension is "100" or higher
			}
			// Tension Aura Actor Control

			CallACS("MiscVarSetDECORATE",181,TensionLevel);
			CallACS("MiscVarSetDECORATE",182,TensionLevelLastTic);
			CallACS("MiscVarSetDECORATE",183,TensionTimer);
			CallACS("MiscVarSetDECORATE",184,TensionCountingDown);
			CallACS("MiscVarSetDECORATE",185,TensionWarmupTimer);
			CallACS("MiscVarSetDECORATE",186,TensionCooldownTimer);
			CallACS("MiscVarSetDECORATE",188,TensionMaxCooldownTimer);
			CallACS("MiscVarSetDECORATE",189,TensionChargeLoopTimer);
			CallACS("MiscVarSetDECORATE",190,TensionActivePulseTimer);
			CallACS("MiscVarSetDECORATE",246,TensionBackgroundAuraTimer);
			CallACS("MiscVarSetDECORATE",250,TensionOverPsycheTimer);
			CallACS("MiscVarSetDECORATE",251,TensionOverchargeTimer);
			CallACS("MiscVarSetDECORATE",261,TensionMaxOverchargeTimer);
			CallACS("MiscVarSetDECORATE",262,TensionMaxOverPsycheTimer);
		}
	}

	// Tension Aura
	void A_PSI1DoEffectTensionAuras()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		//*********************
		//*Check Tension Auras*
		//*********************
		double TensionAuraXScale;
		double TensionAuraYScale;
		double TensionAuraAlpha;
		int TensionAuraCheck;
		if (playeractor)
		{
			if (TensionLevel > 0)
			{
				double TensionAuraXScaleExtra = 1.0;
				double TensionAuraYScaleExtra = 1.0;
				if (ClassicDoomType == 5) // Doom 64
				{
					TensionAuraXScaleExtra = 1.1;
					TensionAuraYScaleExtra = 1.375;
				}
				
				if (TensionLevel == 1)
				{
					TensionAuraXScale = 0.5 * TensionAuraXScaleExtra;
					TensionAuraYScale = 0.75 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.20;
				}
				if (TensionLevel == 2)
				{
					TensionAuraXScale = 0.5555 * TensionAuraXScaleExtra;
					TensionAuraYScale = 0.8333 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.26;
				}
				if (TensionLevel == 3) 
				{
					TensionAuraXScale = 0.6111 * TensionAuraXScaleExtra;
					TensionAuraYScale = 0.9116 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.32;
				}
				if (TensionLevel == 4)
				{
					TensionAuraXScale = 0.6667 * TensionAuraXScaleExtra;
					TensionAuraYScale = 1.0 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.38;
				}
				if (TensionLevel == 5) 
				{
					TensionAuraXScale = 0.7222 * TensionAuraXScaleExtra;
					TensionAuraYScale = 1.0833 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.44;
				}
				if (TensionLevel == 6) 
				{
					TensionAuraXScale = 0.7777 * TensionAuraXScaleExtra;
					TensionAuraYScale = 1.1666 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.5;
				}
				if (TensionLevel == 7) 
				{
					TensionAuraXScale = 0.8333 * TensionAuraXScaleExtra;
					TensionAuraYScale = 1.25 * TensionAuraYScaleExtra;
					TensionAuraAlpha = 0.56;
				}
				if (InvisibilityTimer > 0) TensionAuraAlpha *= 0.10;

				TensionAuraCheck = 0;
				ThinkerIterator Test1 = ThinkerIterator.Create("TensionAuraLightPlayer"); Actor mo; while (mo = Actor(Test1.Next())) { TensionAuraCheck++; }
				if (TensionAuraCheck < 1) 
				{
					A_SpawnItemEx("TensionAuraLightPlayer",owner.pos.x,owner.pos.y,owner.pos.z,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraLightPlayer Spawned");
				}
				if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraCheck (TensionAuraLightPlayer): %d", TensionAuraCheck);
				
				// Misc Rescaling
				if (dvds_tensionauratype == 0) // Classic Tension Aura Sprites
				{
					TensionAuraXScale *= 1.0;
					TensionAuraYScale *= 1.0;
				}
				if (dvds_tensionauratype == 1) // Updated Tension Aura Sprites
				{
					TensionAuraXScale *= 0.575;
					TensionAuraYScale *= 0.425;
				}
				
				if (CharacterClass == 0) { TensionAuraXScale *= 1.12;	TensionAuraYScale *= 1.23; }
				if (CharacterClass == 1) { TensionAuraXScale *= 1.04;	TensionAuraYScale *= 1.08; }
				if (CharacterClass == 2) { TensionAuraXScale *= 1.0;	TensionAuraYScale *= 1.0; }
				if (CharacterClass == 8) { TensionAuraXScale *= 0.98;	TensionAuraYScale *= 0.98; }
				if (CharacterClass == 9) { TensionAuraXScale *= 0.96;	TensionAuraYScale *= 0.96; }
				
				TensionAuraCheck = 0;
				Test1 = ThinkerIterator.Create("TensionAuraLooper"); while (mo = Actor(Test1.Next())) { TensionAuraCheck++; }
				if (TensionAuraCheck < 1) 
				{
					if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraLooper Spawned");
					A_SpawnItemEx("TensionAuraLooper",owner.pos.x,owner.pos.y,owner.pos.z,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
				}

				if (dvdsdebug_showtensioninformation) Console.Printf("Tension Aura (Level: %d): ScaleX %8f, ScaleY: %8f, Alpha: %8f", TensionLevel, TensionAuraXScale, TensionAuraYScale, TensionAuraAlpha);
				Test1 = ThinkerIterator.Create("TensionAuraLooper");  
				if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraCheck (TensionAuraLooper): %d", TensionAuraCheck);
				while (mo = Actor(Test1.Next())) 
				{
					mo.Alpha = TensionAuraAlpha; 
					mo.Scale.x = TensionAuraXScale; 
					mo.Scale.y = TensionAuraYScale; 
				}
			}
			else
			{
				ThinkerIterator Test1 = ThinkerIterator.Create("TensionAuraLooper"); Actor mo; while (mo = Actor(Test1.Next())) 
				{ 
					if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraLooper Destroyed");
					mo.Destroy(); 
				}
				Test1 = ThinkerIterator.Create("TensionAuraLightPlayer"); while (mo = Actor(Test1.Next())) 
				{ 
					if (dvdsdebug_showtensioninformation) Console.Printf("\cxTensionAuraLightPlayer Destroyed");
					mo.Destroy(); 
				}
			}
		}
	}

	// Sceptre EXP Tables
	void A_PSI1DoEffectSceptreEXPTables()
	{

		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor && CharacterClass == 2)
		{
			BaseSceptreEXP = 312;
			if (TrueGameSkill <= SKILL_VERY_EASY) BaseSceptreEXP = 240;
			if (TrueGameSkill == SKILL_EASY) BaseSceptreEXP = 288;
			if (TrueGameSkill == SKILL_NORMAL) BaseSceptreEXP = 312;
			if (TrueGameSkill == SKILL_HARD) BaseSceptreEXP = 336;
			if (TrueGameSkill == SKILL_VERY_HARD) BaseSceptreEXP = 384;
			if (TrueGameSkill == SKILL_EXTREME) BaseSceptreEXP = 408;
			if (TrueGameSkill == SKILL_HORRIBLE) BaseSceptreEXP = 432;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) BaseSceptreEXP = 456;
			if (TrueGameSkill >= SKILL_OMEGA) BaseSceptreEXP = 480;
			
			int SceptreLvl1Req = BaseSceptreEXP * 1;
			int SceptreLvl2Req = BaseSceptreEXP * 3;
			int SceptreLvl3Req = BaseSceptreEXP * 6;
			int SceptreLvl4Req = BaseSceptreEXP * 10;
			int SceptreLvl5Req = BaseSceptreEXP * 15;
			int SceptreLvl6Req = BaseSceptreEXP * 21;
			int SceptreLvl7Req = BaseSceptreEXP * 28;
			int SceptreLvl8Req = BaseSceptreEXP * 36;
			int SceptreLvl9Req = BaseSceptreEXP * 45;
			int SceptreLvl10Req = BaseSceptreEXP * 55;
			int SceptreLvl11Req = BaseSceptreEXP * 66;
			int SceptreLvl12Req = BaseSceptreEXP * 78;
			int SceptreLvl13Req = BaseSceptreEXP * 91;
			int SceptreLvl14Req = BaseSceptreEXP * 105;
			int SceptreLvl15Req = BaseSceptreEXP * 120;
			int SceptreLvl16Req = BaseSceptreEXP * 136;
			CallACS("MiscVarSetDECORATE",301,SceptreLvl1Req);
			CallACS("MiscVarSetDECORATE",302,SceptreLvl2Req);
			CallACS("MiscVarSetDECORATE",303,SceptreLvl3Req);
			CallACS("MiscVarSetDECORATE",304,SceptreLvl4Req);
			CallACS("MiscVarSetDECORATE",305,SceptreLvl5Req);
			CallACS("MiscVarSetDECORATE",306,SceptreLvl6Req);
			CallACS("MiscVarSetDECORATE",307,SceptreLvl7Req);
			CallACS("MiscVarSetDECORATE",308,SceptreLvl8Req);
			CallACS("MiscVarSetDECORATE",309,SceptreLvl9Req);
			CallACS("MiscVarSetDECORATE",310,SceptreLvl10Req);
			CallACS("MiscVarSetDECORATE",311,SceptreLvl11Req);
			CallACS("MiscVarSetDECORATE",312,SceptreLvl12Req);
			CallACS("MiscVarSetDECORATE",313,SceptreLvl13Req);
			CallACS("MiscVarSetDECORATE",314,SceptreLvl14Req);
			CallACS("MiscVarSetDECORATE",315,SceptreLvl15Req);
			CallACS("MiscVarSetDECORATE",316,SceptreLvl16Req);
			//Console.Printf("%d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d", BaseSceptreEXP, SceptreLvl1Req, SceptreLvl2Req, SceptreLvl3Req, SceptreLvl4Req, SceptreLvl5Req, SceptreLvl6Req, SceptreLvl7Req, SceptreLvl8Req, SceptreLvl9Req, SceptreLvl10Req, SceptreLvl11Req, SceptreLvl12Req, SceptreLvl13Req, SceptreLvl14Req, SceptreLvl15Req, SceptreLvl16Req);
			
			int SceptreActualLevel;
			SceptreLevelEXP = CallACS("OtherVarCheckDECORATE",10);
			if (SceptreLevelEXP >= CallACS("MiscVarCheckDECORATE",316)) SceptreActualLevel = 16;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",316)) SceptreActualLevel = 15;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",315)) SceptreActualLevel = 14;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",314)) SceptreActualLevel = 13;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",313)) SceptreActualLevel = 12;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",312)) SceptreActualLevel = 11;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",311)) SceptreActualLevel = 10;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",310)) SceptreActualLevel = 9;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",309)) SceptreActualLevel = 8;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",308)) SceptreActualLevel = 7;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",307)) SceptreActualLevel = 6;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",306)) SceptreActualLevel = 5;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",305)) SceptreActualLevel = 4;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",304)) SceptreActualLevel = 3;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",303)) SceptreActualLevel = 2;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",302)) SceptreActualLevel = 1;
			if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",301)) SceptreActualLevel = 0;
			//Console.Printf("%d", SceptreActualLevel);
			CallACS("OtherVarSetDECORATE",11,SceptreActualLevel); 

			// Check for Sceptre Abilities
			if (CharacterClass == 2 && PlayerLevel >= 8 && SceptreActualLevel >= 2) CallACS("MiscVarSetDECORATE",244,1); else CallACS("MiscVarSetDECORATE",244,0);
		}
	}

	// Buff/Powerup Timer Countdowns
	void A_PSI1DoEffectBuffTimerCountdown()
	{
		CharacterClass = CallACS("CheckCharacterClass");
		let playeractor = AetheriusPlayerPawn(owner);
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		int BaseTimerIncrement;
		if (playeractor)
		{
			// Light/Infared
			if (CallACS("GetBuffTimer",0) > 0)
			{
				owner.A_SetInventory("NightVisionSpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",0,3,1);
			}
			else
			{
				owner.A_SetInventory("NightVisionSpell",0);
			}
			
			// Invisibility
			if (CallACS("GetBuffTimer",1) > 0)
			{
				owner.A_SetInventory("InvisiblitySpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",1,3,1);
			}
			else
			{
				owner.A_SetInventory("InvisiblitySpell",0);
			}
			
			// Flight
			if (CallACS("GetBuffTimer",2) > 0)
			{
				owner.A_SetInventory("FlightSpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",2,3,1);
			}
			else
			{
				owner.A_SetInventory("FlightSpell",0);
			}
			
			// Stealth
			if (CallACS("GetBuffTimer",3) > 0)
			{
				owner.player.cheats |= CF_NOTARGET; // Turns On
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",3,3,1);
			}
			else
			{
				owner.player.cheats &= ~CF_NOTARGET; // Turns Off
			}
			
			// Invulnerability
			if (CallACS("GetBuffTimer",4) > 0)
			{
				owner.A_SetInventory("InvulnerabilitySpell",1);
				owner.A_SetInventory("IsInvulnerable",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",4,3,1);
			}
			else
			{
				owner.A_SetInventory("InvulnerabilitySpell",0);
				owner.A_SetInventory("IsInvulnerable",0);
			}
			
			// Time Stop
			int BeatTimer;
			int TickTimer;
			double BeatVol = 0.5;
			if (CallACS("GetBuffTimer",5) > 0)
			{
				if (PrevTimeFreezeTimer == 0)
				{
					owner.A_StopSound(CHAN_6);
					if (dvds_timefreezesound == 0) owner.A_PlaySound("TimeFreezeIn4",CHAN_6,0.875,0,ATTN_NONE); 
					else owner.A_PlaySound("TheWorldIn",CHAN_6,0.875,0,ATTN_NONE); 
				}
				owner.A_SetInventory("AetheriusTimeFreezer",1);
				if (UsingInGameMenu == 0)
				{
					CallACS("GetBuffTimer",5,3,1);
					TickTimer = CallACS("GetBuffTimer",5) % 35;
					if (TickTimer == 0 && PrevTimeFreezeTimer != 0)
					{
						owner.A_StopSound(CHAN_6); 
						owner.A_PlaySound("TimeStopTick",CHAN_6,frandom[statitem2](0.80,1.20),0,ATTN_NONE); 
					}
					if (dvds_timefreezesound == 0) 
					{
						if (CallACS("GetBuffTimer",5) >= 64 && CallACS("GetBuffTimer",5) <= 66) 
						{
							owner.A_StopSound(CHAN_7); 
							owner.A_PlaySound("TimeFreezeOut4",CHAN_7,0.875,0,ATTN_NONE); 
						}
						else
						{
							if (CallACS("GetBuffTimer",5) > 66)
							{
								BeatTimer = CallACS("GetBuffTimer",5) % 120;
								BeatVol = 0.5;
								if (CharacterClass == 2)
								{
									if (Owner.CountInv("NormalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 120; BeatVol = 0.5; }
									else if (Owner.CountInv("DecentHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 100; BeatVol = 0.625; }
									else if (Owner.CountInv("LowHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 80; BeatVol = 0.775; }
									else if (Owner.CountInv("CriticalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 60; BeatVol = 1.0; }
								}
								else
								{
									if (Owner.CountInv("NormalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 40; BeatVol = 0.5; }
									else if (Owner.CountInv("DecentHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 33; BeatVol = 0.625; }
									else if (Owner.CountInv("LowHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 27; BeatVol = 0.775; }
									else if (Owner.CountInv("CriticalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 20; BeatVol = 1.0; }
								}
								//Console.Printf("BeatTimer: %d", BeatTimer);
								if (BeatTimer == 0)
								{
									owner.A_StopSound(CHAN_7); 
									owner.A_PlaySound("TimeFreezeLoop4",CHAN_7,BeatVol,0,ATTN_NONE); 
								}
							}
						}
					}
					else
					{
						if (CallACS("GetBuffTimer",5) >= 48 && CallACS("GetBuffTimer",5) <= 50) 
						{
							owner.A_StopSound(CHAN_7); 
							owner.A_PlaySound("TheWorldOut",CHAN_7,0.875,0,ATTN_NONE); 
						}
						else
						{
							if (CallACS("GetBuffTimer",5) > 50)
							{
								BeatTimer = CallACS("GetBuffTimer",5) % 120;
								BeatVol = 0.5;
								if (CharacterClass == 2)
								{
									if (Owner.CountInv("NormalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 120; BeatVol = 0.5; }
									else if (Owner.CountInv("DecentHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 100; BeatVol = 0.625; }
									else if (Owner.CountInv("LowHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 80; BeatVol = 0.775; }
									else if (Owner.CountInv("CriticalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 60; BeatVol = 1.0; }
								}
								else
								{
									if (Owner.CountInv("NormalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 40; BeatVol = 0.5; }
									else if (Owner.CountInv("DecentHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 33; BeatVol = 0.625; }
									else if (Owner.CountInv("LowHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 27; BeatVol = 0.775; }
									else if (Owner.CountInv("CriticalHealth") > 0) { BeatTimer = CallACS("GetBuffTimer",5) % 20; BeatVol = 1.0; }
								}
								//Console.Printf("BeatTimer: %d", BeatTimer);
								if (BeatTimer == 0)
								{
									owner.A_StopSound(CHAN_7); 
									owner.A_PlaySound("TimeFreezeLoop4",CHAN_7,BeatVol,0,ATTN_NONE); 
								}
							}
						}
					}
				}
			}
			else
			{
				if (UsingInGameMenu == 0) owner.A_SetInventory("AetheriusTimeFreezer",0);
			}
			PrevTimeFreezeTimer = CallACS("GetBuffTimer",5);
			
			// Fear Aura Effects
			if (CallACS("GetBuffTimer",6) > 0)
			{
				owner.A_SetInventory("PowerFrightener",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",6,3,1);
			}
			else
			{
				owner.A_SetInventory("PowerFrightener",0);
			}
			
			// Divine Avatar Effects
			if (CallACS("GetBuffTimer",7) > 0)
			{
				owner.A_SetInventory("DivineAvatarDoubleFiringSpeed",1);
				owner.A_SetInventory("DivineAvatarHighJump",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",7,3,1);
			}
			else
			{
				owner.A_SetInventory("DivineAvatarDoubleFiringSpeed",0);
				owner.A_SetInventory("DivineAvatarHighJump",0);
			}
			
			// Speader Aura Lv. 1 Effects
			if (CallACS("GetBuffTimer",9) > 0)
			{
				CallACS("GetBuffTimer",8,1,0);
				owner.A_SetInventory("SpreaderAura1",0);
			}
			else
			{
				if (CallACS("GetBuffTimer",8) > 0)
				{
					owner.A_SetInventory("SpreaderAura1",1);
					if (UsingInGameMenu == 0) CallACS("GetBuffTimer",8,3,1);
				}
				else
				{
					owner.A_SetInventory("SpreaderAura1",0);
				}
			}
			
			// Speader Aura Lv. 2 Effects
			if (CallACS("GetBuffTimer",9) > 0)
			{
				owner.A_SetInventory("SpreaderAura2",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",9,3,1);
			}
			else
			{
				owner.A_SetInventory("SpreaderAura2",0);
			}
			
			// Oomph Effects
			if (CallACS("GetBuffTimer",10) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",10,3,1); }
			
			// Buff Effects
			if (CallACS("GetBuffTimer",11) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",11,3,1); }
			
			// Acceleratle Effects
			if (CallACS("GetBuffTimer",12) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",12,3,1); }
			
			// Blunt Effects
			if (CallACS("GetBuffTimer",13) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",13,3,BaseTimerIncrement);
			}
			
			// Sap Effects
			if (CallACS("GetBuffTimer",14) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",14,3,BaseTimerIncrement);
			}
			
			// Deceleratle Effects
			if (CallACS("GetBuffTimer",15) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",15,3,BaseTimerIncrement);
			}
			
			// Poison Effects
			if (CallACS("GetBuffTimer",16) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",16,3,BaseTimerIncrement);
			}
			
			// Corrosion Effects
			if (CallACS("GetBuffTimer",17) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",17,3,BaseTimerIncrement);
			}
			
			// Fatigue Effects
			if (CallACS("GetBuffTimer",18) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",18,3,BaseTimerIncrement);
			}
			
			// Blind Effects
			if (CallACS("GetBuffTimer",19) > 0)
			{
				CallACS("MiscVarSetDECORATE",248,1,1);
				if (CallACS("MiscVarCheckDECORATE",248) == 1)
				{
					owner.A_PlaySound("misc/blinded",CHAN_5,1.0,0,ATTN_NORM);
					if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraGotBlinded",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",19,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",248,0,0);
			}
			
			// Sleep Effects
			if (CallACS("GetBuffTimer",20) > 0)
			{
				CallACS("MiscVarSetDECORATE",249,1,1);
				if (CallACS("MiscVarCheckDECORATE",249) == 1)
				{
					owner.A_PlaySound("DraQue/fallasleep",CHAN_5,1.0,0,ATTN_NORM);
					if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraFallAsleep",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",20,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",249,0,0);
			}
			
			
			// Silence Effects
			if (CallACS("GetBuffTimer",21) > 0)
			{
				CallACS("MiscVarSetDECORATE",270,1,1);
				if (CallACS("MiscVarCheckDECORATE",270) == 1)
				{
					owner.A_PlaySound("DraQue/sealed",CHAN_5,1.0,0,ATTN_NORM);
					// if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraSpSealed",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random[statitem](1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random[statitem](1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",21,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",270,0,0);
			}
			
			// RadSphere Effects
			if (CallACS("GetBuffTimer",22) > 0)
			{
				if (ClassicDoomType == 4) owner.A_SetInventory("AetheriusPowerMask",1); else owner.A_SetInventory("PowerIronFeet",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",22,3,1);
			}
			else
			{
				if (ClassicDoomType == 4) owner.A_SetInventory("AetheriusPowerMask",0); else owner.A_SetInventory("PowerIronFeet",0);
			}
			
			// Berserk Effects
			if (CallACS("GetBuffTimer",23) > 0)
			{
				owner.A_SetInventory("AetheriusPowerStrength", 1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",23,3,1);
			}
			else
			{
				owner.A_SetInventory("AetheriusPowerStrength",0);
			}
			
			// Regen Effects
			if (CallACS("GetBuffTimer",24) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",24,3,1); }
			
			// Arcana Force Effects
			if (CallACS("GetBuffTimer",25) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",25,3,1); }
			
			// Desperado Damsel Effects
			if (CallACS("GetBuffTimer",26) > 0) 
			{ 
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",25,3,1); 
				nm = "PowerHitscanBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 1);
				nm = "PowerChristinaBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 1);
				nm = "PowerAccuracyBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 1);
			}
			else
			{
				nm = "PowerHitscanBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 0);
				nm = "PowerChristinaBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 0);
				nm = "PowerAccuracyBoost"; APPackCheck = nm; owner.A_SetInventory(APPackCheck, 0);
			}
			
			// GoE?? Effects
			if (CallACS("GetBuffTimer",129) > 0) 
			{
				// (GoE is intended as a "permenant buff" once activated. To disable this and make it time elasped, uncomment the line below)
				// if (UsingInGameMenu == 0) CallACS("GetBuffTimer",129,3,1); 
			}
		}
	}
	
	// EXP Tables
	void A_PSI1DoEffectEXPTables()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor && InitEXPTables == 0)
		{
			double ExpValue;
			int BaseEXPRequirement = dvds_baseexprequirement; // Default for Skill 4
			if (BaseEXPRequirement < 250) BaseEXPRequirement = 250;
			if (BaseEXPRequirement > 11200) BaseEXPRequirement = 11200;
			if (TrueGameSkill <= SKILL_VERY_EASY) BaseEXPRequirement *= 0.7;
			if (TrueGameSkill == SKILL_EASY) BaseEXPRequirement *= 0.8;
			if (TrueGameSkill == SKILL_NORMAL) BaseEXPRequirement *= 0.9;
			if (TrueGameSkill == SKILL_HARD) BaseEXPRequirement *= 1.0;
			if (TrueGameSkill == SKILL_VERY_HARD) BaseEXPRequirement *= 1.2;
			if (TrueGameSkill == SKILL_EXTREME) BaseEXPRequirement *= 1.3;
			if (TrueGameSkill == SKILL_HORRIBLE) BaseEXPRequirement *= 1.4;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) BaseEXPRequirement *= 1.5;
			if (TrueGameSkill >= SKILL_OMEGA) BaseEXPRequirement *= 1.6;

			double BaseExtra = dvds_baseexpextra;
			if (BaseExtra < 0) BaseExtra = 0;
			if (BaseExtra > 100) BaseExtra = 100;
			double BaseAccel1 = dvds_baseexpaccel1;
			if (BaseAccel1 < 0) BaseAccel1 = 0;
			if (BaseAccel1 > 100) BaseAccel1 = 100;
			double BaseAccel2 = dvds_baseexpaccel2;
			if (BaseAccel2 < 0) BaseAccel2 = 0;
			if (BaseAccel2 > 25000) BaseAccel2 = 25000;
			double BaseMulti1 = dvds_expmulti1;
			if (BaseMulti1 < 1) BaseMulti1 = 1;
			if (BaseMulti1 > 1024) BaseMulti1 = 1024;
			double BaseMulti2 = dvds_expmulti2;
			if (BaseMulti2 < 1) BaseMulti2 = 1;
			if (BaseMulti2 > 10000) BaseMulti2 = 10000;
			double Accel2Div = dvds_accel2div;
			if (Accel2Div < 1) Accel2Div = 1;
			if (Accel2Div > 10000) Accel2Div = 10000;
			// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
			for (int CuLv = 0; CuLv < 201; CuLv++)
			{
				ExpValue = (BaseEXPRequirement * ((CuLv * BaseExtra) + 1));
				ExpValue *= ((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2;
				ExpValue += (BaseEXPRequirement * (CuLv * BaseAccel2) / Accel2Div);
				if (dvdsdebug_initdisplays) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d\c-", CuLv, ExpValue);
				CallACS("ExpTableSetDECORATE",CuLv,ExpValue);
			}
			if (dvdsdebug_initdisplays) Console.Printf("BaseEXPRequirement: %3f, BaseExtra: %3f / 100, BaseAccel1: %3f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000, Accel2Div: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2, Accel2Div);
			CallACS("ExpTableSetDECORATE",201,2147483647);
			InitEXPTables++;
		}
	}

	// Level Up Code
	void A_PSI1DoEffectLevelUp()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		int LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLvl = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10004);
		int ClearMindPerkLvl = CallACS("MiscVarCheckDECORATE",10055);
		int ClearMindEXPerkLvl = CallACS("MiscVarCheckDECORATE",10056);
		int StrifeStamLvl = CallACS("MiscVarCheckDECORATE",317);
		//*******************
		//** LEVEL UP CODE **
		//*******************
		PlayerLevel = CallACS("StatCheck",0);
		if (playeractor)
		{
			double RandomizedStatChance, RandomizedStatChance2;
			int Experience = CallACS("OtherVarCheckDECORATE",12);
			int LevelCap = CallACS("OtherVarCheckDECORATE",13);
			int levelmodulo, levelbonustype;
			int leveluptimes = 0;
			int leveluptimesmax = LevelCap - PlayerLevel;
			int tempaeonpointincrease;
			
			for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
			{
				//Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
				CallACS("MiscVarSetDECORATE",48,(CallACS("ExpTableCheckDECORATE",PlayerLevel)-Experience));
				if (Experience >= CallACS("ExpTableCheckDECORATE",PlayerLevel))
				{
					tempaeonpointincrease = 0;
					if (PlayerLevel < LevelCap)
					{
						CallACS("OtherVarSetDECORATE",14,1,1); // PlayerLevel += 1;
						PlayerLevel = CallACS("StatCheck",0);

						CallACS("MiscVarSetDECORATE",171,105); // Turns on the "Level Up!!" and "Stat Up" indicators for 3 seconds on the HUD upon level up.
						CallACS("MiscVarSetDECORATE",204,CallACS("MiscVarCheckDECORATE",25)); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,CallACS("MiscVarCheckDECORATE",31)); // total Agility Points gained
						CallACS("MiscVarSetDECORATE",206,CallACS("MiscVarCheckDECORATE",32)); // total Defense Points gained
						CallACS("MiscVarSetDECORATE",207,CallACS("MiscVarCheckDECORATE",33)); // total Deftness Points gained
						CallACS("MiscVarSetDECORATE",208,CallACS("MiscVarCheckDECORATE",34)); // total Sorcery Points gained
						CallACS("MiscVarSetDECORATE",209,CallACS("MiscVarCheckDECORATE",35)); // total Strength Points gained
						CallACS("MiscVarSetDECORATE",210,CallACS("MiscVarCheckDECORATE",36)); // total Therapeusis Points gained
						if (dvdsdebug_levelupdisplays)
						{
							Console.Printf("1 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}

						levelmodulo = PlayerLevel % 20;
						if (levelmodulo == 0) levelbonustype = 0;
						else if (levelmodulo == 4) levelbonustype = 1;
						else if (levelmodulo == 8) levelbonustype = 1;
						else if (levelmodulo == 12) levelbonustype = 1;
						else if (levelmodulo == 16) levelbonustype = 1;
						else levelbonustype = 2;
						if (dvdsdebug_levelupdisplays) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);

						//*********************
						//*Aeon Point Increase*
						//*********************
						if (PlayerLevel != 0)
						{
							int baseaeonchance1 = 65 + (ClearMindPerkLvl * 0.65) + (ClearMindEXPerkLvl * (0.65 * 2.5));
							int baseaeonchance2 = 25 + (ClearMindPerkLvl * 0.25) + (ClearMindEXPerkLvl * (0.25 * 2.5));
							int baseaeonchance3 = 20 + (ClearMindPerkLvl * 0.2) + (ClearMindEXPerkLvl * (0.2 * 2.5));
							int baseaeonchance4 = 0;
							if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200 [really big Aeon Point gains]
							{
								baseaeonchance1 = 65 + (ClearMindPerkLvl * 0.65) + (ClearMindEXPerkLvl * (0.65 * 2.5));
								baseaeonchance2 = 25 + (ClearMindPerkLvl * 0.25) + (ClearMindEXPerkLvl * (0.25 * 2.5));
								baseaeonchance3 = 20 + (ClearMindPerkLvl * 0.2) + (ClearMindEXPerkLvl * (0.2 * 2.5));
								if (PlayerLevel > 100)
								{
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) tempaeonpointincrease += 6; else tempaeonpointincrease += 4;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += random[statitem](2,4);
								}
								else
								{
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) tempaeonpointincrease += 5; else tempaeonpointincrease += 3;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += random[statitem](1,3);
								}
							}
							else
							if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
							{
								baseaeonchance1 = 65 + (ClearMindPerkLvl * 0.65) + (ClearMindEXPerkLvl * (0.65 * 2.5));
								baseaeonchance2 = 15 + (ClearMindPerkLvl * 0.15) + (ClearMindEXPerkLvl * (0.15 * 2.5));
								baseaeonchance3 = 10 + (ClearMindPerkLvl * 0.1) + (ClearMindEXPerkLvl * (0.1 * 2.5));
								if (PlayerLevel > 100)
								{
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) tempaeonpointincrease += 3; else tempaeonpointincrease += 2;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += random[statitem](1,2);
								}
								else
								{
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) tempaeonpointincrease += 2; else tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += random[statitem](0,1);
								}
							}
							else
							if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20 [minor Aeon Point gains]
							{
								baseaeonchance1 = 65 + (ClearMindPerkLvl * 0.65) + (ClearMindEXPerkLvl * (0.65 * 2.5));
								baseaeonchance2 = 60 + (ClearMindPerkLvl * 0.6) + (ClearMindEXPerkLvl * (0.6 * 2.5));
								baseaeonchance3 = 15 + (ClearMindPerkLvl * 0.15) + (ClearMindEXPerkLvl * (0.15 * 2.5));
								if (PlayerLevel > 100)
								{
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) // 60% chance of +2/3 Aeon Points per level
									{
										if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += 3; else tempaeonpointincrease += 2;
									}
								}
								else
								{
									baseaeonchance2 /= 2;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (frandom[statitem2](0.01,100.0) <= baseaeonchance2) // 30% chance of +1/2 Aeon Points per level
									{
										if (frandom[statitem2](0.01,100.0) <= baseaeonchance3) tempaeonpointincrease += 2; else tempaeonpointincrease += 1;
									}
								}
							}
						}
						
						double extrachance = 25 + (ClearMindPerkLvl * 0.25) + (ClearMindEXPerkLvl * (0.25 * 2.5));
						// Extra AeonPts for "Perk Mode"
						if (dvdsperks_active)
						{
							if (random[statitem](1,100) <= 96) 
							{
								tempaeonpointincrease += 1; 
								extrachance = 25 + (ClearMindPerkLvl * 0.25) + (ClearMindEXPerkLvl * (0.25 * 2.5));
							}
							else
							{
								tempaeonpointincrease += 2;
								extrachance = 50 + (ClearMindPerkLvl * 0.5) + (ClearMindEXPerkLvl * (0.5 * 2.5)); 
							}
							if (PlayerLevel >= 25 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 50 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 75 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 100 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 125 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 150 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 175 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 200 && frandom[statitem2](0.01,100.0) <= extrachance) tempaeonpointincrease += 1;
						}
						if (CallACS("MiscVarCheckDECORATE",11001) == 1) tempaeonpointincrease = tempaeonpointincrease * 5 / 4;  // "Higher Learning" Grand Mastery Perk
						if (CallACS("MiscVarCheckDECORATE",11001) == 2) tempaeonpointincrease = tempaeonpointincrease * 3 / 2;  // "Higher Learning" Grand Mastery Perk [Level 2]
			
						if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0) tempaeonpointincrease += random[statitem](1,2); // If playing "Unloved"
						if (CallACS("DVDSSpecialArrayCheckDECORATE",4) > 0) tempaeonpointincrease += random[statitem](1,3); // If playing "TCOTD:A"
						if (CallACS("DVDSSpecialArrayCheckDECORATE",5) > 0) tempaeonpointincrease += random[statitem](2,3); // If playing "Circus2"
						tempaeonpointincrease *= CallACS("MiscVarCheckDECORATE",86);
						CallACS("MiscVarSetDECORATE",25,tempaeonpointincrease,1);
						
						// Increase Stats
						// 16:25 (1-100) [64] + 20:25 (101-200) [80] = [Max of 144 (or -75%)]
						RandomizedStatChance = 1.00000000; // 192;
						if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
						{
							RandomizedStatChance -= (0.1 * random[statitem](4,8)); // 112 to 152
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.001041667);
						}
						else
						if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
						{
							RandomizedStatChance -= (0.020833334 * random[statitem](4,8)); // 160 to 176
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.000744048);
						}
						else
						if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20
						{
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.000651042);
						}

						double RNDSCSubtractor1 = 0;
						double RNDSCSubtractor2 = 0;
						RNDSCSubtractor1 = (PlayerLevel * 0.32);
						if (RNDSCSubtractor1 < 0.00000) RNDSCSubtractor1 = 0.00000; 
						if (RNDSCSubtractor1 > 0.33334) RNDSCSubtractor1 = 0.33334;
						if (PlayerLevel > 100)
						{
							RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
							if (RNDSCSubtractor2 < 0.00000) RNDSCSubtractor2 = 0.00000; 
							if (RNDSCSubtractor2 > 0.33334) RNDSCSubtractor2 = 0.33334;
						}
						if (dvdsdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor1\c-: %8f, \cxRNDSCSubtractor2\c-: %8f", RNDSCSubtractor1, RNDSCSubtractor2);
			
						double RNDSCSubtractor = 0;
						RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
						RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
						RandomizedStatChance -= RNDSCSubtractor;
						if (owner.CountInv("TheOneRing") > 0) RandomizedStatChance *= 0.75;
						RandomizedStatChance *= (1.0000 - (ClearMindPerkLvl * 0.0250) - (ClearMindEXPerkLvl * (0.0250 * 2.5)));
						if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
						if (dvdsdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor\c-: %8f, \cxRandomizedStatChance\c-: %8f", RNDSCSubtractor, RandomizedStatChance);
			
						RandomizedStatChance2 = 1.00000000;
						if (PlayerLevel >= 25) RandomizedStatChance2 -= 0.041666667; // 23
						if (PlayerLevel >= 50) RandomizedStatChance2 -= 0.041666667; // 22
						if (PlayerLevel >= 75) RandomizedStatChance2 -= 0.041666667; // 21
						if (PlayerLevel >= 100) RandomizedStatChance2 -= 0.041666667; // 20
						if (PlayerLevel >= 125) RandomizedStatChance2 -= 0.083333334; // 18
						if (PlayerLevel >= 150) RandomizedStatChance2 -= 0.083333334; // 16
						if (PlayerLevel >= 175) RandomizedStatChance2 -= 0.083333334; // 14
						RandomizedStatChance2 *= (1.0000 - (ClearMindPerkLvl * 0.01250) - (ClearMindEXPerkLvl * (0.01250 * 2.5)));
						if (dvdsdebug_levelupdisplays) Console.Printf("\cyStat Chance 1\c-: %8f, \cxStat Chance 2\c-: %8f", RandomizedStatChance, RandomizedStatChance2);

						//********************************
						//*Random Levelups to Stat Values*
						//********************************
						int SeedIncreaseAmt;
						int LvlSkillMulti;
						double RollValue;
						if (CharacterClass == 0) // Deggaris (192pts) (0 left)
						{
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [12.5%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.025) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [2.60%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [21.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [4.16%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.12%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.12%] 
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [18.36%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [3.12%] 
						}
						if (CharacterClass == 1) // Illucia (192pts) (0 left)
						{
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.12%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [3.12%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.12%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [18.36%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.010416667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [12.5%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.002083333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.60%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
						if (CharacterClass == 2) // Flora (192pts) (0 left)
						{
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.192708333) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [19.27%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.038541667) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.083333333) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [8.33%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.016666667) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [1.56%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.171875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [17.2%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.034375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.234375) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [23.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.046875) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [4.68%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.119791667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [11.9%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.023958333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.6%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.197916667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [19.79%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.039583333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
		
						if (CharacterClass == 8) // Ailish (192pts) (0 left)
						{
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [18.75%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.067708333) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [6.77%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.013541667) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [1.04%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [18.75%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [4.16%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.239583333) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [23.95%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.047916667) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [4.68%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.104166667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [10.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.020833333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.08%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.213541667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.35%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.042708333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
						if (CharacterClass == 9) // Petra (192pts) (0 left)
						{
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [15.625%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.12%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [21.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [4.16%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.171875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [17.2%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.034375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.177083333) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [18.36%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.035416667) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.64%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.119791667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [11.9%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.023958333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.6%]
				
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.197916667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.4%]
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
							if (RollValue <= 0.039583333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
					
						if (CallACS("MiscVarCheckDECORATE",31) > 512) CallACS("MiscVarSetDECORATE",31,512);
						if (CallACS("MiscVarCheckDECORATE",32) > 512) CallACS("MiscVarSetDECORATE",32,512);
						if (CallACS("MiscVarCheckDECORATE",33) > 512) CallACS("MiscVarSetDECORATE",33,512);
						if (CallACS("MiscVarCheckDECORATE",34) > 512) CallACS("MiscVarSetDECORATE",34,512);
						if (CallACS("MiscVarCheckDECORATE",35) > 512) CallACS("MiscVarSetDECORATE",35,512);
						if (CallACS("MiscVarCheckDECORATE",36) > 512) CallACS("MiscVarSetDECORATE",36,512);
			
						CallACS("MiscVarSetDECORATE",204,CallACS("MiscVarCheckDECORATE",25),2); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,CallACS("MiscVarCheckDECORATE",31),2); // total Agility Points gained
						CallACS("MiscVarSetDECORATE",206,CallACS("MiscVarCheckDECORATE",32),2); // total Defense Points gained
						CallACS("MiscVarSetDECORATE",207,CallACS("MiscVarCheckDECORATE",33),2); // total Deftness Points gained
						CallACS("MiscVarSetDECORATE",208,CallACS("MiscVarCheckDECORATE",34),2); // total Sorcery Points gained
						CallACS("MiscVarSetDECORATE",209,CallACS("MiscVarCheckDECORATE",35),2); // total Strength Points gained
						CallACS("MiscVarSetDECORATE",210,CallACS("MiscVarCheckDECORATE",36),2); // total Therapeusis Points gained
						if (dvdsdebug_levelupdisplays)
						{
							Console.Printf("2 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}
						CallACS("MiscVarSetDECORATE",204,-1,3); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,-1,3);
						CallACS("MiscVarSetDECORATE",206,-1,3);
						CallACS("MiscVarSetDECORATE",207,-1,3);
						CallACS("MiscVarSetDECORATE",208,-1,3);
						CallACS("MiscVarSetDECORATE",209,-1,3);
						CallACS("MiscVarSetDECORATE",210,-1,3);
						
						if (dvdsdebug_levelupdisplays)
						{
							Console.Printf("3 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}
						
						//***************
						//*Mana Increase*
						//***************
						int CurrentMana = CallACS("StatCheck",14);
						int MaxMana = CallACS("StatCheck",2);
						int LevelAddMaxMana = 0;
						int MPMaxGain;
						if (TrueGameSkill <= SKILL_VERY_EASY)
						{
							LevelAddMaxMana = random[statitem](5,10);
							MPMaxGain = MaxMana / 96;
						}
						else if (TrueGameSkill == SKILL_EASY)
						{
							LevelAddMaxMana = random[statitem](4,8);
							MPMaxGain = MaxMana / 120;
						}
						else if (TrueGameSkill == SKILL_NORMAL)
						{
							LevelAddMaxMana = random[statitem](3,6);
							MPMaxGain = MaxMana / 144;
						}
						else if (TrueGameSkill == SKILL_HARD)
						{
							LevelAddMaxMana = random[statitem](2,4);
							MPMaxGain = MaxMana / 168;
						}
						else if (TrueGameSkill == SKILL_VERY_HARD)
						{
							LevelAddMaxMana = random[statitem](1,2);
							MPMaxGain = MaxMana / 192;
						}
						else if (TrueGameSkill == SKILL_EXTREME)
						{
							LevelAddMaxMana = random[statitem](1,2);
							MPMaxGain = MaxMana / 204;
						}
						else if (TrueGameSkill == SKILL_HORRIBLE)
						{
							LevelAddMaxMana = random[statitem](1,2);
							MPMaxGain = MaxMana / 216;
						}
						else if (TrueGameSkill == SKILL_IMPOSSIBLE)
						{
							LevelAddMaxMana = 1;
							MPMaxGain = MaxMana / 228;
						}
						else if (TrueGameSkill >= SKILL_OMEGA)
						{
							LevelAddMaxMana = 1;
							MPMaxGain = MaxMana / 240;
						}
			
						PerkFactor = ((MagiUpPerkLvl * 500) + (MagiUpExPerkLvl * 1250)) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
			
						PerkFactor = (StrifeStamLvl * 1250) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			
						PerkFactor = ((MagiUpPerkLvl / 2) + (MagiUpExPerkLvl));
						PerkFactor += (StrifeStamLvl * 3) / 8;
						if (MPMaxGain < PerkFactor) MPMaxGain = PerkFactor;
						LevelAddMaxMana += MPMaxGain;
			
						MPMaxGain = random[statitem](6,9); // +7-19 + Level base
						PerkFactor = ((MagiUpPerkLvl * 500) + (MagiUpExPerkLvl * 1250)) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
			
						PerkFactor = (StrifeStamLvl * 1250) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			
						LevelAddMaxMana += MPMaxGain;
		
						int DftTheMulti;
						if (CharacterClass == 0) DftTheMulti = random[statitem](36,42); // Deggaris [MP Gain / Level] [75%-87.5%]
						if (CharacterClass == 1) DftTheMulti = random[statitem](54,60); // Illucia [MP Gain / Level] [112.5%-125%]
						if (CharacterClass == 2) DftTheMulti = random[statitem](66,84); // Flora [MP Gain / Level] [137.5%-175%]
						if (CharacterClass == 8) DftTheMulti = random[statitem](60,78); // Ailish [MP Gain / Level]
						if (CharacterClass == 9) DftTheMulti = random[statitem](49,55); // Petra [MP Gain / Level]
			
						DftTheMulti += ((CallACS("MiscVarCheckDECORATE",36) + CallACS("MiscVarCheckDECORATE",33)) / 48); // Add [(Therapesius+Deftness / 48)]
						LevelAddMaxMana = LevelAddMaxMana * DftTheMulti / 48;
			
						// Overall Modifier
						LevelAddMaxMana = LevelAddMaxMana * 75 / 100;
			
						if (LevelAddMaxMana < 1) LevelAddMaxMana = 1;
						if (LevelAddMaxMana == 1)
						{
							if (CharacterClass == 0 && random[statitem](1,100) <= 10) LevelAddMaxMana += 1;
							if (CharacterClass == 1 && random[statitem](1,100) <= 20) LevelAddMaxMana += 1;
							if (CharacterClass == 2 && random[statitem](1,100) <= 35) LevelAddMaxMana += 1;
							if (CharacterClass == 8 && random[statitem](1,100) <= 35) LevelAddMaxMana += 1;
							if (CharacterClass == 9 && random[statitem](1,100) <= 10) LevelAddMaxMana += 1;
						}
		
						LevelAddMaxMana *= CallACS("MiscVarCheckDECORATE",146);
						MaxMana += LevelAddMaxMana;
						CurrentMana += LevelAddMaxMana;
						CallACS("OtherVarSetDECORATE",1,MaxMana); // Sets MaxMana in ACS
						CallACS("OtherVarSetDECORATE",2,CurrentMana); // Sets CurrentMana in ACS
						CallACS("MiscVarSetDECORATE",243,CurrentMana); // Sets "LastManaValue" in ACS
						CallACS("MiscVarSetDECORATE",238,CurrentMana); // Sets "NewManaValue" in ACS
						
						
						//*************
						//*HP Increase*
						//*************
						int CurrentHealth = owner.health;
						int MaxHealthTrue = CallACS("StatCheck",1);
						int LevelAddMaxHP = 0;
						int HPMaxGain;
						int HPRandomizer1;
						if (TrueGameSkill <= SKILL_VERY_EASY)
						{
							LevelAddMaxHP = random[statitem](2,4);
							HPMaxGain = MaxHealthTrue / 288;
						}
						if (TrueGameSkill == SKILL_EASY)
						{
							LevelAddMaxHP = random[statitem](1,3);
							HPMaxGain = MaxHealthTrue / 360;
						}
							if (TrueGameSkill == SKILL_NORMAL)
						{
							LevelAddMaxHP = random[statitem](0,2);
							HPMaxGain = MaxHealthTrue / 432;
						}
						if (TrueGameSkill == SKILL_HARD)
						{
							LevelAddMaxHP = random[statitem](-1,1);
							HPMaxGain = MaxHealthTrue / 504;
						}
						if (TrueGameSkill == SKILL_VERY_HARD)
						{
							LevelAddMaxHP = random[statitem](-2,0);
							HPMaxGain = MaxHealthTrue / 576;
						}
						if (TrueGameSkill == SKILL_EXTREME)
						{
							LevelAddMaxHP = random[statitem](-2,0);
							HPMaxGain = MaxHealthTrue / 648;
						}
						if (TrueGameSkill == SKILL_HORRIBLE)
						{
							LevelAddMaxHP = random[statitem](-3,-1);
							HPMaxGain = MaxHealthTrue / 720;
						}
						if (TrueGameSkill == SKILL_IMPOSSIBLE)
						{
							LevelAddMaxHP = random[statitem](-3,-1);
							HPMaxGain = MaxHealthTrue / 792;
						}
						if (TrueGameSkill >= SKILL_OMEGA)
						{
							LevelAddMaxHP = random[statitem](-4,-2);
							HPMaxGain = MaxHealthTrue / 864;
						}
			
						HPMaxGain += random[statitem](1,3);
						if (CharacterClass == 0) HPMaxGain += random[statitem](3,5); // + 6-12+ HP
						if (CharacterClass == 1) HPMaxGain += random[statitem](2,3); // + 5-10+ HP
						if (CharacterClass == 2) HPMaxGain += random[statitem](1,2); // + 4-9+ HP
						if (CharacterClass == 8) HPMaxGain += random[statitem](1,2); // + 3-8+ HP
						if (CharacterClass == 9) HPMaxGain += random[statitem](3,5); // + 6-12+ HP
			
						PerkFactor = ((LifeUpPerkLvl * 500) + (LifeUpExPerkLvl * 1250)) + 10000;
						HPMaxGain = HPMaxGain * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			
						PerkFactor = (StrifeStamLvl * 1250) + 10000;
						HPMaxGain = HPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			
						PerkFactor = ((LifeUpPerkLvl / 2) + (LifeUpExPerkLvl));
						PerkFactor += (StrifeStamLvl * 3) / 8;
						if (HPMaxGain < PerkFactor) HPMaxGain = PerkFactor;
						LevelAddMaxHP += HPMaxGain;
		
						if (TrueGameSkill <= SKILL_VERY_EASY)					LvlSkillMulti = PlayerLevel * 35 / 100;	// 35%
						else if (TrueGameSkill == SKILL_EASY)					LvlSkillMulti = PlayerLevel * 30 / 100;	// 30%
						else if (TrueGameSkill == SKILL_NORMAL)				LvlSkillMulti = PlayerLevel * 25 / 100;	// 25%
						else if (TrueGameSkill == SKILL_HARD)					LvlSkillMulti = PlayerLevel * 20 / 100;	// 20%
						else if (TrueGameSkill == SKILL_VERY_HARD)		LvlSkillMulti = PlayerLevel * 15 / 100;	// 15%
						else if (TrueGameSkill == SKILL_EXTREME)			LvlSkillMulti = PlayerLevel * 15 / 100;	// 15%
						else if (TrueGameSkill == SKILL_HORRIBLE)			LvlSkillMulti = PlayerLevel * 10 / 100;	// 10%
						else if (TrueGameSkill == SKILL_IMPOSSIBLE)		LvlSkillMulti = PlayerLevel * 10 / 100;	// 10%
						else if (TrueGameSkill >= SKILL_OMEGA)				LvlSkillMulti = PlayerLevel * 5 / 100;	// 5%
				
						if (PlayerLevel > 24 && PlayerLevel < 50)			LvlSkillMulti = LvlSkillMulti * 105 / 100; 		// *105%
						if (PlayerLevel > 49 && PlayerLevel < 75)			LvlSkillMulti = LvlSkillMulti * 110 / 100; 		// *110%
						if (PlayerLevel > 74 && PlayerLevel < 100)		LvlSkillMulti = LvlSkillMulti * 115 / 100; 		// *115%
						if (PlayerLevel > 99 && PlayerLevel < 125)		LvlSkillMulti = LvlSkillMulti * 121 / 100; 		// *121%
						if (PlayerLevel > 124 && PlayerLevel < 150)		LvlSkillMulti = LvlSkillMulti * 127 / 100; 		// *127%
						if (PlayerLevel > 149 && PlayerLevel < 175)		LvlSkillMulti = LvlSkillMulti * 133 / 100; 		// *133%
						if (PlayerLevel > 174)												LvlSkillMulti = LvlSkillMulti * 140 / 100; 		// *140%
			
						PerkFactor = ((LifeUpPerkLvl * 500) + (LifeUpExPerkLvl * 1250)) + 10000;
						LvlSkillMulti = LvlSkillMulti * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			
						PerkFactor = (StrifeStamLvl * 1250) + 10000;
						LvlSkillMulti = LvlSkillMulti * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			
						LevelAddMaxHP += LvlSkillMulti;
			
						int DefTheMulti;
						if (CharacterClass == 0) DefTheMulti = random[statitem](54,60); // Deggaris [HP Gain / Level] [112.5%-125%]
						if (CharacterClass == 1) DefTheMulti = random[statitem](36,42); // Illucia [HP Gain / Level] [75%-87.5%]
						if (CharacterClass == 2) DefTheMulti = random[statitem](27,33); // Flora [HP Gain / Level] [56.25%-68.75%]
						if (CharacterClass == 8) DefTheMulti = random[statitem](24,30); // Ailish [HP Gain / Level] [50.0%-62.5%]
						if (CharacterClass == 9) DefTheMulti = random[statitem](54,60); // Petra [HP Gain / Level] [112.5%-125%]. Same as Deggaris.
			
						DefTheMulti += ((CallACS("MiscVarCheckDECORATE",32) + CallACS("MiscVarCheckDECORATE",33)) / 48); // Add [(Defense+Deftness / 48)]
						LevelAddMaxHP = LevelAddMaxHP * DefTheMulti / 48;
			
						// Overall Modifier
						LevelAddMaxHP = LevelAddMaxHP * 75 / 100; // *75%+
			
						// Give The HP to the player
						if (LevelAddMaxHP < 1) LevelAddMaxHP = 1;
						if (LevelAddMaxHP == 1)
						{
							if (CharacterClass == 0 && random[statitem](1,100) <= 35) LevelAddMaxHP += 1;
							if (CharacterClass == 1 && random[statitem](1,100) <= 20) LevelAddMaxHP += 1;
							if (CharacterClass == 2 && random[statitem](1,100) <= 10) LevelAddMaxHP += 1;
							if (CharacterClass == 8 && random[statitem](1,100) <= 10) LevelAddMaxHP += 1;
							if (CharacterClass == 9 && random[statitem](1,100) <= 35) LevelAddMaxHP += 1;
						}
		
						LevelAddMaxHP *= CallACS("MiscVarCheckDECORATE",146);
						CurrentHealth += LevelAddMaxHP;
						owner.player.health = owner.player.mo.health = CurrentHealth;
						MaxHealthTrue += LevelAddMaxHP;
						CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						
						
						if (leveluptimes == 0)
						{
							if (CharacterClass == 9) owner.A_PlaySound("PetraLeveledUp",CHAN_6,1.25,false,ATTN_NONE); //Petra
							else if (CharacterClass == 8) owner.A_PlaySound("AilishLeveledUp",CHAN_6,1.25,false,ATTN_NONE); //Ailish
							else if (CharacterClass == 2) owner.A_PlaySound("FloraLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Flora
							else if (CharacterClass == 1) owner.A_PlaySound("IlluciaLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Illucia
							else if (CharacterClass == 0) owner.A_PlaySound("DeggarisLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Deggaris
							else owner.A_PlaySound("misc/spawn",CHAN_6,1.25,false,ATTN_NONE); 
							CallACS("MiscVarSetDECORATE",247,1);
						}
						
						// [222] # of TOTAL Max HP gained during multiple stat ups [for displays]
						// [223] # of TOTAL Max MP gained during multiple stat ups [for displays]
						// [224] # of TOTAL Aeon Points gained during multiple stat ups [for displays]
						// [225] # of TOTAL Agility Points gained during multiple stat ups [for displays]
						// [226] # of TOTAL Defense Points gained during multiple stat ups [for displays]
						// [227] # of TOTAL Deftness Points gained during multiple stat ups [for displays]
						// [228] # of TOTAL Sorcery Points gained during multiple stat ups [for displays]
						// [229] # of TOTAL Strength Points gained during multiple stat ups [for displays]
						// [230] # of TOTAL Therapeusis Points gained during multiple stat ups [for displays]
						CallACS("MiscVarSetDECORATE",222,LevelAddMaxHP,1);
						CallACS("MiscVarSetDECORATE",223,LevelAddMaxMana,1);
						CallACS("MiscVarSetDECORATE",224,CallACS("MiscVarCheckDECORATE",204),1);
						CallACS("MiscVarSetDECORATE",225,CallACS("MiscVarCheckDECORATE",205),1);
						CallACS("MiscVarSetDECORATE",226,CallACS("MiscVarCheckDECORATE",206),1);
						CallACS("MiscVarSetDECORATE",227,CallACS("MiscVarCheckDECORATE",207),1);
						CallACS("MiscVarSetDECORATE",228,CallACS("MiscVarCheckDECORATE",208),1);
						CallACS("MiscVarSetDECORATE",229,CallACS("MiscVarCheckDECORATE",209),1);
						CallACS("MiscVarSetDECORATE",230,CallACS("MiscVarCheckDECORATE",210),1);
						if (CallACS("MiscVarCheckDECORATE",222) > 0) CallACS("MiscVarSetDECORATE",2031,105);
						if (CallACS("MiscVarCheckDECORATE",223) > 0) CallACS("MiscVarSetDECORATE",2032,105);
						if (CallACS("MiscVarCheckDECORATE",224) > 0) CallACS("MiscVarSetDECORATE",2033,105);
						if (CallACS("MiscVarCheckDECORATE",225) > 0) CallACS("MiscVarSetDECORATE",2034,105);
						if (CallACS("MiscVarCheckDECORATE",226) > 0) CallACS("MiscVarSetDECORATE",2035,105);
						if (CallACS("MiscVarCheckDECORATE",227) > 0) CallACS("MiscVarSetDECORATE",2036,105);
						if (CallACS("MiscVarCheckDECORATE",228) > 0) CallACS("MiscVarSetDECORATE",2037,105);
						if (CallACS("MiscVarCheckDECORATE",229) > 0) CallACS("MiscVarSetDECORATE",2038,105);
						if (CallACS("MiscVarCheckDECORATE",230) > 0) CallACS("MiscVarSetDECORATE",2039,105);
						
						string LearnedSpells = "";
						if (PlayerLevel <= 32) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";
						if (CharacterClass == 2 && PlayerLevel == 56) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";
			
						string AeonPtUse = "";
						if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197)) AeonPtUse = "\c[White]Remember to allocate any Aeon Points you've attained!\cf\n\n";
			
						string SpinAttack = "";
						if (CharacterClass == 2 && PlayerLevel == 8) SpinAttack = "\caThe Sceptre Will Now Have an Alternate\n\caAttack if Sceptre Level is above 2!\cf";
						
						if (dvdsallhuds_showlevelups)
						{
							owner.A_Print(String.Format("\c[Green]Congradulations, you've reached Level %d\n\n\c[Brick]HP \c[Gold]+%d\n\c[Purple]Mana \c[Gold]+%d\n\c[White]AeonPts: \c[Gold]+%d\n\c[LightBlue]Agility: \c[Gold]+%d\n\c[Olive]Defense: \c[Gold]+%d\n\c[Green]Deftness: \c[Gold]+%d\n\c[Purple]Sorcery: \c[Gold]+%d\n\c[Red]Strength: \c[Gold]+%d\n\c[Gray]Therapeusis: \c[Gold]+%d\n\n%s%s%s", PlayerLevel, LevelAddMaxHP, LevelAddMaxMana,
													 CallACS("MiscVarChecKDECORATE",204), CallACS("MiscVarChecKDECORATE",205),
													 CallACS("MiscVarChecKDECORATE",206), CallACS("MiscVarChecKDECORATE",207),
													 CallACS("MiscVarChecKDECORATE",208), CallACS("MiscVarChecKDECORATE",209),
													 CallACS("MiscVarChecKDECORATE",210), LearnedSpells, AeonPtUse, SpinAttack), 2.25, "SMALLFONT");
						}
						owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
					}
				}
			}
			
			// Delays the levelup speech for a character
			if (CallACS("MiscVarCheckDECORATE",247) > 0)
			{
				LevelupSpeechTimer2++;
				if (dvdsdebug_levelupdisplays) Console.Printf("Level Up Dialouge Timer: %d / 105", LevelupSpeechTimer2);
				if (LevelupSpeechTimer2 >= 105)
				{
					if (random[statitem](1,100) <= dvds_levelspeechchance && PlayerCurrentHealth > 0)
					{
						if (CharacterClass == 2) 
						{
							owner.A_PlaySound("FloraLevelSpeech",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
					}
					CallACS("MiscVarSetDECORATE",247,0);
					LevelupSpeechTimer2 = 0;
				}
			}
		}
	}

	// Inventory/Ammo Limit Enforcement
	void A_PSI1DoEffectInvAmmoLimits()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		
		//*********************************************************************
		//***Determines Inventory Amounts Based on Strength Seeds and Level***
		//*********************************************************************
		int debuginventorylimits = dvdsdebug_inventorylimits;
		if (playeractor)
		{
			int dropamt;
			string itemname;
			// Gets the Number of Collected Backpacks which is the backbone of the system.
			int BackPacksCollected = CallACS("MiscVarCheckDECORATE",80);
			int backpackdivisor = TrueGameSkill + 6;
			int backpackmultiplier = backpackdivisor + BackPacksCollected;
			double baselimitmulti = dvds_inventorybaselimitratio;
			double itemcalcmulti = dvds_inventorylimitcalcratio;
			double itemlimitmulti = dvds_inventorylimittotalratio;
			double hexenmodemulti = dvds_inventoryhexenmultiratio;
			int baseholdamount;
			double leveladd;
			double stradd;
			int itemsmax;
			if (hexenmodemulti <= 1.0) hexenmodemulti = 1.0;
			double perkmultiplier = 1.0 + ((CallACS("MiscVarCheckDECORATE",10005) * 0.025) + (CallACS("MiscVarCheckDECORATE",10006) * 0.0625)); // StamUp
			double perkmultiplier2 = 1.0 + (CallACS("MiscVarCheckDECORATE",317) * 0.05); // Strife's Stamina Upgrades
			double perkmultiplier3 = 1.0 + ((CallACS("MiscVarCheckDECORATE",10059) * 0.10) + (CallACS("MiscVarCheckDECORATE",10060) * 0.25)); // Pack Mule
			let currentitemtype = owner.FindInventory("MedicinalHerb");
			int itemid;

			if (dvds_imposeinventorylimits)
			{
				// Medicinal Herbs [5.33, 2.66~]
				itemid = 7001;
				currentitemtype = owner.FindInventory("MedicinalHerb");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 3; 
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.1875);
					stradd = (PlayerSTR * 0.375);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Strong Medicinal Herbs [8, 4]
				currentitemtype = owner.FindInventory("StrongMedicine");
				itemid = 7002;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 2;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.125);
					stradd = (PlayerSTR * 0.25);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Special Medicinal Herbs [16, 8]
				currentitemtype = owner.FindInventory("SpecialMedicine");
				itemid = 7003;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Magic Waters [5.33~, 2.66~]
				currentitemtype = owner.FindInventory("MagicWater");
				itemid = 7004;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 3;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.1875);
					stradd = (PlayerSTR * 0.375);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Sage Elixirs [8, 4]
				currentitemtype = owner.FindInventory("SageElixir");
				itemid = 7005;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 2;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.125);
					stradd = (PlayerSTR * 0.25);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Elfin Elixirs [16, 8]
				itemid = 7006;
				currentitemtype = owner.FindInventory("ElfinElixir");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Yggdrasil Dew [32, 16]
				currentitemtype = owner.FindInventory("YggdrasilDew");
				itemid = 7007;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.03125);
					stradd = (PlayerSTR * 0.0625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Miracle Potion [32, 16]
				itemid = 7008;
				currentitemtype = owner.FindInventory("MiraclePotion");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.03125);
					stradd = (PlayerSTR * 0.0625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Rockbomb Shards [16, 8]
				currentitemtype = owner.FindInventory("RockBombShard");
				itemid = 7009;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 2;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Paxa Punch [32, 16]
				itemid = 7010;
				currentitemtype = owner.FindInventory("PaxaPunch");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.03125);
					stradd = (PlayerSTR * 0.0625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Mercury Bandana [32, 16]
				currentitemtype = owner.FindInventory("MercuryBandana");
				itemid = 7011;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.03125);
					stradd = (PlayerSTR * 0.0625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Monster Munchies [16, 8]
				currentitemtype = owner.FindInventory("MonsterMunchies");
				itemid = 7012;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Lesser Vimstones [16, 8]
				currentitemtype = owner.FindInventory("LesserVimstone");
				itemid = 7013;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}

				// Greater Vimstones [64, 32]
				currentitemtype = owner.FindInventory("GreaterVimstone");
				itemid = 7014;
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					baseholdamount *= baselimitmulti;
					if (baseholdamount < 1) baseholdamount = 1;
					leveladd = (PlayerLevel * 0.015625);
					stradd = (PlayerSTR * 0.03125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
					currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
					if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
					if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
				}


				if (ClassicDoomType == 2) // Heretic
				{
					// Quartz Flasks
					pm = "ArtiHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7101;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.1875);
						stradd = (PlayerSTR * 0.375);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Mystic Urn [32, 16]
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7102;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}


					// Chaos Devices [16, 8]
					pm = "ArtiTeleportNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7103;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Morph Ovum [32, 16]
					pm = "ArtiEggNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7104;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Shadow Sphere [32, 16]
					pm = "ArtiInvisibilityNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7105;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Ring of Invulnerability [64, 32]
					pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7106;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.015625);
						stradd = (PlayerSTR * 0.03125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}
				}
				if (ClassicDoomType == 3) // Hexen
				{
					// Quartz Flasks
					pm = "ArtiHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7201;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.1875);
						stradd = (PlayerSTR * 0.375);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Mystic Ambit Incant [16, 8]
					pm = "ArtiHealingRadiusNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7202;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Mystic Urn [32, 16]
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7203;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Krater of Might [32, 16]
					pm = "ArtiBoostManaNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7204;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Chaos Devices [16, 8]
					pm = "ArtiTeleportNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7205;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Banishment Devices [16, 8]
					pm = "ArtiTeleportOtherNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7206;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Dark Servant [32, 16]
					pm = "ArtiDarkServantNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7207;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Porkulator [32, 16]
					pm = "ArtiPorkNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7208;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Icon of The Defender [64, 32]
					pm = "ArtiInvulnerability2New"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7209;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.015625);
						stradd = (PlayerSTR * 0.03125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}
				}
				if (ClassicDoomType == 4) // Strife
				{
					// Med Patches
					pm = "MedPatchNew"; iDTech1Check = pm;
					itemid = 7301;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 4;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.3125);
						stradd = (PlayerSTR * 0.625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Medicial Kits
					pm = "MedicalKitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7302;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.1875);
						stradd = (PlayerSTR * 0.375);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Surgery Kits [32, 16]
					pm = "SurgeryKitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7303;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Scanner [16, 8]
					pm = "ScannerNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7304;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Targetter [16, 8]
					pm = "TargeterNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7305;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Environmental Suit [16, 8]
					pm = "EnvironmentalSuitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7306;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Shadow Armor [32, 16]
					pm = "ShadowArmorNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7307;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.03125);
						stradd = (PlayerSTR * 0.0625);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// Teleporter Beacon [16, 8]
					pm = "TeleporterBeaconNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7308;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}

					// 4 Degnin Ore [4, 2]
					pm = "DegninOreNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					itemid = 7309;
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 4;
						baseholdamount *= baselimitmulti;
						if (baseholdamount < 1) baseholdamount = 1;
						leveladd = (PlayerLevel * 0.25);
						stradd = (PlayerSTR * 0.5);
						if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
						itemsmax = (leveladd + stradd) * itemcalcmulti; itemsmax += baseholdamount;
						currentitemtype.MaxAmount = (((((((itemsmax * backpackmultiplier) / backpackdivisor) * itemlimitmulti)) * perkmultiplier) * perkmultiplier2) * perkmultiplier3);
						if (dvds_inventorylowcap && currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						CallACS("MiscVarSetDECORATE",itemid,currentitemtype.MaxAmount);
						if (debuginventorylimits) Console.Printf("\cy%s\c-: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f, PerkMulti2: %8f, PerkMulti3: %8f, \cxbaselimitmulti: %8f, itemcalcmulti: %8f, itemlimitmulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmulti, perkmultiplier, perkmultiplier2, perkmultiplier3, baselimitmulti, itemcalcmulti, itemlimitmulti);
					}
				}
			}
			else
			{
				if (owner) 
				{
					int maxamountdefault = 9999;
					if (owner.FindInventory("MedicinalHerb")) owner.FindInventory("MedicinalHerb").MaxAmount = maxamountdefault;
					if (owner.FindInventory("StrongMedicine")) owner.FindInventory("StrongMedicine").MaxAmount = maxamountdefault;
					if (owner.FindInventory("SpecialMedicine")) owner.FindInventory("SpecialMedicine").MaxAmount = maxamountdefault;
					if (owner.FindInventory("MagicWater")) owner.FindInventory("MagicWater").MaxAmount = maxamountdefault;
					if (owner.FindInventory("SageElixir")) owner.FindInventory("SageElixir").MaxAmount = maxamountdefault;
					if (owner.FindInventory("ElfinElixir")) owner.FindInventory("ElfinElixir").MaxAmount = maxamountdefault;
					if (owner.FindInventory("MiraclePotion")) owner.FindInventory("MiraclePotion").MaxAmount = maxamountdefault;
					if (owner.FindInventory("YggdrasilDew")) owner.FindInventory("YggdrasilDew").MaxAmount = maxamountdefault;
					if (owner.FindInventory("RockbombShard")) owner.FindInventory("RockbombShard").MaxAmount = maxamountdefault;
					if (owner.FindInventory("PaxaPunch")) owner.FindInventory("PaxaPunch").MaxAmount = maxamountdefault;
					if (owner.FindInventory("MercuryBandana")) owner.FindInventory("MercuryBandana").MaxAmount = maxamountdefault;
					if (owner.FindInventory("MonsterMunchies")) owner.FindInventory("MonsterMunchies").MaxAmount = maxamountdefault;
					if (owner.FindInventory("LesserVimstone")) owner.FindInventory("LesserVimstone").MaxAmount = maxamountdefault;
					if (owner.FindInventory("GreaterVimstone")) owner.FindInventory("GreaterVimstone").MaxAmount = maxamountdefault;
					if (ClassicDoomType == 2) // Heretic
					{
						pm = "ArtiHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiSuperHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiTeleportNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiEggNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiInvisibilityNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
					}
					if (ClassicDoomType == 3) // Hexen
					{
						pm = "ArtiHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiHealingRadiusNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiSuperHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiBoostManaNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiTeleportNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiTeleportOtherNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiDarkServantNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiPorkNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ArtiInvulnerability2New"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
					}
					if (ClassicDoomType == 4) // Strife
					{
						pm = "MedPatchNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "MedicalKitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "SurgeryKitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ScannerNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "TargeterNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "EnvironmentalSuitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "ShadowArmorNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "TeleporterBeaconNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
						pm = "DegninOreNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = maxamountdefault;
					}
				}
			}
		}
		
		
		
		
		
		//***********************************************************************
		//***Determines Maximum Ammo Amounts Based on Strength Seeds and Level***
		//***********************************************************************
		if (playeractor)
		{
			double perkmultiplier = 1.0 + ((CallACS("MiscVarCheckDECORATE",10005) * 0.025) + (CallACS("MiscVarCheckDECORATE",10006) * 0.0625));
			double perkmultiplier2 = 1.0 + (CallACS("MiscVarCheckDECORATE",317) * 0.05);
			double perkmultiplier3 = 1.0 + ((CallACS("MiscVarCheckDECORATE",10059) * 0.10) + (CallACS("MiscVarCheckDECORATE",10060) * 0.25));

			// Default Ammo Types
			int DiarisArrowMax, DiarisArrowUltimateMax;
			int PoisonNeedleMax, PoisonNeedleUltimateMax;
			// Doom Ammo Types
			int ClipMax, ClipUltimateMax;
			int ShellMax, ShellUltimateMax;
			int RocketMax, RocketUltimateMax;
			int CellMax, CellUltimateMax;
			// Heretic Ammo Types
			int GoldWandAmmoMax, GoldWandAmmoUltimateMax;
			int CrossbowAmmoMax, CrossbowAmmoUltimateMax;
			int BlasterAmmoMax, BlasterAmmoUltimateMax;
			int PhoenixRodAmmoMax, PhoenixRodAmmoUltimateMax;
			int SkullRodAmmoMax, SkullRodAmmoUltimateMax;
			int MaceAmmoMax, MaceAmmoUltimateMax;
			// Hexen Ammo Types
			// Strife Ammo Types
			int ElectricBoltsMax, ElectricBoltsUltimateMax;
			int PoisonBoltsMax, PoisonBoltsUltimateMax;
			int ClipOfBulletsMax, ClipOfBulletsUltimateMax;
			int MiniMissilesMax, MiniMissilesUltimateMax;
			int EnergyPodMax, EnergyPodUltimateMax;
			int HEGrenadeRoundsMax, HEGrenadeRoundsUltimateMax;
			int PHGrenadeRoundsMax, PHGrenadeRoundsUltimateMax;
			// Misc Non-idTech1 ammo types
			int RifleAmmoMax, RifleAmmoUltimateMax; // KDIZD
			int PopcornPieceMax, PopcornPieceUltimateMax; // HTC2 [400]
			int GoreBalloonsMax, GoreBalloonsUltimateMax; // HTC2 [50]
			int CGrenadeAmmoMax, CGrenadeAmmoUltimateMax; // HTC2 [100]
			int ClownSoulsMax, ClownSoulsUltimateMax; // HTC2 [400]
			int CZBallMax, CZBallUltimateMax; // HTC2 [25]
			
			int BackPacksCollected = CallACS("MiscVarCheckDECORATE",80);

			// Get Ammo Values
			if (CharacterClass == 0) // Deggaris
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 0;
				PoisonNeedleUltimateMax = 0;
				DiarisArrowMax = 0;
				PoisonNeedleMax = 0;
				// Doom Types
				ClipUltimateMax = 500 * dvds_ammolimitsumaxbaseratio;
				ClipUltimateMax += ((PlayerSTR * 5) + (PlayerLevel * 2.5) * dvds_ammolimitsumaxaddratio);
				ClipUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ClipUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ShellUltimateMax = 140 * dvds_ammolimitsumaxbaseratio;
				ShellUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				ShellUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ShellUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				RocketUltimateMax = 120  * dvds_ammolimitsumaxbaseratio;
				RocketUltimateMax += ((PlayerSTR * 1) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				RocketUltimateMax *= dvds_ammolimitsumaxtotalratio;
				RocketUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CellUltimateMax = 750 * dvds_ammolimitsumaxbaseratio;
				CellUltimateMax += ((PlayerSTR * 20) + (PlayerLevel * 10) * dvds_ammolimitsumaxaddratio);
				CellUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CellUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				ClipMax = (250 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 100) * dvds_ammolimitsbackpackratio); 
				ClipMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ShellMax = (70 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 28) * dvds_ammolimitsbackpackratio);
				ShellMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				RocketMax = (60 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 24) * dvds_ammolimitsbackpackratio);
				RocketMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CellMax = (375 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 150) * dvds_ammolimitsbackpackratio);
				CellMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 75 * dvds_ammolimitsumaxbaseratio;
				RifleAmmoUltimateMax += ((PlayerSTR * 2.5) + (PlayerLevel * 1.25) * dvds_ammolimitsumaxaddratio);
				RifleAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				RifleAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PopcornPieceUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				PopcornPieceUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				PopcornPieceUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PopcornPieceUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsUltimateMax = 50 * dvds_ammolimitsumaxbaseratio;
				GoreBalloonsUltimateMax += ((PlayerSTR * 1) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				GoreBalloonsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				GoreBalloonsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoUltimateMax = 100 * dvds_ammolimitsumaxbaseratio;
				CGrenadeAmmoUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				CGrenadeAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CGrenadeAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				ClownSoulsUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				ClownSoulsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ClownSoulsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallUltimateMax = 25 * dvds_ammolimitsumaxbaseratio;
				CZBallUltimateMax += ((PlayerSTR * 0.5) + (PlayerLevel * 0.25) * dvds_ammolimitsumaxaddratio);
				CZBallUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CZBallUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				RifleAmmoMax = (37 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 14.8) * dvds_ammolimitsbackpackratio);
				RifleAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PopcornPieceMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				PopcornPieceMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsMax = (50 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 20) * dvds_ammolimitsbackpackratio);
				GoreBalloonsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoMax = (100 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 40) * dvds_ammolimitsbackpackratio);
				CGrenadeAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				ClownSoulsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallMax = (25 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 10) * dvds_ammolimitsbackpackratio);
				CZBallMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
			}
			if (CharacterClass == 1) // Illucia
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 0;
				PoisonNeedleUltimateMax = 0;
				DiarisArrowMax = 0;
				PoisonNeedleMax = 0;
				// Doom Types
				ClipUltimateMax = 300 * dvds_ammolimitsumaxbaseratio;
				ClipUltimateMax += ((PlayerSTR * 3.75) + (PlayerLevel * 1.75) * dvds_ammolimitsumaxaddratio);
				ClipUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ClipUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ShellUltimateMax = 90 * dvds_ammolimitsumaxbaseratio;
				ShellUltimateMax += ((PlayerSTR * 1.5) + (PlayerLevel * 0.75) * dvds_ammolimitsumaxaddratio);
				ShellUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ShellUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				RocketUltimateMax = 70  * dvds_ammolimitsumaxbaseratio;
				RocketUltimateMax += ((PlayerSTR * 0.75) + (PlayerLevel * 0.375) * dvds_ammolimitsumaxaddratio);
				RocketUltimateMax *= dvds_ammolimitsumaxtotalratio;
				RocketUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CellUltimateMax = 500 * dvds_ammolimitsumaxbaseratio;
				CellUltimateMax += ((PlayerSTR * 15) + (PlayerLevel * 7.5) * dvds_ammolimitsumaxaddratio);
				CellUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CellUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				ClipMax = (175 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 70) * dvds_ammolimitsbackpackratio); 
				ClipMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ShellMax = (45 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 18) * dvds_ammolimitsbackpackratio);
				ShellMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				RocketMax = (35 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 14) * dvds_ammolimitsbackpackratio);
				RocketMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CellMax = (250 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 100) * dvds_ammolimitsbackpackratio);
				CellMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 60 * dvds_ammolimitsumaxbaseratio;
				RifleAmmoUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				RifleAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				RifleAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PopcornPieceUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				PopcornPieceUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				PopcornPieceUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PopcornPieceUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsUltimateMax = 50 * dvds_ammolimitsumaxbaseratio;
				GoreBalloonsUltimateMax += ((PlayerSTR * 1) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				GoreBalloonsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				GoreBalloonsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoUltimateMax = 100 * dvds_ammolimitsumaxbaseratio;
				CGrenadeAmmoUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				CGrenadeAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CGrenadeAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				ClownSoulsUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				ClownSoulsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ClownSoulsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallUltimateMax = 25 * dvds_ammolimitsumaxbaseratio;
				CZBallUltimateMax += ((PlayerSTR * 0.5) + (PlayerLevel * 0.25) * dvds_ammolimitsumaxaddratio);
				CZBallUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CZBallUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				RifleAmmoMax = (30 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 12) * dvds_ammolimitsbackpackratio);
				RifleAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PopcornPieceMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				PopcornPieceMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsMax = (50 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 20) * dvds_ammolimitsbackpackratio);
				GoreBalloonsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoMax = (100 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 40) * dvds_ammolimitsbackpackratio);
				CGrenadeAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				ClownSoulsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallMax = (25 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 10) * dvds_ammolimitsbackpackratio);
				CZBallMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
			}
			if (CharacterClass == 2) // Flora
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 30 * dvds_ammolimitsumaxbaseratio;
				DiarisArrowUltimateMax += ((PlayerSTR * 3) + (PlayerLevel * 1.5) * dvds_ammolimitsumaxaddratio);
				DiarisArrowUltimateMax *= dvds_ammolimitsumaxtotalratio;
				DiarisArrowUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PoisonNeedleUltimateMax = 2 * dvds_ammolimitsumaxbaseratio;
				PoisonNeedleUltimateMax += ((PlayerSTR * 0.16667) + (PlayerLevel * 0.083334) * dvds_ammolimitsumaxaddratio);
				PoisonNeedleUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PoisonNeedleUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				DiarisArrowMax = (15 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 6) * dvds_ammolimitsbackpackratio);
				DiarisArrowMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PoisonNeedleMax = (1 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 0.5) * dvds_ammolimitsbackpackratio);
				PoisonNeedleMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				// Doom Types
				if (owner.CountInv("FloraLearnedPistols") > 0) 
				{ 
					ClipUltimateMax = 200 * dvds_ammolimitsumaxbaseratio;
					ClipUltimateMax += ((PlayerSTR * 2.5) + (PlayerLevel * 1.25) * dvds_ammolimitsumaxaddratio);
					ClipUltimateMax *= dvds_ammolimitsumaxtotalratio;
					ClipUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
					ClipMax = (100 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 40) * dvds_ammolimitsbackpackratio); 
					ClipMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				} 
				else 
				{ 
					ClipUltimateMax = 0;
					ClipMax = 0; 
				}
				ShellUltimateMax = 0;
				ShellMax = 0;
				RocketUltimateMax = 0;
				RocketMax = 0;
				CellUltimateMax = 0;
				CellMax = 0;
				// Heretic Types
				GoldWandAmmoUltimateMax = 200 * dvds_ammolimitsumaxbaseratio; 
				GoldWandAmmoUltimateMax += ((PlayerSTR * 5) + (PlayerLevel * 2.5) * dvds_ammolimitsumaxaddratio);
				GoldWandAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				GoldWandAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CrossbowAmmoUltimateMax = 100 * dvds_ammolimitsumaxbaseratio;
				CrossbowAmmoUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				CrossbowAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CrossbowAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				BlasterAmmoUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				BlasterAmmoUltimateMax += ((PlayerSTR * 5) + (PlayerLevel * 2.5) * dvds_ammolimitsumaxaddratio);
				BlasterAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				BlasterAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PhoenixRodAmmoUltimateMax = 40 * dvds_ammolimitsumaxbaseratio;
				PhoenixRodAmmoUltimateMax += ((PlayerSTR * 1) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				PhoenixRodAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PhoenixRodAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				SkullRodAmmoUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				SkullRodAmmoUltimateMax += ((PlayerSTR * 10) + (PlayerLevel * 5) * dvds_ammolimitsumaxaddratio);
				SkullRodAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				SkullRodAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				MaceAmmoUltimateMax = 300 * dvds_ammolimitsumaxbaseratio;
				MaceAmmoUltimateMax += ((PlayerSTR * 10) + (PlayerLevel * 5) * dvds_ammolimitsumaxaddratio);
				MaceAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				MaceAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				GoldWandAmmoMax = (100 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 40) * dvds_ammolimitsbackpackratio);
				GoldWandAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CrossbowAmmoMax = (50 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 20) * dvds_ammolimitsbackpackratio);
				CrossbowAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				BlasterAmmoMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 50) * dvds_ammolimitsbackpackratio);
				BlasterAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PhoenixRodAmmoMax = (20 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 12) * dvds_ammolimitsbackpackratio);
				PhoenixRodAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				SkullRodAmmoMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 50) * dvds_ammolimitsbackpackratio);
				SkullRodAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				MaceAmmoMax = (150 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 37.5) * dvds_ammolimitsbackpackratio);
				MaceAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				// Strife Types
				ElectricBoltsUltimateMax = 100 * dvds_ammolimitsumaxbaseratio;
				ElectricBoltsUltimateMax += ((PlayerSTR * 10) + (PlayerLevel * 5) * dvds_ammolimitsumaxaddratio);
				ElectricBoltsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ElectricBoltsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PoisonBoltsUltimateMax = 50 * dvds_ammolimitsumaxbaseratio;
				PoisonBoltsUltimateMax += ((PlayerSTR * 5) + (PlayerLevel * 2.5) * dvds_ammolimitsumaxaddratio);
				PoisonBoltsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PoisonBoltsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				ClipOfBulletsUltimateMax = 0;
				MiniMissilesUltimateMax = 0;
				EnergyPodUltimateMax = 0;
				HEGrenadeRoundsUltimateMax = 0;
				PHGrenadeRoundsUltimateMax = 0;
				ElectricBoltsMax = (50 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 20) * dvds_ammolimitsbackpackratio);
				ElectricBoltsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				PoisonBoltsMax = (25 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 10) * dvds_ammolimitsbackpackratio);
				PoisonBoltsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClipOfBulletsMax = 0;
				MiniMissilesMax = 0;
				EnergyPodMax = 0;
				HEGrenadeRoundsMax = 0;
				PHGrenadeRoundsMax = 0;
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 0;
				PopcornPieceUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				PopcornPieceUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				PopcornPieceUltimateMax *= dvds_ammolimitsumaxtotalratio;
				PopcornPieceUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsUltimateMax = 50 * dvds_ammolimitsumaxbaseratio;
				GoreBalloonsUltimateMax += ((PlayerSTR * 1) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				GoreBalloonsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				GoreBalloonsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoUltimateMax = 100 * dvds_ammolimitsumaxbaseratio;
				CGrenadeAmmoUltimateMax += ((PlayerSTR * 2) + (PlayerLevel * 1) * dvds_ammolimitsumaxaddratio);
				CGrenadeAmmoUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CGrenadeAmmoUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsUltimateMax = 400 * dvds_ammolimitsumaxbaseratio;
				ClownSoulsUltimateMax += ((PlayerSTR * 4) + (PlayerLevel * 2) * dvds_ammolimitsumaxaddratio);
				ClownSoulsUltimateMax *= dvds_ammolimitsumaxtotalratio;
				ClownSoulsUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallUltimateMax = 25 * dvds_ammolimitsumaxbaseratio;
				CZBallUltimateMax += ((PlayerSTR / 2) + (PlayerLevel * 0.5) * dvds_ammolimitsumaxaddratio);
				CZBallUltimateMax *= dvds_ammolimitsumaxtotalratio;
				CZBallUltimateMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);

				RifleAmmoMax = 0;
				PopcornPieceMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				PopcornPieceMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				GoreBalloonsMax = (50 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 20) * dvds_ammolimitsbackpackratio);
				GoreBalloonsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CGrenadeAmmoMax = (100 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 40) * dvds_ammolimitsbackpackratio);
				CGrenadeAmmoMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				ClownSoulsMax = (200 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 80) * dvds_ammolimitsbackpackratio);
				ClownSoulsMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
				CZBallMax = (25 * dvds_ammolimitsbaseammoratio) + ((BackPacksCollected * 10) * dvds_ammolimitsbackpackratio);
				CZBallMax *= (perkmultiplier * perkmultiplier2 * perkmultiplier3);
			}
			if (CharacterClass == 8) // Ailish
			{
			}
			if (CharacterClass == 9) // Petra
			{
			}

			if (dvdsdebug_backpackammolimits)
			{
				Console.Printf("\cxBackPacksCollected: %d\c-,
				Diaris: %d / %d, PoisonNeedle: %d / %d, Clip: %d / %d, Shell: %d / %d, Rocket: %d / %d, Cell: %d / %d, Rifle: %d / %d,
				\ci GoldWand: %d / %d, Crossbow: %d / %d, DragonClaw: %d / %d, PhoenixRod: %d / %d, Hellstaff: %d / %d, FireMace: %d / %d,
				\cp ElecArrows: %d / %d, PoisonArrows: %d / %d, StrifeRifle: %d / %d, MiniMissiles: %d / %d, EnergyPod: %d / %d, HEGrenades: %d / %d, PHGrenades: %d / %d,
				\cx perkmultiplier: %8f, \cx perkmultiplier2: %8f, \cx perkmultiplier3: %8f", 
												BackPacksCollected,
												DiarisArrowMax, DiarisArrowUltimateMax, 
												PoisonNeedleMax, PoisonNeedleUltimateMax, 
												ClipMax, ClipUltimateMax, 
												ShellMax, ShellUltimateMax,
												RocketMax, RocketUltimateMax,
												CellMax, CellUltimateMax,
												RifleAmmoMax, RifleAmmoUltimateMax,
												GoldWandAmmoMax, GoldWandAmmoUltimateMax,
												CrossbowAmmoMax, CrossbowAmmoUltimateMax,
												BlasterAmmoMax, BlasterAmmoUltimateMax,
												PhoenixRodAmmoMax, PhoenixRodAmmoUltimateMax,
												SkullRodAmmoMax, SkullRodAmmoUltimateMax,
												MaceAmmoMax, MaceAmmoUltimateMax,
												ElectricBoltsMax, ElectricBoltsUltimateMax,
												PoisonBoltsMax, PoisonBoltsUltimateMax,
												ClipOfBulletsMax, ClipOfBulletsUltimateMax,
												MiniMissilesMax, MiniMissilesUltimateMax,
												EnergyPodMax, EnergyPodUltimateMax,
												HEGrenadeRoundsMax, HEGrenadeRoundsUltimateMax,
												PHGrenadeRoundsUltimateMax, PHGrenadeRoundsUltimateMax,
												perkmultiplier, perkmultiplier2, perkmultiplier3);
			}

			// Hexen has no backpack item so in Hexen so max ammo is solely determined on Strength stat and Level.
			if (ClassicDoomType == 3)
			{
				DiarisArrowMax = DiarisArrowUltimateMax;
				PoisonNeedleMax = PoisonNeedleUltimateMax;
				ClipMax = ClipUltimateMax;
				ShellMax = ShellUltimateMax;
				RocketMax = RocketUltimateMax;
				CellMax = CellUltimateMax;
				GoldWandAmmoMax = GoldWandAmmoUltimateMax;
				CrossbowAmmoMax = CrossbowAmmoUltimateMax;
				BlasterAmmoMax = BlasterAmmoUltimateMax;
				PhoenixRodAmmoMax = PhoenixRodAmmoUltimateMax;
				SkullRodAmmoMax = SkullRodAmmoUltimateMax;
				MaceAmmoMax = MaceAmmoUltimateMax;
				ElectricBoltsMax = ElectricBoltsUltimateMax;
				PoisonBoltsMax = PoisonBoltsUltimateMax;
				ClipOfBulletsMax = ClipOfBulletsUltimateMax;
				MiniMissilesMax = MiniMissilesUltimateMax;
				EnergyPodMax = EnergyPodUltimateMax;
				HEGrenadeRoundsMax = HEGrenadeRoundsUltimateMax;
				PHGrenadeRoundsMax = PHGrenadeRoundsUltimateMax;
				RifleAmmoMax = RifleAmmoUltimateMax; // KDIZD
				PopcornPieceMax = PopcornPieceUltimateMax; // HTC2
				GoreBalloonsMax = GoreBalloonsUltimateMax; // HTC2
				CGrenadeAmmoMax = CGrenadeAmmoUltimateMax; // HTC2
				ClownSoulsMax = ClownSoulsUltimateMax; // HTC2
				CZBallMax = CZBallUltimateMax; // HTC2
			}
			
			// Cap Maximum Ammo Limits
			if (DiarisArrowMax < 1) DiarisArrowMax = 1;
			if (DiarisArrowMax > DiarisArrowUltimateMax) DiarisArrowMax = DiarisArrowUltimateMax;
			if (PoisonNeedleMax < 1) PoisonNeedleMax = 1;
			if (PoisonNeedleMax > PoisonNeedleUltimateMax) PoisonNeedleMax = PoisonNeedleUltimateMax;
			if (ClipMax < 1) ClipMax = 1;
			if (ClipMax > ClipUltimateMax) ClipMax = ClipUltimateMax;
			if (ShellMax < 1) ShellMax = 1;
			if (ShellMax > ShellUltimateMax) ShellMax = ShellUltimateMax;
			if (RocketMax < 1) RocketMax = 1;
			if (RocketMax > RocketUltimateMax) RocketMax = RocketUltimateMax;
			if (CellMax < 1) CellMax = 1;
			if (CellMax > CellUltimateMax) CellMax = CellUltimateMax;

			if (GoldWandAmmoMax < 1) GoldWandAmmoMax = 1;
			if (GoldWandAmmoMax > GoldWandAmmoUltimateMax) GoldWandAmmoMax = GoldWandAmmoUltimateMax;
			if (CrossbowAmmoMax < 1) CrossbowAmmoMax = 1;
			if (CrossbowAmmoMax > CrossbowAmmoUltimateMax) CrossbowAmmoMax = CrossbowAmmoUltimateMax;
			if (BlasterAmmoMax < 1) BlasterAmmoMax = 1;
			if (BlasterAmmoMax > BlasterAmmoUltimateMax) BlasterAmmoMax = BlasterAmmoUltimateMax;
			if (PhoenixRodAmmoMax < 1) PhoenixRodAmmoMax = 1;
			if (PhoenixRodAmmoMax > PhoenixRodAmmoUltimateMax) PhoenixRodAmmoMax = PhoenixRodAmmoUltimateMax;
			if (SkullRodAmmoMax < 1) SkullRodAmmoMax = 1;
			if (SkullRodAmmoMax > SkullRodAmmoUltimateMax) SkullRodAmmoMax = SkullRodAmmoUltimateMax;
			if (MaceAmmoMax < 1) MaceAmmoMax = 1;
			if (MaceAmmoMax > MaceAmmoUltimateMax) MaceAmmoMax = MaceAmmoUltimateMax;

			if (ElectricBoltsMax < 1) ElectricBoltsMax = 1;
			if (ElectricBoltsMax > ElectricBoltsUltimateMax) ElectricBoltsMax = ElectricBoltsUltimateMax;
			if (PoisonBoltsMax < 1) PoisonBoltsMax = 1;
			if (PoisonBoltsMax > PoisonBoltsUltimateMax) PoisonBoltsMax = PoisonBoltsUltimateMax;
			if (ClipOfBulletsMax < 1) ClipOfBulletsMax = 1;
			if (ClipOfBulletsMax > ClipOfBulletsUltimateMax) ClipOfBulletsMax = ClipOfBulletsUltimateMax;
			if (MiniMissilesMax < 1) MiniMissilesMax = 1;
			if (MiniMissilesMax > MiniMissilesUltimateMax) MiniMissilesMax = MiniMissilesUltimateMax;
			if (EnergyPodMax < 1) EnergyPodMax = 1;
			if (EnergyPodMax > EnergyPodUltimateMax) EnergyPodMax = EnergyPodUltimateMax;
			if (HEGrenadeRoundsMax < 1) HEGrenadeRoundsMax = 1;
			if (HEGrenadeRoundsMax > HEGrenadeRoundsUltimateMax) HEGrenadeRoundsMax = HEGrenadeRoundsUltimateMax;
			if (PHGrenadeRoundsMax < 1) PHGrenadeRoundsMax = 1;
			if (PHGrenadeRoundsMax > PHGrenadeRoundsUltimateMax) PHGrenadeRoundsMax = PHGrenadeRoundsUltimateMax;

			if (RifleAmmoMax < 1) RifleAmmoMax = 1;
			if (RifleAmmoMax > RifleAmmoUltimateMax) RifleAmmoMax = RifleAmmoUltimateMax; // KDIZD

			if (PopcornPieceMax < 1) PopcornPieceMax = 1;
			if (PopcornPieceMax > PopcornPieceUltimateMax) PopcornPieceMax = PopcornPieceUltimateMax; // HTC2
			if (GoreBalloonsMax < 1) GoreBalloonsMax = 1;
			if (GoreBalloonsMax > GoreBalloonsUltimateMax) GoreBalloonsMax = GoreBalloonsUltimateMax; // HTC2
			if (CGrenadeAmmoMax < 1) CGrenadeAmmoMax = 1;
			if (CGrenadeAmmoMax > CGrenadeAmmoUltimateMax) CGrenadeAmmoMax = CGrenadeAmmoUltimateMax; // HTC2
			if (ClownSoulsMax < 1) ClownSoulsMax = 1;
			if (ClownSoulsMax > ClownSoulsUltimateMax) ClownSoulsMax = ClownSoulsUltimateMax; // HTC2
			if (CZBallMax < 1) CZBallMax = 1;
			if (CZBallMax > CZBallUltimateMax) CZBallMax = CZBallUltimateMax; // HTC2

			// Set Maximum Ammo Values
			let currentammotype = owner.FindInventory("DiarisArrow"); 
			if (currentammotype) 
			{
				currentammotype.MaxAmount = DiarisArrowMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7501,currentammotype.MaxAmount);
			}
			currentammotype = owner.FindInventory("PoisonNeedleAmmo"); 
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PoisonNeedleMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7502,currentammotype.MaxAmount);
			}

			currentammotype = owner.FindInventory("Clip");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ClipMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7503,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("Shell");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ShellMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7504,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("RocketAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = RocketMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7505,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("Cell");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CellMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7506,currentammotype.MaxAmount);
			}
			currentammotype = owner.FindInventory("GoldWandAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = GoldWandAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7511,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("CrossbowAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CrossbowAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7512,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("BlasterAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = BlasterAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7513,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("PhoenixRodAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PhoenixRodAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7514,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("SkullRodAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = SkullRodAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7515,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("MaceAmmo");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = MaceAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7516,currentammotype.MaxAmount);
			}
			currentammotype = owner.FindInventory("ElectricBolts");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ElectricBoltsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7521,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("PoisonBolts");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PoisonBoltsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7522,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("ClipOfBullets");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ClipOfBulletsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7523,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("MiniMissiles");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = MiniMissilesMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7524,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("EnergyPod");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = EnergyPodMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7525,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("HEGrenadeRounds");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = HEGrenadeRoundsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7526,currentammotype.MaxAmount);
			}
			
			currentammotype = owner.FindInventory("PhosphorusGrenadeRounds");
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PHGrenadeRoundsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7527,currentammotype.MaxAmount);
			}
			// None Main Game Ammo Types
			nm = "RifleAmmo"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = RifleAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7601,currentammotype.MaxAmount);
			}

			nm = "PopcornPiece"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PopcornPieceMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7602,currentammotype.MaxAmount);
			}

			nm = "GoreBalloons"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = GoreBalloonsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7603,currentammotype.MaxAmount);
			}

			nm = "CGrenadeAmmo"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CGrenadeAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7604,currentammotype.MaxAmount);
			}

			nm = "ClownSouls"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ClownSoulsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7605,currentammotype.MaxAmount);
			}

			nm = "CZBall"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CZBallMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				CallACS("MiscVarSetDECORATE",7606,currentammotype.MaxAmount);
			}

			if (BackPacksCollected > PrevBackPacksCollected)
			{
				int BackPackDiff = BackPacksCollected - PrevBackPacksCollected;
				//Console.Printf("BackPackDiff: %d", BackPackDiff);

				if (CharacterClass != 2) // Deggaris & Illucia
				{
					owner.GiveInventory("Clip", (20 * BackPackDiff)); 
					owner.GiveInventory("Shell", (8 * BackPackDiff)); 
					owner.GiveInventory("RocketAmmo", (2 * BackPackDiff)); 
					owner.GiveInventory("Cell", (80 * BackPackDiff)); 
				}
				if (CharacterClass == 2) // Flora
				{
					if (owner.CountInv("FloraLearnedPistols") > 0) owner.GiveInventory("Clip", (20 * BackPackDiff));
					owner.GiveInventory("DiarisArrow", (3 * BackPackDiff)); 
				}
				
				// Heretic Ammo
				owner.GiveInventory("GoldWandAmmo", (20 * BackPackDiff));
				owner.GiveInventory("CrossbowAmmo", (10 * BackPackDiff));
				owner.GiveInventory("BlasterAmmo", (20 * BackPackDiff));
				owner.GiveInventory("MaceAmmo", (40 * BackPackDiff));
				owner.GiveInventory("PhoenixRodAmmo", (2 * BackPackDiff));
				owner.GiveInventory("SkullRodAmmo", (40 * BackPackDiff));
				
				// Strife Ammo
				owner.GiveInventory("ElectricBolts", (20 * BackPackDiff));
				owner.GiveInventory("PoisonBolts", (10 * BackPackDiff));
				if (CharacterClass == 7) // StrifeGuy
				{
					owner.GiveInventory("ClipOfBullets", (10 * BackPackDiff));
					owner.GiveInventory("MiniMissiles", (4 * BackPackDiff));
					owner.GiveInventory("EnergyPod", (20 * BackPackDiff));
					owner.GiveInventory("HEGrenadeRounds", (6 * BackPackDiff));
					owner.GiveInventory("PhosphorusGrenadeRounds", (4 * BackPackDiff));
				}
				
				// CompatPack Ammos
				nm = "RifleAmmo"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (10 * BackPackDiff));
				nm = "PopcornPiece"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (5 * BackPackDiff));
				nm = "ClownSouls"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (5 * BackPackDiff));
				nm = "GoreBalloon"; APPackCheck = nm; if (owner.CountInv(APPackCheck) > 0) { nm = "GoreBalloons"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (6 * BackPackDiff)); }
				nm = "ClownGrenade"; APPackCheck = nm; if (owner.CountInv(APPackCheck) > 0) { nm = "CGrenadeAmmo"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (2 * BackPackDiff)); }
				nm = "CrazyBall2"; APPackCheck = nm; if (owner.CountInv(APPackCheck) > 0) { nm = "CZBall"; APPackCheck = nm; owner.GiveInventory(APPackCheck, (1 * BackPackDiff)); }
			}
			PrevBackPacksCollected = BackPacksCollected;
		}
	}
	
	// Infinite Ammo Chance Checks
	void A_PSI1DoEffectInfAmmo()
	{
		let playeractor = AetheriusPlayerPawn(owner);

		//***********************
		//*Infinite Ammo Chances*
		//***********************
		int infammoreqremaining;
		int infammoneeded = 0;
		int infammoneeded2 = 0;
		int temp;
		if (playeractor)
		{
			if (Owner.CountInv("DSGreenArmorClass") > 0)		temp += 250; // +2.5% Chance
			if (Owner.CountInv("DSBlueArmorClass") > 0)			temp += 400; // +4.0% Chance
			if (Owner.CountInv("DSStoneArmorClass1") > 0)		temp += 650; // +6.5% Chance
			if (Owner.CountInv("DSDiamondArmorClass1") > 0)	temp += 1000; // +10.0% Chance
			if (Owner.CountInv("DSStoneArmorClass2") > 0)		temp += 1500; // +15.0% Chance
			if (Owner.CountInv("DSDiamondArmorClass2") > 0)	temp += 2500; // +25.0% Chance
			if (ModType != 0) 															temp *= 1.5; // Marine's Armor gives them 1.5x the chance of infinite ammo (from their specfic armors only) on each tic in DVI/DVII mode.
			infammoneeded += temp;
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 1 - Marine Armor]: %d\c-", infammoneeded);

			if (Owner.CountInv("SauronHelmet") > 0)						temp += 750; // +7.5% Chance
			if (Owner.CountInv("SauronGauntletsItem") > 0)		temp += 750; // +7.5% Chance
			if (Owner.CountInv("TheOneRing") > 0)							temp += 2500; // +25.0% Chance
			if (ModType != 0) 																temp *= 1.25; // Sauron's Armor gives them 1.25x the chance of infinite ammo on each tic in DVI/DVII mode.
			infammoneeded += temp;
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 2 - Sauron Armor]: %d\c-", infammoneeded2);

			infammoneeded += infammoneeded2;
			if (CallACS("GetBuffTimer",7) > 0)
			{
				temp += 1250;
				infammoneeded += temp;
				infammoreqremaining = (10000 - infammoneeded) / 4; // Gets 25% of the remaining value not covered by the above.
				infammoneeded += infammoreqremaining;
			}
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 3 - Divine Avatar]: %d\c-", infammoneeded);
			
			// "Bottomless Magazines" Perk
			infammoneeded += (CallACS("MiscVarCheckDECORATE",10047) * 500);
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 4 - Bottomless Mags]: %d\c-", infammoneeded);
			
			// "Bottomless Magazines EX" Perk
			infammoneeded += (CallACS("MiscVarCheckDECORATE",10048) * 1250);
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 5 - Bottomless Mags EX]: %d\c-", infammoneeded);
			
			int infammochance = random[statitem](1,10000);
			Owner.A_SetInventory("RandomInfiniteAmmo",0);
			if (infammochance <= infammoneeded) Owner.A_SetInventory("RandomInfiniteAmmo",1);
			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP 6 - Chance Roll]: %d / %d\c-", infammochance, infammoneeded);

			if (dvdsdebug_infiniteammostuff) Console.Printf("    \cwInfinite Ammo [STEP ? - Minigun Heat]: %d / %d\c-", minigunheat, minigunheatmax);
		}
	}

	// Shield Uncurse Intervals
	void A_PSI1DoEffectUncurseShield()
	{
		let playeractor = AetheriusPlayerPawn(owner);

		//*******************
		//*RUINOUS SHIELD D:*
		//*******************
		int UncurseIntervalChance;
		int UncurseIntervalChance2;
		int UncursePtsTotalAdded = 0;
		int UncursePtsAdd1 = 0;
		int uncursetimerincrease = 100;
		int uncurselevel = CallACS("MiscVarCheckDECORATE",202);
		if (playeractor)
		{
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) // Flora
			{
				RuinousPtsCurrent = CallACS("MiscVarCheckDECORATE",202);
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 0]: %d\c-, %d / %d", uncurselevel, RuinousPtsCurrent, RuinousPtsNeeded);
				// Base Max Interval
				UncurseMaxInterval = 7000; // 70 [*100] tics [up to -17 tics with all items]
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 1 - Interval Max (Base)]: %d\c-", UncurseMaxInterval);
	
				previousdelaycount = UncurseMaxInterval;
				if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseMaxInterval -= 500;
				if (Owner.CountInv("BalrogRing") > 0) UncurseMaxInterval -= 400;
				if (Owner.CountInv("EvenstarNecklace") > 0) UncurseMaxInterval -= 300;
				if (Owner.CountInv("AnubisCufflinks") > 0) UncurseMaxInterval -= 200;
				if (Owner.CountInv("DoveRibbon") > 0) UncurseMaxInterval -= 200;
				if (Owner.CountInv("KissaBra") > 0) UncurseMaxInterval -= 100;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 2 - Interval Max (Armor)]: %d\c-, Previous: %d", UncurseMaxInterval, previousdelaycount);
				
				// Base Interval Chance
				UncurseIntervalChance = 40;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 3 - Interval Chance (Armor)]: %d\c-", UncurseIntervalChance);
				
				previousdelaycount = UncurseIntervalChance;
				if (Owner.CountInv("SafeTeaShoes") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("PearlyCorset") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("WaterFlyingDress") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("EvenstarNecklace") > 0) UncurseIntervalChance += 2;
				if (Owner.CountInv("CloakofEvasion") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseIntervalChance += 3;
				if (Owner.CountInv("AnubisCufflinks") > 0) UncurseIntervalChance += 2;
				if (Owner.CountInv("KissaBra") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("BalrogRing") > 0) UncurseIntervalChance += 2;
				if (Owner.CountInv("DoveRibbon") > 0) UncurseIntervalChance += 1;
				if (Owner.CountInv("SauronHelmet") > 0) UncurseIntervalChance -= 2;
				if (Owner.CountInv("SauronGauntletsFlora") > 0) UncurseIntervalChance -= 3;
				if (Owner.CountInv("TheOneRing") > 0) UncurseIntervalChance += 11;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 4 - Interval Chance (Armor)]: %d\c-, Previous: %d", UncurseIntervalChance, previousdelaycount);
				
				UncurseIntervalChance2 = 8;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 5 - Interval Chance 2 (Armor)]: %d\c-", UncurseIntervalChance2);
	
				previousdelaycount = UncurseIntervalChance2;
				if (Owner.CountInv("PearlyCorset") > 0) UncurseIntervalChance2 += random[statitem](0,1);
				if (Owner.CountInv("DoveRibbon") > 0) UncurseIntervalChance2 += random[statitem](1,3);
				if (Owner.CountInv("CloakOfEvasion") > 0) UncurseIntervalChance2 += random[statitem](2,5);
				if (Owner.CountInv("WaterFlyingDress") > 0) UncurseIntervalChance2 += 2;
				if (Owner.CountInv("AnubisCufflinks") > 0) UncurseIntervalChance2 += 4;
				if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseIntervalChance2 += 6;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 6 - Interval Chance 2 (Armor)]: %d\c-, Previous: %d", UncurseIntervalChance2, previousdelaycount);
				
				// Amount of Points for Full Uncurse is determined by Difficulty level
				if (TrueGameSkill <= SKILL_VERY_EASY) RuinousPtsNeeded = 384;
				if (TrueGameSkill == SKILL_EASY) RuinousPtsNeeded = 448;
				if (TrueGameSkill == SKILL_NORMAL) RuinousPtsNeeded = 576;
				if (TrueGameSkill == SKILL_HARD) RuinousPtsNeeded = 768;
				if (TrueGameSkill == SKILL_VERY_HARD) RuinousPtsNeeded = 1024;
				if (TrueGameSkill == SKILL_EXTREME) RuinousPtsNeeded = 1152;
				if (TrueGameSkill == SKILL_HORRIBLE) RuinousPtsNeeded = 1280;
				if (TrueGameSkill == SKILL_IMPOSSIBLE) RuinousPtsNeeded = 1408;
				if (TrueGameSkill >= SKILL_OMEGA) RuinousPtsNeeded = 1536;
				CallACS("MiscVarSetDECORATE",269,RuinousPtsNeeded); // Set
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 7 - Get Max Uncurse Pts Needed]: %d\c-", RuinousPtsNeeded);
			
				// Checks to determine how many points the Ruinous Shield has gathered towards becoming an uncursed Divine Shield
				uncursetimerincrease = 100;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 8 - Uncurse Interval (Base)]: %d\c-", uncursetimerincrease);

				previousdelaycount = uncursetimerincrease;
				uncursetimerincrease = (uncursetimerincrease * dvds_uncurserate) / 100;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 9 - Uncurse Interval (MenuFactor)]: %d\c-, Previous: %d, Uncurse Factor: %d%", uncursetimerincrease, dvds_uncurserate, previousdelaycount);

				if (CallACS("MenuVarCheckDECORATE",0) == 0) UncurseInterval += uncursetimerincrease;
				if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 10 - Uncurse Interval Increment]: %d / %d\c-, Increment: %d%, Uncurse Pts: (%d) %d / %d", UncurseInterval, UncurseMaxInterval, uncursetimerincrease, uncurselevel, RuinousPtsCurrent, RuinousPtsNeeded);
				if (UncurseInterval >= UncurseMaxInterval)
				{
					UncurseInterval -= UncurseMaxInterval;
					
					// Base Chance
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11a - Uncurse Pts (Base)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Safe Tea Shoes
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("SafeTeaShoes") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 3;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11b - Uncurse Pts (Safe Tea Shoes)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Pearly Corset
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("PearlyCorset") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 6;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11c - Uncurse Pts (Pearly Corset)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Water Flying Dress
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("WaterFlyingDress") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 4;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11d - Uncurse Pts (Water Flying Dress)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Evenstar Necklace
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("EvenstarNecklace") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 1;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11e - Uncurse Pts (Evenstar Necklace)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Cloak of Evasion
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("EvenstarNecklace") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11f - Uncurse Pts (Cloak of Evasion)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Anubis Cufflinks
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("AnubisCufflinks") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11g - Uncurse Pts (Anubis Cufflinks)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Kissa's Bra
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("KissaBra") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 5;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11h - Uncurse Pts (Kissa's Bra)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Balrog Ring
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("BalrogRing") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 1;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11i - Uncurse Pts (Balrog Ring)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Dove Ribbon
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("DoveRibbon") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 10;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11j - Uncurse Pts (Dove Ribbon)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Falcon Knife Earrings
					UncursePtsAdd1 = 0;
					if (random[statitem](1,100) <= UncurseIntervalChance && Owner.CountInv("FalconKnifeEarrings") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 3;
						if (random[statitem](1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11k - Uncurse Pts (Falcon Knife Earrings)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);

					if (CallACS("GetBuffTimer",7) > 0) UncursePtsTotalAdded *= 1.25;
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11l - Uncurse Pts (Divine Avatar)]: %d", UncursePtsTotalAdded);

					if (CallACS("GetBuffTimer",128) > 0) UncursePtsTotalAdded *= 5;
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 11m - Uncurse Pts (GoE)]: %d", UncursePtsTotalAdded);
					
					if (CallACS("MiscVarCheckDECORATE",10055) == 1) UncursePtsTotalAdded *= 1.02;
					if (CallACS("MiscVarCheckDECORATE",10055) == 2) UncursePtsTotalAdded *= 1.045;
					if (CallACS("MiscVarCheckDECORATE",10055) == 3) UncursePtsTotalAdded *= 1.075;
					if (CallACS("MiscVarCheckDECORATE",10055) == 4) UncursePtsTotalAdded *= 1.11;
					if (CallACS("MiscVarCheckDECORATE",10055) >= 5) UncursePtsTotalAdded *= 1.15;
					if (CallACS("MiscVarCheckDECORATE",10056) == 1) UncursePtsTotalAdded *= 1.05;
					if (CallACS("MiscVarCheckDECORATE",10056) >= 2) UncursePtsTotalAdded *= 1.1125;
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 12 - Cleared of Mind]: %d", UncursePtsTotalAdded);
		
					RuinousPtsCurrent += UncursePtsTotalAdded;
					if (dvdsdebug_shielduncursedisplay) Console.Printf("    \cnShield Uncursing [Step 13 - Increment Uncurse Pts]: %d / %d\c-, Total Increment: %d%", RuinousPtsCurrent, RuinousPtsNeeded, UncursePtsTotalAdded);
					CallACS("MiscVarSetDECORATE",202,UncursePtsTotalAdded,1); // Add
					
					if (RuinousPtsCurrent >= RuinousPtsNeeded)
					{
						Owner.A_SetInventory("DivineShield", 1);
						Owner.A_SetInventory("RuinousShield", 0);
						owner.A_PrintBold("\c[Gold]CONGRADULATIONS!!\n\n\cfTHE RUINOUS SHIELD IS NO LONGER CURSED!\n\n\c[Gold]YOU NOW POSSESS AND WIELD THE MIGHTY 'DIVINE SHIELD'!!");
						owner.A_PlaySound("Uncursed",CHAN_7,1.0,0,ATTN_NONE);
						UncurseInterval = 0;
					}
				}
			}
			// Checks to make sure you cannot hold the Ruinous Shield if you already have a Divine Shield (the latter is the uncursed version of the former).
			if (CharacterClass == 2 && Owner.CountInv("DivineShield") > 0 && Owner.CountInv("RuinousShield") > 0) Owner.A_SetInventory("RuinousShield",0); // Flora
		}
	}
	
	// Actions to APPEND DoEffect() due to Register Limit Issues in the main function >.>
	void A_PSI1DoEffectMiscOptions()
	{
		int SleepTimer = CallACS("GetBuffTimer",20);

		int tempcvarvalue;
		CallACS("MiscVarSetDECORATE",100001,dvdsdebug_showmeleeinformation);
		CallACS("MiscVarSetDECORATE",100005,dvdsdebug_showstaminausestuff);
		CallACS("MiscVarSetDECORATE",100006,dvdsdebug_showmiscdmginformation);
		CallACS("MiscVarSetDECORATE",100007,dvdsdebug_accuracyspreadisplay);
		
		CallACS("MiscVarSetDECORATE",110001,dvdsperks_active);
		CallACS("MiscVarSetDECORATE",110002,dvds_allowtension);
		CallACS("MiscVarSetDECORATE",110003,dvds_allowtensionocdmg);
		CallACS("MiscVarSetDECORATE",110004,dvds_rnd_stealthlevel);
		CallACS("MiscVarSetDECORATE",110005,dvds_canseedsappear);
		CallACS("MiscVarSetDECORATE",110006,dvds_flora_ignorearmormadelevelcap);
		CallACS("MiscVarSetDECORATE",110007,dvds_monstercrisisattacks);
		CallACS("MiscVarSetDECORATE",110008,dvdsdebug_healitemdisplays);
		
		//***************
		//*Tension Speed*
		//***************
		if (TensionSpeedRatio <= 0) TensionSpeedRatio = 0;
		if (TensionSpeedRatio >= 1000) TensionSpeedRatio = 1000;

		tempcvarvalue = dvds_aeonstartlvl;
		if (tempcvarvalue < 0) tempcvarvalue = 0;
		if (tempcvarvalue > 200) tempcvarvalue = 200;
		CallACS("MiscVarSetDECORATE",197,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationOVERALL;
		if (tempcvarvalue < -50) tempcvarvalue = -50;
		if (tempcvarvalue > 50) tempcvarvalue = 50;
		CallACS("MiscVarSetDECORATE",169,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationEXP;
		if (tempcvarvalue < -50) tempcvarvalue = -50;
		if (tempcvarvalue > 50) tempcvarvalue = 50;
		CallACS("MiscVarSetDECORATE",52,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationStats;
		if (tempcvarvalue < -50) tempcvarvalue = -50;
		if (tempcvarvalue > 50) tempcvarvalue = 50;
		CallACS("MiscVarSetDECORATE",53,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationSpawnStealth;
		if (tempcvarvalue < -50) tempcvarvalue = -50;
		if (tempcvarvalue > 50) tempcvarvalue = 50;
		CallACS("MiscVarSetDECORATE",54,tempcvarvalue);


		tempcvarvalue = dvds_mapdifficultyinflationOVERALL2;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		if (tempcvarvalue > 5000) tempcvarvalue = 5000;
		CallACS("MiscVarSetDECORATE",5,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationEXP2;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		if (tempcvarvalue > 5000) tempcvarvalue = 5000;
		CallACS("MiscVarSetDECORATE",1,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationStats2;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		if (tempcvarvalue > 5000) tempcvarvalue = 5000;
		CallACS("MiscVarSetDECORATE",2,tempcvarvalue);

		tempcvarvalue = dvds_mapdifficultyinflationSpawnStealth2;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		if (tempcvarvalue > 5000) tempcvarvalue = 5000;
		CallACS("MiscVarSetDECORATE",3,tempcvarvalue);


		tempcvarvalue = dvds_aeonpointmultiplier;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		CallACS("MiscVarSetDECORATE",86,tempcvarvalue);

		tempcvarvalue = dvds_seedmultiplier;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		CallACS("MiscVarSetDECORATE",87,tempcvarvalue);

		tempcvarvalue = dvds_lvlstatmultiplier;
		if (tempcvarvalue < 1) tempcvarvalue = 1;
		CallACS("MiscVarSetDECORATE",146,tempcvarvalue);
		
		if (CallACS("MiscVarCheckDECORATE",171) > 0) CallACS("MiscVarSetDECORATE",171,1,2); // Ticks down the "Level Up" and "Stat Up" indicators on the new HUD after a level up occurs
		if (CallACS("MiscVarCheckDECORATE",2031) > 0) CallACS("MiscVarSetDECORATE",2031,1,2); // Ticks down the "MaxHP" gain timer
		if (CallACS("MiscVarCheckDECORATE",2032) > 0) CallACS("MiscVarSetDECORATE",2032,1,2); // Ticks down the "MaxMP" gain timer
		if (CallACS("MiscVarCheckDECORATE",2033) > 0) CallACS("MiscVarSetDECORATE",2033,1,2); // Ticks down the "AeonPts" gain timer
		if (CallACS("MiscVarCheckDECORATE",2034) > 0) CallACS("MiscVarSetDECORATE",2034,1,2); // Ticks down the "Strength" gain timer
		if (CallACS("MiscVarCheckDECORATE",2035) > 0) CallACS("MiscVarSetDECORATE",2035,1,2); // Ticks down the "Defense" gain timer
		if (CallACS("MiscVarCheckDECORATE",2036) > 0) CallACS("MiscVarSetDECORATE",2036,1,2); // Ticks down the "Sorcery" gain timer
		if (CallACS("MiscVarCheckDECORATE",2037) > 0) CallACS("MiscVarSetDECORATE",2037,1,2); // Ticks down the "Therapeusis" gain timer
		if (CallACS("MiscVarCheckDECORATE",2038) > 0) CallACS("MiscVarSetDECORATE",2038,1,2); // Ticks down the "Agility" gain timer
		if (CallACS("MiscVarCheckDECORATE",2039) > 0) CallACS("MiscVarSetDECORATE",2039,1,2); // Ticks down the "Deftness" gain timer

		if (CallACS("MiscVarCheckDECORATE",2040) > 0) CallACS("MiscVarSetDECORATE",2040,1,2); // Ticks down Buff/Debuff Message #1 Timer
		if (CallACS("MiscVarCheckDECORATE",2041) > 0) CallACS("MiscVarSetDECORATE",2041,1,2); // Ticks down Buff/Debuff Message #2 Timer
		if (CallACS("MiscVarCheckDECORATE",2042) > 0) CallACS("MiscVarSetDECORATE",2042,1,2); // Ticks down Buff/Debuff Message #3 Timer
		if (CallACS("MiscVarCheckDECORATE",2043) > 0) CallACS("MiscVarSetDECORATE",2043,1,2); // Ticks down Buff/Debuff Message #4 Timer
		if (CallACS("MiscVarCheckDECORATE",2044) > 0) CallACS("MiscVarSetDECORATE",2044,1,2); // Ticks down Buff/Debuff Message #5 Timer

		// [222] # of TOTAL Max HP gained during multiple level ups [for displays]
		// [223] # of TOTAL Max MP gained during multiple level ups [for displays]
		// [224] # of TOTAL Aeon Points gained during multiple level ups [for displays]
		// [225] # of TOTAL Agility Points gained during multiple level ups [for displays]
		// [226] # of TOTAL Defense Points gained during multiple level ups [for displays]
		// [227] # of TOTAL Deftness Points gained during multiple level ups [for displays]
		// [228] # of TOTAL Sorcery Points gained during multiple level ups [for displays]
		// [229] # of TOTAL Strength Points gained during multiple level ups [for displays]
		// [230] # of TOTAL Therapeusis Points gained during multiple level ups [for displays]

		if (CallACS("MiscVarCheckDECORATE",2031) <= 0) CallACS("MiscVarSetDECORATE",222,0);
		if (CallACS("MiscVarCheckDECORATE",2032) <= 0) CallACS("MiscVarSetDECORATE",223,0);
		if (CallACS("MiscVarCheckDECORATE",2033) <= 0) CallACS("MiscVarSetDECORATE",224,0);
		if (CallACS("MiscVarCheckDECORATE",2034) <= 0) CallACS("MiscVarSetDECORATE",225,0);
		if (CallACS("MiscVarCheckDECORATE",2035) <= 0) CallACS("MiscVarSetDECORATE",226,0);
		if (CallACS("MiscVarCheckDECORATE",2036) <= 0) CallACS("MiscVarSetDECORATE",227,0);
		if (CallACS("MiscVarCheckDECORATE",2037) <= 0) CallACS("MiscVarSetDECORATE",228,0);
		if (CallACS("MiscVarCheckDECORATE",2038) <= 0) CallACS("MiscVarSetDECORATE",229,0);
		if (CallACS("MiscVarCheckDECORATE",2039) <= 0) CallACS("MiscVarSetDECORATE",230,0);
		
		
		
		
		
		// [2500] In Menu or Not?
		// [2502] Unfreeze Player
		CallACS("MiscVarSetDECORATE",4,0);
		if (CallACS("MiscVarCheckDECORATE",2500) == 1 || SleepTimer > 0) CallACS("MiscVarSetDECORATE",4,1,1); // Freezes the player's actions if in the menu or was put to sleep.
		if (CallACS("MiscVarCheckDECORATE",4) > 0)
		{
			owner.player.cheats |= CF_FROZEN; // Turns on Freezing
			owner.player.cheats |= CF_TOTALLYFROZEN; // Turns on Total Freezing
			CallACS("DVDSSpecialArraySetDECORATE",9,1); // Prevents Dashing
			//Console.Printf("Player Frozen!");
			CallACS("MiscVarSetDECORATE",2502,0);
		}
		else
		{
			if (CallACS("MiscVarCheckDECORATE",2502) == 0)
			{
				owner.player.cheats &= ~CF_FROZEN; // Turns off Total Freezing
				owner.player.cheats &= ~CF_TOTALLYFROZEN; // Turns off Total Freezing
				CallACS("DVDSSpecialArraySetDECORATE",9,0); // Allows Dashing
				//Console.Printf("Player UnFrozen!");
				CallACS("MiscVarSetDECORATE",2502,1);
			}
		}
		//Console.Printf("[2502]: %d, [4]: %d", CallACS("MiscVarCheckDECORATE",2502), CallACS("MiscVarCheckDECORATE",4));
	}

	// Actions to APPEND DoEffect() due to Register Limit Issues in the main function >.> [Completion Checking/Aeon Point Giving)
	void A_PSI1DoEffectCountKSI()
	{
		//*******************************************
		// Gets Values for Accquired Kills & Secrets*
		//*******************************************
		int PlayerLevel = CallACS("StatCheck",0);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		
		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			CallACS("ArrayVarSetDECORATE",0,level.levelnum,(level.total_monsters - level.killed_monsters));
			CallACS("ArrayVarSetDECORATE",1,level.levelnum,level.killed_monsters);
			CallACS("ArrayVarSetDECORATE",2,level.levelnum,level.found_secrets);
			CallACS("ArrayVarSetDECORATE",3,level.levelnum,level.found_items);
		}
		if (ModType == 1 && (level.levelnum >= 1100 && level.levelnum <= 1199)) // Deus Vult 1 only
		{
			if (CallACS("SpecialGameFlagsCheckDECORATE",10000) != 1)
			{
				CallACS("ArrayVarSetDECORATE",0,level.levelnum,(level.total_monsters - level.killed_monsters));
				CallACS("ArrayVarSetDECORATE",1,level.levelnum,level.killed_monsters);
				CallACS("ArrayVarSetDECORATE",2,level.levelnum,level.found_secrets);
				CallACS("ArrayVarSetDECORATE",3,level.levelnum,level.found_items);
			}
		}
		if (ModType == 2 && (level.levelnum >= 1200 && level.levelnum <= 1299)) // Deus Vult 2 only
		{
			CallACS("ArrayVarSetDECORATE",0,level.levelnum,(level.total_monsters - level.killed_monsters));
			CallACS("ArrayVarSetDECORATE",1,level.levelnum,level.killed_monsters);
			CallACS("ArrayVarSetDECORATE",2,level.levelnum,level.found_secrets);
			CallACS("ArrayVarSetDECORATE",3,level.levelnum,level.found_items);
		}

		int i = 0;
		int tempaeonpts;
		let playeractor = AetheriusPlayerPawn(owner);
		//*************************
		//*Aeon Point Distribution*
		//*************************
		int forstart, forend;
		int totalkills, totalsecrets, totalitems = 0;
		int aeontogivekills, aeontogivesecrets, aeontogiveitems = 0;
		int aeontogivekillsyet, aeontogivesecretsyet, aeontogiveitemsyet = 0;
		if (playeractor)
		{
			if (dvds_aeonpointbonus == 1)
			{
				if (ModType == 0) { forstart = 0; forend = 151; }
				if (ModType == 1) { forstart = 1100; forend = 1105; }
				if (ModType == 2) { forstart = 1200; forend = 1215; }
				
				// Kills
				totalkills = 0;
				for (i = forstart; i < forend; i++) { totalkills += CallACS("ArrayVarCheckDECORATE",1,i); }
				CallACS("MiscVarSetDECORATE",63,totalkills);
				aeontogivekills = totalkills / dvds_killsforaeonpts;
				aeontogivekillsyet = CallACS("MiscVarCheckDECORATE",62);
				
				if (aeontogivekillsyet < aeontogivekills)
				{
					tempaeonpts = 1;
					tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
					
					CallACS("MiscVarSetDECORATE",25,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",224,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",2033,105);
					aeontogivekillsyet += 1;
					
					if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197)) 
					{
						owner.A_PlaySound("misc/miniquestcomplete",CHAN_AUTO,1.5,false,ATTN_NONE);
						owner.A_Print(String.Format("\c[orange]You have gained %d Aeon Point[s] for killing enough monsters!\n\n\c[orange]Remember to allocate your Aeon Points as soon as possible...", tempaeonpts), 2.75, "DVDSSMLFONT");
					}
					tempaeonpts = 0;
				}
				if (dvdsdebug_aeonbonusdisplays) Console.Printf("\c[brick]totalkills: %d (%d) / %d, (GiveYet / Give: %d / %d)", totalkills, level.killed_monsters, dvds_killsforaeonpts, aeontogivekillsyet, aeontogivekills);
				CallACS("MiscVarSetDECORATE",62,aeontogivekillsyet);
				CallACS("MiscVarSetDECORATE",61,aeontogivekills);
				
				// Secrets
				totalsecrets = 0;
				for (i = forstart; i < forend; i++) { totalsecrets += CallACS("ArrayVarCheckDECORATE",2,i); }
				CallACS("MiscVarSetDECORATE",64,totalsecrets);
				aeontogivesecrets = totalsecrets / dvds_secretsforaeonpts;
				aeontogivesecretsyet = CallACS("MiscVarCheckDECORATE",60);

				if (aeontogivesecretsyet < aeontogivesecrets)
				{
					tempaeonpts = 1;
					tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
					
					CallACS("MiscVarSetDECORATE",25,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",224,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",2033,105);
					aeontogivesecretsyet += 1;
					
					if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197)) 
					{
						owner.A_PlaySound("misc/miniquestcomplete",CHAN_AUTO,1.5,false,ATTN_NONE);
						owner.A_Print(String.Format("\c[orange]You have gained %d Aeon Point[s] for finding enough secrets!\n\n\c[orange]Remember to allocate your Aeon Points as soon as possible...", tempaeonpts), 2.75, "DVDSSMLFONT");
					}
					tempaeonpts = 0;
				}
				if (dvdsdebug_aeonbonusdisplays) Console.Printf("\c[gold]totalsecrets: %d (%d) / %d, (GiveYet / Give: %d / %d)", totalsecrets, level.found_secrets, dvds_secretsforaeonpts, aeontogivesecretsyet, aeontogivesecrets);
				CallACS("MiscVarSetDECORATE",60,aeontogivesecretsyet);
				CallACS("MiscVarSetDECORATE",59,aeontogivesecrets);
				
				// Items
				totalitems = 0;
				for (i = forstart; i < forend; i++) { totalitems += CallACS("ArrayVarCheckDECORATE",3,i); }
				CallACS("MiscVarSetDECORATE",56,totalitems);
				aeontogiveitems = totalitems / dvds_itemsforaeonpts;
				aeontogiveitemsyet = CallACS("MiscVarCheckDECORATE",58);
				
				if (aeontogiveitemsyet < aeontogiveitems)
				{
					tempaeonpts = 1;
					tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
					
					CallACS("MiscVarSetDECORATE",25,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",224,tempaeonpts,1);
					CallACS("MiscVarSetDECORATE",2033,105);
					aeontogiveitemsyet += 1;
					
					if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197)) 
					{
						owner.A_PlaySound("misc/miniquestcomplete",CHAN_AUTO,1.5,false,ATTN_NONE);
						owner.A_Print(String.Format("\c[orange]You have gained %d Aeon Point[s] for finding special items!\n\n\c[orange]Remember to allocate your Aeon Points as soon as possible...", tempaeonpts), 2.75, "DVDSSMLFONT");
					}
					tempaeonpts = 0;
				}
				if (dvdsdebug_aeonbonusdisplays) Console.Printf("\c[lightblue]totalitems: %d (%d) / %d, (GiveYet / Give: %d / %d)", totalitems, level.found_items, dvds_itemsforaeonpts, aeontogiveitemsyet, aeontogiveitems);
				CallACS("MiscVarSetDECORATE",58,aeontogiveitemsyet);
				CallACS("MiscVarSetDECORATE",57,aeontogiveitems);
			}
			if (CallACS("MiscVarCheckDECORATE",25) < 1) CallACS("MiscVarSetDECORATE",24,0);
			if (CallACS("MiscVarCheckDECORATE",31) > 511 && 
					CallACS("MiscVarCheckDECORATE",32) > 511 && 
					CallACS("MiscVarCheckDECORATE",33) > 511 && 
					CallACS("MiscVarCheckDECORATE",34) > 511 && 
					CallACS("MiscVarCheckDECORATE",35) > 511 && 
					CallACS("MiscVarCheckDECORATE",36) > 511) CallACS("MiscVarSetDECORATE",24,0);
		}
	}
	
	// Armor Checking and Palette Assignment
	void A_PSI1DoEffectArmorChecks()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		//************************************************
		//*Marine's Armor Checks (for color translations)*
		//************************************************
		if (playeractor)
		{
			CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5); // CurrentArmorClass
			CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9); // CurrentMaxArmor
			if (ClassCheck >= 2)
			{
				if (CurrentArmorClass == 6)
				{
					owner.A_SetInventory("DSDiamondArmorClass2", 1);
					owner.A_SetInventory("DSNoArmorClass", 0);
					owner.A_SetInventory("DSGreenArmorClass", 0);
					owner.A_SetInventory("DSBlueArmorClass", 0);
					owner.A_SetInventory("DSStoneArmorClass1", 0);
					owner.A_SetInventory("DSDiamondArmorClass1", 0);
					owner.A_SetInventory("DSStoneArmorClass2", 0);
					if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,21); 
				}
				else
				{
					if (CurrentArmorClass == 5)
					{
						owner.A_SetInventory("DSStoneArmorClass2", 1);
						owner.A_SetInventory("DSNoArmorClass", 0);
						owner.A_SetInventory("DSGreenArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
						if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,20); 
					}
					else
					{
						if (CurrentArmorClass == 4)
						{
							owner.A_SetInventory("DSDiamondArmorClass1", 1);
							owner.A_SetInventory("DSNoArmorClass", 0);
							owner.A_SetInventory("DSGreenArmorClass", 0);
							owner.A_SetInventory("DSBlueArmorClass", 0);
							owner.A_SetInventory("DSStoneArmorClass1", 0);
							owner.A_SetInventory("DSStoneArmorClass2", 0);
							owner.A_SetInventory("DSDiamondArmorClass2", 0);
							if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,21); 
						}
						else
						{
							if (CurrentArmorClass == 3)
							{
								owner.A_SetInventory("DSStoneArmorClass1", 1);
								owner.A_SetInventory("DSNoArmorClass", 0);
								owner.A_SetInventory("DSGreenArmorClass", 0);
								owner.A_SetInventory("DSBlueArmorClass", 0);
								owner.A_SetInventory("DSDiamondArmorClass1", 0);
								owner.A_SetInventory("DSStoneArmorClass2", 0);
								owner.A_SetInventory("DSDiamondArmorClass2", 0);
								if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,20); 
							}
							else
							{
								if (CurrentArmorClass == 2)
								{
									owner.A_SetInventory("DSBlueArmorClass", 1);
									owner.A_SetInventory("DSNoArmorClass", 0);
									owner.A_SetInventory("DSGreenArmorClass", 0);
									owner.A_SetInventory("DSStoneArmorClass1", 0);
									owner.A_SetInventory("DSDiamondArmorClass1", 0);
									owner.A_SetInventory("DSStoneArmorClass2", 0);
									owner.A_SetInventory("DSDiamondArmorClass2", 0);
									if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,19); 
								}
								else
								{
									if (CurrentArmorClass == 1)
									{
										owner.A_SetInventory("DSGreenArmorClass", 1);
										owner.A_SetInventory("DSNoArmorClass", 0);
										owner.A_SetInventory("DSBlueArmorClass", 0);
										owner.A_SetInventory("DSStoneArmorClass1", 0);
										owner.A_SetInventory("DSDiamondArmorClass1", 0);
										owner.A_SetInventory("DSStoneArmorClass2", 0);
										owner.A_SetInventory("DSDiamondArmorClass2", 0);
										if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,18); 
									}
									else
									{
										owner.A_SetInventory("DSNoArmorClass", 1);
										owner.A_SetInventory("DSGreenArmorClass", 0);
										owner.A_SetInventory("DSBlueArmorClass", 0);
										owner.A_SetInventory("DSStoneArmorClass1", 0);
										owner.A_SetInventory("DSDiamondArmorClass1", 0);
										owner.A_SetInventory("DSStoneArmorClass2", 0);
										owner.A_SetInventory("DSDiamondArmorClass2", 0);
										if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) Thing_SetTranslation(Player1TID,17); 
									}
								}
							}
						}
					}
				}

				if (owner.CountInv("BasicArmor") <= 0)
				{
					CurrentArmorClass = 0;
					CurrentMaxArmor = 0;
					if (owner.CountInv("DSNoArmorClass") == 0)
					{
						owner.A_SetInventory("DSNoArmorClass", 1);
						owner.A_SetInventory("DSGreenArmorClass", 0);
						owner.A_SetInventory("DSBlueArmorClass", 0);
						owner.A_SetInventory("DSStoneArmorClass1", 0);
						owner.A_SetInventory("DSDiamondArmorClass1", 0);
						owner.A_SetInventory("DSStoneArmorClass2", 0);
						owner.A_SetInventory("DSDiamondArmorClass2", 0);
					}
				}
				CallACS("OtherVarSetDECORATE",5,CurrentArmorClass); // CurrentArmorClass
				CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor); // CurrentMaxArmor
			}
		}
	}
	
		void A_PerkRespecCheckEX(int perknumber = 0, int experknumber = 0)
		{
			int tempvalue1;
			int tempvalue2;
			if (CallACS("PerkPtsCheckDECORATE",perknumber) > 0)
			{
				owner.A_PlaySound("menu/respecperks",CHAN_BODY,1.0,0,ATTN_NORM);

				CallACS("MiscVarSetDECORATE",perknumber,0); // Set back to Zero
				tempvalue1 = CallACS("PerkPtsCheckDECORATE",perknumber);
				tempvalue2 = CallACS("MiscVarCheckDECORATE",42);
				CallACS("MiscVarSetDECORATE",25,tempvalue1,1);
				CallACS("MiscVarSetDECORATE",42,tempvalue1,2);
				CallACS("PerkPtsSetDECORATE",perknumber,0);
				if (dvdsdebug_perkrespecdisplays) Console.Printf("Perk#: %d, OldValue: %d, NewValue: %d, OldOtherPerkPtsUsed: %d, OtherPerkPtsUsed: %d", perknumber, tempvalue1, CallACS("PerkPtsCheckDECORATE",perknumber), tempvalue2, CallACS("MiscVarCheckDECORATE",42));

				if (experknumber != 0 && CallACS("PerkPtsCheckDECORATE",experknumber) > 0)
				{
					CallACS("MiscVarSetDECORATE",experknumber,0); // Set back to Zero
					tempvalue1 = CallACS("PerkPtsCheckDECORATE",experknumber);
					tempvalue2 = CallACS("MiscVarCheckDECORATE",42);
					CallACS("MiscVarSetDECORATE",25,tempvalue1,1);
					CallACS("MiscVarSetDECORATE",42,tempvalue1,2);
					CallACS("PerkPtsSetDECORATE",experknumber,0);
					if (dvdsdebug_perkrespecdisplays) Console.Printf("Perk#: %d, OldValue: %d, NewValue: %d, OldOtherPerkPtsUsed: %d, OtherPerkPtsUsed: %d", experknumber, tempvalue1, CallACS("PerkPtsCheckDECORATE",experknumber), tempvalue2, CallACS("MiscVarCheckDECORATE",42));
				}
			}
			else
			{
				owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}

		void A_PerkRespecCheck(int perknumber = 0)
		{
			if (CallACS("PerkPtsCheckDECORATE",perknumber) > 0)
			{
				owner.A_PlaySound("menu/respecperks",CHAN_BODY,1.0,0,ATTN_NORM);

				CallACS("MiscVarSetDECORATE",perknumber,0); // Set back to Zero
				int tempvalue1 = CallACS("PerkPtsCheckDECORATE",perknumber);
				int tempvalue2 = CallACS("MiscVarCheckDECORATE",42);
				CallACS("MiscVarSetDECORATE",25,tempvalue1,1);
				CallACS("MiscVarSetDECORATE",42,tempvalue1,2);
				CallACS("PerkPtsSetDECORATE",perknumber,0);
				if (dvdsdebug_perkrespecdisplays) Console.Printf("Perk#: %d, OldValue: %d, NewValue: %d, OldOtherPerkPtsUsed: %d, OtherPerkPtsUsed: %d", perknumber, tempvalue1, CallACS("PerkPtsCheckDECORATE",perknumber), tempvalue2, CallACS("MiscVarCheckDECORATE",42));
			}
			else
			{
				owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
	
	void A_PSI1DoEffectQuickuseVimstone()
	{
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		if (owner.CountInv("TryingToQuickUseVimstone") > 0)
		{
			int check = 0;
			if (owner.CountInv("LesserVimstone") > 0) check++;
			if (owner.CountInv("GreaterVimstone") > 0) check++;
			if (check > 0)
			{
				if (TensionLevel >= 7) { owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM); } // If Tension is Maxed, do not use an item.
				else
				{
					if (TensionLevel >= 4) // If Tension is "100" or above, prioritize a Greater Vimstone only.
					{
						if (owner.CountInv("GreaterVimstone") > 0) 
						{
							ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
							owner.A_PlaySound("use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
							owner.A_TakeInventory("GreaterVimstone",1);
						}
						else { owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM); }
					}
					else
					{
						if (owner.CountInv("LesserVimstone") > 0) 
						{
							ACS_NamedExecuteAlways("SetTensionLevel",0,2,1);
							owner.A_PlaySound("use_lesservimstone",CHAN_BODY,1.0,0,ATTN_NORM);
							owner.A_TakeInventory("LesserVimstone",1);
						}
						else 
						{
							if (owner.CountInv("GreaterVimstone") > 0) 
							{
								ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
								owner.A_PlaySound("use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
								owner.A_TakeInventory("GreaterVimstone",1);
							}
							else { owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM); }
						}
					}
				}
			}
			else 
			{ 
				owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM); 
			}
			
			owner.A_SetInventory("TryingToQuickUseVimstone", 0);
		}
	}
	
	void A_PSI1DoEffectUnspecPerks()
	{
		if (owner.CountInv("PerkUseSound") > 0)
		{
			owner.A_SetInventory("PerkUseSound", 0);
			owner.A_PlaySound("DraQue/gainperk",CHAN_WEAPON,frandom[statitem2](0.6,0.7),0,ATTN_NORM);
		}

		int perknumber;
		int tempvalue1;
		CharacterClass = CallACS("CheckCharacterClass");
		if (owner.CountInv("TryingToRepecAeonPtsPerks") > 0)
		{
			int ifnotinperksmenu = 1;
			int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
			int UsingInGameMenuSelection = CallACS("MenuVarCheckDECORATE",1);
			int UsingInGameSubMenu = CallACS("MenuVarCheckDECORATE",4);
			int UsingInGameSubMenu2 = CallACS("MenuVarCheckDECORATE",5);
			if (!dvds_aeonptsrefund)
			{
				owner.A_PrintBold("\cfAeon point refunds disabled in settings!");
				owner.A_PlaySound("inv_fail",CHAN_WEAPON,1.0,0,ATTN_NORM);
			}
			else
			{
				if (UsingInGameSubMenu == 3)
				{
					if (UsingInGameMenuSelection == 0) owner.A_PlaySound("inv_fail",CHAN_WEAPON,1.0,0,ATTN_NORM);

					if (UsingInGameSubMenu2 == 0) // General Stat Perks
					{
						if (UsingInGameMenuSelection == 1) A_PerkRespecCheckEX(10001,10002); // LifeUp [5]
						if (UsingInGameMenuSelection == 2) A_PerkRespecCheckEX(10003,10004); // MagiUp [5]
						if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEX(10005,10006); // StamUp [5]
						if (UsingInGameMenuSelection == 4) A_PerkRespecCheckEX(10007,10008); // DodgeMore [5]
						if (UsingInGameMenuSelection == 5) A_PerkRespecCheckEX(10009,10010); // JumpMore [5]
						if (UsingInGameMenuSelection == 6) A_PerkRespecCheckEX(10011,10012); // PsycheFast [5]
						if (UsingInGameMenuSelection == 7) A_PerkRespecCheckEX(10013,10014); // RegenHPFast [5]
						if (UsingInGameMenuSelection == 8) A_PerkRespecCheckEX(10015,10016); // RegenMPFast [5]
						if (UsingInGameMenuSelection == 9) A_PerkRespecCheckEX(10017,10018); // RegenStamFast [5]
						if (UsingInGameMenuSelection == 10) A_PerkRespecCheckEX(10045,10046); // OnTheMove [5]
					}

					if (UsingInGameSubMenu2 == 1) // Character-Specfic Stat Perks
					{
						if (CharacterClass == 0) // Deggaris
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheck(10004); // MagiUp EX [2]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheck(10008); // DodgeMore EX [1]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheck(10010); // JumpMore EX [2]
						}
						if (CharacterClass == 1) // Illucia
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheck(10006); // StamUp EX [2]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheck(10008); // DodgeMore EX [2]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheck(10010); // JumpMore EX [1]
						}
						if (CharacterClass == 2) // Flora
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheck(10002); // LifeUp EX [2]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheck(10012); // PsycheFast EX [2]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheck(10006); // StamUp EX [1]
						}
						if (CharacterClass == 8) // Ailish
						{
						}
						if (CharacterClass == 9) // Petra
						{
							//if (UsingInGameMenuSelection == 1) A_PerkRespecCheck(10008); // DodgeMore EX [1]
						}
					}

					if (UsingInGameSubMenu2 == 2) // Weapon Perks
					{
						if (CharacterClass == 0 || CharacterClass == 1) // Deggaris/Illucia Only
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheckEx(10051,10052); // Berserker Fit [5]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheckEx(10019,10020); // Bullet Accuracy [5]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEx(10021,10022); // Pellet Accuracy [5]
							if (UsingInGameMenuSelection == 4) A_PerkRespecCheckEx(10023,10024); // Plasma Accuracy [5]
							if (UsingInGameMenuSelection == 5) A_PerkRespecCheckEx(10025,10026); // Demolitions Expert [5]
							if (UsingInGameMenuSelection == 6) A_PerkRespecCheckEx(10047,10048); // Bottomless Magazines [5]
						}
						if (CharacterClass == 0) // Deggaris
						{
							if (UsingInGameMenuSelection == 7) A_PerkRespecCheck(10020); // Bullet Accuracy EX [2]
							if (UsingInGameMenuSelection == 8) A_PerkRespecCheck(10026); // Demolitions Expert EX [1]
							if (UsingInGameMenuSelection == 9) A_PerkRespecCheck(10029); // BFG Attunement [2]
						}
						if (CharacterClass == 1) // Illucia
						{
							if (UsingInGameMenuSelection == 7) A_PerkRespecCheck(10022); // Pellet Accuracy EX [2]
							if (UsingInGameMenuSelection == 8) A_PerkRespecCheck(10024); // Plasma Accuracy EX [1]
							if (UsingInGameMenuSelection == 9) A_PerkRespecCheck(10027); // Karasawa Attunement [2]
						}
						if (CharacterClass == 2) // Flora
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheckEx(10031,10032); // Archery Mastery [5]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheckEx(10053,10054); // Wand/Staff Mastery [5]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEx(10033,10034); // Soul Mastery [5]
							if (UsingInGameMenuSelection == 4) A_PerkRespecCheckEx(10035,10036); // Martial Arts Mastery [5]
						}
						if (CharacterClass == 8) // Ailish
						{
						}
						if (CharacterClass == 9) // Petra
						{
						}
					}

					if (UsingInGameSubMenu2 == 3) // Item Perks
					{
						if (UsingInGameMenuSelection == 1) A_PerkRespecCheck(10049); // Medicinal Prowess [5]
						if (UsingInGameMenuSelection == 2) A_PerkRespecCheck(10050); // Powerup Powerhouse [4]
						if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEx(10059,10060); // Pack Mule [5]
					}

					if (UsingInGameSubMenu2 == 4) // Misc Perks
					{
						if (CharacterClass == 0 || CharacterClass == 1) // Deggaris/Illucia Only
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheckEx(10041,10042); // Mortal Hit Survivability Blast Wave [1]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheckEx(10039,10040); // Mortal Hit Survivability Mana Recovery [1]
							if (CharacterClass == 0) // Deggaris
							{
								if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEx(10043,10044); // Mortal Hit Survivability "Death Rage" [3]
							}
							if (CharacterClass == 1) // Illucia
							{
								if (UsingInGameMenuSelection == 3) A_PerkRespecCheck(10042); // Mortal Hit Survivability Blast Wave EX [1]
							}
							if (UsingInGameMenuSelection == 4) A_PerkRespecCheckEx(10037,10038); // Mortal Hit Survivability Psyche Up [7]
							if (UsingInGameMenuSelection == 5) A_PerkRespecCheckEx(10055,10056); // Cleared of Mind [5]
							if (UsingInGameMenuSelection == 6) A_PerkRespecCheckEx(10057,10058); // Villain Killer [5]
						}

						if (CharacterClass == 2) // Flora
						{
							if (UsingInGameMenuSelection == 1) A_PerkRespecCheckEx(10039,10040); // Mortal Hit Survivability Mana Recovery [1]
							if (UsingInGameMenuSelection == 2) A_PerkRespecCheck(10040); // Mortal Hit Survivability Mana Recovery EX [1]
							if (UsingInGameMenuSelection == 3) A_PerkRespecCheckEx(10037,10038); // Mortal Hit Survivability Psyche Up [7]
							if (UsingInGameMenuSelection == 4) A_PerkRespecCheckEx(10055,10056); // Cleared of Mind [5]
							if (UsingInGameMenuSelection == 5) A_PerkRespecCheckEx(10057,10058); // Villain Killer [5]
							if (UsingInGameMenuSelection == 6) A_PerkRespecCheck(10058); // Villain Killer EX [2]
						}
						if (CharacterClass == 8) // Ailish
						{
						}
						if (CharacterClass == 9) // Petra
						{
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",42) > 0)
					{
						owner.A_PlaySound("menu/respecperks",CHAN_WEAPON,1.0,0,ATTN_NORM);

						for (perknumber = 10000; perknumber < 10251; perknumber++) 
						{
							CallACS("MiscVarSetDECORATE",perknumber,0); 
							CallACS("PerkPtsSetDECORATE",perknumber,0); 
						}
	
						CallACS("MiscVarSetDECORATE",25,CallACS("MiscVarCheckDECORATE",42),1);
						owner.A_PrintBold(String.Format("\cfAll Perks Reset and Aeon Points [%d] Restored.", CallACS("MiscVarCheckDECORATE",42)));
						CallACS("MiscVarSetDECORATE",42,0);
					}
					else
					{
						owner.A_PrintBold("\cfNo Aeons Points Have Been Put Into Your Perks!");
						owner.A_PlaySound("inv_fail",CHAN_WEAPON,1.0,0,ATTN_NORM);
					}

				}
			}
			
			owner.A_SetInventory("TryingToRepecAeonPtsPerks", 0);
		}

		if (owner.CountInv("TryingToRepecAeonPts") > 0)
		{
			if (!dvds_aeonptsrefund)
			{
				owner.A_PrintBold("\cfAeon point refunds disabled in settings!");
				owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
			else
			{
				int points;
				points += CallACS("MiscVarCheckDECORATE",631);
				points += CallACS("MiscVarCheckDECORATE",632);
				points += CallACS("MiscVarCheckDECORATE",633);
				points += CallACS("MiscVarCheckDECORATE",634);
				points += CallACS("MiscVarCheckDECORATE",635);
				points += CallACS("MiscVarCheckDECORATE",636);
				if (points > 0)
				{
					owner.A_PlaySound("menu/respecperks",CHAN_BODY,1.0,0,ATTN_NORM);
					CallACS("MiscVarSetDECORATE",31,CallACS("MiscVarCheckDECORATE",631),2); CallACS("MiscVarSetDECORATE",631,0);
					CallACS("MiscVarSetDECORATE",32,CallACS("MiscVarCheckDECORATE",632),2); CallACS("MiscVarSetDECORATE",632,0);
					CallACS("MiscVarSetDECORATE",33,CallACS("MiscVarCheckDECORATE",633),2); CallACS("MiscVarSetDECORATE",633,0);
					CallACS("MiscVarSetDECORATE",34,CallACS("MiscVarCheckDECORATE",634),2); CallACS("MiscVarSetDECORATE",634,0);
					CallACS("MiscVarSetDECORATE",35,CallACS("MiscVarCheckDECORATE",635),2); CallACS("MiscVarSetDECORATE",635,0);
					CallACS("MiscVarSetDECORATE",36,CallACS("MiscVarCheckDECORATE",636),2); CallACS("MiscVarSetDECORATE",636,0);
					
					CallACS("MiscVarSetDECORATE",25,CallACS("MiscVarCheckDECORATE",43),1);
					owner.A_PrintBold(String.Format("\cfStats Have Been Reset and Aeon Points [%d] Restored.", CallACS("MiscVarCheckDECORATE",43)));
					CallACS("MiscVarSetDECORATE",43,0);
				}
				else
				{
					owner.A_PrintBold("\cfNo Aeons Points Have Been Put Into Your Stats!");
					owner.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
				}
			}
			owner.A_SetInventory("TryingToRepecAeonPts", 0);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);

		// Perks
		int perks3mastered;
		int LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLvl = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLvl = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLvl = CallACS("MiscVarCheckDECORATE",10006);
		int DodgeMorePerkLvl = CallACS("MiscVarCheckDECORATE",10007);
		int DodgeMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10008);
		int JmpMorePerkLvl = CallACS("MiscVarCheckDECORATE",10009);
		int JmpMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10010);
		int PsychFstPerkLvl = CallACS("MiscVarCheckDECORATE",10011);
		int PsychFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10012);
		int RegHPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10013);
		int RegHPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10014);
		int RegMPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10015);
		int RegMPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10016);
		int RegStamFastLvl = CallACS("MiscVarCheckDECORATE",10017);
		int RegStamFastEXLvl = CallACS("MiscVarCheckDECORATE",10018);
		int BulletAccPerkLvl = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccEXPerkLvl = CallACS("MiscVarCheckDECORATE",10020);
		//
		int OTMPerkLvl = CallACS("MiscVarCheckDECORATE",10045);
		int OTMEXPerkLvl = CallACS("MiscVarCheckDECORATE",10046);
		//
		int WandMastPerkLvl = CallACS("MiscVarCheckDECORATE",10053);
		int WandMastEXPerkLvl = CallACS("MiscVarCheckDECORATE",10054);
		int ClearMindPerkLvl = CallACS("MiscVarCheckDECORATE",10055);
		int ClearMindEXPerkLvl = CallACS("MiscVarCheckDECORATE",10056);

		// Strife
		int StrifeStamLvl = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuLvl = CallACS("MiscVarCheckDECORATE",318);

		// Buff Checks
		int NVLightTimer = CallACS("GetBuffTimer",0);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int FlightTimer = CallACS("GetBuffTimer",2);
		int StealthTimer = CallACS("GetBuffTimer",3);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int FearAuraTimer = CallACS("GetBuffTimer",6);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int SpreadAura1Timer = CallACS("GetBuffTimer",8);
		int SpreadAura2Timer = CallACS("GetBuffTimer",9);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int CorrosionTimer = CallACS("GetBuffTimer",17);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int RadSuitTimer = CallACS("GetBuffTimer",22);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int RegenerationTimer = CallACS("GetBuffTimer",24);
		int GoETimer = CallACS("GetBuffTimer",129);

		int InvisiblityLevel = 0;
		double InvisFactor = 1.0;
		double InvisBaseAmt = 1.0;
		if (Owner.CountInv("PowerInvisibility") > 0 || Owner.CountInv("InvisiblitySpell") > 0)
		{
			if (random[statitem](1,100) <= 35)
			{
				InvisiblityLevel++;
				if (random[statitem](1,100) <= 25)
				{
					InvisiblityLevel++;
					if (random[statitem](1,100) <= 20)
					{
						InvisiblityLevel++;
						if (random[statitem](1,100) <= 10)
						{
							InvisiblityLevel++;
						}
					}
				}
			}
		}
		int InvisIgnored = random[statitem](1,3);

		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czPlayerStatItem input [STEP 5 (\cwsuper.DamageMobj\cz)]\c-: \cydmg = %d\c-)", damage);

			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 10.00;
			if (CharacterClass == 0) LVLFactor = 1.00 + (PlayerLevel * .00117);				// Deggaris	(1 LVL = +0.117% Damage Dealt)
			if (CharacterClass == 1) LVLFactor = 1.00 + (PlayerLevel * .000863);			// Illucia	(1 LVL = +0.0863% Damage Dealt)
			if (CharacterClass == 2) LVLFactor = 1.00 + (PlayerLevel * .0011577);			// Flora		(1 LVL = +0.11577% Damage Dealt)
			if (CharacterClass == 8) LVLFactor = 1.00 + (PlayerLevel * .000825);			// Ailish		(1 LVL = +0.0825% Damage Dealt)
			if (CharacterClass == 9) LVLFactor = 1.00 + (PlayerLevel * .001075);			// Petra		(1 LVL = +0.1075% Damage Dealt)
			if (LVLfactor > LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Strength
			int PlayerSTR = CallACS("StatCheck",7);
			double STRfactor = 1.0; double STRfactorclamp = 10.00;
			if (damageType != 'Magic' || damageType != 'Eldritch')
			{
				if (CharacterClass == 0) STRfactor = 1.00 + (PlayerSTR * .006667);			// Deggaris	(1 STR = +0.6667~% Damage Dealt)
				if (CharacterClass == 1) STRfactor = 1.00 + (PlayerSTR * .005);					// Illucia	(1 STR = +0.5% Damage Dealt)
				if (CharacterClass == 2) STRfactor = 1.00 + (PlayerSTR * .003334);			// Flora		(1 STR = +0.3334~% Damage Dealt)
				if (CharacterClass == 8) STRfactor = 1.00 + (PlayerSTR * .003);					// Ailish		(1 STR = +0.3% Damage Dealt)
				if (CharacterClass == 9) STRfactor = 1.00 + (PlayerSTR * .00625);				// Petra		(1 STR = +0.625% Damage Dealt)
			}
			if (STRfactor > STRfactorclamp) STRfactor = STRfactorclamp;

			// Check Sorcery
			int PlayerSOR = CallACS("StatCheck",6);
			double SORfactor = 1.0; double SORfactorclamp = 10.00;
			if (damageType == 'Magic' || damageType == 'Eldritch')
			{
				if (CharacterClass == 0) SORfactor = 1.00 + (PlayerSOR * .003334);			// Deggaris	(1 SOR = +0.3334~% Damage Dealt)
				if (CharacterClass == 1) SORfactor = 1.00 + (PlayerSOR * .005);					// Illucia	(1 SOR = +0.5% Damage Dealt)
				if (CharacterClass == 2) SORfactor = 1.00 + (PlayerSOR * .006667);			// Flora		(1 SOR = +0.6667~% Damage Dealt)
				if (CharacterClass == 8) SORfactor = 1.00 + (PlayerSOR * .00625);				// Ailish		(1 SOR = +0.625% Damage Dealt)
				if (CharacterClass == 9) SORfactor = 1.00 + (PlayerSOR * .003);					// Petra		(1 SOR = +0.3% Damage Dealt)
			}
			if (SORfactor > SORfactorclamp) SORfactor = SORfactorclamp;

			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 5.0;
			if (dvds_musou_powertripmode == 2) MusouFactor = 10.0;

			// Hellcore Level Checker
			double HellcoreLevelFactor = 1.0;
			int HellcoreType = 0; 
			int HellcoreLevel = 0;
			// Slot 4 Hellcore Weapons
			if (damageType == 'ImpClaw') HellcoreType = 96;
			if (damageType == 'DarkImpClaw') HellcoreType = 97;
			if (damageType == 'CacodemonEye') HellcoreType = 98;
			if (damageType == 'CacolanternEye') HellcoreType = 99;
			if (damageType == 'AbaddonEye') HellcoreType = 100;
			// Slot 5 Hellcore Weapons
			if (damageType == 'KnightFist') HellcoreType = 101;
			if (damageType == 'BaronFist') HellcoreType = 102;
			if (damageType == 'BelphegorFist') HellcoreType = 103;
			if (damageType == 'BruiserFist') HellcoreType = 104;
			if (damageType == 'ArchonFist') HellcoreType = 105;
			if (damageType == 'PyroFist') HellcoreType = 106;
			// Slot 6 Hellcore Weapons
			if (damageType == 'IncarnateSkull') HellcoreType = 107;
			if (damageType == 'ArchvileHand') HellcoreType = 108;
			if (damageType == 'DiabloistHand') HellcoreType = 109;
			if (damageType == 'BalrogFist') HellcoreType = 110;
			if (damageType == 'ElementalEye') HellcoreType = 111;
			if (damageType == 'OverlordEye') HellcoreType = 112;
			if (HellcoreType != 0)
			{
				HellcoreLevel = CallACS("MiscVarCheckDECORATE",HellcoreType);
				if (HellcoreLevel > 0)
				{
					double HellcoreBaseMulti = 1.5;
					if (HellcoreLevel >= 1) HellcoreLevelFactor = HellcoreBaseMulti;
					if (HellcoreLevel >= 2) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 3) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 4) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 5) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 6) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 7) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 8) HellcoreLevelFactor *= HellcoreBaseMulti;
				}
				//Console.Printf("    (input: HellcoreLevelFactor [%d, LVL %d] = %10f)", HellcoreType, HellcoreLevel, HellcoreLevelFactor);
			}

			// "Soul Mastery" Perk [Hellcore damage ONLY]
			double SoulMasteryFactor = 1.0;
			if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
			    damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
			    damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
			{
				SoulMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10033) * .10) + (CallACS("MiscVarCheckDECORATE",10034) * .25));
			}
			
			// Cursed Shield
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 0.390625;
				if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
						damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
						damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
				{
					CursedShieldFactor *= 2.56;
				}
			}
			
			// "MagiUp" and "Wand/Staff Mastery" Perks [Magic ONLY]
			double MagiUpATKFactor = 1.0;
			double WandStaffMasteryFactor = 1.0;
			if (damageType == 'Magic' || damageType == 'Eldritch')
			{
				MagiUpATKFactor = 1.00 + ((MagiUpPerkLvl * .05) + (MagiUpExPerkLvl * .125)); 
				WandStaffMasteryFactor = 1.00 + ((WandMastPerkLvl * .0625) + (WandMastEXPerkLvl * .15625)); 
			}
			
			// Clearer of Mind "Perk"
			double ClearOfMindFactor = 1.0;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				ClearOfMindFactor = 1.00 + ((ClearMindPerkLvl * .0375) + (ClearMindEXPerkLvl * .09375)); 
			}
			
			// "StamUp" Perk [Melee Oriented Attacks]
			double StamUpATKFactor = 1.0;
			if (damageType == 'Melee' || 
					damageType == 'Trample' || 
					damageType == 'Stomp' || 
					damageType == 'Sceptre' || 
					damageType == 'Gauntlets' || 
					damageType == 'Fist' || 
					damageType == 'Kick' || 
					damageType == 'Chainsaw' )
			{
				StamUpATKFactor = 1.00 + ((StamUpPerkLvl * .05) + (StamUpEXPerkLvl * .125)); 
			}
			
			// Death Rage
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0)
			{
				if (CallACS("MiscVarCheckDECORATE",10043) <= 1) DeathRageFactor = 2.5;
				if (CallACS("MiscVarCheckDECORATE",10043) == 2) DeathRageFactor = 3.75;
				if (CallACS("MiscVarCheckDECORATE",10043) >= 3) DeathRageFactor = 5.0;
			}
			
			// Strife's "Accuracy" Upgrades
			double StrifeAccuracyFactor = 1.0;
			StrifeAccuracyFactor = 1.00 + (StrifeAccuLvl * .005);
			
			// Doomspell Bonuses
			double DoomSpellFactor = 1.0;
			if (CharacterClass == 0) // Deggaris
			{
				if (damageType == 'Magic' || damageType == 'Eldritch') DoomSpellFactor = 1.08334;
				if (damageType == 'Fire') DoomSpellFactor = 1.55;
				if (damageType == 'Holy') DoomSpellFactor = 1.75;
				if (damageType == 'Ice') DoomSpellFactor = 1.0;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') DoomSpellFactor = 1.0;
				if (damageType == 'Acid') DoomSpellFactor = 2.1;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 2.1;
				if (damageType == 'Sigil') DoomSpellFactor = 1.03125;
			}
			if (CharacterClass == 1) // Illucia
			{
				if (damageType == 'Magic' || damageType == 'Eldritch') DoomSpellFactor = 1.16667;
				if (damageType == 'Fire') DoomSpellFactor = 1.0;
				if (damageType == 'Holy') DoomSpellFactor = 0.875;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.55;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.55;
				if (damageType == 'Sigil') DoomSpellFactor = 1.03125;
			}
			if (CharacterClass == 2) // Flora
			{
				if (damageType == 'Magic' || damageType == 'Eldritch') DoomSpellFactor = 1.25;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.5;
				if (damageType == 'Ice') DoomSpellFactor = 1.55;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			if (CharacterClass == 8) // Ailish
			{
				if (damageType == 'Magic' || damageType == 'Eldritch') DoomSpellFactor = 1.25;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.125;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			if (CharacterClass == 9) // Petra
			{
				if (damageType == 'Magic' || damageType == 'Eldritch') DoomSpellFactor = 1.08334;
				if (damageType == 'Fire') DoomSpellFactor = 1.55;
				if (damageType == 'Holy') DoomSpellFactor = 2.375;
				if (damageType == 'Ice') DoomSpellFactor = 1.55;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			
			// Invisibility [OFFENSIVE]
			double InvisFactor = 1.0;
			double InvisBaseAmt = 1.25;
			if (InvisiblityLevel >= 1)
			{
				InvisFactor *= InvisBaseAmt;
				if (InvisiblityLevel >= 2)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 3)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 4)
						{
							InvisFactor *= InvisBaseAmt;
						}
					}
				}
			}
			if (playeractor) playeractor.InvisNeedleBonus = InvisFactor;
			
			// Dashing Bonus
			double DashingFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",166) > 0)
			{
				if (damageType == 'Sceptre') DashingFactor = 1.75;
				if (damageType == 'Gauntlets') DashingFactor = 1.625;
				if (damageType == 'Fist' || damageType == 'Kick') DashingFactor = 1.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Chainsaw') DashingFactor = 1.25;
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (damageType == 'Fist' || damageType == 'Gauntlets')
			{
				if (Owner.CountInv("UppercutATKBonus1") > 0) UppercutFactor = 1.25;
				if (Owner.CountInv("UppercutATKBonus2") > 0) UppercutFactor = 1.625;
			}

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Sceptre' || damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw')
			{
				if (landdmgbonus == 1) LandingFactor = 2.0;
				if (landdmgbonus == 2) LandingFactor = 3.5;
				if (landdmgbonus == 3) LandingFactor = 6.5625;
				if (landdmgbonus == 4) LandingFactor = 13.9453125;
			}

			// Tension Level [OFFENSIVE]
			double TensionFactor = 1.0;
			TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 1.7;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 3;			// "20" Tension
				if (TensionLevel == 3) TensionFactor = 5;			// "50" Tension
				if (TensionLevel == 4) TensionFactor = 7.5;		// "100" Tension
				if (TensionLevel == 5) TensionFactor = 11.25;	// "250" Tension
				if (TensionLevel == 6) TensionFactor = 17.5;	// "500" Tension
				if (TensionLevel == 7) TensionFactor = 25;		// "1000" Tension
			}
			
			// Flora Armor
			double FloraArmorFactor = 1.0;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("EvenstarNecklace") > 0) 
				{
					if (damageType == 'Magic' || damageType == 'Eldritch') FloraArmorFactor += 0.2;
					if (damageType == 'Fire') FloraArmorFactor += 0.5;
					if (damageType == 'Ice') FloraArmorFactor += 0.5;
					if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning' || damageType == 'Shock') FloraArmorFactor += 0.5;
					if (damageType == 'Holy') FloraArmorFactor += 0.5;
				}
				if (Owner.CountInv("DoveRibbon") > 0) 
				{
					if (damageType == 'Magic' || damageType == 'Eldritch') FloraArmorFactor += 0.2;
				}
				if (Owner.CountInv("FalconKnifeEarrings") > 0)
				{
					FloraArmorFactor *= 2.0;
					if (damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick') FloraArmorFactor *= 1.3333;
				}
			}
			
			// The One Ring [OFFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 2.5;

			// DQ Buffs [OFFENSIVE]
			double DQBuffFactor = 1.0;
			if (DQOomphTimer > 0) DQBuffFactor *= 2.0; // Oomph
			if (DQBluntTimer > 0) DQBuffFactor *= 0.5; // Blunt
			if (CallACS("GetBuffTimer",19) > 0) // Blind
			{
				if (random[statitem](1,16) == 1) DQBuffFactor *= 0.2; else DQBuffFactor *= 0.8; 
			}

			// Divine Avatar [OFFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (DivineAvatarTimer > 0) DivineAvatarFactor = 4.0;

			// GoE? [OFFENSIVE]
			double GoEFactor = 1.0;
			if (GoETimer > 0) GoEFactor = 10.0;

			double TOTALFactor = LVLfactor 
													* STRfactor 
													* SORfactor 
													* MusouFactor 
													* MagiUpATKFactor 
													* WandStaffMasteryFactor 
													* StamUpATKFactor 
													* DeathRageFactor 
													* StrifeAccuracyFactor 
													* ClearOfMindFactor 
													* HellcoreLevelFactor
													* SoulMasteryFactor
													* CursedShieldFactor
													* DoomSpellFactor
													* InvisFactor
													* DashingFactor
													* UppercutFactor
													* LandingFactor
													* TensionFactor
													* FloraArmorFactor
													* RingFactor
													* DQBuffFactor
													* DivineAvatarFactor
													* GoEFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));

			if (playeractor) playeractor.playoutputdmg = newdamage;
			if (dvdsdebug_actordmgdisplays && newdamage > 0) 
			{
				Console.Printf("    (\czPlayerStatItem Input [STEP 6 - Alter Player's Dmg]\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, STRfactor [%d] = %8f, SORfactor [%d] = %8f, MusouFactor = %8f, StamUpATKFactor = %8f, MagiUpATKFactor = %8f, WandStaffMasteryFactor = %8f, DeathRageFactor = %8f, StrifeAccuracyFactor = %8f, ClearOfMindFactor = %8f, HellcoreLevelFactor = %8f, SoulMasteryFactor = %8f, CursedShieldFactor = %8f, DoomSpellFactor = %8f, InvisFactor = %8f, DashingFactor = %8f, UppercutFactor = %8f, LandingFactor = %8f, TensionFactor = %8f, FloraArmorFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, damage, newdamage, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerSTR, STRfactor, PlayerSOR, SORfactor, 
				MusouFactor, StamUpATKFactor, MagiUpATKFactor, 
				WandStaffMasteryFactor, DeathRageFactor, StrifeAccuracyFactor, 
				ClearOfMindFactor, HellcoreLevelFactor, SoulMasteryFactor, 
				CursedShieldFactor, DoomSpellFactor, 
				InvisFactor, DashingFactor, UppercutFactor, 
				LandingFactor, TensionFactor, FloraArmorFactor, 
				RingFactor, DQBuffFactor, DivineAvatarFactor, GoEFactor);
			}
		}

		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int predmg = damage;
			if (playeractor) predmg = playeractor.mobjdmg;
			double factorchange = 1.00;
			if (predmg > 0) factorchange = 1.0 * damage / predmg;
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 6 (\cwsuper.DamageMobj\cz)] player-StatItem input\c-: \cypredmg\c- / \cydamage\c- = \cy%d\c- /  \cy%d\c-, \cafactorchange\c- = \ca%8f\c-)", predmg, damage, factorchange);

			// ****************************************
			// *DEFENSE THAT CAN BE IGNORED GOES FIRST*
			// ****************************************
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 0.05;
			if (CharacterClass == 0) LVLFactor = 1.00 - (PlayerLevel * .00117);				// Deggaris	(1 LVL = -0.117% Damage Taken)
			if (CharacterClass == 1) LVLFactor = 1.00 - (PlayerLevel * .0009707);			// Illucia	(1 LVL = -0.09707% Damage Taken)
			if (CharacterClass == 2) LVLFactor = 1.00 - (PlayerLevel * .0007633);			// Flora		(1 LVL = -0.07633% Damage Taken)
			if (CharacterClass == 8) LVLFactor = 1.00 - (PlayerLevel * .000800);			// Ailish		(1 LVL = -0.0800% Damage Taken)
			if (CharacterClass == 9) LVLFactor = 1.00 - (PlayerLevel * .0010875);			// Petra		(1 LVL = -0.10875% Damage Taken)
			if (LVLfactor < LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Defense
			int PlayerDEF = CallACS("StatCheck",4);
			double DEFfactor = 1.0; double DEFfactorclamp = 0.05;
			if (damageType != 'Magic' || damageType != 'Eldritch')
			{
				if (CharacterClass == 0) DEFfactor = 1.00 - (PlayerDEF * .006667);			// Deggaris	(1 DEF = -0.6667~% Physical Damage)
				if (CharacterClass == 1) DEFfactor = 1.00 - (PlayerDEF * .005);					// Illucia	(1 DEF = -0.5000% Physical Damage)
				if (CharacterClass == 2) DEFfactor = 1.00 - (PlayerDEF * .003334);			// Flora		(1 DEF = -0.3334~% Physical Damage)
				if (CharacterClass == 8) DEFfactor = 1.00 - (PlayerDEF * .003);					// Ailish		(1 DEF = -0.3000% Physical Damage)
				if (CharacterClass == 9) DEFfactor = 1.00 - (PlayerDEF * .00725);				// Petra		(1 DEF = -0.7250% Physical Damage)
			}
			if (DEFfactor < DEFfactorclamp) DEFfactor = DEFfactorclamp;

			// Check Therapeusis
			int PlayerTHE = CallACS("StatCheck",8);
			double THEfactor = 1.0; double THEfactorclamp = 0.05;
			if (damageType == 'Magic' || damageType == 'Eldritch')
			{
				if (CharacterClass == 0) THEfactor = 1.00 - (PlayerTHE * .003334);			// Deggaris	(1 THE = -0.3334~% Magic Damage)
				if (CharacterClass == 1) THEfactor = 1.00 - (PlayerTHE * .005);					// Illucia	(1 THE = -0.5000% Magic Damage)
				if (CharacterClass == 2) THEfactor = 1.00 - (PlayerTHE * .006667);			// Flora		(1 THE = -0.6667~% Magic Damage)
				if (CharacterClass == 8) THEfactor = 1.00 - (PlayerTHE * .00725);				// Ailish		(1 THE = -0.7250% Magic Damage)
				if (CharacterClass == 9) THEfactor = 1.00 - (PlayerTHE * .003);					// Petra		(1 THE = -0.3000% Magic Damage)
			}
			if (THEfactor < THEfactorclamp) THEfactor = THEfactorclamp;
			
			// "LifeUp" Perk
			double LifeUpDEFFactor = 1.0;
			LifeUpDefFactor = 1.00 - ((LifeUpPerkLvl * .05) + (LifeUpExPerkLvl * .125)); 

			// "Demolition Expert" Perk
			double DemoExpertFactor = 1.00;
			if (damageType == 'Explosive')
			{
				DemoExpertFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) - (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
				if (DemoExpertFactor < 0.025) DemoExpertFactor = 0.025;
			}

			// Strife's "Stamina" Upgrades
			double StrifeStaminaFactor = 1.0;
			StrifeStaminaFactor = 1.00 - (StrifeStamLvl * .005);
			
			// Invisibility [DEFENSIVE] [if ignored] (33% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored == 3)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Uppercut Bonus
			double BerserkFactorblock = frandompick[statitem2](0.667,0.75,0.834);

			double UppercutFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) UppercutFactor = 0.80;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) UppercutFactor = 0.615;
			if (UppercutFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) UppercutFactor *= BerserkFactorblock;

			// Kicking Bonus
			double KickingFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) KickingFactor = 0.75;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) KickingFactor = 0.5625;
			if (KickingFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) KickingFactor *= BerserkFactorblock;

			// Kicking Bonus
			BerserkFactorblock = frandompick[statitem2](0.5,0.667,0.75);
			double MartArtFactor = 1.0;
			if (Owner.CountInv("MartArtsMaster1") > 0)
			{
				MartArtFactor *= 0.975; // -2.5%
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.9875;
			}
			if (Owner.CountInv("MartArtsMaster2") > 0)
			{
				MartArtFactor *= 0.9375; // -6.25%
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.96875;
			}
			if (Owner.CountInv("MartArtsMaster3") > 0)
			{
				MartArtFactor *= 0.85; // -15%
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.925;
			}
			if (Owner.CountInv("MartArtsMaster4") > 0)
			{
				MartArtFactor *= 0.75; // -25%
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.875;
			}
			if (Owner.CountInv("MartArtsMaster5") > 0)
			{
				MartArtFactor *= 0.425; // 57.5%
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.7125;
			}
			if (MartArtFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) MartArtFactor *= BerserkFactorblock;

			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			BerserkFactorblock = frandompick[statitem2](0.334,0.5,0.667);
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldFactor *= 0.0268;
			}
			if (EWShieldFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) EWShieldFactor *= BerserkFactorblock;

			double PlayerFistBlockFactor = 1.00;
			BerserkFactorblock = frandompick[statitem2](0.25,0.334,0.5,0.667,0.75);
			if (Owner.CountInv("FistPlayerBlock") > 0) 
			{
				PlayerFistBlockFactor *= 0.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.5;
			}
			if (Owner.CountInv("FistPlayerBlock2") > 0) 
			{
				PlayerFistBlockFactor *= 0.375;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.375;
			}
			if (Owner.CountInv("FistPlayerBlock3") > 0) 
			{
				PlayerFistBlockFactor *= 0.25;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.25;
			}
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.1;
			}
			if (PlayerFistBlockFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) PlayerFistBlockFactor *= BerserkFactorblock;

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseFactor = 1.0;
			BerserkFactorblock = 0.50 + (frandom[statitem2](-10,10) * 0.01);
			if (Owner.CountInv("PrimingSceptre") > 0) SceptreDefenseFactor *= (0.985 - (CallACS("OtherVarCheckDECORATE",11) * 0.015));
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseFactor *= 0.6667;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseFactor *= 0.125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseFactor *= 0.5;
			if (SceptreDefenseFactor < 1.00 && Owner.CountInv("AetheriusPowerStrength")) SceptreDefenseFactor *= BerserkFactorblock;

			// Sauron Equipment [DEFENSIVE]
			double SauronEquipFactor = 1.0;
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SauronEquipFactor *= 0.75; // General Reduction
				if (damageType == 'Bullet') SauronEquipFactor *= 0.833334;
			}

			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 0.4;

			// DQ Buffs [DEFENSIVE]
			double DQBuffFactor = 1.0;
			if (DQBuffTimer > 0) DQBuffFactor *= 0.50; // Buff
			if (DQSapTimer > 0) DQBuffFactor *= 2.00; // Sap
			if (SleepTimer > 0) // Sleep
			{
				if(random[statitem](1,16) == 1) DQBuffFactor *= 5.0; else DQBuffFactor *= 1.25;
			}

			//********************************************************************
			// TOTALFactor is for defenses that can be ignored by various attacks
			//********************************************************************
			double TOTALFactor = 1.0
													* LVLfactor 
													* DEFfactor 
													* THEfactor 
													* LifeUpDEFFactor 
													* DemoExpertFactor 
													* StrifeStaminaFactor
													* InvisFactor
													* UppercutFactor
													* KickingFactor
													* MartArtFactor
													* EWShieldFactor
													* PlayerFistBlockFactor
													* SceptreDefenseFactor
													* SauronEquipFactor
													* RingFactor
													* DQBuffFactor;
													
			// The following allows TOTALFactor to be affected by varying types of (Partial)Defense-Ignoring attacks.
			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor && playeractor.PlayerDefenseIgnoreFactor > 0.00 && TOTALFactor <= 1.00)
			{
				BaseIgnoreFactor = (1.0 - TOTALFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				if (dvdsdebug_playerdmgdisplays)
				{
					Console.Printf("    (\cz[STEP 7] PlayerStatItem input\c-: \caDmgIgnFctr\c- = \ca%8f\c- / \cy%8f\c-, \cwPlyrDmgIgnFctr\c- = \cw%8f\c-, \cydmg = %d\c- (StatItem Actor))", 
					DefenseIgnoreFactor, BaseIgnoreFactor, playeractor.PlayerDefenseIgnoreFactor, damage);
				}
				TOTALFactor += DefenseIgnoreFactor;
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays)
				{
					Console.Printf("    (\cz[STEP 7] PlayerStatItem input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", DefenseIgnoreFactor, damage);
				}
			}

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			int postdef1dmg = newdamage;
			if (dvdsdebug_playerdmgdisplays && damage > 0) 
			{
				Console.Printf("    (\cz[STEP 8] StatItem input ([Ignorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, DEFfactor [%d] = %8f, THEfactor [%d] = %8f, LifeUpDEFFactor = %8f, DemoExpertFactor = %8f, StrifeStaminaFactor = %8f, InvisFactor = %8f, EWShieldFactor = %8f, PlayerFistBlockFactor = %8f, SceptreDefenseFactor = %8f, UppercutFactor = %8f, KickingFactor = %8f, MartArtFactor = %8f, SauronEquipFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f)", 
				damageType, damage, postdef1dmg, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerDEF, DEFfactor, PlayerTHE, THEfactor, 
				LifeUpDEFFactor, DemoExpertFactor, StrifeStaminaFactor, 
				InvisFactor, EWShieldFactor,
				PlayerFistBlockFactor, SceptreDefenseFactor, UppercutFactor, 
				KickingFactor, MartArtFactor, SauronEquipFactor, 
				RingFactor, DQBuffFactor);
			}


			// ******************************************
			// *DEFENSE THAT CANNOT BE IGNORED GOES LAST*
			// ******************************************
			// "Power Trip" Mode ===Unignorable===
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 0.2;
			if (dvds_musou_powertripmode == 2) MusouFactor = 0.1;

			// Death Rage [Invulnerablity?] ===Unignorable===
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageFactor = 0.0;
			
			// Focusing ===Unignorable===
			double FocusFactor = 1.00;
			if (IsFocusOn > 0) FocusFactor = 4.00;

			// Invisibility [DEFENSIVE] [if NOT ignored] (67% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored <= 2)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Cursed Shield [DEFENSIVE] ===Unignorable===
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 2.56;
				if (damageType == 'Dark' || damageType == 'IncarnateGlare')
				{
					CursedShieldFactor *= 0.390625;
				}
			}
			
			// Tension Level [DEFENSIVE] ===Unignorable===
			double TensionFactor = 1.0;
			TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 0.975;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 0.925;		// "20" Tension
				if (TensionLevel == 3) TensionFactor = 0.825;		// "50" Tension
				if (TensionLevel == 4) TensionFactor = 0.7;			// "100" Tension
				if (TensionLevel == 5) TensionFactor = 0.55;		// "250" Tension
				if (TensionLevel == 6) TensionFactor = 0.35;		// "500" Tension
				if (TensionLevel == 7) TensionFactor = 0.1;			// "1000" Tension
			}

			// Divine Avatar [DEFENSIVE] ===Unignorable===
			double DivineAvatarFactor = 1.0;
			if (DivineAvatarTimer > 0) DivineAvatarFactor = 0.25;

			// GoE? [DEFENSIVE] ===Unignorable===
			double GoEFactor = 1.0;
			if (GoETimer > 0) GoEFactor = 0.1;

			//************************************************************************
			// TOTALFactor2 is for defenses that CANNOT be ignored by various attacks
			//************************************************************************
			double TOTALFactor2 = 1.0
													* MusouFactor
													* DeathRageFactor
													* FocusFactor
													* InvisFactor
													* CursedShieldFactor
													* TensionFactor
													* DivineAvatarFactor
													* GoEFactor;

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, postdef1dmg, postdef1dmg * TOTALFactor2));
			if (dvdsdebug_playerdmgdisplays && postdef1dmg > 0) 
			{
				Console.Printf("    (\cz[STEP 9] StatItem input ([UNIgnorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor2\c- = \ca%8f\c-, MusouFactor = %8f, DeathRageFactor = %8f, FocusFactor = %8f, InvisFactor = %8f, CursedShieldFactor = %8f, TensionFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, postdef1dmg, newdamage, TOTALFactor2, 
				MusouFactor, DeathRageFactor, FocusFactor,
				InvisFactor, CursedShieldFactor,
				TensionFactor, DivineAvatarFactor, GoEFactor);
			}
			if (playeractor) playeractor.saveddamage = newdamage;
		}
	}

	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);

		// Perks
		int perks3mastered;
		int LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLvl = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLvl = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLvl = CallACS("MiscVarCheckDECORATE",10006);
		int DodgeMorePerkLvl = CallACS("MiscVarCheckDECORATE",10007);
		int DodgeMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10008);
		int JmpMorePerkLvl = CallACS("MiscVarCheckDECORATE",10009);
		int JmpMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10010);
		int PsychFstPerkLvl = CallACS("MiscVarCheckDECORATE",10011);
		int PsychFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10012);
		int RegHPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10013);
		int RegHPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10014);
		int RegMPFstPerkLvl = CallACS("MiscVarCheckDECORATE",10015);
		int RegMPFstEXPerkLvl = CallACS("MiscVarCheckDECORATE",10016);
		int RegStamFastLvl = CallACS("MiscVarCheckDECORATE",10017);
		int RegStamFastEXLvl = CallACS("MiscVarCheckDECORATE",10018);
		int BulletAccPerkLvl = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccEXPerkLvl = CallACS("MiscVarCheckDECORATE",10020);
		//
		int OTMPerkLvl = CallACS("MiscVarCheckDECORATE",10045);
		int OTMEXPerkLvl = CallACS("MiscVarCheckDECORATE",10046);
		//
		int WandMastPerkLvl = CallACS("MiscVarCheckDECORATE",10053);
		int WandMastEXPerkLvl = CallACS("MiscVarCheckDECORATE",10054);
		int ClearMindPerkLvl = CallACS("MiscVarCheckDECORATE",10055);
		int ClearMindEXPerkLvl = CallACS("MiscVarCheckDECORATE",10056);

		// Strife
		int StrifeStamLvl = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuLvl = CallACS("MiscVarCheckDECORATE",318);

		// Buff Checks
		int NVLightTimer = CallACS("GetBuffTimer",0);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int FlightTimer = CallACS("GetBuffTimer",2);
		int StealthTimer = CallACS("GetBuffTimer",3);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int FearAuraTimer = CallACS("GetBuffTimer",6);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int SpreadAura1Timer = CallACS("GetBuffTimer",8);
		int SpreadAura2Timer = CallACS("GetBuffTimer",9);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int CorrosionTimer = CallACS("GetBuffTimer",17);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int RadSuitTimer = CallACS("GetBuffTimer",22);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int RegenerationTimer = CallACS("GetBuffTimer",24);
		int GoETimer = CallACS("GetBuffTimer",129);

		double CVarAdjustSpeed = 1.00;
		CVarAdjustSpeed = dvds_speedmult;

		double StaminaSpeed = 1.00;
		int StamRatio = CallACS("MiscVarCheckDECORATE",41);
		if (StamRatio < 157) StaminaSpeed = -0.675;
		if (StamRatio > 156 && StamRatio < 626) StaminaSpeed = -0.525;
		if (StamRatio > 625 && StamRatio < 1251) StaminaSpeed = -0.39;
		if (StamRatio > 1250 && StamRatio < 2501) StaminaSpeed = -0.27;
		if (StamRatio > 2500 && StamRatio < 5001) StaminaSpeed = -0.165;
		if (StamRatio > 5000 && StamRatio < 7501) StaminaSpeed = -0.075;
		if (StamRatio > 7500 && StamRatio < 12501) StaminaSpeed = 0.00;
		if (StamRatio > 12500 && StamRatio < 20001) StaminaSpeed = 0.075;
		if (StamRatio > 20000 && StamRatio < 27501) StaminaSpeed = 0.165;
		if (StamRatio > 27500 && StamRatio < 35001) StaminaSpeed = 0.27;
		if (StamRatio > 35000 && StamRatio < 42501) StaminaSpeed = 0.39;
		if (StamRatio > 42500 && StamRatio < 48751) StaminaSpeed = 0.525;
		if (StamRatio > 48750) StaminaSpeed = 0.675;
		StaminaSpeed /= 2;
		StaminaSpeed *= dvds_staminaaffectsspeed;
		StaminaSpeed += 1.00;

		double DodgeMoreSpeed = 1.00;
		DodgeMoreSpeed = 1.0 + ((DodgeMorePerkLvl * 0.01) + (DodgeMoreEXPerkLvl * 0.025));

		double JumpMoreSpeed = 1.00;
		JumpMoreSpeed = 1.0 + ((JmpMorePerkLvl * 0.01) + (JmpMoreEXPerkLvl * 0.025));

		double OnTheMoveSpeed = 1.00;
		OnTheMoveSpeed = 1.0 + ((OTMPerkLvl * 0.02) + (OTMEXPerkLvl * 0.05));

		double ArmorSpeed = 1.00;
		if (Owner.CountInv("CloakofEvasion") > 0) ArmorSpeed += 0.10;
		if (Owner.CountInv("DoveRibbon") > 0) ArmorSpeed += 0.15;

		double OneRingSpeed = 1.00;
		if (Owner.CountInv("TheOneRing") > 0) OneRingSpeed = 1.50;

		double LVLSpeed = 1.00;
		int PlayerLevel = CallACS("StatCheck",0);
		if (CharacterClass == 0) LVLSpeed = (PlayerLevel * 0.000669);
		if (CharacterClass == 1) LVLSpeed = (PlayerLevel * 0.00117533333333); 
		if (CharacterClass == 2) LVLSpeed = (PlayerLevel * 0.001389);
		if (CharacterClass == 8) LVLSpeed = (PlayerLevel * 0.00128255555555);
		if (CharacterClass == 9) LVLSpeed = (PlayerLevel * 0.00117533333333); 
		LVLSpeed *= dvds_levelaffectsspeed;
		LVLSpeed += 1.00;

		double AGLSpeed = 1.00;
		int PlayerAGL = CallACS("StatCheck",3);
		if (CharacterClass == 0) AGLSpeed = 1.0 + (PlayerAGL * 0.00111113333333);
		if (CharacterClass == 1) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 
		if (CharacterClass == 2) AGLSpeed = 1.0 + (PlayerAGL * 0.00222223333333);
		if (CharacterClass == 8) AGLSpeed = 1.0 + (PlayerAGL * 0.00188888888889); 
		if (CharacterClass == 9) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 

		double HWShieldSpeed = 1.00;
		If (weapon is "EvilWarriorShield")
		{
			if (Owner.CountInv("HWShieldBlockHold") > 0) HWShieldSpeed = 0.81; else HWShieldSpeed = 0.9;
		}

		double MinigunFiringSpeed = 1.00;
		If (weapon is "Minigun")
		{
			if (Owner.CountInv("MinigunSlowdownWhenFiring") > 0) 
			{
				MinigunFiringSpeed = frandom[statitem2](0.9,1.1) * (0.25 + (BulletAccPerkLvl * 0.05) + (BulletAccEXPerkLvl * 0.125));
			}
		}
		else
		{
			if (Owner.CountInv("MinigunSlowdownWhenFiring") > 0) Owner.A_SetInventory("MinigunSlowdownWhenFiring",0);
		}

		double FistBlockSpeed = 1.00;
		if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockSpeed = 0.75;
		if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockSpeed = 0.825;
		if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockSpeed = 0.90;

		double LongbowSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",398) == 1)
		{
			LongbowSpeed = CallACS("MiscVarCheckDECORATE",84) * 0.01;
			if (LongbowSpeed > 1.0) LongbowSpeed = 1.00;
			//Console.Printf("LongbowSpeed: %8f", LongbowSpeed);
		}
		double SceptreShieldSpeed = 1.00;
		if (Owner.CountInv("PrimingSceptre") > 0) SceptreShieldSpeed *= (0.745 + (CallACS("OtherVarCheckDECORATE",11) * 0.015));
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreShieldSpeed *= 0.25;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreShieldSpeed *= 0.5;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreShieldSpeed *= 0.875;

		double BuffSpeed = 1.00;
		if (DQAcceleratleTimer > 0) BuffSpeed *= 1.3334; 
		if (DQDeceleratleTimer > 0) BuffSpeed *= 0.6667; 

		double TensionSpeed = 1.00;
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int CanUseTension = dvds_allowtension;
		if (CanUseTension > 0)
		{
			if (TensionLevel == 1) TensionSpeed = 1.035;
			if (TensionLevel == 2) TensionSpeed = 1.15;
			if (TensionLevel == 3) TensionSpeed = 1.25;
			if (TensionLevel == 4) TensionSpeed = 1.375;
			if (TensionLevel == 5) TensionSpeed = 1.5625;
			if (TensionLevel == 6) TensionSpeed = 1.875;
			if (TensionLevel == 7) TensionSpeed = 2.25;
		}

		double FocusSpeed = 1.00;
		if (IsFocusOn > 0) FocusSpeed = 0.25;

		double DivineAvatarSpeed = 1.00;
		if (DivineAvatarTimer > 0) DivineAvatarSpeed = 1.5;

		Speed = 1.00
					* CVarAdjustSpeed
					* StaminaSpeed 
					* DodgeMoreSpeed
					* JumpMoreSpeed
					* OnTheMoveSpeed
					* FocusSpeed
					* LVLSpeed
					* AGLSpeed
					* ArmorSpeed
					* OneRingSpeed
					* HWShieldSpeed
					* MinigunFiringSpeed
					* FistBlockSpeed
					* LongbowSpeed
					* SceptreShieldSpeed
					* BuffSpeed
					* TensionSpeed
					* DivineAvatarSpeed;
		if (dvdsdebug_showmoveinformation > 0) Console.Printf("    (\czSpeed Input\c-: \cyTotalSpeed\c- = \cy%8f\c-, CVarAdjustSpeed = %8f, StaminaSpeed [%d] = %8f, DodgeMoreSpeed = %8f, JumpMoreSpeed = %8f, OnTheMoveSpeed = %8f, FocusSpeed = %8f, LVLSpeed = %8f, AGLSpeed = %8f, ArmorSpeed = %8f, OneRingSpeed = %8f, HWShieldSpeed = %8f, MinigunFiringSpeed = %8f, FistBlockSpeed = %8f, LongbowSpeed = %8f, SceptreShieldSpeed = %8f, BuffSpeed = %8f, TensionSpeed = %8f, DivineAvatarSpeed = %8f)", Speed, CVarAdjustSpeed, StamRatio, StaminaSpeed, DodgeMoreSpeed, JumpMoreSpeed, OnTheMoveSpeed, FocusSpeed, LVLSpeed, AGLSpeed, ArmorSpeed, OneRingSpeed, HWShieldSpeed, MinigunFiringSpeed, FistBlockSpeed, LongbowSpeed, SceptreShieldSpeed, BuffSpeed, TensionSpeed, DivineAvatarSpeed);
		return Speed; 
	}
}
class PlayerStatItem2 : Inventory 
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	int HealthDifferenceTimer;
	int PrevMaxArmor;
	int CurrentMaxArmor;

	override void DoEffect()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (!playeractor) { owner.A_SetInventory("PlayerStatItem2",0); super.DoEffect(); } // Removes itself if given to a non-Aetherius Player Class
		
		int ArmorResistance, ArmRes1, ArmRes2, ArmRes3;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int CurrentMana = CallACS("StatCheck",14);
		PrevMaxArmor = CurrentMaxArmor;
		CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int ClassCheck = CallACS("OtherVarCheckDECORATE",4);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		
		
		//*******************************************************************************
		//*Attempting to Interpolate Health Values for the player to show damage values.*
		//*******************************************************************************
		if (playeractor)
		{
			if (ClassCheck > 1)
			{
				if (HealthDifferenceTimer > 0)
				{
					// "LastHealthValue"
					CallACS("MiscVarSetDECORATE",241,CallACS("MiscVarCheckDECORATE",175));
					// "NewHealthValue"
					CallACS("MiscVarSetDECORATE",175,owner.health);
					// "HealthDifference"
					CallACS("MiscVarSetDECORATE",173,(CallACS("MiscVarCheckDECORATE",175) - CallACS("MiscVarCheckDECORATE",241)));
					// "HealthDiffRatio"
					if (MaxHealthTrue != 0) CallACS("MiscVarSetDECORATE",174,(CallACS("MiscVarCheckDECORATE",173) * 100 / MaxHealthTrue));
					
					// "LastManaValue"
					CallACS("MiscVarSetDECORATE",243,CallACS("MiscVarCheckDECORATE",238));
					// "NewManaValue"
					CallACS("MiscVarSetDECORATE",238,CurrentMana);
					// "ManaDifference"
					CallACS("MiscVarSetDECORATE",236,(CallACS("MiscVarCheckDECORATE",238) - CallACS("MiscVarCheckDECORATE",243)));
					// "ManaDiffRatio"
					if (MaxMana != 0) CallACS("MiscVarSetDECORATE",237,(CallACS("MiscVarCheckDECORATE",236) * 100 / MaxMana));
					
					if (CharacterClass != 2)
					{
						// "LastArmorValue"
						CallACS("MiscVarSetDECORATE",242,CallACS("MiscVarCheckDECORATE",178));
						// "NewArmorValue"
						CallACS("MiscVarSetDECORATE",178,owner.CountInv("BasicArmor"));
						// "ArmorDifference"
						CallACS("MiscVarSetDECORATE",176,(CallACS("MiscVarCheckDECORATE",178) - CallACS("MiscVarCheckDECORATE",242)));

						// "ArmorDiffRatio"
						if (PrevMaxArmor > 0)
						{
							CallACS("MiscVarSetDECORATE",177,(CallACS("MiscVarCheckDECORATE",176) * 100 / PrevMaxArmor));
						}
						else
						{
							CallACS("MiscVarSetDECORATE",177,0);
						}
					}
				}
				HealthDifferenceTimer += 1;
			}
		}
		
		
		
		
		
		//**********************************************************************
		//*Alpha and RenderStyle Effects [Invisiblity and Mercy Invulnerablity]*
		//**********************************************************************
		int InvisPulseTimer = level.totaltime % 40;
		double InvisPulseAlpha;
		double flickeralpha = 1.0;
		double basealpha = 1.0;
		double tempalpha;
		double ghostdashvis = random[statitem](7,9) * 0.03125;
		int FlickerTimerMod;
		if (playeractor)
		{
			//Invisibility Pulse Timers
			if (InvisibilityTimer > 0)
			{
				if (InvisPulseTimer == 0 || InvisPulseTimer == 20 || InvisPulseTimer == 40) InvisPulseAlpha = 0.20;
				if (InvisPulseTimer == 1 || InvisPulseTimer == 19) InvisPulseAlpha = 0.205;
				if (InvisPulseTimer == 2 || InvisPulseTimer == 18) InvisPulseAlpha = 0.21;
				if (InvisPulseTimer == 3 || InvisPulseTimer == 17) InvisPulseAlpha = 0.215;
				if (InvisPulseTimer == 4 || InvisPulseTimer == 16) InvisPulseAlpha = 0.22;
				if (InvisPulseTimer == 5 || InvisPulseTimer == 15) InvisPulseAlpha = 0.225;
				if (InvisPulseTimer == 6 || InvisPulseTimer == 14) InvisPulseAlpha = 0.23;
				if (InvisPulseTimer == 7 || InvisPulseTimer == 13) InvisPulseAlpha = 0.235;
				if (InvisPulseTimer == 8 || InvisPulseTimer == 12) InvisPulseAlpha = 0.24;
				if (InvisPulseTimer == 9 || InvisPulseTimer == 11) InvisPulseAlpha = 0.245;
				if (InvisPulseTimer == 10) InvisPulseAlpha = 0.25;
				if (InvisPulseTimer == 21 || InvisPulseTimer == 39) InvisPulseAlpha = 0.195;
				if (InvisPulseTimer == 22 || InvisPulseTimer == 38) InvisPulseAlpha = 0.19;
				if (InvisPulseTimer == 23 || InvisPulseTimer == 37) InvisPulseAlpha = 0.185;
				if (InvisPulseTimer == 24 || InvisPulseTimer == 36) InvisPulseAlpha = 0.18;
				if (InvisPulseTimer == 25 || InvisPulseTimer == 35) InvisPulseAlpha = 0.175;
				if (InvisPulseTimer == 26 || InvisPulseTimer == 34) InvisPulseAlpha = 0.17;
				if (InvisPulseTimer == 27 || InvisPulseTimer == 33) InvisPulseAlpha = 0.165;
				if (InvisPulseTimer == 28 || InvisPulseTimer == 32) InvisPulseAlpha = 0.16;
				if (InvisPulseTimer == 29 || InvisPulseTimer == 31) InvisPulseAlpha = 0.155;
				if (InvisPulseTimer == 30) InvisPulseAlpha = 0.15;
			}
			if (dvdsdebug_mercyinvulndisplays) Console.Printf("InvisPulseTimer: %d, level.totaltime: %d", InvisPulseTimer, level.totaltime);
			
			
			//Mercy Invulnerablity Itself
			if (CallACS("MiscVarCheckDECORATE",194) != 0) // Flickering
			{
				if (InvisibilityTimer > 0) basealpha = InvisPulseAlpha; // Invisible
				if (dvdsdebug_mercyinvulndisplays) Console.Printf("BaseAlpha: %8f, ghostdashvis: %8f", basealpha, ghostdashvis);
				
				if (CallACS("MiscVarCheckDECORATE",195) > 0) // Timer Above 0
				{
					if (InvulnerabilityTimer == 0) 
					{
						owner.player.cheats |= CF_GODMODE;
						owner.bINVULNERABLE = 1;
						owner.A_SetInventory("IsInvulnerable",1);
					}
					FlickerTimerMod = CallACS("MiscVarCheckDECORATE",195) % 120;
					if (FlickerTimerMod >= 0 && FlickerTimerMod <= 14) flickeralpha = basealpha * 0.25;
					if (FlickerTimerMod >= 15 && FlickerTimerMod <= 29) flickeralpha = basealpha * 0.3125;
					if (FlickerTimerMod >= 30 && FlickerTimerMod <= 44) flickeralpha = basealpha * 0.375;
					if (FlickerTimerMod >= 45 && FlickerTimerMod <= 59) flickeralpha = basealpha * 0.4375;
					if (FlickerTimerMod >= 60 && FlickerTimerMod <= 74) flickeralpha = basealpha * 0.5;
					if (FlickerTimerMod >= 75 && FlickerTimerMod <= 89) flickeralpha = basealpha * 0.4375;
					if (FlickerTimerMod >= 90 && FlickerTimerMod <= 104) flickeralpha = basealpha * 0.375;
					if (FlickerTimerMod >= 105 && FlickerTimerMod <= 119) flickeralpha = basealpha * 0.3125;
					if (CallACS("MiscVarCheckDECORATE",166) > 0) flickeralpha *= ghostdashvis;
					owner.A_SetRenderStyle(flickeralpha,7);
					if (dvdsdebug_mercyinvulndisplays) Console.Printf("flickeralpha: %8f, FlickerTimerMod [Timer]: %d [%d]", flickeralpha, owner.GetRenderStyle(), FlickerTimerMod, CallACS("MiscVarCheckDECORATE",195));
					
					CallACS("MiscVarSetDECORATE",196,FlickerTimerMod);
					CallACS("MiscVarSetDECORATE",195,20,2);
				}
				else // Timer at 0
				{
					if (InvulnerabilityTimer == 0) 
					{
						owner.player.cheats &= ~CF_GODMODE;
						owner.bINVULNERABLE = 0;
						owner.A_SetInventory("IsInvulnerable",0);
					}
					CallACS("MiscVarSetDECORATE",194,0);
					CallACS("MiscVarSetDECORATE",195,0);
				}
			}
			else // Not Flickering
			{
				if (InvulnerabilityTimer == 0) 
				{
					owner.player.cheats &= ~CF_GODMODE;
					owner.bINVULNERABLE = 0;
					owner.A_SetInventory("IsInvulnerable",0);
				}
		
				if (InvisibilityTimer > 0)
				{
					tempalpha = InvisPulseAlpha;
					if (CallACS("MiscVarCheckDECORATE",166) > 0) tempalpha *= ghostdashvis;
					owner.A_SetRenderStyle(tempalpha,7);
				}
				else
				{
					tempalpha = 1.0;
					if (CallACS("MiscVarCheckDECORATE",166) > 0) 
					{ 
						tempalpha *= ghostdashvis; 
						owner.A_SetRenderStyle(tempalpha,7);
					}
					else 
					{ 
						owner.A_SetRenderStyle(1.0,1);
					}
				}
				CallACS("MiscVarSetDECORATE",195,0);
				if (dvdsdebug_mercyinvulndisplays) Console.Printf("tempalpha: %8f", tempalpha, owner.GetRenderStyle());
			}
			if (dvdsdebug_mercyinvulndisplays) Console.Printf("owner.player.cheats: %d, InvisPulseAlpha: %8f", owner.player.cheats, InvisPulseAlpha);
			CallACS("FixedVarSetDECORATE",101,(InvisPulseAlpha * 65536));
		}
		
		
		
		
		super.DoEffect();
	}
}
class PlayerStatItem3 : Inventory 
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	override void DoEffect()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (!playeractor) { owner.A_SetInventory("PlayerStatItem3",0); super.DoEffect(); } // Removes itself if given to a non-Aetherius Player Class

		super.DoEffect();
	}
}

// Resistance code [w/ some help from argv :V]
class Resistances : Inventory 
{
	default 
	{
		//Powerup.Duration 0xFFFFFFFD;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage) 
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor && playeractor.saveddamage > 0 && damage == 0) 
		{
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 9.5] Flora PRE-Armor input Safeguard\c-: \cwDmgType\c- = \cw%s\c-, \cyolddmg\c- = \cy%d\c-, \cynewdmg\c- = \cy%d\c-)", 
																					 damageType, damage, playeractor.saveddamage);
			damage = playeractor.saveddamage; 
			playeractor.saveddamage = 0; 
		}
		int olddamage = damage;
		double BaseIgnoreFactor, ArmorIgnoreFactor, ArmorIgnoreFactor2, ArmorIgnoreFactor3;
		double resist = 0;
		double resistN = 0;
		int ArmorItemsAmt = 0;
		if (Owner.CountInv("SafeTeaShoes") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("PearlyCorset") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("CloakofEvasion") > 0)				ArmorItemsAmt++;
		if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("KissaBra") > 0)							ArmorItemsAmt++;
		if (Owner.CountInv("DivineShield") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("BalrogRing") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("DoveRibbon") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorItemsAmt++;

		// Calculates any non-normal damage type in a separate factor
		for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
		{
			if (inv is "ResistanceGrantingItem") resist += ResistanceGrantingItem(inv).GetResistForDamageType(damageType);
		}
		if (playeractor.PlayerArmorIgnoreFactor > 0.00)
		{
			ArmorIgnoreFactor = resist * playeractor.PlayerArmorIgnoreFactor;
			resist -= ArmorIgnoreFactor;
		}
		newdamage = damage * (1.0 - resist);

		// "Normal" Damage Type is counted separately from other resistances
		int newdmg1 = newdamage;
		if (damageType != 'Drowning')
		{
			for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
			{
				if (inv is "ResistanceGrantingItem") resistN += ResistanceGrantingItem(inv).ResistNormal;
			}
		}
		if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
		{
			ArmorIgnoreFactor2 = resistN * playeractor.PlayerArmorIgnoreFactorGeneral;
			resistN -= ArmorIgnoreFactor2;
		}
		newdamage = newdmg1 * (1.0 - resistN);
		int tempdamage = newdamage;

		// The "Omniblock" Bonus from the Divine Shield is Armor based defense, so it gets placed here now 
		// instead of PlayerStatItem [which also prevents standard def-ignoring attacks from bypassing it]
		int shieldblockdmg1 = newdamage;
		int ShieldBonusOn = 0;
		double DivineShieldBlockChance = 0.0;
		double DivShldBonus = 0.0;
		if (Owner.CountInv("DivineShield") > 0)
		{
			DivineShieldBlockChance += 7.8; // 13.0
			DivShldBonus += 0.042; // 0.07
			if (Owner.CountInv("SafeTeaShoes") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("PearlyCorset") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("WaterFlyingDress") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("EvenstarNecklace") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("CloakofEvasion") > 0)				{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("AnubisCufflinks") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("KissaBra") > 0)							{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("BalrogRing") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("DoveRibbon") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("FalconKnifeEarrings") > 0)	{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
			{
				ArmorIgnoreFactor3 = DivShldBonus * playeractor.PlayerArmorIgnoreFactorGeneral;
				DivShldBonus -= ArmorIgnoreFactor3;
			}

			if (frandom[statitem2](0.001,100.000) <= DivineShieldBlockChance)
			{ 
				ShieldBonusOn = 1;
				newdamage = shieldblockdmg1 * (1.0 - DivShldBonus);
				owner.A_Playsound("SceptreEmpyrea/Reflect",random[statitem](5,7));
			}
		}
		if ((damageType != 'Holy') && (olddamage > 1 && newdamage < 1)) newdamage = 1;
		int tempdamage2 = newdamage;

		if (dvdsdebug_playerdmgdisplays)
		{
			if (ArmorItemsAmt > 0) Console.Printf("    (\cz[STEP 10] Flora Armor input\c-: \cwDmgType\c- = \cw%s\c-, \cyolddmg\c- = \cy%d\c-, \cydmg\c- = \cy%d\c-, \cares\c- = \ca%.4f\c-, \cynewdmg1\c- = \cy%d\c-, \caresN\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cxArmorIgnoreFactor\c- = \cx%8f\c-, \cwArmorIgnoreFactor2\c- = \cw%8f\c-)", damageType, olddamage, damage, resist, newdmg1, resistN, tempdamage, ArmorIgnoreFactor, ArmorIgnoreFactor2);
												else Console.Printf("    (\cz[STEP 10] Flora Armor input\c-: \caSKIPPED\c-, \cyolddmg\c- = \cy%d\c-, \cydmg = %d\c-)", olddamage, newdmg1);

			if (ShieldBonusOn > 0) Console.Printf("    (\cz[STEP 11] Flora Omniblock Input\c-: \cwDmgType\c- = \cw%s\c-, \cyshieldblockdmg1\c- = \cy%d\c-, \caDivShldBonus\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cwArmorIgnoreFactor3\c- = \cw%8f\c-)", damageType, shieldblockdmg1, DivShldBonus, tempdamage2, ArmorIgnoreFactor3);
												else Console.Printf("    (\cz[STEP 11] Flora Omniblock Input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", shieldblockdmg1);
		}
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ResistanceGrantingItem : AetheriusCustomInventory 
{
	double ResistNormal, ResistPhysical, ResistMelee, ResistBullet, ResistMagic;
	double ResistFire, ResistIce, ResistThunder, ResistHoly, ResistDark, ResistWind, ResistEarth;
	double ResistSlime, ResistMagma, ResistCrush, ResistDrowning, ResistFalling, ResistExplosive;
	double ResistSceptre, ResistFist, ResistKick, ResistGauntlets, ResistChainsaw;
	double ResistAcid, ResistPoison;

	property ResistNormal: ResistNormal;
	property ResistPhysical: ResistPhysical;
	property ResistMelee: ResistMelee;
	property ResistBullet: ResistBullet;
	property ResistMagic: ResistMagic;

	property ResistFire: ResistFire;
	property ResistIce: ResistIce;
	property ResistThunder: ResistThunder;
	property ResistHoly: ResistHoly;
	property ResistDark: ResistDark;
	property ResistWind: ResistWind;
	property ResistEarth: ResistEarth;

	property ResistSlime: ResistSlime;
	property ResistMagma: ResistMagma;
	property ResistCrush: ResistCrush;
	property ResistDrowning: ResistDrowning;
	property ResistFalling: ResistFalling;
	property ResistExplosive: ResistExplosive;

	property ResistSceptre: ResistSceptre;
	property ResistFist: ResistFist;
	property ResistKick: ResistKick;
	property ResistGauntlets: ResistGauntlets;
	property ResistChainsaw: ResistChainsaw;

	property ResistAcid: ResistAcid;
	property ResistPoison: ResistPoison;
    
	double GetResistForDamageType(Name damageType) 
	{
		if (damageType == 'Physical')
				return ResistPhysical;
		else if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' || damageType == 'Gauntlets')
				return ResistMelee;
		else if (damageType == 'Bullet' || damageType == 'Railgun')
				return ResistBullet;
		else if (damageType == 'Magic' || damageType == 'Eldritch')
				return ResistMagic;
		else if (damageType == 'Fire')
				return ResistFire;
		else if (damageType == 'Ice')
				return ResistIce;
		else if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Shock' || damageType == 'Lightning')
				return ResistThunder;
		else if (damageType == 'Holy')
				return ResistHoly;
		else if (damageType == 'Dark')
				return ResistDark;
		else if (damageType == 'Wind')
				return ResistWind;
		else if (damageType == 'Earth')
				return ResistEarth;
		else if (damageType == 'Slime')
				return ResistSlime;
		else if (damageType == 'Magma')
				return ResistMagma;
		else if (damageType == 'Crush')
				return ResistCrush;
		else if (damageType == 'Drowning')
				return ResistDrowning;
		else if (damageType == 'Falling')
				return ResistFalling;
		else if (damageType == 'Explosive' || damagetype == 'MOD_ROCKET' || damagetype == 'MOD_R_SPLASH' || damagetype == 'MOD_BARREL')
				return ResistExplosive;
		else if (damageType == 'Sceptre')
				return ResistSceptre;
		else if (damageType == 'Fist;')
				return ResistFist;
		else if (damageType == 'Kick')
				return ResistKick;
		else if (damageType == 'Gauntlets')
				return ResistGauntlets;
		else if (damageType == 'Chainsaw')
				return ResistChainsaw;
		else if (damageType == 'Acid')
				return ResistAcid;
		else if (damageType == 'Poison' || damageType == 'PoisonElemental')
				return ResistPoison;
		else
				return 0;
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItemZSC : ResistanceGrantingItem
{
	int loopernum, armorhumtimer;
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1 RenderStyle Add
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}
	property loopernum: loopernum;
	
	int gfxeffectlvl;

	override void PostBeginPlay()
	{
		if (CountInv("PlayingDoom64",AAPTR_PLAYER1)) { scale.x * 1.2; scale.y * 1.2; }
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (Owner == null)
		{
			gfxeffectlvl = dvds_gfxeffectlevel;
			A_CheckFloraArmorCopies(loopernum); // ACS_NamedExecuteAlways("CheckFloraArmorCopies",0,loopernum,0,0);
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random[statitem](-2,2), random[statitem](-2,2), random[statitem](-2,2) ,64); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random[statitem](-2,2), random[statitem](-2,2), random[statitem](-2,2) ,128); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random[statitem](-2,2), random[statitem](-2,2), random[statitem](-2,2) ,192); } }
			armorhumtimer++;
			if (armorhumtimer >= 42)
			{
				A_Stopsound(CHAN_ITEM);
				A_Playsound("FloraArmor/Hum",CHAN_ITEM);
				armorhumtimer = 0;
			}
		}
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_PlaySound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

// Item 1
class SafeTeaShoes : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRA0"
		inventory.icon "FAMRA0";
		Inventory.PickupMessage "Got the \chSafe Tea Shoes\c-!!";
		ResistanceGrantingItem.ResistSlime 0.275;
		ResistanceGrantingItem.ResistMagma 0.275;
		ResistanceGrantingItem.ResistNormal 0.03;
		ResistanceGrantingItem.ResistMagic 0.0125;
		ResistanceGrantingItem.ResistFalling 0.75;
		BaseFloraArmorItemZSC.loopernum 1;
	}

	override void DoEffect() 
	{
		ResistSlime = 0.25 + (0.005 * random[safeteashoes](0,10));
		//if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\czFloraArmorAbsorb\c-: ResistSlime = %8f)", ResistSlime);
		Super.DoEffect(); 
	}

	States
	{
		Spawn:
			FAMR A 1 bright NoDelay;
			loop;
	}
}

// Item 2
class PearlyCorset : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRB0"
		inventory.icon "FAMRB0";
		Inventory.PickupMessage "Got the \chPearly Corset\c-!!";
		ResistanceGrantingItem.ResistNormal 0.07;
		ResistanceGrantingItem.ResistFire 0.02;
		ResistanceGrantingItem.ResistMagma 0.02;
		ResistanceGrantingItem.ResistIce 0.02;
		ResistanceGrantingItem.ResistThunder 0.02;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.025;
		ResistanceGrantingItem.ResistBullet 0.25;
		BaseFloraArmorItemZSC.loopernum 2;
	}

	States
	{
		Spawn:
			FAMR B 1 bright NoDelay;
			loop;
	}
}

// Item 3
class WaterFlyingDress : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRC0"
		inventory.icon "FAMRC0";
		Inventory.PickupMessage "Got the \chWater Flying Dress\c-!!";
		ResistanceGrantingItem.ResistNormal 0.08;
		ResistanceGrantingItem.ResistFire 0.3;
		ResistanceGrantingItem.ResistMagma 0.3;
		ResistanceGrantingItem.ResistMagic 0.25;
		ResistanceGrantingItem.ResistBullet 0.15;
		ResistanceGrantingItem.ResistExplosive 0.20;
		BaseFloraArmorItemZSC.loopernum 3;
	}

	States
	{
		Spawn:
			FAMR C 1 bright NoDelay;
			loop;
	}
}

// Item 4
class EvenstarNecklace : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRD0"
		inventory.icon "FAMRD0";
		Inventory.PickupMessage "Got the \chEvenstar Necklace\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.2;
		ResistanceGrantingItem.ResistMagma 0.2;
		ResistanceGrantingItem.ResistIce 0.2;
		ResistanceGrantingItem.ResistThunder 0.2;
		ResistanceGrantingItem.ResistDark 0.2;
		ResistanceGrantingItem.ResistMagic 0.2;
		BaseFloraArmorItemZSC.loopernum 4;
	}

	States
	{
		Spawn:
			FAMR D 1 bright NoDelay;
			loop;
	}
}

// Item 5
class CloakOfEvasion : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRE0"
		inventory.icon "FAMRE0";
		Inventory.PickupMessage "Got the \chCloak of Evasion\c-!!";
		ResistanceGrantingItem.ResistNormal 0.04;
		ResistanceGrantingItem.ResistIce 0.05;
		ResistanceGrantingItem.ResistThunder 0.025;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 5;
	}

	States
	{
		Spawn:
			FAMR E 1 bright NoDelay;
			loop;
	}
}

// Item 6
class AnubisCufflinks : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRF0"
		inventory.icon "FAMRF0";
		Inventory.PickupMessage "Got the \chAnubis Cufflinks\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		ResistanceGrantingItem.ResistThunder 0.0625;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 6;
	}

	States
	{
		Spawn:
			FAMR F 1 bright NoDelay;
			loop;
	}
}

// Item 7
class KissaBra : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRG0"
		inventory.icon "FAMRG0";
		Inventory.PickupMessage "Got \chKissa's Armored Brasseire\c-!!";
		ResistanceGrantingItem.ResistNormal 0.06;
		ResistanceGrantingItem.ResistBullet 0.2;
		BaseFloraArmorItemZSC.loopernum 7;
	}

	States
	{
	Spawn:
		FAMR G 1 bright NoDelay;
		loop;
	}
}

// Item 8
class DivineShield : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRH0"
		inventory.icon "FAMRH0";
		Inventory.PickupMessage "Got the \chDivine Shield\c-!!";
		ResistanceGrantingItem.ResistNormal 0.16;
		ResistanceGrantingItem.ResistFire 0.25;
		ResistanceGrantingItem.ResistMagma 0.25;
		ResistanceGrantingItem.ResistIce 0.25;
		ResistanceGrantingItem.ResistThunder 0.25;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.3;
		BaseFloraArmorItemZSC.loopernum 9;
	}

	States
	{
		Spawn:
			FAMR H 1 bright NoDelay;
			loop;
	}
}

// Item 9
class BalrogRing : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRI0"
		inventory.icon "FAMRI0";
		Inventory.PickupMessage "Got the \chBalrog's Ring\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.15;
		ResistanceGrantingItem.ResistMagma 0.15;
		ResistanceGrantingItem.ResistIce 0.225;
		ResistanceGrantingItem.ResistExplosive 0.25;
		BaseFloraArmorItemZSC.loopernum 10;
	}

	States
	{
		Spawn:
			FAMR I 1 bright NoDelay;
			loop;
	}
}

// Item 10
class DoveRibbon : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRJ0"
		inventory.icon "FAMRJ0";
		Inventory.PickupMessage "Got the \chDove's Ribbon\c-!!";
		ResistanceGrantingItem.ResistNormal 0.09;
		ResistanceGrantingItem.ResistFire 0.0125;
		ResistanceGrantingItem.ResistMagma 0.0125;
		ResistanceGrantingItem.ResistIce 0.0625;
		ResistanceGrantingItem.ResistThunder 0.15;
		ResistanceGrantingItem.ResistDark 0.125;
		ResistanceGrantingItem.ResistMagic 0.0625;
		ResistanceGrantingItem.ResistBullet 0.05;
		BaseFloraArmorItemZSC.loopernum 11;
	}

	States
	{
		Spawn:
			FAMR J 1 bright NoDelay;
			loop;
	}
}

// Item 11
class FalconKnifeEarrings : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRK0"
		inventory.icon "FAMRK0";
		Inventory.PickupMessage "Got the \chFalcon Knife Earrings\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		BaseFloraArmorItemZSC.loopernum 12;
	}

	States
	{
		Spawn:
			FAMR K 1 bright NoDelay;
			loop;
	}
}