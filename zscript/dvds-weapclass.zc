class AetheriusBaseWeaponZSC : Weapon 
{
 // Spreader Aura Level 1 Angles
 const spread1angle1 = -15.0;
 const spread1angle2 = 15.0;
 const spread1horz1 = 0.0;
 const spread1horz2 = 0.0;
 const spread1height1 = 0.0;
 const spread1height2 = 0.0;

 // Spreader Aura Level 2 Angles/Pitches
 const spread2angle1 = -7.5;
 const spread2angle2 = 7.5;
 const spread2horz1 = 0.0;
 const spread2horz2 = 0.0;
 const spread2pitch1 = -7.5;
 const spread2pitch2 = 7.5;
 const spread2height1 = 0.0;
 const spread2height2 = 0.0;

 // Spread Aura Function [Projectiles]
 void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
   A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
  }
  if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
   A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
  }
  A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

  A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
 }

 // Spread Aura Function [Projectiles w/ AOE]
 void A_SpreadAuraFireProjectileAoE (Class<Actor> missiletype, Class<Actor> missiletypeaoe, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
   A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
  }
  if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletypeaoe,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
   A_FireProjectile(missiletypeaoe,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
  }
  A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

  A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
 }

 // Spread Aura Function [Melee Punch]
 void A_SpreadAuraCustomPunch (int damage, bool norandom = 0, int flags = 0, string pufftype = "", float range = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = "", sound misssound = "") 
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   // Angle + 15, Pitch + 0
   A_SetAngle(angle+spread1angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle + 7.5, Pitch + 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle + 7.5, Pitch - 7.5
   A_SetPitch(pitch-spread1angle2); 
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle + 0, Pitch + 0
   A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle - 7.5, Pitch - 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle - 7.5, Pitch + 7.5
   A_SetPitch(pitch+spread1angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Angle - 15, Pitch + 0
   A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   // Reset
   A_SetAngle(angle+spread1angle2);
  }
  else
  if (CountInv("SpreaderAura1") > 0)
  {
   A_SetAngle(angle+spread1angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   A_SetAngle(angle-spread1angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   A_SetAngle(angle-spread1angle2);
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
   A_SetAngle(angle+spread1angle2);
  }
  else
  {
   A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
  }
 }

 // Spread Aura Function [Melee Chainsaw]
 void A_SpreadAuraSaw (string fullsound, string hitsound = "", int damage = 0, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 0.0, float spread_xy = 0.0, float spread_z = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "")
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   // Angle + 15, Pitch + 0
   A_SetAngle(angle+spread1angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle + 7.5, Pitch + 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle + 7.5, Pitch - 7.5
   A_SetPitch(pitch-spread1angle2); 
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle + 0, Pitch + 0
   A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle - 7.5, Pitch - 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle - 7.5, Pitch + 7.5
   A_SetPitch(pitch+spread1angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Angle - 15, Pitch + 0
   A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   // Reset
   A_SetAngle(angle+spread1angle2);
  }
  else
  if (CountInv("SpreaderAura1") > 0)
  {
   A_SetAngle(angle+spread1angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   A_SetAngle(angle-spread1angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   A_SetAngle(angle-spread1angle2);
   A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
   A_SetAngle(angle+spread1angle2);
  }
  else
  {
   A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
  }
 }

 // Spread Aura Function [Hitscan]
 void A_SpreadAuraFireBullets (double spread_horz, double spread_vert, int numbullets, int damage, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 8192, string missile = "", float spawnheight = 0.0, float spawnofs_xy = 0.0, int ammouseamount = 0, string ammousetype = "")
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   // Angle + 15, Pitch + 0
   A_SetAngle(angle+spread1angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Angle + 7.5, Pitch + 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Angle + 7.5, Pitch - 7.5
   A_SetPitch(pitch-spread1angle2); 
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Angle + 0, Pitch + 0
   A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
   // Angle - 7.5, Pitch - 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Angle - 7.5, Pitch + 7.5
   A_SetPitch(pitch+spread1angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Angle - 15, Pitch + 0
   A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   // Reset
   A_SetAngle(angle+spread1angle2);
  }
  else
  if (CountInv("SpreaderAura1") > 0)
  {
   A_SetAngle(angle+spread1angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   A_SetAngle(angle-spread1angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
   A_SetAngle(angle-spread1angle2);
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
   A_SetAngle(angle+spread1angle2);
  }
  else
  {
   A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
  }
  A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
 }

 // Spread Aura Function [Railgun]
 void A_SpreadAuraRailAttack (int damage, int spawnofs_xy = 0, int ammouseamount = 0, string ammousetype = "", color ringcolor = 0, color corecolor = 0, int flags = 0, int maxdiff = 0, string pufftype = "", float spread_xy = 0.0, float spread_z = 0.0, int range = 8192, int duration = 35, float sparsity = 1.0, float driftspeed = 1.0, string spawnclass = "", float spawnofs_z = 0.0, int spiraloffset = 270, int limit = 0) 
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   // Angle + 15, Pitch + 0
   A_SetAngle(angle+spread1angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle + 7.5, Pitch + 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle + 7.5, Pitch - 7.5
   A_SetPitch(pitch-spread1angle2); 
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle + 0, Pitch + 0
   A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle - 7.5, Pitch - 7.5
   A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle - 7.5, Pitch + 7.5
   A_SetPitch(pitch+spread1angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Angle - 15, Pitch + 0
   A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   // Reset
   A_SetAngle(angle+spread1angle2);
  }
  else
  if (CountInv("SpreaderAura1") > 0)
  {
   A_SetAngle(angle+spread1angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   A_SetAngle(angle-spread1angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   A_SetAngle(angle-spread1angle2);
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
   A_SetAngle(angle+spread1angle2);
  }
  else
  {
   A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
  }
  A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
 }
 
 // Used for Hellcore weapons to allow them to shoot Crisis attacks when the player's health is low. :V
 void A_HellCoreCrisisCheck (void)
 {
  A_TakeInventory("PlayerCanUseCrisisAttacks",9999,AAPTR_PLAYER1); 
  if (CountInv("CriticalHealth",AAPTR_PLAYER1) > 0) 
  {
   A_GiveInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1); 
  } 
  else 
  { 
   if (CountInv("LowHealth",AAPTR_PLAYER1) > 0 && random(1,4) == 4) 
   { 
    A_GiveInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1); 
   } 
  }	   
 }
}

class AetheriusBaseCustomInventoryZSC : CustomInventory 
{
 // Spreader Aura Level 1 Angles
 const spread1angle1 = -15.0;
 const spread1angle2 = 15.0;
 const spread1horz1 = 0.0;
 const spread1horz2 = 0.0;
 const spread1height1 = 0.0;
 const spread1height2 = 0.0;

 // Spreader Aura Level 2 Angles/Pitches
 const spread2angle1 = -7.5;
 const spread2angle2 = 7.5;
 const spread2horz1 = 0.0;
 const spread2horz2 = 0.0;
 const spread2pitch1 = -7.5;
 const spread2pitch2 = 7.5;
 const spread2height1 = 0.0;
 const spread2height2 = 0.0;

 // Spread Aura Function [Projectiles]
 void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
 {
  if (CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
   A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
   A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
  }
  if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
  {
   A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
   A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
  }
  A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

  A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
 }
}