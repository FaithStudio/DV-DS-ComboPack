mixin class HellcoreChecker
{
	// Checks for certain projectiles from charmed/friendly allies to pass through other friendlies instead of colliding
	int A_CheckFriendCollisionProjTypeFriendlyDoom()
	{
		string infl = GetClassName();

		int type;
		if (
				// Doom
				infl == "UnmakerLaser" ||
				infl == "DBTPuff" ||
				infl == "ZombieBulletTracer" ||
				infl == "ZombieBulletTracerCrisis" ||
				infl == "ZombieRepeaterTracer" ||
				infl == "ZombieRepeaterTracerCrisis" ||
				infl == "PlasmaBall1Monster" ||
				infl == "PlasmaBall1Crisis" ||
				infl == "PlasmaBall2Monster" ||
				infl == "PlasmaBall2Crisis" ||
				infl == "RocketMonster" ||
				infl == "RocketCrisis" ||
				infl == "BFGBallMonster" ||
				infl == "BFGBallCrisis" ||
				infl == "BFGExtraMonster" ||
				infl == "DoomImpBall" ||
				infl == "DoomImpBallNew" ||
				infl == "DoomImpBallCrisis" ||
				infl == "DarkSeeker" ||
				infl == "DarkSeekerCrisis" ||
				infl == "HellClericDarkBall" ||
				infl == "HellClericDarkBallCrisis" ||
				infl == "DarkFast" ||
				infl == "DarkFastCrisis" ||
				infl == "DarkNormal" ||
				infl == "DarkNormalCrisis" ||
				infl == "DarkStrong" ||
				infl == "DarkStrongCrisis" ||
				infl == "InfernoBall" ||
				infl == "InfernoBallCrisis" ||
				infl == "NetherLightning" ||
				infl == "NetherLightningCrisis" ||
				infl == "RevenantTracer" ||
				infl == "RevenantTracerNew" ||
				infl == "RevenantTracer2New" ||
				infl == "FlyingBalrogShot1" ||
				infl == "FlyingBalrogShot1Crisis" ||
				infl == "FlyingBalrogShot2" ||
				infl == "FlyingBalrogShot2Crisis" ||
				infl == "WeakenedBalrogShot1" ||
				infl == "WeakenedBalrogShot2" ||
				infl == "FatShot" ||
				infl == "FatShotNew" ||
				infl == "FatShotCrisis" ||
				infl == "HectShot" ||
				infl == "HectShotCrisis" ||
				infl == "DaedFire" ||
				infl == "DaedFireNew" ||
				infl == "DaedFireCrisis" ||
				infl == "SuicideBomb" ||
				infl == "HSBoom" ||
				infl == "HSBoomOverlord" ||
				infl == "CacodemonBall" ||
				infl == "CacodemonBallNew" ||
				infl == "CacodemonBallCrisis" ||
				infl == "CacolanternBall" ||
				infl == "CacolanternBallCrisis" ||
				infl == "AbaddonBall" ||
				infl == "AbaddonBallCrisis" ||
				infl == "HadesElementalBall" ||
				infl == "HadesElementalBallCrisis" ||
				infl == "HadesBolt" ||
				infl == "HadesBoltCrisis" ||
				infl == "OverBall" ||
				infl == "OverBallCrisis" ||
				infl == "HadesOverlordBall" ||
				infl == "HadesOverlordBallCrisis" ||
				infl == "StormShot1Ball" ||
				infl == "StormShot1BallCrisis" ||
				infl == "StormShot2Ball" ||
				infl == "StormShot2BallCrisis" ||
				infl == "StormStrike1" ||
				infl == "StormStrike1Crisis" ||
				infl == "StormBolt" ||
				infl == "StormBoltCrisis" ||
				infl == "StormBolt2" ||
				infl == "StormBolt2Crisis" ||
				infl == "StormLite1" ||
				infl == "StormLite1Crisis" ||
				infl == "StormLite2" ||
				infl == "StormLite2Crisis" ||
				infl == "ArachnotronPlasma" ||
				infl == "ArachnotronPlasmaNew" ||
				infl == "ArachnotronPlasmaCrisis" ||
				infl == "FusionShot" ||
				infl == "FusionShotCrisis" ||
				infl == "BaronBall" ||
				infl == "BaronBallNew" ||
				infl == "HellKnightBall" ||
				infl == "HellKnightBallCrisis" ||
				infl == "BaronOfHellBall" ||
				infl == "BaronOfHellBallCrisis" ||
				infl == "BelphegorBall" ||
				infl == "BelphegorBallCrisis" ||
				infl == "BruiserBall1" ||
				infl == "BruiserBall1Crisis" ||
				infl == "BruiserBall2" ||
				infl == "BruiserBall2Crisis" ||
				infl == "BruiserFireSpawner" ||
				infl == "BruiserFireSpawnerCrisis" ||
				infl == "BruiserFire" ||
				infl == "BruiserFireCrisis" ||
				infl == "ArchonOfHellBall" ||
				infl == "ArchonOfHellBallCrisis" ||
				infl == "ArchonComet" ||
				infl == "ArchonCometCrisis" ||
				infl == "PyroBall" ||
				infl == "PyroBallCrisis" ||
				infl == "FirebombExplosion1" ||
				infl == "FirebombExplosion1Crisis" ||
				infl == "FirebombExplosion2" ||
				infl == "FirebombExplosion2Crisis" ||
				infl == "FirebombExplosion3" ||
				infl == "FirebombExplosion3Crisis" ||
				infl == "PyroBlast" ||
				infl == "PyroBlastCrisis" ||
				infl == "RainCometNull" ||
				infl == "RainCometNullCrisis" ||
				infl == "FallingComet" ||
				infl == "FallingCometCrisis" ||
				infl == "CometDeath" ||
				infl == "ArchvileFire" ||
				infl == "ArchvileFireNew" ||
				infl == "ArchvileFireCrisis" ||
				infl == "ArchvileFireFast" ||
				infl == "ArchvileFireFastCrisis" ||
				infl == "DFire" ||
				infl == "DFireCrisis" ||
				infl == "DFlare" ||
				infl == "DFlareCrisis" ||
				infl == "DMissile" ||
				infl == "DMissileCrisis" ||
				infl == "DTracer" ||
				infl == "DTracerCrisis" ||
				infl == "DTracerPuff" ||
				infl == "DTracerPuffCrisis" ||
				infl == "DMissileCircle" ||
				infl == "DMissileCircleCrisis" ||
				infl == "DiabloistGravityHPTargeter" ||
				infl == "DiabloistGravityHPTargeter2" ||
				infl == "DiabloistGravityHPTargeter3" ||
				infl == "DiabloistGravityManaTargeter" ||
				infl == "DiabloistGravityManaTargeter2" ||
				infl == "DiabloistGravityManaTargeter3" ||
				infl == "Rocket2" ||
				infl == "Rocket2Crisis" ||
				infl == "HomRocket1" ||
				infl == "HomRocket1Crisis" ||
				infl == "HellClericBall" ||
				infl == "HellClericBallCrisis" ||
				infl == "CyBruiser" ||
				infl == "CyBruiserCrisis" ||
				infl == "DIPuff" ||
				infl == "IncarnateGlareTracer" ||
				infl == "IncarnateGlareTracerCrisis" ||
				infl == "HieroBall1" ||
				infl == "HieroBall1Crisis" ||
				infl == "HieroBall2" ||
				infl == "HieroBall2Crisis" ||
				infl == "CurseBall" ||
				infl == "CyberStomp" ||
				infl == "CyberStompCrisis" ||
				infl == "AnnhiliatorStomp" ||
				infl == "AnnhiliatorStompCrisis" ||
				infl == "HellWarriorBall" ||
				infl == "HellWarriorBallCrisis" ||
				infl == "HellWarriorBall2" ||
				infl == "HellWarriorBall2Crisis" ||
				infl == "HellWarriorShield" ||
				infl == "STGrenadeMonster" ||
				infl == "STGrenadeCrisis" ||
				infl == "IceGuyFXNew" ||
				infl == "IceGuyFXCrisis" ||
				infl == "IceGuyFX2New" ||
				infl == "IceGuyFX2Crisis" ||
				infl == "IceGuyFX3New" ||
				infl == "IceGuyFX3Crisis" ||
				infl == "IceGuyFX4New" ||
				infl == "IceGuyFX4Crisis" ||
				infl == "DemonFire" ||
				infl == "DemonFireCrisis"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHeretic()
	{
		string infl = GetClassName();

		int type;
		if (
				// Heretic
				infl == "EggFX" ||
				infl == "EggFXNew" ||
				infl == "HereticImpBall" ||
				infl == "HereticImpBallNew" ||
				infl == "HereticImpBallCrisis" ||
				infl == "HereticImpBall2" ||
				infl == "HereticImpBall2Crisis" ||
				infl == "BeastBall" ||
				infl == "BeastBallNew" ||
				infl == "BeastBallCrisis" ||
				infl == "BeastBall2" ||
				infl == "BeastBall2Crisis" ||
				infl == "MummyFX1" ||
				infl == "MummyFX1New" ||
				infl == "MummyFX1Crisis" ||
				infl == "KnightAxe" ||
				infl == "KnightAxeNew" ||
				infl == "KnightAxeCrisis" ||
				infl == "RedAxe" ||
				infl == "RedAxeNew" ||
				infl == "RedAxeCrisis" ||
				infl == "DKDart" ||
				infl == "DKDartCrisis" ||
				infl == "FHeadShot" ||
				infl == "FHeadShotCrisis" ||
				infl == "DKbolt" ||
				infl == "DKboltCrisis" ||
				infl == "DKFire" ||
				infl == "DKFireCrisis" ||
				infl == "RedPuff" ||
				infl == "WizardFX1" ||
				infl == "WizardFX1New" ||
				infl == "WizardFX1Crisis" ||
				infl == "BansheeFire" ||
				infl == "BansheeFireCrisis" ||
				infl == "BansheeFire2" ||
				infl == "BansheeFire2Crisis" ||
				infl == "BansheeFire3" ||
				infl == "BansheeFire3Crisis" ||
				infl == "BansheeFire4" ||
				infl == "BansheeFire4Crisis" ||
				infl == "BansheeFire5" ||
				infl == "BansheeFire5Crisis" ||
				infl == "BansheeTrail" ||
				infl == "BansheeTrailCrisis" ||
				infl == "BansheeFireTrail" ||
				infl == "BansheeFireTrailCrisis" ||
				infl == "BansheeFireTrail" ||
				infl == "BansheeFireTrail2" ||
				infl == "HeadFX1" ||
				infl == "HeadFX1New" ||
				infl == "HeadFX1Crisis" ||
				infl == "HeadFX2" ||
				infl == "HeadFX2New" ||
				infl == "HeadFX2Crisis" ||
				infl == "HeadFX3" ||
				infl == "HeadFX3New" ||
				infl == "HeadFX3Crisis" ||
				infl == "Whirlwind" ||
				infl == "WhirlwindNew" ||
				infl == "WhirlwindCrisis" ||
				infl == "IceBreath" ||
				infl == "IceBreathCrisis" ||
				infl == "GoldLichBounce" ||
				infl == "GoldLichBounceCrisis" ||
				infl == "GoldLichFire" ||
				infl == "GoldLichFireCrisis" ||
				infl == "FireBreath" ||
				infl == "FireBreathCrisis" ||
				infl == "BloodLichFireball" ||
				infl == "BloodLichFireballCrisis" ||
				infl == "CurseSpell" ||
				infl == "CurseSpellCrisis" ||
				infl == "ClinkAxe" ||
				infl == "ClinkAxeCrisis" ||
				infl == "ClinkAxe2" ||
				infl == "ClinkAxe2Crisis" ||
				infl == "ShadowBeastBallFire" ||
				infl == "ShadowBeastBallFireCrisis" ||
				infl == "ShadowBeastBall1" ||
				infl == "ShadowBeastBall1Crisis" ||
				infl == "ShadowBeastBall2" ||
				infl == "ShadowBeastBall2Crisis" ||
				infl == "ShadowBeastBall3" ||
				infl == "ShadowBeastBall3Crisis" ||
				infl == "SnakeProjA" ||
				infl == "SnakeProjANew" ||
				infl == "SnakeProjACrisis" ||
				infl == "SnakeProjB" ||
				infl == "SnakeProjBNew" ||
				infl == "SnakeProjBCrisis" ||
				infl == "HellGuardBall" ||
				infl == "HellGuardBallCrisis" ||
				infl == "SorcererFX1" ||
				infl == "SorcererFX1New" ||
				infl == "SorcererFX1Crisis" ||
				infl == "Sorcerer2FX1" ||
				infl == "Sorcerer2FX1New" ||
				infl == "Sorcerer2FX1Crisis" ||
				infl == "Sorcerer2FX2" ||
				infl == "Sorcerer2FX2New" ||
				infl == "Sorcerer2FX2Crisis" ||
				infl == "PlagueShot" ||
				infl == "PlagueShotCrisis" ||
				infl == "DarkClinkBall" ||
				infl == "DarkClinkBallCrisis" ||
				infl == "ShadowBeastSpread" ||
				infl == "ShadowBeastSpreadCrisis" ||
				infl == "SerpathorPhoenixFX1" ||
				infl == "SerpathorPhoenixFX1Crisis" ||
				infl == "Medusabeam" ||
				infl == "MedusabeamCrisis" ||
				infl == "MBSpark" ||
				infl == "MBSparkCrisis" ||
				infl == "MinotaurFX1" ||
				infl == "MinotaurFX1New" ||
				infl == "MinotaurFX1Crisis" ||
				infl == "MinotaurFX2" ||
				infl == "MinotaurFX2New" ||
				infl == "MinotaurFX2Crisis" ||
				infl == "MinotaurFX3" ||
				infl == "MinotaurFX3New" ||
				infl == "MinotaurFX3Crisis"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHexen()
	{
		string infl = GetClassName();

		int type;
		if (
				// Hexen
				infl == "ThrownMace" ||
				infl == "ThrownMaceCrisis" ||
				infl == "DBigEttinMace" ||
				infl == "WraithFX1" ||
				infl == "WraithFX1New" ||
				infl == "WraithFX1Crisis" ||
				infl == "BormerethFX1" ||
				infl == "BormerethFX1Crisis" ||
				infl == "PossEttFakeFireBall" ||
				infl == "PossEttFireBall" ||
				infl == "PossEttFireBallCrisis" ||
				infl == "WraithFX22" ||
				infl == "WraithFX23" ||
				infl == "PEFBExplo" ||
				infl == "PEFBTrail" ||
				infl == "FirePillarStarter" ||
				infl == "FirePillarStarterCrisis" ||
				infl == "FirePillarBase" ||
				infl == "FirePillarBaseCrisis" ||
				infl == "FirePillarShot" ||
				infl == "FirePillarShotCrisis" ||
				infl == "FirePillarShot2" ||
				infl == "FirePillarShot2Crisis" ||
				infl == "CentaurFX" ||
				infl == "CentaurFXNew" ||
				infl == "CentaurFXCrisis" ||
				infl == "FireDemonMissile" ||
				infl == "FireDemonMissileNew" ||
				infl == "FireDemonMissileCrisis" ||
				infl == "FireDemonLeaderMissile" ||
				infl == "FireDemonLeaderMissileCrisis" ||
				infl == "FireDemonLeaderTrail1" ||
				infl == "FireDemonLeaderTrail2" ||
				infl == "FireDemonCommanderMissile" ||
				infl == "FireDemonCommanderMissileCrisis" ||
				infl == "FireDemonCommanderTrail11" ||
				infl == "FireDemonCommanderTrail12" ||
				infl == "FireDemonQueenMissile" ||
				infl == "FireDemonQueenMissileCrisis" ||
				infl == "FireDemonQueenCloneMissile" ||
				infl == "FireDemonQueenCloneMissileCrisis" ||
				infl == "FireDemonQueenTrail1" ||
				infl == "FireDemonQueenTrail2" ||
				infl == "BishopFX" ||
				infl == "BishopFXNew" ||
				infl == "BishopFXNew2" ||
				infl == "BishopFXCrisis" ||
				infl == "DiscipleFX" ||
				infl == "DiscipleFXCrisis" ||
				infl == "DiscipleSpreadFX" ||
				infl == "DiscipleSpreadFXCrisis" ||
				infl == "VampireRoundBeam" ||
				infl == "VampireRoundBeamCrisis" ||
				infl == "VampireRoundBeamTrail" ||
				infl == "BatAttack" ||
				infl == "BatAttackCrisis" ||
				infl == "BatTrail" ||
				infl == "BatAttackSafe" ||
				infl == "SerpentFX" ||
				infl == "SerpentFXNew" ||
				infl == "SerpentFXCrisis" ||
				infl == "Demon1FX1" ||
				infl == "Demon1FX1New" ||
				infl == "Demon1FX1Crisis" ||
				infl == "Demon2FX1" ||
				infl == "Demon2FX1New" ||
				infl == "Demon2FX1Crisis" ||
				infl == "Demon3FX" ||
				infl == "Demon3FXCrisis" ||
				infl == "Demon3FX1Trail" ||
				infl == "HrVolcanoTBlast" ||
				infl == "HrVolcanoTBlastCrisis" ||
				infl == "Demon4FX" ||
				infl == "Demon4FXCrisis" ||
				infl == "BlackDemonTrail" ||
				infl == "PoisonVolcanoTBlast" ||
				infl == "PoisonVolcanoTBlastCrisis" ||
				infl == "Demon5FX1" ||
				infl == "Demon5FX1Crisis" ||
				infl == "Demon5Jet" ||
				infl == "Demon5JetCrisis" ||
				infl == "SorcBall1New" ||
				infl == "SorcBall2New" ||
				infl == "SorcBall3New" ||
				infl == "SorcFX1" ||
				infl == "SorcFX1Base" ||
				infl == "SorcFX1New" ||
				infl == "SorcFX1Crisis" ||
				infl == "SorcFX2" ||
				infl == "SorcFX2Base" ||
				infl == "SorcFX3" ||
				infl == "SorcFX3Base" ||
				infl == "SorcFX4" ||
				infl == "SorcFX4Base" ||
				infl == "SorcFX4New" ||
				infl == "SorcFX4Crisis" ||
				infl == "PorkFXNew"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyStrife()
	{
		string infl = GetClassName();

		int type;
		if (
				// Strife
				infl == "StrifeGenBulletTracer" ||
				infl == "StrifeGenBulletTracerCrisis" ||
				infl == "StrifeGenBulletTracer2" ||
				infl == "StrifeGenBulletTracer2Crisis" ||
				infl == "StrifeReaverBulletTracer" ||
				infl == "StrifeReaverBulletTracerCrisis" ||
				infl == "StrifeReaverBulletTracer2" ||
				infl == "StrifeReaverBulletTracer2Crisis" ||
				infl == "StrifeMaulerTracer" ||
				infl == "StrifeMaulerTracerCrisis" ||
				infl == "StrifeMaulerTracer2" ||
				infl == "StrifeMaulerTracer2Crisis" ||
				infl == "StrifeMaulerTracerRetail" ||
				infl == "StrifeMaulerTracerRetailCrisis" ||
				infl == "StrifeMaulerTracerRetail2" ||
				infl == "StrifeMaulerTracerRetail2Crisis" ||
				infl == "EMPGrenade" ||
				infl == "DarkInquisitorGibber" ||
				infl == "Shrapnel1" ||
				infl == "Shrapnel2" ||
				infl == "Shrapnel3" ||
				infl == "InquisitorDeathExplosion" ||
				infl == "DarkInquisitorBigExplosion" ||
				infl == "EMPTrail" ||
				infl == "DarkMatterBall" ||
				infl == "DarkMatterBallCrisis" ||
				infl == "ShadowVaporSpawner" ||
				infl == "ShadowVapor" ||
				infl == "DarkMatterSpark" ||
				infl == "FlameMissile" ||
				infl == "FlameMissileNew" ||
				infl == "FastFlameMissile" ||
				infl == "FastFlameMissileNew" ||
				infl == "FastFlameMissileCrisis" ||
				infl == "CrusaderMissile" ||
				infl == "CrusaderMissileNew" ||
				infl == "CrusaderMissileCrisis" ||
				infl == "SentinelFX1" ||
				infl == "SentinelFX1New" ||
				infl == "SentinelFX1Crisis" ||
				infl == "Sentinel2FX1" ||
				infl == "Sentinel2FX1New" ||
				infl == "Sentinel2FX1Crisis" ||
				infl == "Sentinel2FX2" ||
				infl == "Sentinel2FX2New" ||
				infl == "Sentinel2FX2Crisis" ||
				infl == "Sentinel2FX3" ||
				infl == "Sentinel2FX3New" ||
				infl == "Sentinel2FX3Crisis" ||
				infl == "Sentinel2FX4" ||
				infl == "Sentinel2FX4New" ||
				infl == "Sentinel2FX4Crisis" ||
				infl == "Sentinel2FX5" ||
				infl == "Sentinel2FX5New" ||
				infl == "Sentinel2FX5Crisis" ||
				infl == "InquisitorShot" ||
				infl == "InquisitorShotNew" ||
				infl == "InquisitorShotCrisis" ||
				infl == "BishopMissile" ||
				infl == "BishopMissileNew" ||
				infl == "BishopMissileCrisis" ||
				infl == "LoreShot" ||
				infl == "LoreShotBase" ||
				infl == "LoreShotNew" ||
				infl == "LoreShotCrisis" ||
				infl == "SpectralLightningBaseNew" ||
				infl == "SpectralLightningBall2Monster" ||
				infl == "SpectralLightningBall2MonsterCrisis" ||
				infl == "SpectralLightningBigV2Monster" ||
				infl == "SpectralLightningBigV2MonsterCrisis" ||
				infl == "SpectralLightningV1Monster" ||
				infl == "SpectralLightningV1MonsterCrisis" ||
				infl == "SpectralLightningV2Monster" ||
				infl == "SpectralLightningV2MonsterCrisis" ||
				infl == "SpectralLightningV2Monster" ||
				infl == "SpectralLightningV2MonsterCrisis" ||
				infl == "SpectralLightningH3Monster" ||
				infl == "SpectralLightningH3MonsterCrisis"
			 ) type = 1;

		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyOthers()
	{
		string infl = GetClassName();

		int type;
		if (
				// KDIZD
				infl == "DemonCubeMissile" ||
				infl == "DemonCubeMissileCrisis" ||
				infl == "KDIZDImpBall" ||
				infl == "KDIZDImpBallCrisis" ||
				infl == "HellsFuryBall" ||
				infl == "HellsFuryBallCrisis" ||
				infl == "ZombieRifleBulletTracer" ||
				infl == "ZombieRifleBulletTracerCrisis" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "Portal1" ||
				infl == "Portal1Crisis" ||
				infl == "Portal2" ||
				infl == "Portal2Crisis" ||
				infl == "Redstar" ||
				infl == "RedstarCrisis" ||
				infl == "KDiZDGrenade" ||
				infl == "KDiZDGrenadeNoAOE" ||
				infl == "KDiZDGrenade2" ||
				infl == "KDiZDGrenade2NoAOE" ||
				infl == "SpiderBiteProj" ||
				infl == "SpiderBiteProjCrisis" ||
				infl == "SpiderBiteProj2" ||
				infl == "SpiderBiteProj2Crisis" ||
				// TCOTD:A
				infl == "BulletPuff2" ||
				infl == "SonicFireball" ||
				infl == "SonicFireballCrisis" ||
				infl == "ClayDevilMissile" ||
				infl == "ClayDevilMissileCrisis" ||
				infl == "FireBlast" ||
				infl == "FireBlastCrisis" ||
				infl == "SuperFireBlast" ||
				infl == "SuperFireBlastCrisis" ||
				infl == "ThrallShot1" ||
				infl == "ThrallShot1Crisis" ||
				infl == "DogFire" ||
				infl == "DogFireNew" ||
				infl == "DogFireCrisis" ||
				infl == "DogShot" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "DCBMiss1" ||
				infl == "DCBMiss1Crisis" ||
				infl == "DCBM1Trail" ||
				infl == "DCBMiss2" ||
				infl == "DCBMiss2Crisis" ||
				infl == "DCBMiss3" ||
				infl == "DCBMiss3Crisis" ||
				infl == "DCBMiss3M" ||
				infl == "DCBMiss3MCrisis" ||
				infl == "DCBMiss3Extra" ||
				infl == "DCBMiss3ExtraCrisis" ||
				infl == "VulgarShot" ||
				infl == "VulgarShotNew" ||
				infl == "VulgarShotCrisis" ||
				infl == "ButcherBarf" ||
				infl == "ButcherBarfNew" ||
				infl == "ButcherBarfCrisis" ||
				infl == "Pook" ||
				infl == "Cleaver" ||
				infl == "CleaverNew" ||
				infl == "CleaverCrisis" ||
				infl == "Cleaver" ||
				infl == "FattyTracer1" ||
				infl == "FattyTracer2" ||
				infl == "Pitchfork_thrown" ||
				infl == "TeslaBall" ||
				infl == "TeslaBall2" ||
				infl == "RocketBlood" ||
				infl == "WraithFX22" ||
				infl == "NewPuff" ||
				infl == "Puff2" ||
				infl == "NewSparks" ||
				infl == "ForkPuff" ||
				infl == "SpiderBiteProj" ||
				infl == "SpiderBiteProjCrisis" ||
				infl == "SpiderBiteProj2" ||
				infl == "SpiderBiteProj2Crisis" ||
				infl == "TCOTDBulletTracer" ||
				infl == "TCOTDBulletTracerCrisis" ||
				// TUTNT
				infl == "SGuardianFlameBreath" ||
				infl == "SGuardianFlameBreathCrisis" ||
				infl == "SourceGuardianDetonator" ||
				infl == "SourceGuardianDetonatorCrisis" ||
				infl == "FallingRock1" ||
				infl == "FallingRock2" ||
				infl == "FallingRockFrac1" ||
				infl == "FallingRockFrac2" ||
				infl == "FallingRockFrac3" ||
				infl == "FlameBreathSource" ||
				infl == "CatharsiBall" ||
				infl == "CatharsiBallCrisis" ||
				infl == "Comet" ||
				// Sitnalta
				infl == "LightningBallC1" ||
				infl == "LightningBallC2" ||
				infl == "LightningBallC2T" ||
				infl == "GroundLightning" ||
				infl == "GroundTrail" ||
				infl == "GroundSmoke" ||
				infl == "SmokeLightning" ||
				infl == "LightningBallS" ||
				infl == "LightningRod1" ||
				infl == "LightningRod1Crisis" ||
				infl == "GroundLightningTracer" ||
				infl == "MiniLightningPuff" ||
				infl == "LightningRod1L" ||
				infl == "TracerTrail" ||
				infl == "LightningRod3" ||
				// DUMP [1-3]
				// Circus666
				infl == "RevRocket" ||
				infl == "RevRocketCrisis" ||
				infl == "SpawnRck" ||
				infl == "SpawnRckCrisis" ||
				// Circus2
				infl == "SkullSeeker" ||
				infl == "SkullSeekerCrisis" ||
				infl == "SkullSeeker2" ||
				infl == "SkullSeeker2Crisis" ||
				infl == "PennywiseHeadProj" ||
				infl == "PennywiseHeadProjCrisis" ||
				infl == "RevRocketNew" ||
				infl == "RevRocketCrisis" ||
				infl == "HappyCloud" ||
				infl == "HappyCloudCrisis" ||
				infl == "TinyBingoBall" ||
				infl == "TinyBingoBallCrisis" ||
				infl == "BeefyBall1" ||
				infl == "BeefyBall1Crisis" ||
				infl == "BeefyBall2" ||
				infl == "BeefyBall2Crisis" ||
				infl == "Ghost2Ball" ||
				infl == "Ghost2BallCrisis" ||
				infl == "BulbyBall" ||
				infl == "BulbyBallCrisis" ||
				infl == "BulbyBall2" ||
				infl == "BulbyBall2Crisis" ||
				infl == "BulbyBall3" ||
				infl == "BulbyBall3Crisis" ||
				infl == "BerthaBall" ||
				infl == "BerthaBallCrisis" ||
				infl == "SoulAttack" ||
				infl == "SoulAttackCrisis" ||
				infl == "SkullSeeker666" ||
				infl == "SkullSeeker666Crisis" ||
				infl == "Deadlight" ||
				infl == "DeadlightCrisis" ||
				// Strange Aeons
				infl == "WDemonProj" ||
				infl == "WDemonProjCrisis" ||
				infl == "WDemonProj2" ||
				infl == "WDemonProj2Crisis" ||
				infl == "ShadowBeastSpread" ||
				infl == "ShadowBeastSparkle" ||
				infl == "ShadowBeastBallFire" ||
				infl == "ShadowBeastBallFireCrisis" ||
				infl == "ShadowBeastBall2Fire" ||
				infl == "ShadowBeastBall2FireCrisis" ||
				infl == "ShadowBeastBall3Fire" ||
				infl == "ShadowBeastBall3FireCrisis" ||
				infl == "Revrailshot" ||
				infl == "RevrailshotCrisis" ||
				infl == "DeepOneBall" ||
				infl == "DeepOneBallCrisis" ||
				infl == "VulgarShotNew" ||
				infl == "VulgarShotCrisis" ||
				infl == "FlameShot" ||
				infl == "FlameShotCrisis" ||
				infl == "HellRipper" ||
				infl == "HellRipperCrisis" ||
				infl == "HellRipper2" ||
				infl == "HellRipper2Crisis" ||
				infl == "ArchvileFire2" ||
				infl == "ArchvileFire2Crisis" ||
				infl == "FloorShot" ||
				infl == "FloorShotCrisis" ||
				infl == "MagicBlast" ||
				infl == "MagicBlastCrisis" ||
				// Unloved
				infl == "MiniFirePuff" ||
				infl == "MiniFirePuffCrisis" ||
				infl == "MiniFirePuffNoDamage" ||
				infl == "YellowSkullSeeker" ||
				infl == "YellowSkullSeekerCrisis" ||
				infl == "GreenPoisonBall" ||
				infl == "GreenPoisonBallCrisis" ||
				infl == "RedSkullBall" ||
				infl == "RedSkullBallCrisis" ||
				infl == "Bloodshot" ||
				infl == "Bloodtrail" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "ThrallShot1" ||
				infl == "ThrallShot1Crisis" ||
				infl == "AcolyteShot" ||
				infl == "AcolyteShotCrisis" ||
				infl == "DiscipleShot1" ||
				infl == "DiscipleShot1Crisis" ||
				infl == "DiscipleShot2" ||
				infl == "DiscipleShot2Crisis" ||
				infl == "WickedShot" ||
				infl == "WickedShotCrisis" ||
				infl == "FireBlast" ||
				infl == "FireBlastCrisis" ||
				infl == "SuperFireBlast" ||
				infl == "SuperFireBlastCrisis" ||
				infl == "RedLiteTop" ||
				infl == "RedLiteTopCrisis" ||
				infl == "RedLiteBot" ||
				infl == "RedLiteBotCrisis" ||
				infl == "RedLiteZap" ||
				infl == "RedLiteZapCrisis" ||
				infl == "AvaFireBall" ||
				infl == "AvaFireBallCrisis" ||
				infl == "AvaBall1" ||
				infl == "AvaBall1Crisis" ||
				infl == "AvaBall2" ||
				infl == "AvaBall2Crisis" ||
				infl == "AvaBall3" ||
				infl == "AvaBall3Crisis" ||
				infl == "AvaBall4" ||
				infl == "AvaBall4Crisis" ||
				infl == "HolyMissile2" ||
				infl == "DCBMiss1" ||
				infl == "DCBMiss1Crisis" ||
				infl == "DCBMiss2" ||
				infl == "DCBMiss2Crisis" ||
				infl == "DCBMiss3" ||
				infl == "DCBMiss3Crisis" ||
				infl == "DCBMiss3M" ||
				infl == "DCBMiss3MCrisis" ||
				infl == "DCBMiss3G"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendly1()
	{
		string infl = GetClassName();

		int type;
		if (
				// Misc
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}
	
	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer()
	{
		string infl = GetClassName();

		int type;
		if (
				infl == "UnmakerLaser" ||
				// Hellcore Soul Projectiles
				infl == "DoomImpBall-Soul" ||
				infl == "DoomImpBallCrisis-Soul" ||
				infl == "DarkSeeker-Soul" ||
				infl == "DarkSeekerCrisis-Soul" ||
				infl == "CacodemonBall-Soul" ||
				infl == "CacodemonBallCrisis-Soul" ||
				infl == "CacolanternBall-Soul" ||
				infl == "CacolanternBallCrisis-Soul" ||
				infl == "AbaddonBall-Soul" ||
				infl == "AbaddonBallCrisis-Soul" ||
				infl == "HellKnightBall-Soul" ||
				infl == "HellKnightBallCrisis-Soul" ||
				infl == "BaronOfHellBall-Soul" ||
				infl == "BaronOfHellBallCrisis-Soul" ||
				infl == "BelphegorBall-Soul" ||
				infl == "BelphegorBallCrisis-Soul" ||
				infl == "BruiserBall-Soul" ||
				infl == "BruiserBallCrisis-Soul" ||
				infl == "BruiserBall2-Soul" ||
				infl == "BruiserBall2Crisis-Soul" ||
				infl == "BruiserFireSpawner-Soul" ||
				infl == "BruiserFireSpawnerCrisis-Soul" ||
				infl == "ArchonOfHellBall-Soul" ||
				infl == "ArchonOfHellBallCrisis-Soul" ||
				infl == "ArchonComet-Soul" ||
				infl == "ArchonCometCrisis-Soul" ||
				infl == "FireShot-Soul" ||
				infl == "FireShotCrisis-Soul" ||
				infl == "PyroBall-Soul" ||
				infl == "PyroBallCrisis-Soul" ||
				infl == "PyroBlast-Soul" ||
				infl == "PyroBlastCrisis-Soul" ||
				infl == "FirebombExplosion1-Soul" ||
				infl == "FirebombExplosion1Crisis-Soul" ||
				infl == "FirebombExplosion2-Soul" ||
				infl == "FirebombExplosion2Crisis-Soul" ||
				infl == "FirebombExplosion3-Soul" ||
				infl == "FirebombExplosion3Crisis-Soul" ||
				infl == "RainCometNull-Soul" ||
				infl == "RainCometNullCrisis-Soul" ||
				infl == "EscapeExplosion-Soul" ||
				infl == "EscapeExplosionCrisis-Soul" ||
				infl == "DIPuff-Soul" ||
				infl == "ArchvileFireFast" ||
				infl == "ArchvileFireFastCrisis" ||
				infl == "DFlare-Soul" ||
				infl == "DFlareCrisis-Soul" ||
				infl == "DTracer-Soul" ||
				infl == "DTracerCrisis-Soul" ||
				infl == "DTracerPuff-Soul" ||
				infl == "DTracerPuffCrisis-Soul" ||
				infl == "DMissile-Soul" ||
				infl == "DMissileCrisis-Soul" ||
				infl == "DMissileCircle-Soul" ||
				infl == "DMissileCircleCrisis-Soul" ||
				infl == "DFire-Soul" ||
				infl == "DFireCrisis-Soul" ||
				infl == "DiabloistGravityHPTargeter" ||
				infl == "DiabloistGravityHPTargeter2" ||
				infl == "DiabloistGravityHPTargeter3" ||
				infl == "DiabloistGravityManaTargeter" ||
				infl == "DiabloistGravityManaTargeter2" ||
				infl == "DiabloistGravityManaTargeter3" ||
				infl == "FlyingBalrogShot1-Soul" ||
				infl == "FlyingBalrogShot1Crisis-Soul" ||
				infl == "FlyingBalrogShot2-Soul" ||
				infl == "FlyingBalrogShot2Crisis-Soul" ||
				infl == "HadesElementalBall-Soul" ||
				infl == "HadesElementalBallCrisis-Soul" ||
				infl == "HadesBolt-Soul" ||
				infl == "HadesBoltCrisis-Soul" ||
				infl == "StormStrike1-Soul" ||
				infl == "StormStrike1Crisis-Soul" ||
				infl == "StormShot1-Soul" ||
				infl == "StormShot1Crisis-Soul" ||
				infl == "StormShot2-Soul" ||
				infl == "StormShot2Crisis-Soul" ||
				infl == "StormBolt-Soul" ||
				infl == "StormBoltCrisis-Soul" ||
				infl == "StormBolt2-Soul" ||
				infl == "StormBolt2Crisis-Soul" ||
				infl == "StormLite1-Soul" ||
				infl == "StormLite1Crisis-Soul" ||
				infl == "StormLite2-Soul" ||
				infl == "StormLite2Crisis-Soul" ||
				infl == "HadesOverlordBall-Soul" ||
				infl == "HadesOverlordBallCrisis-Soul" ||
				infl == "OverBall-Soul" ||
				infl == "OverBallCrisis-Soul" ||
				// Doomspells
				infl == "RagingSpiritBase" ||
				infl == "RagingSpirit2Base" ||
				infl == "RagingSpiritTail" ||
				infl == "RagingSpiritTail2" ||
				infl == "RagingSpirit" ||
				infl == "RagingSpirit2" ||
				infl == "MinorMagicMissile" ||
				infl == "MinorMagicMissileSeek" ||
				infl == "MMMParticle" ||
				infl == "MagicMissile" ||
				infl == "MagicMissileSeek" ||
				infl == "NMMParticle" ||
				infl == "MajorMagicMissile" ||
				infl == "MajorMagicMissileSeek" ||
				infl == "BMMParticle" ||
				infl == "UltraMagicMissile" ||
				infl == "UltraMagicMissileSeek" ||
				infl == "UMMParticle" ||
				infl == "MinorFireBall" ||
				infl == "MinorFireBallSeek" ||
				infl == "NormalFireBall" ||
				infl == "NormalFireBallSeek" ||
				infl == "MajorFireBall" ||
				infl == "MajorFireBallSeek" ||
				infl == "MinorHexenIceShard" ||
				infl == "MinorHexenIceShardSeek" ||
				infl == "HexenIceShard" ||
				infl == "HexenIceShardSeek" ||
				infl == "MajorHexenIceShard" ||
				infl == "MajorHexenIceShardSeek" ||
				infl == "ChillTouch" ||
				infl == "HexenLightningF" ||
				infl == "HexenLightningC" ||
				infl == "HexenLightningZap" ||
				infl == "MajorHexenLightningF" ||
				infl == "MajorHexenLightningC" ||
				infl == "MajorHexenLightningZap" ||
				infl == "AcidRainPillar" ||
				infl == "SuperiorAcidRainPillar" ||
				infl == "AcidRain" ||
				infl == "SuperiorAcidRain" ||
				infl == "MinorPoisonCloud" ||
				infl == "NormalPoisonCloud" ||
				infl == "MajorPoisonCloud" ||
				infl == "HexenPoisonCloud1" ||
				infl == "HexenPoisonCloud2Source" ||
				infl == "HexenPoisonCloud2Outer" ||
				infl == "HexenPoisonCloud3Source" ||
				infl == "HexenPoisonCloud3Outer" ||
				// Non Hellcore/DoomSpell
				infl == "HubbleBubbleSmall" ||
				infl == "HubbleBubbleLarge" ||
				infl == "PoisonNeedlePuff" ||
				infl == "PoisonNeedleProj" ||
				infl == "PoisonNeedleProjExtra" ||
				infl == "PoisonNeedleProjPuff" ||
				infl == "EvilWarriorShieldBall" ||
				infl == "EvilWarriorShieldBallCrisis" ||
				infl == "MageWandMissileNew" ||
				infl == "MageWandMissile2New" ||
				infl == "DiarisHolyArrow" ||
				infl == "DiarisHolyArrow2XDmg" ||
				infl == "DiarisHolyArrow3XDmg" ||
				infl == "CStaffMissileNew" ||
				infl == "AChristinaShot" ||
				infl == "AChristinaShot2" ||
				infl == "AChristinaShotTracer" ||
				infl == "AChristinaShotPuff" ||
				infl == "AChristinaShotPuffChargedFinal" ||
				infl == "AChristinaBouncingShotWeak" ||
				infl == "AChristinaBouncingShotStage1" ||
				infl == "AChristinaBouncingShotStage2" ||
				infl == "AChristinaBouncingShotStage3" ||
				infl == "AChristinaPartiniasBall" ||
				// Doom Weapons
				infl == "BulletPuff" ||
				infl == "DBTPuff" ||
				infl == "FistPuff" ||
				infl == "KickPuff" ||
				infl == "UppercutPuff" ||
				infl == "GauntletPuff" ||
				infl == "SceptrePuff-Normal" ||
				infl == "SceptrePuff-ShockWave" ||
				infl == "SceptrePuff-Silent" ||
				infl == "SceptrePuff-Reticle" ||
				infl == "SceptrePuff-Reticle2" ||
				infl == "SceptrePuff-Spinning" ||
				infl == "SceptrePuff-SpinningSilent" ||
				infl == "HowitzerBase" ||
				infl == "HowitzerNoAOE" ||
				infl == "RocketPlayer" ||
				infl == "RocketPlayerNoAOE" ||
				infl == "RocketPlayerSeeking" ||
				infl == "RocketPlayerSeekingNoAOE" ||
				infl == "RocketPlayerDrunk" ||
				infl == "RocketPlayerDrunkNoAOE" ||
				infl == "PlasmaBallPlayer" ||
				infl == "RepeaterPuffPlayer" ||
				infl == "KsawBoltPlayer" ||
				infl == "PlasmaBall1Player" ||
				infl == "PlasmaBall2Player" ||
				infl == "BFGBallPlayer" ||
				infl == "BFGExtraPlayer" ||
				// Heretic
				infl == "Sorcerer2FX1Player" ||
				infl == "Sorcerer2FX3" ||
				infl == "RockBombShardProj" ||
				infl == "GoldWandFX1New" ||
				infl == "GoldWandFX2New" ||
				infl == "GoldWandPuff1New" ||
				infl == "GoldWandPuff2New" ||
				infl == "CrossbowFX1New" ||
				infl == "CrossbowFX2New" ||
				infl == "CrossbowFX3New" ||
				infl == "RipperNew" ||
				infl == "BlasterPuffNew" ||
				infl == "BlasterFX1New" ||
				infl == "HornRodFX1New" ||
				infl == "HornRodFX2New" ||
				infl == "RainPillarNew" ||
				infl == "PhoenixFX1New" ||
				infl == "PhoenixFX1NoAOE" ||
				infl == "PhoenixFX1Seeking" ||
				infl == "PhoenixFX1NoAOESeeking" ||
				infl == "PhoenixFX2New" ||
				infl == "PhoenixFX2Seeking" ||
				infl == "PhoenixPuff2" ||
				infl == "MaceFX1New" ||
				infl == "MaceFX2New" ||
				infl == "MaceFX3New" ||
				infl == "MaceFX4New" ||
				// Strife
				infl == "ElectricBoltNew" ||
				infl == "PoisonBoltNew" ||
				infl == "SpectralLightningBaseNew" ||
				infl == "SpectralLightningBall1New" ||
				infl == "SpectralLightningBall2New" ||
				infl == "SpectralLightningDeath1New" ||
				infl == "SpectralLightningBigV1New" ||
				infl == "SpectralLightningBigV2New" ||
				infl == "SpectralLightningDeath2New" ||
				infl == "SpectralLightningDeathShortNew" ||
				infl == "SpectralLightningBigBall1New" ||
				infl == "SpectralLightningV1New" ||
				infl == "SpectralLightningV2New" ||
				infl == "SpectralLightningH1New" ||
				infl == "SpectralLightningH2New" ||
				infl == "SpectralLightningH3New" ||
				infl == "SpectralLightningSpotNew" ||
				infl == "NNSigilLightningSpot" ||
				infl == "NNSigilLightningBigV" ||
				// Other
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer2()
	{
		string infl = GetClassName();

		int type;
		if (
				// Circus 2
				infl == "GoreBalloon666" ||
				infl == "GoreBalloon666NoHurt" ||
				infl == "CGrenade" ||
				infl == "CGrenadeNoHurt" ||
				infl == "FlyingGut" ||
				infl == "FlyingGutNoHurt" ||
				infl == "RevRocket2" ||
				infl == "RevRocket2NoHurt" ||
				infl == "CrazyBalls" ||
				infl == "CrazyBallsNoHurt" ||
				infl == "CrazyBall" ||
				infl == "CrazyBallNoHurt" ||
				infl == "CrazyBallNew" ||
				// TCOTD2
				infl == "ForkPuff" ||
				// Strange Aeons
				infl == "SonicNail" ||
				infl == "SoulScepterPuff" ||
				infl == "SoulScepterPowerPuff" ||
				infl == "DualSoulScepterPuff" ||
				infl == "DualSoulScepterPowerPuff" ||
				// Other
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}
}

/*
mixin class AtkTypeChecker
{
	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;
	int finaldamagedealt;
	int finaldamagedealt2;

	action int A_GetPlayerAttackDamage(int type = 0, int puff = 0)
	{
		string nm;
		int debugplayeratkinfo = dvdsdebug_showplayeratkinformation;
		int flagchecktype = 0;
		int baserand1, baserand2;
		int damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6, finaldmg;
		int rand1, rand2;
		double perkfactor = 1.00;
		double chargefactor = 1.00;
		int playershot = 0;
		int PlayerAeonPts = CallACS("MiscVarCheckDECORATE",25);
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
		int PlayerDEF = CallACS("MiscVarCheckDECORATE",32);
		int PlayerDFT = CallACS("MiscVarCheckDECORATE",33);
		int PlayerSOR = CallACS("MiscVarCheckDECORATE",34);
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int PlayerTHE = CallACS("MiscVarCheckDECORATE",36);
		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ismagicalatk;
		int isfirearmatk;
		int ishybridatk;

		perkfactor = 1.00;
		// Bullet
		if (type == 1 ||
				type == 2 ||
				type == 5 ||
				type == 6 ||
				type == 60)
				perkfactor += ((BulletAccuracyPerkLevel * 0.05) + (BulletAccuracyEXPerkLevel * 0.125));
		// Pellet
		if (type == 3 || 
				type == 4 ||
				type == 60)
				perkfactor += ((PelletAccuracyPerkLevel * 0.05) + (PelletAccuracyEXPerkLevel * 0.125));
		// Plasma
		if (type == 7 || 
				type == 10 || 
				type == 11 || 
				type == 12 || 
				type == 13 ||
				type == 48 ||
				type == 49 ||
				(type >= 53 && type <= 56) ||
				type == 58)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
		// Demolition
		if (type == 8 || 
				type == 9)
				perkfactor += ((DemolitionsExpertPerkLevel * frandom(0.07,0.14)) + (DemolitionsExpertEXPerkLevel * frandom(0.175,0.35)));
		// Karasawa
		if (type == 16 || 
				type == 17)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
				perkfactor += ((KarasawaAttunementPerkLevel * 0.5) + (KarasawaAttunementEXPerkLevel * 1.25));
		// BFG
		if (type == 12 || 
				type == 13 || 
				type == 14 || 
				type == 15)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
				perkfactor += ((BFGAttunementPerkLevel * 0.5) + (BFGAttunementEXPerkLevel * 1.25));
		// Archery
		if (type >= 18 && type <= 20)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Ethereal Crossbow
		if (type == 21 || 
				type == 22 || 
				type == 23)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Strife Crossbow
		if (type == 25 ||
				type == 26)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Impaler Crossbow [Strange Aeons]
		if (type == 63 || type == 64)
		{
				perkfactor += ((MagiUpPerkLevel * 0.075) + (MagiUpEXPerkLevel * 0.1875)); // MagiUp
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125)); // Wand/Staff Mastery
				perkfactor += ((ArcheryMasteryPerkLevel * 0.25) + (ArcheryMasteryEXPerkLevel * 0.625));
		}
		// Heretic Magic Weapons
		if (type == 24 || 
				(type >= 27 && type <= 43))
				perkfactor += ((WandMasteryPerkLevel * 0.10) + (WandMasteryEXPerkLevel * 0.25));
		// Sapphire Wand(s) [Flora] & Serpent Staff(ves) [Ailish]
		if (type == 44 || 
				type == 45 ||
				type == 57)
				perkfactor += ((WandMasteryPerkLevel * 0.125) + (WandMasteryEXPerkLevel * 0.3125));
		// Hubble Bubbles
		if (type == 46 || 
				type == 47)
				perkfactor += ((WandMasteryPerkLevel * 0.15) + (WandMasteryEXPerkLevel * 0.375));
		// Unmaker Lasers
		if (type == 50 || type == 51)
		{
				perkfactor += ((MagiUpPerkLevel * 0.075) + (MagiUpEXPerkLevel * 0.1875));
				perkfactor += ((SoulMasteryPerkLevel * 0.10) + (SoulMasteryEXPerkLevel * 0.25));
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		// Hell Warrior Shield Fireballs
		if (type == 52)
		{
				perkfactor += ((MagiUpPerkLevel * 0.075) + (MagiUpEXPerkLevel * 0.1875)); // MagiUp
				perkfactor += ((SoulMasteryPerkLevel * 0.05) + (SoulMasteryEXPerkLevel * 0.125)); // Soul Mastery
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125)); // Wand/Staff Mastery
		}
		// Soul Scepter
		if (type >= 65 && type <= 68) // Soul Scepter
		{
			perkfactor += ((MagiUpPerkLevel * 0.0375) + (MagiUpEXPerkLevel * 0.09375)); // MagiUp
			perkfactor += ((SoulMasteryPerkLevel * 0.10) + (SoulMasteryEXPerkLevel * 0.25)); // Soul Mastery
			perkfactor += ((WandMasteryPerkLevel * 0.025) + (WandMasteryEXPerkLevel * 0.0625)); // Wand/Staff Mastery
		}
		
		
		// Main Definitions
		if (type == 1) // Pistol [Single]
		{
			damage = random(1,4) * random(5,7); // 5 to 28
			extradmg1 = PlayerAGL * 1.50; // 150% of Agility
			extradmg2 = PlayerSTR * 0.35; // 35% of Strength
		}
		if (type == 2) // Pistol [Dual]
		{
			damage = random(2,4) * random(6,7); // 12 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength
		}
		if (type == 3) // Shotgun
		{
			damage = random(2,3) * 5; // 10 to 15
			extradmg1 = PlayerAGL * 2.00; // 200% of Agility
			extradmg2 = PlayerSTR * 0.175; // 17.5% of Strength
		}
		if (type == 4) // Super Shotgun
		{
			damage = random(2,3) * random(5,6); // 10 to 18
			extradmg1 = PlayerAGL * 2.50; // 175% of Agility
			extradmg2 = PlayerSTR * 0.25; // 25% of Strength
		}
		if (type == 5) // Chaingun
		{
			damage = random(2,4) * random(5,7); // 10 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength 
		}
		if (type == 6) // Minigun
		{
			damage = random(3,4) * random(6,7); // 18 to 28
			extradmg1 = PlayerAGL * 2.00; // 175% of Agility
			extradmg2 = PlayerSTR * 0.50; // 40% of Strength 
		}
		if (type == 7) // Repeater
		{
			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 0.50);
			baserand2 = 3 + PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 1.50);
			
			damage = random(baserand1,baserand2) * 6; // 6 to 18
			extradmg1 = PlayerAGL * 3.00; // 300% of Agility
			extradmg2 = PlayerSTR * 0.75; // 75% of Strength 
		}
		if (type == 8) // Rocket/Grenade [main hit]
		{
			baserand1 = 1 + DemolitionsExpertPerkLevel;
			baserand2 = 8 + (DemolitionsExpertPerkLevel * 0.50) + (DemolitionsExpertEXPerkLevel * 1.25);
			
			damage = random(baserand1,baserand2) * 20; // 20 to 160
			extradmg1 = PlayerAGL * 2.50; // 250% of Agility
			extradmg2 = PlayerSTR * 1.125; // 112.5% of Strength 
		}
		if (type == 9) // Rocket/Grenade [explosion]
		{
			damage = 128 + (DemolitionsExpertPerkLevel * 12) + (DemolitionsExpertEXPerkLevel * 30);
			extradmg1 = PlayerAGL * 2.50; // 250% of Agility
			extradmg2 = PlayerSTR * 1.125; // 112.5% of Strength 
		}
		if (type == 10) // Repeater [explosion]
		{
			damage = 7 + (PlasmaAccuracyPerkLevel * 4) + (PlasmaAccuracyEXPerkLevel * 10); // 7
			extradmg1 = PlayerAGL * 0.40; // 40% of Agility
			extradmg2 = PlayerSTR * 0.1428282829; // 14.28~% of Strength 
		}

		if (type == 11) // Plasma
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 5; // 5 to 40
			extradmg1 = PlayerAGL * 0.9334; // 93.34% of Agility
			extradmg2 = PlayerSTR * 0.45; // 45% of Strength 
		}
		if (type == 12) // Plasma1 [BFG2704]
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 4; // 4 to 32
			extradmg1 = PlayerAGL * 1.00; // 100% of Agility
			extradmg2 = PlayerSTR * 0.55; // 55% of Strength 
		}
		if (type == 13) // Plasma2 [BFG2704]
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 4; // 4 to 32
			extradmg1 = PlayerAGL * 1.10; // 110% of Agility
			extradmg2 = PlayerSTR * 0.50; // 50% of Strength 
		}

		if (type == 14) // BFG [Main]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 2);
			if (BFGAttunementPerkLevel <= 0) baserand1 += 2;
			if (BFGAttunementPerkLevel == 1) baserand1 += 4;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 8;
			baserand2 = PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 1.5);
			if (BFGAttunementPerkLevel <= 0) baserand2 += 16;
			if (BFGAttunementPerkLevel == 1) baserand2 += 17;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 20;
			damage = random(baserand1,baserand2) * 50; // 100 to 800
			extradmg1 = (PlayerAGL * 11); // 1100% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 12); // 1200% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 15); // 1500% of Agility
			extradmg2 = (PlayerSTR * 5.5); // 550% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 6); // 600% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 7.5); // 750% of Strength 
		}
		if (type == 15) // BFG [Tracer]
		{
			baserand1 =( PlasmaAccuracyPerkLevel * 1.5);
			if (BFGAttunementPerkLevel <= 0) baserand1 += 1;
			if (BFGAttunementPerkLevel == 1) baserand1 += 2;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 3;
			baserand2 = (PlasmaAccuracyPerkLevel * 0.75) + (PlasmaAccuracyEXPerkLevel * 1.375);
			if (BFGAttunementPerkLevel <= 0) baserand2 += 8;
			if (BFGAttunementPerkLevel == 1) baserand2 += 9;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 10;
	
			damage = random(baserand1,baserand2) + 15; // 100 to 800
			if (BFGAttunementPerkLevel == 1) damage = random(baserand1,baserand2) + 18; // 20 to 37
			if (BFGAttunementPerkLevel == 2) damage = random(baserand1,baserand2) + 22; // 25 to 32
			extradmg1 = (PlayerAGL * 2.2); // 220% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 2.4); // 240% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 3); // 300% of Agility
			extradmg2 = (PlayerSTR * 1); // 100% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 1.75); // 175% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 2.5); // 250% of Strength 
		}
		if (type == 16 || type == 17) // KSawBolt
		{
			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 1.0) + (PlasmaAccuracyEXPerkLevel * 2.5);
			damage = random(baserand1,baserand2) * 15; // 15 to 120
			extradmg1 = (PlayerAGL * 4.4); // 440% of Agility
			extradmg2 = (PlayerSTR * 2); // 200% of Strength
		}
		if (type >= 18 && type <= 20) // DiarisHolyArrows
		{
			damage = 384 + random(-48,192); // 336 to 576 damage
			
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 1) damage *= 1.5;
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 2) damage *= 2.25;
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 3) damage *= 3.375;
	
			if (type == 18) // DiarisHolyArrow [native]
			{
				extradmg1 = (PlayerAGL * 5); // 500% of Agility
				extradmg2 = (PlayerSTR * 0.4); // 40% of Strength 
			}
			if (type == 19) // DiarisHolyArrow2XDmg [native]
			{
				damage *= 2;
				extradmg1 = ((PlayerAGL * 6.25) * 2); // 625% of Agility
				extradmg2 = ((PlayerSTR * 0.5) * 2); // 50% of Strength 
			}
			if (type == 20) // DiarisHolyArrow3XDmg [native]
			{
				damage *= 3;
				extradmg1 = ((PlayerAGL * 7.5) * 3); // 750% of Agility
				extradmg2 = ((PlayerSTR * 0.6) * 3); // 60% of Strength 
			}
			
			damage /= 2;
			extradmg1 /= 2;
			extradmg2 /= 2;
		}
		if (type == 21) // CrossbowFX1New [HERETIC]
		{
			damage = 45 + random(-22,22); // 23 to 67 damage
			extradmg1 = (PlayerAGL * 2.50); // 250% of Agility
			extradmg2 = (PlayerSTR * 0.10); // 10% of Strength 
		}
		if (type == 22) // CrossbowFX2New [HERETIC]
		{
			damage = 27 + random(-13,13); // 14 to 40 damage
			extradmg1 = (PlayerAGL * 1.50); // 150% of Agility
			extradmg2 = (PlayerSTR * 0.06); // 6% of Strength 
		}
		if (type == 23) // CrossbowFX3New [HERETIC]
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerAGL * 0.50); // 50% of Agility
			extradmg2 = (PlayerSTR * 0.02); // 2% of Strength 
		}
		if (type == 24) // RipperNew [HERETIC] <MAGIC TYPE>
		{
			damage = 1 * random(1,8);
			extradmg1 = ((PlayerSOR * 0.125) * random(1,8)); // 12.5% of Sorcery
			extradmg2 = ((PlayerTHE * 0.0325) * random(1,8)); // 3.25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 25) // ElectricBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.125); // 12.5% of Strength 
		}
		if (type == 26) // PoisonBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.125); // 12.5% of Strength 
		}
		if (type == 27) // BlasterPuffNew [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32 damage
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.125); // 12.5% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 28) // BlasterFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.125); // 12.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.0325); // 3.125% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 29) // GoldWandPuff1New [HERETIC] <MAGIC TYPE>
		{
			damage = 8 + random(1,6); // 9-14
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.2); // 20% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 30) // GoldWandPuff2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 2 to 8
			extradmg1 = (PlayerSOR * 0.3334); // 33.34% of Sorcery
			extradmg2 = (PlayerTHE * 0.13334); // 13.33~% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 31) // HornRodFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 14 + random(-7,8); // 7 to 22
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.041667); // 4.1667% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 32) // HornRodFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 0.3334); // 33.3% of Sorcery
			extradmg2 = (PlayerTHE * 0.141414); // 14.1414% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 33) // PhoenixFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 0.667); // 66.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.28571); // 28.571% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 34) // PhoenixFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.0667); // 6.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.028571); // 2.8571% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 35) // MaceFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.067); // 6.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.027778); // 2.7778% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 36) // MaceFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 27 + random(-13,13); // 6 to 48
			extradmg1 = (PlayerSOR * 0.2); // 20% of Sorcery
			extradmg2 = (PlayerTHE * 0.0833); // 8.333% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 37) // MaceFX3New [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32
			extradmg1 = (PlayerSOR * 0.10); // 10% of Sorcery
			extradmg2 = (PlayerTHE * 0.041666); // 4.1666% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 38) // MaceFX4New [HERETIC] <MAGIC TYPE>
		{
			damage = 96 + random(-48,-48); // 18 to 144
			extradmg1 = (PlayerSOR * 0.8333); // 83.333% of Sorcery
			extradmg2 = (PlayerTHE * 0.285714); // 28.5714% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 39) // Sorcerer2FX1Player [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = ((PlayerSOR * 12) / 2); // 600% of Sorcery
			extradmg2 = ((PlayerTHE * 16) / 7); // 228.57% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 40) // Sorcerer2FX3 [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 3); // 300% of Sorcery
			extradmg2 = (PlayerTHE * 1.142856); // 114.2856% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 41) // GoldWandFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerSOR * 0.3334); // 33.3% of Sorcery
			extradmg2 = (PlayerTHE * 0.1334); // 13.34% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 42) // GoldWandFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 2 to 8 damage
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.0667); // 6.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 43) // RainPillarNew [HERETIC] <MAGIC TYPE>
		{
			damage = 23 + random(-11,11); // 12 to 34 damage
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.0667); // 6.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 44 || type == 45) // MageWandMissileNew & MageWandMissile2New <MAGIC TYPE>
		{
			damage = (6 + random(-3,3)) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.625); // 62.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 46) // HubbleBubbleSmall [main] <MAGIC TYPE>
		{
			damage = (10 + random(-3,4));
			extradmg1 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg2 = (PlayerTHE * 0.380952); // 38.0952% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 47) // HubbleBubbleLarge [main] <MAGIC TYPE>
		{
			damage = (30 + random(-9,12));
			extradmg1 = (PlayerSOR * 3.75); // 375% of Sorcery
			extradmg2 = (PlayerTHE * 1.1428); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 48) // A. Christina Blast
		{
			damage = random(176,293); //234); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 49) // A. Christina Long Range Blast (Weak)
		{
			damage = random(54,91); //125); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 50) // Unmaker Laser (Marines & Petra)
		{
			damage = random(1,8) * 10; // 10 to 80
			extradmg1 = (PlayerAGL * 1.0); // 100% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 
		}
		if (type == 51) // Unmaker Laser (Flora & Ailish)
		{
			damage = random(1,8) * 10; // 10 to 80
			extradmg1 = (PlayerAGL * 1.0); // 100% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 
		}
		if (type == 52) // Hell Warrior Shield Fireball <MAGIC TYPE>
		{
			damage = random(1,8) * 2; // 2 to 16
			extradmg1 = (PlayerSOR * 0.8); // 80.0% of Sorcery
			extradmg2 = (PlayerTHE * 0.4); // 40.0% of Therapeusis 
			ismagicalatk = 1;
		}
		if (type == 53) // A. Christina Long Range Blast (Normal)
		{
			damage = random(136,228); //182); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 54) // A. Christina Long Range Blast (Finale)
		{
			damage = random(340,570); //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 55) // A. Christina Bouncing Shot (Weak)
		{
			damage = random(54,90) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 56) // A. Christina Bouncing Shot (Normal)
		{
			damage = random(135,225) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 57) // CStaffMissileNew (Serpent Staff projectile) <MAGIC TYPE>
		{
			damage = (random(1,8) * 5) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.625); // 62.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 58) // Railgun [Player]
		{
			damage = random(9,11) * 5; // 45 to 55
			extradmg1 = (PlayerAGL * 3.75); // 375% of Agility
			extradmg2 = (PlayerSTR * 1.8); // 180% of Strength 
		
			chargefactor = ( ( (CountInv("RailgunCharge", AAPTR_PLAYER1) * 2) + (CountInv("RailgunCharge", AAPTR_PLAYER1) * 0.3334) ) * 0.10);
			damage = damage * chargefactor;
			extradmg1 *= chargefactor;
			extradmg2 *= chargefactor;
			playershot += 1;
		}
		if (type == 59) // Thrown Poison Needle [Player]
		{
			int strengthcounter;
			damage = random(6,12);
			int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
			damage = (damage * (2 + stamdamagefactor) / 2);
			int PlayerSTR = CallACS("StatCheck",7);
			for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
			{
				damage += random(0,2);
				damage += random(0,1);
			}

			if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 10;

			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) Damage = Damage * 4 / 3; // +33.3~% Punch Damage
			if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) > 0) Damage = Damage * 7 / 4; // +75% Punch Damage
			
			int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
			int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
			if (MartialArtsMastery > 0)
			{
				int temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 25;
				if (MartialArtsMastery == 2) temp1 = 75;
				if (MartialArtsMastery == 3) temp1 = 225;
				if (MartialArtsMastery == 4) temp1 = 675;
				if (MartialArtsMastery >= 5) temp1 = 2025;
				int temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 500;
				if (MartialArtsMasteryEX == 2) temp2 = 1000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
			}
			
			int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
			int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
			if (StamUpPerkLevel > 0)
			{
				PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
				damage = damage * PerkFactor / 400;
			}
			
			damage /= random(10,20);
		}
		if (type == 60) // KDIZD Rifle Shell [Player]
		{
			damage = (random(3,5) * 25); //
			extradmg1 = PlayerAGL * 3.25; // 325% of Agility
			extradmg2 = PlayerSTR * 0.758333; // 0.758333% of Strength
		}
		if (type == 61) // Sorcerer2FX1Player (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,-24); // 104 to 152
			extradmg1 = ((PlayerSOR * 12) / 4); // 300% of Sorcery
			extradmg2 = ((PlayerTHE * 16) / 14); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 62) // PhoenixFX1New (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,24); // 104 to 152
			extradmg1 = (PlayerSOR * 1.334); // 133.4% of Sorcery
			extradmg2 = (PlayerTHE * 0.57142); // 57.142% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 63) // SonicNail [Strange Aeons]
		{
			damage = 16 + random(-8,8); // 8 to 24 damage
			nm = "ImpalerBowZoom"; APPackToken = nm;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 1) damage *= 1.25;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 2) damage *= 1.625;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 3) damage *= 2.5625;
			extradmg1 = (PlayerAGL * 3.0); // 300% of Agility
			extradmg2 = (PlayerSTR * 0.625); // 62.5% of Strength
			extradmg3 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg4 = (PlayerTHE * 0.75); // 75% of Therapeusis
		}
		if (type == 64) // SonicNail AoE [Strange Aeons]
		{
			damage = 16 + random(-8,8); // 8 to 24 damage
			nm = "ImpalerBowZoom"; APPackToken = nm;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 1) damage *= 1.25;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 2) damage *= 1.625;
			if (CountInv(APPackToken, AAPTR_PLAYER1) == 3) damage *= 2.5625;
			extradmg1 = (PlayerAGL * 3.0); // 300% of Agility
			extradmg2 = (PlayerSTR * 0.625); // 62.5% of Strength
			extradmg3 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg4 = (PlayerTHE * 0.75); // 75% of Therapeusis
		}
		if (type >= 65 && type <= 68) // Soul Scepter
		{
			damage = 3 * random(1,3); // 3 to 9 damage
			extradmg1 = (PlayerSOR * 1.125); // 225% of Sorcery
			extradmg2 = (PlayerTHE * 0.875); // 175% of Therapeusis
			extradmg3 = (PlayerDEF * 1.50); // 300% of Defense
			extradmg4 = (PlayerDFT * 0.75); // 150% of Deftness
			double frand = frandompick(0.334,0.5,0.667);
			damage *= frand;
			extradmg1 *= frand;
			extradmg2 *= frand;
			extradmg3 *= frand;
			extradmg4 *= frand;
			if ((type == 65 && CallACS("StatCheck",14) <= 1) || (type == 66 && CallACS("StatCheck",14) <= 2) || (type == 67 && CallACS("StatCheck",14) <= 2) || (type == 68 && CallACS("StatCheck",14) <= 4))
			{
				damage /= 4;
				extradmg1 /= 4;
				extradmg2 /= 4;
				extradmg3 /= 4;
				extradmg4 /= 4;
			}
		}
		
		
		if (!(type == 14 || type == 15 || type == 59))
		{
			if (damage > 0) damage *= perkfactor;
			if (extradmg1 > 0) extradmg1 *= perkfactor;
			if (extradmg2 > 0) extradmg2 *= perkfactor;
			if (extradmg3 > 0) extradmg3 *= perkfactor;
			if (extradmg4 > 0) extradmg4 *= perkfactor;
			if (extradmg5 > 0) extradmg5 *= perkfactor;
			if (extradmg6 > 0) extradmg6 *= perkfactor;
		}

		string actorname = GetClassName();
		AetheriusPlayerPawn playpawn;
		if (target) playpawn = AetheriusPlayerPawn(target);
		if (playpawn || puff == 1 || playershot > 0)
		{
			if (debugplayeratkinfo) Console.Printf("Player Shot: %s", actorname);
			
			if (type == 45) // Reduce Sapphire Alt-Fire damage by 33%
			{
				damage *= 0.667;
				extradmg1 *= 0.667;
				extradmg2 *= 0.667;
				extradmg3 *= 0.667;
				extradmg4 *= 0.667;
				extradmg5 *= 0.667;
				extradmg6 *= 0.667;
			}
			
			rand1 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 0.75;
			rand2 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 1.25;
			finaldmg = damage + random(rand1,rand2);
			finaldmg *= (1.0 + (PlayerAeonPts * 0.002));
			
			int misc1 = 1000;
			if (ismagicalatk)
			{
				if (CountInv("EvenstarNecklace", AAPTR_PLAYER1) > 0) misc1 += 125;
				if (CountInv("BalrogRing", AAPTR_PLAYER1) > 0) misc1 += 125;
				finaldmg = (finaldmg * misc1) / 1000;
			}
			
			int misc2 = 1000;
			if (type == 52)
			{
				if (CountInv("SauronHelmet", AAPTR_PLAYER1) > 0) misc2 += 125;
				if (CountInv("SauronGauntletsItem", AAPTR_PLAYER1) > 0) misc2 += 125;
				if (CountInv("TheOneRing", AAPTR_PLAYER1) > 0) misc2 += 500;
				finaldmg = (finaldmg * misc2) / 1000;
			}

			// Tries to Guarantee Poison Needles inflict at least 1 base damage
			if (type == 59)
			{
				if (finaldmg < 1) finaldmg = 1;
			}

			if (debugplayeratkinfo) Console.Printf("Actor Class: %s, Type#: %d, Puff?: %d, Base Dmg: %d, Extra Dmg #1: %d, Extra Dmg #2: %d, Extra Dmg #3: %d, Extra Dmg #4: %d, Extra Dmg #5: %d, Extra Dmg #6: %d, Random: %d - %d, BaseRandom: %d - %d, Perkfactor: %.8f, ChargeFactor: %.8f, Misc1: %d, Misc2: %d, \cyFinal Damage: %d\c-", 
											 												actorname, type, puff,
																							damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6,
																							rand1, rand2,
																							baserand1, baserand2,
																							perkfactor, chargefactor,
																							misc1, misc2,
																							finaldmg);
		}
		else
		{
			if (debugplayeratkinfo) Console.Printf("Non-Player Shot: %s", actorname);
			finaldmg = damage;
			
			if (debugplayeratkinfo) Console.Printf("Actor Class: %s, Type#: %d, Puff?: %d, Base Dmg: %d, \cyFinal Damage: %d\c-", 
																							actorname, type, puff,
																							damage, finaldmg);
		}
		
		if (CallACS("MiscVarCheckDECORATE",166) > 0)
		{
			int preboostdmg = finaldmg;
			finaldmg *= frandom(1.05,1.15);
			if (debugplayeratkinfo) Console.Printf("[Dash] PreBoost: %d, Total: %d", preboostdmg, finaldmg);
		}
		
		finaldamagedealt = finaldmg;
		return finaldmg;
	}
}
*/