#Library "SpellLib"
#include "zcommon.acs"

/*

Script Reference

Used Tags and Scripts
Thing Tags:
	1-999		-	Assume used in standard levels
	1000		-	Friendly Monsters
	1001		-	The Main Player
	1002-1014	-	Temporary ThingIDs


	
	1123		-	Main Sauron Eye's TID [Boss Lifemeters]
	1124		-	Sauravatar's TID [Boss Lifemeters]

    1222		-	General Demonic Boss TIDs

	1281		-	TID for Armor Bonuses [for color translations]
	1537		-	TID for Seed Spawn system

	1501			Main Player's Tension Aura
	1502			Main Player's Tension Aura Light

HudMessage Tags:
	1		-	HP Gained/Lost [for damage counts]
	2		-	Tunnel Vision Display [death]
	3		-	Tunnel Vision Display [badly injured and/or dead]
    ...
	197		-	Level Display for Lifebars
	198		-	Name of Creature for Lifebars
	199		-	HP/MaxHP display for Lifebars
	201		-	Actor Lifebar [Frame]
	202-302	-	Lifebar Notches [100 total]
    ...
	901		-	Main List for Armor Display Menu
	902		-	Top Line for Armor Display Menu
	903		-	Armor Icon
	904		-	Background Tint for Menus/Armor-Display
      ...

 // OLD HUD STYLE
		2001-2010	-	Readied Spells [QuickCast]
		...
		2198		-	EXP Combo Total
		2199		-	EXP Combo Multiplier
		2200		-	EXP Combo Kill Count
		2201-2302	-	EXP Combo Bar
		2303-2404	-	Tension Charge Bar
		2405-2506	-	Tension Timer Bar
		2507-2608	-	Tension Timer Bar
		2609		-	Tension Type Icon
		...
		3202-3303	-	Mana Bar
		3304-3405	-	Exp Bar
		3406-3407	-	Spell Name, Spell Description
		...
		3413		-	Level Display
		...
		3415		-	Mana Points Display
		3416-3417	-	Stats Display Text
		3418		-	EXP Display
		3419		-	Mana Regeneration Display
		3420		-	Aeon Points Display
		3421		-	EXP "OVERKILL!" Display
		3422		-	Player Damage/Healing Amount [uses interpolation to gauge]
		...
		3432		-	Level Up/Aeon Points Up Text.
		3433-3443	-	Buff Timers
		3442		-	Spell Category Display [goes with 3406-3407]
		...
		3500		-	Boss HP Readous [for bottom of the screen]
		3501		-	"BOSS" text [when fighting a boss]
		3502-3759	-	Boss Lifebar [roughly] (257)
// END OLD STYLE HUD
// START NEW STYLE HUD
		3497		-	Character Portrait
		3498		-	QuickSpell Bar
		3499		-	Spell Box
		3500		-	MULTICOLOR TESTING BOARDERS [FOR POSITION ALIGNMENTS] :V
// END NEW STYLE HUD
      
Functions
	{-1-}		-	Checks Spell Costs Across the Board [used at least on four occasions in the code]

--Script #s and their functions--:
	{-24-}		-	***LINETRIGGER-EVENT*** Changes Music back when exiting the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS] ***LINETRIGGER-EVENT***
	{-25-}		-	***LINETRIGGER-EVENT*** Changes Music for Entering the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS] ***LINETRIGGER-EVENT***


--NAMED Scripts and their functions--:
	["CENTRALSCRIPTOFEVERYTHING"]	-	******MANDATORY****** Check Player Stuff Consistantly And Startup Stats. ******MANDATORY******
	["CheckBuffTimers"]				-	******MANDATORY****** Redone Buff Checker ******MANDATORY******
	["GiveBuffsPowerup"]			-	Enforces Giving or Removing Buffs when certain powerup timers are on/off.
	["DMV"]							-	Prints out or changes the number for the "MiscellaneousVars[#]" vars.
	["Initializer"]					-	Exp Table Setup (& Initial Startup Process [added for DVI/DVII-DS])
	["ManaRegenerationStuff"]		-	Mana Regeneration
	["CheckManaLevels"]				-	Mana Recovery Items **new for DV-DS and beyond**
	["CreateTranslationTables"]		-	Color Translation Tables **new for DV-DS and beyond**
	["HUDDisplay"]					-	HUD Display
	["ClassicDoom2ArmorCheck"]		-	Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
	["DV1M04-Music1"]				-	***EVENT*** Changes Music for Entering the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS] ***EVENT***
	["MonsterStatsHP_ATK_DEF_SPD"]	-	Determines Attack/Defense/Speed Bonuses for Monsters [depending on difficulty level and maps and game mode]
	["DamageDisplays"]				-	Controls DamageIndicators for Non-Players
	["GiveStats"]					-	***DEBUG*** Cheat to set stats ("pukename GiveStats [type] [value]")
	["EXPCheat"]					-	***DEBUG*** Adds EXP equal to the Amount Inputted ("Pukename EXPCheat [number of experience to add] [EXP type] [EXP Increment Type]" in console) ***DEBUG***
	["DoomMonsterDeathEmulation"]	-	Emulates the various special scripts in Doom 1/2 mode [E1M8, MAP07, etc]
	["SauronGauntletsHit"]			-	Controls the Primary Effect of Sauron's Gauntlets when hitting someone [also calls scripts 20, 30 and 49]
	["CheckSceptreAltFire"] 		-	Check if to perform Sceptre's downswing alternate attack while falling.
	["IncreaseHellcoreLevel"]		-	Increasing the Level of Hellcore Weapons when one is picked up
	["LifebarDisplayClientSide"]	-	Controls Lifebar Displays [CLIENTSIDE only]
	["LifebarOptionChecker"]		-	Event Linked to call "LifebarDisplayClientSide" Event
	["GetEvolveChance"] 			-	Checks the mapnumber and gametype for Monster Spawners (evolve chance amount [out of 256])
	["GetStealthChance"]	 		-	Checks the mapnumber and gametype for Monster Spawners (stealth chance amount [out of 256])
	["TunnelVisionControl"]			-	Red Tunnel Vision/Heartbeat Effect when badly injured
	["DeathTunnelVision"]			-	(related to the tunnel vision effect in death >.>)
	["CalculateSpellBaseAngles"]	-	Works for auto-determining spreads for Glyph-type spells and Raging Spirits [for now]
	["IncreaseHellcoreHeat"]		-	Hellcore Overheating/Damage Script [ran with shooting Hellcore-class weapons]
	["SeedLimitChecker"] 			-	Checks to Remove Seeds on the Map if too many have been picked up already.
	["ArmorBonusCheckCharacter"]	-	Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items.
	["HellcoreWeaponCheckCharacter"]-	Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
	["GauntletsCheckCharacter"]		-	Checks to see if you already possess Sauron's Gauntlets so they cannot appear more than once.
	["GauntletFlashEffect"]			-	Creates the Screen Flash Effect when Hitting Someone with Sauron's Gauntlets
	["SceptreTwirlManaCheck"]		-	Sceptre Spinning Mana/MP Check
	["SceptreTwirlFrameCheck"]		-	Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	["MaxHPBonusPickup"]			-	Max Health Bonus Pickup Script
	["Monster-CheckModType"]		-	Checks the gametype for monster spawns to allow or deny specfic enemy evolutions from appearing
	["MagicEffects"]				-	Spell Effects // SCRIPT 8'S POSITION IS BEING ERROR-RIDDEN AT THE MOMENT >_<
	["CursedShieldPain"]			-	Increases the number of points towards uncursing a Ruinous Shield into a Divine Shield
	["GrabLifeManaSeed"]			-	Runs the "Grabbed a Seed of Life/Magic" script
	["GrabSeedOther"]				-	Runs the "Grabbed a Seed of [Bleh]" script
	["SeedDrop"]					-	Checks Seed amounts and will randomize dropped seeds.
	["AeonPointKey"]				-	Overall Aeon Point Handling [combines three once seperated scripts]
	["ShowArmorStats"]				-	Shows Stats for Armor items
	["ChangeArmorPage"]				-	Test Script for Toggling pages for armor display lists
	["TestHudSize"]					-	Used for testing SetHudSize customization in-game.
	["TestHudAlign"]				-	Used for testing coordinate/alignments on specfic "HudMessage" usages in-game.
	["SpellSelection"]				-	Spell Selection
	["SpellQuickAssign"]	 		-	Spell Readying
	["SpellCasting"]				-	Spell Casting
	["EmulateGiveHealthBonus"]		-	Health Bonus Pickup Script (also one part of the Sauron's Gauntlet hit effect)
	["EmulateGiveArmorBonus"]		-	Emulates Armor Bonuses for all four types of normal armor in DVI[I]-DS. [Applies Only to Deggaris and Illucia] (also one part of the Sauron's Gauntlet hit effect)
	["DVI-M02EyeDead"]				-	***EVENT*** Killed MAP02 Eye [DVI-DS] / MAP12 First Eye [DVII-DS] ***EVENT***
	["DV1-M04Eye1Dead"]				-	***EVENT*** Killed MAP04 Eye #1 [DVI-DS] / MAP12 Second Eye [DVII-DS] ***EVENT***
	["DV1-M04Eye2Dead"]				-	***EVENT*** Killed MAP04 Eye #2 [DVI-DS] / MAP12 Third Eye [DVII-DS] ***EVENT***
	["DVI-M04MonsterTags"]			-	***EVENT*** Makes Monsters in MAP04 [DVI-DS] or MAP12 [DVII-DS] have a TID of 666 ***EVENT***
	["DVI-MainEyeDeath1"]			-	***EVENT*** Killed MAP04 Main Eye [DVI-DS] / MAP12 Fourth Eye [DVII-DS] ***EVENT***
	["DVI-MainEyeDeath2"]			-	***EVENT*** Defines the Buildup to Sauravatar's appearance [DVI-DS & DVII-DS] ***EVENT***
	["DVI-AwakenSauravatar"]		-	***EVENT*** Awakens the Stone Cyberdemon that becomes Sauravatar [DVI-DS & DVII-DS] ***EVENT***
	["SauravatarRegenMode"]			-	***EVENT*** Health Regeneration for Main Sauravatar [only runs when it walks around] [DVI-DS & DVII-DS] ***EVENT***
	["SauravatarDeath"]				-	***EVENT*** Sauravatar's Death [DVI-DS specific version] ***EVENT***
	["SauronItemSpawnerCheck"]		-	Calculates the occurance rate of Sauron's Gauntlets and Sauron's Helmet Dropping.
	["BuffTimer"]					-	***DEBUG*** Gives a specfic buff/debuff for x amount of seconds.
	["PrintArmorValues"]			-	***DEBUG*** Debugging for Printing Armor Amounts on Screen ***DEBUG***
	["SetManaAmount"]				-	***DEBUG*** Sets Mana to the Current Amount ("puke 835 [amount]" in console) ***DEBUG***
	["PrintTest"]					-	***DEBUG*** Prints whatever is defined in the script. ***DEBUG***
	["DamagePrintout"]				-	***DEBUG*** Prints out damage on screen for a projectile attached to this script ***DEBUG***
	["SetLevelCap"]					-	***DEBUG*** Set Levelcap Manually ***DEBUG***
	["FloraRandomArmorDrop"] 		-	Spawn a Randomized Armor Item for Flora in "DVI" mode [used with "FloraRandomArmor" thing]
	["GrabSoulsphere"]				-	Soulsphere Pickup Script
	["MegaSphereHealth"]			-	Megasphere Pickup Script [for health half]
	["MegaSphereArmor"]				-	MegaSphere Armor [Deggaris & Illucia Only] or Mana [Flora Only]
	["ArmorBonusEyeGlow"]			-	Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color dependant on the current Armor Class of Deggaris/Illucia [does not apply to Flora].
	["CheckFloraArmorCopies"] 		-	Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
	["OneRingCopyCheck"]			-	Checks to see if you already possess The One Ring so it cannot appear more than once.
	["HelmetCopyCheck"]				-	Checks to see if you already possess Sauron's Helmet so it cannot appear more than once.
	["SetSauravatarHealth"]			-	Configures the full max health of the Sauravatar and sets it to its proper Health to start the fight [DVI-DS & DVII-DS]
	["DiabloistGravityLock"]		-	Prevents the Diabolist from turning his wrath on a non-player target in order to maintain use of his Gravity attack properly.
	["DiabloistGravityFlash"]		-	Screen Flash for Diabloist's Gravity Attack.
	["DiabloistGravity"]			-	Screen Flash for Diabloist's Gravity Attack.
	["AddSceptreEXP"]				-	Accmulate EXP for Sceptre of Empyrea [Flora only]
	["Hand-GravityAttack"]			-	Using a Diabloist's Hands' HP Gravity attack-projectile on an enemy.
	["DivineShieldChecker"]			-	Checks for DivineShield in inventory for the Ruinous Shield PICKUP.
	["GrabBackpack"]				-	Backpack Pickup Script
	["CheckHealthLevels"]			-	Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
	["PickupMedicalItem"]			-	Stimpack / Medikit / Berserk Pack Pickups (All games)
	["CheckArmorLevels"]			-	Checks Whether a Full Armor Item can be picked up or not
	["PickupArmorMain"]				-	Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	["GetMiscellaneousVar"]			-	Returns the value of the index of "MiscellaneousVars[#]" that is referenced [for A_JumpIf checks in DECORATE]
	["GetPlayerLevel"]				-	Returns the Player's Level [for A_JumpIf checks in DECORATE]
	["GetSceptreLevel"]				-	Returns the Sceptre's Level [for A_JumpIf checks in DECORATE]
	["GetSceptreRange"]				-	Returns the reach for the Sceptre [mandatory for DECORATE]
	["MeleeImpactRadius"]			-	Determines the radius area for melee impacts [Sceptre, Fist-Punches, Gauntlet-Punches]
	["QuakeMeleeIntensity"]			-	Determines the strength of the quaking from melee impacts [Sceptre, Fist-Punches, Gauntlet-Punches]
	["QuakeMeleeDuration"]			-	Determines the duration of quaking from melee impacts [Sceptre, Fist-Punches, Gauntlet-Punches]
	["QuakeMeleeTremrad"]			-	Determines the tremor-radius of quaking from melee impacts [Sceptre, Fist-Punches, Gauntlet-Punches]
	["GetPunchDamage"]				-	Returns Punch Damage (including Gauntlets) [including w/ berserk/other amplication items]
	["GetChainsawDamage"]			-	Returns Chainsaw Damage [including w/ berserk/other amplication items]
	["GetSceptreDamage"]			-	Returns Sceptre Damage [including w/ berserk/other amplication items]
	["CheckWeaponFlash"]			-	Used for the revised Plasma Rifle to assure proper muzzle-flash animations w/ Spreader Aura
	["CheckBFG2704"]				-	Used to check the option for BFG2704 usage by both players and BFG-Commandos.
	["CheckShotgunnerSpreads"]		-	Used to check the option for what kind of shotgun spreads are used by the Zombies.
	["CheckCrisisAttackType"]		-	Used to determine what type of 'crisis' attacks monsters/hellcore-weapons use, if any.
	["GetUltraMagicMissileFuse"]	-	Extends the 'lifespan' of Ultra Magic Missiles based on both Sorcery and Therapeusis stats
	["WeaponAngleLoop"]				-	For the Sceptre's Spin Attack & HellCore Weapons (used as a replacement for uservars in weapons)
	["WeaponAngleLoopSecondary"]	-	For the Sceptre's Spin Attack & HellCore Weapons [secondary level] (used as a replacement for uservars in weapons)
	["HellcoreFireMode"]			-	Determines the mode selected for a Hellcore weapon using multiple types of attacks
	["BowAntics"]					-	Determines whether the player is holding down a primed arrow, shooting it, or unarming it.
	["UseStaminaAttack"]			-	Consumes a set amount of Stamina when called [1 = 0.01% stamina consumed, etc] or checks for that much for an A_JumpIf call
	["MaxHPDropChance"]				-	Checks the chance a "MaxHealthBonus" will actually spawn, or turn into multiple HealthBonuses instead.
	["CheckPlayerIfDead"]			-	Used with Sauron Items and Flora's unique armor to prevent an endless repeat of their 'equipped' sounds if a player dies [due to changes made to support death-exit options]
	["TensionAuraCheckVisual"]		-	Checks and Removes Tension Aura-generators that are at level 0
	["CheckTensionLevel"]			-	Check Tension Type for Aura Settings on Aura Actors
	["StartTensionCountDown"]		-	When an attack or a healing ability is activated while Tension is active, starts the countdown for it to fade.
	["TensionParticleSpawnChance"]	-	Checks the Tension Level to determine the chance for aura particle to spawn while charging tension [x / 256]
	["SetKillCount"]				-	Sets the player's amount of kills [or if a negative value is entered, will print the current amount of their kills]
	["AddEXP"]						-	New Method of adding EXP when certain kills or actions are performed, and searches for specfic things like +FRIENDLY of if the player killed said enemy, etc
	["UseWhistle"]					-	Activate's the player's whistle ability, which will awaken as many monsters as possible in a certain area
	["CheckDoomType"]				-	Gets the Type of Classic Doom mode being used
	["GetRagingSpiritDMG"]			-	Returns Damage inflicted by Raging Spirit ghosts.
	["GetPoisonCloudDMG"]			-	Returns Damage inflicted by Poison Clouds.
	["SawCheckSceptre"]				-	Checks the first Chainsaw to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	["BerserkCheckSceptre"]			-	Checks Berserk Packs to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	["UseCustomInventoryItem"]		-	For actual items that are stored in the inventory
	["CheckCharacterClass"]			-	Returns the Character ID

// Scripts imported from others [and possibly modified]

//******************************************************************
//*Ryan Cordell, SolarSnowfall, HotWax, and Kate's FootSteps System*
//******************************************************************
	["FootSteps_PlayerEntersLevel"]	-	Activates SoundTables, GetVelocity & DoTheMaths on Level Start
	["FootSteps_PlayerRespawning"]	-	Activates SoundTables, GetVelocity & DoTheMaths on Player Respawn
	["FootSteps_GetVelocity"]		-	Gets Player's Movement for footstep assessment
	["FootSteps_DoTheMaths"]		-	Does most of the heavy lifting for calculations on the footsteps script.
	["FootSteps_SoundTables"]		-	Used for determining what flat-groups make specfic sound-sets play.
	["FootSteps_PlayerDeath"]		-	UnSets the Main Scripts

//****************************************************************************************************************************************
//*KeksDose's Dash/Air-Dash System [used also in "The Trailblazer" by PillowBlaster @ http://forum.zdoom.org/viewtopic.php?f=19&t=47494 ]*
//****************************************************************************************************************************************
	["KD-SideDodge"]				-	The Main Script that keeps things in check.
	["KD-ResurrectSideDodge"]		-	Holds the previous script in reserve for temporary deaths [maybe? o.o]
	["KD-ReactivateSideDodge"]		-	Reenables the Dash if a player resurrects.

*/



// TODO: Reduce # of Global Vars >________>; [stupid 64 global var limit]

// Global Vars NOT YET USED AT ALL [27/64]
//-------------------------------------
//		global int 7:?;
//		global int 9:?;
//      global int 13:?;
//		global int 14:?;
//      global int 15:?;
//		global int 17:?;

//		global int 23:?;
//		global int 24:?; 
//		global int 25:?; 

//		global int 32:?;
//		global int 35:?;
//		global int 39:?;

//		global int 41:?;
//		global int 44:?;
//		global int 47:?;
//		global int 48:?;
//		global int 49:?;

//		global int 51:?;
//		global int 52:?;
//		global int 53:?;
//		global int 56:?;
//		global int 57:?;
//		global int 58:?;
//		global int 59:?;
//		global int 60:?;

//		global int 61:?;
//		global int 64:?;

// Global Vars Used by SBARINFO/other lumps, or other vars that can't be changed [12/64]
//-----------------------------------------------------------------------------------
		global int 8:MaxHealthTrue; // USED BY SBARINFO

		global int 20:HellcorePercentFull; // For HUD Displays -- USED BY SBARINFO

		global int 29:HPInterpolationDisplay; // USED BY SBARINFO
		global int 30:CurrentMaxArmor; // All Games -- USED BY SBARINFO

		global int 36:SurvivalWhole; // All Games -- USED BY SBARINFO

		global int 42:StaminaPercent; // USED BY SBARINFO
		global int 43:SavePercent; // USED BY SBARINFO
		global int 45:EvadeWhole; // All Games -- USED BY SBARINFO

		global int 54:SceptreLevelEXP; // For Determining the level of sceptre capabilities and allows it to grow stronger as it's used (Base level plus 16 more levels). -- USED BY SBARINFO
		global int 55:SceptreActualLevel; // USED BY SBARINFO

		global int 61:RuinousShieldPercentF; // USED BY SBARINFO
		global int 62:RuinousShieldPercent; // USED BY SBARINFO
		global int 63:FloraArmorClass; // USED BY SBARINFO

// Global Vars NOT used by SBARINFO/other lumps [and thus can be converted]
//-----------------------------------------------------------------------------
global int 1:Experience;
global int 2:CurrentMana;
global int 3:MaxMana;
global int 4:PlayerLevel;
global int 5:SelectedSpell;
global int 6:ReadiedSpells[];
global int 10:ExpTable[]; // Note To Self: NECESSARY TO BE "GLOBAL INT" TO RUN WITH HUB-BASED LEVELS LIKE IN HEXEN OR STRIFE, MISFIT YOU DINGUS-FACE.
global int 11:BaseEXPRequirement;

global int 12:ModType; 
// 0 = "Normal" Doom 1/2/Heretic/Hexen/Strife
// 1 = Deus Vult
// 2 = Deus Vult 2

// Powerup Timers [moved to global to allow timers to transition between levels]
global int 16:PowerupTimer[];
// [0] - Light
// [1] - Invisibility
// [2] - Flight
// [3] - Stealth
// [4] - Invulnerability
// [5] - Time Freeze
// [6] - Fear/Terror Aura
// [7] - Divine Avatar
// [8] - Spreader Aura Lv. 1
// [9] - Spreader Aura Lv. 2
// [10] - Oomph [aka Bikill] (2x damage, up to +8% crit rate)
// [11] - Buff (2x defense, up to +10% survival rate, 2x balance)
// [12] - Accelerate (1.33x Speed, up to +10% evade rate, 1.25x jumping)

// [13] - Blunt (0.5x damage, down to -8% crit rate) [not implemented yet]
// [14] - Sap (0.5x defense, down to -10% survival rate, 0.75x balance) [not implemented yet]
// [15] - Decelerate (0.66x Speed, down to -10% evade rate, 0.875x jumping) [not implemented yet]
// [16] - Poison (HP/Health is damaged every so many tics, down to as low as 1 [cannot kill the player]) [not implemented yet]
// [17] - Corrosion (AP/Armor is damaged every so many tics, down to as low as 0) [not implemented yet]
// [18] - Fatigue (HP/Mana/Stamina Regeneration and Hellcore Cooldown are drastically reduced in speed) [not implemented yet]
// [19] - Blind (exactly as on the tin :V) [not implemented yet]
// [20] - Sleep (can't move, see or perform actions, 1.25x more damage from attacks, however HP/MP/Stamina regeneration rates are 5x) [not implemented yet]
// [21] - Silence/Mute (spells are locked out) [not implemented yet]
// [22] - RadSuit (mostly a proper timer for the radsuit) [not implemented yet]
// [23] - Berserk (mostly a proper timer for the berserk powerup) [not implemented yet]

// [129] - ??????

global int 18:MiscFixedVars[]; // ***ARRAY*** For various permenant fixed-point vars in scripts
// [1] HUD X Position #1 [Debugger, for easily setting coordinates with HUD testing
// [2] HUD Y Position #1 [Debugger, for easily setting coordinates with HUD testing
// [3] HUD X Position #2 [Debugger, for easily setting coordinates with HUD testing
// [4] HUD Y Position #2 [Debugger, for easily setting coordinates with HUD testing
// [5] HUD X Position #3 [Debugger, for easily setting coordinates with HUD testing
// [6] HUD Y Position #3 [Debugger, for easily setting coordinates with HUD testing
// [7] HUD X Position #4 [Debugger, for easily setting coordinates with HUD testing
// [8] HUD Y Position #4 [Debugger, for easily setting coordinates with HUD testing
// [9] HUD X Position #5 [Debugger, for easily setting coordinates with HUD testing
// [10] HUD Y Position #5 [Debugger, for easily setting coordinates with HUD testing
// [11] HUD X Position #6 [Debugger, for easily setting coordinates with HUD testing
// [12] HUD Y Position #6 [Debugger, for easily setting coordinates with HUD testing
// [13] HUD X Position #7 [Debugger, for easily setting coordinates with HUD testing
// [14] HUD Y Position #7 [Debugger, for easily setting coordinates with HUD testing
// [15] HUD X Position #8 [Debugger, for easily setting coordinates with HUD testing
// [16] HUD Y Position #8 [Debugger, for easily setting coordinates with HUD testing
// [17] HUD X Position #9 [Debugger, for easily setting coordinates with HUD testing
// [18] HUD Y Position #9 [Debugger, for easily setting coordinates with HUD testing
// [19] HUD X Position #10 [Debugger, for easily setting coordinates with HUD testing
// [20] HUD Y Position #10 [Debugger, for easily setting coordinates with HUD testing

// Hellcore Energy and Heating
global int 19:HellcoreOverheatLevel; // Every 1% is times 25 tics [1 tics of time equals 4 units]

global int 21:MiscellaneousVars[]; // ***ARRAY*** For various permenant vars in scripts
// [0] is for Base Survival Rate
// [1] is for checking Flora's Armor Bitfield so it doesn't have to run EVERY tic and lag the game too badly.
// [2] is for checking Levels for level specfic boosts so it doesn't have to run EVERY tic and lag the game too badly.
// [3] is for checking Sceptre Levels so it doesn't have to run EVERY tic and lag the game too badly.
// [4] is for saving health ratio for giving Low or Critical Health Inventory items [for Status Bar Displays and using Crisis attacks with Flora's Hellcore weapons]
// [5] is the interpolation timer (how many HP count down/up per tic) [8 is the default for a game like Heretic or Hexen]
// [6] is the Fygg Drop Identification number (out of [7])
// [7] is the highest number for the Fygg chance drop
// [8] is for saving the bow proficency level
// [9] is for the category of spells you're using [for revised Spell Selecting]
// [10] is for the subspell within the current category of spells you're using [for revised Spell Selecting]
// [11] is a "casual" timer for the Ruinous Shield, allowing it to slowly uncurse by 1 point every 2 seconds [30% chance of success each interval].
// [12] is for the death time counter, to fade the screen to blackish-red when the player dies.
// [13] is for how far along the regeneration timer is.
// [14] is the base regeneration interval for the character
// [15] is for the Ruinous Shield's "Degeneration" timer
// [16] is the sceptre timer for mana consumption
// [17] is the sceptre timer limit for mana consumption
// [18] is the amount of raw armor points you have
// [19] is number of times Hellcore Death Obituary has Played
// [20] is the timer for the spinning attack [for weapon checks]
// [21] is current Stamina points
// [22] is maximum Stamina points
// [23] is a character's 'Evasion' chance [out of 100.0%]
// [24] is for the menu position for using Aeon Points [0 = No Selection, 1 = Agility, 2 = Defense, 3 = Deftness, 4 = Sorcery, 5 = Strength, 6 = Therapeusis]
// [25] is for the number of unused Aeon Points [extra points to allocate to stats]
// [26] is the Fygg limit [skill dependant]
// [27] is for the number of Fyggs found [limit is skill dependant]
// [28] is for the Seed of Skill limit amount [to be used in more than one script]
// [29] is for the Seed limit amount [to be used in more than one script]
// [30] is for the total number of seeds of types 31-36 carried by your character [to enforce a limit of seeds found in the game to prevent total game breakage]
// [31] is for the number of Seeds of Agility carried by your character [Speed/Jumping Strength]
// [32] is for the number of Seeds of Defense carried by your character [Overall Defense]
// [33] is for the number of Seeds of Deftness carried by your character [EXP Gains]
// [34] is for the number of Seeds of Sorcery carried by your character [Magic Damage]
// [35] is for the number of Seeds of Strength carried by your character [Overall Damage]
// [36] is for the number of Seeds of Therapeusis carried by your character [Magic Defense]
// [37] is for the number of Seeds of Skill carried by your character [will raise a random type [31-36] by one seed level, even if you have reached your seed limit]
// [38] is for the number of Seeds of Life carried by your character [HP Increases]
// [39] is for the number of Seeds of Magic carried by your character [MP Increases]
// [40] is for a seed of deftness EXP multiplier [x.x% format]
// [41] is the previous number of seeds of Agility so it doesn't have to run EVERY tic and lag the game too badly.
// [42] is the previous number of seeds of Defense so it doesn't have to run EVERY tic and lag the game too badly.
// [43] is the previous number of seeds of Deftness so it doesn't have to run EVERY tic and lag the game too badly.
// [44] is the previous number of seeds of Sorcery so it doesn't have to run EVERY tic and lag the game too badly.
// [45] is the previous number of seeds of Strength so it doesn't have to run EVERY tic and lag the game too badly.
// [46] is the previous number of seeds of Therapeusis so it doesn't have to run EVERY tic and lag the game too badly.
// [47] is for 'stepping' [converted from a global var]
// [48] is for "Experience Needed"
// [49] is for the Gauntlet Flash Effect
// [50] is the Spell-Use Cooldown Timer [possible for future version so spells aren't always tied to how fast you can mash the 'cast spell' buttons :P]
// [51] is for GunFlash uses
// [52] is for Artificial Map Inflation (EXP) [to increase the difficulty of levels by a number of maps]
// [53] is for Artificial Map Inflation (Stats) [to increase the difficulty of levels by a number of maps]
// [54] is for Artificial Map Inflation (Spawn/Stealth) [to increase the difficulty of levels by a number of maps]
// [55] is the Weapon Page number
// [56] is the total number of items so far
// [57] is how many Aeon Points are given from items found so far
// [58] is how many Aeon Points should be given TOTAL from items found so far
// [59] is how many Aeon Points are given from secrets found so far
// [60] is how many Aeon Points should be given TOTAL from secrets found so far
// [61] is how many Aeon Points are given from kills so far
// [62] is how many Aeon Points should be given TOTAL from kills made so far
// [63] is the total number of kills so far
// [64] is the total number of secrets found so far
// [65] is the main storage value for a character's JumpZ height.
// [66] is storage for the level-based multiplier for JumpZ height.
// [67] is storage for the AGLSeed-based multiplier for JumpZ height.
// [68] is storage for bonuses/penalities from armor or other items for JumpZ height.
// [69] is storage for Sceptre for JumpZ height.
// [70] is storage for the Spell# under the "Offense" spell category
// [71] is storage for the Spell# under the "Restorative" spell category
// [72] is storage for the Spell# under the "Status" spell category
// [73] is storage for the Spell# under the "Conjure" spell category
// [74] is storage for a temporary var for helping in-game determination of X-coordinates
// [75] is storage for a temporary var for helping in-game determination of Y-coordinates
// [76] is storage for a temporary var for helping in-game determination of misc elements 1
// [77] is storage for a temporary var for helping in-game determination of misc elements 2
// [78] is storage for a temporary var for helping in-game determination of misc elements 3
// [79] is storage for a temporary var for helping in-game determination of misc elements 4
// [80] is the number of backpacks grabbed.
// [81] is storage for the current Clip maximum. // 1 STRSeed = 5 Bullets, 1 STRLevel = 10 Bullets [need backpacks to maximize use of this] [(Base) + 2560 + 2000 = 4560+]
// [82] is storage for the current Shell maximum. // 1 STRSeed = 2 Shells, 1 STRLevel = 4 Shells [need backpacks to maximize use of this] [(Base) + 1024 + 800 = 1824+]
// [83] is storage for the current Rocket maximum. // 1 STRSeed = 1 Rocket, 1 STRLevel = 2 Rockets [need backpacks to maximize use of this] [(Base) + 512 + 400 = 912+]
// [84] is storage for the current Cell maximum. // 1 STRSeed = 20 Cells, 1 STRLevel = 40 Cells [need backpacks to maximize use of this] [(Base) + 10240 + 8000 = 18240+]
// [85] is storage for the current DiarisArrow maximum. // 1 STRSeed = 3 Arrows, 1 STRLevel = 6 Arrows [need backpacks to maximize use of this] [(Base) + 1536 + 1200 = 2736+]
// [86] is storage for Aeon Points Multiplier [Menu CVar]
// [87] is storage for Seed Multiplier [Menu CVar]
// [88] is storage for SceptreXP Multiplier [Menu CVar]
// [89] is storage for Shield Uncurse Rate [Menu CVar]
// [90] is storage for Base EXP Multiplier [Menu CVar]
// [91] is storage for the ultimate Clip maximum.
// [92] is storage for the ultimate Shell maximum.
// [93] is storage for the ultimate Rocket maximum.
// [94] is storage for the ultimate Cell maximum.
// [95] is storage for the ultimate DiarisArrow maximum.
// [96] is the Current Level of the Imp's Claw
// [97] is the Current Level of the Dark Imp's Claw
// [98] is the Current Level of the Cacodemon's Eye
// [99] is the Current Level of the Cacolantern's Eye
// [100] is the Current Level of the Abaddon's Eye
// [101] is the Current Level of the Hell Knight's Fist
// [102] is the Current Level of the Baron of Hell's Fist
// [103] is the Current Level of the Belphegor's Fist
// [104] is the Current Level of the Bruiser Demon's Fist
// [105] is the Current Level of the Archon of Hell's Fist
// [106] is the Current Level of the Pyro Demon's Fist
// [107] is the Current Level of the Death Incarnate's Skull
// [108] is the Current Level of the Archvile's Hand
// [109] is the Current Level of the Diabloist's Hand
// [110] is the Current Level of the Flying Balrog's Fist
// [111] is the Current Level of the Hades Elemental's Eye [?]
// [112] is the Current Level of the Hades Overlord's Eye [?]
// [113] is the Previous Level of the Imp's Claw
// [114] is the Previous Level of the Dark Imp's Claw
// [115] is the Previous Level of the Cacodemon's Eye
// [116] is the Previous Level of the Cacolantern's Eye
// [117] is the Previous Level of the Abaddon's Eye
// [118] is the Previous Level of the Hell Knight's Fist
// [119] is the Previous Level of the Baron of Hell's Fist
// [120] is the Previous Level of the Belphegor's Fist
// [121] is the Previous Level of the Bruiser Demon's Fist
// [122] is the Previous Level of the Archon of Hell's Fist
// [123] is the Previous Level of the Pyro Demon's Fist
// [124] is the Previous Level of the Death Incarnate's Skull
// [125] is the Previous Level of the Archvile's Hand
// [126] is the Previous Level of the Diabloist's Hand
// [127] is the Previous Level of the Flying Balrog's Fist
// [128] is the Previous Level of the Hades Elemental's Eye [?]
// [129] is the Previous Level of the Hades Overlord's Eye [?]
// [130] is storage for Hellcore Heat Rate [Menu CVar]
// [131] is storage for Hellcore Cool Rate [Menu CVar]
// [132] is the Current Mode for the Bruiser Demon's Fist [0 = Spread Wave, 1 = Larger Fireball, 2 = Ground Wave]
// [133] is the Current Mode for the Archon of Hell's Fist [0 = Three-Shot Spread, 1 = Seven-Shot Spread, 2 = Comet Blast]
// [134] is the Current Mode for the Pyro Demon's Fist [0 = FireShot Wave, 1 = PyroBall, 2 = Firebomb, 3 = Teleport Explosions]
// [135] is the Current Mode for the Diabloist's Hand [0 = Gravity Glare, 1 = Immolation Glare, 2 = Fireblast Volley, 3 = Ground Snakes]
// [136] is storage for EXP Check Runs [Menu CVar]
// [137] is storage for Stamina Regen Rate [Menu CVar]
// [138] is storage for Mealth Regen Rate [Menu CVar]
// [139] is storage for Mana Regen Rate [Menu CVar]
// [140] is storage for Starting Sceptre Level [Menu CVar]
// [142] is storage for Health Degeneration Mode [Menu CVar]
// [143] is for how far along the degeneration timer is.
// [144] is the base degeneration interval for the character
// [145] is storage for Mana Cost Rate [Menu CVar]
// [146] is storage for Level Up Stat Multiplier
// [147] is storage for Starting HP/Mana Factor
// [148] is storage for Starting Other Stats' Factor
// [149] checks if health is 0 after an initial start [for certain situations done by wads like resurgance >___>;]
// [150] saves armor bits [Flora]
// [151] save weapon bits [any character]
// [152] stored Bullets [for Deg/Illu for Forced Pistol Restarts]
// [153] stored Shells [for Deg/Illu for Forced Pistol Restarts]
// [154] stored Rockets [for Deg/Illu for Forced Pistol Restarts]
// [155] stored Cells [for Deg/Illu for Forced Pistol Restarts]
// [156] stored Arrows [for Flora for Forced Pistol Restarts]
// [157] EXP Combo Timer
// [158] EXP Combo Kills
// [159] Combo Multiplier
// [160] Combo EXP Total
// [161] Exp Combo Timer Multiplier
// [162] Exp Combo Base Multipler
// [163] Secondary Spinning Timer
// [164] 5x Stamina Limit
// [165] True Stamina Gain/Cost
// [166] Dash Timer
// [167] Total Monsters Killed by the Player
// [168] Whistle Cooldown Timer
// [169] is for Artificial Map Inflation (OVERALL) [to increase the difficulty of levels by a number of maps]
// [170] Toggle HUD reference image on or off.
// [171] Indicates the player just leveled up [for the new hud] and is the time for the "Level Up!!" and "Stat Up" indicator[s]
// [172] Used for the "glow/fade" of the "Level Up" and "Stat Up" indicators
// [173] Shows "HealthDifference" in the new HUD for Player's "Damage/Healing" bursts.
// [174] Shows "HealthDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
// [175] Shows "NewHealthValue" in the new HUD for the Player's "Damage/Healing" bursts. 
// [176] Shows "ArmorDifference" in the new HUD for Player's "Damage/Healing" bursts.
// [177] Shows "ArmorDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
// [178] Shows "NewArmorValue" in the new HUD for the Player's "Damage/Healing" bursts. 
// [179-180] are unused
// [181] Tension Level
// [182] Tension Level Compare
// [183] Tension Timer
// [184] Tension Timer Counts Down
// [185] Tension Warmup Meter [you must hold down for this long for tension to go up a level]
// [186] Tension Cooldown Timer [when Tension levels change, or run out, this decides how long to wait before you can do so again]
// [187] Tension Charge Multiplier [CVAR]
// [188] Tension Max Cooldown Timer [for bar displays]
// [189] Tension Sound Charge Loop Timer
// [190] Active-Tension Pulse Timer
// [191] Tension Countdown Multiplier [CVAR]
// [192] Tension Cooldown Multiplier [CVAR]
// [193] Tension Speed Central Multiplier [CVAR]
// [194] Mercy Invincibility "Flag"
// [195] Mercy Invincibility Timer
// [196] Mercy Invincibility 'Modulus/Remainder'
// [197] Aeon Point Start Level (based on the menu option)
// [198] Sceptre's Twirl Timer
// [199] Very-First-Run
// [200] Player's Jump Height
// [201] Player's Balance [or Mass] - for various abilities that make it harder to toss a character around by increasing their mass
// [202] # of Uncurse Points for when holding the Ruinous Shield - For Determining how many points is needed to turn the Ruinous Shield into the Divine Shield.
// [203] Sceptre EXP Fragments [out of 16] - For whiffing with the staff without hitting enemies to slowly increment exp.
// [204] # of Aeon Points gained during a level up [for displays]
// [205] # of Agility Points gained during a level up [for displays]
// [206] # of Defense Points gained during a level up [for displays]
// [207] # of Deftness Points gained during a level up [for displays]
// [208] # of Sorcery Points gained during a level up [for displays]
// [209] # of Strength Points gained during a level up [for displays]
// [210] # of Therapeusis Points gained during a level up [for displays]
// [211] Current Value of Mana Regen Timer
// [212] 'Focus' is in use?
// [213] Mana Regen Rate Multiplier
// [214] # of Medicinal Herbs [for death-exit checks]
// [215] # of Strong Medicinal Herbs [for death-exit checks]
// [216] # of Special Medicinal Herbs [for death-exit checks]
// [217] # of Yggdrasil Dews [for death-exit checks]
// [218] # of Paxa Punches [for death-exit checks]
// [219] # of Lesser Vimstones [for death-exit checks]
// [220] # of Greater Vimstones [for death-exit checks]
// [221] # of Mercury Bandanas [for death-exit checks]
// [222] # of TOTAL Max HP gained during multiple level ups [for displays]
// [223] # of TOTAL Max MP gained during multiple level ups [for displays]
// [224] # of TOTAL Aeon Points gained during multiple level ups [for displays]
// [225] # of TOTAL Agility Points gained during multiple level ups [for displays]
// [226] # of TOTAL Defense Points gained during multiple level ups [for displays]
// [227] # of TOTAL Deftness Points gained during multiple level ups [for displays]
// [228] # of TOTAL Sorcery Points gained during multiple level ups [for displays]
// [229] # of TOTAL Strength Points gained during multiple level ups [for displays]
// [230] # of TOTAL Therapeusis Points gained during multiple level ups [for displays]
// [231] Focus Timer
// [232] Full Survival Amount # [before being rounded down to a whole number]
// [233] Full Armor Absorbsion # [before being rounded down to a whole number]
// [234] Evasion Amount # [before being rounded down to a whole number]
// [235] Critical Hit Rate %
// [236] Shows "ManaDifference" in the new HUD for Player's "Damage/Healing" bursts.
// [237] Shows "ManaDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
// [238] Shows "NewManaValue" in the new HUD for the Player's "Damage/Healing" bursts. 
// [241] Shows "LastHealthValue" in the new HUD for the Player's "Damage/Healing" bursts.  
// [242] Shows "LastArmorValue" in the new HUD for the Player's "Damage/Healing" bursts.  
// [243] Shows "LastManaValue" in the new HUD for the Player's "Damage/Healing" bursts.  
// [244] Checks for if the player can use the Sceptre's Spin Attack
	// [245 to 300] are undefined so far :P
// [301] Total Sceptre EXP Required for Level 1
// [302] Total Sceptre EXP Required for Level 2
// [303] Total Sceptre EXP Required for Level 3
// [304] Total Sceptre EXP Required for Level 4
// [305] Total Sceptre EXP Required for Level 5
// [306] Total Sceptre EXP Required for Level 6
// [307] Total Sceptre EXP Required for Level 7
// [308] Total Sceptre EXP Required for Level 8
// [309] Total Sceptre EXP Required for Level 9
// [310] Total Sceptre EXP Required for Level 10
// [311] Total Sceptre EXP Required for Level 11
// [312] Total Sceptre EXP Required for Level 12
// [313] Total Sceptre EXP Required for Level 13
// [314] Total Sceptre EXP Required for Level 14
// [315] Total Sceptre EXP Required for Level 15
// [316] Total Sceptre EXP Required for Level 16
// [317] [STRIFE-Compatibility] Times "Stamina Upgraded"
// [318] [STRIFE-Compatibility] Times "Accuracy Upgraded"
// [319] [STRIFE-Compatibility] Stamina Upgrade Checker
// [320] [STRIFE-Compatibility] Accuracy Upgrade Checker
	// [321 to 1999] are undefined so far :P
// [2000] HUD mod toggle >.>
// [2001] HUD X Size
// [2002] HUD Y Size
// [2003] HP "Critical" Glow Timer
// [2004] MP "Focus" Glow Timer
// [2005] HLCR "Overheat" Glow Timer
// [2006] STAM "Focus Drain" Glow Timer
// [2007] STAM "Tension Drain" Glow Timer
// [2008] Tension Cooldown Glow Timer
// [2009] Tension Level Glow Timer
// [2010] "Can't Use Spell" Glow Timer
// [2011] QuickSpell Slot 1's "Can't Use Spell" Glow Timer
// [2012] QuickSpell Slot 2's "Can't Use Spell" Glow Timer
// [2013] QuickSpell Slot 3's "Can't Use Spell" Glow Timer
// [2014] QuickSpell Slot 4's "Can't Use Spell" Glow Timer
// [2015] QuickSpell Slot 5's "Can't Use Spell" Glow Timer
// [2016] QuickSpell Slot 6's "Can't Use Spell" Glow Timer
// [2017] QuickSpell Slot 7's "Can't Use Spell" Glow Timer
// [2018] QuickSpell Slot 8's "Can't Use Spell" Glow Timer
// [2019] QuickSpell Slot 9's "Can't Use Spell" Glow Timer
// [2020] QuickSpell Slot (1)0's "Can't Use Spell" Glow Timer
// [2021] Kill Meter's Glow Timer
// [2022] Used to indicate if a specfic type of "OVERKILL" has occured [for the new hud]
// [2023] Used for the "OVERKILL" display timer
// [2024] Shows total EXP for current kill
// [2025] Shows EXP gained only from the combo for current kill
// [2026] EXP Gain Display Timer [new HUD]
// [2027] Current BOSS Meter TID in use
// [2031] MaxHP Gains Timer
// [2032] MaxMP Gains Timer
// [2033] AeonPts Gains Timer
// [2034] Strength Gains Timer
// [2035] Defense Gains Timer
// [2036] Sorcery Gains Timer
// [2037] Therapeusis Gains Timer
// [2038] Agility Gains Timer
// [2039] Deftness Gains Timer
	// [2040 to 2499] are undefined so far :P
// [2500] Menu mode toggle. 0 = Off, 1 = On

// [9801] is for checking LifeUp BitFields
// [9802] is for checking MagiUp BitFields
// [9803] is for checking StamUp BitFields
// [9804] is for checking NOTHRUST checks

// [9901] LifeUp Perk ComboLevel Check
// [9902] LifeUp Perk PerkFactor
// [9903] LifeUp Perk Base PerkFactor
// [9904] MagiUp Perk ComboLevel Check
// [9905] MagiUp Perk PerkFactor
// [9906] MagiUp Perk Base PerkFactor
// [9907] [STRIFE] Stamina Upgrade [HP] ComboLevel Check
// [9908] [STRIFE] Stamina Upgrade [HP] PerkFactor
// [9909] [STRIFE] Stamina Upgrade [HP] Base PerkFactor
// [9910] [STRIFE] Stamina Upgrade [MP] ComboLevel Check
// [9911] [STRIFE] Stamina Upgrade [MP] PerkFactor
// [9912] [STRIFE] Stamina Upgrade [MP] Base PerkFactor

// [10001] "LifeUp" Perk Level
// [10002] "LifeUp EX" Perk Level
// [10003] "MagiUp" Perk Level
// [10004] "MagiUp EX" Perk Level
// [10005] "StamUp" Perk Level
// [10006] "StamUp EX" Perk Level
// [10007] "DodgeMore" Perk Level
// [10008] "DodgeMore EX" Perk Level
// [10009] "JumpMore" Perk Level
// [10010] "JumpMore EX" Perk Level
// [10011] "PsycheFast" Perk Level
// [10012] "PsycheFast EX" Perk Level
// [10013] "RegenHPFast" Perk Level
// [10014] "RegenHPFast EX" Perk Level
// [10015] "RegenMPFast" Perk Level
// [10016] "RegenMPFast EX" Perk Level
// [10017] "RegenStamFast" Perk Level
// [10018] "RegenStamFast EX" Perk Level
// [10019] "Bullet Accuracy" Perk Level
// [10020] "Bullet Accuracy EX" Perk Level
// [10021] "Pellet Accuracy" Perk Level
// [10022] "Pellet Accuracy EX" Perk Level
// [10023] "Plasma Accuracy" Perk Level
// [10024] "Plasma Accuracy EX" Perk Level
// [10025] "Demolitions Expert" Perk Level
// [10026] "Demolitions Expert EX" Perk Level
// [10027] "Karasawa Attunement" Perk Level
// [10028] "Karasawa Attunement EX" Perk Level
// [10029] "BFG Attunement" Perk Level
// [10030] "BFG Attunement EX" Perk Level
// [10031] "Archery Mastery" Perk Level
// [10032] "Archery Mastery EX" Perk Level
// [10033] "Soul Mastery" Perk Level
// [10034] "Soul Mastery EX" Perk Level
// [10035] "Martial Arts Mastery" Perk Level
// [10036] "Martial Arts Mastery EX" Perk Level
// [10037] "Mortal Hit Survivability Psyche Up" Perk Level
// [10038] "Mortal Hit Survivability Psyche Up EX" Perk Level
// [10039] "Mortal Hit Survivability Mana Recovery" Perk Level
// [10040] "Mortal Hit Survivability Mana Recovery EX" Perk Level
// [10041] "Mortal Hit Survivability Blast Wave" Perk Level
// [10042] "Mortal Hit Survivability Blast Wave EX" Perk Level
// [10043] "Mortal Hit Survivability 'Death Rage'" Perk Level
// [10044] "Mortal Hit Survivability 'Death Rage' EX" Perk Level

global int 22:SpecialGameFlags[]; // ***ARRAY***
						// [0 to 999] = DVII related story/game flags
// [0] = Checks for DV2M01 armor item [Safe Tea Shoes]
// [1] = Checks for DV2M02 armor item [Pearly Corset]
// [2] = Checks for DV2M03 armor item [Water Flying Dress]
// [3] = Checks for DV2M04 armor item [Evenstar Necklace]
// [4] = Checks for DV2M05 armor item [Cloak of Evasion]
// [5] = Checks for DV2M05S armor item [Falcon Knife Earrings]
// [6] = Checks for DV2M06 armor item [Anubis Cufflinks]
// [7] = Checks for DV2M07 armor item [Kissa's Brassire]
// [8] = Checks for DV2M08 armor item [Ruinous Shield/Divine Shield]
// [9] = Checks for DV2M09 armor item [Balrog Ring]
// [10] = Checks for DV2M10 armor item [Dove's Ribbon]

						// [1000 to 1999] = DVI related story/game flags
// [1000] = Checks for Sauravatar's activation [DVI]
// [1001] = Final Health Value for the Sauravatar [DVI]
// [1002] = Base Health Value for the Sauravatar [DVI]
// [1003] = Sauravatar's "Moderate" Health Level (will use his Gold BFG attack when below this value) [DVI]
// [1004] = Sauravatar's "Low" Health Level (will use his White BFG attack when below this value) [DVI]

global int 26:MonstersAlive[]; // ***ARRAY*** Array to Replace "MonstersAliveMAPXX" vars.
global int 27:MonstersKilled[]; // ***ARRAY*** Array to Replace "MonstersKilledMAPXX" vars.
global int 28:SecretsFound[]; // ***ARRAY*** Array to Replace "SecretsFoundMAPXX" vars.
// Table Definitions for all Level Held Stat-arrays
// [0] = MAP00 (DVI's Prolouge Level)
// [1] = MAP01 (All Games)
// [2] = MAP02 (All Games)
// [3] = MAP03 (All Games)
// [4] = MAP04 (All Games) // DVI-DS MAP04 (End of Days) & DVII-DS MAP04 (Minas Morgul)
// [5] = MAP05 (All Games) // DVII-DS MAP05 (Eagle's Nest)
// [6] = MAP06 (All Games) // DVII-DS MAP06 (Stargate)
// [7] = MAP07 (All Games) // DVII-DS MAP07 (The Desert Temple)
// [8] = MAP08 (All Games) // DVII-DS MAP08 (The Unholy Cathedral)
// [9] = MAP09 (All Games) // DVII-DS MAP09 (You Shall Not Pass!)
// [10] = MAP10 (All Games) // DVII-DS MAP10 (Hell's Vendetta)
// [11] = MAP11 (All Games) // DVII-DS MAP11 (St. Peter's Gate)
// [12] = MAP12 (All Games) // DVII-DS MAP12 (The Wings of the Maiar)
// [13] = MAP13 (All Games)
// [14] = MAP14 (All Games)
// [15] = MAP15 (All Games)
// [16] = MAP16 (All Games)
// [17] = MAP17 (All Games)
// [18] = MAP18 (All Games)
// [19] = MAP19 (All Games)
// [20] = MAP20 (All Games)
// [21] = MAP21 (All Games)
// [22] = MAP22 (All Games)
// [23] = MAP23 (All Games)
// [24] = MAP24 (All Games)
// [25] = MAP25 (All Games)
// [26] = MAP26 (All Games)
// [27] = MAP27 (All Games)
// [28] = MAP28 (All Games)
// [29] = MAP29 (All Games)
// [30] = MAP30 (All Games)
// [31] = MAP31 (All Games)
// [32] = MAP32 (All Games)
// [33] = MAP05B DVII Only) // DVII-DS MAP05B (The Manliest Level Ever)
// [34] = MAP10B (DVII Only) // DVII-DS MAP10B (AttedneV s'lleH)
// [35] = MAP10C (DVII Only) // DVII-DS MAP10C (attedneV s'lleH: The True End of All Things...)
// [63] = MAP00 (DVII's Prolouge Level)

global int 31:CurrentArmorClass; // All Games

global int 33:CharacterClass; // All Games

global int 34:ClassCheck; // All Games

// New Vars for DVII-DS and the remade DVI-DS. :P

global int 37:LevelCap; // Applies to all games, however Flora's the only character legally able to extend her level cap from 100 to 200.
global int 38:SpellIDLimit; // Defines the total number of spells allowed for quick var references
global int 40:ItemsFound[];
global int 46:ClassicDoomType;
// 0 = Doom 2
// 1 = Doom 1
// 2 = Heretic
// 3 = Hexen
// 4 = Strife[?]

global int 50:GameScriptEvents[]; // ***ARRAY*** Array for Controlling in-game scripts and story events
// [1401] = MAP04, Damage inflicted by Helltoxins in Minas Morgul
// [1402] = MAP04, Damage timer for Helltoxins in Minas Morgul
// [1403] = MAP04, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.
// [1801] = MAP08, Spawns all AmbientSound Actors in places meant to be high off the ground.


// 0 = Normal, 1 = Other

int FirstRun, KillBonusApplied, ItemBonusApplied, SecretBonusApplied;


str FriendID[48] = {
                    "FZombieman", "FPlasmaGuy", "FRocketLauncherGuy", "FRepeaterZombie", "FKarasawaGuy", // 5
                    "FShotgunGuy", "FSuperShotgunGuy", // 2
                    "FDoomImp", "FDarkImp", // 2
                    "FDemon", "FBloodDemon", // 2
                    "FWolfensteinSS", // 1
                    "FLostSoul", "FHadesSphere", "FHSOverlord", // 3
                    // Weak 0-14 [15]

                    "FHellCleric", // 1
                    "FSpectre", "FBloodSpectre", // 2
                    "FChaingunGuy", "FBFGGuy", // 2
                    "FCacodemon", "FCacolantern", "FAbaddon", "FHadesElemental", // 4
                    "FHellKnight", "FBaronOfHell", // 2
                    // Moderate 15-25 [11]
                    
                    "FFlyingBalrog", // 1
                    "FBaronOfHell", "FBelphegor", "FBruiserDemon", "FCyBruiser", "FArchonOfHell", "FPyroDemon", // 6
                    "FHadesElemental", "FHadesOverlord", // 2
                    "FRevenant", "FDeathIncarnate", // 2
                    "FFatso", "FHectebus", // 2
                    "FArachnotron", "FRailArachnotron", "FFusionArachnotron", // 3
                    // Strong 26-41 [16]

                    "FArchvile", "FDiabloist", 
                    // Vile 42-43 [2]

                    "FCyberdemon", "FAnnihilator", 
                    // Cyberdemon 44-45 [2]

                    "FSpiderMastermind", "FDemolisher" 
                    // Spider Mastermind 46-47 [2]
                   };

//*****************************************
//***Deggaris and Illucia's Spell Tables***
//*****************************************
int SpellsLearned[57] = 
{
 1, 					// +1  (Level 0)
 3, 5, 6, 7, 8,			// +2, +2, +2, +1, +1  (Levels 1-5)
 9, 11, 12, 14, 15,		// +1, +1, +2, +1, +2  (Levels 6-10)
 18, 20, 22, 23, 24, 	// +1, +3, +2, +2, +1  (Levels 11-15)
 26, 27, 29, 30, 33, 	// +1, +2, +1, +2, +1  (Levels 16-20)
 37, 38, 39, 40, 44, 	// +3, +4, +1, +1, +1  (Levels 21-25)
 46, 47, 48, 49, 51, 	// +4, +2, +1, +1, +1  (Levels 26-30)
 54, 54, 54, 54, 54,	// +2, +0, +0, +0, +0  (Levels 31-35)
 54, 54, 54, 54, 54,	// +0, +0, +0, +0, +0  (Levels 36-40)
 54, 54, 54, 54, 54,	// +0, +0, +0, +0, +0  (Levels 41-45)
 54, 54, 54, 54, 54,	// +0, +0, +0, +0, +0  (Levels 46-50)
 54, 54, 54, 54, 54,	// +0, +0, +0, +0, +0  (Levels 51-55)
 55						// +1  (Levels 56+)
};

int SpellCastTypes[58] = {
                           0, 1, 2, 0, 3,
                           4,10, 0, 5, 0, 
                           6, 0, 0, 0, 1,
                           7, 8, 9, 3, 0,
                           0, 2, 4, 0, 6,
                           7,10, 0,11, 1,
                           2, 0,12, 7, 8,
                           9, 3, 4, 0, 6,
                          11, 0, 0,10, 0,
                           9, 8, 0, 6, 0,
                          13,14,15,16, 6,
                          18,19,20};
int SpellCastStrength[58] = {
                                0,   2,  10,   1,  10,
                               10,   0,   2,  15,   3, 
                                0,   4,   5,   6,   5,
                                0,  10,  10,  30,   7,
                                8,  30,  30,   9,   1,
                                1,   1,  10,   0,  10,
                               60,  11,   0,   2,  30,
                               30,  60,  60,  12,   2,
                                1,  13,  14,   2,  15,
                               60,  60,  16,   3,  17,
                               15,  30,   0,  30,   4,
                               30,  30,  30
                            };                     
str SpellCategory[4] = {
                         "\cdOffense Magic\c-",		//[0] (23) 0, 3, 6, 7, 9, 11, 12, 13, 15, 19, 20, 23, 25, 26, 27, 31, 33, 38, 41, 42, 43, 44, 49
                         "\cnRestorative Magic\c-",	//[1] (5)  1, 14, 28, 29, 40
                         "\cfStatus Magic\c-",		//[2] (20) 2, 4, 5, 8, 16, 17, 18, 21, 22, 30, 32, 34, 35, 36, 37, 45, 46, 50, 51, 53
                         "\ceConjure Magic\c-"		//[3] (7)  10, 24, 39, 47, 48, 52, 54
                       };
str SpellTable[58] = {                               //[id] (deg?), (ill?), (flo?)
                      "\cdMinor Magic Missile\c-",	  //[0] O, O, O  [Offense]		[Level 0]
                      "\cnMinor Healing\c-", 	 	  //[1] O, O, O  [Restorative]	[Level 0]
                      "\cfMinor Night-Vision\c-", 	  //[2] O, O, O  [Status]		[Level 1]
                      "\cdChill Touch\c-", 	 	 	  //[3] O, O, O  [Offense]		
                      "\cfMinor Invisibility\c-",	  //[4] O, O, O  [Status]
                      "\cfMinor Flight\c-", 	 	  //[5] O, O, O  [Status]
                      "\cdMinor Poison Cloud\c-", 	  //[6] O, X, O  [Offense]
                      "\cdMinor Fireball\c-", 	 	  //[7] O, O, O  [Offense]
                      "\cfEnhanced Strength\c-", 	  //[8] O, O, O  [Status]
                      "\cdMinor Ice Blast\c-", 		  //[9] O, O, O  [Offense]
                      "\ceSummon Weak Monster\c-", 	 //[10] O, O, O  [Conjure]
                      "\cdMagic Missile\c-", 	 	 //[11] O, O, O  [Offense]
                      "\cdFireball\c-", 		 	 //[12] O, O, O  [Offense]
                      "\cdExplosive Glyph\c-", 		 //[13] O, O, O  [Offense]
                      "\cnHealing\c-",	 	 		 //[14] O, O, O  [Restorative]
                      "\cdFireball Nova\c-", 	 	 //[15] X, O, O  [Offense]
                      "\cfMinor Stealth\c-", 		 //[16] O, O, O  [Status]
                      "\cfMinor Invulnerability\c-", //[17] O, O, O  [Status]
                      "\cfInvisibility\c-", 		 //[18] O, O, O  [Status]
                      "\cdAcid Rain\c-",			 //[19] O, O, O  [Offense]
                      "\cdFreezing Glyph\c-", 		 //[20] X, O, O  [Offense]
                      "\cfNight-Vision\c-",  		 //[21] O, O, O  [Status]
                      "\cfFlight\c-",  		 		 //[22] O, O, O  [Status]
                      "\cdMajor Magic Missile\c-", 	 //[23] X, O, O  [Offense]
                      "\ceSummon Monster\c-", 	 	 //[24] O, O, O  [Conjure]
                      "\cdIcy Nova\c-", 			 //[25] O, O, O  [Offense]
                      "\cdPoison Cloud\c-", 		 //[26] O, X, O  [Offense]
                      "\cdMinor Lightning\c-", 		 //[27] O, O, O  [Offense]
                      "\cnStone Skin\c-", 			 //[28] O, O, X  [Restorative]
                      "\cnMajor Healing\c-",		 //[29] X, O, O  [Restorative]
                      "\cfMajor Night-Vision\c-", 	 //[30] X, O, O  [Status]
                      "\cdIce Blast\c-", 			 //[31] O, O, O  [Offense]
                      "\cfFarsight\c-", 			 //[32] O, O, O  [Status]
                      "\cdLightning Nova\c-", 		 //[33] X, O, O  [Offense]
                      "\cfStealth\c-",		 		 //[34] X, O, O  [Status]
                      "\cfInvulnerability\c-",		 //[35] O, O, O  [Status]
                      "\cfMajor Invisibility\c-",	 //[36] X, O, O  [Status]
                      "\cfMajor Flight\c-",			 //[37] X, O, O  [Status]
                      "\cdLightning\c-",			 //[38] O, O, O  [Offense]
                      "\ceSummon Strong Monster\c-", //[39] O, O, O  [Conjure]
                      "\cnDiamond Skin\c-",			 //[40] O, O, X  [Restorative]
                      "\cdMajor Fireball\c-",		 //[41] X, O, O  [Offense]
                      "\cdMajor Ice Blast\c-",		 //[42] X, O, O  [Offense]
                      "\cdMajor Poison Cloud\c-",	 //[43] O, X, O  [Offense]
                      "\cdMajor Lightning\c-",		 //[44] X, O, O  [Offense]
                      "\cfMajor Invulnerability\c-", //[45] X, O, O  [Status]
                      "\cfMajor Stealth\c-",		 //[46] X, O, O  [Status]
                      "\ceRaging Spirits\c-",		 //[47] O, O, O  [Conjure]
                      "\ceSummon Arch-Vile\c-",		 //[48] X, O, O  [Conjure]
                      "\cdUltra Magic Missile\c-",	 //[49] X, X, O  [Offense]
                      "\cfTime Freezer\c-",			 //[50] X, O, O  [Status]
                      "\cfTerrorization Aura\c-",	 //[51] O, X, O  [Status]
                      "\ceCreate Lotso' Ammo\c-",	 //[52] O, O, X  [Conjure]
                      "\cfDivine Avatar\c-",		 //[53] O, O, O  [Status]
                      "\ceSummon Cyberdemon\c-",	 //[54] X, O, O  [Conjure]
                      "\cfSpreader Aura Lv. 2\c-",	 //[55] X, X, O  [Status]
                      "\cfOomph\c-",				 //[56] X, X, O  [Status]
                      "\cfBuff\c-"					 //[57] X, X, O  [Status]
                     };
// 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54, 55, 56, 57 = Deggaris Cannot use these Spell IDs in final version
// 6, 26, 43, 49, 51, 55, 56, 57 = Illucia Cannot use these Spell IDs in final version
// 28, 40, 52 = Flora Cannot use these Spell IDs in final version

str SpellDesc[58] =  {
                      "Shoots an aetherbolt that does minimal damage",				// Minor Magic Missile
                      "Heals 2-4 health points up to ",						// Minor Healing
                      "See as if it were daylight for 10 seconds",					// Minor Night Vision
                      "Send a cold chill into whatever you touch",					// Chill Touch
                      "Become harder to see [and +1/3 Evasion] for 10 seconds",					// Minor Invisibility
                      "Leave the forces of gravity behind for 10 seconds",				// Minor Flight
                      "Creates a stationary cloud of poison",					// Minor Poison Cloud
                      "Shoots a fireball that does low damage",					// Minor Fireball
                      "Multipliesmelee damage 10x for 15 seconds",				// Enchanced Strength
                      "Fires a few ice shards", 							// Minor Ice Blast
                      "Summons a weak allied monster. 25% chance to spawn two.",	// Summon Weak Monster
                      "A more powerful magic missile",				// Magic Missile
                      "A medium-damage fireball",							// Fireball
                      "Creates a magical proximity mine.",		// Explosive Glyph
                      "Heals 4-9 health points up to ",						// Healing
                      "Creates a ring of fireballs",							// Fireball Nova
                      "Monsters cannot see/hear you for 10 seconds",
                      "Monsters cannot damage you for 10 seconds",
                      "Become harder to see [and +1/3 Evasion] for 30 seconds",
                      "Summons rain from the ceiling down upon your enemies",
                      "Summons an ice-elemental magic proximity mine.",
                      "Darkness will be no problem for 30 seconds",
                      "Bend gravity to your will for 30 seconds",
                      "A very powerful magic missile shot",						// Major Magic Missile
                      "Summons a moderately powerful ally. 25% chance to spawn two.",
                      "Emits a ring of ice shards.",
                      "A stationary poison cloud.  This one has a larger radius",
                      "Give your enemies a nasty shock with this spell",
                      "Fortify yourself with 333 armor, 66% protection",
                      "Heals 8-18 health points up to ",
                      "Makes everything bright for a full minute",
                      "Shoots several ice shards",
                      "Allow you to see the entire map.",
                      "A ring of lightning",
                      "Enemies won't be able to hear/see you for 30 seconds",
                      "Shrug of all damage for 30 seconds",
                      "Become harder to see [and +1/3 Evasion] for a full minute",
                      "Defy gravity for a full minute",
                      "Shoots three lightning blasts",
                      "Summons a powerful allied monster. 25% chance to spawn two.",
                      "Fortify yourself with 888 armor, 90% protection",				// Diamond Skin
                      "Shoot a highly damaging fireball",						// Major Fireball
                      "Fires lots of ice shards",							// Major Ice Blast
                      "Fill an entire small room with poison",					// Major Poison Cloud
                      "This shoots a shocking 5 lightning blasts",					// Major Lightning
                      "You cannot be damaged for a full minute",					// Major Invulnerability
                      "Hide from your enemies' senses for a full minute",				// Major Stealth
                      "Summon Holy spirits to tear apart your foes.",			// Raging Spirits
                      "Summon an Archvile to turn slain foes to your side.",	// Summon Archvile
                      "The most powerful Magic Missile spell.",				// Ultra Magic Missile
                      "Freeze Time for 15 seconds, rendering all but you frozen.",		// Time Freezer
                      "Makes enemies flee from you in terror for 30 seconds.",			// Terror Aura
                      "Creates a lot of ammo for your weapons.",					// Create Lotso Ammo
                      "Grants you access to your fullest potential in combat!",			// Divine Avatar
                      "Summon a Cyberdemon to destroy your enemies.",		// Summon Cyberdemon
                      "Allows You to Create 6 Extra Copies of Most Attacks/Spells.",	// Spreader Aura Lv. 2
                      "Doubles your damage output for a short time.",	// Oomph
                      "Cut Damage in Half and slightly increase survive rate."		// Buff
                     };
int SpellCosts[58] = {
                        1,		// Minor Magic Missile
                        5,		// Minor Healing
                        5,		// Minor Night Vision
                        5,		// Chill Touch
                       15,		// Minor Invisibility
                       10,		// Minor Flight
                       15,		// Minor Poison Cloud
                       10,		// Minor Fireball
                       50,		// Enhanced Strength
                       15,		// Minor Ice Blast
                       50,		// Summon Weak Monster
                       20,		// Magic Missile
                       20,		// Fireball
                       30,		// Explosive Glyph
                       15,		// Healing
                       40,		// Fireball Nova
                       50,		// Minor Stealth
                      100,		// Minor Invulnerability
                       75,		// Invisibility
                       25,		// Acid Rain
                       50,		// Freezing Glyph
                       40,		// Night-Vision
                       75,		// Flight
                       50,		// Major Magic Missile
                      125,		// Summon Monster
                      100,		// Ice Nova
                       75,		// Poison Cloud
                       75,		// Minor Lightning
                      100,		// Stone Skin
                       55,		// Major Healing
                      100,		// Major Night-Vision
                       50,		// Ice Blast
                      150,		// Farsight
                      150,		// Lightning Nova
                      150,		// Stealth
                      200,		// Invulnerability
                      150,		// Major Invisibility
                      150,		// Major Flight
                      125,		// Lightning
                      220,		// Summon Strong Monster
                      200,		// Diamond Skin
                       50,		// Major Fireball
                       75,		// Major Ice Blast
                      130,		// Major Poison Cloud
                      175,		// Major Lightning
                      250,		// Major Invulnerability
                      200,		// Major Stealth
                      150,		// Raging Spirits
                      250,		// Summon Archvile
                      160,		// Ultra Magic Missile
                      325,		// Time Freezer
                      225,		// Terror Aura
                      300,		// Create Lotso Ammo
                        0, 	// Divine Avatar [value doesn't matter since it auto-calculates based on max MP]
                      500,		// Summon Cyberdemon
                     1025,		// Spreader Aura Lv. 2
                       80,		// Oomph
                       30		// Buff
                     };

//***********************************
//***Flora's Spell Table [DVII-DS]***
//***********************************
/*

//***********************************************************
// GuideList of Numbers for Flora's Spells [Doomspell-Style]*
//***********************************************************
// TODO later :P
1. Minor Magic Missile (2)
2. Minor Farsight (4)
3. Summon Imp (6)
4. Minor Flight (7)
5. Minor Polymorphosis (9)
6. Magic Missile (10)
7. Summon Pinky (11)
8. Minor Stealth (13)
9. Farsight (14)
10. Enhanced Strength (15)
11. Summon Cacodemon (16)
12. Major Magic Missile (17)
13. Minor Invulnerability (18)
14. Flight (19)
15. Spiritual Exoskin (20)
16. Minor Revenger (22)
17. Summon Hell Noble (23)
18. Major Farsight (24)
19. Minor Charm (24)
20. Stealth (26)
21. Invulnerability (28)
22. Summon Archvile (29)
23. Ultra Magic Missile (30)
24. Polymorphosis (30)
25. Major Flight (32)
26. Summon Cyberdemon (36)
27. Major Stealth (37)
28. Major Invulnerability (39)
29. Greater Spiritual Exoskin (40)
30. Charm (42)
31. Revenger (43)
32. Aura of Anubis (45)
33. Create Ammo (48)
34. Spreader Aura Lv. 2 (56)
35. Major Polymorphosis (62)
36. Dyspersion (64)
37. Major Charm (66)
38. Divine Avatar (69)
39. Light Haze Smite (77)
40. Major Revenger (84)
41. Perfected Spiritual Exoskin (92)
42. Shielding of the Larries (132)

//*************************************************************
// GuideList of Numbers for Flora's Spells [DragonQuest-Style]*
//*************************************************************
// TODO later :P
1. MidHeal (1)
2. Appraise (3)
3. KaBuff (11)
4. Dazzle (12)
5. Oomph (13)
6. Snooze (14)
7. Safe Passage (15)
8. Sizzle (16)
9. Tick-Tock (17)
10. Bounce (18)
11. Frizzle (20)
12. Crackle (21)
13. Kasap (22)
14. Thwack (23)
15. KaDazzle (25)
16. Zap (25)
17. Insulatle (26)
18. KaSizzle (27)
19. HighHeal (31)
20. KaFrizzle (33)
21. Tickety-Tockety (34)
22. Kazap (35)
23. KaClang (36)
24. KaBoom (37)
25. AbsMagic (41)
26. Crackle (45)
27. StopSpell (48)
28. MegaHeal (52)
29. DeMagic (63)
30. Kaboomle (66)
31. ?
32. ?
33. ?

// 43 Doomspell-Style Spells
int FloraSpellsLearnedDoomspell[201] = 
{
 // Add Here Later
 0,						// Level 0
 0, 1, 1, 2, 2,			// Levels 1-5
 3, 4, 4, 5, 6,			// Levels 6-10
 7, 7, 8, 9, 10,		// Levels 11-15
 11, 12, 13, 14, 15,	// Levels 16-20
 15, 16, 17, 19, 19,	// Levels 21-25
 20, 20, 21, 22, 24,	// Levels 26-30
 24, 25, 25, 25, 25,	// Levels 31-35
 26, 27, 27, 28, 29,	// Levels 36-40
 29, 30, 31, 31, 32,	// Levels 41-45
 32, 32, 33, 33, 33,	// Levels 46-50
 33, 33, 33, 33, 33,	// Levels 51-55
 34, 34, 34, 34, 34,	// Levels 56-60
 34, 35, 35, 36, 36,	// Levels 61-65
 37, 37, 37, 38, 38,	// Levels 66-70
 38, 38, 38, 38, 38,	// Levels 71-75
 38, 39, 39, 39, 39,	// Levels 76-80
 39, 39, 39, 40, 40,	// Levels 81-85
 40, 40, 40, 40, 40,	// Levels 86-90
 40, 41, 41, 41, 41,	// Levels 91-95
 41, 41, 41, 41, 41,	// Levels 96-100
};

// 33 DragonQuest-Style Spells
int FloraSpellsLearnedDQ5Style[201] = 
{
 // Add Here Later
 0,						// Level 0
 1, 1, 2, 2, 2,			// Levels 1-5
 2, 2, 2, 2, 2,			// Levels 6-10
 3, 4, 5, 6, 7,			// Levels 11-15
 8, 9, 10, 10, 11,		// Levels 16-20
 12, 13, 14, 14, 16,	// Levels 21-25
 17, 18, 18, 18, 18,	// Levels 26-30
 19, 19, 20, 21, 22,	// Levels 31-35
 23, 24, 24, 24, 24,	// Levels 36-40
 25, 25, 25, 25, 26,	// Levels 41-45
 26, 26, 27, 27, 27,	// Levels 46-50
 27, 28, 28, 28, 28,	// Levels 51-55
 28, 28, 28, 28, 28,	// Levels 56-60
 28, 28, 29, 29, 29,	// Levels 61-65
 30, 30, 30, 30, 30,	// Levels 66-70
 30, 30, 30, 30, 30,	// Levels 71-75
 30, 30, 30, 30, 30,	// Levels 76-80
 30, 30, 30, 30, 30,	// Levels 81-85
 30, 30, 30, 30, 30,	// Levels 86-90
 30, 30, 30, 30, 30,	// Levels 91-95
 30, 30, 30, 30, 30,	// Levels 96-100
};


// Doomspell-Style Types
int FloraSpellCastTypesDS[43] = 
{
 // Add Here Later
};
// DragonQuest-Style Types
int FloraSpellCastTypesDQ[33] = 
{
 // Add Here Later
};


// Doomspell-Style Types
int FloraSpellCastStrengthDS[43] = 
{
 // Add Here Later
};
// DragonQuest-Style Types
int FloraSpellCastStrengthDQ[33] = 
{
 // Add Here Later
};

// Doomspell-Style Names
str FloraSpellNameTableDS[43] =
{
 // Add Here Later
};
// DragonQuest-Style Names
str FloraSpellNameTableDQ[33] =
{
 // Add Here Later
};


// Doomspell-Style Descriptions
str FloraSpellDescDS[43] =
{
 // Add Here Later
};
// DragonQuest-Style Descriptions
str FloraSpellDescDQ[33] =
{
 // Add Here Later
};

// Doomspell-Style Spell Costs [Exact Values, not %ages]
int FloraSpellCostsDS[43] =
{
 // Add Here Later
};
// Doomspell-Style Spell Costs [Usually in %ages, not exact values]
int FloraSpellCostsDQ[33] =
{
 0, // No Spell
 5, 3, 6, 4, 6,	// 1-5
 3, 2, 6, 4, 4,	// 6-10
};

*/

//***TO BE ADDED IN THE FUTURE***

//*********************
//*********************
//******FUNCTIONS******
//*********************
//*********************

// Healing Formula [for displays and actual calculations]
function int GetHealingValue (int type, int MinOrMax)
{
 int HealSorcRatio, value;

 if (type == 0) // Minor Healing
 {
  if (MinOrMax == 0) // Min
  {
   value = 2;
   value += (PlayerLevel / 6);
  }
  if (MinOrMax == 1) // Max
  {
   value = 4;
   value += (PlayerLevel / 6);
  }
 }


 if (type == 1) // Healing
 {
  if (MinOrMax == 0) // Min
  {
   value = 5; 
   value += (PlayerLevel / 5);
  }
  if (MinOrMax == 1) // Max
  {
   value = 9; 
   value += (PlayerLevel / 5);
  }
 }


 if (type == 2) // Major Healing
 {
  if (MinOrMax == 0) // Min
  {
   value = 11; 
   value += (PlayerLevel / 4);
  }
  if (MinOrMax == 1) // Max
  {
   value = 19; 
   value += (PlayerLevel / 4);
  }
 }

 if (type == 3) // Heal [DQ]
 {
  if (MinOrMax == 0) // Min
  {
   value = 24; 
   value += (PlayerLevel / 5);
  }
  if (MinOrMax == 1) // Max
  {
   value = 36; 
   value += (PlayerLevel / 5);
  }
 }
 
 if (type == 4) // MidHeal [DQ]
 {
  if (MinOrMax == 0) // Min
  {
   value = 60; 
   value += (PlayerLevel / 4);
  }
  if (MinOrMax == 1) // Max
  {
   value = 90; 
   value += (PlayerLevel / 4);
  }
 }
 
 if (type == 5) // MoreHeal [DQ]
 {
  if (MinOrMax == 0) // Min
  {
   value = 135; 
   value += (PlayerLevel / 4);
  }
  if (MinOrMax == 1) // Max
  {
   value = 210; 
   value += (PlayerLevel / 4);
  }
 }
 
 if (type == 6) // FullHeal [DQ]
 {
  value = MaxHealthTrue; 
 }
 
 // Stat Alternations
 value = value * (10 + (PlayerLevel / 25)) / 10;
 if (CheckActorInventory(1001,"SauronHelmet") > 0) value = value * 9 / 8;
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) value = value * 9 / 8; // Deggaris w/ Gauntlets
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) value = value * 9 / 8; // Illucia w/ Gauntlets
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) value = value * 9 / 8; // Flora w/ Gauntlets
 if (CheckActorInventory(1001,"TheOneRing") > 0) value = value * 5 / 2;

 // Divine Avatar
 if (PowerupTimer[7] > 0) value *= 4;

 // ???
 if (PowerupTimer[129] > 0) value *= 10;

 // Flora in use
 if (CharacterClass == 2) value = value * 7 / 4;

 // Healing Strength is increased based on Sorcery stat
 if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 75) / 300;
 if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 75) / 200;
 if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 75) / 150;
 HealSorcRatio += 100;
 value = (value * HealSorcRatio) / 100;
 // Healing Strength is also increased based on Thrapeusis stat
 if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[36] * 225) / 300;
 if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[36] * 225) / 200;
 if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[36] * 225) / 150;
 HealSorcRatio += 100;
 value = (value * HealSorcRatio) / 100;

 str TensionItem;
 if (MiscellaneousVars[181] == 0) TensionItem = "0";
 if (MiscellaneousVars[181] == 1) TensionItem = "5";
 if (MiscellaneousVars[181] == 2) TensionItem = "20";
 if (MiscellaneousVars[181] == 3) TensionItem = "50";
 if (MiscellaneousVars[181] == 4) TensionItem = "100";
 if (MiscellaneousVars[181] == 5) TensionItem = "250";
 if (MiscellaneousVars[181] == 6) TensionItem = "500";
 if (MiscellaneousVars[181] == 7) TensionItem = "1000";
 //PrintBold(s:"Pre-Tension [Heal] (",s:TensionItem,s:"): ",d:value);
 if (MiscellaneousVars[181] == 1) value = value * 17 / 10; // 1.7x
 if (MiscellaneousVars[181] == 2) value = value * 3; // 3x
 if (MiscellaneousVars[181] == 3) value = value * 5; // 5x
 if (MiscellaneousVars[181] == 4)  value = value * 15 / 2; // 7.5x
 if (MiscellaneousVars[181] == 5)  value = value * 45 / 4; // 11.25x
 if (MiscellaneousVars[181] == 6)  value = value * 35 / 2; // 17.5x
 if (MiscellaneousVars[181] == 7)  value = value * 25; // 25x
 //PrintBold(s:"Post-Tension [Heal] (",s:TensionItem,s:"): ",d:value);

 return value;
}

function int SetInventory (str item, int count) 
{
 int n = count - CheckInventory (item);
 if (n > 0)
  GiveInventory (item, n);
 else if (n < 0)
  TakeInventory (item, -n);

 return n;
}

function int SetActorInventory (int tid, str item, int count) 
{
 int n = count - CheckActorInventory (tid, item);
 if (n > 0)
  GiveActorInventory (tid, item, n);
 else if (n < 0)
  TakeActorInventory (tid, item, -n);

 return n;
}

// This function will place text or a sprite (depending on parameters passed) at the onscreen position of an actor with the specified tid, as long as it's in range (fixed mapunits). 


function void hudmessageonactor(int tid, int range, str sprite, str text)
{
 int dist, ang, vang, pitch, x, y;
 int HUDX = 640;
 int HUDY = 400;
 int offset = 0;

 if(sprite != -1)
 {
  setfont(sprite);
  text = "A";
  offset = 0.1;
 }

 sethudsize(HUDX, HUDY, 1);
 x = getactorx(tid) - getactorx(0);
 y = getactory(tid) - getactory(0); 

 vang = vectorangle(x,y);
 ang = (vang - GetActorAngle(0) + 1.0) % 1.0;

 if(((vang+0.125)%0.5) > 0.25) dist = fixeddiv(y, sin(vang));
 else dist = fixeddiv(x, cos(vang));

 if ((ang < 0.2 || ang > 0.8) && dist < range)
 {
  pitch = vectorangle(dist, getactorz(tid) - (getactorz(0) + 41.0));
  pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;

  x = HUDX/2 - ((HUDX/2) * sin(ang) / cos(ang));
  y = HUDY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

  hudmessage(s:text; 0, 1, CR_UNTRANSLATED, (x<<16)+offset, (y<<16)+offset, 0);
 }
 else
 hudmessage(s:" "; 0, 1, CR_UNTRANSLATED, 0, 0, 0);
}

// This Function will be used to check Spell Costs, all wrapped up in one place and easier to edit. :P
function int SpellCostCheck(int checktype)
{
 int SpellIsSelected, FinalSpellCost, GodlyAvatarPercentCost, SpellCostDeclineLevelsNeeded, LevelSpellCostReductionFactor, LvlSpellCostReducePercent, SecretSplCostReduceBonus, Check1, Check2;
 int OriginalSpellCost, StatManaCostReduction;

 // G1 = FinalSpellCost
 SpellIsSelected = checktype;

 // G4 = GodlyAvatarPercentCost
 if (SpellIsSelected == 53) // Divine Avatar Costs at most 90% of Mana Supply by Default
 {
  if (GameSkill() == SKILL_VERY_EASY) GodlyAvatarPercentCost = 70;
  else if (GameSkill() == SKILL_EASY) GodlyAvatarPercentCost = 80;
  else if (GameSkill() == SKILL_NORMAL) GodlyAvatarPercentCost = 85;
  else if (GameSkill() == SKILL_HARD) GodlyAvatarPercentCost = 90;
  else if (GameSkill() == SKILL_VERY_HARD) GodlyAvatarPercentCost = 100;

  FinalSpellCost = MaxMana * GodlyAvatarPercentCost / 100;
  OriginalSpellCost = MaxMana * GodlyAvatarPercentCost / 100;
 }
 else
 if (SpellIsSelected == 40) // Diamond Skin / Spreader Aura Lv. 1
 {
  if (CharacterClass == 2) // If Flora is in use, it'll be Spreader Aura Lv. 1
  {
   FinalSpellCost = 575;
   OriginalSpellCost = 575;
  }
  else // Otherwise, it's DiamondSkin and uses the usual costs
  {
   FinalSpellCost = SpellCosts[SpellIsSelected];
   OriginalSpellCost = SpellCosts[SpellIsSelected];
  }
 }
 else
 {
  FinalSpellCost = SpellCosts[SpellIsSelected];
  OriginalSpellCost = SpellCosts[SpellIsSelected];
 }
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [Original Base]");

 // More Coming
 // Determines the number of levels one has to reach at minimum to start seeing spell cost reductions on the specfic spells below.
/*
 if (CharacterClass == 2) // Flora has a different spell list order from the other two characters
 {
 // TODO
 }
 else
 {
 }
*/
  // SpellCostDeclineLevelsNeeded = Number of Levels needed to be gained before the spell begins to decline in cost at every level up
  if (SpellIsSelected == 0) SpellCostDeclineLevelsNeeded = 8; // (Minor Magic Missile) Level 0
  if (SpellIsSelected == 1) SpellCostDeclineLevelsNeeded = 8; // (Minor Healing) Level 0
  if (SpellIsSelected == 2) SpellCostDeclineLevelsNeeded = 9; // (Minor Night Vision) Level 1
  if (SpellIsSelected == 3) SpellCostDeclineLevelsNeeded = 9; // (Chill Touch) Level 1
  if (SpellIsSelected == 4) SpellCostDeclineLevelsNeeded = 10; // (Minor Invisibility) Level 2
  if (SpellIsSelected == 5) SpellCostDeclineLevelsNeeded = 10; // (Minor Flight) Level 2
  if (SpellIsSelected == 6) SpellCostDeclineLevelsNeeded = 11; // (Minor Poison Cloud) Level 3
  if (SpellIsSelected == 7) SpellCostDeclineLevelsNeeded = 12; // (Minor Fireball) Level 4
  if (SpellIsSelected == 8) SpellCostDeclineLevelsNeeded = 13; // (Enhanced Strength) Level 5
  if (SpellIsSelected == 9) SpellCostDeclineLevelsNeeded = 14; // (Minor Ice Blast) Level 6
  if (SpellIsSelected == 10) SpellCostDeclineLevelsNeeded = 15; // (Summon Weak Monster) Level 7
  if (SpellIsSelected == 11) SpellCostDeclineLevelsNeeded = 15; // (Magic Missile) Level 7
  if (SpellIsSelected == 12) SpellCostDeclineLevelsNeeded = 16; // (Fireball) Level 8
  if (SpellIsSelected == 13) SpellCostDeclineLevelsNeeded = 17; // (Explosive Glyph) Level 9
  if (SpellIsSelected == 14) SpellCostDeclineLevelsNeeded = 17; // (Healing) Level 9
  if (SpellIsSelected == 15) SpellCostDeclineLevelsNeeded = 18; // (Fireball Nova) Level 10
  if (SpellIsSelected == 16) SpellCostDeclineLevelsNeeded = 19; // (Minor Stealth) Level 11
  if (SpellIsSelected == 17) SpellCostDeclineLevelsNeeded = 19; // (Minor Invulnerability) Level 11
  if (SpellIsSelected == 18) SpellCostDeclineLevelsNeeded = 19; // (Invisibility) Level 11
  if (SpellIsSelected == 19) SpellCostDeclineLevelsNeeded = 20; // (Acid Rain) Level 12
  if (SpellIsSelected == 20) SpellCostDeclineLevelsNeeded = 20; // (Freezing Glyph) Level 12
  if (SpellIsSelected == 21) SpellCostDeclineLevelsNeeded = 21; // (Night-Vision) Level 13
  if (SpellIsSelected == 22) SpellCostDeclineLevelsNeeded = 21; // (Flight) Level 13
  if (SpellIsSelected == 23) SpellCostDeclineLevelsNeeded = 22; // (Major Magic Missile) Level 14
  if (SpellIsSelected == 24) SpellCostDeclineLevelsNeeded = 23; // (Summon Monster) Level 15
  if (SpellIsSelected == 25) SpellCostDeclineLevelsNeeded = 24; // (Icy Nova) Level 16
  if (SpellIsSelected == 26) SpellCostDeclineLevelsNeeded = 24; // (Poison Cloud) Level 16
  if (SpellIsSelected == 27) SpellCostDeclineLevelsNeeded = 25; // (Minor Lightning) Level 17
  if (SpellIsSelected == 28) SpellCostDeclineLevelsNeeded = 26; // (Stone Skin) Level 18
  if (SpellIsSelected == 29) SpellCostDeclineLevelsNeeded = 26; // (Major Healing) Level 18
  if (SpellIsSelected == 30) SpellCostDeclineLevelsNeeded = 27; // (Major Night-Vision) Level 19
  if (SpellIsSelected == 31) SpellCostDeclineLevelsNeeded = 28; // (Ice Blast) Level 20
  if (SpellIsSelected == 32) SpellCostDeclineLevelsNeeded = 28; // (Farsight) Level 20
  if (SpellIsSelected == 33) SpellCostDeclineLevelsNeeded = 28; // (Lightning Nova) Level 20
  if (SpellIsSelected == 34) SpellCostDeclineLevelsNeeded = 29; // (Stealth) Level 21
  if (SpellIsSelected == 35) SpellCostDeclineLevelsNeeded = 29; // (Invulnerability) Level 21
  if (SpellIsSelected == 36) SpellCostDeclineLevelsNeeded = 29; // (Major Invisibility) Level 21
  if (SpellIsSelected == 37) SpellCostDeclineLevelsNeeded = 29; // (Major Flight) Level 21
  if (SpellIsSelected == 38) SpellCostDeclineLevelsNeeded = 30; // (Lightning) Level 22
  if (SpellIsSelected == 39) SpellCostDeclineLevelsNeeded = 31; // (Summon Strong Monster) Level 23
  if (SpellIsSelected == 40) SpellCostDeclineLevelsNeeded = 32; // (Diamond Skin) [Deggaris/Illucia] or (Spreader Aura Lv. 1) [Flora] Level 24
  if (SpellIsSelected == 41) SpellCostDeclineLevelsNeeded = 33; // (Major Fireball) Level 25
  if (SpellIsSelected == 42) SpellCostDeclineLevelsNeeded = 33; // (Major Ice Blast) Level 25
  if (SpellIsSelected == 43) SpellCostDeclineLevelsNeeded = 33; // (Major Poison Cloud) Level 25
  if (SpellIsSelected == 44) SpellCostDeclineLevelsNeeded = 33; // (Major Lightning) Level 25
  if (SpellIsSelected == 45) SpellCostDeclineLevelsNeeded = 34; // (Major Invulnerability) Level 26
  if (SpellIsSelected == 46) SpellCostDeclineLevelsNeeded = 34; // (Major Stealth) Level 26 
  if (SpellIsSelected == 47) SpellCostDeclineLevelsNeeded = 35; // (Raging Spirits) Level 27
  if (SpellIsSelected == 48) SpellCostDeclineLevelsNeeded = 36; // (Summon Arch-Vile) Level 28
  if (SpellIsSelected == 49) SpellCostDeclineLevelsNeeded = 37; // (Ultra Magic Missile) Level 29
  if (SpellIsSelected == 50) SpellCostDeclineLevelsNeeded = 38; // (Time Freezer) Level 30
  if (SpellIsSelected == 51) SpellCostDeclineLevelsNeeded = 38; // (Terrorization Aura) Level 30
  if (SpellIsSelected == 52) SpellCostDeclineLevelsNeeded = 38; // (Create Lotso Ammo) Level 30
  if (SpellIsSelected == 53) SpellCostDeclineLevelsNeeded = 39; // (Divine Avatar) Level 31
  if (SpellIsSelected == 54) SpellCostDeclineLevelsNeeded = 39; // (Summon Cyberdemon) Level 31
  if (SpellIsSelected == 55) SpellCostDeclineLevelsNeeded = 39; // (Spreader Aura Lv. 2) Level 56 [Flora Only]

  // Base Spell Cost Reduction Factor [level-based] 
  LevelSpellCostReductionFactor = PlayerLevel - SpellCostDeclineLevelsNeeded;
  if (LevelSpellCostReductionFactor < 0) LevelSpellCostReductionFactor = 0;

  LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 2 / 15; // This is for any class that is not one of the below otherwise ignore this line
  if (CharacterClass == 0) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 1 / 9; // 11.1% [Deggaris]
  else if (CharacterClass == 1) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 1 / 6; // 16.67% [Illucia]
  else if (CharacterClass == 2) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 2 / 9; // 22.2% [Flora]

  LvlSpellCostReducePercent = 100;
  LvlSpellCostReducePercent -= LevelSpellCostReductionFactor;
  FinalSpellCost = FinalSpellCost * LvlSpellCostReducePercent / 100;
  if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [LevelCostReduce]");

  if (SpellIsSelected == 50) // Time Freezer Costs at least 25% of Mana Supply by Default (Deggaris and Illucia Only)
  {
   LevelSpellCostReductionFactor = MaxMana / 4;
   FinalSpellCost += LevelSpellCostReductionFactor;
  if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [TimeFreezerCheck]");
  }

  // Z1 = SecretSplCostReduceBonus
  // Secret Tally Affects Mana Consumption
  SecretSplCostReduceBonus = 0;
  SecretSplCostReduceBonus += SecretsFound[1];
  SecretSplCostReduceBonus += SecretsFound[2];
  SecretSplCostReduceBonus += SecretsFound[3];
  SecretSplCostReduceBonus += SecretsFound[4];
  SecretSplCostReduceBonus += SecretsFound[5];
  SecretSplCostReduceBonus += SecretsFound[6];
  SecretSplCostReduceBonus += SecretsFound[7];
  SecretSplCostReduceBonus += SecretsFound[8];
  SecretSplCostReduceBonus += SecretsFound[9];
  SecretSplCostReduceBonus += SecretsFound[10];
  SecretSplCostReduceBonus += SecretsFound[11];
  SecretSplCostReduceBonus += SecretsFound[12];
  SecretSplCostReduceBonus += SecretsFound[13];
  SecretSplCostReduceBonus += SecretsFound[14];
  SecretSplCostReduceBonus += SecretsFound[15];
  SecretSplCostReduceBonus += SecretsFound[16];
  SecretSplCostReduceBonus += SecretsFound[17];
  SecretSplCostReduceBonus += SecretsFound[18];
  SecretSplCostReduceBonus += SecretsFound[19];
  SecretSplCostReduceBonus += SecretsFound[20];
  SecretSplCostReduceBonus += SecretsFound[21];
  SecretSplCostReduceBonus += SecretsFound[22];
  SecretSplCostReduceBonus += SecretsFound[23];
  SecretSplCostReduceBonus += SecretsFound[24];
  SecretSplCostReduceBonus += SecretsFound[25];
  SecretSplCostReduceBonus += SecretsFound[26];
  SecretSplCostReduceBonus += SecretsFound[27];
  SecretSplCostReduceBonus += SecretsFound[28];
  SecretSplCostReduceBonus += SecretsFound[29];
  SecretSplCostReduceBonus += SecretsFound[30];
  SecretSplCostReduceBonus += SecretsFound[31];
  SecretSplCostReduceBonus += SecretsFound[32];
  SecretSplCostReduceBonus += SecretsFound[33];
  SecretSplCostReduceBonus += SecretsFound[34];
  SecretSplCostReduceBonus += SecretsFound[35];
  SecretSplCostReduceBonus += SecretsFound[36];
  if (GameSkill() == SKILL_VERY_EASY) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 7 / 30; // 23.33% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_EASY)  SecretSplCostReduceBonus = SecretSplCostReduceBonus * 3 / 15; // 20% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_NORMAL) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 1 / 6; // 16.67% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_HARD) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 2 / 15; // 13.34% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_VERY_HARD) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 3 / 30; // 10% of the total secrets found accumulate to the percentage
  SecretSplCostReduceBonus *= -1; // Inverts the number to a "cost"
  SecretSplCostReduceBonus += 100; // Then adds 100 to it for the actual percentage factor

  if (SecretSplCostReduceBonus > 100) SecretSplCostReduceBonus = 100;
  if (CharacterClass == 2)
  {
   if (SecretSplCostReduceBonus < 50) SecretSplCostReduceBonus = 50; // Flora
  }
  else
  {
   if (SecretSplCostReduceBonus < 63) SecretSplCostReduceBonus = 63; // Deggaris/Illucia
  }
  FinalSpellCost = FinalSpellCost * SecretSplCostReduceBonus / 100;
  if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [CostReduceBonus]");
 

 // Check for having The Ring in you inventory
 if (CheckActorInventory(1001,"TheOneRing") > 0)
 {  
  if (CharacterClass == 2) FinalSpellCost = FinalSpellCost * 13 / 16; // 81.25% MP Cost (Flora is the only one who doesn't have her MP Costs increased by the One Ring)
  else FinalSpellCost = FinalSpellCost * 5 / 4; // 125% MP Cost (Deggaris and Illucia)
  if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [Ring]");
 } 
 
 int SpellCostMinimum;

 if (CharacterClass == 2)
 {
  Check1 = 0; // Check1 is an exact value
  Check2 = 100; // Check2 is a % value
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { Check1 += 10; Check2 -= 10; } // Evenstar Necklace [MP reduction of 10 + 10%]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { Check1 += 2; Check2 -= 2; } // Anubis Cufflinks [MP reduction of 2 + 2%]
  if (CheckActorInventory(1001,"BalrogRing") > 0) { Check1 += 5; Check2 -= 5; } // Balrog's Ring [MP reduction of 5 + 5%]

  FinalSpellCost -= Check1;
  FinalSpellCost = FinalSpellCost * Check2 / 100;

  // Ruinous Shield = +34% MP Consumption
  if (CheckActorInventory(1001,"RuinousShield") > 0) FinalSpellCost = FinalSpellCost * 134 / 100;
  if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [FloraArmors]");
 }

 if (FinalSpellCost > MaxMana) FinalSpellCost = MaxMana;
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [MaxManaClamp]");

 if (GameSkill() == SKILL_VERY_EASY) SpellCostMinimum = OriginalSpellCost * 33 / 100;
 if (GameSkill() == SKILL_EASY) SpellCostMinimum =  OriginalSpellCost * 38 / 100;
 if (GameSkill() == SKILL_NORMAL) SpellCostMinimum =  OriginalSpellCost * 43 / 100;
 if (GameSkill() == SKILL_HARD) SpellCostMinimum =  OriginalSpellCost * 49 / 100;
 if (GameSkill() == SKILL_VERY_HARD) SpellCostMinimum = OriginalSpellCost * 55 / 100;

 // Clamp Minimum Mana Cost
 if (FinalSpellCost < SpellCostMinimum) FinalSpellCost = SpellCostMinimum;
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [CostMinimumClamp]");

 // ((Sorcery + Therapeusis) / 2) = -0.1% Final Mana Cost [circumvents Clamp]
 StatManaCostReduction = 100 - ((MiscellaneousVars[34] + MiscellaneousVars[36]) / 20);
 if (StatManaCostReduction < 50) StatManaCostReduction = 50;
 FinalSpellCost = FinalSpellCost * StatManaCostReduction / 100;
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [SorcTherChecks]");

 // Checks Mana Cost Rate Menu Option [circumvents Clamp]
 FinalSpellCost = FinalSpellCost * MiscellaneousVars[145] / 100;
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [CostRateOption]");

 if (FinalSpellCost < 1) FinalSpellCost = 1;
 if (FinalSpellCost > MaxMana) FinalSpellCost = MaxMana;
 if (GetCVar("dvdsdebug_showspellcoststuff") == 1) PrintBold(s:"FinalSpellCost: ",d:FinalSpellCost,s:" [FinalClamps]");

 return FinalSpellCost;
}

//*******************
//*******************
//******SCRIPTS******
//*******************
//*******************

script "BuffTimer" (int type, int buffid, int time)
{
 if (type == 0) // List
 {
  Print(s:"
           0 = Night Vision\n
           1 = Invisibility\n
           2 = Flight\n
           3 = Stealth\n
           4 = Invulnerability\n
           5 = Time Freeze\n
           6 = Fear Aura\n
           7 = Divine Avatar\n
           8 = Spreader Aura Lv. 1\n
           9 = Spreader Aura Lv. 2\n
          10 = Oomph\n
          11 = Buff\n
          12 = Acceleratle\n
          13 = Blunt\n
          14 = Sap\n
          15 = Deceleratle\n
          16 = Poison\n
          17 = Corrosion\n
          18 = Fatigue\n
          19 = Blind\n
          20 = Sleep\n
          21 = Silence\n
          22 = BioShield\n
          23 = Berserk\n
          \n
          129 = ??????\n
        ");
 }
 if (type == 1) // Set timer
 {
  PowerupTimer[buffid] = time * 35;
 }
 if (type == 2) // Add/Subtract timer
 {
  PowerupTimer[buffid] += (time * 35);
 }
 if (PowerupTimer[buffid] < 0) PowerupTimer[buffid] = 0;
 if (PowerupTimer[buffid] > 999999) PowerupTimer[buffid] = 999999;
}

script "StatCheck" (void)
{
// PrintBold(f:MiscellaneousVars[204],s:" / ",f:MiscellaneousVars[205],s:" / ",f:MiscellaneousVars[206]);
}

// Prints out or edits a fixed number for "MiscFixedVars[#]" vars.
script "MFV" (int index, int type, int value)
{
 int oldvalue = 0.0;
 int newvalue = 0.0;

 int printidx0, printidx1, printidx2, printidx3, printidx4, printidx5, printidx6, printidx7, printidx8, printidx9;
 int printidx10, printidx11, printidx12, printidx13, printidx14, printidx15, printidx16, printidx17, printidx18, printidx19;
 int printidx20, printidx21, printidx22, printidx23, printidx24, printidx25, printidx26, printidx27, printidx28, printidx29;
 int printidx30, printidx31, printidx32, printidx33, printidx34, printidx35, printidx36, printidx37, printidx38, printidx39;

 if (index >= 0)
 {
  value *= 1.0;
  oldvalue = MiscFixedVars[index];
  if (type == 1) MiscFixedVars[index] += value; // adds to the value
  if (type == 2) MiscFixedVars[index] = value; // sets the value
  newvalue = MiscFixedVars[index];
  if (type == 0)
  {
   PrintBold(s:"Index: ",d:index,
             s:"\nValue: ",f:newvalue);
  }
  else
  {
   PrintBold(s:"Index: ",d:index,
             s:"\nOldValue: ",f:oldvalue,
             s:"\nNewValue: ",f:newvalue);
  }
 }
}

// Prints out or changes the number for the "MiscellaneousVars[#]" vars.
script "DMV" (int index, int type, int value)
{
 int oldvalue;
 int newvalue;

 int printidx0, printidx1, printidx2, printidx3, printidx4, printidx5, printidx6, printidx7, printidx8, printidx9;
 int printidx10, printidx11, printidx12, printidx13, printidx14, printidx15, printidx16, printidx17, printidx18, printidx19;
 int printidx20, printidx21, printidx22, printidx23, printidx24, printidx25, printidx26, printidx27, printidx28, printidx29;
 int printidx30, printidx31, printidx32, printidx33, printidx34, printidx35, printidx36, printidx37, printidx38, printidx39;

 if (index >= 0)
 {
  oldvalue = MiscellaneousVars[index];
  if (type == 1) MiscellaneousVars[index] += value; // adds to the value
  if (type == 2) MiscellaneousVars[index] = value; // sets the value
  newvalue = MiscellaneousVars[index];
  if (type == 0)
  {
   PrintBold(s:"Index: ",d:index,
             s:"\nValue: ",d:newvalue);
  }
  else
  {
   PrintBold(s:"Index: ",d:index,
             s:"\nOldValue: ",d:oldvalue,
             s:"\nNewValue: ",d:newvalue);
  }
 }
 else
 {
  // Prints the entire list [although you'll need to read into the console to see all the values, as it only shows 40 at a time, and only the last forty will show on your screen :P]
  printidx0 = 0; printidx1 = 1; printidx2 = 2; printidx3 = 3; printidx4 = 4; printidx5 = 5; printidx6 = 6; printidx7 = 7; printidx8 = 8; printidx9 = 9;
  printidx10 = 10; printidx11 = 11; printidx12 = 12; printidx13 = 13; printidx14 = 14; printidx15 = 15; printidx16 = 16; printidx17 = 17; printidx18 = 18; printidx19 = 19;
  printidx20 = 20; printidx21 = 21; printidx22 = 22; printidx23 = 23; printidx24 = 24; printidx25 = 25; printidx26 = 26; printidx27 = 27; printidx28 = 28; printidx29 = 29;
  printidx30 = 30; printidx31 = 31; printidx32 = 32; printidx33 = 33; printidx34 = 34; printidx35 = 35; printidx36 = 36; printidx37 = 37; printidx38 = 38; printidx39 = 39;
  // 0 - 39
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

  // 40 - 79
  printidx0 += 40; printidx1 += 40; printidx2 += 40; printidx3 += 40; printidx4 += 40; printidx5 += 40; printidx6 += 40; printidx7 += 40; printidx8 += 40; printidx9 += 40;
  printidx10 += 40; printidx11 += 40; printidx12 += 40; printidx13 += 40; printidx14 += 40; printidx15 += 40; printidx16 += 40; printidx17 += 40; printidx18 += 40; printidx19 += 40;
  printidx20 += 40; printidx21 += 40; printidx22 += 40; printidx23 += 40; printidx24 += 40; printidx25 += 40; printidx26 += 40; printidx27 += 40; printidx28 += 40; printidx29 += 40;
  printidx30 += 40; printidx31 += 40; printidx32 += 40; printidx33 += 40; printidx34 += 40; printidx35 += 40; printidx36 += 40; printidx37 += 40; printidx38 += 40; printidx39 += 40;
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

  // 80 - 119
  printidx0 += 40; printidx1 += 40; printidx2 += 40; printidx3 += 40; printidx4 += 40; printidx5 += 40; printidx6 += 40; printidx7 += 40; printidx8 += 40; printidx9 += 40;
  printidx10 += 40; printidx11 += 40; printidx12 += 40; printidx13 += 40; printidx14 += 40; printidx15 += 40; printidx16 += 40; printidx17 += 40; printidx18 += 40; printidx19 += 40;
  printidx20 += 40; printidx21 += 40; printidx22 += 40; printidx23 += 40; printidx24 += 40; printidx25 += 40; printidx26 += 40; printidx27 += 40; printidx28 += 40; printidx29 += 40;
  printidx30 += 40; printidx31 += 40; printidx32 += 40; printidx33 += 40; printidx34 += 40; printidx35 += 40; printidx36 += 40; printidx37 += 40; printidx38 += 40; printidx39 += 40;
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

  // 120 - 159
  printidx0 += 40; printidx1 += 40; printidx2 += 40; printidx3 += 40; printidx4 += 40; printidx5 += 40; printidx6 += 40; printidx7 += 40; printidx8 += 40; printidx9 += 40;
  printidx10 += 40; printidx11 += 40; printidx12 += 40; printidx13 += 40; printidx14 += 40; printidx15 += 40; printidx16 += 40; printidx17 += 40; printidx18 += 40; printidx19 += 40;
  printidx20 += 40; printidx21 += 40; printidx22 += 40; printidx23 += 40; printidx24 += 40; printidx25 += 40; printidx26 += 40; printidx27 += 40; printidx28 += 40; printidx29 += 40;
  printidx30 += 40; printidx31 += 40; printidx32 += 40; printidx33 += 40; printidx34 += 40; printidx35 += 40; printidx36 += 40; printidx37 += 40; printidx38 += 40; printidx39 += 40;
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

  // 160 - 199
  printidx0 += 40; printidx1 += 40; printidx2 += 40; printidx3 += 40; printidx4 += 40; printidx5 += 40; printidx6 += 40; printidx7 += 40; printidx8 += 40; printidx9 += 40;
  printidx10 += 40; printidx11 += 40; printidx12 += 40; printidx13 += 40; printidx14 += 40; printidx15 += 40; printidx16 += 40; printidx17 += 40; printidx18 += 40; printidx19 += 40;
  printidx20 += 40; printidx21 += 40; printidx22 += 40; printidx23 += 40; printidx24 += 40; printidx25 += 40; printidx26 += 40; printidx27 += 40; printidx28 += 40; printidx29 += 40;
  printidx30 += 40; printidx31 += 40; printidx32 += 40; printidx33 += 40; printidx34 += 40; printidx35 += 40; printidx36 += 40; printidx37 += 40; printidx38 += 40; printidx39 += 40;
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

  // 200 - 239
  printidx0 += 40; printidx1 += 40; printidx2 += 40; printidx3 += 40; printidx4 += 40; printidx5 += 40; printidx6 += 40; printidx7 += 40; printidx8 += 40; printidx9 += 40;
  printidx10 += 40; printidx11 += 40; printidx12 += 40; printidx13 += 40; printidx14 += 40; printidx15 += 40; printidx16 += 40; printidx17 += 40; printidx18 += 40; printidx19 += 40;
  printidx20 += 40; printidx21 += 40; printidx22 += 40; printidx23 += 40; printidx24 += 40; printidx25 += 40; printidx26 += 40; printidx27 += 40; printidx28 += 40; printidx29 += 40;
  printidx30 += 40; printidx31 += 40; printidx32 += 40; printidx33 += 40; printidx34 += 40; printidx35 += 40; printidx36 += 40; printidx37 += 40; printidx38 += 40; printidx39 += 40;
  PrintBold(
              s:"\cf Index[\cn",d:printidx0,s:"\cf]: \cd",d:MiscellaneousVars[printidx0],s:"\cf     Index[\cn",d:printidx20,s:"\cf]: \cd",d:MiscellaneousVars[printidx20],
            s:"\n\cf Index[\cn",d:printidx1,s:"\cf]: \cd",d:MiscellaneousVars[printidx1],s:"\cf     Index[\cn",d:printidx21,s:"\cf]: \cd",d:MiscellaneousVars[printidx21],
            s:"\n\cf Index[\cn",d:printidx2,s:"\cf]: \cd",d:MiscellaneousVars[printidx2],s:"\cf     Index[\cn",d:printidx22,s:"\cf]: \cd",d:MiscellaneousVars[printidx22],
            s:"\n\cf Index[\cn",d:printidx3,s:"\cf]: \cd",d:MiscellaneousVars[printidx3],s:"\cf     Index[\cn",d:printidx23,s:"\cf]: \cd",d:MiscellaneousVars[printidx23],
            s:"\n\cf Index[\cn",d:printidx4,s:"\cf]: \cd",d:MiscellaneousVars[printidx4],s:"\cf     Index[\cn",d:printidx24,s:"\cf]: \cd",d:MiscellaneousVars[printidx24],
            s:"\n\cf Index[\cn",d:printidx5,s:"\cf]: \cd",d:MiscellaneousVars[printidx5],s:"\cf     Index[\cn",d:printidx25,s:"\cf]: \cd",d:MiscellaneousVars[printidx25],
            s:"\n\cf Index[\cn",d:printidx6,s:"\cf]: \cd",d:MiscellaneousVars[printidx6],s:"\cf     Index[\cn",d:printidx26,s:"\cf]: \cd",d:MiscellaneousVars[printidx26],
            s:"\n\cf Index[\cn",d:printidx7,s:"\cf]: \cd",d:MiscellaneousVars[printidx7],s:"\cf     Index[\cn",d:printidx27,s:"\cf]: \cd",d:MiscellaneousVars[printidx27],
            s:"\n\cf Index[\cn",d:printidx8,s:"\cf]: \cd",d:MiscellaneousVars[printidx8],s:"\cf     Index[\cn",d:printidx28,s:"\cf]: \cd",d:MiscellaneousVars[printidx28],
            s:"\n\cf Index[\cn",d:printidx9,s:"\cf]: \cd",d:MiscellaneousVars[printidx9],s:"\cf     Index[\cn",d:printidx29,s:"\cf]: \cd",d:MiscellaneousVars[printidx29],
            s:"\n\cf Index[\cn",d:printidx10,s:"\cf]: \cd",d:MiscellaneousVars[printidx10],s:"\cf     Index[\cn",d:printidx30,s:"\cf]: \cd",d:MiscellaneousVars[printidx30],
            s:"\n\cf Index[\cn",d:printidx11,s:"\cf]: \cd",d:MiscellaneousVars[printidx11],s:"\cf     Index[\cn",d:printidx31,s:"\cf]: \cd",d:MiscellaneousVars[printidx31],
            s:"\n\cf Index[\cn",d:printidx12,s:"\cf]: \cd",d:MiscellaneousVars[printidx12],s:"\cf     Index[\cn",d:printidx32,s:"\cf]: \cd",d:MiscellaneousVars[printidx32],
            s:"\n\cf Index[\cn",d:printidx13,s:"\cf]: \cd",d:MiscellaneousVars[printidx13],s:"\cf     Index[\cn",d:printidx33,s:"\cf]: \cd",d:MiscellaneousVars[printidx33],
            s:"\n\cf Index[\cn",d:printidx14,s:"\cf]: \cd",d:MiscellaneousVars[printidx14],s:"\cf     Index[\cn",d:printidx34,s:"\cf]: \cd",d:MiscellaneousVars[printidx34],
            s:"\n\cf Index[\cn",d:printidx15,s:"\cf]: \cd",d:MiscellaneousVars[printidx15],s:"\cf     Index[\cn",d:printidx35,s:"\cf]: \cd",d:MiscellaneousVars[printidx35],
            s:"\n\cf Index[\cn",d:printidx16,s:"\cf]: \cd",d:MiscellaneousVars[printidx16],s:"\cf     Index[\cn",d:printidx36,s:"\cf]: \cd",d:MiscellaneousVars[printidx36],
            s:"\n\cf Index[\cn",d:printidx17,s:"\cf]: \cd",d:MiscellaneousVars[printidx17],s:"\cf     Index[\cn",d:printidx37,s:"\cf]: \cd",d:MiscellaneousVars[printidx37],
            s:"\n\cf Index[\cn",d:printidx18,s:"\cf]: \cd",d:MiscellaneousVars[printidx18],s:"\cf     Index[\cn",d:printidx38,s:"\cf]: \cd",d:MiscellaneousVars[printidx38],
            s:"\n\cf Index[\cn",d:printidx19,s:"\cf]: \cd",d:MiscellaneousVars[printidx19],s:"\cf     Index[\cn",d:printidx39,s:"\cf]: \cd",d:MiscellaneousVars[printidx39]
           );

/*
  PrintBold(
            s:"\cf Index[\cn0\cf]: \cd",d:MiscellaneousVars[0],s:"\cf     Index[\cn20\cf]: \cd",d:MiscellaneousVars[20],
            s:"\n\cf Index[\cn1\cf]: \cd",d:MiscellaneousVars[1],s:"\cf     Index[\cn21\cf]: \cd",d:MiscellaneousVars[21],
            s:"\n\cf Index[\cn2\cf]: \cd",d:MiscellaneousVars[2],s:"\cf     Index[\cn22\cf]: \cd",d:MiscellaneousVars[22],
            s:"\n\cf Index[\cn3\cf]: \cd",d:MiscellaneousVars[3],s:"\cf     Index[\cn23\cf]: \cd",d:MiscellaneousVars[23],
            s:"\n\cf Index[\cn4\cf]: \cd",d:MiscellaneousVars[4],s:"\cf     Index[\cn24\cf]: \cd",d:MiscellaneousVars[24],
            s:"\n\cf Index[\cn5\cf]: \cd",d:MiscellaneousVars[5],s:"\cf     Index[\cn25\cf]: \cd",d:MiscellaneousVars[25],
            s:"\n\cf Index[\cn6\cf]: \cd",d:MiscellaneousVars[6],s:"\cf     Index[\cn26\cf]: \cd",d:MiscellaneousVars[26],
            s:"\n\cf Index[\cn7\cf]: \cd",d:MiscellaneousVars[7],s:"\cf     Index[\cn27\cf]: \cd",d:MiscellaneousVars[27],
            s:"\n\cf Index[\cn8\cf]: \cd",d:MiscellaneousVars[8],s:"\cf     Index[\cn28\cf]: \cd",d:MiscellaneousVars[28],
            s:"\n\cf Index[\cn9\cf]: \cd",d:MiscellaneousVars[9],s:"\cf     Index[\cn29\cf]: \cd",d:MiscellaneousVars[29],
            s:"\n\cf Index[\cn10\cf]: \cd",d:MiscellaneousVars[10],s:"\cf     Index[\cn30\cf]: \cd",d:MiscellaneousVars[30],
            s:"\n\cf Index[\cn11\cf]: \cd",d:MiscellaneousVars[11],s:"\cf     Index[\cn31\cf]: \cd",d:MiscellaneousVars[31],
            s:"\n\cf Index[\cn12\cf]: \cd",d:MiscellaneousVars[12],s:"\cf     Index[\cn32\cf]: \cd",d:MiscellaneousVars[32],
            s:"\n\cf Index[\cn13\cf]: \cd",d:MiscellaneousVars[13],s:"\cf     Index[\cn33\cf]: \cd",d:MiscellaneousVars[33],
            s:"\n\cf Index[\cn14\cf]: \cd",d:MiscellaneousVars[14],s:"\cf     Index[\cn34\cf]: \cd",d:MiscellaneousVars[34],
            s:"\n\cf Index[\cn15\cf]: \cd",d:MiscellaneousVars[15],s:"\cf     Index[\cn35\cf]: \cd",d:MiscellaneousVars[35],
            s:"\n\cf Index[\cn16\cf]: \cd",d:MiscellaneousVars[16],s:"\cf     Index[\cn36\cf]: \cd",d:MiscellaneousVars[36],
            s:"\n\cf Index[\cn17\cf]: \cd",d:MiscellaneousVars[17],s:"\cf     Index[\cn37\cf]: \cd",d:MiscellaneousVars[37],
            s:"\n\cf Index[\cn18\cf]: \cd",d:MiscellaneousVars[18],s:"\cf     Index[\cn38\cf]: \cd",d:MiscellaneousVars[38],
            s:"\n\cf Index[\cn19\cf]: \cd",d:MiscellaneousVars[19],s:"\cf     Index[\cn39\cf]: \cd",d:MiscellaneousVars[39]
           );
*/

 }
}

//**********************
//***Numbered Scripts***
//**********************

// {-1-} Exp Table Setup

script "Initializer" OPEN
{
 int C1, I1, C2, I2, C3, I3;
 
 if (MiscellaneousVars[199] == 0) // Only on the very first tic of a new game, and never on loading of new maps past the first map.
 {
  Thing_ChangeTID(0,1001);
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1200) { ModType = 2; } // DVII-DS "MAP00" (Set To Deus Vult II)
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1100) { ModType = 1; } // DVI-DS "MAP00" // Set To Deus Vult I
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1030) { ModType = 0; ClassicDoomType = 4; } // "MAPAA" // Set To Strife Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1020) { ModType = 0; ClassicDoomType = 3; } // "MAP0A" // Set To Hexen Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1010) { ModType = 0; ClassicDoomType = 2; } // "E1MA" // Set To Heretic Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1000) { ModType = 0; ClassicDoomType = 1; } // "E1M0" // Set To Classic Doom 1 Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1050) { ModType = 0; ClassicDoomType = 0; } // "MAP00" // Set To Classic Doom 2 Mode
  else { ModType = 0; ClassicDoomType = 0; } // Set to Normal Doom 1/2 mode
  // PrintBold(d:ModType);
  LevelCap = 200; // KEEP AT THE MAXIMUM AMOUNT FOR LEVELS OVERALL [even if not all characters normally can reach said level]
  SpellIDLimit = 55;
  MaxHealthTrue = 100; // Sets to default Max of 100 to start
  MiscellaneousVars[21] = 10000; // Current Stamina Points
  MiscellaneousVars[22] = 10000; // Maximum Stamina Points

  if (GameSkill() == SKILL_VERY_EASY)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 30);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 500);
    SetAmmoCapacity("Shell", 125);
    SetAmmoCapacity("RocketAmmo", 125);
    SetAmmoCapacity("Cell", 750);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_EASY)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 27);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 400);
    SetAmmoCapacity("Shell", 100);
    SetAmmoCapacity("RocketAmmo", 100);
    SetAmmoCapacity("Cell", 600);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_NORMAL)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 24);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 300);
    SetAmmoCapacity("Shell", 75);
    SetAmmoCapacity("RocketAmmo", 75);
    SetAmmoCapacity("Cell", 450);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_HARD)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 21);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 200);
    SetAmmoCapacity("Shell", 50);
    SetAmmoCapacity("RocketAmmo", 50);
    SetAmmoCapacity("Cell", 300);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_VERY_HARD)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 18);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 100);
    SetAmmoCapacity("Shell", 25);
    SetAmmoCapacity("RocketAmmo", 25);
    SetAmmoCapacity("Cell", 150);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  // Starting Armor

  MiscellaneousVars[197] = GetCVAR("dvds_aeonstartlvl"); // MiscellaneousVars[197] = 32;
  if (MiscellaneousVars[197] < 0) MiscellaneousVars[197] = 0;
  if (MiscellaneousVars[197] > 200) MiscellaneousVars[197] = 200;
  MiscellaneousVars[7] = 5120; // Set this for the maximum range of the randomizer for Fygg drops.
  MiscellaneousVars[6] = random(1,MiscellaneousVars[7]);
  MiscellaneousVars[199] = 1; // Very-First-Run
  if (GameSkill() == SKILL_VERY_EASY)
  {
   SpecialGameFlags[1002] = 111375; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1400; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1400; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1400; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_EASY)
  {
   SpecialGameFlags[1002] = 141750; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1600; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1600; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1600; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_NORMAL)
  {
   SpecialGameFlags[1002] = 162000; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1800; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1800; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1800; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_HARD)
  {
   SpecialGameFlags[1002] = 182250; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 2000; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 2000; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 2000; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_VERY_HARD)
  {
   SpecialGameFlags[1002] = 212625; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 2400; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 2400; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 2400; // Flora's Level 1 (Base) EXP Requirement
  }
  SpecialGameFlags[1001] = SpecialGameFlags[1002];
  MaxMana += random(10,20) + C2; // 5-25 MP
  CurrentMana = MaxMana;

 }

 // Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
 for (C1 = 0; C1 < 201; C1++)
 {
  if (C1 == 0) // Level 0 to Level 1 just use the Base Requirement
  {
   ExpTable[C1] = I1 + BaseEXPRequirement;
                 I1 += BaseEXPRequirement;
  }
  else // Level 1+ will use the actual formula :P
  {
   ExpTable[C1] = I1 + ( ( BaseEXPRequirement * (C1 + 1) ) * ( ( (C1 * 3) + 1000) ) / 1000 ) + ( BaseEXPRequirement / 96 );
                 I1 += ( ( BaseEXPRequirement * (C1 + 1) ) * ( ( (C1 * 3) + 1000) ) / 1000 ) + ( BaseEXPRequirement / 96 );
  }
  //PrintBold(d:C1,s:" - ",d:ExpTable[C1]);
 }
 ExpTable[200] = 2147483646;
 ExpTable[201] = 2147483647;

 MiscellaneousVars[1] = 0; // Resets Armor Bitfield Checker to 0
 MiscellaneousVars[2] = 0; // Resets Level Checker to 0
 MiscellaneousVars[3] = 0; // Resets Sceptre Level Checker to 0
 MiscellaneousVars[41] = 0; // Resets Agility Checker to 0
 MiscellaneousVars[42] = 0; // Resets Defense Checker to 0
 MiscellaneousVars[43] = 0; // Resets Deftness Checker to 0
 MiscellaneousVars[44] = 0; // Resets Sorcery Checker to 0
 MiscellaneousVars[45] = 0; // Resets Strength Checker to 0
 MiscellaneousVars[46] = 0; // Resets Therapeusis Checker to 0
 MiscellaneousVars[113] = 0; // Resets Imp Claw Checker to 0
 MiscellaneousVars[114] = 0; // Resets Dark Imp Claw Checker to 0
 MiscellaneousVars[115] = 0; // Resets Cacodemon Eye Checker to 0
 MiscellaneousVars[116] = 0; // Resets Cacolantern Eye Checker to 0
 MiscellaneousVars[117] = 0; // Resets Abaddon Eye Checker to 0
 MiscellaneousVars[118] = 0; // Resets Knight Fist Checker to 0
 MiscellaneousVars[119] = 0; // Resets Baron Fist Checker to 0
 MiscellaneousVars[120] = 0; // Resets Belphegor Fist Checker to 0
 MiscellaneousVars[121] = 0; // Resets Bruiser Fist Checker to 0
 MiscellaneousVars[122] = 0; // Resets Archon Fist Checker to 0
 MiscellaneousVars[123] = 0; // Resets Pyro Fist Checker to 0
 MiscellaneousVars[124] = 0; // Resets Incarnate Skull Checker to 0
 MiscellaneousVars[125] = 0; // Resets Archvile Hand Checker to 0
 MiscellaneousVars[126] = 0; // Resets Diabloist Checker to 0
 MiscellaneousVars[127] = 0; // Resets Flying Balrog Checker to 0
 MiscellaneousVars[128] = 0; // Resets Elemental's Eye Checker to 0
 MiscellaneousVars[129] = 0; // Resets Overlord's Eye Checker to 0

 // PrintBold(d:CurrentArmorClass);
}

// {-2-} HUD Display

script "HUDDisplay" ENTER
{
 int C1, C2, I1, I2, Z1, Z2, G1, G2, G3, G4, G5, G6, G7, G8, G9, G10, G11, HealMin, HealMax, HealSorcRatio;
 str S1;
 int MaxHealthLimit = MaxHealthTrue * 2;
 int xpos;
 int ypos = 32.0;
 int msgdelay;
 int msgalpha;
 int MultiUpper, MultiLower;
 int ScreenXOffset;
 
 int EXPGainChecker = 1;
 if (ModType == 0 && GetCVar("dvds_noexpgains") != 0) EXPGainChecker = 0; // If in Classic mode and the EXP Gain option is turned off, don't show EXP stuff on HUD.

 if (MiscellaneousVars[199] > 0 && CheckActorInventory(1001,"PlayerDeathFadeOut") < 1 && GetCVAR("dvds_showacshudelements") == 1)
 { 

                                    // *************************
  if (MiscellaneousVars[2000] == 0) // ** OLD STYLE HUD IS ON **
                                    // *************************
  {
   SetHudSize(640,480,0);

   // Mana Bar
   if (GetCVar("dvdsoldhud_showmanabar") > 0)
   {
    if (EXPGainChecker == 1) ypos = 32.0; else ypos = 24.0;
    G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
    G9 = 100 / G10;
    I1 = CurrentMana * G9 / MaxMana;
    if (I1 > G9) I1 = G9;
    if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
    for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
    {
     if (MaxMana != 0)
     {
       if (C1 <= I1)
       {
        if (G10 == 4) { SetFont("MANAHF4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("MANAHF2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("MANAHF"); G11 = 0.0; }
       }
       else
       {
        if (G10 == 4) { SetFont("OLDHEMP4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("OLDHEMP2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("OLDHEMP1"); G11 = 0.0; }
       }
       I2 = ((C1 << 16) * G10) + G11;
       HudMessage(s:"A";HUDMSG_PLAIN,C1+3200,cr_untranslated,1.0+I2,ypos,0.036);
     }
    }
   }

   if (GetCVar("dvdsoldhud_showexpbar") > 0)
   {
    if (EXPGainChecker == 1)
    {
     // EXP Bar
     G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
     G9 = 100 / G10;
     Z1 = Experience - ExpTable[PlayerLevel - 1];
     Z2 = ExpTable[PlayerLevel] - ExpTable[PlayerLevel - 1];
     I1 = Z1 * G9 / Z2;     
     if (I1 > G9) I1 = G9;
     if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
     for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
     {
       if (Z2 != 0)
       {
        if ((C1 <= I1) || (PlayerLevel == LevelCap))
        {
         if (G10 == 4) { SetFont("EXPHF4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("EXPHF2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("EXPHF"); G11 = 0.0; }
        }
        else
        {
         if (G10 == 4) { SetFont("OLDHEMP4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("OLDHEMP2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("OLDHEMP1"); G11 = 0.0; }
        }
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_PLAIN,C1+3302,cr_untranslated,1.0+I2,24.0,0.036);
       }
     }
    }
   }

   G6 += 1; if (G6 > 11) G6 = 0; // Resets Palette Flasher
   if (GetCVar("dvdsoldhud_showcombobar") > 0)
   {
    int MaxEXPCombotimer;
    if (PowerupTimer[7] > 0) MaxEXPCombotimer = 7000; else MaxEXPCombotimer = 5600;
    // EXP Combo Timer Bar
    G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
    G9 = 100 / G10;
    Z1 = MiscellaneousVars[157];
    Z2 = MaxEXPCombotimer;
    I1 = Z1 * G9 / Z2;     
    if (I1 > G9) I1 = G9;
    if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
    if (Z1 > 0 && Z2 > 0)
    {
     for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
     {
      if (C1 <= I1)
      {
       if (G10 == 4) { SetFont("COMBOHF4"); G11 = -2.0; }
       if (G10 == 2) { SetFont("COMBOHF2"); G11 = -1.0; }
       if (G10 == 1) { SetFont("COMBOHF"); G11 = 0.0; }
      }
      else
      {
       if (G10 == 4) { SetFont("COMBOHE4"); G11 = -2.0; }
       if (G10 == 2) { SetFont("COMBOHE2"); G11 = -1.0; }
       if (G10 == 1) { SetFont("COMBOHE"); G11 = 0.0; }
      }
      I2 = ((C1 << 16) * G10) + G11;
      HudMessage(s:"A";HUDMSG_PLAIN,C1+2200,cr_untranslated,1.0+I2,68.0,0.036);
     }
    }
   }
 
    // EXP Combo Kill Counter
    SetFont("SmallFont");
    if (MiscellaneousVars[158] > 0)
    {
      if (G6 > 8)
      {
       // \c[LightBlue]
       if (MiscellaneousVars[158] == 1) HudMessage(s:"\c[LightBlue]",d:MiscellaneousVars[158],s:" KILL";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
       if (MiscellaneousVars[158] > 1) HudMessage(s:"\c[LightBlue]",d:MiscellaneousVars[158],s:" KILLS";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
      }
      else
      if (G6 > 5 && G6 < 9)
      {
       // \c[Gray]
       if (MiscellaneousVars[158] == 1) HudMessage(s:"\c[Gray]",d:MiscellaneousVars[158],s:" KILL";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
       if (MiscellaneousVars[158] > 1) HudMessage(s:"\c[Gray]",d:MiscellaneousVars[158],s:" KILLS";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
      }
      else
      if (G6 > 2 && G6 < 6)
      {
       // \c[Green]
       if (MiscellaneousVars[158] == 1) HudMessage(s:"\c[Green]",d:MiscellaneousVars[158],s:" KILL";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
       if (MiscellaneousVars[158] > 1) HudMessage(s:"\c[Green]",d:MiscellaneousVars[158],s:" KILLS";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
      }
      else
      if (G6 < 3)
      {
       // \c[Purple]
       if (MiscellaneousVars[158] == 1) HudMessage(s:"\c[Purple]",d:MiscellaneousVars[158],s:" KILL";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
       if (MiscellaneousVars[158] > 1) HudMessage(s:"\c[Purple]",d:MiscellaneousVars[158],s:" KILLS";HUDMSG_PLAIN,2200,cr_green,51.0,56.0,0.04);
      }
    }
    // EXP Combo Total
    if (MiscellaneousVars[158] > 1 && MiscellaneousVars[160] > 0)
    {
      if (G6 > 8)
      {
       // \c[LightBlue]
       HudMessage(s:"\c[LightBlue]+",d:MiscellaneousVars[160],s:" EXP";HUDMSG_PLAIN,2198,cr_green,51.0,80.0,0.04);
      }
      else
      if (G6 > 5 && G6 < 9)
      {
       // \c[Gray]
       HudMessage(s:"\c[Gray]+",d:MiscellaneousVars[160],s:" EXP";HUDMSG_PLAIN,2198,cr_green,51.0,80.0,0.04);
      }
      else
      if (G6 > 2 && G6 < 6)
      {
       // \c[Green]
       HudMessage(s:"\c[Green]+",d:MiscellaneousVars[160],s:" EXP";HUDMSG_PLAIN,2198,cr_green,51.0,80.0,0.04);
      }
      else
      if (G6 < 3)
      {
       // \c[Purple]
       HudMessage(s:"\c[Purple]+",d:MiscellaneousVars[160],s:" EXP";HUDMSG_PLAIN,2198,cr_green,51.0,80.0,0.04);
      }
    }
 
    // EXP Combo Multiplier
    MultiLower = (MiscellaneousVars[159] - 10000) % 100;
    MultiUpper = ((MiscellaneousVars[159] - 10000) - MultiLower) / 100;
    SetFont("SmallFont");
    if (MiscellaneousVars[158] > 1)
    {
      if (G6 > 8)
      {
       // \c[LightBlue]
       if (MultiLower > -1 && MultiLower < 10) HudMessage(s:"\c[LightBlue]+",d:MultiUpper,s:".0",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
       else HudMessage(s:"\c[LightBlue]+",d:MultiUpper,s:".",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
      }
      else
      if (G6 > 5 && G6 < 9)
      {
       // \c[Gray]
       if (MultiLower > -1 && MultiLower < 10) HudMessage(s:"\c[Gray]+",d:MultiUpper,s:".0",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
       else HudMessage(s:"\c[Gray]+",d:MultiUpper,s:".",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
      }
      else
      if (G6 > 2 && G6 < 6)
      {
       // \c[Green]
       if (MultiLower > -1 && MultiLower < 10) HudMessage(s:"\c[Green]+",d:MultiUpper,s:".0",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
       else HudMessage(s:"\c[Green]+",d:MultiUpper,s:".",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
      }
      else
      if (G6 < 3)
      {
       // \c[Purple]
       if (MultiLower > -1 && MultiLower < 10) HudMessage(s:"\c[Purple]+",d:MultiUpper,s:".0",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
       else HudMessage(s:"\c[Purple]+",d:MultiUpper,s:".",d:MultiLower,s:"%";HUDMSG_PLAIN,2199,cr_green,51.0,92.0,0.04);
      }
    }

   int MaxTensionChargeTimer;
   int TensionTimerMax = 3600;
   if (GetCVar("dvds_allowtension") > 0)
   {
    if (GetCVar("dvdsoldhud_showtensionbars") > 0)
    {
     // Tension Charge Timer Bar
     if (MiscellaneousVars[181] == 0) { MaxTensionChargeTimer = 1400; } // "0"
     if (MiscellaneousVars[181] == 1) { MaxTensionChargeTimer = 1488; TensionTimerMax = 3600; } // "5"
     if (MiscellaneousVars[181] == 2) { MaxTensionChargeTimer = 1575; TensionTimerMax = 4320; } // "20" [x1.2]
     if (MiscellaneousVars[181] == 3) { MaxTensionChargeTimer = 1750; TensionTimerMax = 5184; } // "50" [x1.2]
     if (MiscellaneousVars[181] == 4) { MaxTensionChargeTimer = 1925; TensionTimerMax = 6221; } // "100" [x1.2]
     if (MiscellaneousVars[181] == 5) { MaxTensionChargeTimer = 2100; TensionTimerMax = 7465; } // "250" [x1.2]
     if (MiscellaneousVars[181] == 6) { MaxTensionChargeTimer = 2625; TensionTimerMax = 8958; } // "500" [x1.2]
     if (MiscellaneousVars[181] == 7) { TensionTimerMax = 10750; } // "1000" [x1.2]
 
     if (MiscellaneousVars[181] < 7 && MiscellaneousVars[185] > 0 && MiscellaneousVars[184] == 0)
     {
      G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
      G9 = 100 / G10;
      Z1 = MiscellaneousVars[185];
      Z2 = MaxTensionChargeTimer;
      I1 = Z1 * G9 / Z2;     
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
      {
       if (C1 <= I1)
       {
        if (G10 == 4) { SetFont("TENCHAF4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("TENCHAF2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("TENCHAF"); G11 = 0.0; }
       }
       else
       {
        if (G10 == 4) { SetFont("OLDHEMP4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("OLDHEMP2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("OLDHEMP1"); G11 = 0.0; }
       }
       I2 = ((C1 << 16) * G10) + G11;
       HudMessage(s:"A";0,C1+2302,cr_untranslated,536.0+I2,20.0,0.03); //
      }
     }

 
     // Tension Time-Left Bar
     if (MiscellaneousVars[181] > 0) //   && MiscellaneousVars[183] < TensionTimerMax
     {
      G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
      G9 = 100 / G10;
      Z1 = MiscellaneousVars[183];
      Z2 = TensionTimerMax;
      I1 = Z1 * G9 / Z2;     
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
      {
       if (C1 <= I1)
       {
        if (G10 == 4) { SetFont("TENTIMF4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("TENTIMF2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("TENTIMF"); G11 = 0.0; }
       }
       else
       {
        if (G10 == 4) { SetFont("OLDHEMP4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("OLDHEMP2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("OLDHEMP1"); G11 = 0.0; }
       }
       I2 = ((C1 << 16) * G10) + G11;
       HudMessage(s:"A";0,C1+2404,cr_untranslated,536.0+I2,28.0,0.03); //
      }
     }

     // Tension Cooldown Bar
     // MiscellaneousVars[188] = MiscellaneousVars[186];
     if (MiscellaneousVars[186] > 0 && MiscellaneousVars[188] > 0 && MiscellaneousVars[184] == 0)
     {
      G10 = GetCVar("dvdsoldhud_hudmeternotchdetail");
      G9 = 100 / G10;
      Z1 = MiscellaneousVars[186];
      Z2 = MiscellaneousVars[188];
      I1 = Z1 * G9 / Z2;     
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsoldhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
      {
       if (C1 <= I1)
       {
        if (G10 == 4) { SetFont("TENCOOF4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("TENCOOF2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("TENCOOF"); G11 = 0.0; }
       }
       else
       {
        if (G10 == 4) { SetFont("OLDHEMP4"); G11 = -2.0; }
        if (G10 == 2) { SetFont("OLDHEMP2"); G11 = -1.0; }
        if (G10 == 1) { SetFont("OLDHEMP1"); G11 = 0.0; }
       }
       I2 = ((C1 << 16) * G10) + G11;
       HudMessage(s:"A";0,C1+2506,cr_untranslated,536.0+I2,36.0,0.03); //
      }
     }
    }

    // Shows Tension Level [icon]
    if (MiscellaneousVars[181] > 0)
    {
      if (MiscellaneousVars[181] == 1) SetFont("TENMEDA0");
      if (MiscellaneousVars[181] == 2) SetFont("TENMEDB0");
      if (MiscellaneousVars[181] == 3) SetFont("TENMEDC0");
      if (MiscellaneousVars[181] == 4) SetFont("TENMEDD0");
      if (MiscellaneousVars[181] == 5) SetFont("TENMEDE0");
      if (MiscellaneousVars[181] == 6) SetFont("TENMEDF0");
      if (MiscellaneousVars[181] == 7) SetFont("TENMEDG0");
      HudMessage(s:"A";0,2609,cr_untranslated,508.0,28.0,0.03); //
    }
    else
    {
      if (MiscellaneousVars[185] > 0) // Charging Tension
      {
       SetFont("TENMED00"); // "0" Tension Icon
       HudMessage(s:"A";0,2609,cr_untranslated,508.0,28.0,0.03); //
      }
      else
      {
       if (MiscellaneousVars[186] > 0) // Not Charging Tension /w Tension Cooldown
       {
         SetFont("TENSMLNO"); // No Tension Icon
         HudMessage(s:"A";0,2609,cr_untranslated,508.0,28.0,0.03); //
       }
      }
    }
   }

   // Boss HP Bar
   MiscellaneousVars[2027] = 0;
   G1 = GetActorProperty(1124,APROP_Health);
   if (G1 > 0) { MiscellaneousVars[2027] = 1124; } // Check for a Sauravatar first
   else
   {
    G1 = GetActorProperty(1123,APROP_Health);
    if (G1 > 0) { MiscellaneousVars[2027] = 1123; } // Check for a Sauron's Eye [Main] second
    else
    {
     G1 = GetActorProperty(1222,APROP_Health); // use tag 1222 for custom "bosses"
     if (G1 > 0) { MiscellaneousVars[2027] = 1222; } // Check for custom bosses third if neither of the above exists
    }
   }

   if (MiscellaneousVars[2027] > 0)
   {
    SetActivator(MiscellaneousVars[2027]);
    if (IsPointerEqual(AAPTR_TARGET, AAPTR_NULL) == FALSE)
    {
     SetActivator(0);
     for (C1 = 257; C1 > 1; C1 --)
     {
      G3 = GetActorProperty(MiscellaneousVars[2027],APROP_Health); // Current Health for Boss
      G2 = GetUserVariable(MiscellaneousVars[2027],"user_MaxHP"); // Max Health for Boss
      if (G2 != 0)
      {
       I1 = G3 * 256 / G2;
    
       if (C1 - 1 <= I1) SetFont("BossHF"); else SetFont("BossHE");
       I2 = C1 << 16;
       HudMessage(s:"A";0,C1+3502,cr_untranslated,192.0+I2,384.0,0.036);

       SetFont("BigFont");
       if (MiscellaneousVars[2027] == 1222) HudMessage(s:"BOSS";0,3501,cr_red,320.0,400.0,0.036);
       if (MiscellaneousVars[2027] == 1123) HudMessage(s:"SAURON'S EYE";0,3501,cr_red,320.0,400.0,0.036);
       if (MiscellaneousVars[2027] == 1124) HudMessage(s:"SAURAVATAR";0,3501,cr_darkgrey,320.0,400.0,0.036);
       SetFont("SmallFont");
       HudMessage(d:G3,s:" / ",d:G2;0,3500,cr_darkgrey,320.0,376.0,0.036);
      }
      SetActivator(0);
     }
     SetActivator(0);
    }
    SetActivator(0);
   }
   SetActivator(0);

   SetHudSize(640,480,0);
   if (EXPGainChecker == 1)
   {
    SetFont("SmallFont");
    if (PlayerLevel >= LevelCap)
    {
      HudMessage(s:"\cdLevel: ",d:PlayerLevel,s:" / ",d:LevelCap,s:"\c-      \cn(",d:Experience,s:" EXP)";HUDMSG_PLAIN,3413,cr_white,120.1,24.0,0.036);
    }
    else
    {
      HudMessage(s:"\cdLevel: ",d:PlayerLevel,s:" / ",d:LevelCap,s:"\c-      \cn(",d:Experience,s:" EXP)      \ca(",d:MiscellaneousVars[48],s:" Needed)";HUDMSG_PLAIN,3413,cr_white,120.1,24.0,0.036);
    }
   }

   SetFont("SmallFont");
   if (EXPGainChecker == 1) ypos = 32.0; else ypos = 24.0;
   HudMessage(s:"\c[Purple]Mana: ",d:CurrentMana,s:" / ",d:MaxMana;HUDMSG_PLAIN ,3415,cr_white,120.1,ypos,0.036);

   // Seed Level Displays [#3416 & #3417]
   if (GetCVar("dvdsallhuds_showstatinfo") == 1)
   {
    if (EXPGainChecker == 1) ypos = 54.0; else ypos = 46.0;
    if (MiscellaneousVars[24] == 0) // No Stat Selected
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
    if (MiscellaneousVars[24] == 1) // Selected Agility
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \c[blue]",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
    if (MiscellaneousVars[24] == 2) // Selected Defense
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \c[blue]",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
    if (MiscellaneousVars[24] == 3) // Selected Deftness
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \c[blue]",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
 
    if (MiscellaneousVars[24] == 4) // Selected Sorcery
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \c[blue]",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
    if (MiscellaneousVars[24] == 5) // Selected Strength
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \c[blue]",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }
    if (MiscellaneousVars[24] == 6) // Selected Therapeusis
    {
     HudMessage(
              s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
                 s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
                 s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
                    s:"\n\c[Tan]Balance: \cf",d:MiscellaneousVars[201];
                 HUDMSG_PLAIN ,3416,cr_white,120.1,ypos,0.036);
     HudMessage(
                   s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
                    s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
                   s:"\n\c[Gray]Therapeusis: \c[blue]",d:MiscellaneousVars[36],
           s:"\n\c[LightBlue]Jumping: \cf",d:MiscellaneousVars[200];
                 HUDMSG_PLAIN ,3417,cr_white,248.1,ypos,0.036);
    }

    // AeonPts Display [#3420]
    G5 += 1;
    if (G5 > 11) G5 = 0; // Resets Palette Flasher

    ypos = 16.0;
    if (MiscellaneousVars[25] > 0 && PlayerLevel >= MiscellaneousVars[197])
    {
     if (G5 > 8)
     {
       HudMessage(
       s:"\c[LightBlue]AeonPTS: \cf",d:MiscellaneousVars[25],
                                                                   s:"\cn   (\cj",k:"pukename AeonPointKey 0",s:"\cf [down], \cj",
                                                                                        k:"pukename AeonPointKey 1",s:"\cf [up], \cj",
                                                                                        k:"pukename AeonPointKey 2",s:"\cf [use]\cn)";
       HUDMSG_PLAIN ,3420,cr_white,120.1,ypos,0.036);
     }
     else
     if (G5 > 5 && G5 < 9)
     {
       HudMessage(
       s:"\c[Gray]AeonPTS: \cf",d:MiscellaneousVars[25],
                                                                   s:"\cn   (\cj",k:"pukename AeonPointKey 0",s:"\cf [down], \cj",
                                                                                        k:"pukename AeonPointKey 1",s:"\cf [up], \cj",
                                                                                        k:"pukename AeonPointKey 2",s:"\cf [use]\cn)";
       HUDMSG_PLAIN ,3420,cr_white,120.1,ypos,0.036);
     }
     else
     if (G5 > 2 && G5 < 6)
     {
       HudMessage(
       s:"\c[Green]AeonPTS: \cf",d:MiscellaneousVars[25],
                                                                   s:"\cn   (\cj",k:"pukename AeonPointKey 0",s:"\cf [down], \cj",
                                                                                        k:"pukename AeonPointKey 1",s:"\cf [up], \cj",
                                                                                        k:"pukename AeonPointKey 2",s:"\cf [use]\cn)";
       HUDMSG_PLAIN ,3420,cr_white,120.1,ypos,0.036);
     }
     else
     if (G5 < 3)
     {
       HudMessage(
       s:"\c[Purple]AeonPTS: \cf",d:MiscellaneousVars[25],
                                                                   s:"\cn   (\cj",k:"pukename AeonPointKey 0",s:"\cf [down], \cj",
                                                                                        k:"pukename AeonPointKey 1",s:"\cf [up], \cj",
                                                                                        k:"pukename AeonPointKey 2",s:"\cf [use]\cn)";
       HUDMSG_PLAIN ,3420,cr_white,120.1,ypos,0.036);
     }
    }
   }

   SetHudSize(704,528,0); // 640,480 //   SetHudSize(960,720,0);
   xpos = 352.0; // 50% [centered]
   ypos = 476.0; // 90% [towards bottom]
   // Function Ran
   G1 = SpellCostCheck(SelectedSpell); // Function testing to come later :P
   // Function Ran

   G4 = CurrentMana / SpellCostCheck(SelectedSpell);
 
   if (CurrentMana >= G1)
   {
    if (SelectedSpell == 40)
    {
      if (CharacterClass == 2)
      {
       HudMessage(s:"\cfSpreader Aura Lv. 1\c-",s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_white,xpos,ypos,0.036); // 320,432
      }
      else
      {
       HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_white,xpos,ypos,0.036);
      }
    }
    else
    {
      HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_white,xpos,ypos,0.036);
    }
   }
   else
   {
    if (SelectedSpell == 40)
    {
      if (CharacterClass == 2)
      {
       HudMessage(s:"\cfSpreader Aura Lv. 1\c-",s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_red,xpos,ypos,0.036);
      }
      else
      {
       HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_red,xpos,ypos,0.036);
      }
    }
    else
    {
      HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)    (",d:G4,s:" Uses)";0,3406,cr_red,xpos,ypos,0.036);
    }
   }

   xpos = 352.0; // 50% [centered]
   ypos = 502.0; // 95% [towards bottom]
   if (SelectedSpell == 1) // Minor Healing
   {
    HealMin = GetHealingValue(0,0); // Minor [Min] 
    HealMax = GetHealingValue(0,1); // Minor [Max] 
    HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthTrue;0,3407,cr_gold,xpos,ypos,0.036);
   }
   else if (SelectedSpell == 14) // Healing
   {
    HealMin = GetHealingValue(1,0); // Normal [Min] 
    HealMax = GetHealingValue(1,1); // Normal [Max] 
    HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthTrue;0,3407,cr_gold,xpos,ypos,0.036);
   }
   else if (SelectedSpell == 29) // Major Healing
   {
    HealMin = GetHealingValue(2,0); // Major [Min] 
    HealMax = GetHealingValue(2,1); // Major [Max] 
    HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthLimit;0,3407,cr_gold,xpos,ypos,0.036);
   }
   else if (SelectedSpell == 40) // Diamond Skin / Spreader Aura Lv. 1
   {
    if (CharacterClass == 2) // Flora uses Spreader Aura Lv. 1 [and thus it uses an unique Description]
    {
      HudMessage(s:"Allows You to Create 2 Extra Copies of Most Attacks/Spells.";0,3407,cr_gold,xpos,ypos,0.036);
    }
    else // The other two use the usual Spell Description for Diamond Skin
    {
      HudMessage(s:SpellDesc[SelectedSpell];0,3407,cr_gold,xpos,ypos,0.036);
    }
   }
   else
   {
    HudMessage(s:SpellDesc[SelectedSpell];0,3407,cr_gold,xpos,ypos,0.036);
   }

   str Keyname;
   SetHudSize(704,528,0); // 640,480 //   SetHudSize(960,720,0);
   xpos = 704.2;
   ypos = 220.0; // 200.0;
   int yposint = 11.0; // 10.0;
   // Spell Bind Displays
   for (C1 = 0; C1 < 10; C1 ++)
   {
    if (C1+1 == 1) Keyname = "pukename SpellQuickAssign 0";
    if (C1+1 == 2) Keyname = "pukename SpellQuickAssign 1";
    if (C1+1 == 3) Keyname = "pukename SpellQuickAssign 2";
    if (C1+1 == 4) Keyname = "pukename SpellQuickAssign 3";
    if (C1+1 == 5) Keyname = "pukename SpellQuickAssign 4";
    if (C1+1 == 6) Keyname = "pukename SpellQuickAssign 5";
    if (C1+1 == 7) Keyname = "pukename SpellQuickAssign 6";
    if (C1+1 == 8) Keyname = "pukename SpellQuickAssign 7";
    if (C1+1 == 9) Keyname = "pukename SpellQuickAssign 8";
    if (C1+1 == 10) Keyname = "pukename SpellQuickAssign 9";

    if (ReadiedSpells[C1] != 0)
    {
      // Function Ran
      G8 = SpellCostCheck(ReadiedSpells[C1] - 1); // Function testing to come later :P
      // Function Ran
 
      G4 = CurrentMana / SpellCostCheck(ReadiedSpells[C1] - 1);
 
      if (CurrentMana >= G8)
      {
       //PrintBold(d:CharacterClass,s:" ",d:(ReadiedSpells[C1] - 1));
       if ((ReadiedSpells[C1] - 1) == 40)
       {
         if (CharacterClass == 2)
         {
          HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:"\cfSpreader Aura Lv. 1\c-",s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_white,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
         }
         else
         {
          HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_white,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
         }
       }
       else
       {
         HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_white,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
       }
      }
      else
      {
       //PrintBold(d:CharacterClass,s:" ",d:(ReadiedSpells[C1] - 1));
       if ((ReadiedSpells[C1] - 1) == 40)
       {
         if (CharacterClass == 2)
         {
          HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:"\cfSpreader Aura Lv. 1\c-",s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_red,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
         }
         else
         {
          HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_red,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
         }
       }
       else
       {
         HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,2001+C1,cr_red,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
       }
      }
    }
    else
    {
      HudMessage(d:C1+1,s:" [\cf",k:Keyname,s:"\c-]: Empty";0,2001+C1,cr_white,xpos,ypos+FixedMul(C1 << 16,yposint),0.036);
    }
   }

   SetHudSize(0,0,0);
  }
  //***************************************************************
  //***************************************************************
  else if (MiscellaneousVars[2000] == 1 && ClassCheck > 1) //** NEW STYLE HUD HERE **
  //***************************************************************
  //***************************************************************
  {
     msgdelay = 0.036;
     msgalpha = 0.75;
     xpos = MiscellaneousVars[2001];
     ypos = MiscellaneousVars[2002];
     SetHudSize(1440,1080,0); // Since 1920x1080 isn't truly "supported" [ZDOOM(TM(TM(TM))), etc] :V

     xpos = MiscFixedVars[1];
     ypos = MiscFixedVars[2];
     xpos = MiscFixedVars[3];
     ypos = MiscFixedVars[4];
     xpos = MiscFixedVars[5];
     ypos = MiscFixedVars[6];
     xpos = MiscFixedVars[7];
     ypos = MiscFixedVars[8];
     xpos = MiscFixedVars[9];
     ypos = MiscFixedVars[10];
     xpos = MiscFixedVars[11];
     ypos = MiscFixedVars[12];
     xpos = MiscFixedVars[13];
     ypos = MiscFixedVars[14];
     xpos = MiscFixedVars[15];
     ypos = MiscFixedVars[16];
     xpos = MiscFixedVars[17];
     ypos = MiscFixedVars[18];
     xpos = MiscFixedVars[19];
     ypos = MiscFixedVars[20];

    //*******************************
    //**Multi-Color Test Background**
    //*******************************
    if (MiscellaneousVars[170] == 1) // 0 means "on", 1 means "off".
    {
     xpos = ScreenXOffset + 320.0;
     ypos = 180.0;
     SetFont("HUDBGBOS"); // HUDBGTST
     HudMessage(s:"A";HUDMSG_ALPHA,2222,cr_untranslated,xpos,ypos,0.036,0.25); // 2222 to overlap, or 7777 or underlap
    }
    //***********************
    //**General Positioning**
    //***********************

    // Healing/Damage Bursts

    int PopUpXPlacement = random(-288,288) * 1.0;
    int PopUpYPlacement = random(-216,216) * 1.0;
    int PopupHoldDuration = 0.0;
    int PopupFadeOutDuration = 0.0;
    int yposmod = 0.0;

    if (Timer() > 3)
    {
     // Health
     PopupHoldDuration = 0.0;
     PopupFadeOutDuration = 0.0;
     xpos = 720.0;
     ypos = 540.0;
     msgalpha = 0.834;
     // [173] Shows "HealthDifference" in the new HUD for Player's "Damage/Healing" bursts.
     // [174] Shows "HealthDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
     // [175] Shows "NewHealthValue" in the new HUD for the Player's "Damage/Healing" bursts. 
     // HP/Health Damage/Heal
     if (MiscellaneousVars[173] != 0)
     {
       if (MiscellaneousVars[173] > 0) // Positive Value
       {
        if (MiscellaneousVars[174] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[175] >= MaxHealthLimit) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[174] >= 30)
        {
         SetFont("DQHUDFONT"); 
         yposmod = 9.0; // 9.0
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0; // 5.0
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[173],s:" (",d:MiscellaneousVars[174],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_green,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[173];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_green,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[174] >= 30) SetFont("BBURHPHL"); else SetFont("BURSHPHL");
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_untranslated,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[173] < 0) // Negative Value
       {
        MiscellaneousVars[173] *= -1;
        MiscellaneousVars[174] *= -1;
        if (MiscellaneousVars[174] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[175] <= 0) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[174] >= 30)
        {
         SetFont("DQHUDFONT"); 
         yposmod = 7.0; // 9.0
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0;
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[173],s:" (",d:MiscellaneousVars[174],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[173];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[175] <= 0)
        {
         if (MiscellaneousVars[174] >= 30) SetFont("BBURHPCP"); else SetFont("BURSHPCP"); // Death [for now]
        }
        else
        {
         if (MiscellaneousVars[174] >= 30) SetFont("BBURHPDP"); else SetFont("BURSHPDP"); // Damage w/o Death
        }
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_red,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
     }

     // Armor
     PopupHoldDuration = 0.0;
     PopupFadeOutDuration = 0.0;
     xpos = 720.0 - 48.0;
     ypos = 540.0 - 48.0;
     if (MiscellaneousVars[174] >= 30)
     {
      xpos -= 32.0;
      ypos -= 32.0;
     }
     msgalpha = 0.834;
     // [176] Shows "ArmorDifference" in the new HUD for Player's "Damage/Healing" bursts.
     // [177] Shows "ArmorDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
     // [178] Shows "NewArmorValue" in the new HUD for the Player's "Damage/Healing" bursts. 
     // AP/Armor Damage/Heal
     if (MiscellaneousVars[176] != 0)
     {
       if (MiscellaneousVars[176] > 0) // Positive Value
       {
        if (MiscellaneousVars[177] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[178] >= CurrentMaxArmor) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[177] >= 30)
        {
         SetFont("DQHUDFONT"); 
         yposmod = 9.0; // 9.0
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0; // 5.0
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[176],s:" (",d:MiscellaneousVars[177],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_gold,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[176];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_gold,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[177] >= 30) SetFont("BBURAPHL"); else SetFont("BURSAPHL");
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_untranslated,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[176] < 0) // Negative Value
       {
        MiscellaneousVars[176] *= -1;
        MiscellaneousVars[177] *= -1;
        if (MiscellaneousVars[177] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[178] <= 0) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[177] >= 30)
        {
         xpos -= 32.0;
         ypos -= 32.0;
         SetFont("DQHUDFONT"); 
         yposmod = 7.0;
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0;
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[176],s:" (",d:MiscellaneousVars[177],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_darkgreen,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[176];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_darkgreen,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[178] <= 0)
        {
         if (MiscellaneousVars[177] >= 30) SetFont("BBURAPCT"); else SetFont("BURSAPCT"); // Armor Break [for now]
        }
        else
        {
         if (MiscellaneousVars[177] >= 30) SetFont("BBURAPDM"); else SetFont("BURSAPDM"); // Damage w/o Armor Break
         yposmod = 0.0; // 9.0
        }
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_red,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
     }

     // Mana/MP
     PopupHoldDuration = 0.0;
     PopupFadeOutDuration = 0.0;
     xpos = 720.0 + 48.0;
     ypos = 540.0 + 48.0;
     if (MiscellaneousVars[174] >= 30)
     {
      xpos += 32.0;
      ypos += 32.0;
     }
     msgalpha = 0.834;
     // [236] Shows "ManaDifference" in the new HUD for Player's "Damage/Healing" bursts.
     // [237] Shows "ManaDiffRatio" in the new HUD for Player's "Damage/Healing" bursts.
     // [238] Shows "NewManaValue" in the new HUD for the Player's "Damage/Healing" bursts. 
     // MP/Mana Damage/Heal
     if (MiscellaneousVars[236] != 0)
     {
       if (MiscellaneousVars[236] > 0) // Positive Value
       {
        if (MiscellaneousVars[237] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[238] >= CurrentMaxArmor) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[237] >= 30)
        {
         SetFont("DQHUDFONT"); 
         yposmod = 9.0; // 9.0
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0; // 5.0
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[236],s:" (",d:MiscellaneousVars[237],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_lightblue,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[236];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_lightblue,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[237] >= 30) SetFont("BBURMPHL"); else SetFont("BURSMPHL");
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_untranslated,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[236] < 0) // Negative Value
       {
        MiscellaneousVars[236] *= -1;
        MiscellaneousVars[237] *= -1;
        if (MiscellaneousVars[237] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[238] <= 0) { PopupHoldDuration += 0.75; PopupFadeOutDuration += 0.5; } 
        if (MiscellaneousVars[237] >= 30)
        {
         xpos += 32.0;
         ypos += 32.0;
         SetFont("DQHUDFONT"); 
         yposmod = 7.0;
        }
        else
        {
         SetFont("DQHUDFONTSML");
         yposmod = 5.0;
        }
        if (GetCVar("dvdsnewhud_damageburstsratios") == 1)
        {
         HudMessage(d:MiscellaneousVars[236],s:" (",d:MiscellaneousVars[237],s:"%)";
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }
        else
        {
         HudMessage(d:MiscellaneousVars[236];
         HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,xpos+PopUpXPlacement,ypos+yposmod+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
        }

        if (MiscellaneousVars[238] <= 0)
        {
         if (MiscellaneousVars[237] >= 30) SetFont("BBURMPCT"); else SetFont("BURSMPCT"); // Mana Depletion [for now]
        }
        else
        {
         if (MiscellaneousVars[237] >= 30) SetFont("BBURMPDM"); else SetFont("BURSMPDM"); // Damage w/o Mana Depletion
         yposmod = 0.0; // 9.0
        }
        HudMessage(s:"A";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_red,xpos+PopUpXPlacement,ypos+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
     }

    }
    //*************
    //**Left Side**
    //*************
     ScreenXOffset = GetCVar("dvdsnewhud_widescreenxoffset") * -1.0;
 
     //***********************************
     //**"Boss" Lifemeter [6211 to 6622]**
     //***********************************
     MiscellaneousVars[2027] = 0;
     G1 = GetActorProperty(1124,APROP_Health);
     if (G1 > 0) { MiscellaneousVars[2027] = 1124; } // Check for a Sauravatar first
     else
     {
      G1 = GetActorProperty(1123,APROP_Health);
      if (G1 > 0) { MiscellaneousVars[2027] = 1123; } // Check for a Sauron's Eye [Main] second
      else
      {
       G1 = GetActorProperty(1222,APROP_Health); // use tag 1222 for custom "bosses"
       if (G1 > 0) { MiscellaneousVars[2027] = 1222; } // Check for custom bosses third if neither of the above exists
      }
     }

     SetActivator(0);
     if (MiscellaneousVars[2027] > 0)
     {     
      SetActivator(MiscellaneousVars[2027]);
      if (IsPointerEqual(AAPTR_TARGET, AAPTR_NULL) == FALSE)
      {
       SetActivator(0);
       G3 = GetActorProperty(MiscellaneousVars[2027],APROP_Health); // Current Health for Boss
       G2 = GetUserVariable(MiscellaneousVars[2027],"user_MaxHP"); // Max Health for Boss
       if (G2 > 0)
       {
        // Boss "HP" Label
        xpos = ScreenXOffset + 168.0; // 168.0;
        ypos = 92.0; // 92.0;
        SetFont("DQHUDFONTSML");
        HudMessage(s:"HP";HUDMSG_ALPHA,6213,cr_orange,xpos,ypos,0.036,0.875);

        // Boss HP Amounts
        // HPInterpolationDisplay;
        xpos = ScreenXOffset + 371.0; // 371.0;
        ypos = 96.0; // 96.0;
        SetFont("DQHUDFONTSML");
        HudMessage(d:G3,s:"/",d:G2;HUDMSG_ALPHA,6214,cr_orange,xpos,ypos,0.036,0.875);

        // Boss Meter Border
        xpos = ScreenXOffset + 369.0;
        ypos = 94.0;
        SetFont("BLMMFRAM");
        HudMessage(s:"A";HUDMSG_ALPHA,6215,cr_untranslated,xpos,ypos,0.036,0.75);

        // Boss Meter Notches
        xpos = ScreenXOffset + 169.0; // 169.0
        ypos = 92.0; // 92.0
        msgalpha = 0.75;

        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 400 / G10;
        G3 = GetActorProperty(MiscellaneousVars[2027],APROP_Health); // Current Health for Boss
        G2 = GetUserVariable(MiscellaneousVars[2027],"user_MaxHP"); // Max Health for Boss
        I1 = G3 * G9 / G2;
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
        if (G2 != 0)
        {
         // Normal
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("HPBFILN4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("HPBFILN2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("HPBFILNR"); G11 = 1.0; }
          }
          else SetFont("BARNOFIL");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+6217,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
         if (GetCVar("dvdsnewhud_showoverlifenotches") == 1)
         {
          // Overlife
          G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
          G9 = 400 / G10;
          G3 = GetActorProperty(MiscellaneousVars[2027],APROP_Health); // Current Health for Boss
          G2 = GetUserVariable(MiscellaneousVars[2027],"user_MaxHP"); // Max Health for Boss
          I1 = (G3 * G9 / G2) - G9; 
          if (I1 > G9) I1 = G9;
          if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
          if (G2 != 0 && I1 > 0)
          {
           for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
           {    
            if (C1 <= I1)
            {
             if (G10 == 4) { SetFont("HPBFILO4"); G11 = -2.0; }
             if (G10 == 2) { SetFont("HPBFILO2"); G11 = -1.0; }
             if (G10 == 1) { SetFont("HPBFILOV"); G11 = 1.0; }
            }
            else SetFont("BARNOFIL");
            I2 = ((C1 << 16) * G10) + G11;
            HudMessage(s:"A";HUDMSG_ALPHA,C1+6217,cr_untranslated,xpos+I2,ypos,0.036,0.75);
           }
          }
         }
        }
  
        // Boss Meter Glass
        xpos = ScreenXOffset + 369.0;
        ypos = 94.0;
        SetFont("BLMMGLAS");
        HudMessage(s:"A";HUDMSG_ALPHA,7020,cr_untranslated,xpos,ypos,0.036,0.75);
 
        // Boss Name
        xpos = ScreenXOffset + 169.0 + 0.1; // 169.1
        if (xpos < 0.0) xpos -= 0.2;
        ypos = 60.0; // 60.0
        SetFont("BLMNNORM");
        if (MiscellaneousVars[2027] == 1123) SetFont("BLMNSAEY");
        if (MiscellaneousVars[2027] == 1124) SetFont("BLMNSAAV");
        HudMessage(s:"A";HUDMSG_ALPHA,7021,cr_untranslated,xpos,ypos,0.036,0.75);

        // Boss Portrait
        xpos = ScreenXOffset + 126.0; // 126.0
        ypos = 75.0; // 75.0
        SetFont("BLMPNORM");
        if (MiscellaneousVars[2027] == 1123) SetFont("BLMPSAEY");
        if (MiscellaneousVars[2027] == 1124) SetFont("BLMPSAAV");
        HudMessage(s:"A";HUDMSG_ALPHA,7022,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
     }
     SetActivator(0);



     //**************************
     //**"LEVEL UP" Icon [7996]**
     //**************************
     if (MiscellaneousVars[171] > 0) // Level up timer
     {
       xpos = ScreenXOffset + 130.0; // 130.0
       ypos = 793.0; // 793.0
       msgalpha = 0.975;
       MiscellaneousVars[172] += 1;
       if (MiscellaneousVars[172] == 1) msgalpha = 0.975;
       if (MiscellaneousVars[172] == 2) msgalpha = 0.96;
       if (MiscellaneousVars[172] == 3) msgalpha = 0.945;
       if (MiscellaneousVars[172] == 4) msgalpha = 0.93;
       if (MiscellaneousVars[172] == 5) msgalpha = 0.915;
       if (MiscellaneousVars[172] == 6) msgalpha = 0.90;
       if (MiscellaneousVars[172] == 7) msgalpha = 0.885;
       if (MiscellaneousVars[172] == 8) msgalpha = 0.87;
       if (MiscellaneousVars[172] == 9) msgalpha = 0.855;
       if (MiscellaneousVars[172] == 10) msgalpha = 0.84;
       if (MiscellaneousVars[172] == 11) msgalpha = 0.825;
       if (MiscellaneousVars[172] == 12) msgalpha = 0.81;
       if (MiscellaneousVars[172] == 13) msgalpha = 0.795;
       if (MiscellaneousVars[172] == 14) msgalpha = 0.78;
       if (MiscellaneousVars[172] == 15) msgalpha = 0.765;
       if (MiscellaneousVars[172] == 16) msgalpha = 0.75;
       if (MiscellaneousVars[172] == 17) msgalpha = 0.735;
       if (MiscellaneousVars[172] == 18) msgalpha = 0.72;
       if (MiscellaneousVars[172] == 19) msgalpha = 0.735;
       if (MiscellaneousVars[172] == 20) msgalpha = 0.75;
       if (MiscellaneousVars[172] == 21) msgalpha = 0.765;
       if (MiscellaneousVars[172] == 22) msgalpha = 0.78;
       if (MiscellaneousVars[172] == 23) msgalpha = 0.795;
       if (MiscellaneousVars[172] == 24) msgalpha = 0.81;
       if (MiscellaneousVars[172] == 25) msgalpha = 0.825;
       if (MiscellaneousVars[172] == 26) msgalpha = 0.84;
       if (MiscellaneousVars[172] == 27) msgalpha = 0.855;
       if (MiscellaneousVars[172] == 28) msgalpha = 0.87;
       if (MiscellaneousVars[172] == 29) msgalpha = 0.885;
       if (MiscellaneousVars[172] == 30) msgalpha = 0.90;
       if (MiscellaneousVars[172] == 31) msgalpha = 0.915;
       if (MiscellaneousVars[172] == 32) msgalpha = 0.93;
       if (MiscellaneousVars[172] == 33) msgalpha = 0.945;
       if (MiscellaneousVars[172] == 34) msgalpha = 0.96;
       if (MiscellaneousVars[172] == 35) { msgalpha = 0.975; MiscellaneousVars[172] = 1; }
       SetFont("LVLUPIND");
       HudMessage(s:"A";HUDMSG_ALPHA,7796,cr_untranslated,xpos,ypos,0.036,msgalpha);
     }
     else { msgalpha = 0.75; MiscellaneousVars[172] = 0; }
    
     //*****************************
     //**Character Portrait [7797]**
     //*****************************
     if (CharacterClass == 0) { SetFont("PORTDEG1"); xpos = ScreenXOffset + 128.0; ypos = 864.0; }
     if (CharacterClass == 1) { SetFont("PORTILL1"); xpos = ScreenXOffset + 128.0; ypos = 862.0; }
     if (CharacterClass == 2) { SetFont("PORTFLO1"); xpos = ScreenXOffset + 132.0; ypos = 860.0; }
     if (CharacterClass == 2 && PowerupTimer[7] > 0) { SetFont("PORTFLO2"); xpos = ScreenXOffset + 175.0; ypos = 859.0; }
     HudMessage(s:"A";HUDMSG_ALPHA,7797,cr_untranslated,xpos,ypos,0.036,0.75);

     //*****************************
     // Quickspell Bar [7798 to 7898]**
     //*****************************
     for (C1 = 0; C1 < 10; C1 ++)
     {
      //************
      //*Text/Costs*
      //************

      // Spell Cost (right-aligned)
      if (C1 == 0) { xpos = ScreenXOffset + 80.0 + 0.2; ypos = 1049.0; }
      if (C1 == 1) { xpos = ScreenXOffset + 139.0 + 0.2; ypos = 1049.0; }
      if (C1 == 2) { xpos = ScreenXOffset + 198.0 + 0.2; ypos = 1049.0; }
      if (C1 == 3) { xpos = ScreenXOffset + 257.0 + 0.2; ypos = 1049.0; }
      if (C1 == 4) { xpos = ScreenXOffset + 316.0 + 0.2; ypos = 1049.0; }
      if (C1 == 5) { xpos = ScreenXOffset + 375.0 + 0.2; ypos = 1049.0; }
      if (C1 == 6) { xpos = ScreenXOffset + 434.0 + 0.2; ypos = 1049.0; }
      if (C1 == 7) { xpos = ScreenXOffset + 493.0 + 0.2; ypos = 1049.0; }
      if (C1 == 8) { xpos = ScreenXOffset + 552.0 + 0.2; ypos = 1049.0; }
      if (C1 == 9) { xpos = ScreenXOffset + 611.0 + 0.2; ypos = 1049.0; }
      if (xpos < 0.0) xpos -= 0.4;
      SetFont("DQHUDFONTSTATUS");
      G8 = SpellCostCheck(ReadiedSpells[C1] - 1);
      if (ReadiedSpells[C1] != 0)
      {
       HudMessage(d:G8;HUDMSG_ALPHA,7854+C1,cr_lightblue,xpos,ypos,0.036,0.875);
      }
      else
      {
       HudMessage(s:"N/A";HUDMSG_ALPHA,7854+C1,cr_lightblue,xpos,ypos,0.036,0.875);
      }

      // Spell Bind Key (left-aligned)
      if (C1 == 0) { xpos = ScreenXOffset + 20.0 + 0.1; ypos = 1000.0; }
      if (C1 == 1) { xpos = ScreenXOffset + 79.0 + 0.1; ypos = 1000.0; }
      if (C1 == 2) { xpos = ScreenXOffset + 139.0 + 0.1; ypos = 1000.0; }
      if (C1 == 3) { xpos = ScreenXOffset + 197.0 + 0.1; ypos = 1000.0; }
      if (C1 == 4) { xpos = ScreenXOffset + 256.0 + 0.1; ypos = 1000.0; }
      if (C1 == 5) { xpos = ScreenXOffset + 315.0 + 0.1; ypos = 1000.0; }
      if (C1 == 6) { xpos = ScreenXOffset + 374.0 + 0.1; ypos = 1000.0; }
      if (C1 == 7) { xpos = ScreenXOffset + 433.0 + 0.1; ypos = 1000.0; }
      if (C1 == 8) { xpos = ScreenXOffset + 492.0 + 0.1; ypos = 1000.0; }
      if (C1 == 9) { xpos = ScreenXOffset + 551.0 + 0.1; ypos = 1000.0; }
      if (xpos < 0.0) xpos -= 0.2;
      if (C1+1 == 1) Keyname = "pukename SpellQuickAssign 0";
      if (C1+1 == 2) Keyname = "pukename SpellQuickAssign 1";
      if (C1+1 == 3) Keyname = "pukename SpellQuickAssign 2";
      if (C1+1 == 4) Keyname = "pukename SpellQuickAssign 3";
      if (C1+1 == 5) Keyname = "pukename SpellQuickAssign 4";
      if (C1+1 == 6) Keyname = "pukename SpellQuickAssign 5";
      if (C1+1 == 7) Keyname = "pukename SpellQuickAssign 6";
      if (C1+1 == 8) Keyname = "pukename SpellQuickAssign 7";
      if (C1+1 == 9) Keyname = "pukename SpellQuickAssign 8";
      if (C1+1 == 10) Keyname = "pukename SpellQuickAssign 9";
      HudMessage(k:Keyname;HUDMSG_ALPHA,7865+C1,cr_white,xpos,ypos,0.036,0.875);



      //*******
      //*Icons*
      //*******
      if (C1 == 0) { xpos = ScreenXOffset + 55.0; ypos = 1023.0; }
      if (C1 == 1) { xpos = ScreenXOffset + 114.0; ypos = 1023.0; }
      if (C1 == 2) { xpos = ScreenXOffset + 173.0; ypos = 1023.0; }
      if (C1 == 3) { xpos = ScreenXOffset + 232.0; ypos = 1023.0; }
      if (C1 == 4) { xpos = ScreenXOffset + 291.0; ypos = 1023.0; }
      if (C1 == 5) { xpos = ScreenXOffset + 350.0; ypos = 1023.0; }
      if (C1 == 6) { xpos = ScreenXOffset + 409.0; ypos = 1023.0; }
      if (C1 == 7) { xpos = ScreenXOffset + 468.0; ypos = 1023.0; }
      if (C1 == 8) { xpos = ScreenXOffset + 527.0; ypos = 1023.0; }
      if (C1 == 9) { xpos = ScreenXOffset + 586.0; ypos = 1023.0; }

      if (ReadiedSpells[C1] != 0)
      {
       // Function Ran
       G8 = SpellCostCheck(ReadiedSpells[C1] - 1); // Function testing to come later :P
       // Function Ran
 
       G4 = CurrentMana / SpellCostCheck(ReadiedSpells[C1] - 1);

       // Mana Cost Check
       if (CurrentMana < G8)
       {
        msgalpha = 0.75;
        MiscellaneousVars[2011+C1] += 1;
        if (MiscellaneousVars[2011+C1] == 1) msgalpha = 0.75;
        if (MiscellaneousVars[2011+C1] == 2) msgalpha = 0.735;
        if (MiscellaneousVars[2011+C1] == 3) msgalpha = 0.72;
        if (MiscellaneousVars[2011+C1] == 4) msgalpha = 0.705;
        if (MiscellaneousVars[2011+C1] == 5) msgalpha = 0.69;
        if (MiscellaneousVars[2011+C1] == 6) msgalpha = 0.675;
        if (MiscellaneousVars[2011+C1] == 7) msgalpha = 0.66;
        if (MiscellaneousVars[2011+C1] == 8) msgalpha = 0.645;
        if (MiscellaneousVars[2011+C1] == 9) msgalpha = 0.63;
        if (MiscellaneousVars[2011+C1] == 10) msgalpha = 0.615;
        if (MiscellaneousVars[2011+C1] == 11) msgalpha = 0.60;
        if (MiscellaneousVars[2011+C1] == 12) msgalpha = 0.585;
        if (MiscellaneousVars[2011+C1] == 13) msgalpha = 0.57;
        if (MiscellaneousVars[2011+C1] == 14) msgalpha = 0.555;
        if (MiscellaneousVars[2011+C1] == 15) msgalpha = 0.54;
        if (MiscellaneousVars[2011+C1] == 16) msgalpha = 0.525;
        if (MiscellaneousVars[2011+C1] == 17) msgalpha = 0.51;
        if (MiscellaneousVars[2011+C1] == 18) msgalpha = 0.495;
        if (MiscellaneousVars[2011+C1] == 19) msgalpha = 0.51;
        if (MiscellaneousVars[2011+C1] == 20) msgalpha = 0.525;
        if (MiscellaneousVars[2011+C1] == 21) msgalpha = 0.54;
        if (MiscellaneousVars[2011+C1] == 22) msgalpha = 0.555;
        if (MiscellaneousVars[2011+C1] == 23) msgalpha = 0.57;
        if (MiscellaneousVars[2011+C1] == 24) msgalpha = 0.585;
        if (MiscellaneousVars[2011+C1] == 25) msgalpha = 0.60;
        if (MiscellaneousVars[2011+C1] == 26) msgalpha = 0.615;
        if (MiscellaneousVars[2011+C1] == 27) msgalpha = 0.63;
        if (MiscellaneousVars[2011+C1] == 28) msgalpha = 0.645;
        if (MiscellaneousVars[2011+C1] == 29) msgalpha = 0.66;
        if (MiscellaneousVars[2011+C1] == 30) msgalpha = 0.675;
        if (MiscellaneousVars[2011+C1] == 31) msgalpha = 0.69;
        if (MiscellaneousVars[2011+C1] == 32) msgalpha = 0.705;
        if (MiscellaneousVars[2011+C1] == 33) msgalpha = 0.72;
        if (MiscellaneousVars[2011+C1] == 34) msgalpha = 0.735;
        if (MiscellaneousVars[2011+C1] == 35) { msgalpha = 0.75; MiscellaneousVars[2011+C1] = 1; }
        SetFont("SPLINOUS");
        HudMessage(s:"A";HUDMSG_ALPHA,7876+C1,cr_red,xpos,ypos,0.036,msgalpha); // Not Enough Mana
       }
       else
       {
        MiscellaneousVars[2011+C1] = 0;
       }

       if ((ReadiedSpells[C1] - 1) == 0) SetFont("SPLIMAM1"); // (Minor Magic Missile) Level 0
       if ((ReadiedSpells[C1] - 1) == 1) SetFont("SPLIHEA1"); // (Minor Healing) Level 0
       if ((ReadiedSpells[C1] - 1) == 2) SetFont("SPLINGV1"); // (Minor Night Vision) Level 1
       if ((ReadiedSpells[C1] - 1) == 3) SetFont("SPLICHL1"); // (Chill Touch) Level 1
       if ((ReadiedSpells[C1] - 1) == 4) SetFont("SPLIIVS1"); // (Minor Invisibility) Level 2
       if ((ReadiedSpells[C1] - 1) == 5) SetFont("SPLIFLI1"); // (Minor Flight) Level 2
       if ((ReadiedSpells[C1] - 1) == 6) SetFont("SPLIPSC1"); // (Minor Poison Cloud) Level 3
       if ((ReadiedSpells[C1] - 1) == 7) SetFont("SPLIFBL1"); // (Minor Fireball) Level 4
       if ((ReadiedSpells[C1] - 1) == 8) SetFont("SPLIENST"); // (Enhanced Strength) Level 5
       if ((ReadiedSpells[C1] - 1) == 9) SetFont("SPLIICB1"); // (Minor Ice Blast) Level 6
       if ((ReadiedSpells[C1] - 1) == 10) SetFont("SPLISUM1"); // (Summon Weak Monster) Level 7
       if ((ReadiedSpells[C1] - 1) == 11) SetFont("SPLIMAM2"); // (Magic Missile) Level 7
       if ((ReadiedSpells[C1] - 1) == 12) SetFont("SPLIFBL2"); // (Fireball) Level 8
       if ((ReadiedSpells[C1] - 1) == 13) SetFont("SPLIGLY1"); // (Explosive Glyph) Level 9
       if ((ReadiedSpells[C1] - 1) == 14) SetFont("SPLIHEA2"); // (Healing) Level 9
       if ((ReadiedSpells[C1] - 1) == 15) SetFont("SPLINVFR"); // (Fireball Nova) Level 10
       if ((ReadiedSpells[C1] - 1) == 16) SetFont("SPLISTL1"); // (Minor Stealth) Level 11
       if ((ReadiedSpells[C1] - 1) == 17) SetFont("SPLIIVN1"); // (Minor Invulnerability) Level 11
       if ((ReadiedSpells[C1] - 1) == 18) SetFont("SPLIIVS2"); // (Invisibility) Level 11
       if ((ReadiedSpells[C1] - 1) == 19) SetFont("SPLIACRA"); // (Acid Rain) Level 12
       if ((ReadiedSpells[C1] - 1) == 20) SetFont("SPLIGLY2"); // (Freezing Glyph) Level 12
       if ((ReadiedSpells[C1] - 1) == 21) SetFont("SPLINGV2"); // (Night-Vision) Level 13
       if ((ReadiedSpells[C1] - 1) == 22) SetFont("SPLIFLI2"); // (Flight) Level 13
       if ((ReadiedSpells[C1] - 1) == 23) SetFont("SPLIMAM3"); // (Major Magic Missile) Level 14
       if ((ReadiedSpells[C1] - 1) == 24) SetFont("SPLISUM2"); // (Summon Monster) Level 15
       if ((ReadiedSpells[C1] - 1) == 25) SetFont("SPLINVIC"); // (Icy Nova) Level 16
       if ((ReadiedSpells[C1] - 1) == 26) SetFont("SPLIPSC2"); // (Poison Cloud) Level 16
       if ((ReadiedSpells[C1] - 1) == 27) SetFont("SPLILGN1"); // (Minor Lightning) Level 17
       if ((ReadiedSpells[C1] - 1) == 28) SetFont("SPLISTSK"); // (Stone Skin) Level 18
       if ((ReadiedSpells[C1] - 1) == 29) SetFont("SPLIHEA3"); // (Major Healing) Level 18
       if ((ReadiedSpells[C1] - 1) == 30) SetFont("SPLINGV3"); // (Major Night-Vision) Level 19
       if ((ReadiedSpells[C1] - 1) == 31) SetFont("SPLIICB2"); // (Ice Blast) Level 20
       if ((ReadiedSpells[C1] - 1) == 32) SetFont("SPLIFARS"); // (Farsight) Level 20
       if ((ReadiedSpells[C1] - 1) == 33) SetFont("SPLINVLG"); // (Lightning Nova) Level 20
       if ((ReadiedSpells[C1] - 1) == 34) SetFont("SPLISTL2"); // (Stealth) Level 21
       if ((ReadiedSpells[C1] - 1) == 35) SetFont("SPLIIVN2"); // (Invulnerability) Level 21
       if ((ReadiedSpells[C1] - 1) == 36) SetFont("SPLIIVS3"); // (Major Invisibility) Level 21
       if ((ReadiedSpells[C1] - 1) == 37) SetFont("SPLIFLI3"); // (Major Flight) Level 21
       if ((ReadiedSpells[C1] - 1) == 38) SetFont("SPLILGN2"); // (Lightning) Level 22
       if ((ReadiedSpells[C1] - 1) == 39) SetFont("SPLISUM3"); // (Summon Strong Monster) Level 23
       if ((ReadiedSpells[C1] - 1) == 40) // (Diamond Skin) [Deggaris/Illucia] or (Spreader Aura Lv. 1) [Flora] Level 24
       {
        if (CharacterClass == 2) SetFont("SPLISRA1"); else SetFont("SPLIDISK");
       }
       if ((ReadiedSpells[C1] - 1) == 41) SetFont("SPLIFBL3"); // (Major Fireball) Level 25
       if ((ReadiedSpells[C1] - 1) == 42) SetFont("SPLIICB3"); // (Major Ice Blast) Level 25
       if ((ReadiedSpells[C1] - 1) == 43) SetFont("SPLIPSC3"); // (Major Poison Cloud) Level 25
       if ((ReadiedSpells[C1] - 1) == 44) SetFont("SPLILGN3"); // (Major Lightning) Level 25
       if ((ReadiedSpells[C1] - 1) == 45) SetFont("SPLIIVN3"); // (Major Invulnerability) Level 26
       if ((ReadiedSpells[C1] - 1) == 46) SetFont("SPLISTL3"); // (Major Stealth) Level 26 
       if ((ReadiedSpells[C1] - 1) == 47) SetFont("SPLIRASP"); // (Raging Spirits) Level 27
       if ((ReadiedSpells[C1] - 1) == 48) SetFont("SPLISUM4"); // (Summon Arch-Vile) Level 28
       if ((ReadiedSpells[C1] - 1) == 49) SetFont("SPLIMAM4"); // (Ultra Magic Missile) Level 29
       if ((ReadiedSpells[C1] - 1) == 50) SetFont("SPLITMFR"); // (Time Freezer) Level 30
       if ((ReadiedSpells[C1] - 1) == 51) SetFont("SPLIFRAR"); // (Terrorization Aura) Level 30
       if ((ReadiedSpells[C1] - 1) == 52) SetFont("SPLICRLA"); // (Create Lotso Ammo) Level 30
       if ((ReadiedSpells[C1] - 1) == 53) SetFont("SPLIDVAV"); // (Divine Avatar) Level 31
       if ((ReadiedSpells[C1] - 1) == 54) SetFont("SPLISUM5"); // (Summon Cyberdemon) Level 31
       if ((ReadiedSpells[C1] - 1) == 55) SetFont("SPLISRA2"); // (Spreader Aura Lv. 2) Level 56 [Flora Only]
       HudMessage(s:"A";HUDMSG_ALPHA,7887+C1,cr_untranslated,xpos,ypos,0.036,0.75);
      }
      else
      {
       SetFont("SPLINONE");
       HudMessage(s:"A";HUDMSG_ALPHA,7887+C1,cr_untranslated,xpos,ypos,0.036,0.75);
      }

     }


     xpos = ScreenXOffset + 320.0;
     ypos = 1025.0;
     if (CharacterClass == 0) SetFont("QKSPLDEG");
     if (CharacterClass == 1) SetFont("QKSPLILL");
     if (CharacterClass == 2) SetFont("QKSPLFLO");
     HudMessage(s:"A";HUDMSG_ALPHA,7898,cr_untranslated,xpos,ypos,0.036,0.75);

     //*************************
     //**Spell Box [7991 to 7999]**
     //*************************
     // Spell Cost
     xpos = ScreenXOffset + 587.0;
     ypos = 792.0; // 792.0
     SetFont("DQHUDFONTSTATUS");
     G1 = SpellCostCheck(SelectedSpell);
     HudMessage(d:G1;HUDMSG_ALPHA,7991,cr_lightblue,xpos,ypos,0.036,0.875); // Not Enough Mana

     SetFont("DQHUDFONTSTATUS");

     // Spell "<" Button
     xpos = ScreenXOffset + 536.0;
     ypos = 786.0;
     HudMessage(s:"<";HUDMSG_ALPHA,7992,cr_white,xpos,ypos,0.036,0.875); // 2222 to overlap, or 7777 or underlap

     // Spell ">" Button
     xpos = ScreenXOffset + 634.0;
     ypos = 786.0;
     HudMessage(s:">";HUDMSG_ALPHA,7993,cr_white,xpos,ypos,0.036,0.875); // 2222 to overlap, or 7777 or underlap

     // Spell "Left" Button
     xpos = ScreenXOffset + 543.0 + 0.2; // 543.2
     if (xpos < 0.0) xpos -= 0.4;
     ypos = 763.0; // 761.0
     Keyname = "pukename SpellSelection 0";
     HudMessage(k:Keyname;HUDMSG_ALPHA,7994,cr_white,xpos,ypos,0.036,0.875); // 2222 to overlap, or 7777 or underlap

     // Spell "Right" Button
     xpos = ScreenXOffset + 629.0 + 0.1; // 629.1
     if (xpos < 0.0) xpos -= 0.2;
     ypos = 763.0; // 761.0
     Keyname = "pukename SpellSelection 1";
     HudMessage(k:Keyname;HUDMSG_ALPHA,7995,cr_white,xpos,ypos,0.036,0.875); // 2222 to overlap, or 7777 or underlap

     // Spell "Use" Button
     xpos = ScreenXOffset + 585.0; // 585.0
     ypos = 820.0; // 820.0
     Keyname = "pukename SpellCasting 0";
     HudMessage(k:Keyname;HUDMSG_ALPHA,7996,cr_white,xpos,ypos,0.036,0.875); // 2222 to overlap, or 7777 or underlap

     // Icon Shown on Spell Box
     xpos = ScreenXOffset + 587.0; // 587.0
     ypos = 768.0; // 768.0
     SetFont("SPLINONE");

     // Function Ran
     G1 = SpellCostCheck(SelectedSpell); // Function testing to come later :P
     // Function Ran
     G4 = CurrentMana / SpellCostCheck(SelectedSpell);
 
     if (CurrentMana < G1)
     {
      msgalpha = 0.75;
      MiscellaneousVars[2010] += 1;
      if (MiscellaneousVars[2010] == 1) msgalpha = 0.75;
      if (MiscellaneousVars[2010] == 2) msgalpha = 0.735;
      if (MiscellaneousVars[2010] == 3) msgalpha = 0.72;
      if (MiscellaneousVars[2010] == 4) msgalpha = 0.705;
      if (MiscellaneousVars[2010] == 5) msgalpha = 0.69;
      if (MiscellaneousVars[2010] == 6) msgalpha = 0.675;
      if (MiscellaneousVars[2010] == 7) msgalpha = 0.66;
      if (MiscellaneousVars[2010] == 8) msgalpha = 0.645;
      if (MiscellaneousVars[2010] == 9) msgalpha = 0.63;
      if (MiscellaneousVars[2010] == 10) msgalpha = 0.615;
      if (MiscellaneousVars[2010] == 11) msgalpha = 0.60;
      if (MiscellaneousVars[2010] == 12) msgalpha = 0.585;
      if (MiscellaneousVars[2010] == 13) msgalpha = 0.57;
      if (MiscellaneousVars[2010] == 14) msgalpha = 0.555;
      if (MiscellaneousVars[2010] == 15) msgalpha = 0.54;
      if (MiscellaneousVars[2010] == 16) msgalpha = 0.525;
      if (MiscellaneousVars[2010] == 17) msgalpha = 0.51;
      if (MiscellaneousVars[2010] == 18) msgalpha = 0.495;
      if (MiscellaneousVars[2010] == 19) msgalpha = 0.51;
      if (MiscellaneousVars[2010] == 20) msgalpha = 0.525;
      if (MiscellaneousVars[2010] == 21) msgalpha = 0.54;
      if (MiscellaneousVars[2010] == 22) msgalpha = 0.555;
      if (MiscellaneousVars[2010] == 23) msgalpha = 0.57;
      if (MiscellaneousVars[2010] == 24) msgalpha = 0.585;
      if (MiscellaneousVars[2010] == 25) msgalpha = 0.60;
      if (MiscellaneousVars[2010] == 26) msgalpha = 0.615;
      if (MiscellaneousVars[2010] == 27) msgalpha = 0.63;
      if (MiscellaneousVars[2010] == 28) msgalpha = 0.645;
      if (MiscellaneousVars[2010] == 29) msgalpha = 0.66;
      if (MiscellaneousVars[2010] == 30) msgalpha = 0.675;
      if (MiscellaneousVars[2010] == 31) msgalpha = 0.69;
      if (MiscellaneousVars[2010] == 32) msgalpha = 0.705;
      if (MiscellaneousVars[2010] == 33) msgalpha = 0.72;
      if (MiscellaneousVars[2010] == 34) msgalpha = 0.735;
      if (MiscellaneousVars[2010] == 35) { msgalpha = 0.75; MiscellaneousVars[2010] = 1; }
      SetFont("SPLINOUS");
      HudMessage(s:"A";HUDMSG_ALPHA,7997,cr_red,xpos,ypos,0.036,msgalpha); // Not Enough Mana
     }
     else
     {
      MiscellaneousVars[2010] = 0;
     }

     if (SelectedSpell == 0) SetFont("SPLIMAM1"); // (Minor Magic Missile) Level 0
     if (SelectedSpell == 1) SetFont("SPLIHEA1"); // (Minor Healing) Level 0
     if (SelectedSpell == 2) SetFont("SPLINGV1"); // (Minor Night Vision) Level 1
     if (SelectedSpell == 3) SetFont("SPLICHL1"); // (Chill Touch) Level 1
     if (SelectedSpell == 4) SetFont("SPLIIVS1"); // (Minor Invisibility) Level 2
     if (SelectedSpell == 5) SetFont("SPLIFLI1"); // (Minor Flight) Level 2
     if (SelectedSpell == 6) SetFont("SPLIPSC1"); // (Minor Poison Cloud) Level 3
     if (SelectedSpell == 7) SetFont("SPLIFBL1"); // (Minor Fireball) Level 4
     if (SelectedSpell == 8) SetFont("SPLIENST"); // (Enhanced Strength) Level 5
     if (SelectedSpell == 9) SetFont("SPLIICB1"); // (Minor Ice Blast) Level 6
     if (SelectedSpell == 10) SetFont("SPLISUM1"); // (Summon Weak Monster) Level 7
     if (SelectedSpell == 11) SetFont("SPLIMAM2"); // (Magic Missile) Level 7
     if (SelectedSpell == 12) SetFont("SPLIFBL2"); // (Fireball) Level 8
     if (SelectedSpell == 13) SetFont("SPLIGLY1"); // (Explosive Glyph) Level 9
     if (SelectedSpell == 14) SetFont("SPLIHEA2"); // (Healing) Level 9
     if (SelectedSpell == 15) SetFont("SPLINVFR"); // (Fireball Nova) Level 10
     if (SelectedSpell == 16) SetFont("SPLISTL1"); // (Minor Stealth) Level 11
     if (SelectedSpell == 17) SetFont("SPLIIVN1"); // (Minor Invulnerability) Level 11
     if (SelectedSpell == 18) SetFont("SPLIIVS2"); // (Invisibility) Level 11
     if (SelectedSpell == 19) SetFont("SPLIACRA"); // (Acid Rain) Level 12
     if (SelectedSpell == 20) SetFont("SPLIGLY2"); // (Freezing Glyph) Level 12
     if (SelectedSpell == 21) SetFont("SPLINGV2"); // (Night-Vision) Level 13
     if (SelectedSpell == 22) SetFont("SPLIFLI2"); // (Flight) Level 13
     if (SelectedSpell == 23) SetFont("SPLIMAM3"); // (Major Magic Missile) Level 14
     if (SelectedSpell == 24) SetFont("SPLISUM2"); // (Summon Monster) Level 15
     if (SelectedSpell == 25) SetFont("SPLINVIC"); // (Icy Nova) Level 16
     if (SelectedSpell == 26) SetFont("SPLIPSC2"); // (Poison Cloud) Level 16
     if (SelectedSpell == 27) SetFont("SPLILGN1"); // (Minor Lightning) Level 17
     if (SelectedSpell == 28) SetFont("SPLISTSK"); // (Stone Skin) Level 18
     if (SelectedSpell == 29) SetFont("SPLIHEA3"); // (Major Healing) Level 18
     if (SelectedSpell == 30) SetFont("SPLINGV3"); // (Major Night-Vision) Level 19
     if (SelectedSpell == 31) SetFont("SPLIICB2"); // (Ice Blast) Level 20
     if (SelectedSpell == 32) SetFont("SPLIFARS"); // (Farsight) Level 20
     if (SelectedSpell == 33) SetFont("SPLINVLG"); // (Lightning Nova) Level 20
     if (SelectedSpell == 34) SetFont("SPLISTL2"); // (Stealth) Level 21
     if (SelectedSpell == 35) SetFont("SPLIIVN2"); // (Invulnerability) Level 21
     if (SelectedSpell == 36) SetFont("SPLIIVS3"); // (Major Invisibility) Level 21
     if (SelectedSpell == 37) SetFont("SPLIFLI3"); // (Major Flight) Level 21
     if (SelectedSpell == 38) SetFont("SPLILGN2"); // (Lightning) Level 22
     if (SelectedSpell == 39) SetFont("SPLISUM3"); // (Summon Strong Monster) Level 23
     if (SelectedSpell == 40) // (Diamond Skin) [Deggaris/Illucia] or (Spreader Aura Lv. 1) [Flora] Level 24
     {
      if (CharacterClass == 2) SetFont("SPLISRA1"); else SetFont("SPLIDISK");
     }
     if (SelectedSpell == 41) SetFont("SPLIFBL3"); // (Major Fireball) Level 25
     if (SelectedSpell == 42) SetFont("SPLIICB3"); // (Major Ice Blast) Level 25
     if (SelectedSpell == 43) SetFont("SPLIPSC3"); // (Major Poison Cloud) Level 25
     if (SelectedSpell == 44) SetFont("SPLILGN3"); // (Major Lightning) Level 25
     if (SelectedSpell == 45) SetFont("SPLIIVN3"); // (Major Invulnerability) Level 26
     if (SelectedSpell == 46) SetFont("SPLISTL3"); // (Major Stealth) Level 26 
     if (SelectedSpell == 47) SetFont("SPLIRASP"); // (Raging Spirits) Level 27
     if (SelectedSpell == 48) SetFont("SPLISUM4"); // (Summon Arch-Vile) Level 28
     if (SelectedSpell == 49) SetFont("SPLIMAM4"); // (Ultra Magic Missile) Level 29
     if (SelectedSpell == 50) SetFont("SPLITMFR"); // (Time Freezer) Level 30
     if (SelectedSpell == 51) SetFont("SPLIFRAR"); // (Terrorization Aura) Level 30
     if (SelectedSpell == 52) SetFont("SPLICRLA"); // (Create Lotso Ammo) Level 30
     if (SelectedSpell == 53) SetFont("SPLIDVAV"); // (Divine Avatar) Level 31
     if (SelectedSpell == 54) SetFont("SPLISUM5"); // (Summon Cyberdemon) Level 31
     if (SelectedSpell == 55) SetFont("SPLISRA2"); // (Spreader Aura Lv. 2) Level 56 [Flora Only]
     HudMessage(s:"A";HUDMSG_ALPHA,7998,cr_untranslated,xpos,ypos,0.036,0.75);
     //PrintBold(d:CurrentMana,s:" / ",d:G1);

     // Spell Box
     xpos = ScreenXOffset + 586.0; // 586.0;
     ypos = 770.0; // 789.0;
     if (CharacterClass == 0) SetFont("SPLBXDEG");
     if (CharacterClass == 1) SetFont("SPLBXILL");
     if (CharacterClass == 2) SetFont("SPLBXFLO");
     HudMessage(s:"A";HUDMSG_ALPHA,7999,cr_untranslated,xpos,ypos,0.036,0.75);



     //*******************************************
     //** EXP-Gains/Kills/Combos [2001 to 2500?]**
     //*******************************************
     if (EXPGainChecker == 1)
     {
      if (MiscellaneousVars[157] > 0)
      {
       // Combo Meter Frames
       xpos = ScreenXOffset + 129.0;
       ypos = 772.0;
       SetFont("KLBFRAME");
       HudMessage(s:"A";HUDMSG_ALPHA,2006,cr_untranslated,xpos,ypos,0.036,0.75);

       // Combo Meter Notches
       xpos = ScreenXOffset + 79.0; // MiscFixedVars[1];
       ypos = 772.0; // MiscFixedVars[2];
       msgalpha = 0.75;

       if (PowerupTimer[7] > 0) MaxEXPCombotimer = 7000; else MaxEXPCombotimer = 5600;
       // Combo Timer Bar
       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       G9 = 100 / G10;
       Z1 = MiscellaneousVars[157];
       Z2 = MaxEXPCombotimer;
       I1 = Z1 * G9 / Z2;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
       {
        if (Z2 != 0)
        {
         if (C1 <= I1)
         {
          if (G10 == 4) { SetFont("KLBNOTC4"); G11 = -2.0; }
          if (G10 == 2) { SetFont("KLBNOTC2"); G11 = -1.0; }
          if (G10 == 1) { SetFont("KLBNOTCH"); G11 = 0.0; }
         }
         else SetFont("KLBNOTEM");
         I2 = ((C1 << 16) * G10) + G11;
         HudMessage(s:"A";HUDMSG_ALPHA,C1+2010,cr_untranslated,xpos+I2,ypos,0.036,0.75);
        }
       }
       // Combo Meter Glass
       xpos = ScreenXOffset + 129.0;
       ypos = 772.0;
       SetFont("KLBGLASS");
       HudMessage(s:"A";HUDMSG_ALPHA,2111,cr_untranslated,xpos,ypos,0.036,0.75);
      }

      // # of Kills
      if (MiscellaneousVars[158] > 0)
      {
       SetFont("DQHUDFONT");
       xpos = ScreenXOffset + 108.0 + 0.2;
       if (xpos < 0.0) xpos -= 0.4;
       //Print(f:xpos);
       ypos = 750.0;
       HudMessage(d:MiscellaneousVars[158];HUDMSG_ALPHA,2112,cr_green,xpos,ypos,0.036,0.875);
       SetFont("DQHUDFONTSML");
       // "Kills" Label
       xpos = ScreenXOffset + 120.0 + 0.1;
       if (xpos < 0.0) xpos -= 0.2;
       ypos = 755.0;
       if (MiscellaneousVars[158] == 1) HudMessage(s:"KILL";HUDMSG_ALPHA,2113,cr_green,xpos,ypos,0.036,0.875);
       else HudMessage(s:"KILLS";HUDMSG_ALPHA,2113,cr_green,xpos,ypos,0.036,0.875);
      }

      // "OVERKILL" text
      xpos = ScreenXOffset + 312.0; // MiscFixedVars[1];
      ypos = 712.0; // MiscFixedVars[2];
      if (MiscellaneousVars[2023] > 0) // Overkill timer
      {
       if (MiscellaneousVars[2022] == 1)
       {
        SetFont("DQHUDFONTSML");
        HudMessage(s:"OVERKILL!";HUDMSG_ALPHA,2114,cr_red,xpos,ypos,0.036,0.875);
       }
       if (MiscellaneousVars[2022] == 2)
       {
        SetFont("DQHUDFONTSML");
        HudMessage(s:"\c[purple]OVERKILL!!";HUDMSG_ALPHA,2114,cr_red,xpos,ypos,0.036,0.875);
       }
       MiscellaneousVars[2023] -= 1;
      }

      // EXP [from last kill]
      if (MiscellaneousVars[2026] > 0)
      {
       xpos = ScreenXOffset + 222.0 + 0.1;
       if (xpos < 0.0) xpos -= 0.2;
       ypos = 741.0;
       if (MiscellaneousVars[2024]-MiscellaneousVars[2025] > 1) HudMessage(s:"+",d:MiscellaneousVars[2024],s:" EXP (+",d:MiscellaneousVars[2024]-MiscellaneousVars[2025],s:")";HUDMSG_ALPHA,2115,cr_blue,xpos,ypos,0.036,0.875);
       else HudMessage(s:"+",d:MiscellaneousVars[2024],s:" EXP";HUDMSG_ALPHA,2115,cr_blue,xpos,ypos,0.036,0.875);
       MiscellaneousVars[2026] -= 1;
      }

      // EXP Total + Combo Bonus [combo]
      if (MiscellaneousVars[158] > 1 && MiscellaneousVars[160] > 0)
      {
       xpos = ScreenXOffset + 222.0 + 0.1;
       if (xpos < 0.0) xpos -= 0.2;
       ypos = 769.0;
       MultiLower = (MiscellaneousVars[159] - 10000) % 100;
       MultiUpper = ((MiscellaneousVars[159] - 10000) - MultiLower) / 100;

       SetFont("DQHUDFONTSML");
       if (MultiLower > -1 && MultiLower < 10) HudMessage(s:"+",d:MiscellaneousVars[160],s:" EXP (+",d:MultiUpper,s:".0",d:MultiLower,s:"%)";HUDMSG_ALPHA,2116,cr_gold,xpos,ypos,0.036,0.875);
       else HudMessage(s:"+",d:MiscellaneousVars[160],s:" EXP (+",d:MultiUpper,s:".",d:MultiLower,s:"%)";HUDMSG_ALPHA,2116,cr_gold,xpos,ypos,0.036,0.875);
      }
     }



     //***************************
     //** HP Info [2498 to 3001]**
     //***************************
     G3 = GetActorProperty(1001,APROP_Health);
     G2 = MaxHealthTrue; // Max Health for player
     // HP Label
     xpos = ScreenXOffset + 220.0;
     ypos = 868.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"HP";HUDMSG_ALPHA,2502,cr_white,xpos,ypos,0.036,0.875);

     // HP Gained during "LEVEL UP"
     // MiscellaneousVars[2031] = MaxHP
     xpos = ScreenXOffset + 388.0 + 0.1;
     if (xpos < 0.0) xpos -= 0.2;
     ypos = 862.0;
     SetFont("DQHUDFONTSML");
     //HudMessage(s:"+ ";HUDMSG_ALPHA,2503,cr_white,xpos,ypos,0.036,0.875);
     if (MiscellaneousVars[222] > 0)
     {
      HudMessage(s:"+ ",d:MiscellaneousVars[222];HUDMSG_ALPHA,2500,cr_gold,xpos,ypos,0.036,1.0);
     }

     // HP Amounts
     // HPInterpolationDisplay;
     xpos = ScreenXOffset + 326.0;
     ypos = 872.0;
     SetFont("DQHUDFONTSML");
     HudMessage(d:G3,s:"/",d:G2;HUDMSG_ALPHA,2504,cr_white,xpos,ypos,0.036,0.875);

     if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
     {
      // HP Meter Border
      xpos = ScreenXOffset + 325.0;
      ypos = 870.0;
      G3 = GetActorProperty(1001,APROP_Health);
      G2 = MaxHealthTrue; // Max Health for player
      if (G2 != 0)
      {
       I1 = G3 * 200 / G2;
       if (I1 <= 20) // If Health is "Critical" [10% or less]
       {
        msgalpha = 0.75 ;
        MiscellaneousVars[2003] += 1;
        if (MiscellaneousVars[2003] == 1) msgalpha = 0.75;
        if (MiscellaneousVars[2003] == 2) msgalpha = 0.735;
        if (MiscellaneousVars[2003] == 3) msgalpha = 0.72;
        if (MiscellaneousVars[2003] == 4) msgalpha = 0.705;
        if (MiscellaneousVars[2003] == 5) msgalpha = 0.69;
        if (MiscellaneousVars[2003] == 6) msgalpha = 0.675;
        if (MiscellaneousVars[2003] == 7) msgalpha = 0.66;
        if (MiscellaneousVars[2003] == 8) msgalpha = 0.645;
        if (MiscellaneousVars[2003] == 9) msgalpha = 0.63;
        if (MiscellaneousVars[2003] == 10) msgalpha = 0.615;
        if (MiscellaneousVars[2003] == 11) msgalpha = 0.60;
        if (MiscellaneousVars[2003] == 12) msgalpha = 0.585;
        if (MiscellaneousVars[2003] == 13) msgalpha = 0.57;
        if (MiscellaneousVars[2003] == 14) msgalpha = 0.555;
        if (MiscellaneousVars[2003] == 15) msgalpha = 0.54;
        if (MiscellaneousVars[2003] == 16) msgalpha = 0.525;
        if (MiscellaneousVars[2003] == 17) msgalpha = 0.51;
        if (MiscellaneousVars[2003] == 18) msgalpha = 0.495;
        if (MiscellaneousVars[2003] == 19) msgalpha = 0.51;
        if (MiscellaneousVars[2003] == 20) msgalpha = 0.525;
        if (MiscellaneousVars[2003] == 21) msgalpha = 0.54;
        if (MiscellaneousVars[2003] == 22) msgalpha = 0.555;
        if (MiscellaneousVars[2003] == 23) msgalpha = 0.57;
        if (MiscellaneousVars[2003] == 24) msgalpha = 0.585;
        if (MiscellaneousVars[2003] == 25) msgalpha = 0.60;
        if (MiscellaneousVars[2003] == 26) msgalpha = 0.615;
        if (MiscellaneousVars[2003] == 27) msgalpha = 0.63;
        if (MiscellaneousVars[2003] == 28) msgalpha = 0.645;
        if (MiscellaneousVars[2003] == 29) msgalpha = 0.66;
        if (MiscellaneousVars[2003] == 30) msgalpha = 0.675;
        if (MiscellaneousVars[2003] == 31) msgalpha = 0.69;
        if (MiscellaneousVars[2003] == 32) msgalpha = 0.705;
        if (MiscellaneousVars[2003] == 33) msgalpha = 0.72;
        if (MiscellaneousVars[2003] == 34) msgalpha = 0.735;
        if (MiscellaneousVars[2003] == 35) { msgalpha = 0.75; MiscellaneousVars[2003] = 1; }
        SetFont("HPBFCRIT");
        HudMessage(s:"A";HUDMSG_ALPHA,2505,cr_untranslated,xpos,ypos,0.036,msgalpha);
       }
       else
       {
        MiscellaneousVars[2003] = 0;
       }
      }
      SetFont("HPBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,2506,cr_untranslated,xpos,ypos,0.036,0.75);

      // HP Meter Notches
      xpos = ScreenXOffset + 225.0; // 225
      ypos = 870.0; // 870
      msgalpha = 0.75;

      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      G9 = 200 / G10;
      G3 = GetActorProperty(1001,APROP_Health); // HPInterpolationDisplay
      G2 = MaxHealthTrue; // Max Health for player
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("HPBFILN4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("HPBFILN2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("HPBFILNR"); G11 = 1.0; }
        }
        else SetFont("BARNOFIL");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+2800,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
       if (GetCVar("dvdsnewhud_showoverlifenotches") == 1)
       {
        // Overlife
        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 200 / G10;
        G3 = GetActorProperty(1001,APROP_Health);
        G2 = MaxHealthTrue; // Max Health for player
        I1 = (G3 * G9 / G2) - G9; 
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
        if (G2 != 0 && I1 > 0)
        {
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("HPBFILO4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("HPBFILO2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("HPBFILOV"); G11 = 1.0; }
          }
          else SetFont("BARNOFIL");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+2600,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
        }
       }
      }

      // HP Meter Glass
      xpos = ScreenXOffset + 326.0;
      ypos = 870.0;
      SetFont("HPBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,3001,cr_untranslated,xpos,ypos,0.036,0.75);
     }




     //***************************
     //** MP Info [3002 to 3501]**
     //***************************
     G3 = CurrentMana;
     G2 = MaxMana;
     // MP Label
     xpos = ScreenXOffset + 220.0;
     ypos = 895.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"MP";HUDMSG_ALPHA,3002,cr_white,xpos,ypos,0.036,0.875);

     // MP Gained during "LEVEL UP"
     // MiscellaneousVars[2032] = MaxMP
     xpos = ScreenXOffset + 388.0 + 0.1;
     if (xpos < 0.0) xpos -= 0.2;
     ypos = 889.0;
     SetFont("DQHUDFONTSML");
     //HudMessage(s:"+ ";HUDMSG_ALPHA,2503,cr_white,xpos,ypos,0.036,0.875);
     if (MiscellaneousVars[223] > 0)
     {
      HudMessage(s:"+ ",d:MiscellaneousVars[223];HUDMSG_ALPHA,2501,cr_gold,xpos,ypos,0.036,1.0);
     }

     // MP Amounts
     xpos = ScreenXOffset + 326.0;
     ypos = 899.0;
     SetFont("DQHUDFONTSML");
     HudMessage(d:G3,s:"/",d:G2;HUDMSG_ALPHA,3004,cr_white,xpos,ypos,0.036,0.875);

     if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
     {
      // MP Meter Border
      xpos = ScreenXOffset + 324.0;
      ypos = 897.0;
 
      if (MiscellaneousVars[212] > 0) // Focusing
      {
        msgalpha = 0.75;
        MiscellaneousVars[2004] += 1;
        if (MiscellaneousVars[231] >= 350) MiscellaneousVars[2004] += 1;
        if (MiscellaneousVars[231] >= 2100) MiscellaneousVars[2004] += 1;
        if (MiscellaneousVars[2004] == 1) msgalpha = 0.75;
        if (MiscellaneousVars[2004] == 2) msgalpha = 0.735;
        if (MiscellaneousVars[2004] == 3) msgalpha = 0.72;
        if (MiscellaneousVars[2004] == 4) msgalpha = 0.705;
        if (MiscellaneousVars[2004] == 5) msgalpha = 0.69;
        if (MiscellaneousVars[2004] == 6) msgalpha = 0.675;
        if (MiscellaneousVars[2004] == 7) msgalpha = 0.66;
        if (MiscellaneousVars[2004] == 8) msgalpha = 0.645;
        if (MiscellaneousVars[2004] == 9) msgalpha = 0.63;
        if (MiscellaneousVars[2004] == 10) msgalpha = 0.615;
        if (MiscellaneousVars[2004] == 11) msgalpha = 0.60;
        if (MiscellaneousVars[2004] == 12) msgalpha = 0.585;
        if (MiscellaneousVars[2004] == 13) msgalpha = 0.57;
        if (MiscellaneousVars[2004] == 14) msgalpha = 0.555;
        if (MiscellaneousVars[2004] == 15) msgalpha = 0.54;
        if (MiscellaneousVars[2004] == 16) msgalpha = 0.525;
        if (MiscellaneousVars[2004] == 17) msgalpha = 0.51;
        if (MiscellaneousVars[2004] == 18) msgalpha = 0.495;
        if (MiscellaneousVars[2004] == 19) msgalpha = 0.51;
        if (MiscellaneousVars[2004] == 20) msgalpha = 0.525;
        if (MiscellaneousVars[2004] == 21) msgalpha = 0.54;
        if (MiscellaneousVars[2004] == 22) msgalpha = 0.555;
        if (MiscellaneousVars[2004] == 23) msgalpha = 0.57;
        if (MiscellaneousVars[2004] == 24) msgalpha = 0.585;
        if (MiscellaneousVars[2004] == 25) msgalpha = 0.60;
        if (MiscellaneousVars[2004] == 26) msgalpha = 0.615;
        if (MiscellaneousVars[2004] == 27) msgalpha = 0.63;
        if (MiscellaneousVars[2004] == 28) msgalpha = 0.645;
        if (MiscellaneousVars[2004] == 29) msgalpha = 0.66;
        if (MiscellaneousVars[2004] == 30) msgalpha = 0.675;
        if (MiscellaneousVars[2004] == 31) msgalpha = 0.69;
        if (MiscellaneousVars[2004] == 32) msgalpha = 0.705;
        if (MiscellaneousVars[2004] == 33) msgalpha = 0.72;
        if (MiscellaneousVars[2004] == 34) msgalpha = 0.735;
        if (MiscellaneousVars[2004] >= 35) { msgalpha = 0.75; MiscellaneousVars[2004] = 1; }
        SetFont("MPBFOCUS");
        HudMessage(s:"A";HUDMSG_ALPHA,3005,cr_untranslated,xpos,ypos,0.036,msgalpha);
      }
      SetFont("MPBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,3006,cr_untranslated,xpos,ypos,0.036,0.75);
 
      // MP Meter Notches
      xpos = ScreenXOffset + 225.0; // 225
      ypos = 897.0; // 870
      msgalpha = 0.75;
      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      G9 = 200 / G10;
      G3 = CurrentMana;
      G2 = MaxMana;
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("MPBFILN4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("MPBFILN2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("MPBFILNR"); G11 = 1.0; }
        }
        else SetFont("MPBFILEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+3300,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
       if (GetCVar("dvdsnewhud_showoverlifenotches") == 1)
       {
        // Overlife
        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 200 / G10;
        G3 = CurrentMana;
        G2 = MaxMana;
        I1 = (G3 * G9 / G2) - G9; 
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = 200;
        if (G2 != 0 && I1 > 0)
        {
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("MPBFILO4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("MPBFILO2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("MPBFILOV"); G11 = 1.0; }
          }
          else SetFont("MPBFILEM");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+3100,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
        }
       }
      }

      // MP Meter Glass
      xpos = ScreenXOffset + 326.0;
      ypos = 897.0;
      SetFont("MPBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,3501,cr_untranslated,xpos,ypos,0.036,0.75);
     }



     //********************************
     //** AP/HLCR Info [3502 to 4001]**
     //********************************
     // AP/HLCR Meter Border
     if (CharacterClass == 2) // Flora = HellCore/HLCR
     {
       G3 = HellcoreOverheatLevel / 100;
       // HLCR Label
       xpos = ScreenXOffset + 220.0;
       ypos = 922.0;
       SetFont("DQHUDFONTSML");
       HudMessage(s:"HLCR";HUDMSG_ALPHA,3502,cr_white,xpos,ypos,0.036,0.875);

       // HLCR Amounts
       G3 = HellcoreOverheatLevel / 100;
       G4 = HellcoreOverheatLevel % 100;
       xpos = ScreenXOffset + 326.0;
       ypos = 926.0;
       SetFont("DQHUDFONTSML");
       if (G4 < 10) HudMessage(d:G3,s:".0",d:G4,s:"%";HUDMSG_ALPHA,3503,cr_white,xpos,ypos,0.036,0.875);
       else HudMessage(d:G3,s:".",d:G4,s:"%";HUDMSG_ALPHA,3503,cr_white,xpos,ypos,0.036,0.875);
       //HudMessage(d:G3,s:"%";HUDMSG_ALPHA,3503,cr_white,xpos,ypos,0.036,0.875);

       if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
       {
        // HLCR Meter Frame
        xpos = ScreenXOffset + 320.0;
        ypos = 924.0;
 
        if (144 > 10000) // Hellcore - "Overheated" Glow
        {
         msgalpha = 0.75;
         MiscellaneousVars[2005] += 1;
         if (MiscellaneousVars[2005] == 1) msgalpha = 0.75;
         if (MiscellaneousVars[2005] == 2) msgalpha = 0.735;
         if (MiscellaneousVars[2005] == 3) msgalpha = 0.72;
         if (MiscellaneousVars[2005] == 4) msgalpha = 0.705;
         if (MiscellaneousVars[2005] == 5) msgalpha = 0.69;
         if (MiscellaneousVars[2005] == 6) msgalpha = 0.675;
         if (MiscellaneousVars[2005] == 7) msgalpha = 0.66;
         if (MiscellaneousVars[2005] == 8) msgalpha = 0.645;
         if (MiscellaneousVars[2005] == 9) msgalpha = 0.63;
         if (MiscellaneousVars[2005] == 10) msgalpha = 0.615;
         if (MiscellaneousVars[2005] == 11) msgalpha = 0.60;
         if (MiscellaneousVars[2005] == 12) msgalpha = 0.585;
         if (MiscellaneousVars[2005] == 13) msgalpha = 0.57;
         if (MiscellaneousVars[2005] == 14) msgalpha = 0.555;
         if (MiscellaneousVars[2005] == 15) msgalpha = 0.54;
         if (MiscellaneousVars[2005] == 16) msgalpha = 0.525;
         if (MiscellaneousVars[2005] == 17) msgalpha = 0.51;
         if (MiscellaneousVars[2005] == 18) msgalpha = 0.495;
         if (MiscellaneousVars[2005] == 19) msgalpha = 0.51;
         if (MiscellaneousVars[2005] == 20) msgalpha = 0.525;
         if (MiscellaneousVars[2005] == 21) msgalpha = 0.54;
         if (MiscellaneousVars[2005] == 22) msgalpha = 0.555;
         if (MiscellaneousVars[2005] == 23) msgalpha = 0.57;
         if (MiscellaneousVars[2005] == 24) msgalpha = 0.585;
         if (MiscellaneousVars[2005] == 25) msgalpha = 0.60;
         if (MiscellaneousVars[2005] == 26) msgalpha = 0.615;
         if (MiscellaneousVars[2005] == 27) msgalpha = 0.63;
         if (MiscellaneousVars[2005] == 28) msgalpha = 0.645;
         if (MiscellaneousVars[2005] == 29) msgalpha = 0.66;
         if (MiscellaneousVars[2005] == 30) msgalpha = 0.675;
         if (MiscellaneousVars[2005] == 31) msgalpha = 0.69;
         if (MiscellaneousVars[2005] == 32) msgalpha = 0.705;
         if (MiscellaneousVars[2005] == 33) msgalpha = 0.72;
         if (MiscellaneousVars[2005] == 34) msgalpha = 0.735;
         if (MiscellaneousVars[2005] == 35) { msgalpha = 0.75; MiscellaneousVars[2005] = 1; }
         SetFont("HCBOVHET");
         HudMessage(s:"A";HUDMSG_ALPHA,3504,cr_untranslated,xpos,ypos,0.036,msgalpha);
        }
        SetFont("HCBFRAME");
        HudMessage(s:"A";HUDMSG_ALPHA,3505,cr_untranslated,xpos,ypos,0.036,0.75);
 
 
        // HLCR Meter Notches
        xpos = ScreenXOffset + 225.0; // 225
        ypos = 924.0; // 870
        msgalpha = 0.75;
 
        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 200 / G10;
        G3 = HellcoreOverheatLevel;
        G2 = 10000;
        I1 = G3 * G9 / G2;
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
        if (G2 != 0)
        {
         // Normal
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("HCBFILN4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("HCBFILN2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("HCBFILNR"); G11 = 1.0; }
          }
          else SetFont("HCBFILEM");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+3800,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
         if (GetCVar("dvdsnewhud_showoverlifenotches") == 1)
         {
          // Overheat
          G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
          G9 = 200 / G10;
          G3 = HellcoreOverheatLevel;
          G2 = 10000;
          I1 = ((G3 * G9 / G2) - G9) / 9;
          if (I1 > G9) I1 = G9;
          if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
          if (I1 > 0)
          {
           for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
           {    
            if (C1 <= I1)
            {
             if (G10 == 4) { SetFont("HCBFILO4"); G11 = -2.0; }
             if (G10 == 2) { SetFont("HCBFILO2"); G11 = -1.0; }
             if (G10 == 1) { SetFont("HCBFILOV"); G11 = 1.0; }
            }
            else SetFont("HCBFILEM");
            I2 = ((C1 << 16) * G10) + G11;
            HudMessage(s:"A";HUDMSG_ALPHA,C1+3600,cr_untranslated,xpos+I2,ypos,0.036,0.75);
           }
          }
         }
        }

        // HLCR Meter Glass
        xpos = ScreenXOffset + 320.0;
        ypos = 924.0;
        SetFont("HCBGLASS");
        HudMessage(s:"A";HUDMSG_ALPHA,4001,cr_untranslated,xpos,ypos,0.036,0.75);
       }

     }
     else // Marines = AP
     {
      G3 = CheckActorInventory(1001,"Armor");
      G2 = CurrentMaxArmor;
      if (G3 > 0 && G2 > 0)
      {
       // AP Label
       xpos = ScreenXOffset + 220.0;
       ypos = 922.0;
       SetFont("DQHUDFONTSML");
       HudMessage(s:"AP";HUDMSG_ALPHA,3502,cr_white,xpos,ypos,0.036,0.875);

       // AP Amounts
       xpos = ScreenXOffset + 326.0;
       ypos = 926.0;
       SetFont("DQHUDFONTSML");
       HudMessage(d:G3,s:"/",d:G2;HUDMSG_ALPHA,3503,cr_white,xpos,ypos,0.036,0.875);

       if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
       {
        // AP Meter Type Frame
        xpos = ScreenXOffset + 324.0;
        ypos = 924.0;
        if (CurrentArmorClass > 0) // Armor Type
        {
         if (CurrentArmorClass == 1) // Green Armor
         {
          SetFont("APBGRNAR");
         }
         if (CurrentArmorClass == 2) // Blue Armor
         {
          SetFont("APBBLUAR");
         }
         if (CurrentArmorClass == 3) // Stone Skin [1]
         {
          SetFont("APBSTSK1");
         }
         if (CurrentArmorClass == 4) // Diamond Skin [1]
         {
          SetFont("APBDISK1");
         }
         if (CurrentArmorClass == 5) // Stone Skin [2]
         {
          SetFont("APBSTSK2");
         }
         if (CurrentArmorClass == 6) // Diamond Skin [2]
         {
          SetFont("APBDISK2");
         }
         HudMessage(s:"A";HUDMSG_ALPHA,3504,cr_untranslated,xpos,ypos,0.036,0.75);
        }
        // AP Meter Frame
        SetFont("APBFRAME");
        HudMessage(s:"A";HUDMSG_ALPHA,3505,cr_untranslated,xpos,ypos,0.036,0.75);
 
        // AP Meter Notches
        xpos = ScreenXOffset + 225.0; // 225
        ypos = 924.0; // 870
 
        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 200 / G10;
        G3 = CheckActorInventory(1001,"Armor");
        G2 = CurrentMaxArmor;
        I1 = G3 * G9 / G2;
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
        if (G2 != 0)
        {
         // Normal
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("APBFILN4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("APBFILN2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("APBFILNR"); G11 = 1.0; }
          }
          else SetFont("APBFILEM");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+3600,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
        }

        // AP Meter Glass
        xpos = ScreenXOffset + 324.0;
        ypos = 924.0;
        SetFont("APBGLASS");
        HudMessage(s:"A";HUDMSG_ALPHA,4001,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
     }




     //********************************
     //** STAMINA Info [4002 to 4501]**
     //********************************
     G3 = ((MiscellaneousVars[21] * 100) / MiscellaneousVars[22]); // Current Stamina
     // STAM Label
     xpos = ScreenXOffset + 220.0;
     ypos = 949.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"STAM";HUDMSG_ALPHA,4002,cr_white,xpos,ypos,0.036,0.875);

     // Stamina Amounts
     G3 = ((MiscellaneousVars[21] * 10000) / MiscellaneousVars[22]) / 100;
     G4 = ((MiscellaneousVars[21] * 10000) / MiscellaneousVars[22]) % 100;
     xpos = ScreenXOffset + 326.0;
     ypos = 953.0;
     SetFont("DQHUDFONTSML");
     if (G4 < 10) HudMessage(d:G3,s:".0",d:G4,s:"%";HUDMSG_ALPHA,4003,cr_white,xpos,ypos,0.036,0.875);
     else HudMessage(d:G3,s:".",d:G4,s:"%";HUDMSG_ALPHA,4003,cr_white,xpos,ypos,0.036,0.875);

     if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
     {
      // STAM Meter Frame
      xpos = ScreenXOffset + 318.0;
      ypos = 951.0;
      if (MiscellaneousVars[212] > 0) // Stamina - "Focus Charge" Glow
      {
       msgalpha = 0.75;
       MiscellaneousVars[2006] += 1;
       if (MiscellaneousVars[2006] == 1) msgalpha = 0.75;
       if (MiscellaneousVars[2006] == 2) msgalpha = 0.735;
       if (MiscellaneousVars[2006] == 3) msgalpha = 0.72;
       if (MiscellaneousVars[2006] == 4) msgalpha = 0.705;
       if (MiscellaneousVars[2006] == 5) msgalpha = 0.69;
       if (MiscellaneousVars[2006] == 6) msgalpha = 0.675;
       if (MiscellaneousVars[2006] == 7) msgalpha = 0.66;
       if (MiscellaneousVars[2006] == 8) msgalpha = 0.645;
       if (MiscellaneousVars[2006] == 9) msgalpha = 0.63;
       if (MiscellaneousVars[2006] == 10) msgalpha = 0.615;
       if (MiscellaneousVars[2006] == 11) msgalpha = 0.60;
       if (MiscellaneousVars[2006] == 12) msgalpha = 0.585;
       if (MiscellaneousVars[2006] == 13) msgalpha = 0.57;
       if (MiscellaneousVars[2006] == 14) msgalpha = 0.555;
       if (MiscellaneousVars[2006] == 15) msgalpha = 0.54;
       if (MiscellaneousVars[2006] == 16) msgalpha = 0.525;
       if (MiscellaneousVars[2006] == 17) msgalpha = 0.51;
       if (MiscellaneousVars[2006] == 18) msgalpha = 0.495;
       if (MiscellaneousVars[2006] == 19) msgalpha = 0.51;
       if (MiscellaneousVars[2006] == 20) msgalpha = 0.525;
       if (MiscellaneousVars[2006] == 21) msgalpha = 0.54;
       if (MiscellaneousVars[2006] == 22) msgalpha = 0.555;
       if (MiscellaneousVars[2006] == 23) msgalpha = 0.57;
       if (MiscellaneousVars[2006] == 24) msgalpha = 0.585;
       if (MiscellaneousVars[2006] == 25) msgalpha = 0.60;
       if (MiscellaneousVars[2006] == 26) msgalpha = 0.615;
       if (MiscellaneousVars[2006] == 27) msgalpha = 0.63;
       if (MiscellaneousVars[2006] == 28) msgalpha = 0.645;
       if (MiscellaneousVars[2006] == 29) msgalpha = 0.66;
       if (MiscellaneousVars[2006] == 30) msgalpha = 0.675;
       if (MiscellaneousVars[2006] == 31) msgalpha = 0.69;
       if (MiscellaneousVars[2006] == 32) msgalpha = 0.705;
       if (MiscellaneousVars[2006] == 33) msgalpha = 0.72;
       if (MiscellaneousVars[2006] == 34) msgalpha = 0.735;
       if (MiscellaneousVars[2006] == 35) { msgalpha = 0.75; MiscellaneousVars[2006] = 1; }
       SetFont("SMBFOCDR");
       HudMessage(s:"A";HUDMSG_ALPHA,4004,cr_untranslated,xpos,ypos,0.036,msgalpha);
      }
 
      if (MiscellaneousVars[185] > 0) // Stamina - "Tension Charge" Glow
      {
       msgalpha = 0.75;
       MiscellaneousVars[2007] += 1;
       if (MiscellaneousVars[2007] == 1) msgalpha = 0.75;
       if (MiscellaneousVars[2007] == 2) msgalpha = 0.735;
       if (MiscellaneousVars[2007] == 3) msgalpha = 0.72;
       if (MiscellaneousVars[2007] == 4) msgalpha = 0.705;
       if (MiscellaneousVars[2007] == 5) msgalpha = 0.69;
       if (MiscellaneousVars[2007] == 6) msgalpha = 0.675;
       if (MiscellaneousVars[2007] == 7) msgalpha = 0.66;
       if (MiscellaneousVars[2007] == 8) msgalpha = 0.645;
       if (MiscellaneousVars[2007] == 9) msgalpha = 0.63;
       if (MiscellaneousVars[2007] == 10) msgalpha = 0.615;
       if (MiscellaneousVars[2007] == 11) msgalpha = 0.60;
       if (MiscellaneousVars[2007] == 12) msgalpha = 0.585;
       if (MiscellaneousVars[2007] == 13) msgalpha = 0.57;
       if (MiscellaneousVars[2007] == 14) msgalpha = 0.555;
       if (MiscellaneousVars[2007] == 15) msgalpha = 0.54;
       if (MiscellaneousVars[2007] == 16) msgalpha = 0.525;
       if (MiscellaneousVars[2007] == 17) msgalpha = 0.51;
       if (MiscellaneousVars[2007] == 18) msgalpha = 0.495;
       if (MiscellaneousVars[2007] == 19) msgalpha = 0.51;
       if (MiscellaneousVars[2007] == 20) msgalpha = 0.525;
       if (MiscellaneousVars[2007] == 21) msgalpha = 0.54;
       if (MiscellaneousVars[2007] == 22) msgalpha = 0.555;
       if (MiscellaneousVars[2007] == 23) msgalpha = 0.57;
       if (MiscellaneousVars[2007] == 24) msgalpha = 0.585;
       if (MiscellaneousVars[2007] == 25) msgalpha = 0.60;
       if (MiscellaneousVars[2007] == 26) msgalpha = 0.615;
       if (MiscellaneousVars[2007] == 27) msgalpha = 0.63;
       if (MiscellaneousVars[2007] == 28) msgalpha = 0.645;
       if (MiscellaneousVars[2007] == 29) msgalpha = 0.66;
       if (MiscellaneousVars[2007] == 30) msgalpha = 0.675;
       if (MiscellaneousVars[2007] == 31) msgalpha = 0.69;
       if (MiscellaneousVars[2007] == 32) msgalpha = 0.705;
       if (MiscellaneousVars[2007] == 33) msgalpha = 0.72;
       if (MiscellaneousVars[2007] == 34) msgalpha = 0.735;
       if (MiscellaneousVars[2007] == 35) { msgalpha = 0.75; MiscellaneousVars[2007] = 1; }
       SetFont("SMBTENDR");
       HudMessage(s:"A";HUDMSG_ALPHA,4005,cr_untranslated,xpos,ypos,0.036,msgalpha);
      }
 
      SetFont("SMBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,4006,cr_untranslated,xpos,ypos,0.036,0.75);
 
      // STAM Meter Notches
      xpos = ScreenXOffset + 225.0; // 225
      ypos = 951.0; // 870
      msgalpha = 0.75;
 
      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      G9 = 200 / G10;
      G3 = MiscellaneousVars[21];
      G2 = MiscellaneousVars[22];
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("SMBFILN4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("SMBFILN2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("SMBFILNR"); G11 = 1.0; }
        }
        else SetFont("SMBFILEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+4300,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
       if (GetCVar("dvdsnewhud_showoverlifenotches") == 1)
       {
        // Overcharge
        G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
        G9 = 200 / G10;
        G3 = MiscellaneousVars[21];
        G2 = MiscellaneousVars[22];
        I1 = ((G3 * G9 / G2) - G9) / 4;
        if (I1 > G9) I1 = G9;
        if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
        if (I1 > 0)
        {
         for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
         {    
          if (C1 <= I1)
          {
           if (G10 == 4) { SetFont("SMBFILO4"); G11 = -2.0; }
           if (G10 == 2) { SetFont("SMBFILO2"); G11 = -1.0; }
           if (G10 == 1) { SetFont("SMBFILOV"); G11 = 1.0; }
          }
          else SetFont("SMBFILEM");
          I2 = ((C1 << 16) * G10) + G11;
          HudMessage(s:"A";HUDMSG_ALPHA,C1+4100,cr_untranslated,xpos+I2,ypos,0.036,0.75);
         }
        }
       }
      }
 
      // STAM Meter Glass
      xpos = ScreenXOffset + 318.0;
      ypos = 951.0;
      SetFont("SMBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,4501,cr_untranslated,xpos,ypos,0.036,0.75);
     }


     //****************************
     //** LVL Info [4502 to 4565]**
     //****************************
     G3 = PlayerLevel;
     if (EXPGainChecker == 1)
     {
      // LVL Label
      xpos = ScreenXOffset + 470.0;
      ypos = 868.0;
      SetFont("DQHUDFONTSML");
      HudMessage(s:"LVL";HUDMSG_ALPHA,4502,cr_white,xpos,ypos,0.036,0.875);

      // LVL Amounts
      xpos = ScreenXOffset + 535.0;
      ypos = 872.0;
      SetFont("DQHUDFONTSML");
      HudMessage(d:G3;HUDMSG_ALPHA,4503,cr_white,xpos,ypos,0.036,0.875);

      if (GetCVar("dvdsnewhud_showsecondarymeters") == 1)
      {
       // LVL Meter Frame
       xpos = ScreenXOffset + 535.0;
       ypos = 870.0; 
       SetFont("LVBFRAME");
       HudMessage(s:"A";HUDMSG_ALPHA,4504,cr_untranslated,xpos,ypos,0.036,0.75);

       // LVL Meter Notches
       xpos = ScreenXOffset + 508.0;
       ypos = 870.0;
       msgalpha = 0.75;

       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       if (G10 > 2) G10 = 2;
       G9 = 50 / G10;
       G3 = PlayerLevel; // Current Player Level
       G2 = LevelCap; // Max Level for player
       I1 = G3 * G9 / G2;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       if (G2 != 0)
       {
        // Normal
        for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 51; C1 > 1; C1 --)
        {    
         if (C1 <= I1)
         {
          if (G10 > 1) { SetFont("LVBNOTC2"); G11 = -1.0; }
          if (G10 == 1) { SetFont("LVBNOTCH"); G11 = 1.0; }
         }
         else SetFont("LVBNOTEM");
         I2 = ((C1 << 16) * G10) + G11;
         HudMessage(s:"A";HUDMSG_ALPHA,C1+4510,cr_untranslated,xpos+I2,ypos,0.036,0.75);
        }
       }

       // LVL Meter Glass
       xpos = ScreenXOffset + 535.0;
       ypos = 870.0; 
       SetFont("LVBGLASS");
       HudMessage(s:"A";HUDMSG_ALPHA,4565,cr_untranslated,xpos,ypos,0.036,0.75);
      }

     }


     //****************************
     //** SV% Info [4602 to 4665]**
     //****************************
     //G3 = SurvivalWhole;
     G3 = MiscellaneousVars[232] / 10;
     G4 = MiscellaneousVars[232] % 10;
     // SV% Label
     xpos = ScreenXOffset + 470.0;
     ypos = 895.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"SV%";HUDMSG_ALPHA,4602,cr_white,xpos,ypos,0.036,0.875);

     // SV% Amounts
     xpos = ScreenXOffset + 535.0;
     ypos = 899.0;
     SetFont("DQHUDFONTSML");
     HudMessage(d:G3,s:".",d:G4;HUDMSG_ALPHA,4603,cr_white,xpos,ypos,0.036,0.875);

     if (GetCVar("dvdsnewhud_showsecondarymeters") == 1)
     {
      // SV% Meter Frame
      xpos = ScreenXOffset + 535.0;
      ypos = 897.0;
      SetFont("SVBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,4604,cr_untranslated,xpos,ypos,0.036,0.75);

      // SV% Meter Notches
      xpos = ScreenXOffset + 508.0;
      ypos = 897.0;
      msgalpha = 0.75;

      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      if (G10 > 2) G10 = 2;
      G9 = 50 / G10;
      G3 = SurvivalWhole;
      G2 = 100;
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 51; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 > 1) { SetFont("SVBNOTC2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("SVBNOTCH"); G11 = 1.0; }
        }
        else SetFont("SVBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+4610,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
      }

      // SV% Meter Glass
      xpos = ScreenXOffset + 535.0;
      ypos = 897.0;
      SetFont("SVBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,4665,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     //****************************
     //** AB% Info [4702 to 4765]**
     //****************************
     G3 = SavePercent;
     G3 = MiscellaneousVars[233] / 10;
     G4 = MiscellaneousVars[233] % 10;
     // AB% Label
     xpos = ScreenXOffset + 470.0;
     ypos = 922.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"AB%";HUDMSG_ALPHA,4702,cr_white,xpos,ypos,0.036,0.875);

     // AB% Amounts
     xpos = ScreenXOffset + 535.0;
     ypos = 926.0;
     SetFont("DQHUDFONTSML");
     HudMessage(d:G3,s:".",d:G4;HUDMSG_ALPHA,4703,cr_white,xpos,ypos,0.036,0.875);

     if (GetCVar("dvdsnewhud_showsecondarymeters") == 1)
     {
      // AB% Meter Frame
      xpos = ScreenXOffset + 535.0;
      ypos = 924.0;
      SetFont("ABBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,4704,cr_untranslated,xpos,ypos,0.036,0.75);
 
      // AB% Meter Notches
      xpos = ScreenXOffset + 508.0;
      ypos = 924.0;
      msgalpha = 0.75;

      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      if (G10 > 2) G10 = 2;
      G9 = 50 / G10;
      G3 = SavePercent; // Armor Absorbsion Rate
      G2 = 100;
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 51; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (CharacterClass == 2)
         {
          if (G10 > 1) { SetFont("ABBNOT2"); G11 = -1.0; }
          if (G10 == 1) { SetFont("ABBNOTF"); G11 = 1.0; }
         }
         else
         {
          if (G10 > 1) { SetFont("ABBNTM2"); G11 = -1.0; }
          if (G10 == 1) { SetFont("ABBNOTM"); G11 = 1.0; }
         }
        }
        else SetFont("ABBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+4710,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
      }
 
      // AB% Meter Glass
      xpos = ScreenXOffset + 535.0;
      ypos = 924.0;
      SetFont("ABBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,4765,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     //****************************
     //** EV% Info [4802 to 4865]**
     //****************************
     G3 = EvadeWhole;
     G3 = MiscellaneousVars[23] / 100;
     G4 = (MiscellaneousVars[23] % 100) / 10;
     // EV% Label
     xpos = ScreenXOffset + 470.0;
     ypos = 949.0;
     SetFont("DQHUDFONTSML");
     HudMessage(s:"EV%";HUDMSG_ALPHA,4802,cr_white,xpos,ypos,0.036,0.875);

     // EV% Amounts
     xpos = ScreenXOffset + 535.0;
     ypos = 953.0;
     SetFont("DQHUDFONTSML");
     // if (G4 < 10) HudMessage(d:G3,s:".0",d:G4;HUDMSG_ALPHA,4803,cr_white,xpos,ypos,0.036,0.875);
     HudMessage(d:G3,s:".",d:G4;HUDMSG_ALPHA,4803,cr_white,xpos,ypos,0.036,0.875);
     

     if (GetCVar("dvdsnewhud_showsecondarymeters") == 1)
     {
      // EV% Meter Frame
      xpos = ScreenXOffset + 535.0;
      ypos = 951.0;
      SetFont("EVBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,4804,cr_untranslated,xpos,ypos,0.036,0.75);

      // EV% Meter Notches
      xpos = ScreenXOffset + 508.0;
      ypos = 951.0;
      msgalpha = 0.75;


      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      if (G10 > 2) G10 = 2;
      G9 = 50 / G10;
      G3 = EvadeWhole;
      G2 = 100;
      I1 = G3 * G9 / G2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      if (G2 != 0)
      {
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 51; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 > 1) { SetFont("EVBNOTC2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("EVBNOTCH"); G11 = 1.0; }
        }
        else SetFont("EVBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+4810,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
      }

      // EV% Meter Glass
      xpos = ScreenXOffset + 535.0;
      ypos = 951.0;
      SetFont("EVBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,4865,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     //****************************
     //** EXP Info [4901 to 5106]**
     //****************************
     if (EXPGainChecker == 1)
     {
      // EXP Label
      xpos = ScreenXOffset + 204.0; 
      ypos = 972.0;
      SetFont("EXBLABEL");
      HudMessage(s:"A";HUDMSG_ALPHA,4901,cr_white,xpos,ypos,0.036,0.875);

      // EXP Meter Border
      xpos = ScreenXOffset + 316.0;
      ypos = 972.0;
      SetFont("EXBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,4902,cr_untranslated,xpos,ypos,0.036,0.75);
 
      // EXP Notches
      xpos = ScreenXOffset + 214.0;
      ypos = 972.0;
      G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
      G9 = 200 / G10;
      Z1 = Experience - ExpTable[PlayerLevel - 1];
      Z2 = ExpTable[PlayerLevel] - ExpTable[PlayerLevel - 1];
      I1 = Z1 * G9 / Z2;
      if (I1 > G9) I1 = G9;
      if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
      for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 201; C1 > 1; C1 --)
      {
       if (Z2 != 0)
       {
        if ((C1 <= I1) || (PlayerLevel == LevelCap))
        {
         if (G10 == 4) { SetFont("EXBNOTC4"); G11 = -1.0; }
         if (G10 == 2) { SetFont("EXBNOTC2"); G11 = 0.0; }
         if (G10 == 1) { SetFont("EXBNOTCH"); G11 = 1.0; }
        }
        else SetFont("EXBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+4903,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
      }

      // EXP Meter Glass
      xpos = ScreenXOffset + 316.0;
      ypos = 972.0;
      SetFont("EXBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,5106,cr_untranslated,xpos,ypos,0.036,0.75);
     }



     //****************************************
     //** Tension Charge/Timer [5110 to 5525]**
     //****************************************
     // Tension-Charge Meter Border
     G6 = 0;
     if (GetCVar("dvdsnewhud_tensionmainbar") == 0)
     {
      if (MiscellaneousVars[185] > 0) G6 += 1;
      if (MiscellaneousVars[183] > 0) G6 += 1;
     }
     else G6 += 1;
     if (G6 == 1)
     {
      xpos = ScreenXOffset + 27.0;
      ypos = 856.0;
      if (MiscellaneousVars[181] > 0)
      {
       msgalpha = 0.75;
       MiscellaneousVars[2009] += 1;
       if (MiscellaneousVars[2009] == 1) msgalpha = 0.75;
       if (MiscellaneousVars[2009] == 2) msgalpha = 0.735;
       if (MiscellaneousVars[2009] == 3) msgalpha = 0.72;
       if (MiscellaneousVars[2009] == 4) msgalpha = 0.705;
       if (MiscellaneousVars[2009] == 5) msgalpha = 0.69;
       if (MiscellaneousVars[2009] == 6) msgalpha = 0.675;
       if (MiscellaneousVars[2009] == 7) msgalpha = 0.66;
       if (MiscellaneousVars[2009] == 8) msgalpha = 0.645;
       if (MiscellaneousVars[2009] == 9) msgalpha = 0.63;
       if (MiscellaneousVars[2009] == 10) msgalpha = 0.615;
       if (MiscellaneousVars[2009] == 11) msgalpha = 0.60;
       if (MiscellaneousVars[2009] == 12) msgalpha = 0.585;
       if (MiscellaneousVars[2009] == 13) msgalpha = 0.57;
       if (MiscellaneousVars[2009] == 14) msgalpha = 0.555;
       if (MiscellaneousVars[2009] == 15) msgalpha = 0.54;
       if (MiscellaneousVars[2009] == 16) msgalpha = 0.525;
       if (MiscellaneousVars[2009] == 17) msgalpha = 0.51;
       if (MiscellaneousVars[2009] == 18) msgalpha = 0.495;
       if (MiscellaneousVars[2009] == 19) msgalpha = 0.51;
       if (MiscellaneousVars[2009] == 20) msgalpha = 0.525;
       if (MiscellaneousVars[2009] == 21) msgalpha = 0.54;
       if (MiscellaneousVars[2009] == 22) msgalpha = 0.555;
       if (MiscellaneousVars[2009] == 23) msgalpha = 0.57;
       if (MiscellaneousVars[2009] == 24) msgalpha = 0.585;
       if (MiscellaneousVars[2009] == 25) msgalpha = 0.60;
       if (MiscellaneousVars[2009] == 26) msgalpha = 0.615;
       if (MiscellaneousVars[2009] == 27) msgalpha = 0.63;
       if (MiscellaneousVars[2009] == 28) msgalpha = 0.645;
       if (MiscellaneousVars[2009] == 29) msgalpha = 0.66;
       if (MiscellaneousVars[2009] == 30) msgalpha = 0.675;
       if (MiscellaneousVars[2009] == 31) msgalpha = 0.69;
       if (MiscellaneousVars[2009] == 32) msgalpha = 0.705;
       if (MiscellaneousVars[2009] == 33) msgalpha = 0.72;
       if (MiscellaneousVars[2009] == 34) msgalpha = 0.735;
       if (MiscellaneousVars[2009] == 35) { msgalpha = 0.75; MiscellaneousVars[2009] = 1; }
       if (MiscellaneousVars[181] == 1) SetFont("TNBGLVL1");
       if (MiscellaneousVars[181] == 2) SetFont("TNBGLVL2");
       if (MiscellaneousVars[181] == 3) SetFont("TNBGLVL3");
       if (MiscellaneousVars[181] == 4) SetFont("TNBGLVL4");
       if (MiscellaneousVars[181] == 5) SetFont("TNBGLVL5");
       if (MiscellaneousVars[181] == 6) SetFont("TNBGLVL6");
       if (MiscellaneousVars[181] == 7) SetFont("TNBGLVL7");
       HudMessage(s:"A";HUDMSG_ALPHA,5110,cr_untranslated,xpos,ypos,0.036,msgalpha);
      }
      if (MiscellaneousVars[181] > 0) SetFont("TNBGFRAM"); else SetFont("TNBFRAME");
      HudMessage(s:"A";HUDMSG_ALPHA,5111,cr_untranslated,xpos,ypos,0.036,0.75);
 
      // Tension-Charge/Timer Meter Notches
      if (MiscellaneousVars[181] == 0) { MaxTensionChargeTimer = 1400; } // "0"
      if (MiscellaneousVars[181] == 1) { MaxTensionChargeTimer = 1488; TensionTimerMax = 3600; } // "5"
      if (MiscellaneousVars[181] == 2) { MaxTensionChargeTimer = 1575; TensionTimerMax = 4320; } // "20" [x1.2]
      if (MiscellaneousVars[181] == 3) { MaxTensionChargeTimer = 1750; TensionTimerMax = 5184; } // "50" [x1.2]
      if (MiscellaneousVars[181] == 4) { MaxTensionChargeTimer = 1925; TensionTimerMax = 6221; } // "100" [x1.2]
      if (MiscellaneousVars[181] == 5) { MaxTensionChargeTimer = 2100; TensionTimerMax = 7465; } // "250" [x1.2]
      if (MiscellaneousVars[181] == 6) { MaxTensionChargeTimer = 2625; TensionTimerMax = 8958; } // "500" [x1.2]
      if (MiscellaneousVars[181] == 7) { TensionTimerMax = 10750; } // "1000" [x1.2]
      xpos = ScreenXOffset + 27.0;
      ypos = 958.0;
      msgalpha = 0.75;
      // Tension-Charge Meter Notches
      if (MiscellaneousVars[181] < 7 && MiscellaneousVars[185] > 0 && MiscellaneousVars[184] == 0)
      {
       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       G9 = 200 / G10;
       I1 = MiscellaneousVars[185] * G9 / MaxTensionChargeTimer;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 201; C1 > 1; C1 --)
       {
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("TNBNOTC4"); G11 = 1.0; }
         if (G10 == 2) { SetFont("TNBNOTC2"); G11 = 1.0; }
         if (G10 == 1) { SetFont("TNBNOTCH"); G11 = 1.0; }
        }
        else SetFont("TNBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+5120,cr_untranslated,xpos,ypos-I2,0.036,0.75);
       }
      }
 
      xpos = ScreenXOffset + 27.0;
      ypos = 958.0;
      msgalpha = 0.75;
      // Tension-Timer Notches
      if (MiscellaneousVars[181] > 0) //   && MiscellaneousVars[183] < TensionTimerMax
      {
       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       G9 = 200 / G10;
       I1 = MiscellaneousVars[183] * G9 / TensionTimerMax;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 201; C1 > 1; C1 --)
       {
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("TNBNOTT4"); G11 = 1.0; }
         if (G10 == 2) { SetFont("TNBNOTT2"); G11 = 1.0; }
         if (G10 == 1) { SetFont("TNBNOTTI"); G11 = 1.0; }
        }
        else SetFont("TNBNOTEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+5323,cr_untranslated,xpos,ypos-I2,0.036,0.75);
       }
      }
 
      xpos = ScreenXOffset + 27.0;
      ypos = 856.0;
      SetFont("TNBGLASS");
      HudMessage(s:"A";HUDMSG_ALPHA,5525,cr_untranslated,xpos,ypos,0.036,0.75);
     } 
 
     //************************************
     //** Tension Cooldown [5621 to 5731]**
     //************************************
     G6 = 0;
     if (GetCVar("dvdsnewhud_tensioncooldownbar") == 0)
     {
      if (MiscellaneousVars[186] > 0) G6 += 1;
     }
     else G6 += 1;
     if (G6 == 1)
     {
      // Tension-Cooldown Meter Border
      xpos = ScreenXOffset + 46.0; 
      ypos = 911.0;

      // MiscellaneousVars[188] = MiscellaneousVars[186];
      G3 = MiscellaneousVars[186]; // Current Tension Cooldown Timer
      G2 = MiscellaneousVars[188]; // Max Tension Cooldown
      if (G2 > 0 && G3 >= G2)
      {
       msgalpha = 0.75;
       MiscellaneousVars[2008] += 1;
       if (MiscellaneousVars[2008] == 1) msgalpha = 0.75;
       if (MiscellaneousVars[2008] == 2) msgalpha = 0.735;
       if (MiscellaneousVars[2008] == 3) msgalpha = 0.72;
       if (MiscellaneousVars[2008] == 4) msgalpha = 0.705;
       if (MiscellaneousVars[2008] == 5) msgalpha = 0.69;
       if (MiscellaneousVars[2008] == 6) msgalpha = 0.675;
       if (MiscellaneousVars[2008] == 7) msgalpha = 0.66;
       if (MiscellaneousVars[2008] == 8) msgalpha = 0.645;
       if (MiscellaneousVars[2008] == 9) msgalpha = 0.63;
       if (MiscellaneousVars[2008] == 10) msgalpha = 0.615;
       if (MiscellaneousVars[2008] == 11) msgalpha = 0.60;
       if (MiscellaneousVars[2008] == 12) msgalpha = 0.585;
       if (MiscellaneousVars[2008] == 13) msgalpha = 0.57;
       if (MiscellaneousVars[2008] == 14) msgalpha = 0.555;
       if (MiscellaneousVars[2008] == 15) msgalpha = 0.54;
       if (MiscellaneousVars[2008] == 16) msgalpha = 0.525;
       if (MiscellaneousVars[2008] == 17) msgalpha = 0.51;
       if (MiscellaneousVars[2008] == 18) msgalpha = 0.495;
       if (MiscellaneousVars[2008] == 19) msgalpha = 0.51;
       if (MiscellaneousVars[2008] == 20) msgalpha = 0.525;
       if (MiscellaneousVars[2008] == 21) msgalpha = 0.54;
       if (MiscellaneousVars[2008] == 22) msgalpha = 0.555;
       if (MiscellaneousVars[2008] == 23) msgalpha = 0.57;
       if (MiscellaneousVars[2008] == 24) msgalpha = 0.585;
       if (MiscellaneousVars[2008] == 25) msgalpha = 0.60;
       if (MiscellaneousVars[2008] == 26) msgalpha = 0.615;
       if (MiscellaneousVars[2008] == 27) msgalpha = 0.63;
       if (MiscellaneousVars[2008] == 28) msgalpha = 0.645;
       if (MiscellaneousVars[2008] == 29) msgalpha = 0.66;
       if (MiscellaneousVars[2008] == 30) msgalpha = 0.675;
       if (MiscellaneousVars[2008] == 31) msgalpha = 0.69;
       if (MiscellaneousVars[2008] == 32) msgalpha = 0.705;
       if (MiscellaneousVars[2008] == 33) msgalpha = 0.72;
       if (MiscellaneousVars[2008] == 34) msgalpha = 0.735;
       if (MiscellaneousVars[2008] == 35) { msgalpha = 0.75; MiscellaneousVars[2008] = 1; }
       SetFont("TNCDMAXG");
       HudMessage(s:"A";HUDMSG_ALPHA,5621,cr_untranslated,xpos,ypos,0.036,msgalpha);
      }
      xpos = ScreenXOffset + 46.0; 
      ypos = 911.0;
      SetFont("TNCDFRAM");
      HudMessage(s:"A";HUDMSG_ALPHA,5622,cr_untranslated,xpos,ypos,0.036,0.75);

      // Tension-Cooldown Meter Notches
      xpos = ScreenXOffset + 46.0;
      ypos = 963.0;
      msgalpha = 0.75;


      if (G2 != 0)
      {
       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       G9 = 100 / G10;
       G3 = MiscellaneousVars[186]; // Current Tension Cooldown Timer
       G2 = MiscellaneousVars[188]; // Max Tension Cooldown
       I1 = G3 * G9 / G2;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 201; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("TNCDNOT4"); G11 = 0.0; }
         if (G10 == 2) { SetFont("TNCDNOT2"); G11 = 1.0; }
         if (G10 == 1) { SetFont("TNCDNOTC"); G11 = 1.0; }
        }
        else SetFont("TNCDNOEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+5630,cr_untranslated,xpos,ypos-I2,0.036,0.875);
       }
      }

      xpos = ScreenXOffset + 46.0; 
      ypos = 911.0;
      SetFont("TNCDGLAS");
      HudMessage(s:"A";HUDMSG_ALPHA,5732,cr_untranslated,xpos,ypos,0.036,0.75);
     }


     //************************
     //** Tension Star [5731]**
     //************************
     xpos = ScreenXOffset + 152.0;
     ypos = 950.0; 
     if (MiscellaneousVars[181] == 0)
     {
      if (MiscellaneousVars[185] > 0) SetFont("TNST0000"); else SetFont("TNSTNONE");
     }
     if (MiscellaneousVars[181] == 1) SetFont("TNST0005");
     if (MiscellaneousVars[181] == 2) SetFont("TNST0020");
     if (MiscellaneousVars[181] == 3) SetFont("TNST0050");
     if (MiscellaneousVars[181] == 4) SetFont("TNST0100");
     if (MiscellaneousVars[181] == 5) SetFont("TNST0250");
     if (MiscellaneousVars[181] == 6) SetFont("TNST0500");
     if (MiscellaneousVars[181] == 7) SetFont("TNST1000");
     HudMessage(s:"A";HUDMSG_ALPHA,5733,cr_untranslated,xpos,ypos,0.036,0.875);

     //******************************************************
     //**Armor Icons [Flora's & Sauron-type] [5734 to 5749]**
     //******************************************************

     // Sauron Armors
     xpos = ScreenXOffset + 442.0;
     ypos = 744.0;
     if (CheckActorInventory(1001,"SauronHelmet") > 0)
     {
      SetFont("SAURHELM");
      HudMessage(s:"A";HUDMSG_ALPHA,5734,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     Z1 = 0;
     if (CheckActorInventory(1001,"SauronGauntlets") > 0) Z1 += 1;
     if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) Z1 += 1;
     if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) Z1 += 1;
     if (Z1 > 0)
     {
      SetFont("SAURGNTS");
      HudMessage(s:"A";HUDMSG_ALPHA,5735,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"TheOneRing") > 0)
     {
      SetFont("TONERING");
      HudMessage(s:"A";HUDMSG_ALPHA,5736,cr_untranslated,xpos,ypos,0.036,0.875);
     }

     // Flora Armors
     xpos = ScreenXOffset + 59.0; // 59.0
     ypos = 744.0;
     if (CheckActorInventory(1001,"SafeTeaShoes") > 0)
     {
      SetFont("IFLRARM1");
      HudMessage(s:"A";HUDMSG_ALPHA,5737,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"PearlyCorset") > 0)
     {
      SetFont("IFLRARM2");
      HudMessage(s:"A";HUDMSG_ALPHA,5738,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"WaterFlyingDress") > 0)
     {
      SetFont("IFLRARM3");
      HudMessage(s:"A";HUDMSG_ALPHA,5739,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"EvenstarNecklace") > 0)
     {
      SetFont("IFLRARM4");
      HudMessage(s:"A";HUDMSG_ALPHA,5740,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"CloakofEvasion") > 0)
     {
      SetFont("IFLRARM5");
      HudMessage(s:"A";HUDMSG_ALPHA,5741,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"AnubisCufflinks") > 0)
     {
      SetFont("IFLRARM6");
      HudMessage(s:"A";HUDMSG_ALPHA,5742,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"KissaBra") > 0)
     {
      SetFont("IFLRARM7");
      HudMessage(s:"A";HUDMSG_ALPHA,5743,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"DivineShield") > 0)
     {
      SetFont("IFLRARM8");
      HudMessage(s:"A";HUDMSG_ALPHA,5744,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     if (CheckActorInventory(1001,"RuinousShield") > 0)
     {
      int RuinousShieldWhole = RuinousShieldPercentF / 10;
      int RuinousShieldDecimal = RuinousShieldPercentF % 10;
      ypos -= 32.0;
      SetFont("BIGFONT");
      HudMessage(d:RuinousShieldWhole,s:".",d:RuinousShieldDecimal,s:"%";HUDMSG_ALPHA,5745,cr_white,xpos,ypos,0.036,0.875);
      ypos += 32.0;
      SetFont("IFLRARMX");
      HudMessage(s:"A";HUDMSG_ALPHA,5746,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"BalrogRing") > 0)
     {
      SetFont("IFLRARM9");
      HudMessage(s:"A";HUDMSG_ALPHA,5747,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"DoveRibbon") > 0)
     {
      SetFont("IFLRARMA");
      HudMessage(s:"A";HUDMSG_ALPHA,5748,cr_untranslated,xpos,ypos,0.036,0.875);
     }
     xpos += 32.0;
     ypos += 0.0;
     if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0)
     {
      SetFont("IFLRARMB");
      HudMessage(s:"A";HUDMSG_ALPHA,5749,cr_untranslated,xpos,ypos,0.036,0.875);
     }

     //********************************************
     //**Stat/AeonPts Icons/Values [5750 to 5767]**
     //********************************************
     if (GetCVar("dvdsallhuds_showstatinfo") == 1)
     {
      // MiscellaneousVars[2033] = Aeon Pts
      // Aeon Points
      if (MiscellaneousVars[25] > 0 && PlayerLevel >= MiscellaneousVars[197])
      {
       xpos = ScreenXOffset + 662.0; // 662.0
       ypos = 764.0; // 764.0
       SetFont("STATAEON");
       HudMessage(s:"A";HUDMSG_ALPHA,5750,cr_untranslated,xpos,ypos,0.036,0.875);
 
       xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
       if (xpos < 0.0) xpos -= 0.2;
       ypos = 766.0; // 766.0
       SetFont("DQHUDFONTSML");
       HudMessage(d:MiscellaneousVars[25];HUDMSG_ALPHA,5751,cr_gold,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[224] > 0)
       {
        HudMessage(d:MiscellaneousVars[25],s:" \cj+ ",d:MiscellaneousVars[224];HUDMSG_ALPHA,5751,cr_gold,xpos,ypos,0.036,1.0);
       }
      }

      // MiscellaneousVars[2034] = Strength
      // Strength
      xpos = ScreenXOffset + 663.0;
      ypos = 805.0;
      SetFont("STATSTR");
      HudMessage(s:"A";HUDMSG_ALPHA,5752,cr_untranslated,xpos,ypos,0.036,0.875);
 
      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 807.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 5) // Selected Strength w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[35];HUDMSG_ALPHA,5753,cr_red,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[229] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[35],s:" \cj+ ",d:MiscellaneousVars[229];HUDMSG_ALPHA,5753,cr_red,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(d:MiscellaneousVars[35];HUDMSG_ALPHA,5753,cr_red,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[229] > 0)
       {
        HudMessage(d:MiscellaneousVars[35],s:" \cj+ ",d:MiscellaneousVars[229];HUDMSG_ALPHA,5753,cr_red,xpos,ypos,0.036,1.0);
       }
      }


      // MiscellaneousVars[2035] = Defense
      // Defense
      xpos = ScreenXOffset + 663.0;
      ypos = 836.0;
      SetFont("STATDEF");
      HudMessage(s:"A";HUDMSG_ALPHA,5754,cr_untranslated,xpos,ypos,0.036,0.875);

      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 838.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 2) // Selected Defense w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[32];HUDMSG_ALPHA,5755,cr_olive,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[226] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[32],s:" \cj+ ",d:MiscellaneousVars[226];HUDMSG_ALPHA,5755,cr_olive,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(d:MiscellaneousVars[32];HUDMSG_ALPHA,5755,cr_olive,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[226] > 0)
       {
        HudMessage(d:MiscellaneousVars[32],s:" \cj+ ",d:MiscellaneousVars[226];HUDMSG_ALPHA,5755,cr_olive,xpos,ypos,0.036,1.0);
       }
      }


      // MiscellaneousVars[2036] = Sorcery
      // Sorcery
      xpos = ScreenXOffset + 663.0;
      ypos = 867.0;
      SetFont("STATSORC");
      HudMessage(s:"A";HUDMSG_ALPHA,5756,cr_untranslated,xpos,ypos,0.036,0.875);
 
      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 869.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 4) // Selected Sorcery w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[34];HUDMSG_ALPHA,5757,cr_purple,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[228] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[34],s:" \cj+ ",d:MiscellaneousVars[228];HUDMSG_ALPHA,5757,cr_purple,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(s:"\c[Purple]",d:MiscellaneousVars[34];HUDMSG_ALPHA,5757,cr_purple,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[228] > 0)
       {
        HudMessage(s:"\c[Purple]",d:MiscellaneousVars[34],s:" \cj+ ",d:MiscellaneousVars[228];HUDMSG_ALPHA,5757,cr_purple,xpos,ypos,0.036,1.0);
       }
      }

      // MiscellaneousVars[2037] = Therapeusis
      // Therapeusis
      xpos = ScreenXOffset + 663.0;
      ypos = 898.0;
      SetFont("STATTHER");
      HudMessage(s:"A";HUDMSG_ALPHA,5758,cr_untranslated,xpos,ypos,0.036,0.875);
 
      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 900.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 6) // Selected Therapeusis w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[36];HUDMSG_ALPHA,5759,cr_gray,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[230] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[36],s:" \cj+ ",d:MiscellaneousVars[230];HUDMSG_ALPHA,5759,cr_gray,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(d:MiscellaneousVars[36];HUDMSG_ALPHA,5759,cr_gray,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[230] > 0)
       {
        HudMessage(d:MiscellaneousVars[36],s:" \cj+ ",d:MiscellaneousVars[230];HUDMSG_ALPHA,5759,cr_gray,xpos,ypos,0.036,1.0);
       }
      }


      // MiscellaneousVars[2038] = Agility
      // Agility
      xpos = ScreenXOffset + 663.0;
      ypos = 929.0;
      SetFont("STATAGL");
      HudMessage(s:"A";HUDMSG_ALPHA,5760,cr_untranslated,xpos,ypos,0.036,0.875);
 
      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 931.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 1) // Selected Agility w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[31];HUDMSG_ALPHA,5761,cr_lightblue,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[225] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[31],s:" \cj+ ",d:MiscellaneousVars[225];HUDMSG_ALPHA,5761,cr_lightblue,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(d:MiscellaneousVars[31];HUDMSG_ALPHA,5761,cr_lightblue,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[225] > 0)
       {
        HudMessage(d:MiscellaneousVars[31],s:" \cj+ ",d:MiscellaneousVars[225];HUDMSG_ALPHA,5761,cr_lightblue,xpos,ypos,0.036,1.0);
       }
      }
 
      // MiscellaneousVars[2039] = Deftness
      // Deftness
      xpos = ScreenXOffset + 663.0;
      ypos = 960.0;
      SetFont("STATDFTN");
      HudMessage(s:"A";HUDMSG_ALPHA,5762,cr_untranslated,xpos,ypos,0.036,0.875);
 
      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 962.0; // 766.0
      SetFont("DQHUDFONTSML");
      if (MiscellaneousVars[24] == 3) // Selected Deftness w/ Aeon Pts
      {
       HudMessage(s:"\c[blue]",d:MiscellaneousVars[33];HUDMSG_ALPHA,5763,cr_green,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[227] > 0)
       {
        HudMessage(s:"\c[blue]",d:MiscellaneousVars[33],s:" \cj+ ",d:MiscellaneousVars[227];HUDMSG_ALPHA,5763,cr_green,xpos,ypos,0.036,1.0);
       }
      }
      else
      {
       HudMessage(d:MiscellaneousVars[33];HUDMSG_ALPHA,5763,cr_green,xpos,ypos,0.036,0.875);
       if (MiscellaneousVars[227] > 0)
       {
        HudMessage(d:MiscellaneousVars[33],s:" \cj+ ",d:MiscellaneousVars[227];HUDMSG_ALPHA,5763,cr_green,xpos,ypos,0.036,1.0);
       }
      }
 

      // Balance
      xpos = ScreenXOffset + 663.0;
      ypos = 1003.0;
      SetFont("STATMASS");
      HudMessage(s:"A";HUDMSG_ALPHA,5764,cr_untranslated,xpos,ypos,0.036,0.875);

      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 1005.0; // 766.0
      SetFont("DQHUDFONTSML");
      HudMessage(d:MiscellaneousVars[201];HUDMSG_ALPHA,5765,cr_olive,xpos,ypos,0.036,0.875);


      // Jumping
      xpos = ScreenXOffset + 663.0;
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 1034.0;
      SetFont("STATJUMP");
      HudMessage(s:"A";HUDMSG_ALPHA,5766,cr_untranslated,xpos,ypos,0.036,0.875);

      xpos = ScreenXOffset + 680.0 + 0.1; // 680.1
      if (xpos < 0.0) xpos -= 0.2;
      ypos = 1036.0; // 766.0
      SetFont("DQHUDFONTSML");
      HudMessage(d:MiscellaneousVars[200];HUDMSG_ALPHA,5767,cr_cyan,xpos,ypos,0.036,0.875);
     }


     //*******************************************
     //**Buff/Debuff Icons/Timers [5768 to 5807]**
     //*******************************************

     // Y +7 per icon's timer
     // Lower Row
     Z1 = 999; // Testing number for displays

      // Divine Avatar
     if (PowerupTimer[7] > 0)
     {
      Z1 = PowerupTimer[7] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 213.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5768,cr_white,xpos,ypos,0.036,0.875);

      xpos = ScreenXOffset + 213.0;
      ypos = 839.0;
      SetFont("STBFDVAV");
      HudMessage(s:"A";HUDMSG_ALPHA,5769,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Oomph / Blunt
     Z2 = 0;
     if (PowerupTimer[10] > 0) Z2 += 1; // Oomph
     if (PowerupTimer[13] > 0) Z2 += 1; // Blunt
     if (Z2 > 0)
     {
      if (PowerupTimer[10] > 0) Z1 = PowerupTimer[10] / 35; // Oomph
      if (PowerupTimer[13] > 0) Z1 = PowerupTimer[13] / 35; // Blunt
      if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 246.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5770,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 246.0;
      ypos = 839.0;
      if (PowerupTimer[10] > 0) SetFont("STBFOMPH"); // Oomph
      if (PowerupTimer[13] > 0) SetFont("STDBBLNT"); // Blunt
      HudMessage(s:"A";HUDMSG_ALPHA,5771,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Buff / Sap
     Z2 = 0;
     if (PowerupTimer[11] > 0) Z2 += 1; // Buff
     if (PowerupTimer[14] > 0) Z2 += 1; // Sap
     if (Z2 > 0)
     {
      if (PowerupTimer[11] > 0) Z1 = PowerupTimer[11] / 35; // Buff
      if (PowerupTimer[14] > 0) Z1 = PowerupTimer[14] / 35; // Sap
      if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 279.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5772,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 279.0;
      ypos = 839.0; // 839.0
      if (PowerupTimer[11] > 0) SetFont("STBFBUFF"); // Buff
      if (PowerupTimer[14] > 0) SetFont("STDBSAP"); // Sap
      HudMessage(s:"A";HUDMSG_ALPHA,5773,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Accelerate / Decelerate
     Z2 = 0;
     if (PowerupTimer[12] > 0) Z2 += 1; // Accelerate
     if (PowerupTimer[15] > 0) Z2 += 1; // Decelerate
     if (Z2 > 0)
     {
      if (PowerupTimer[12] > 0) Z1 = PowerupTimer[12] / 35; // Accelerate
      if (PowerupTimer[15] > 0) Z1 = PowerupTimer[15] / 35; // Decelerate
      if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 312.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5774,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 312.0;
      ypos = 839.0; // 839.0
      if (PowerupTimer[12] > 0) SetFont("STBFACEL"); // Accelerate
      if (PowerupTimer[15] > 0) SetFont("STDBDECL"); // Decelerate
      HudMessage(s:"A";HUDMSG_ALPHA,5775,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Poison
     if (PowerupTimer[16] > 0)
     {
      Z1 = PowerupTimer[16] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 345.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5776,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 345.0;
      ypos = 839.0; // 839.0
      SetFont("STDBPOIS");
      HudMessage(s:"A";HUDMSG_ALPHA,5777,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Corrosion
     if (PowerupTimer[17] > 0)
     {
      Z1 = PowerupTimer[17] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 378.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5778,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 378.0;
      ypos = 839.0; // 839.0
      SetFont("STDBCORR");
      HudMessage(s:"A";HUDMSG_ALPHA,5779,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Fatigue
     if (PowerupTimer[18] > 0)
     {
      Z1 = PowerupTimer[18] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 411.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5780,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 411.0;
      ypos = 839.0; // 839.0
      SetFont("STDBFATI");
      HudMessage(s:"A";HUDMSG_ALPHA,5781,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Blind
     if (PowerupTimer[19] > 0)
     {
      Z1 = PowerupTimer[19] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 444.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5782,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 444.0;
      ypos = 839.0; // 839.0
      SetFont("STDBBLND");
      HudMessage(s:"A";HUDMSG_ALPHA,5783,cr_untranslated,xpos,ypos,0.036,0.75);
     }
 
      // Sleep
     if (PowerupTimer[20] > 0)
     {
      Z1 = PowerupTimer[20] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 477.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5784,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 477.0;
      ypos = 839.0; // 839.0
      SetFont("STDBSLEP");
      HudMessage(s:"A";HUDMSG_ALPHA,5785,cr_untranslated,xpos,ypos,0.036,0.75);
     }

      // Silence
     if (PowerupTimer[21] > 0)
     {
      Z1 = PowerupTimer[21] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 510.0;
      ypos = 846.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5786,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 510.0;
      ypos = 839.0; // 839.0
      SetFont("STDBMUTE");
      HudMessage(s:"A";HUDMSG_ALPHA,5787,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // X/Y +33 per icon
     // Lower Row

     // Flight
     if (PowerupTimer[2] > 0)
     {
      Z1 = PowerupTimer[2] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 213.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5788,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 213.0; // 213.0
      ypos = 806.0;
      SetFont("STBFFLYI");
      HudMessage(s:"A";HUDMSG_ALPHA,5789,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Partial Invisibility
     if (PowerupTimer[1] > 0)
     {
      Z1 = PowerupTimer[1] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 246.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5790,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 246.0;
      ypos = 806.0;
      SetFont("STBFPTIN");
      HudMessage(s:"A";HUDMSG_ALPHA,5791,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Stealth / Complete Invisibility
     if (PowerupTimer[3] > 0)
     {
      Z1 = PowerupTimer[3] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 279.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5792,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 279.0;
      ypos = 806.0;
      SetFont("STBFSTEL");
      HudMessage(s:"A";HUDMSG_ALPHA,5793,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Night Vision
     if (PowerupTimer[0] > 0)
     {
      Z1 = PowerupTimer[0] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 312.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5794,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 312.0;
      ypos = 806.0;
      SetFont("STBFNGVI");
      HudMessage(s:"A";HUDMSG_ALPHA,5795,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // BioShield / RadSuit / IronFeet
     if (PowerupTimer[22] > 0)
     {
      Z1 = PowerupTimer[22] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 345.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5796,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 345.0;
      ypos = 806.0;
      SetFont("STBFIRFT");
      HudMessage(s:"A";HUDMSG_ALPHA,5797,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Invulnerability
     if (PowerupTimer[4] > 0)
     {
      Z1 = PowerupTimer[4] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 378.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5798,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 378.0;
      ypos = 806.0;
      SetFont("STBFINVU");
      HudMessage(s:"A";HUDMSG_ALPHA,5799,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Berserk
     if (PowerupTimer[23] > 0)
     {
      Z1 = PowerupTimer[23] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 411.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5800,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 411.0;
      ypos = 806.0;
      SetFont("STBFBERS");
      HudMessage(s:"A";HUDMSG_ALPHA,5801,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Spreader Aura [Both level 1 and 2]
     Z2 = 0;
     if (PowerupTimer[8] > 0) Z2 += 1; // Spread Aura Lv. 1
     if (PowerupTimer[9] > 0) Z2 += 1; // Spread Aura Lv. 2
     if (Z2 > 0)
     {
      if (PowerupTimer[8] > 0) Z1 = PowerupTimer[8] / 35; // Spread Aura Lv. 1
      if (PowerupTimer[9] > 0) Z1 = PowerupTimer[9] / 35; // Spread Aura Lv. 2
      if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 444.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5802,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 444.0;
      ypos = 806.0;
      if (PowerupTimer[8] > 0) SetFont("STBFSPR1"); // Spread Aura Lv. 1
      if (PowerupTimer[9] > 0) SetFont("STBFSPR2"); // Spread Aura Lv. 2
      HudMessage(s:"A";HUDMSG_ALPHA,5803,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Fear Aura
     if (PowerupTimer[6] > 0)
     {
      Z1 = PowerupTimer[6] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 477.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5804,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 477.0;
      ypos = 806.0;
      SetFont("STBFFRAR");
      HudMessage(s:"A";HUDMSG_ALPHA,5805,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     // Time Freezer
     if (PowerupTimer[5] > 0)
     {
      Z1 = PowerupTimer[5] / 35; if (Z1 > 999) Z1 = 999;
      xpos = ScreenXOffset + 510.0;
      ypos = 813.0;
      SetFont("DQHUDFONTSTATUS");
      HudMessage(d:Z1;HUDMSG_ALPHA,5806,cr_white,xpos,ypos,0.036,0.875);
      xpos = ScreenXOffset + 510.0;
      ypos = 806.0;
      SetFont("STBFTMFR");
      HudMessage(s:"A";HUDMSG_ALPHA,5807,cr_untranslated,xpos,ypos,0.036,0.75);
     }

     xpos = MiscFixedVars[1];
     ypos = MiscFixedVars[2];
     xpos = MiscFixedVars[3];
     ypos = MiscFixedVars[4];
     xpos = MiscFixedVars[5];
     ypos = MiscFixedVars[6];
     xpos = MiscFixedVars[7];
     ypos = MiscFixedVars[8];
     xpos = MiscFixedVars[9];
     ypos = MiscFixedVars[10];
     xpos = MiscFixedVars[11];
     ypos = MiscFixedVars[12];
     xpos = MiscFixedVars[13];
     ypos = MiscFixedVars[14];
     xpos = MiscFixedVars[15];
     ypos = MiscFixedVars[16];
     xpos = MiscFixedVars[17];
     ypos = MiscFixedVars[18];
     xpos = MiscFixedVars[19];
     ypos = MiscFixedVars[20];





    //************************
    //************************
    //************************
    //************************
    //************************
    //*******Right Side*******
    //************************
    //************************
    //************************
    //************************
    //************************

     ScreenXOffset = GetCVar("dvdsnewhud_widescreenxoffset") * 1.0;
     //************************************************************
     //**Weapon/Ammo Display and Sceptre-EXP meter [5900 to 6205]**
     //************************************************************
     SetActivator(1001);
     str weapon = GetWeapon();
     int ammo = 0; // Ammo Values Default to 0 unless a weapon that uses ammo/has an ammo limit is detected
     int maxammo = 0; // Ammo Values Default to 0 unless a weapon that uses ammo/has an ammo limit is detected

     //PrintBold(s:weapon);
     // Ammo Type/Amount Checks
     If(StrIcmp(weapon, "Pistol2") == 0 || StrIcmp(weapon, "DualPistols") == 0 || StrIcmp(weapon, "Chaingun2") == 0 || StrIcmp(weapon, "Minigun") == 0)
     {
      ammo = CheckActorInventory(1001,"Clip");
      maxammo = GetAmmoCapacity("Clip");
     }
     If(StrIcmp(weapon, "Shotgun2") == 0 || StrIcmp(weapon, "SuperShotgun2") == 0)
     {
      ammo = CheckActorInventory(1001,"Shell");
      maxammo = GetAmmoCapacity("Shell");
     }
     If(StrIcmp(weapon, "RocketLauncher2") == 0)
     {
      ammo = CheckActorInventory(1001,"RocketAmmo");
      maxammo = GetAmmoCapacity("RocketAmmo");
     }
     If(StrIcmp(weapon, "PlasmaRifle2") == 0 || StrIcmp(weapon, "Repeater2") == 0 || StrIcmp(weapon, "Karasawa2") == 0 || StrIcmp(weapon, "BFG90002") == 0)
     {
      ammo = CheckActorInventory(1001,"Cell");
      maxammo = GetAmmoCapacity("Cell");
     }
     If(StrIcmp(weapon, "DiarisLongbow") == 0)
     {
      ammo = CheckActorInventory(1001,"DiarisArrow");
      maxammo = GetAmmoCapacity("DiarisArrow");
     }
     // Circus2-Exclusive Checks
     If(StrIcmp(weapon, "ClownGrenadeNew") == 0)
     {
      ammo = CheckActorInventory(1001,"CGrenadeAmmo");
      maxammo = GetAmmoCapacity("CGrenadeAmmo");
     }
     If(StrIcmp(weapon, "GutFlingerNew") == 0 || StrIcmp(weapon, "GasRocketLauncherNew") == 0)
     {
      ammo = CheckActorInventory(1001,"ClownSouls");
      maxammo = GetAmmoCapacity("ClownSouls");
     }
     If(StrIcmp(weapon, "GoreBalloonNew") == 0)
     {
      ammo = CheckActorInventory(1001,"GoreBalloons");
      maxammo = GetAmmoCapacity("GoreBalloons");
     }
     If(StrIcmp(weapon, "PopcornGunNew") == 0)
     {
      ammo = CheckActorInventory(1001,"PopcornPiece");
      maxammo = GetAmmoCapacity("PopcornPiece");
     }
     If(StrIcmp(weapon, "CrazyBall2New") == 0)
     {
      ammo = CheckActorInventory(1001,"CzBall");
      maxammo = GetAmmoCapacity("CzBall");
     }
     SetActivator(0);

     // Weapon Icons
     xpos = ScreenXOffset + 1288.0; // 1288.0
     ypos = 960.0; // 960.0
     SetFont("WIEMPTY");
      // Flora-Specfic Weapons
      If(StrIcmp(weapon, "FistFlora") == 0) SetFont("WIFISTF");
      If(StrIcmp(weapon, "SauronGauntletsFlora") == 0) SetFont("WISGNLTF");
      If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0) SetFont("WISCEPTR");
      If(StrIcmp(weapon, "DiarisLongbow") == 0) SetFont("WIDIARIS");
      If(StrIcmp(weapon, "ImpClaw") == 0) SetFont("WIHLCR1");
      If(StrIcmp(weapon, "DarkImpClaw") == 0) SetFont("WIHLCR2");
      If(StrIcmp(weapon, "CacodemonEye") == 0) SetFont("WIHLCR3");
      If(StrIcmp(weapon, "CacolanternEye") == 0) SetFont("WIHLCR4");
      If(StrIcmp(weapon, "AbaddonEye") == 0) SetFont("WIHLCR5");
      If(StrIcmp(weapon, "KnightFist") == 0) SetFont("WIHLCR6");
      If(StrIcmp(weapon, "BaronFist") == 0) SetFont("WIHLCR7");
      If(StrIcmp(weapon, "BelphegorFist") == 0) SetFont("WIHLCR8");
      If(StrIcmp(weapon, "BruiserFist") == 0) SetFont("WIHLCR9");
      If(StrIcmp(weapon, "ArchonFist") == 0) SetFont("WIHLCR10");
      If(StrIcmp(weapon, "PyroFist") == 0) SetFont("WIHLCR11");
      If(StrIcmp(weapon, "IncarnateSkull") == 0) SetFont("WIHLCR12");
      If(StrIcmp(weapon, "ArchvileHand") == 0) SetFont("WIHLCR13");
      If(StrIcmp(weapon, "DiabloistHand") == 0) SetFont("WIHLCR14");
      If(StrIcmp(weapon, "BalrogFist") == 0) SetFont("WIHLCR15");
      // Deggaris-Specfic Weapons
      If(StrIcmp(weapon, "FistDeggaris") == 0) SetFont("WIFISTD");
      If(StrIcmp(weapon, "SauronGauntlets") == 0) SetFont("WISGNLTD");
      // Illucia-Specfic Weapons
      If(StrIcmp(weapon, "FistIllucia") == 0) SetFont("WIFISTI");
      If(StrIcmp(weapon, "SauronGauntletsIllucia") == 0) SetFont("WISGNLTI");
      // Marine Weapons
      If(StrIcmp(weapon, "Chainsaw2") == 0) SetFont("WICNSW");
      If(StrIcmp(weapon, "DoubleBladedChainsaw") == 0) SetFont("WIDCNSW");
      If(StrIcmp(weapon, "Pistol2") == 0) SetFont("WIPISTL");
      If(StrIcmp(weapon, "DualPistols") == 0) SetFont("WIDPISTL");
      If(StrIcmp(weapon, "Shotgun2") == 0) SetFont("WISHOTG");
      If(StrIcmp(weapon, "SuperShotgun2") == 0) SetFont("WISSHOTG");
      If(StrIcmp(weapon, "Chaingun2") == 0) SetFont("WICHAING");
      If(StrIcmp(weapon, "Minigun") == 0) SetFont("WIMINIG");
      If(StrIcmp(weapon, "RocketLauncher2") == 0) SetFont("WIROCKLA");
      If(StrIcmp(weapon, "PlasmaRifle2") == 0) SetFont("WIPLSRIF");
      If(StrIcmp(weapon, "Repeater2") == 0) SetFont("WIREPETR");
      If(StrIcmp(weapon, "Karasawa2") == 0) SetFont("WIKAWAS");
      If(StrIcmp(weapon, "BFG90002") == 0) SetFont("WIBFG9K");
      // Circus2 Weapons
      If(StrIcmp(weapon, "ClownGrenadeNew") == 0) SetFont("WICLWNGR");
      If(StrIcmp(weapon, "GutFlingerNew") == 0) SetFont("WIGUTFLN");
      If(StrIcmp(weapon, "GasRocketLauncherNew") == 0) SetFont("WIGASRKT");
      If(StrIcmp(weapon, "GoreBalloonNew") == 0) SetFont("WIGORBAL");
      If(StrIcmp(weapon, "PopcornGunNew") == 0) SetFont("WIPOPCGN");
      If(StrIcmp(weapon, "CrazyBall2New") == 0) SetFont("WICRZBAL");
     HudMessage(s:"A";HUDMSG_ALPHA,6206,cr_untranslated,xpos,ypos,0.036,0.75); // 5899 or 6206

     //SetFont("WITEMPLA");
     //HudMessage(s:"A";HUDMSG_ALPHA,5900,cr_untranslated,xpos,ypos,0.036,0.75);

     // Ammo / SceptreLevel Label
     int HellcoreLevel;
     Keyname = "+attack";
     str Keyname2 = "+moveleft";
     str Keyname3 = "+moveright";
     xpos = ScreenXOffset + 1149.0;
     ypos = 1060.0;
     If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0)
     {
      if (GetCVar("dvds_noscexpgains") == 0)
      {
       SetFont("DQHUDFONTSML");
       HudMessage(s:"LVL \cg",d:SceptreActualLevel;HUDMSG_ALPHA,5901,cr_white,xpos,ypos,0.036,0.875);
      }
/*
       // Spin Attack Indicator Actions
       xpos = ScreenXOffset + MiscFixedVars[1];
       ypos = MiscFixedVars[2];
       SetFont("DQHUDFONTSML");
       HudMessage(k:Keyname2,s:" &",k:Keyname3,s:" &\n",k:Keyname;HUDMSG_ALPHA,5899,cr_untranslated,xpos,ypos,0.036,0.75);
*/
      if (MiscellaneousVars[244] > 0)
      {
       // Spin Attack Indicator Icon
       xpos = ScreenXOffset + 1150.0;
       ypos = 992.0;
       SetFont("SCEPTSPN");
       HudMessage(s:"A";HUDMSG_ALPHA,5900,cr_untranslated,xpos,ypos,0.036,0.75);
      }
     }
     else
     {
      if (maxammo > 0)
      {
       SetFont("DQHUDFONTSML");
       HudMessage(s:"AMMO";HUDMSG_ALPHA,5901,cr_white,xpos,ypos,0.036,0.875);
      }
      else
      {
       // [96] is the Current Level of the Imp's Claw
       // [97] is the Current Level of the Dark Imp's Claw
       // [98] is the Current Level of the Cacodemon's Eye
       // [99] is the Current Level of the Cacolantern's Eye
       // [100] is the Current Level of the Abaddon's Eye
       // [101] is the Current Level of the Hell Knight's Fist
       // [102] is the Current Level of the Baron of Hell's Fist
       // [103] is the Current Level of the Belphegor's Fist
       // [104] is the Current Level of the Bruiser Demon's Fist
       // [105] is the Current Level of the Archon of Hell's Fist
       // [106] is the Current Level of the Pyro Demon's Fist
       // [107] is the Current Level of the Death Incarnate's Skull
       // [108] is the Current Level of the Archvile's Hand
       // [109] is the Current Level of the Diabloist's Hand
       // [110] is the Current Level of the Flying Balrog's Fist
       // [111] is the Current Level of the Hades Elemental's Eye [?]
       // [112] is the Current Level of the Hades Overlord's Eye [?]
       Z2 = 0;
       xpos = ScreenXOffset + 1309.0;
       ypos = 1060.0;
       SetFont("DQHUDFONTSML");
       If(StrIcmp(weapon, "ImpClaw") == 0) { HellcoreLevel = MiscellaneousVars[96]; Z2 += 1; }
       If(StrIcmp(weapon, "DarkImpClaw") == 0) { HellcoreLevel = MiscellaneousVars[97]; Z2 += 1; }
       If(StrIcmp(weapon, "CacodemonEye") == 0) { HellcoreLevel = MiscellaneousVars[98]; Z2 += 1; }
       If(StrIcmp(weapon, "CacolanternEye") == 0) { HellcoreLevel = MiscellaneousVars[99]; Z2 += 1; }
       If(StrIcmp(weapon, "AbaddonEye") == 0) { HellcoreLevel = MiscellaneousVars[100]; Z2 += 1; }
       If(StrIcmp(weapon, "KnightFist") == 0) { HellcoreLevel = MiscellaneousVars[101]; Z2 += 1; }
       If(StrIcmp(weapon, "BaronFist") == 0) { HellcoreLevel = MiscellaneousVars[102]; Z2 += 1; }
       If(StrIcmp(weapon, "BelphegorFist") == 0) { HellcoreLevel = MiscellaneousVars[103]; Z2 += 1; }
       If(StrIcmp(weapon, "BruiserFist") == 0) { HellcoreLevel = MiscellaneousVars[104]; Z2 += 1; }
       If(StrIcmp(weapon, "ArchonFist") == 0) { HellcoreLevel = MiscellaneousVars[105]; Z2 += 1; }
       If(StrIcmp(weapon, "PyroFist") == 0) { HellcoreLevel = MiscellaneousVars[106]; Z2 += 1; }
       If(StrIcmp(weapon, "IncarnateSkull") == 0) { HellcoreLevel = MiscellaneousVars[107]; Z2 += 1; }
       If(StrIcmp(weapon, "ArchvileHand") == 0) { HellcoreLevel = MiscellaneousVars[108]; Z2 += 1; }
       If(StrIcmp(weapon, "DiabloistHand") == 0) { HellcoreLevel = MiscellaneousVars[109]; Z2 += 1; }
       If(StrIcmp(weapon, "BalrogFist") == 0) { HellcoreLevel = MiscellaneousVars[110]; Z2 += 1; }
       if (Z2 > 0) HudMessage(s:"LVL \cg",d:HellcoreLevel;HUDMSG_ALPHA,5901,cr_white,xpos,ypos,0.036,0.875);
      }
     }

     // Ammo Amounts / Sceptre EXP
     xpos = ScreenXOffset + 1289.0;
     ypos = 1066.0;
     If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0)
     {
      if (GetCVar("dvds_noscexpgains") == 0)
      {
       G1 = SceptreLevelEXP;
       if (SceptreActualLevel < 1) { G3 = 0; G2 = MiscellaneousVars[301]; }
       if (SceptreActualLevel == 1) { G3 = MiscellaneousVars[301]; G2 = MiscellaneousVars[302]; }
       if (SceptreActualLevel == 2) { G3 = MiscellaneousVars[302]; G2 = MiscellaneousVars[303]; }
       if (SceptreActualLevel == 3) { G3 = MiscellaneousVars[303]; G2 = MiscellaneousVars[304]; }
       if (SceptreActualLevel == 4) { G3 = MiscellaneousVars[304]; G2 = MiscellaneousVars[305]; }
       if (SceptreActualLevel == 5) { G3 = MiscellaneousVars[305]; G2 = MiscellaneousVars[306]; }
       if (SceptreActualLevel == 6) { G3 = MiscellaneousVars[306]; G2 = MiscellaneousVars[307]; }
       if (SceptreActualLevel == 7) { G3 = MiscellaneousVars[307]; G2 = MiscellaneousVars[308]; }
       if (SceptreActualLevel == 8) { G3 = MiscellaneousVars[308]; G2 = MiscellaneousVars[309]; }
       if (SceptreActualLevel == 9) { G3 = MiscellaneousVars[309]; G2 = MiscellaneousVars[310]; }
       if (SceptreActualLevel == 10) { G3 = MiscellaneousVars[310]; G2 = MiscellaneousVars[311]; }
       if (SceptreActualLevel == 11) { G3 = MiscellaneousVars[311]; G2 = MiscellaneousVars[312]; }
       if (SceptreActualLevel == 12) { G3 = MiscellaneousVars[312]; G2 = MiscellaneousVars[313]; }
       if (SceptreActualLevel == 13) { G3 = MiscellaneousVars[313]; G2 = MiscellaneousVars[314]; }
       if (SceptreActualLevel == 14) { G3 = MiscellaneousVars[314]; G2 = MiscellaneousVars[315]; }
       if (SceptreActualLevel >= 15) { G3 = MiscellaneousVars[315]; G2 = MiscellaneousVars[316]; }

       G4 = G2 - G3;
       G1 -= G3;
       G5 = SceptreLevelEXP; 
       if (G5 > MiscellaneousVars[316]) G5 = MiscellaneousVars[316];
 
       SetFont("DQHUDFONTSML");
       //HudMessage(d:G5,s:"/",d:G2;HUDMSG_ALPHA,5902,cr_white,xpos,ypos,0.036,0.875);
       HudMessage(d:SceptreLevelEXP;HUDMSG_ALPHA,5902,cr_white,xpos,ypos,0.036,0.875);
      }
     }
     else
     {
      if (maxammo > 0)
      {
       SetFont("DQHUDFONTSML");
       HudMessage(d:ammo,s:"/",d:maxammo;HUDMSG_ALPHA,5902,cr_white,xpos,ypos,0.036,0.875);
      }
     }

     if (GetCVar("dvdsnewhud_showprimarymeters") == 1)
     {
      // Ammo Meter Empty "Glow" Border
      xpos = ScreenXOffset + 1289.0;
      ypos = 1060.0;
      if (maxammo > 0)
      {
       Z1 = 0;
       if (maxammo > 0) // if the weapon has any ammo maximum
       {
        If(StrIcmp(weapon, "BFG90002") == 0)
        {
         if (ammo < 40) Z1 += 1;
        }
        else
        If(StrIcmp(weapon, "Karasawa2") == 0)
        {
         if (ammo < 8) Z1 += 1;
        }
        else
        If(StrIcmp(weapon, "Repeater2") == 0)
        {
         if (ammo < 2) Z1 += 1;
        }
        else
        {
         if (ammo < 1) Z1 += 1;
        }
       }
 
       if (Z1 > 0)
       {
        SetFont("AMMBEMPT");
        HudMessage(s:"A";HUDMSG_ALPHA,5903,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
 
      // Ammo Meter / Sceptre EXP Meter Border
      xpos = ScreenXOffset + 1289.0;
      ypos = 1060.0;
      If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0)
      {
       if (GetCVar("dvds_noscexpgains") == 0)
       {
        SetFont("SCBFRAME"); 
        HudMessage(s:"A";HUDMSG_ALPHA,5904,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
      else
      {
       if (maxammo > 0)
       {
        SetFont("AMMBFRAM"); // SetFont("SCBFRAME"); 
        HudMessage(s:"A";HUDMSG_ALPHA,5904,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }

      // AMMO Meter Notches
      xpos = ScreenXOffset + 1188.0; // 1188.0
      ypos = 1060.0; // 1060.0
      msgalpha = 0.75;
 
      if (maxammo != 0)
      {
       G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
       G9 = 200 / G10;
       I1 = ammo * G9 / maxammo;
       if (I1 > G9) I1 = G9;
       if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
       // Normal
       for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 101; C1 > 1; C1 --)
       {    
        if (C1 <= I1)
        {
         if (G10 == 4) { SetFont("AMMBFIL4"); G11 = -2.0; }
         if (G10 == 2) { SetFont("AMMBFIL2"); G11 = -1.0; }
         if (G10 == 1) { SetFont("AMMBFILL"); G11 = 1.0; }
        }
        else SetFont("SCBFILEM");
        I2 = ((C1 << 16) * G10) + G11;
        HudMessage(s:"A";HUDMSG_ALPHA,C1+6000,cr_untranslated,xpos+I2,ypos,0.036,0.75);
       }
      }
      else // Sceptre EXP Notches
      {
       If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0)
       {
        if (GetCVar("dvds_noscexpgains") == 0)
        {
         G1 = SceptreLevelEXP;
         if (SceptreActualLevel < 1) { G3 = 0; G2 = MiscellaneousVars[301]; }
         if (SceptreActualLevel == 1) { G3 = MiscellaneousVars[301]; G2 = MiscellaneousVars[302]; }
         if (SceptreActualLevel == 2) { G3 = MiscellaneousVars[302]; G2 = MiscellaneousVars[303]; }
         if (SceptreActualLevel == 3) { G3 = MiscellaneousVars[303]; G2 = MiscellaneousVars[304]; }
         if (SceptreActualLevel == 4) { G3 = MiscellaneousVars[304]; G2 = MiscellaneousVars[305]; }
         if (SceptreActualLevel == 5) { G3 = MiscellaneousVars[305]; G2 = MiscellaneousVars[306]; }
         if (SceptreActualLevel == 6) { G3 = MiscellaneousVars[306]; G2 = MiscellaneousVars[307]; }
         if (SceptreActualLevel == 7) { G3 = MiscellaneousVars[307]; G2 = MiscellaneousVars[308]; }
         if (SceptreActualLevel == 8) { G3 = MiscellaneousVars[308]; G2 = MiscellaneousVars[309]; }
         if (SceptreActualLevel == 9) { G3 = MiscellaneousVars[309]; G2 = MiscellaneousVars[310]; }
         if (SceptreActualLevel == 10) { G3 = MiscellaneousVars[310]; G2 = MiscellaneousVars[311]; }
         if (SceptreActualLevel == 11) { G3 = MiscellaneousVars[311]; G2 = MiscellaneousVars[312]; }
         if (SceptreActualLevel == 12) { G3 = MiscellaneousVars[312]; G2 = MiscellaneousVars[313]; }
         if (SceptreActualLevel == 13) { G3 = MiscellaneousVars[313]; G2 = MiscellaneousVars[314]; }
         if (SceptreActualLevel == 14) { G3 = MiscellaneousVars[314]; G2 = MiscellaneousVars[315]; }
         if (SceptreActualLevel >= 15) { G3 = MiscellaneousVars[315]; G2 = MiscellaneousVars[316]; }

         G4 = G2 - G3;
         G1 -= G3;
  
         if (G4 > 0)
         {
          G10 = GetCVar("dvdsnewhud_hudmeternotchdetail");
          G9 = 200 / G10;
          I1 = G1 * G9 / G4;
          if (I1 > G9) I1 = G9;
          if (GetCVar("dvdsnewhud_showemptynotches") == 0) G7 = I1; else G7 = G9;
          for (C1 = 1; C1 <= G7; C1 ++) //for (C1 = 201; C1 > 1; C1 --)
          {    
           if (C1 <= I1)
           {
            if (G10 == 4) { SetFont("SCBFILL4"); G11 = -2.0; }
            if (G10 == 2) { SetFont("SCBFILL2"); G11 = -1.0; }
            if (G10 == 1) { SetFont("SCBFILLN"); G11 = 1.0; }
           }
           else SetFont("SCBFILEM");
           I2 = ((C1 << 16) * G10) + G11;
           HudMessage(s:"A";HUDMSG_ALPHA,C1+6000,cr_untranslated,xpos+I2,ypos,0.036,0.75);
          }
         }
        }
       }
      }
 
      // Ammo Meter / Sceptre EXP Meter Glass
      xpos = ScreenXOffset + 1289.0;
      ypos = 1060.0;
      If(StrIcmp(weapon, "SceptreOfEmpyrea") == 0)
      {
       if (GetCVar("dvds_noscexpgains") == 0)
       {
        SetFont("SCBGLASS"); 
        HudMessage(s:"A";HUDMSG_ALPHA,6205,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
      else
      {
       if (maxammo > 0)
       {
        SetFont("AMMBGLSS"); // SetFont("SCBGLASS"); 
        HudMessage(s:"A";HUDMSG_ALPHA,6205,cr_untranslated,xpos,ypos,0.036,0.75);
       }
      }
     }

     SetHudSize(0,0,0);
  }
 }

 SetHudSize(0,0,0);

 Delay(1);
 Restart;
}

// {-3-} Mana Regeneration

script "ManaRegenerationStuff" ENTER
{
 int C1, I1, C2, I2, RegenedMana, G2, ManaReDelay, ExtraManaRegen, G4, DoveManaTimer, G5, MaxRegenableMana, EquippedRegenCap, SkillLevelManaDelay, OverallDelay;
 int MaxManaLimit, buttons, delaycount;
 int FocusHumTimer, PerkFactor;

 if (FirstRun == 0)
 {
  FirstRun = 1;
  Thing_ChangeTID(0,1001);
 }

 delaycount = 20;
 // Accelerates MP Regen when Tension is Boosted
 if (MiscellaneousVars[181] >= 1) delaycount += 1; // "5" = +1 [+5%]
 if (MiscellaneousVars[181] >= 2) delaycount += 1; // "20" = +2 [+10%]
 if (MiscellaneousVars[181] >= 3) delaycount += 2; // "50" = +4 [+20%]
 if (MiscellaneousVars[181] >= 4) delaycount += 2; // "100" = +6 [+30%]
 if (MiscellaneousVars[181] >= 5) delaycount += 3; // "250" = +9 [+45%]
 if (MiscellaneousVars[181] >= 6) delaycount += 4; // "500" = +13 [+65%]
 if (MiscellaneousVars[181] >= 7) delaycount += 5; // "1000" = +18 [+90%]
 // PowerTrip Mode
 if (GetCVar("dvds_musou_powertripmode") == 1) delaycount = delaycount * 5 / 2; // 250%
 if (GetCVar("dvds_musou_powertripmode") == 2) delaycount = delaycount * 5; // 500%

 if (PowerupTimer[12] > 0) delaycount = delaycount * 11 / 10; // Acceleratle
 if (PowerupTimer[15] > 0) delaycount = delaycount * 9 / 10; // Deceleratle
 if (PowerupTimer[18] > 0) delaycount /= 5; // Fatigue = 0.2x regen speed
 if (PowerupTimer[20] > 0) delaycount *= 5; // Sleep = 5x regen speed

 // RegenMPFast perks
 PerkFactor = ((MiscellaneousVars[10015] * 500) + (MiscellaneousVars[10016] * 1250)) + 10000;
 delaycount = delaycount * PerkFactor / 10000; // "RegenMPFast" and "RegenMPFast EX" perks.

 // Checks Mana Regen Rate Menu Option
 delaycount = delaycount * MiscellaneousVars[213] / 100;
 if (MiscellaneousVars[212] > 0) // Focusing
 {
  // Slowly increases the speed of regen as focus lasts longer
  if (MiscellaneousVars[231] >= 140) delaycount += 1; // [4 seconds]
  if (MiscellaneousVars[231] >= 245) delaycount += 1; // [7 seconds]
  if (MiscellaneousVars[231] >= 315) delaycount += 2; // [9 seconds]
  if (MiscellaneousVars[231] >= 350) delaycount += 2; // [10 seconds]
  if (MiscellaneousVars[231] >= 490) delaycount += 3; // [14 seconds]
  if (MiscellaneousVars[231] >= 630) delaycount += 3; // [18 seconds]
  if (MiscellaneousVars[231] >= 910) delaycount += 4; // [26 seconds]
  if (MiscellaneousVars[231] >= 2100) delaycount = (delaycount * 3) / 2; // [60 seconds]
  if (random(1,25) == 1) delaycount *= 8; else delaycount *= 4;

  FocusHumTimer = MiscellaneousVars[231] % 25;
  if (MiscellaneousVars[231] >= 140) FocusHumTimer = MiscellaneousVars[231] % 24;
  if (MiscellaneousVars[231] >= 245) FocusHumTimer = MiscellaneousVars[231] % 23;
  if (MiscellaneousVars[231] >= 315) FocusHumTimer = MiscellaneousVars[231] % 22;
  if (MiscellaneousVars[231] >= 350) FocusHumTimer = MiscellaneousVars[231] % 21;
  if (MiscellaneousVars[231] >= 490) FocusHumTimer = MiscellaneousVars[231] % 19;
  if (MiscellaneousVars[231] >= 630) FocusHumTimer = MiscellaneousVars[231] % 17;
  if (MiscellaneousVars[231] >= 910) FocusHumTimer = MiscellaneousVars[231] % 15;
  if (MiscellaneousVars[231] >= 2100) FocusHumTimer = MiscellaneousVars[231] % 12;
  if (FocusHumTimer == 1)
  {
   //SetActivator(1001);
   ActivatorSound("focushum",127);
   //SetActivator(0);
  }
 }

 if (delaycount < 1) delaycount = 1;
 MiscellaneousVars[211] -= delaycount;

 RegenedMana = 0;
 if (MiscellaneousVars[211] < 1)
 {
  // Main Regeneration
  if (CurrentMana < MaxMana)
  {
   C2 = GetActorProperty(1001,APROP_HEALTH);
   if (C2 > 0)
   {
    if (GameSkill() == SKILL_VERY_EASY) RegenedMana = 3;
    if (GameSkill() == SKILL_EASY) RegenedMana = 3;
    if (GameSkill() == SKILL_NORMAL) RegenedMana = 2;
    if (GameSkill() == SKILL_HARD) RegenedMana = 2;
    if (GameSkill() == SKILL_VERY_HARD) RegenedMana = 1;
 
    // A combined total of 10 points of Sorcery/Theraphesuis are needed for an extra point of MP regen.
    RegenedMana += ((MiscellaneousVars[34] + MiscellaneousVars[36]) / 10);
   }
 
   if (PowerupTimer[7] > 0) // Divine Avatar
   {
    ExtraManaRegen = PlayerLevel / 7;
    RegenedMana += ExtraManaRegen;
    if (random(0,100) < 26)
    {
     RegenedMana = RegenedMana * 5 / 4;
    }
    else
    {
     if (random(0,100) < 51)
     {
      RegenedMana = RegenedMana * 9 / 8;
     }
    }
   }
   else
   {
    ExtraManaRegen = PlayerLevel / 20;
    RegenedMana += ExtraManaRegen;
    if (random(0,100) < 26)
    {
     RegenedMana = RegenedMana * 17 / 16;
    }
    else
    {
     if (random(0,100) < 51)
     {
      RegenedMana = RegenedMana * 33 / 32;
     }
    }
   }
 
   // Character-Based regen factors
   if (CharacterClass == 0) RegenedMana = RegenedMana * random(13,15) / 16; // Deggaris (81.25%-93.75%)
   if (CharacterClass == 1) RegenedMana = RegenedMana * random(18,20) / 16; // Illucia (112.5%-125%)
   if (CharacterClass == 2) RegenedMana = RegenedMana * random(23,25) / 16; // Flora (143.75%-156.25%)
 
   // Sauron's Helmet
   if (CharacterClass == 0 && CheckActorInventory(1001,"SauronHelmet") > 0) RegenedMana = RegenedMana * 11 / 8; // Deggaris w/ Helmet (137.5%)
   if (CharacterClass == 1 && CheckActorInventory(1001,"SauronHelmet") > 0) RegenedMana = RegenedMana * 10 / 8; // Illucia w/ Helmet (125%)
   if (CharacterClass == 2 && CheckActorInventory(1001,"SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
   // Sauron's Gauntlets
   if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) RegenedMana = RegenedMana * 5 / 4; // Deggaris w/ Gauntlets (125%)
   if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) RegenedMana = RegenedMana * 5 / 4; // Illucia w/ Gauntlets (125%)
   if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) RegenedMana = RegenedMana * 5 / 4; // Flora w/ Gauntlets (125%)
   // The One Ring
   if (CharacterClass == 0 && CheckActorInventory(1001,"TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Deggaris w/ Ring (62.5%)
   if (CharacterClass == 1 && CheckActorInventory(1001,"TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Illucia w/ Ring (75%)
   if (CharacterClass == 2 && CheckActorInventory(1001,"TheOneRing") > 0) RegenedMana = RegenedMana * 7 / 8; // Flora w/ Ring (87.5%)
 
   // Ruinous Shield - quarters MP regeneration
   if (CharacterClass == 2 && CheckActorInventory(1001,"RuinousShield") > 0) RegenedMana = RegenedMana * 1 / 4; // (25%)
 
   // Checks Mana Regen Rate Menu Option
   RegenedMana = RegenedMana * MiscellaneousVars[139] / 100;
 
   if (RegenedMana < 1) RegenedMana = 1;
 
   // New Addition = Caps Maximum Mana Regeneration to a certain amount based on Difficulty and armor-type items.
   MaxRegenableMana = MaxMana * 50 / 100;
   if (GameSkill() == SKILL_VERY_EASY) MaxRegenableMana = MaxMana * 61 / 100; 	// (61% of Max)
   if (GameSkill() == SKILL_EASY) MaxRegenableMana = MaxMana * 55 / 100; 		// (55% of Max)
   if (GameSkill() == SKILL_NORMAL) MaxRegenableMana = MaxMana * 50 / 100; 		// (50% of Max)
   if (GameSkill() == SKILL_HARD) MaxRegenableMana = MaxMana * 45 / 100; 		// (45% of Max)
   if (GameSkill() == SKILL_VERY_HARD) MaxRegenableMana = MaxMana * 39 / 100; 	// (39% of Max)
 
   EquippedRegenCap = 100; // in percent
   // All-Character Specfic Items
   if (CheckActorInventory(1001,"SauronHelmet") > 0) EquippedRegenCap -= 25;  // (-25% extension if Sauron's Helmet is equipped)
   if (CheckActorInventory(1001,"SauronGauntlets") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
   if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
   if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
   if (CheckActorInventory(1001,"TheOneRing") > 0) EquippedRegenCap += 50;  // (+50% extension if The One Ring is equipped)
 
   // Marine Specfic Items (between -4% and -16%, since only one can be equipped at once
   if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) EquippedRegenCap -= 4; // (-4% for Green Armor)
   if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) EquippedRegenCap -= 8; // (-8% for Blue Armor)
   if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) EquippedRegenCap -= 10; // (-10% for Stone Armor 1)
   if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) EquippedRegenCap -= 14; // (-14% for Diamond Armor 1)
   if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) EquippedRegenCap -= 12; // (-12% for Stone Armor 2)
   if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) EquippedRegenCap -= 16; // (-16% for Diamond Armor 2)
 
   // Flora Specfic Items (up to +150%)
   if (CheckActorInventory(1001,"EvenstarNecklace") > 0) EquippedRegenCap += 25;  // (+25% extension if Evenstar Necklace is equipped)
   if (CheckActorInventory(1001,"AnubisCufflinks") > 0) EquippedRegenCap += 62;  // (+62% extension if Anubis Cufflinks are equipped)
   if (CheckActorInventory(1001,"KissaBra") > 0) EquippedRegenCap += 38; // (+38% extension if Kissa's Armor Brassiere is equipped)
   if (CheckActorInventory(1001,"BalrogRing") > 0) EquippedRegenCap += 25; // (+25% extension if Balrog's Ring is equipped)
 
   if (EquippedRegenCap < 20) EquippedRegenCap = 20;
   if (EquippedRegenCap > 640) EquippedRegenCap = 640;
   MaxRegenableMana = MaxRegenableMana * EquippedRegenCap / 100;
 
   // Caps Mana Regeneration to a certain % of the maximum based on difficulty level
   if (RegenedMana > MaxRegenableMana) RegenedMana = MaxRegenableMana;
 
   // Dove's Ribbon [Increases MP Regeneration]
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0)
    {
     RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (100% Chance of Extra 2-4 Mana)
     if (random(1,3) == 2) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (33.3% Chance of extra 2-4 Mana)
     if (random(1,9) == 5) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (11.1% Chance of extra 2-4 Mana)
     if (random(1,27) == 14) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (3.7037% Chance of extra 2-4 Mana)
     if (random(1,81) == 41) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (1.2345% Chance of extra 2-4 Mana)
     if (random(1,243) == 122) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (0.0411% Chance of extra 2-4 Mana)
    }
   }
 
   // Focus = 25% more mana per interval
   if (MiscellaneousVars[212] > 0) RegenedMana = RegenedMana * 5 / 4;
 
   // Prevents 0 MP regeneration periods
   if (RegenedMana < 1) RegenedMana = 1;
 
   // The actual Regeneration Part
   if (GetActorProperty(1001,APROP_HEALTH) > 0 && CurrentMana < MaxMana)
   {
    CurrentMana += RegenedMana;
 
/*
    if (MiscellaneousVars[2000] == 0)
    {
     SetHudSize(640,480,0);
     HudMessage(s:"+",d:RegenedMana,s:" Mana";0,3419,cr_blue,51.0,42.0,0.75);
     SetHudSize(0,0,0);
    }
*/
 
    if (CurrentMana > MaxMana) CurrentMana = MaxMana;
   }
 
   if (CharacterClass == 0) MaxManaLimit = MaxMana * 2;
   if (CharacterClass == 1) MaxManaLimit = MaxMana * 2;
   if (CharacterClass == 2) MaxManaLimit = MaxMana * 2;
 
   if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
   MiscellaneousVars[243] = CurrentMana;
   MiscellaneousVars[238] = CurrentMana;
  }


  // Reset Regen Delay
  if (GameSkill() == SKILL_VERY_EASY) SkillLevelManaDelay = 600; // 30 tics
  if (GameSkill() == SKILL_EASY) SkillLevelManaDelay = 660; // 33 tics
  if (GameSkill() == SKILL_NORMAL) SkillLevelManaDelay = 740; // 37 tics
  if (GameSkill() == SKILL_HARD) SkillLevelManaDelay = 840; // 42 tics
  if (GameSkill() == SKILL_VERY_HARD) SkillLevelManaDelay = 960; // 48 tics
  if (GetCVar("dvdsdebug_showmanaregenstuff") > 0) PrintBold(d:SkillLevelManaDelay);
  if (CharacterClass == 0) SkillLevelManaDelay += (20 * random(-3,5)); 
  if (CharacterClass == 1) SkillLevelManaDelay += (20 * random(-4,4));
  if (CharacterClass == 2) SkillLevelManaDelay += (20 * random(-5,3));
  if (GetCVar("dvdsdebug_showmanaregenstuff") > 0) PrintBold(d:SkillLevelManaDelay);

  if (CharacterClass == 0) ManaReDelay = PlayerLevel / 30; // Deggaris (up to 3/6)
  else if (CharacterClass == 1) ManaReDelay = PlayerLevel / 25; // Illucia (up to 4/8)
  else if (CharacterClass == 2) ManaReDelay = PlayerLevel / 20; // Flora (up to 5/10) 
  OverallDelay = SkillLevelManaDelay - ManaReDelay;
  if (GetCVar("dvdsdebug_showmanaregenstuff") > 0) PrintBold(d:OverallDelay);

  // A combined total of 30 points of Sorcery/Theraphesuis are needed for a tic-point of faster regen time.
  ManaReDelay = (MiscellaneousVars[34] + MiscellaneousVars[36]) / 600;
  OverallDelay -= ManaReDelay;
  if (GetCVar("dvdsdebug_showmanaregenstuff") > 0) PrintBold(d:OverallDelay);

  if (GameSkill() == SKILL_VERY_EASY) if (OverallDelay < 20) OverallDelay = 20;
  if (GameSkill() == SKILL_EASY) if (OverallDelay < 40) OverallDelay = 40;
  if (GameSkill() == SKILL_NORMAL) if (OverallDelay < 80) OverallDelay = 80;
  if (GameSkill() == SKILL_HARD) if (OverallDelay < 140) OverallDelay = 140;
  if (GameSkill() == SKILL_VERY_HARD) if (OverallDelay < 220) OverallDelay = 220;
  if (GetCVar("dvdsdebug_showmanaregenstuff") > 0) PrintBold(d:OverallDelay);
  MiscellaneousVars[211] = OverallDelay;
 }

 if (GetCVar("dvdsdebug_showmanaregenstuff") > 0)
 {
  PrintBold(
             s:"Focus?: ",d:MiscellaneousVars[212],s:"\n",
             s:"FocusTimer: ",d:MiscellaneousVars[231],s:"\n",
             s:"HumTimer: ",d:FocusHumTimer,s:"\n\n",
             s:"Timer: ",d:MiscellaneousVars[211],s:"\n",
             s:"DelayCount: ",d:delaycount,s:"\n",
             s:"RegenedMana: ",d:RegenedMana,s:"\n"
            );
 }           


 // Gets Values for Accquired Kills & Secrets [will move this to a different ENTER script later :P]
 if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
 {
  G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
  MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
  MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
  SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
  ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
  //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
 }
 if (ModType == 1) // Deus Vult 1 only
 {
  if (SpecialGameFlags[1000] != 1)
  {
   G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
   if (G2 >= 1100 && G2 <= 1199)
   {
    MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
    ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
    //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
   }
  }
 }
 if (ModType == 2) // Deus Vult 2 only
 {
  G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
  if (G2 >= 1200 && G2 <= 1299)
  {
   MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
   MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
   SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
   ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
   //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
  }
 }
 Delay(1);
 Restart;
}

//------------------------------
// FUNCTION: Get ExpMultiFactor
//------------------------------
function int GetExpMultiFactor (void)
{
  int ExpMultiFactor, Exp1, Exp2;
  // Gets the Experience Multiplication Factor [Part 1]
  ExpMultiFactor = Random(90,120);
  if (PlayerLevel < 40) ExpMultiFactor += PlayerLevel * 17 / 16; // +6.25%
  else
  {
   if (PlayerLevel < 80) ExpMultiFactor += PlayerLevel * 9 / 8; // +12.5%
   else
   {
    if (PlayerLevel < 120) ExpMultiFactor += PlayerLevel * 5 / 4; // +25%
    else
    {
     if (PlayerLevel < 160) ExpMultiFactor += PlayerLevel * 3 / 2; // +50%
     else ExpMultiFactor += PlayerLevel * 2; // +100%
    }
   }
  }

  // Gets the Experience Multiplication Factor [Part 2]
  Exp1 = GetLevelInfo(LEVELINFO_LEVELNUM);
  if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
  {
   if (ClassicDoomType == 1 || ClassicDoomType == 2) // Classic Doom 1 or Heretic
   {
    if (Exp1 != 1000 || Exp1 != 1010)
    {
     Exp1 += MiscellaneousVars[52]; 
     Exp1 += MiscellaneousVars[169]; 
     if (Exp1 < 1) Exp1 = 1;
     if (Exp1 > 50) Exp1 = 50;
    }
    if (Exp1 == 1000) Exp2 = 0; // E1M0 [Classic Doom 1]
    if (Exp1 == 1010) Exp2 = 0; // E1MA [Heretic]
    // Episode 1
    if (Exp1 == 1) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M1]
    if (Exp1 == 2) Exp2 = Exp1 * 1010 / 1000; // Monster Bonus [100%] [E1M2]
    if (Exp1 == 3) Exp2 = Exp1 * 1020 / 1000; // Monster Bonus [100%] [E1M3]
    if (Exp1 == 9) Exp2 = Exp1 * 1090 / 1000; // Monster Bonus [100%] [E1M9]
    if (Exp1 == 10) Exp2 = Exp1 * 1100 / 1000; // Monster Bonus [100%] [E1M10]
    if (Exp1 == 4) Exp2 = Exp1 * 1030 / 1000; // Monster Bonus [100%] [E1M4]
    if (Exp1 == 5) Exp2 = Exp1 * 1040 / 1000; // Monster Bonus [100%] [E1M5]
    if (Exp1 == 6) Exp2 = Exp1 * 1050 / 1000; // Monster Bonus [100%] [E1M6]
    if (Exp1 == 7) Exp2 = Exp1 * 1060 / 1000; // Monster Bonus [100%] [E1M7]
    if (Exp1 == 8) Exp2 = Exp1 * 1070 / 1000; // Monster Bonus [100%] [E1M8]
    // Episode 2
    if (Exp1 == 11) Exp2 = Exp1 * 1112 / 1000; // Monster Bonus [100%] [E2M1]
    if (Exp1 == 12) Exp2 = Exp1 * 1125 / 1000; // Monster Bonus [100%] [E2M2]
    if (Exp1 == 13) Exp2 = Exp1 * 1137 / 1000; // Monster Bonus [100%] [E2M3]
    if (Exp1 == 14) Exp2 = Exp1 * 1150 / 1000; // Monster Bonus [100%] [E2M4]
    if (Exp1 == 15) Exp2 = Exp1 * 1162 / 1000; // Monster Bonus [100%] [E2M5]
    if (Exp1 == 19) Exp2 = Exp1 * 1220 / 1000; // Monster Bonus [100%] [E2M9]
    if (Exp1 == 20) Exp2 = Exp1 * 1240 / 1000; // Monster Bonus [100%] [E2M10]
    if (Exp1 == 16) Exp2 = Exp1 * 1175 / 1000; // Monster Bonus [100%] [E2M6]
    if (Exp1 == 17) Exp2 = Exp1 * 1187 / 1000; // Monster Bonus [100%] [E2M7]
    if (Exp1 == 18) Exp2 = Exp1 * 1200 / 1000; // Monster Bonus [100%] [E2M8]
    // Episode 3
    if (Exp1 == 21) Exp2 = Exp1 * 1280 / 1000; // Monster Bonus [100%] [E3M1]
    if (Exp1 == 22) Exp2 = Exp1 * 1320 / 1000; // Monster Bonus [100%] [E3M2]
    if (Exp1 == 23) Exp2 = Exp1 * 1360 / 1000; // Monster Bonus [100%] [E3M3]
    if (Exp1 == 24) Exp2 = Exp1 * 1400 / 1000; // Monster Bonus [100%] [E3M4]
    if (Exp1 == 25) Exp2 = Exp1 * 1440 / 1000; // Monster Bonus [100%] [E3M5]
    if (Exp1 == 26) Exp2 = Exp1 * 1480 / 1000; // Monster Bonus [100%] [E3M6]
    if (Exp1 == 29) Exp2 = Exp1 * 1600 / 1000; // Monster Bonus [100%] [E3M9]
    if (Exp1 == 30) Exp2 = Exp1 * 1680 / 1000; // Monster Bonus [100%] [E3M10]
    if (Exp1 == 27) Exp2 = Exp1 * 1520 / 1000; // Monster Bonus [100%] [E3M7]
    if (Exp1 == 28) Exp2 = Exp1 * 1560 / 1000; // Monster Bonus [100%] [E3M8]
    // Episode 4
    if (Exp1 == 31) Exp2 = Exp1 * 1750 / 1000; // Monster Bonus [100%] [E4M1]
    if (Exp1 == 32) Exp2 = Exp1 * 1825 / 1000; // Monster Bonus [100%] [E4M2]
    if (Exp1 == 39) Exp2 = Exp1 * 2600 / 1000; // Monster Bonus [100%] [E4M9]
    if (Exp1 == 40) Exp2 = Exp1 * 2875 / 1000; // Monster Bonus [100%] [E4M10]
    if (Exp1 == 33) Exp2 = Exp1 * 1900 / 1000; // Monster Bonus [100%] [E4M3]
    if (Exp1 == 34) Exp2 = Exp1 * 2000 / 1000; // Monster Bonus [100%] [E4M4]
    if (Exp1 == 35) Exp2 = Exp1 * 2100 / 1000; // Monster Bonus [100%] [E4M5]
    if (Exp1 == 36) Exp2 = Exp1 * 2225 / 1000; // Monster Bonus [100%] [E4M6]
    if (Exp1 == 37) Exp2 = Exp1 * 2350 / 1000; // Monster Bonus [100%] [E4M7]
    if (Exp1 == 38) Exp2 = Exp1 * 2475 / 1000; // Monster Bonus [100%] [E4M8]
    // Episode 4
    if (Exp1 == 31) Exp2 = Exp1 * 1750 / 1000; // Monster Bonus [100%] [E4M1]
    if (Exp1 == 32) Exp2 = Exp1 * 1825 / 1000; // Monster Bonus [100%] [E4M2]
    if (Exp1 == 39) Exp2 = Exp1 * 2600 / 1000; // Monster Bonus [100%] [E4M9]
    if (Exp1 == 40) Exp2 = Exp1 * 2875 / 1000; // Monster Bonus [100%] [E4M10]
    if (Exp1 == 33) Exp2 = Exp1 * 1900 / 1000; // Monster Bonus [100%] [E4M3]
    if (Exp1 == 34) Exp2 = Exp1 * 2000 / 1000; // Monster Bonus [100%] [E4M4]
    if (Exp1 == 35) Exp2 = Exp1 * 2100 / 1000; // Monster Bonus [100%] [E4M5]
    if (Exp1 == 36) Exp2 = Exp1 * 2225 / 1000; // Monster Bonus [100%] [E4M6]
    if (Exp1 == 37) Exp2 = Exp1 * 2350 / 1000; // Monster Bonus [100%] [E4M7]
    if (Exp1 == 38) Exp2 = Exp1 * 2475 / 1000; // Monster Bonus [100%] [E4M8]
    // Episode 5
    if (Exp1 == 41) Exp2 = Exp1 * 1750 / 1000; // Monster Bonus [100%] [E5M1]
    if (Exp1 == 42) Exp2 = Exp1 * 1825 / 1000; // Monster Bonus [100%] [E5M2]
    if (Exp1 == 49) Exp2 = Exp1 * 2600 / 1000; // Monster Bonus [100%] [E5M9]
    if (Exp1 == 50) Exp2 = Exp1 * 2875 / 1000; // Monster Bonus [100%] [E5M10]
    if (Exp1 == 43) Exp2 = Exp1 * 1900 / 1000; // Monster Bonus [100%] [E5M3]
    if (Exp1 == 44) Exp2 = Exp1 * 2000 / 1000; // Monster Bonus [100%] [E5M4]
    if (Exp1 == 45) Exp2 = Exp1 * 2100 / 1000; // Monster Bonus [100%] [E5M5]
    if (Exp1 == 46) Exp2 = Exp1 * 2225 / 1000; // Monster Bonus [100%] [E5M6]
    if (Exp1 == 47) Exp2 = Exp1 * 2350 / 1000; // Monster Bonus [100%] [E5M7]
    if (Exp1 == 48) Exp2 = Exp1 * 2475 / 1000; // Monster Bonus [100%] [E5M8]

          if (Exp1 == 9) Exp2 = Exp2 * 15 / 4; // [375%]
    else if (Exp1 == 19) Exp2 = Exp2 * 5;      // [500%]
    else if (Exp1 == 29) Exp2 = Exp2 * 25 / 4; // [625%]
    else if (Exp1 == 39) Exp2 = Exp2 * 15 / 2; // [750%]
    else if (Exp1 == 49) Exp2 = Exp2 * 35 / 4; // [875%]
                    else Exp2 = Exp2 * 5 / 2;  // [250%]
   }
   else // Classic Doom 2 / Hexen / Strife
   {
    if (Exp1 != 1050 || Exp1 != 1020 || Exp1 != 1030)
    {
     Exp1 += MiscellaneousVars[52];
     Exp1 += MiscellaneousVars[169]; 
     if (Exp1 < 1) Exp1 = 1;
     if (Exp1 > 50) Exp1 = 50;
    }
    if (Exp1 == 1050) Exp2 = 0; // MAP00 [Classic Doom 2]
    if (Exp1 == 1020) Exp2 = 0; // MAP0A [Hexen]
    if (Exp1 == 1030) Exp2 = 0; // MAPAA [Strife]
    // Main Game
    if (Exp1 == 1) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [MAP01]
    if (Exp1 == 2) Exp2 = Exp1 * 10125 / 10000; // Monster Bonus [101.25%] [MAP02]
    if (Exp1 == 3) Exp2 = Exp1 * 1025 / 1000; // Monster Bonus [102.5%] [MAP03]
    if (Exp1 == 4) Exp2 = Exp1 * 10375 / 10000; // Monster Bonus [103.75%] [MAP04]
    if (Exp1 == 5) Exp2 = Exp1 * 1050 / 1000; // Monster Bonus [105%] [MAP05]

    if (Exp1 == 6) Exp2 = Exp1 * 1069 / 1000; // Monster Bonus [106.9%] [MAP06]
    if (Exp1 == 7) Exp2 = Exp1 * 1088 / 1000; // Monster Bonus [108.8%] [MAP07]
    if (Exp1 == 8) Exp2 = Exp1 * 1107 / 1000; // Monster Bonus [110.7%] [MAP08]
    if (Exp1 == 9) Exp2 = Exp1 * 1125 / 1000; // Monster Bonus [112.5%] [MAP09]
    if (Exp1 == 10) Exp2 = Exp1 * 1144 / 1000; // Monster Bonus [114.4%] [MAP10]

    if (Exp1 == 11) Exp2 = Exp1 * 1169 / 1000; // Monster Bonus [116.9%] [MAP11]
    if (Exp1 == 12) Exp2 = Exp1 * 1194 / 1000; // Monster Bonus [119.4%] [MAP12]
    if (Exp1 == 13) Exp2 = Exp1 * 1219 / 1000; // Monster Bonus [121.9%] [MAP13]
    if (Exp1 == 14) Exp2 = Exp1 * 1244 / 1000; // Monster Bonus [124.4%] [MAP14]
    if (Exp1 == 15) Exp2 = Exp1 * 1269 / 1000; // Monster Bonus [126.9%] [MAP15]

    if (Exp1 == 31) Exp2 = Exp1 * 1519 / 1000; // Monster Bonus [151.9%] [MAP31]
    if (Exp1 == 32) Exp2 = Exp1 * 2019 / 1000; // Monster Bonus [201.9%] [MAP32]

    if (Exp1 == 16) Exp2 = Exp1 * 1300 / 1000; // Monster Bonus [130.0%] [MAP16]
    if (Exp1 == 17) Exp2 = Exp1 * 1331 / 1000; // Monster Bonus [133.1%] [MAP17]
    if (Exp1 == 18) Exp2 = Exp1 * 1363 / 1000; // Monster Bonus [136.3%] [MAP18]
    if (Exp1 == 19) Exp2 = Exp1 * 1394 / 1000; // Monster Bonus [139.4%] [MAP19]
    if (Exp1 == 20) Exp2 = Exp1 * 1425 / 1000; // Monster Bonus [142.5%] [MAP20]

    if (Exp1 == 21) Exp2 = Exp1 * 1475 / 1000; // Monster Bonus [147.5%] [MAP21]
    if (Exp1 == 22) Exp2 = Exp1 * 1525 / 1000; // Monster Bonus [152.5%] [MAP22]
    if (Exp1 == 23) Exp2 = Exp1 * 1575 / 1000; // Monster Bonus [157.5%] [MAP23]
    if (Exp1 == 24) Exp2 = Exp1 * 1625 / 1000; // Monster Bonus [162.5%] [MAP24]
    if (Exp1 == 25) Exp2 = Exp1 * 1675 / 1000; // Monster Bonus [167.5%] [MAP25]

    if (Exp1 == 26) Exp2 = Exp1 * 1743 / 1000; // Monster Bonus [174.3%] [MAP26]
    if (Exp1 == 27) Exp2 = Exp1 * 1819 / 1000; // Monster Bonus [181.9%] [MAP27]
    if (Exp1 == 28) Exp2 = Exp1 * 1900 / 1000; // Monster Bonus [190.0%] [MAP28]
    if (Exp1 == 29) Exp2 = Exp1 * 1998 / 1000; // Monster Bonus [189.0%] [MAP29]
    if (Exp1 == 30) Exp2 = Exp1 * 2688 / 1000; // Monster Bonus [268.8%] [MAP30]
    //PrintBold(d:Exp2);

         if (Exp1 == 31) Exp2 = Exp2 * 5; // [500%]
    else if (Exp1 == 32) Exp2 = Exp2 * 15 / 2; // [750%]
                    else Exp2 = Exp2 * 5 / 2; // [250%]
    //PrintBold(d:Exp2);
   }
  }
  else
  if (ModType == 1) // Deus Vult 1
  {
   if (Exp1 != 1100)
   {
    Exp1 += MiscellaneousVars[52];
    Exp1 += MiscellaneousVars[169]; 
    if (Exp1 < 1101) Exp1 = 1101;
    if (Exp1 > 1104) Exp1 = 1104;
   }
   if (Exp1 == 1100) Exp2 = (Exp1 - 1100) * 26 / 25; // +4% Exp Bonus // DV1M00
   if (Exp1 == 1101) Exp2 = (Exp1 - 1100) * 100 / 100; // Monster Bonus [100%]
   if (Exp1 == 1102) Exp2 = (Exp1 - 1100) * 120 / 100; // Monster Bonus [120%]
   if (Exp1 == 1103) Exp2 = (Exp1 - 1100) * 144 / 100; // Monster Bonus [144%]
   if (Exp1 == 1104) Exp2 = (Exp1 - 1100) * 192 / 100; // Monster Bonus [192%]

        if (Exp1 == 31) Exp2 = Exp2 * 5 / 2; // [250%]
   else if (Exp1 == 32) Exp2 = Exp2 * 15 / 4; // [375%]
                   else Exp2 = Exp2 * 5 / 4; // [125%]
  }
  else
  if (ModType == 2) // Deus Vult 2
  {
   if (Exp1 != 1200)
   {
    Exp1 += MiscellaneousVars[52];
    Exp1 += MiscellaneousVars[169]; 
    if (Exp1 < 1201) Exp1 = 1201;
    if (Exp1 > 1212) Exp1 = 1212;
   }

   // Zendaria Levels
   if (Exp1 == 1200) Exp2 = (Exp1 - 1200) * 26 / 25; // +4% Exp Bonus // Prolouge - The Mysterious Cave
   // Earth-type Levels
   if (Exp1 == 1201) Exp2 = (Exp1 - 1200) * 100 / 100; // Monster Bonus // MAP01 - Entryway Pass
   if (Exp1 == 1202) Exp2 = (Exp1 - 1200) * 106 / 100; // Monster Bonus // MAP02 - Mutagen
   if (Exp1 == 1203) Exp2 = (Exp1 - 1200) * 112 / 100; // Monster Bonus // MAP03 - Crouching Demon, Hidden Archvile
   if (Exp1 == 1204) Exp2 = (Exp1 - 1200) * 120 / 100; // Monster Bonus // MAP04 - Minas Morgul
   if (Exp1 == 1205) Exp2 = (Exp1 - 1200) * 126 / 100; // Monster Bonus // MAP05 - Eagle's Nest
   if (Exp1 == 1206) Exp2 = (Exp1 - 1200) * 134 / 100; // Monster Bonus // MAP05B - The Manliest Level Ever
   if (Exp1 == 1207) Exp2 = (Exp1 - 1200) * 142 / 100; // Monster Bonus // MAP06 - Stargate
   if (Exp1 == 1208) Exp2 = (Exp1 - 1200) * 150 / 100; // Monster Bonus // MAP07 - The Desert Temple
   // Hell Levels
   if (Exp1 == 1209) Exp2 = (Exp1 - 1200) * 178 / 100; // Monster Bonus // MAP08 - The Unholy Cathedral
   if (Exp1 == 1210) Exp2 = (Exp1 - 1200) * 210 / 100; // Monster Bonus // MAP09 - You Shall Not Pass!
   if (Exp1 == 1211) Exp2 = (Exp1 - 1200) * 248 / 100; // Monster Bonus // MAP10 - Hell's Vendetta
   if (Exp1 == 1212) Exp2 = (Exp1 - 1200) * 292 / 100; // Monster Bonus // MAP10B - attedneV s'lleH
   // Extra Levels
   if (Exp1 == 1213) Exp2 = 0; // NO Exp Bonus since it's Heaven, foo. :P // MAP11 - St. Peter's Gate
   if (Exp1 == 1214) Exp2 = (Exp1 - 1200) * 140 / 100; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
   if (Exp1 == 1215) Exp2 = (Exp1 - 1200) * 292 / 100; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
   // Ending Levels
   if (Exp1 == 1216) Exp2 = 0; // NO Exp Bonus in ending levels // MAP13 - The Return Home
   if (Exp1 == 1217) Exp2 = 0; // NO Exp Bonus in ending levels // ENDMAP - Credits and Cast


        if (Exp1 == 31) Exp2 = Exp2 * 5 / 2; // [250%]
   else if (Exp1 == 32) Exp2 = Exp2 * 15 / 4; // [375%]
                   else Exp2 = Exp2 * 5 / 4; // [125%]
  }

  ExpMultiFactor += Exp2;

  if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
  {
   PrintBold(s:"ModType: ",d:ModType,s:"\nExp1: ",d:Exp1,s:"\nExp2: ",d:Exp2,s:"\nExpMultiFactor: ",d:ExpMultiFactor);
  }
  return ExpMultiFactor;
}

//---------------------------------------------
// FUNCTION: Get Experience for Each EXP Check
//---------------------------------------------
function int GetExperience (int RealExpGain, int ExpMultiFactor)
{
 int OldExp1 = RealExpGain;
 RealExpGain = RealExpGain * ExpMultiFactor / 100; // Randomizes some of the experience gained
 int OldExp2 = RealExpGain;
 RealExpGain = RealExpGain * (48 + MiscellaneousVars[40]) / 48; // Get # of Deftness state
 int OldExp3 = RealExpGain;
 RealExpGain = RealExpGain * MiscellaneousVars[90] / 100; // EXP Multiplier Option
 int OldExp4 = RealExpGain;
 if (GameSkill() == SKILL_VERY_EASY) RealExpGain = RealExpGain * 25 / 8; // 312.5%
 else if (GameSkill() == SKILL_EASY) RealExpGain = RealExpGain * 5 / 2; // 250%
 else if (GameSkill() == SKILL_NORMAL) RealExpGain = RealExpGain * 15 / 8; // 187.5%
 else if (GameSkill() == SKILL_HARD) RealExpGain = RealExpGain * 5 / 4; // 125%
 else if (GameSkill() == SKILL_VERY_HARD) RealExpGain = RealExpGain * 7 / 8; // 87.5%
 int OldExp5 = RealExpGain;

 if (CharacterClass == 2) // Only Flora can Equip the Pearly Corset [+30% EXP Bonus (or a 5% chance for a +45% bonus)]
 {
  if (CheckActorInventory(1001,"PearlyCorset")) { if (random(1,100) < 6) { RealExpGain = RealExpGain * 145 / 100; } else { RealExpGain = RealExpGain * 130 / 100; } }
 }
 int OldExp6 = RealExpGain;
 if (PowerupTimer[7] > 0) { if (random(1,100) > 67) { RealExpGain = RealExpGain * 7 / 6; } else { RealExpGain = RealExpGain * 13 / 12; } } // Divine Avatar [+8.333% EXP, (33% chance of +16.67% EXP instead]

 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"OldEXP1: ",d:OldExp1,
           s:"\nOldEXP2: ",d:OldExp2,
           s:"\nOldEXP3: ",d:OldExp3,
           s:"\nOldEXP4: ",d:OldExp4,
           s:"\nOldEXP5: ",d:OldExp5,
           s:"\nOldEXP6: ",d:OldExp6,
           s:"\nNewEXP: ",d:RealExpGain);
 }
 return RealExpGain;
}

// Seperated Levelup Code
script "LevelUpCode" ENTER // (void)
{
 int C1, I1, C2, I2, Z1, Z2, G1, G2, G3, Exp1, Exp2, ExpMultiFactor, RealExpGain, HPBoost, MPBoost, MapCheck, RandomizedStatChance, RandomizedStatChance2;
 int PerkFactor;
 int leveluptimes = 0;
 int leveluptimesmax = 200;
 //*******************
 //** LEVEL UP CODE **
 //*******************
 for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
 {
  MiscellaneousVars[48] = ExpTable[PlayerLevel] - Experience;
  if (Experience >= ExpTable[PlayerLevel])
  {   
   if (PlayerLevel < LevelCap)
   { 
    PlayerLevel += 1;

    MiscellaneousVars[171] = 105; // Turns on the "Level Up!!" and "Stat Up" indicators for 3 seconds on the HUD upon level up.
    MiscellaneousVars[204] = MiscellaneousVars[25]; // total Aeon Points gained
    MiscellaneousVars[205] = MiscellaneousVars[31]; // total Agility Points gained
    MiscellaneousVars[206] = MiscellaneousVars[32]; // total Defense Points gained
    MiscellaneousVars[207] = MiscellaneousVars[33]; // total Deftness Points gained
    MiscellaneousVars[208] = MiscellaneousVars[34]; // total Sorcery Points gained
    MiscellaneousVars[209] = MiscellaneousVars[35]; // total Strength Points gained
    MiscellaneousVars[210] = MiscellaneousVars[36]; // total Therapeusis Points gained

    //*********************
    //*Aeon Point Increase*
    //*********************
    // MiscellaneousVars[25] = Aeon Points
    if (PlayerLevel != 0)
    {
     G1 = PlayerLevel % 20;
     if (G1 == 0) C1 = 0;
     else if (G1 == 4) C1 = 1;
     else if (G1 == 8) C1 = 1;
     else if (G1 == 12) C1 = 1;
     else if (G1 == 16) C1 = 1;
     else C1 = 2;

     if (C1 == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
     {
      if (PlayerLevel > 100)
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 25) MiscellaneousVars[25] += 8; else MiscellaneousVars[25] += 5;
       if (random(1,100) <= 20) MiscellaneousVars[25] += random(3,5);
      }
      else
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 25) MiscellaneousVars[25] += 5; else MiscellaneousVars[25] += 3;
       if (random(1,100) <= 20) MiscellaneousVars[25] += random(1,3);
      }
     }
     else
     if (C1 == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
     {
      if (PlayerLevel > 100)
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 15) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
       if (random(1,100) <= 10) MiscellaneousVars[25] += random(1,2);
      }
      else
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 15) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
       if (random(1,100) <= 10) MiscellaneousVars[25] += random(0,1);
      }
     }
     else
     if (C1 == 2) // Any other level that's not a multiple of 4 or 20
     {
      if (PlayerLevel > 100)
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,10) <= 6) // 60% chance of +2/3 Aeon Points per level
       {
        if (random(1,100) <= 15) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
       }
      }
      else
      {
       if (random(1,100) <= 65) MiscellaneousVars[25] += 1;
       if (random(1,10) <= 3) // 30% chance of +1/2 Aeon Points per level
       {
        if (random(1,100) <= 15) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
       }
      }
     }
    }
    // Extra AeonPts for "Perk Mode"
    if (GetCVar("dvdsperks_active") == 1)
    {
     MiscellaneousVars[25] += 2;
     if (PlayerLevel >= 15) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 30) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 45) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 60) MiscellaneousVars[25] += 1;
     // 6
     if (PlayerLevel >= 75) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 90) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 105) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 120) MiscellaneousVars[25] += 1;
     // 10
     if (PlayerLevel >= 135) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 150) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 165) MiscellaneousVars[25] += 1;
     if (PlayerLevel >= 180) MiscellaneousVars[25] += 1;
     // 14
     if (PlayerLevel >= 195) MiscellaneousVars[25] += 2;
     // 16
    }

    // Increase Stats
    // 16:25 (1-100) [64] + 20:25 (101-200) [80] = [Max of 144 (or -75%)]
    G1 = PlayerLevel % 20;
    if (G1 == 0) C1 = 0;
    else if (G1 == 4) C1 = 1;
    else if (G1 == 8) C1 = 1;
    else if (G1 == 12) C1 = 1;
    else if (G1 == 16) C1 = 1;
    else C1 = 2;
    if (C1 == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
    {
     RandomizedStatChance = 192 - (10 * random(4,8)); // 112 to 152
     RandomizedStatChance -= (MiscellaneousVars[33] / 5);
    }
    else
    if (C1 == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
    {
     RandomizedStatChance = 192 - (4 * random(4,8)); // 160 to 176
     RandomizedStatChance -= (MiscellaneousVars[33] / 7);
    }
    else
    if (C1 == 2) // Any other level that's not a multiple of 4 or 20
    {
     RandomizedStatChance = 192;
     RandomizedStatChance -= (MiscellaneousVars[33] / 8);
    }
    Z1 = 0;
    Z1 = PlayerLevel * 16 / 25;
    if (Z1 < 0) Z1 = 0; if (Z1 > 64) Z1 = 64;
    G3 = 0;
    if (PlayerLevel > 100)
    {
     G3 = (PlayerLevel - 100) * 20 / 25;
     if (G3 < 0) G3 = 0; if (G3 > 80) G3 = 80;
    }

    G2 = 0;
    G2 += Z1; // Adds [level 1-100] range value
    G2 += G3; // Adds [level 101-200] range value
    RandomizedStatChance -= G2;
    if (CheckActorInventory(1001,"TheOneRing") > 0) RandomizedStatChance = RandomizedStatChance * 3 / 4;
    if (RandomizedStatChance < 1) RandomizedStatChance = 1;

    RandomizedStatChance2 = 24;
    if (PlayerLevel > 25) RandomizedStatChance2 = 23;
    if (PlayerLevel > 50) RandomizedStatChance2 = 22;
    if (PlayerLevel > 75) RandomizedStatChance2 = 21;
    if (PlayerLevel > 100) RandomizedStatChance2 = 20;
    if (PlayerLevel > 125) RandomizedStatChance2 = 18;
    if (PlayerLevel > 150) RandomizedStatChance2 = 16;
    if (PlayerLevel > 175) RandomizedStatChance2 = 14;
    //********************************
    //*Random Levelups to Seed Values*
    //********************************

    if (CharacterClass == 0) // Deggaris (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 24) MiscellaneousVars[31] += Z2; // Agility [12.5%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 5) MiscellaneousVars[31] += Z2; // Extra Agility [2.60%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 42) MiscellaneousVars[32] += Z2; // Defense [21.4%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 8) MiscellaneousVars[32] += Z2; // Extra Defense [4.16%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[33] += Z2; // Deftness [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[33] += Z2; // Extra Deftness [3.12%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[34] += Z2; // Sorcery [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[34] += Z2; // Extra Sorcery [3.12%] 

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 36) MiscellaneousVars[35] += Z2; // Strength [18.36%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 7) MiscellaneousVars[35] += Z2; // Extra Strength [3.64%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[36] += Z2; // Therapeusis [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[36] += Z2; // Extra Therapeusis [3.12%] 
    }
    if (CharacterClass == 1) // Illucia (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[31] += Z2; // Agility [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[31] += Z2; // Extra Agility [3.12%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[32] += Z2; // Defense [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[32] += Z2; // Extra Defense [3.12%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[33] += Z2; // Deftness [15.625%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 6) MiscellaneousVars[33] += Z2; // Extra Deftness [3.12%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 36) MiscellaneousVars[34] += Z2; // Sorcery [18.36%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 7) MiscellaneousVars[34] += Z2; // Extra Sorcery [3.64%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 24) MiscellaneousVars[35] += Z2; // Strength [12.5%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 5) MiscellaneousVars[35] += Z2; // Extra Strength [2.60%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 42) MiscellaneousVars[36] += Z2; // Therapeusis [21.4%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 8) MiscellaneousVars[36] += Z2; // Extra Therapeusis [4.16%]
    }
    if (CharacterClass == 2) // Flora (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 37) MiscellaneousVars[31] += Z2; // Agility [19.27%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 7) MiscellaneousVars[31] += Z2; // Extra Agility [3.64%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 16) MiscellaneousVars[32] += Z2; // Defense [8.33%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 3) MiscellaneousVars[32] += Z2; // Extra Defense [1.56%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 33) MiscellaneousVars[33] += Z2; // Deftness [17.2%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 7) MiscellaneousVars[33] += Z2; // Extra Deftness [3.64%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 45) MiscellaneousVars[34] += Z2; // Sorcery [23.4%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 9) MiscellaneousVars[34] += Z2; // Extra Sorcery [4.68%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 23) MiscellaneousVars[35] += Z2; // Strength [11.9%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 5) MiscellaneousVars[35] += Z2; // Extra Strength [2.6%]

     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 38) MiscellaneousVars[36] += Z2; // Therapeusis [19.79%]
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     Z2 *= MiscellaneousVars[146];
     if (random(1,RandomizedStatChance) <= 8) MiscellaneousVars[36] += Z2; // Extra Therapeusis [4.16%]
    }

    if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
    if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
    if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
    if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
    if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
    if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;

    MiscellaneousVars[204] -= MiscellaneousVars[25]; // total Aeon Points gained
    MiscellaneousVars[205] -= MiscellaneousVars[31]; // total Agility Points gained
    MiscellaneousVars[206] -= MiscellaneousVars[32]; // total Defense Points gained
    MiscellaneousVars[207] -= MiscellaneousVars[33]; // total Deftness Points gained
    MiscellaneousVars[208] -= MiscellaneousVars[34]; // total Sorcery Points gained
    MiscellaneousVars[209] -= MiscellaneousVars[35]; // total Strength Points gained
    MiscellaneousVars[210] -= MiscellaneousVars[36]; // total Therapeusis Points gained
    MiscellaneousVars[204] *= -1; // total Aeon Points gained
    MiscellaneousVars[205] *= -1;
    MiscellaneousVars[206] *= -1;
    MiscellaneousVars[207] *= -1;
    MiscellaneousVars[208] *= -1;
    MiscellaneousVars[209] *= -1;
    MiscellaneousVars[210] *= -1;

    //***************
    //*Mana Increase*
    //***************
    int LevelAddMaxMana = 0;
    if (GameSkill() == SKILL_VERY_EASY)
    {    
     LevelAddMaxMana = Random(5,10);
     Z1 = MaxMana / 96;
    }
    else if (GameSkill() == SKILL_EASY)
    {
     LevelAddMaxMana = Random(4,8);
     Z1 = MaxMana / 120;
    }
    else if (GameSkill() == SKILL_NORMAL)
    {
     LevelAddMaxMana = Random(3,6);
     Z1 = MaxMana / 144;
    }
    else if (GameSkill() == SKILL_HARD)
    {
     LevelAddMaxMana = Random(2,4);
     Z1 = MaxMana / 168;
    }
    else if (GameSkill() == SKILL_VERY_HARD)
    {
     LevelAddMaxMana = Random(1,2);
     Z1 = MaxMana / 192;
    }

    PerkFactor = ((MiscellaneousVars[10003] * 500) + (MiscellaneousVars[10004] * 1250)) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.

    PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"

    PerkFactor = ((MiscellaneousVars[10003] / 2) + (MiscellaneousVars[10004]));
    PerkFactor += (MiscellaneousVars[317] * 3) / 8;
    if (Z1 < PerkFactor) Z1 = PerkFactor;
    LevelAddMaxMana += Z1;

    Z1 = random(6,9); // +7-19 + Level base
    PerkFactor = ((MiscellaneousVars[10003] * 500) + (MiscellaneousVars[10004] * 1250)) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.

    PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"

    LevelAddMaxMana += Z1;

    if (CharacterClass == 0) G3 = random(36,42); // Deggaris [MP Gain / Level] [75%-87.5%]
    if (CharacterClass == 1) G3 = random(54,60); // Illucia [MP Gain / Level] [112.5%-125%]
    if (CharacterClass == 2) G3 = random(66,84); // Flora [MP Gain / Level] [137.5%-175%]

    G3 += ((MiscellaneousVars[36] + MiscellaneousVars[33]) / 48); // Add [(Therapesius+Deftness / 48)]
    LevelAddMaxMana = LevelAddMaxMana * G3 / 48;

    // Overall Modifier
    LevelAddMaxMana = LevelAddMaxMana * 75 / 100;

    if (LevelAddMaxMana < 1) LevelAddMaxMana = 1;

    LevelAddMaxMana *= MiscellaneousVars[146];
    MaxMana += LevelAddMaxMana;
    CurrentMana += LevelAddMaxMana;
    MiscellaneousVars[243] = CurrentMana;
    MiscellaneousVars[238] = CurrentMana;


    //*************
    //*HP Increase*
    //*************
    int LevelAddMaxHP = 0;
    int HPRandomizer1;
    if (GameSkill() == SKILL_VERY_EASY)
    {
     Z2 = random(2,4);
     Z2 += MaxHealthTrue / 288;
    }
    if (GameSkill() == SKILL_EASY)
    {
     Z2 = random(1,3);
     Z2 += MaxHealthTrue / 360;
    }
    if (GameSkill() == SKILL_NORMAL)
    {
     Z2 = random(0,2);
     Z2 += MaxHealthTrue / 432;
    }
    if (GameSkill() == SKILL_HARD)
    {
     Z2 = random(-1,1);
     Z2 += MaxHealthTrue / 504;
    }
    if (GameSkill() == SKILL_VERY_HARD)
    {
     Z2 = random(-2,0);
     Z2 += MaxHealthTrue / 576;
    }

    Z2 += Random(1,3);
    if (CharacterClass == 0) Z2 += random(3,5); // + 6-12+ HP
    if (CharacterClass == 1) Z2 += random(2,3); // + 5-10+ HP
    if (CharacterClass == 2) Z2 += random(1,2); // + 4-9+ HP

    PerkFactor = ((MiscellaneousVars[10001] * 500) + (MiscellaneousVars[10002] * 1250)) + 10000;
    Z2 = Z2 * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.

    PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
    Z2 = Z2 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded

    PerkFactor = ((MiscellaneousVars[10003] / 2) + (MiscellaneousVars[10004]));
    PerkFactor += (MiscellaneousVars[317] * 3) / 8;
    if (Z2 < PerkFactor) Z2 = PerkFactor;
    LevelAddMaxHP += Z2;

    if (GameSkill() == SKILL_VERY_EASY) 		Z1 = PlayerLevel * 35 / 100;	// 35%
    else if (GameSkill() == SKILL_EASY) 		Z1 = PlayerLevel * 30 / 100;	// 30%
    else if (GameSkill() == SKILL_NORMAL) 		Z1 = PlayerLevel * 25 / 100;	// 25%
    else if (GameSkill() == SKILL_HARD) 		Z1 = PlayerLevel * 20 / 100;	// 20%
    else if (GameSkill() == SKILL_VERY_HARD) 	Z1 = PlayerLevel * 15 / 100;	// 15%
 
    if (PlayerLevel > 24 && PlayerLevel < 50) 		Z1 = Z1 * 105 / 100; 		// *105%
    if (PlayerLevel > 49 && PlayerLevel < 75) 		Z1 = Z1 * 110 / 100; 		// *110%
    if (PlayerLevel > 74 && PlayerLevel < 100) 		Z1 = Z1 * 115 / 100; 		// *115%
    if (PlayerLevel > 99 && PlayerLevel < 125) 		Z1 = Z1 * 121 / 100; 		// *121%
    if (PlayerLevel > 124 && PlayerLevel < 150) 	Z1 = Z1 * 127 / 100; 		// *127%
    if (PlayerLevel > 149 && PlayerLevel < 175) 	Z1 = Z1 * 133 / 100; 		// *133%
    if (PlayerLevel > 174) 							Z1 = Z1 * 140 / 100; 		// *140%

    PerkFactor = ((MiscellaneousVars[10001] * 500) + (MiscellaneousVars[10002] * 1250)) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.

    PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
    Z1 = Z1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded

    LevelAddMaxHP += Z1;

    if (CharacterClass == 0) G3 = random(54,60); // Deggaris [HP Gain / Level] [112.5%-125%]
    if (CharacterClass == 1) G3 = random(36,42); // Illucia [HP Gain / Level] [75%-87.5%]
    if (CharacterClass == 2) G3 = random(27,33); // Flora [HP Gain / Level] [43.75%-68.75%]

    G3 += ((MiscellaneousVars[32] + MiscellaneousVars[33]) / 48); // Add [(Defense+Deftness / 48)]
    LevelAddMaxHP = LevelAddMaxHP * G3 / 48;

    // Overall Modifier
    LevelAddMaxHP = LevelAddMaxHP * 75 / 100; // *75%+

    // Give The HP to the player
    if (LevelAddMaxHP < 1) LevelAddMaxHP = 1;

    LevelAddMaxHP *= MiscellaneousVars[146];
    I2 = GetActorProperty(1001,APROP_HEALTH);
    //GiveInventory("UpgradeStamina", LevelAddMaxHP);
    SetActorProperty(1001,APROP_HEALTH,(I2+LevelAddMaxHP));
    MaxHealthTrue += LevelAddMaxHP;
    SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
    MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
    MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);

/*
    PrintBold(
              s:"Health: ",d:LevelAddMaxHP,s:"\n",
              s:"Mana: ",d:LevelAddMaxMana,s:"\n",
              s:"AeonPts: ",d:MiscellaneousVars[204],s:"\n",
              s:"Agility: ",d:MiscellaneousVars[205],s:"\n",
              s:"Defense: ",d:MiscellaneousVars[206],s:"\n",
              s:"Deftness: ",d:MiscellaneousVars[207],s:"\n",
              s:"Sorcery: ",d:MiscellaneousVars[208],s:"\n",
              s:"Strength: ",d:MiscellaneousVars[209],s:"\n",
              s:"Therapeusis: ",d:MiscellaneousVars[210]
             );
*/

    // Other Stuff
    if (leveluptimes == 0)
    {
     if (CharacterClass == 2) ActivatorSound("FloraLeveledUp",127); // Flora
     else if (CharacterClass == 1) ActivatorSound("IlluciaLeveledUp",127); // Illucia
     else if (CharacterClass == 0) ActivatorSound("DeggarisLeveledUp",127); // Deggaris
     else ActivatorSound("misc/spawn",127); 
    }

    // [222] # of TOTAL Max HP gained during multiple stat ups [for displays]
    // [223] # of TOTAL Max MP gained during multiple stat ups [for displays]
    // [224] # of TOTAL Aeon Points gained during multiple stat ups [for displays]
    // [225] # of TOTAL Agility Points gained during multiple stat ups [for displays]
    // [226] # of TOTAL Defense Points gained during multiple stat ups [for displays]
    // [227] # of TOTAL Deftness Points gained during multiple stat ups [for displays]
    // [228] # of TOTAL Sorcery Points gained during multiple stat ups [for displays]
    // [229] # of TOTAL Strength Points gained during multiple stat ups [for displays]
    // [230] # of TOTAL Therapeusis Points gained during multiple stat ups [for displays]
    MiscellaneousVars[222] += LevelAddMaxHP;
    MiscellaneousVars[223] += LevelAddMaxMana;
    MiscellaneousVars[224] += MiscellaneousVars[204];
    MiscellaneousVars[225] += MiscellaneousVars[205];
    MiscellaneousVars[226] += MiscellaneousVars[206];
    MiscellaneousVars[227] += MiscellaneousVars[207];
    MiscellaneousVars[228] += MiscellaneousVars[208];
    MiscellaneousVars[229] += MiscellaneousVars[209];
    MiscellaneousVars[230] += MiscellaneousVars[210];
    if (MiscellaneousVars[222] > 0) MiscellaneousVars[2031] = 105;
    if (MiscellaneousVars[223] > 0) MiscellaneousVars[2032] = 105;
    if (MiscellaneousVars[224] > 0) MiscellaneousVars[2033] = 105;
    if (MiscellaneousVars[225] > 0) MiscellaneousVars[2034] = 105;
    if (MiscellaneousVars[226] > 0) MiscellaneousVars[2035] = 105;
    if (MiscellaneousVars[227] > 0) MiscellaneousVars[2036] = 105;
    if (MiscellaneousVars[228] > 0) MiscellaneousVars[2037] = 105;
    if (MiscellaneousVars[229] > 0) MiscellaneousVars[2038] = 105;
    if (MiscellaneousVars[230] > 0) MiscellaneousVars[2039] = 105;

    SetHudSize(640,480,0);  
    // TODO: Redo the display for levelups to be more dynamic looking [and be one HudMessage instead of using 8 different if forks] >.>

    str LearnedSpells = "";
        if (PlayerLevel <= 32) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";
        if (CharacterClass == 2 && PlayerLevel == 56) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";

    str AeonPtUse = "";
        if (PlayerLevel >= MiscellaneousVars[197]) AeonPtUse = "\c[White]Remember to allocate any Aeon Points you've attained!\cf\n\n";

    str SpinAttack = "";
        if (CharacterClass == 2 && PlayerLevel == 8) SpinAttack = "\caThe Sceptre Will Now Have an Alternate\n\caAttack if Sceptre Level is above 2!\cf";

    if (MiscellaneousVars[2000] == 0)
    {
     HudMessage(
               s:"\cdCongradulations, you've reached Level ",d:PlayerLevel,s:"\n\n",
               s:"\cf",

               s:"\caHP \cf+",d:LevelAddMaxHP,s:"\n",
               s:"\c[Purple]Mana \cf+",d:LevelAddMaxMana,s:"\n",
               s:"\c[White]AeonPts: \cf+",d:MiscellaneousVars[204],s:"\n",
               s:"\c[LightBlue]Agility: \cf+",d:MiscellaneousVars[205],s:"\n",
               s:"\c[Olive]Defense: \cf+",d:MiscellaneousVars[206],s:"\n",
               s:"\c[Green]Deftness: \cf+",d:MiscellaneousVars[207],s:"\n",
               s:"\c[Purple]Sorcery: \cf+",d:MiscellaneousVars[208],s:"\n",
               s:"\c[Red]Strength: \cf+",d:MiscellaneousVars[209],s:"\n",
               s:"\c[Gray]Therapeusis: \cf+",d:MiscellaneousVars[210],s:"\n\n",

               s:LearnedSpells,
               s:AeonPtUse,
               s:SpinAttack;

               HUDMSG_LOG,3432,cr_orange,320.4,240.0,2.25);
    }
    FadeRange(0,0,255,0.3,0,0,255,0.0,0.036);
    SetHudSize(0,0,0);  

   }
  }
  else break;
 }

/* 
 PrintBold(s:"PlayerLevel: ",d:PlayerLevel,
           s:"\nCurrentMana: ",d:CurrentMana,
           s:"\nMaxMana: ",d:MaxMana,
           s:"\nExperience: ",d:Experience,
           s:"\nExpToNext: ",d:ExpTable[PlayerLevel],
           s:"\nBaseEXPRequirement: ",d:BaseEXPRequirement,
           s:"\nMiscellaneousVars[157]: ",d:MiscellaneousVars[157],
           s:"\nMiscellaneousVars[185]: ",d:MiscellaneousVars[185],
           s:"\nMiscellaneousVars[183]: ",d:MiscellaneousVars[183],
           s:"\nMiscellaneousVars[186]: ",d:MiscellaneousVars[186],
           s:"\nMiscellaneousVars[188]: ",d:MiscellaneousVars[188]);
*/

 Delay(1);
 Restart;
}


// Spell Selection
script "SpellSelection" (int Dir)
{
/*
 //**********************************
 //*** New Spell Selection System ***
 //**********************************
  // MiscellaneousVars[9] is for the category of spells you're using [for revised Spell Selecting]
  // MiscellaneousVars[10] is for the subspell within the current category of spells you're using [for revised Spell Selecting]
  // MiscellaneousVars[70] is storage for the Spell# under the "Offense" spell category [value storage]
  // MiscellaneousVars[71] is storage for the Spell# under the "Restorative" spell category [value storage]
  // MiscellaneousVars[72] is storage for the Spell# under the "Status" spell category [value storage]
  // MiscellaneousVars[73] is storage for the Spell# under the "Conjure" spell category [value storage]

  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   // Toggles the Current Spell Category
   if (Dir > 1 && Dir < 4)
   {
    if (Dir == 2) // Previous Spell Category
    {
     MiscellaneousVars[9] -= 1;
     if (MiscellaneousVars[9] < 0) MiscellaneousVars[9] = 3;
    }
    if (Dir == 3) // Next Spell Category
    {
     MiscellaneousVars[9] += 1;
     if (MiscellaneousVars[9] > 3) MiscellaneousVars[9] = 0;
    }
    if (MiscellaneousVars[9] == 0) MiscellaneousVars[10] = MiscellaneousVars[70]; // "Offense" [23]
    if (MiscellaneousVars[9] == 1) MiscellaneousVars[10] = MiscellaneousVars[71]; // "Restorative" [5]
    if (MiscellaneousVars[9] == 2) MiscellaneousVars[10] = MiscellaneousVars[72]; // "Status" [20]
    if (MiscellaneousVars[9] == 3) MiscellaneousVars[10] = MiscellaneousVars[73]; // "Conjure" [7]
   }
 
   // Allows Cycling Spells within a specfic Category
   if (Dir > -1 && Dir < 2)
   {
    if (Dir == 0) // Previous Spell
    {
     MiscellaneousVars[10] -= 1;
     if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 22;
     if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 4;
     if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 19;
     if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 6;
    }
    if (Dir == 1) // Next Spell
    {
     MiscellaneousVars[10] += 1;
     if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] > 22) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] > 4) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] > 19) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] > 6) MiscellaneousVars[10] = 0;
    }
    if (MiscellaneousVars[9] == 0) MiscellaneousVars[70] = MiscellaneousVars[10]; // "Offense" [23]
    if (MiscellaneousVars[9] == 1) MiscellaneousVars[71] = MiscellaneousVars[10]; // "Restorative" [5]
    if (MiscellaneousVars[9] == 2) MiscellaneousVars[72] = MiscellaneousVars[10]; // "Status" [20]
    if (MiscellaneousVars[9] == 3) MiscellaneousVars[73] = MiscellaneousVars[10]; // "Conjure" [7]
   }

   // Aftermath: Determine which Spell ID to select based on above options.

   // Offense
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 0) SelectedSpell = 0; // Minor Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 1) SelectedSpell = 3; // Chill Touch
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 2) SelectedSpell = 6; // Minor Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 3) SelectedSpell = 7; // Minor Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 4) SelectedSpell = 9; // Minor Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 5) SelectedSpell = 11; // Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 6) SelectedSpell = 12; // Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 7) SelectedSpell = 13; // Explosive Glyph
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 8) SelectedSpell = 15; // Fireball Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 9) SelectedSpell = 19; // Acid Rain
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 10) SelectedSpell = 20; // Freezing Glyph
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 11) SelectedSpell = 23; // Major Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 12) SelectedSpell = 25; // Icy Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 13) SelectedSpell = 26; // Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 14) SelectedSpell = 27; // Minor Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 15) SelectedSpell = 31; // Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 16) SelectedSpell = 33; // Lightning Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 17) SelectedSpell = 38; // Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 18) SelectedSpell = 41; // Major Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 19) SelectedSpell = 42; // Major Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 20) SelectedSpell = 43; // Major Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 21) SelectedSpell = 44; // Major Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 22) SelectedSpell = 49; // Ultra Magic Missile
   // Restorative
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 0) SelectedSpell = 1; // Minor Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 1) SelectedSpell = 14; // Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 2) SelectedSpell = 28; // Stone Skin
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 3) SelectedSpell = 29; // Major Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 4) SelectedSpell = 40; // Diamond Skin
   // Status
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 0) SelectedSpell = 2; // Minor Night-Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 1) SelectedSpell = 4; // Minor Invisibility
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 2) SelectedSpell = 5; // Minor Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 3) SelectedSpell = 8; // Enhanced Strength
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 4) SelectedSpell = 16; // Minor Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 5) SelectedSpell = 17; // Minor Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 6) SelectedSpell = 18; // Invisibility
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 7) SelectedSpell = 21; // Night Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 8) SelectedSpell = 22; // Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 9) SelectedSpell = 30; // Major Night Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 10) SelectedSpell = 32; // Farsight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 11) SelectedSpell = 34; // Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 12) SelectedSpell = 35; // Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 13) SelectedSpell = 36; // Major Invisiblity
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 14) SelectedSpell = 37; // Major Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 15) SelectedSpell = 45; // Major Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 16) SelectedSpell = 46; // Major Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 17) SelectedSpell = 50; // Time Freezer
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 18) SelectedSpell = 51; // Terrorization Aura
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 19) SelectedSpell = 53; // Divine Avatar
   // Conjure
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 0) SelectedSpell = 10; // Summon Weak Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 1) SelectedSpell = 24; // Summon Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 2) SelectedSpell = 39; // Summon Strong Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 3) SelectedSpell = 47; // Raging Spirits
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 4) SelectedSpell = 48; // Summon Arch-Vile
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 5) SelectedSpell = 52; // Create Lotso Ammo
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 6) SelectedSpell = 54; // Summon Cyberdemon

   // PrintBold(s:"Category#: ",d:MiscellaneousVars[9],s:"\nSpell#: ",d:MiscellaneousVars[10],s:"\nCat1Spell#: ",d:MiscellaneousVars[70],s:"\nCat2Spell#: ",d:MiscellaneousVars[71],s:"\nCat3Spell#: ",d:MiscellaneousVars[72],s:"\nCat4Spell#: ",d:MiscellaneousVars[73]);
  }
*/

 //**********************************
 //*** Old Spell Selection System ***
 //**********************************
 if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
 {
  if (Dir == 1) // Next Spell
  {
   SelectedSpell += 1;

   //PrintBold(d:SpellsLearned[PlayerLevel]);

   if (PlayerLevel < 57)
   {
    if (SelectedSpell < 0)
     SelectedSpell = SpellsLearned[PlayerLevel];
   }
   if (SelectedSpell < 0)
    SelectedSpell = SpellIDLimit;

   // 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54, 55 = Deggaris Cannot use these Spell IDs in final version
   if (CharacterClass == 0) // Deggaris
   {
    if (SelectedSpell == 15) SelectedSpell += 1; // Skip "Fireball Nova"
    if (SelectedSpell == 20) SelectedSpell += 1; // Skip "Freezing Glyph"
    if (SelectedSpell == 23) SelectedSpell += 1;
    if (SelectedSpell == 29) SelectedSpell += 1;
    if (SelectedSpell == 30) SelectedSpell += 1;
    if (SelectedSpell == 33) SelectedSpell += 1;
    if (SelectedSpell == 34) SelectedSpell += 1;
    if (SelectedSpell == 36) SelectedSpell += 1;
    if (SelectedSpell == 37) SelectedSpell += 1;
    if (SelectedSpell == 41) SelectedSpell += 1; // Skip "Major Fireball"
    if (SelectedSpell == 42) SelectedSpell += 1; // Skip "Major Ice Blast"
    if (SelectedSpell == 44) SelectedSpell += 1; // Skip "Major Lightning"
    if (SelectedSpell == 45) SelectedSpell += 1; // Skip "Major Invulnerability"
    if (SelectedSpell == 46) SelectedSpell += 1; // Skip "Major Stealth"
    if (SelectedSpell == 48) SelectedSpell += 1; // Skip "Summon Arch-Vile"
    if (SelectedSpell == 49) SelectedSpell += 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 50) SelectedSpell += 1; // Skip "Time Freezer"
    if (SelectedSpell == 54) SelectedSpell += 1; // Skip "Summon Cyberdemon"
    if (SelectedSpell == 55) SelectedSpell += 1; // Skip "Spreader Aura Lv. 1"
   }

   // 6, 25, 26, 43, 49, 51, 55 = Illucia Cannot use these Spell IDs in final version
   if (CharacterClass == 1) // Illucia
   {
    if (SelectedSpell == 6) SelectedSpell += 1; // Skip "Minor Poison Cloud"
    if (SelectedSpell == 26) SelectedSpell += 1; // Skip "Poison Cloud"
    if (SelectedSpell == 43) SelectedSpell += 1; // Skip "Major Poison Cloud"
    if (SelectedSpell == 49) SelectedSpell += 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 51) SelectedSpell += 1; // Skip "Terrorization Aura"
    if (SelectedSpell == 55) SelectedSpell += 1; // Skip "Spreader Aura Lv. 1"
   }

   // 28, 52 = Flora Cannot use these Spell IDs in final version
   if (CharacterClass == 2) // Flora
   {
    if (SelectedSpell == 28) SelectedSpell += 1; // Skip "Stone Skin"
    if (SelectedSpell == 52) SelectedSpell += 1; // Skip "Create Lotso Ammo"
   }

   if (PlayerLevel < 57)
   {
    if (SelectedSpell > SpellsLearned[PlayerLevel])
     SelectedSpell = 0;
   }
   if (SelectedSpell > SpellIDLimit)
    SelectedSpell = 0;
  }

  if (Dir == 0) // Previous Spell
  {
   SelectedSpell -= 1;

   //PrintBold(d:SpellsLearned[PlayerLevel]);
   if (PlayerLevel < 57)
   {
    if (SelectedSpell < 0)
     SelectedSpell = SpellsLearned[PlayerLevel];
   }
   if (SelectedSpell < 0)
    SelectedSpell = SpellIDLimit;

   // 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54, 55 = Deggaris Cannot use these Spell IDs in final version
   if (CharacterClass == 0) // Deggaris
   {
    if (SelectedSpell == 55) SelectedSpell -= 1; // Skip "Spreader Aura"
    if (SelectedSpell == 54) SelectedSpell -= 1; // Skip "Summon Cyberdemon"
    if (SelectedSpell == 50) SelectedSpell -= 1; // Skip "Time Freezer"
    if (SelectedSpell == 49) SelectedSpell -= 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 48) SelectedSpell -= 1; // Skip "Summon Arch-Vile"
    if (SelectedSpell == 46) SelectedSpell -= 1; // Skip "Major Stealth"
    if (SelectedSpell == 45) SelectedSpell -= 1; // Skip "Major Invulnerability"
    if (SelectedSpell == 44) SelectedSpell -= 1; // Skip "Major Lightning"
    if (SelectedSpell == 42) SelectedSpell -= 1; // Skip "Major Ice Blast"
    if (SelectedSpell == 41) SelectedSpell -= 1; // Skip "Major Fireball"
    if (SelectedSpell == 37) SelectedSpell -= 1;
    if (SelectedSpell == 36) SelectedSpell -= 1;
    if (SelectedSpell == 34) SelectedSpell -= 1;
    if (SelectedSpell == 33) SelectedSpell -= 1;
    if (SelectedSpell == 30) SelectedSpell -= 1;
    if (SelectedSpell == 29) SelectedSpell -= 1;
    if (SelectedSpell == 23) SelectedSpell -= 1;
    if (SelectedSpell == 20) SelectedSpell -= 1; // Skip "Freezing Glyph"
    if (SelectedSpell == 15) SelectedSpell -= 1; // Skip "Fireball Nova"
   }

   // 6, 25, 26, 43, 49, 51, 55 = Illucia Cannot use these Spell IDs in final version
   if (CharacterClass == 1) // Illucia
   {
    if (SelectedSpell == 55) SelectedSpell -= 1; // Skip "Spreader Aura"
    if (SelectedSpell == 51) SelectedSpell -= 1; // Skip "Terrorization Aura"
    if (SelectedSpell == 49) SelectedSpell -= 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 43) SelectedSpell -= 1; // Skip "Major Poison Cloud"
    if (SelectedSpell == 26) SelectedSpell -= 1; // Skip "Poison Cloud"
    if (SelectedSpell == 6) SelectedSpell -= 1; // Skip "Minor Poison Cloud"
   }

   // 28, 52 = Flora Cannot use these Spell IDs in final version
   if (CharacterClass == 2) // Flora
   {
    if (SelectedSpell == 52) SelectedSpell -= 1; // Skip "Create Lotso Ammo"
    if (SelectedSpell == 28) SelectedSpell -= 1; // Skip "Stone Skin"
   }

   //PrintBold(d:SpellsLearned[PlayerLevel]);
   if (PlayerLevel < 57)
   {
    if (SelectedSpell < 0)
     SelectedSpell = SpellsLearned[PlayerLevel];
   }
   if (SelectedSpell < 0)
    SelectedSpell = SpellIDLimit;

  }
 }


}

// Spell Readying (For Five Slot system)
script "SpellQuickAssign" (int Slot, int Type)
{
 if (MiscellaneousVars[2500] != 0) terminate; // cannot change spells in the menu
 if (PowerupTimer[20] > 0) terminate; // cannot change spells while put to sleep :V

 int C1, C2, C3, I1, I2, I3, G1, G2, G3, G4, Z1, Z2;
 int MaxHealthLimit = MaxHealthTrue * 2;
 
 int buttons = GetPlayerInput(0, INPUT_BUTTONS);

 if (buttons & BT_SPEED) Type = 0; // Assign Current Spell to Slot Reflecting the pressed key
 else if (buttons & BT_RELOAD) Type = 1; // Clear Slot Reflecting the pressed key
 else Type = 2; // Fire Spell if no specfic buttons are held down

 if (Type == 0) // assign spell
 {
  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   for (C1 = 0; C1 < 10; C1++)
   {
    if (ReadiedSpells[C1] == 0) // Initialize unused slots
    {
     ReadiedSpells[C1] = 0;
    }
   }
   ReadiedSpells[Slot] = SelectedSpell + 1;
  }
 }
 if (Type == 1) // clear spell
 {
  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   ReadiedSpells[Slot] = 0;
  }
 }
 if (Type == 2) // cast spell
 {
  if (ReadiedSpells[Slot] != 0)
  {
   // Function Ran
   G1 = SpellCostCheck(ReadiedSpells[Slot] - 1); // Function testing to come later :P
   // Function Ran

   if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
   {
    if (CurrentMana >= G1)
    {
     //PrintBold(d:ReadiedSpells[Slot]);
     if (ReadiedSpells[Slot] == 2) // Minor Healing [Deggaris/Illucia Only]
     {
      if (GetActorProperty(1001,APROP_HEALTH) < MaxHealthTrue)
      {
       CurrentMana -= G1;
       MiscellaneousVars[243] = CurrentMana;
       MiscellaneousVars[238] = CurrentMana;
       ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 15) // Healing [Deggaris/Illucia Only]
     {
      if (GetActorProperty(1001,APROP_HEALTH) < MaxHealthTrue)
      {
       CurrentMana -= G1;
       MiscellaneousVars[243] = CurrentMana;
       MiscellaneousVars[238] = CurrentMana;
       ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 29) // Stone Skin [Deggaris/Illucia Only]
     {
      if (PowerupTimer[7] > 0)
      {
       if (CheckInventory("Armor") < 1332)
       {
        CurrentMana -= G1;
        MiscellaneousVars[243] = CurrentMana;
        MiscellaneousVars[238] = CurrentMana;
        ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
      else
      {
       if (CheckInventory("Armor") < 333)
       {
        CurrentMana -= G1;
        MiscellaneousVars[243] = CurrentMana;
        MiscellaneousVars[238] = CurrentMana;
        ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
     }
     else if (ReadiedSpells[Slot] == 30) // Major Healing [Deggaris/Illucia Only]
     {
      if (GetActorProperty(1001,APROP_HEALTH) < MaxHealthLimit)
      {
       CurrentMana -= G1;
       MiscellaneousVars[243] = CurrentMana;
       MiscellaneousVars[238] = CurrentMana;
       ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 41) // Diamond Skin [Deggaris/Illucia Only] or Spreader Aura Lv. 1 [Flora Only]
     {
      //PrintBold(d:CharacterClass);
      if (CharacterClass == 2) // Flora has "Spreader Aura Lv. 1" in this slot instead of "Diamond Skin"
      {
       if (CheckActorInventory(1001,"SpreaderAura2") > 0) // If Lv. 2 is intact, give it a random (6-8) seconds. :P
       {
        CurrentMana -= G1;
        MiscellaneousVars[243] = CurrentMana;
        MiscellaneousVars[238] = CurrentMana;
        ACS_NamedExecuteAlways("MagicEffects",0,18,random(6,8),0);
       }
       else // If only Lv. 1 is intact, give it the full 30 seconds. :P
       {
        CurrentMana -= G1;
        MiscellaneousVars[243] = CurrentMana;
        MiscellaneousVars[238] = CurrentMana;
        ACS_NamedExecuteAlways("MagicEffects",0,17,30,0);
       }
      }
      else // Deggaris & Illucia use "Diamond Skin" in this slot.
      {
       if (PowerupTimer[7] > 0)
       {
        if (CheckInventory("Armor") < 3552)
        {
         CurrentMana -= G1;
         MiscellaneousVars[243] = CurrentMana;
         MiscellaneousVars[238] = CurrentMana;
         ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
        }
       }
       else
       {
        if (CheckInventory("Armor") < 888)
        {
         CurrentMana -= G1;
         MiscellaneousVars[243] = CurrentMana;
         MiscellaneousVars[238] = CurrentMana;
         ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
        }
       }
      }
     }
     else // All Other Spells [Deggaris/Illucia Only]
     {
      CurrentMana -= G1;
      MiscellaneousVars[243] = CurrentMana;
      MiscellaneousVars[238] = CurrentMana;
      ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
     }
    }
   }

  }
 }
}

// {-7-} Spell Casting

script "SpellCasting" (void)
{
 if (MiscellaneousVars[2500] != 0) terminate;
 if (PowerupTimer[20] > 0) terminate; // cannot cast spells while put to sleep :V
 if (PowerupTimer[21] > 0) terminate; // cannot cast spells while silenced/muted :V

 int C1, C2, I1, I2, G1, G2, G3, G4, Z1, Z2;
 int MaxHealthLimit = MaxHealthTrue * 2;

 // Function Ran
 G1 = SpellCostCheck(SelectedSpell); // Function testing to come later :P
 // Function Ran

 if (GetActorProperty(1001,APROP_HEALTH) > 0)
 {
  if (CurrentMana >= G1)
  {
   //PrintBold(d:SelectedSpell);
   if (SelectedSpell == 1) // Minor Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthTrue)
    {
     CurrentMana -= G1;
     MiscellaneousVars[243] = CurrentMana;
     MiscellaneousVars[238] = CurrentMana;
     ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 14) // Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthTrue)
    {
     CurrentMana -= G1;
     MiscellaneousVars[243] = CurrentMana;
     MiscellaneousVars[238] = CurrentMana;
     ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 28)
   {
    if (PowerupTimer[7] > 0)
    {
     if (CheckInventory("Armor") < 1332)
     {
      CurrentMana -= G1;
      MiscellaneousVars[243] = CurrentMana;
      MiscellaneousVars[238] = CurrentMana;
      ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
     }
    }
    else
    {
     if (CheckInventory("Armor") < 333)
     {
      CurrentMana -= G1;
      MiscellaneousVars[243] = CurrentMana;
      MiscellaneousVars[238] = CurrentMana;
      ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
     }
    }
   }
   else if (SelectedSpell == 29) // Major Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthLimit)
    {
     CurrentMana -= G1;
     MiscellaneousVars[243] = CurrentMana;
     MiscellaneousVars[238] = CurrentMana;
     ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 40) // Diamond Skin [Deggaris and Illucia Only]
   {
    if (CharacterClass == 2) // Flora has "Spreader Aura Lv. 1" in this slot instead of "Diamond Skin"
    {
     if (CheckActorInventory(1001,"SpreaderAura2") > 0) // If Lv. 2 is intact, give it a random (6-8) seconds. :P
     {
      CurrentMana -= G1;
      MiscellaneousVars[243] = CurrentMana;
      MiscellaneousVars[238] = CurrentMana;
      ACS_NamedExecuteAlways("MagicEffects",0,18,random(6,8),0);
     }
     else // If only Lv. 1 is intact, give it the full 30 seconds. :P
     {
      CurrentMana -= G1;
      MiscellaneousVars[243] = CurrentMana;
      MiscellaneousVars[238] = CurrentMana;
      ACS_NamedExecuteAlways("MagicEffects",0,17,30,0);
     }
    }
    else // Deggaris & Illucia use "Diamond Skin" in this slot.
    {
     if (PowerupTimer[7] > 0)
     {
      if (CheckInventory("Armor") < 3552)
      {
       CurrentMana -= G1;
       MiscellaneousVars[243] = CurrentMana;
       MiscellaneousVars[238] = CurrentMana;
       ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
      }
     }
     else
     {
      if (CheckInventory("Armor") < 888)
      {
       CurrentMana -= G1;
       MiscellaneousVars[243] = CurrentMana;
       MiscellaneousVars[238] = CurrentMana;
       ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
      }
     }
    }
   }
   else // All other spells [Deggaris and Illucia only]
   {
    CurrentMana -= G1;
    MiscellaneousVars[243] = CurrentMana;
    MiscellaneousVars[238] = CurrentMana;
    ACS_NamedExecuteAlways("MagicEffects",0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
   }
  }
 }
}

// {-8-} Spell Effects

// TODO: FIX WHATEVER FREAKIN BUG IS MESSING WITH THIS SCRIPT # >______<
/*
Script 8 (void)
{
 int PX, PY, PZ, PA, PBA, PVA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 

 Print(d:PVA); 
}
*/

script "MagicEffects" (int Type, int Strength)
{
 int PX, PY, PZ, PA, PBA, PVA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 
 int speed, vspeed, angle, fireheight;
 int NovaRotations;
 int spreadangle, spreadpitch, baseangle, basepitch;
 int MaxHealthLimit = MaxHealthTrue * 2;

 PX = GetActorX(1001);
 PY = GetActorY(1001);
 PZ = GetActorZ(1001);
 PVA = -sin(GetActorPitch(1001)) * 64 >> 16;
 PBA = FixedMul(GetActorAngle(1001),255.0);
 fireheight = GetActorViewHeight(1001) * 780 / 1000;
 fireheight = FixedMul(fireheight,1.0);
 // PrintBold(s:"FireHeight: ",d:fireheight); 
 PA = FixedMul(GetActorAngle(1001),360.0);
 PVA = PVA * 3;

 angle = GetActorAngle(1001) >> 8;
 speed = cos(GetActorPitch(1001)) * 64 >> 16;
 vspeed = -sin(GetActorPitch(1001)) * 64 >> 16;
 // SpawnProjectile(1003,"MinorMagicMissile",angle,speed,vspeed,0,0);

 // PrintBold(s:"Angle: ",d:angle,s:" Speed: ",d:speed,s:" VSpeed: ",d:vspeed); 
 // Print(d:PVA); 
/*
    PrintBold(s:"PX: ",d:PX,
              s:"\nPY: ",d:PY,
              s:"\nPZ: ",d:PZ,
              s:"\nFireHeight: ",d:fireHeight,
              s:"\nPA: ",d:PA,
              s:"\nPBA: ",d:PBA,
              s:"\nPVA: ",d:PVA,
              s:"\nAngle: ",d:angle,
              s:"\nSpeed: ",d:speed,
              s:"\nVSpeed: ",d:vspeed); 
*/
 int buttons = GetPlayerInput(0, INPUT_BUTTONS);

 if ((PBA >= 0.0) && (PBA <= 64.0))
 {
  FWX = 1.0 - FixedMul(0.015625,PBA);
  FWY = 0.0 + FixedMul(0.015625,PBA);
 }
 if ((PBA > 64.0) && (PBA <= 128.0))
 {
  FWX = 0.0 - FixedMul(0.015625,PBA - 64.0);
  FWY = 1.0 - FixedMul(0.015625,PBA - 64.0);
 }
 if ((PBA > 128.0) && (PBA <= 192.0))
 {
  FWX = -1.0 + FixedMul(0.015625,PBA - 128.0);
  FWY = 0.0 - FixedMul(0.015625,PBA - 128.0);
 }
 if ((PBA > 192.0) && (PBA <= 255.0))
 {
  FWX = 0.0 + FixedMul(0.015625,PBA - 192.0);
  FWY = -1.0 + FixedMul(0.015625,PBA - 192.0);
 }
 
 FWX = FixedMul(FWX,32.0);
 FWY = FixedMul(FWY,32.0);

 int project_X = GetActorX(0);
 int project_Y = GetActorY(0);
 int project_Z = GetActorZ(0);
 int project_Pitch = GetActorPitch(0);
 int project_PitchSpread;
 int project_Angle = GetActorAngle(0);
 int project_AngleSpread;
 int project_XSpeed = FixedMul(cos(project_Angle), FixedMul(cos(project_Pitch), 16.0));
 int project_YSpeed = FixedMul(sin(project_Angle), FixedMul(cos(project_Pitch), 16.0));
 int project_ZSpeed = -FixedMul(sin(project_Pitch), 16.0);
 int project_XSpeedSpread;
 int project_YSpeedSpread;
 int project_ZSpeedSpread;
 int project_FireHeight = GetActorViewHeight(0) * 780 / 1000;
 int project_Offset = 8.0;
 str spellname;
 str spellname2;
 str spellname3;
 str spellname4;

/*
    PrintBold(s:"X: ",d:project_X,
              s:"\nY: ",d:project_Y,
              s:"\nZ: ",d:project_Z,
              s:"\nPitch: ",d:project_Pitch,
              s:"\nAngle: ",d:project_Angle,
              s:"\nFireHeight: ",d:project_FireHeight,
              s:"\nXSpeed: ",d:project_XSpeed,
              s:"\nYSpeed: ",d:project_YSpeed,
              s:"\nZSpeed: ",d:project_ZSpeed,
              s:"\nOffset: ",d:project_Offset); 
*/

 if (Type == 0) // Straight Ahead Fireball Shooter
 {
  Switch(Strength)
  {
   Case 0:  // Minor Magic Missile
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    if (buttons & BT_ZOOM) { spellname = "MinorMagicMissileSeek"; } else { spellname = "MinorMagicMissile"; }
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 1:  // Chill Touch
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "ChillTouch";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 2:  // Minor Fireball
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "MinorFireBall";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 3:  // Minor Ice Blast
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "MinorHexenIceShard";
    // Low Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Middle Row [3]
    baseangle = 182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    // High Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 4:  // Magic Missile
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    if (buttons & BT_ZOOM) { spellname = "MagicMissileSeek"; } else { spellname = "MagicMissile"; }
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 5:  // Fireball
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "NormalFireBall";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 6:  // Exploding Glyph
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    SpawnProjectile(0, "ExplodingGlyphBase", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 7:  // Acid Rain
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "AcidRain";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 8:  // Freezing Glyph
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    SpawnProjectile(0, "FreezingGlyphBase", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 9:  // Major Magic Missile
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    if (buttons & BT_ZOOM) { spellname = "MajorMagicMissileSeek"; } else { spellname = "MajorMagicMissile"; }
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 10:  // Minor Lightning
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 11:  // Ice Blast
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    // Lowest Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = 364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    // Lower Row [3]
    baseangle = 182; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    // Middle Row [5]
    baseangle = 364; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -364; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Higher Row [3]
    baseangle = 182; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    // Highest Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = -364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 12:  // Lightning
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 728; // 364		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -728; // -364 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 13:  // Major Fireball
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "MajorFireBall";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 14:  // Major Ice Blast
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    // Lowest Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = -546;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Lower Row [3]
    baseangle = 182; 		// 0 degree angle
    basepitch = -364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = -364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = -364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    // Low Row [5]
    baseangle = 364; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 182; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -364; 		// 0 degree angle
    basepitch = -182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Middle [7]
    baseangle = 546; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 364; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -364; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -546; 		// 0 degree angle
    basepitch = 0;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // High Row [5]
    baseangle = 364; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 182; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -364; 		// 0 degree angle
    basepitch = 182;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Higher Row [3]
    baseangle = 182; 		// 0 degree angle
    basepitch = 364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 0; 		// 0 degree angle
    basepitch = 364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -182; 		// 0 degree angle
    basepitch = 364;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    // Highest Row [1]
    baseangle = 0; 		// 0 degree angle
    basepitch = 546;	// -15 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }


    Break;
   }
   Case 15:  // Major Lightning
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;	// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 728; // 364 		// 0 degree angle
    basepitch = 0;	// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = 1456; // 728 		// 0 degree angle
    basepitch = 0;	// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -1456; //-728 		// 0 degree angle
    basepitch = 0;	// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    baseangle = -728; //-364 		// 0 degree angle
    basepitch = 0;	// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
     SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
      SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
   Case 16:  // Raging Spirits
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    SpawnProjectile(1001,"RagingSpiritBase", (PBA >> 16), 100, PVA, 0, 2002);
    SpawnProjectile(1001,"RagingSpiritBase", (PBA >> 16), 100, PVA, 0, 2003);
    SpawnProjectile(1001,"RagingSpiritBase", (PBA >> 16), 100, PVA, 0, 2004);  
    SpawnProjectile(1001,"RagingSpiritBase", (PBA >> 16), 100, PVA, 0, 2005);  
    SpawnProjectile(1001,"RagingSpiritBase", (PBA >> 16), 100, PVA, 0, 2006);  
    SetActorPosition(2002,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2003,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2004,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2005,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2006,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    Break;
   }
   Case 17:  // Ultra Magic Missile
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    if (buttons & BT_ZOOM) { spellname = "UltraMagicMissileSeek"; } else { spellname = "UltraMagicMissile"; }
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    Break;
   }
  }
  Thing_Remove(1002);
 }
 if (Type == 1) // Healing
 {
  int StamHealMin;
  int StamHealMax;
  int StamHealCap;
  if (Strength < 10) // Not the Major Healing Spell [Deggaris and Illucia Only]
  {
   if (Strength < 3) // Minor Healing Spell [Deggaris and Illucia Only]
   {
    C1 = MaxHealthTrue;
    C2 = random(GetHealingValue(0,0),GetHealingValue(0,1));

    StamHealCap = ((MiscellaneousVars[22] * 10250) / 10000);
    StamHealMin = ((MiscellaneousVars[22] * 36) / 10000);
    StamHealMax = ((MiscellaneousVars[22] * 66) / 10000);

    FadeRange(63,63,63,0.8,255,255,255,0.0,1.0);
    if (CharacterClass == 2) ActivatorSound("healing_dq",127); 
    else ActivatorSound("HealSpell1",127); 
   }
   else // Healing Spell [Deggaris and Illucia Only]
   {
    C1 = MaxHealthTrue;
    C2 = random(GetHealingValue(1,0),GetHealingValue(1,1));

    StamHealCap = ((MiscellaneousVars[22] * 11250) / 10000);
    StamHealMin = ((MiscellaneousVars[22] * 180) / 10000);
    StamHealMax = ((MiscellaneousVars[22] * 330) / 10000);

    FadeRange(127,127,127,0.8,255,255,255,0.0,1.0);
    if (CharacterClass == 2) ActivatorSound("healing_dq",127); 
    else ActivatorSound("HealSpell1",127); 
   }
  }
  else // Major Healing Spell [Deggaris and Illucia Only]
  {
   C1 = MaxHealthLimit;
   C2 = random(GetHealingValue(2,0),GetHealingValue(2,1));

   StamHealCap = ((MiscellaneousVars[22] * 15000) / 10000);
   StamHealMin = ((MiscellaneousVars[22] * 450) / 10000);
   StamHealMax = ((MiscellaneousVars[22] * 825) / 10000);

   FadeRange(193,193,193,0.8,255,255,255,0.0,1.0);
   if (CharacterClass == 2) ActivatorSound("healing_dq",127); 
   else ActivatorSound("HealSpell1",127); 
  }
  if (CheckInventory("SpreaderAura2") > 0)
  {
   C2 *= 7;
   StamHealMin *= 7;
   StamHealMax *= 7;
  }
  else
  {
   if (CheckInventory("SpreaderAura1") > 0)
   {
    C2 *= 3;
    StamHealMin *= 3;
    StamHealMax *= 3;
   }
  }

  StamHealMin = StamHealMin * (10 + (PlayerLevel / 25)) / 10;
  StamHealMax = StamHealMax * (10 + (PlayerLevel / 25)) / 10;

  // Check Sauron Equipment
  if (CheckActorInventory(1001,"SauronHelmet") > 0)
  {
   StamHealMin = StamHealMin * 9 / 8; // 1.125x
   StamHealMax = StamHealMax * 9 / 8; // 1.125x
  }
  if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0)
  {
   StamHealMin = StamHealMin * 9 / 8; // 1.125x
   StamHealMax = StamHealMax * 9 / 8; // 1.125x
  }
  if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)
  {
   StamHealMin = StamHealMin * 9 / 8; // 1.125x
   StamHealMax = StamHealMax * 9 / 8; // 1.125x
  }
  if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0)
  {
   StamHealMin = StamHealMin * 9 / 8; // 1.125x
   StamHealMax = StamHealMax * 9 / 8; // 1.125x
  }
  if (CheckActorInventory(1001,"TheOneRing") > 0)
  {
   StamHealMin = StamHealMin * 5 / 2; // 2.5x
   StamHealMax = StamHealMax * 5 / 2; // 2.5x
  }

  // Divine Avatar
  if (PowerupTimer[7] > 0)
  {
   StamHealMin *= 4;
   StamHealMax *= 4;
  }
  // ???
  if (PowerupTimer[129] > 0)
  {
   StamHealMin *= 10;
   StamHealMax *= 10;
  }
  // Tension
  if (MiscellaneousVars[181] == 1)
  {
   StamHealMin = StamHealMin * 17 / 10; // 1.7x
   StamHealMax = StamHealMax * 17 / 10; // 1.7x
  }
  if (MiscellaneousVars[181] == 2)
  {
   StamHealMin = StamHealMin * 3; // 3x
   StamHealMax = StamHealMax * 3; // 3x
  }
  if (MiscellaneousVars[181] == 3)
  {
   StamHealMin = StamHealMin * 5; // 5x
   StamHealMax = StamHealMax * 5; // 5x
  }
  if (MiscellaneousVars[181] == 4)
  {
   StamHealMin = StamHealMin * 15 / 2; // 7.5x
   StamHealMax = StamHealMax * 15 / 2; // 7.5x
  }
  if (MiscellaneousVars[181] == 5)
  {
   StamHealMin = StamHealMin * 45 / 4; // 11.25x
   StamHealMax = StamHealMax * 45 / 4; // 11.25x
  }
  if (MiscellaneousVars[181] == 6)
  {
   StamHealMin = StamHealMin * 35 / 2; // 17.5x
   StamHealMax = StamHealMax * 35 / 2; // 17.5x
  }
  if (MiscellaneousVars[181] == 7)
  {
   StamHealMin = StamHealMin * 25; // 25x
   StamHealMax = StamHealMax * 25; // 25x
  }

  // Deggaris in use
  if (CharacterClass == 0)
  {
   StamHealMin = StamHealMin * 7 / 4; // 1.75x
   StamHealMax = StamHealMax * 7 / 4; // 1.75x
  }
  // Illucia in use
  if (CharacterClass == 1)
  {
   StamHealMin = StamHealMin * 5 / 4; // 1.25x
   StamHealMax = StamHealMax * 5 / 4; // 1.25x
  }
  // Flora in use
  if (CharacterClass == 2)
  {
   StamHealMin = StamHealMin * 7 / 8; // 0.875x
   StamHealMax = StamHealMax * 7 / 8; // 0.875x
  }

  int healingcap;  
  int oldhealthvalue;
  int finalhealvalue;
  oldhealthvalue = GetActorProperty(1001,APROP_HEALTH);
  healingcap = C1;
  finalhealvalue = oldhealthvalue + C2;
  if (oldhealthvalue < healingcap)
  {
   ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
   if (finalhealvalue < 1) finalhealvalue = 1; // Prevents the gaming from killing you when trying to heal >__>;
   if (finalhealvalue > healingcap) finalhealvalue = healingcap;
   SetActorProperty(1001,APROP_HEALTH,finalhealvalue);
  }

  if (MiscellaneousVars[21] < StamHealCap)
  {
   //ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
   MiscellaneousVars[21] += random(StamHealMin,StamHealMax);
   if (MiscellaneousVars[21] < 0) MiscellaneousVars[21] = 0;
   if (MiscellaneousVars[21] > StamHealCap) MiscellaneousVars[21] = StamHealCap;
  }
 }

 if (Type == 2) // Light
 {
  ActivatorSound("CastLightRoom",127);
  PowerupTimer[0] += (Strength*35);
  if (PowerupTimer[0] > 0) GiveActorInventory(1001,"NightVisionSpell",1);
 }
 if (Type == 3) // Invisibility
 {
  ActivatorSound("CastInvisiblity",127);
  PowerupTimer[1] += (Strength*35);
  if (PowerupTimer[1] > 0) GiveActorInventory(1001,"InvisiblitySpell",1);
 }
 if (Type == 4) // Flight
 {
  ActivatorSound("CastFlight",127);
  PowerupTimer[2] += (Strength*35);
  if (PowerupTimer[2] > 0) GiveActorInventory(1001,"FlightSpell",1);
 }
 if (Type == 5) // Berserk
 {
  ActivatorSound("CastBerserk",127);
  PowerupTimer[23] += (Strength*35);
  if (PowerupTimer[23] > 0) GiveActorInventory(1001, "PowerStrength", 1);

 }
 if (Type == 6) // Summon Monster
 {
  C1 = 0;
  if (Random(0,100) < 25)
  {
   C1 = 1;
  }
  if (Strength == 0) // Weak Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    ActivatorSound("monstersummon",127);
    SpawnForced(FriendID[Random(0,14)],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     ActivatorSound("monstersummon",127);
     SpawnForced(FriendID[Random(0,14)],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 1) // Moderate Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    ActivatorSound("monstersummon",127);
    SpawnForced(FriendID[Random(15,25)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     ActivatorSound("monstersummon",127);
     SpawnForced(FriendID[Random(15,25)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 2) // Strong Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    ActivatorSound("monstersummon",127);
    SpawnForced(FriendID[Random(26,41)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     ActivatorSound("monstersummon",127);
     SpawnForced(FriendID[Random(26,41)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 3) // ArchVile/Diabloist
  {
   while(ThingCount(0,1002) < 1)
   {
    ActivatorSound("monstersummon",127);
    SpawnForced(FriendID[Random(42,43)],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
  }
  if (Strength == 4) // Cyberdemon/Annihilator
  {
   while(ThingCount(0,1002) < 1)
   {
    ActivatorSound("monstersummon",127);
    SpawnForced(FriendID[Random(44,45)],PX + (Random(-200,200) << 16),PY + (Random(-200,200) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
  }
 }
 if (Type == 7) // Novas
 {
  if (Strength == 0) // Fireball Nova
  {
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "NormalFireBall";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

   }
  }
  if (Strength == 1) // Ice Nova
  {

   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "HexenIceShard";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

   }
  }
  if (Strength == 2) // Lightning Nova
  {
   ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    spellname = "HexenLightningF";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

    spellname = "HexenLightningC";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle - (2048 + (NovaRotations * 2048))), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle - (2048 + (NovaRotations * 2048)));
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }

   }
  }
 }
 if (Type == 8) // Stealth
 {
  ActivatorSound("CastStealth",127);
  PowerupTimer[3] += (Strength*35);
  if (PowerupTimer[3] > 0) SetPlayerProperty(1,1,PROP_NOTARGET);
 }
 if (Type == 9) // Invulnerability
 {
  ActivatorSound("CastInvuln",127);
  PowerupTimer[4] += (Strength*35);
  if (PowerupTimer[4] > 0) SetPlayerProperty(1,1,PROP_INVULNERABILITY);
 }
 if (Type == 10) // Poison Clouds
 {
  SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1002,PBA);
  if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
  {
   SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1004,PBA);
   SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1006,PBA);
   if (CheckInventory("SpreaderAura2") > 0)
   {
    SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1008,PBA);
    SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1010,PBA);
    SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1012,PBA);
    SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1014,PBA);
   }
  }
  if (ThingCount(0,1002) < 1 && ThingCount(0,1004) < 1 && ThingCount(0,1006) < 1 && ThingCount(0,1008) < 1 && ThingCount(0,1010) < 1 && ThingCount(0,1012) < 1 && ThingCount(0,1014) < 1) // failed... try again
  {
   ACS_NamedExecuteAlways("MagicEffects",0,Type,Strength,0);
  }
  if (Strength == 0)
  {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "MinorPoisonCloud";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }
  }

  if (Strength == 1)
  {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "NormalPoisonCloud";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }
  }
  if (Strength == 2)
  {
    ACS_NamedExecuteAlways("StartTensionCountDown",0,0,0,0);
    spellname = "MajorPoisonCloud";
    baseangle = 0; 		// 0 degree angle
    basepitch = 0;		// 0 degree pitch
    spreadangle = 0;	// 0 degree angle
    spreadpitch = 0;	// 0 degree pitch
    project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
    SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    if (CheckInventory("SpreaderAura2") > 0 || CheckInventory("SpreaderAura1") > 0)
    {
     spreadangle = 2730;	// 15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     spreadangle = -2730;	// -15 degree angle
     spreadpitch = 0;	// 0 degree pitch
     project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
     project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
     SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
     SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
     SetActorAngle(2001, project_Angle);
     SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
     Thing_ChangeTID(2001,4444);

     if (CheckInventory("SpreaderAura2") > 0)
     {
      spreadangle = 1365; // 7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = 1365; // 7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = -1365; // -7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);

      spreadangle = -1365; // -7.5d angle
      spreadpitch = 1365; // 7.5d pitch
      project_XSpeedSpread = FixedMul(cos(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_YSpeedSpread = FixedMul(sin(project_Angle+baseangle+spreadangle), FixedMul(cos(project_Pitch+basepitch+spreadpitch), 16.0));
      project_ZSpeedSpread = -FixedMul(sin(project_Pitch+basepitch+spreadpitch), 16.0);
      SpawnProjectile(0, spellname, 0, 0, 0, 0, 2001);
      SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
      SetActorAngle(2001, project_Angle);
      SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
      Thing_ChangeTID(2001,4444);
     }
    }
  }
 }
 if (Type == 11) // Armor
 {
  if (Strength == 0) // Stone Skin [Deggaris/Illucia Only]
  {
   if (PowerupTimer[7] > 0)
   {
    if (CheckInventory("Armor") < 1332)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "StoneSkinGA", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 4);
    }
   }
   else
   {
    if (CheckInventory("Armor") < 333)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "StoneSkin", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 1);
    }
   }
  }
  else if (Strength == 1) // Diamond Skin [Deggaris/Illucia Only]
  {
   if (PowerupTimer[7] > 0)
   {
    if (CheckInventory("Armor") < 3552)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "DiamondSkinGA", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 4);
    }
   }
   else
   {
    if (CheckInventory("Armor") < 888)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "DiamondSkin", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 1);
    }
   }
  }

/*
  else if (Strength == 2) // Spiritual Exoskin [Flora Only] [50% Protection, Max AP equal to 100% of Flora's Max HP]
  {
   C1 = MaxHealthTrue;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
  else if (Strength == 3) // Greater Spiritual Exoskin [Flora Only] [75% Protection, Max AP equal to 200% of Flora's Max HP]
  {
   C1 = MaxHealthLimit;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
  else if (Strength == 4) // Perfected Spiritual Exoskin [Flora Only] [100% Protection, Max AP equal to 400% of Flora's Max HP]
  {
   C1 = MaxHealthLimit;
   C1 = C1 * 2;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
*/

 }

 if (Type == 12) // Computer Map
 {
  ActivatorSound("CastFarsight",127);
  GiveActorInventory(1001, "Allmap", 1);
  GiveActorInventory(1001, "FarsightScanner", 1);
 }
 if (Type == 13) // Freeze Time
 {
  ActivatorSound("CastTimeFreeze",127);
  PowerupTimer[5] += (Strength*35);
  if (PowerupTimer[5] > 0) GiveActorInventory(1001, "PowerTimeFreezer", 1);
 }
 if (Type == 14) // Terrorization Aura
 {
  ActivatorSound("CastTerrorAura",127);
  PowerupTimer[6] += (Strength*35);
  if (PowerupTimer[6] > 0) GiveActorInventory(1001, "PowerFrightener", 1);
 }
 if (Type == 15) // Ammo Spawner
 {
  SpawnForced("ClipBox",PX+20,PY+20,PZ+10.0,0,0);
  SpawnForced("ShellBox",PX-20,PY+20,PZ+10.0,0,0);
  SpawnForced("RocketBox",PX+10,PY+10,PZ+10.0,0,0);


  SpawnForced("CellPack",PX-10,PY+10,PZ+10.0,0,0);
  if (random(0,800) < 200)
  {
   SpawnForced("ClipBox",PX+20,PY-20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY-20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY-10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY-10,PZ+10.0,0,0);
  }
  if (random(0,800) < 50)
  {
   SpawnForced("ClipBox",PX+20,PY+20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY+20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY+10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY+10,PZ+10.0,0,0);

   SpawnForced("ClipBox",PX+20,PY-20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY-20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY-10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY-10,PZ+10.0,0,0);
  }
 }
 if (Type == 16) // Divine Avatar
 {
  ActivatorSound("CastGodlyAvatar",127);
  PowerupTimer[7] += (Strength*35);
  if (PowerupTimer[7] > 0)
  {
   GiveActorInventory(1001, "PowerDoubleDamage", 1);
   GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
   GiveActorInventory(1001, "PowerHalfDamage", 1);
   GiveActorInventory(1001, "PowerSpeed", 1);
   GiveActorInventory(1001, "PowerHighJump", 1);
  }
 }
 if (Type == 17) // Spreader Aura Lv. 1
 {
  ActivatorSound("CastSpreaderAura1",127);
  PowerupTimer[8] += (Strength*35);
 }
 if (Type == 18) // Spreader Aura Lv. 2
 {
  ActivatorSound("CastSpreaderAura2",127);
  PowerupTimer[9] += (Strength*35);
 }
 if (Type == 19) // Oomph
 {
  //ActivatorSound("CastSpreaderAura2",127);
  PowerupTimer[10] += (Strength*35);
 }
 if (Type == 20) // Buff
 {
  //ActivatorSound("CastSpreaderAura2",127);
  PowerupTimer[11] += (Strength*35);
 }
 if (Type == 21) // Accelerate
 {
  //ActivatorSound("CastSpreaderAura2",127);
  PowerupTimer[12] += (Strength*35);
 }
}

script "CreateTranslationTables" OPEN
{
 CreateTranslation(1, 16:47=112:127); // Demon
 CreateTranslation(2, 64:79=112:127, 61:63=112:114); // Imp
 CreateTranslation(3, 128:151=112:127, 77:79=125:127, 1:2=126:127); // Pistol
 CreateTranslation(4, 96:111=112:125, 5:8=126:127); // Shotgun
 CreateTranslation(5, 31:47=112:127); // Chaingunner
 CreateTranslation(6, 32:47=117:127, 160:167=112:127, 213:223=112:127, 232:235=122:125, 175:191=112:127); // Lost Soul
 CreateTranslation(7, 16:47=112:127, 165:167=123:125, 169:191=112:127, 73:79=121:127); // Caco
 CreateTranslation(8, 193:207=112:127, 5:8=124:127, 104:111=120:127); // Arach
 CreateTranslation(9, 64:79=112:127, 149:151=123:125); // HK
 CreateTranslation(10, 55:79=112:127); // Baron
 CreateTranslation(11, 80:111=112:127); // Revenant
 CreateTranslation(12, 51:79=112:127, 236:239=124:127, 13:15=121:123, 1:2=126:127, 128:151=112:127); // Manc
 CreateTranslation(13, 192:207=112:122, 240:247=123:127); // Nazi
 CreateTranslation(14, 48:79=112:127, 13:15=120:122, 208:213=112:117, 128:151=112:127); // Arch-Vile
 CreateTranslation(15, 64:79=112:127, 48:63=127:112, 144:151=112:127); // Cyberdemon
 CreateTranslation(16, 64:79=88:103, 48:63=103:88, 144:151=88:103, 32:47=224:231, 168:191=224:231, 224:231=[255, 255, 255]:[128, 255, 128], 208:223=112:127); // Cyberdemon?

 CreateTranslation(17, 112:127=48:63); // No Armor
 CreateTranslation(18, 112:127=112:127); // Green Armor
 CreateTranslation(19, 112:127=240:246); // Blue Armor
 CreateTranslation(20, 112:127=96:111); // Stone Skin
 CreateTranslation(21, 112:127=88:103); // Diamond Skin

 CreateTranslation(22, 112:127=196:207); // Blue Armor (Armor Bonus)

 CreateTranslation(30, 80:111=112:127); // For Healing on the Damage Indicator
 CreateTranslation(31, 80:111=16:31); // For Damage on the Damage Indicator [normal]
 CreateTranslation(32, 80:111=32:47); // For Damage on the Damage Indicator [CRITICAL]
}

// {-10-} Mana Recovery Items

script "CheckManaLevels" ENTER
{
 int C1, I1, C2, I2, G1, G2, G3, G4;
 int MaxManaLimit;
 if (CharacterClass == 0) MaxManaLimit = MaxMana * 4 / 3;
 if (CharacterClass == 1) MaxManaLimit = MaxMana * 5 / 3;
 if (CharacterClass == 2) MaxManaLimit = MaxMana * 2;

 // Runs to Check for Mana Pickup Items
 if (CurrentMana >= MaxMana)
 {
  if (CurrentMana >= MaxManaLimit) CurrentMana = MaxManaLimit;
  SetAmmoCapacity("DoomSpellMana", 0);
 }
 else
 {
  SetAmmoCapacity("DoomSpellMana", 99999);
  G3 = CheckInventory("DoomSpellMana");
  TakeInventory("DoomSpellMana", G3);
  if (CheckActorInventory(1001,"SauronHelmet") > 0)
  {  
   G3 = G3 * 9 / 8;
  }
  if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) G3 = G3 * 5 / 4;
  if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) G3 = G3 * 5 / 4;
  if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) G3 = G3 * 5 / 4;
  if (CheckActorInventory(1001,"TheOneRing") > 0)
  {  
   if (CharacterClass == 2) G3 = G3 * 5 / 4; else G3 = G3 / 2;
  }

  CurrentMana += G3;
  if (G3 > 0)
  {
   if (CurrentMana >= MaxMana) CurrentMana = MaxMana;
   //if (MiscellaneousVars[2000] == 0) HudMessage(s:"+",d:G3,s:" Mana";0,3419,cr_blue,0.036,0.081,0.75);
  }
  G3 = 0;


  if (CurrentMana >= MaxMana)
  {
   if (CurrentMana >= MaxManaLimit) CurrentMana = MaxManaLimit;
   SetAmmoCapacity("DoomSpellMana", 0);
  }
 }
 Delay(1);
 Restart;
}

// Defines the Buildup to Sauravatar's appearance [DVI-DS]
script "DVI-MainEyeDeath2" (void)
{
 int C1, C2, C3, C4;
 if (ModType != 0) // Deus Vult 1 or DVII
 {
  Delay(35);
  SetMusic("STAGE6D", 0); 
  AmbientSound("SauronAwakens",127);
  // 18.25 * 35 = 637
  Delay(637);
  ACS_NamedExecute("DVI-AwakenSauravatar",0,0,0,0);
  Delay(1);
 }
 else
 {
  Delay(21);
  Exit_Normal(0);
  Delay(1);
 }
}

// Awakens the Stone Cyberdemon that becomes the Greater Sauravatar [DVI-DS]
script "DVI-AwakenSauravatar" (void)
{
 int PX, PY, PZ, PA, PBA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 

 PX = GetActorX(1001);
 PY = GetActorY(1001);
 PZ = GetActorZ(1001);
 PA = FixedMul(GetActorAngle(1001),360.0);
 PBA = FixedMul(GetActorAngle(1001),255.0);

 if (ModType != 0)
 {
  AmbientSound("SauronSight",127);
  Thing_Activate(999);
  Thing_ChangeTID(999,1124);
  SpecialGameFlags[1000] = 1;
 }
}

// Killed MAP02 Eye [DVI-DS] / MAP12 First Eye [DVII-DS]
script "DVI-M02EyeDead" (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(1, SIDE_FRONT, TEXTURE_MIDDLE, "-"); //remove middle 
  SetLineTexture(1, SIDE_BACK, TEXTURE_MIDDLE, "-"); //remove middle 
 }
 if (ModType == 2)
 {
  ReplaceTextures("XE03_01","-",NOT_BOTTOM|NOT_TOP|NOT_FLOOR|NOT_CEILING);
 }
}

// Killed MAP04 Eye #1 [DVI-DS] / MAP12 Second Eye [DVII-DS]
script "DV1-M04Eye1Dead" (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(2, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(2, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(2, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
 }
}

// Killed MAP04 Eye #2 [DVI-DS] / MAP12 Third Eye [DVII-DS]
script "DV1-M04Eye2Dead" (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(3, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(3, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(3, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
 }
}

// Killed MAP04 Main Eye [DVI-DS] / MAP12 Fourth Eye [DVII-DS]
script "DVI-MainEyeDeath1" (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(4, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_BOTTOM, "BLACK"); //remove middle 
  ChangeCeiling(13, "BLACK");
  ChangeFloor(13, "BLACK");
 }
}

// Sauravatar's Death [DVI-DS]
script "SauravatarDeath" (void)
{
 int C1;
 SetMusic("*", 0); 
}

// New Soulsphere script :P
script "GrabSoulsphere" (void)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3, M1, M2, M3;
 int MaxManaLimit;
 int MaxHealthLimit = MaxHealthTrue * 2;

 G1 = GetActorProperty(1001,APROP_Health); 
 G2 = MaxHealthLimit;
 if (G1 < G2)
 {
  C1 = MaxHealthTrue;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 // Add 25% to Stamina Value [up to 500%]
 MiscellaneousVars[165] = MiscellaneousVars[22] / 4;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
 if (MiscellaneousVars[21] < MiscellaneousVars[164]) MiscellaneousVars[21] += MiscellaneousVars[165]; 
 if (MiscellaneousVars[21] > MiscellaneousVars[164]) MiscellaneousVars[21] = MiscellaneousVars[164];

 // Add 50% MP/Mana to Deggaris/Illucia/Flora, up to 133.3%/166.7%/200% Max MP/Mana.
 if (CharacterClass == 0) MaxManaLimit = MaxMana * 4 / 3;
 if (CharacterClass == 1) MaxManaLimit = MaxMana * 5 / 3;
 if (CharacterClass == 2) MaxManaLimit = MaxMana * 2;
 if (CurrentMana < MaxManaLimit)
 {
  M1 = MaxMana / 2;
  CurrentMana += M1;
  if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
 }

 if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 2500; // 25.00% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel * 25;
   H1 += H2;

   H3 = random(-500,500);
   H1 += H3;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) H1 = H1 * 5 / 3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }
}

// New Megasphere Script [for health half] :P
script "MegaSphereHealth" (void)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3;
 int MaxHealthLimit = MaxHealthTrue * 2;
 G1 = GetActorProperty(1001,APROP_Health); 
 G2 = MaxHealthLimit;
 if (G1 < G2)
 {
  C1 = MaxHealthLimit;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 7500; // 75.00% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel * 75;
   H1 += H2;

   H3 = random(-1500,1500);
   H1 += H3;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) H1 = H1 * 5 / 3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }

 // Add 50% to Stamina Value [up to 200%]
 MiscellaneousVars[165] = MiscellaneousVars[22] / 2;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
 if (MiscellaneousVars[21] < MiscellaneousVars[164]) MiscellaneousVars[21] += MiscellaneousVars[165]; 
 if (MiscellaneousVars[21] > MiscellaneousVars[164]) MiscellaneousVars[21] = MiscellaneousVars[164];

}

// New Health Bonus Script :P
script "EmulateGiveHealthBonus" (int C5)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3;
 int MaxHealthLimit = MaxHealthTrue * 2;

 If (C5 <= 0) C5 = 1;

 G1 = GetActorProperty(1001,APROP_Health); 

 G2 = MaxHealthLimit;
 if (G1 < G2)
 {
  C1 = MaxHealthTrue / 100;
  if (C1 < 1) C1 = 1;

  C2 = PlayerLevel / 10;
  C1 += C2;
  C1 = C1 * C5;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 // Add 0.5% to Stamina Value [up to 500%]
 MiscellaneousVars[165] = MiscellaneousVars[22] / 200;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
 if (MiscellaneousVars[21] < MiscellaneousVars[164]) MiscellaneousVars[21] += MiscellaneousVars[165]; 
 if (MiscellaneousVars[21] > MiscellaneousVars[164]) MiscellaneousVars[21] = MiscellaneousVars[164];

 if (CharacterClass == 2) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 25; // 0.25% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel / 4;
   H1 += H2;

   H3 = random(-5,5);
   H1 += H3;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) H1 = H1 * 5 / 3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }
}

// Used later to configure the full max health of the [Greater] Sauravatar and set it to its proper Health to start the fight [instead of its predefined DECORATE amount] [DVI-DS]
script "SetSauravatarHealth" (void)
{
 int C1, C2, C3, C4, G1, G2, G3, G4;

  SpecialGameFlags[1001] = SpecialGameFlags[1002];
//  PrintBold(s:"Phase1 - First Value: ",d:SpecialGameFlags[1001]);

  if (GameSkill() == SKILL_VERY_EASY) G4 = 30;
  else if (GameSkill() == SKILL_EASY) G4 = 35;
  else if (GameSkill() == SKILL_NORMAL) G4 = 40;
  else if (GameSkill() == SKILL_HARD) G4 = 45;
  else if (GameSkill() == SKILL_VERY_HARD) G4 = 50;

  C1 = SpecialGameFlags[1001] * G4 / 100;
  SpecialGameFlags[1001] += C1;
//  PrintBold(s:"Phase2 - Difficulty Add: ",d:SpecialGameFlags[1001],s:"\nC1: ",d:C1);

  C4 = MonstersAlive[22] * 192;
  C4 += MonstersKilled[22] * 24;
  C4 += MonstersAlive[23] * 160;
  C4 += MonstersKilled[23] * 36;
  C4 += MonstersAlive[24] * 128;
  C4 += MonstersKilled[24] * 48;
  C4 += MonstersAlive[25] * 96;
  C4 += MonstersKilled[25] * 60;
  if (GameSkill() == SKILL_VERY_EASY) C3 = 70;
  else if (GameSkill() == SKILL_EASY) C3 = 88;
  else if (GameSkill() == SKILL_NORMAL) C3 = 100;
  else if (GameSkill() == SKILL_HARD) C3 = 112;
  else if (GameSkill() == SKILL_VERY_HARD) C3 = 130;

  C4 = C4 * C3 / 100;
  SpecialGameFlags[1001] += C4;
//  PrintBold(s:"Phase3 - Level Kills Add: ",d:SpecialGameFlags[1001],s:"\nC4: ",d:C4,s:"\nC3: ",d:C3);

  C4 = SecretsFound[22];
  C4 -= SecretsFound[23];
  C4 -= SecretsFound[24];
  C4 -= SecretsFound[25];
  if (GameSkill() == SKILL_VERY_EASY) C4 = C4 * 3 / 2;
  else if (GameSkill() == SKILL_EASY) C4 = C4 * 5 / 4;
  else if (GameSkill() == SKILL_NORMAL) C4 = C4 / 2;
  else if (GameSkill() == SKILL_HARD) C4 = C4 / 3;
  else if (GameSkill() == SKILL_VERY_HARD) C4 = C4 / 4;

  C3 = 100;
  C3 -= C4;
  SpecialGameFlags[1001] = SpecialGameFlags[1001] * C3 / 100;
//  PrintBold(s:"Phase4 - SecretsFound Add: ",d:SpecialGameFlags[1001],s:"\nC4: ",d:C4,s:"\nC3: ",d:C3);

  C3 = PlayerLevel / 4;
  C3 += 100;
  SpecialGameFlags[1001] = SpecialGameFlags[1001] * C3 / 100;
//  PrintBold(s:"Phase5 - PlayerLevel Add: ",d:SpecialGameFlags[1001],s:"\nC3: ",d:C3);

  if (CheckActorInventory(1001,"SauronHelmet") > 0)
  {
   SpecialGameFlags[1001] = SpecialGameFlags[1001] * 5 / 4;
//   PrintBold(s:"Phase6 - SauronItems Add: Found Helmet ",d:SpecialGameFlags[1001]);
  }
  if (CheckActorInventory(1001,"SauronGauntlets") > 0)
  {
   SpecialGameFlags[1001] = SpecialGameFlags[1001] * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Deggaris] ",d:SpecialGameFlags[1001]);
  }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)
  {
   SpecialGameFlags[1001] = SpecialGameFlags[1001] * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Illucia] ",d:SpecialGameFlags[1001]);
  }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0)
  { 
   SpecialGameFlags[1001] = SpecialGameFlags[1001] * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Flora] ",d:SpecialGameFlags[1001]);
  }
  if (CheckActorInventory(1001,"TheOneRing") > 0)
  {
   SpecialGameFlags[1001] = SpecialGameFlags[1001] * 2;
//   PrintBold(s:"Phase6 - SauronItems Add: Found Ring ",d:SpecialGameFlags[1001]);
  }
//  PrintBold(s:"Phase6 - SauronItems Add: ",d:SpecialGameFlags[1001]);

  SpecialGameFlags[1003] = SpecialGameFlags[1001] * 2 / 3;
  SpecialGameFlags[1004] = SpecialGameFlags[1001] * 1 / 3;

  SetActorProperty(1124,APROP_Health,SpecialGameFlags[1001]);
  SetActorProperty(1124,APROP_SpawnHealth,SpecialGameFlags[1001]);
  SetInventory("CurrentMaxHealth", SpecialGameFlags[1001]);
  SetUserVariable(1124,"user_MaxHP",SpecialGameFlags[1001]);

  Thing_Damage2(666,999999,"Massacre"); 
}

// Health Regeneration [only runs when Sauravatar walks around] [DVI-DS]
script "SauravatarRegenMode" (int C5)
{
 int C1, C2, C3, G1, G2, G3, G4;

  if (GameSkill() == SKILL_VERY_EASY)
  {
   G4 = 6;
   if (C5 == 1) G4 += 24;
  }
  else
  if (GameSkill() == SKILL_EASY)
  {
   G4 = 7;
   if (C5 == 1) G4 += 28;
  }
  else
  if (GameSkill() == SKILL_NORMAL)
  {
   G4 = 8;
   if (C5 == 1) G4 += 32;
  }
  else
  if (GameSkill() == SKILL_HARD)
  {
   G4 = 9;
   if (C5 == 1) G4 += 36;
  }
  else
  if (GameSkill() == SKILL_VERY_HARD)
  {
   G4 = 10;
   if (C5 == 1) G4 += 40;
  }
  if (C2 <= SpecialGameFlags[1003])
  {
   if (C2 <= SpecialGameFlags[1004]) G4 = G4 * 11 / 8; else G4 = G4 * 9 / 8;
  }
  C1 = SpecialGameFlags[1001] * G4 / 131072;
  if (C2 <= SpecialGameFlags[1003])
  {
   if (C2 <= SpecialGameFlags[1004])
   {
    C1 += random(-7,7);
   }
   else
   {
    C1 += random(-5,5);
   }
  }
  else
  {
   C1 += random(-4,4);
  }
  if (C1 < 1) C1 = 1;

  C2 = GetActorProperty(1124,APROP_Health);
  C2 += C1;
  if (C2 > SpecialGameFlags[1001]) C2 = SpecialGameFlags[1001];

  SetActorProperty(1124,APROP_Health,C2);

  if (C2 <= SpecialGameFlags[1003])
  {
   if (C2 <= SpecialGameFlags[1004])
   {
    SetThingSpecial(1124,0,2,0,0,0,0); // Set's args[0] to 2 in order to make the Sauravatar shoot his OmniBFG balls in threes [the white BFG balls]
   }
   else
   {
    SetThingSpecial(1124,0,1,0,0,0,0); // Set's args[0] to 1 in order to make the Sauravatar shoot his MegaBFG balls in twos [the yellow BFG balls]
   }
  }
  else
  {
   SetThingSpecial(1124,0,0,0,0,0,0); // Set's args[0] to 0 in order to make the Sauravatar shoot his SuperBFG balls [the red BFG balls]
  }
}

// Changes Music for the battle with the main Eye of Sauron on MAP04 [DVI-DS] or MAP12 [DVII-DS]
script "DV1M04-Music1" (void)
{
 if (SpecialGameFlags[1000] == 0) SetMusic("DDRAGON3", 13); 
}

// Changes Music back when exiting the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS]
script 24 (void)
{
 if (SpecialGameFlags[1000] == 0) SetMusic("*", 0); 
}

// Changes Music for Entering the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS]
script 25 (void)
{
 if (SpecialGameFlags[1000] == 0) SetMusic("DDRAGON3", 15); 
}

// Max Health Bonus Script
script "MaxHPBonusPickup" (void)
{
 int I1, I2, Z1, Z2, HPError, C1, C2, BonusMaxHP, CurrentHP, PerkFactor; 
 int ArmorHPBonus = 0;
 int MapNoBonus = 0;

 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) terminate;

 if (CharacterClass == 0) BonusMaxHP = MaxHealthTrue / 400;
 if (CharacterClass == 1) BonusMaxHP = MaxHealthTrue / 420;
 if (CharacterClass == 2) BonusMaxHP = MaxHealthTrue / 440;

 PerkFactor = ((MiscellaneousVars[10001] * 500) + (MiscellaneousVars[10002] * 1250)) + 10000;
 BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.

 PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
 BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded

 if (CharacterClass == 0) HPError = MaxHealthTrue / 1200; // Deggaris has one more HP to his Error for the least amount of HP each [1200]
 if (CharacterClass == 1) HPError = MaxHealthTrue / 1260; // Illucia has one more HP to her Error for the middle amount of HP each [1260]
 if (CharacterClass == 2) HPError = MaxHealthTrue / 1320; // Flora has one more HP to her Error for the most amount of HP each [1320]
 HPError += 1;
 BonusMaxHP = BonusMaxHP + random(-HPError,HPError);

 if (CharacterClass == 0) { C1 = random(18,21); } // Deggaris receives most HP from a bonus
 if (CharacterClass == 1) { C1 = random(15,17); } // Illucia receives less HP from a bonus than Deggaris, but more than Flora.
 if (CharacterClass == 2) { C1 = random(12,14); } // Flora receives the least HP from a bonus
 BonusMaxHP = BonusMaxHP * C1 / 16;

 // Flora's Armor Items [up to +55% Max HP gained from Max HP Bonuses]
 if (CharacterClass == 2 && CheckActorInventory(1001,"PearlyCorset")) ArmorHPBonus += 20; // +20%
 if (CharacterClass == 2 && CheckActorInventory(1001,"KissaBra")) ArmorHPBonus += 10; // +10%
 if (CharacterClass == 2 && CheckActorInventory(1001,"BalrogRing")) ArmorHPBonus += 15; // +25%
 ArmorHPBonus += 100;
 BonusMaxHP = BonusMaxHP * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset / Kissa Bra / Balrog Ring

 PerkFactor = ((MiscellaneousVars[10001] * 500) + (MiscellaneousVars[10002] * 1250)) + 10000;
 BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.

 PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
 BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded

 // Overall Modifier
 MapNoBonus = GetLevelInfo(LEVELINFO_LEVELNUM) * 9 / 20; // 45%
 BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
 if (GameSkill() == SKILL_VERY_EASY)	BonusMaxHP = BonusMaxHP * (random(90,100) + MapNoBonus) / 100;
 if (GameSkill() == SKILL_EASY)			BonusMaxHP = BonusMaxHP * (random(80,90) + MapNoBonus) / 100;
 if (GameSkill() == SKILL_NORMAL)		BonusMaxHP = BonusMaxHP * (random(75,85) + MapNoBonus) / 100;
 if (GameSkill() == SKILL_HARD)			BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
 if (GameSkill() == SKILL_VERY_HARD)	BonusMaxHP = BonusMaxHP * (random(60,70) + MapNoBonus) / 100;

 PerkFactor = 1;
 PerkFactor += ((MiscellaneousVars[10001] * 1) / 10) + ((MiscellaneousVars[317] * 1) / 4);
 PerkFactor += ((MiscellaneousVars[317] * 1) / 4);
 if (BonusMaxHP < PerkFactor) BonusMaxHP = PerkFactor;

 MiscellaneousVars[222] += BonusMaxHP;
 MiscellaneousVars[2031] = 105; 

 CurrentHP = GetActorProperty(1001,APROP_HEALTH);
 //GiveInventory("UpgradeStamina", BonusMaxHP);
 SetActorProperty(1001,APROP_HEALTH,(CurrentHP + BonusMaxHP));
 MaxHealthTrue += BonusMaxHP;
 int MaxHealthLimit = MaxHealthTrue * 2;
 SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);

 // Max HP Bonus also heals extra HP dependant on the character in use.
 CurrentHP = GetActorProperty(1001,APROP_HEALTH);
 if (CharacterClass == 0) CurrentHP = CurrentHP + random(2,4) + BonusMaxHP; // Deggaris receives the Least Healed HP from a bonus
 if (CharacterClass == 1) CurrentHP = CurrentHP + random(3,6) + BonusMaxHP; // Illucia receives a Median of Healed HP from a bonus
 if (CharacterClass == 2) CurrentHP = CurrentHP + random(5,10) + BonusMaxHP; // Flora receives the Most Healed HP from a bonus

 C1 = MaxHealthTrue / 100;
 if (C1 < 1) C1 = 1;

 C2 = PlayerLevel / 10;
 C1 += C2;
 CurrentHP += C1;

 if (CurrentHP > MaxHealthLimit) CurrentHP = MaxHealthLimit;
 SetActorProperty(1001,APROP_HEALTH,CurrentHP);
}

// Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
script "CheckHealthLevels" (void)
{
 if (GetActorProperty(1001,APROP_HEALTH) < MaxHealthTrue)
 {
  SetThingSpecial(0,0,0,0,0,1,0); 
  // Print(s:"1");
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,0);
  // Print(s:"0");
 }
}

// General Healing Script For Items [HP]
script "Health-HealingItem" (int PercentMax, int PercentAmount, int ExactAmount)
{
 if (PercentMax < 1) PercentMax = 100;
 if (PercentMax > 200) PercentMax = 200;
 int CurrentHP = GetActorProperty(1001,APROP_HEALTH);
 int HPUpperClamp = (MaxHealthTrue * PercentMax) / 100;
 int HPActualHealValue = ((MaxHealthTrue * PercentAmount) / 100) + ExactAmount;

 if (HPActualHealValue > 0)
 {
  CurrentHP += HPActualHealValue;
  if (CurrentHP > HPUpperClamp) CurrentHP = HPUpperClamp;
 }
}

// Increase Stamina
script "Stamina-HealingItem" (int PercentMax, int PercentAmount, int ExactAmount)
{
 if (PercentMax < 1) PercentMax = 100;
 if (PercentMax > 200) PercentMax = 200;
 // MiscellaneousVars[21] = Current Stamina value
 int StaminaUpperClamp = (MiscellaneousVars[22] * PercentMax) / 10000;
 int StaminaPercentHeal = ((MiscellaneousVars[22] * PercentAmount) / 10000) + ExactAmount;

 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) StaminaPercentHeal = StaminaPercentHeal * 5 / 3;

 if (StaminaPercentHeal > 0)
 {
  MiscellaneousVars[21] += StaminaPercentHeal;
  if (MiscellaneousVars[21] > StaminaUpperClamp) MiscellaneousVars[21] = StaminaUpperClamp;
 }
}

// Stimpacks/Medikits/Berserk Packs (All games)
script "PickupMedicalItem" (int HealItemType) //
{
 int I1, I2, Z1, Z2, C1, C2, HealAmount, ExtraHeal, CurrentHP;
 CurrentHP = GetActorProperty(1001,APROP_HEALTH);

 if (HealItemType == 0) // Stimpack / Crystal Vial[?]
 {
  HealAmount = MaxHealthTrue * 10 / 100;
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   MiscellaneousVars[165] = MiscellaneousVars[22] / 20; // 5.0%
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
   MiscellaneousVars[21] += MiscellaneousVars[165]; 
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
 }
 if (HealItemType == 1) // Medikit / Quartz Flask[?]
 {
  HealAmount = MaxHealthTrue * 25 / 100;
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   MiscellaneousVars[165] = MiscellaneousVars[22] / 8; // 12.5%
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
   MiscellaneousVars[21] += MiscellaneousVars[165]; 
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
 }
 if (HealItemType == 2) // Berserk Pack / Mystic Urn[?]
 {
  HealAmount = MaxHealthTrue;
 }
 if (HealItemType == 3)
 {
  MiscellaneousVars[165] = MiscellaneousVars[22] * 2; // 200%
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[165] = MiscellaneousVars[165] * 5 / 3;
  if (MiscellaneousVars[21] < MiscellaneousVars[164]) MiscellaneousVars[21] += MiscellaneousVars[165]; 
  if (MiscellaneousVars[21] >= MiscellaneousVars[164]) MiscellaneousVars[21] = MiscellaneousVars[164]; 
 }
 // Berserk Pack (Stamina Effect)
 if (CurrentHP <= MaxHealthTrue)
 {
  CurrentHP += HealAmount;
  if (CurrentHP > MaxHealthTrue) CurrentHP = MaxHealthTrue;
  SetActorProperty(1001,APROP_HEALTH,CurrentHP);
 }
}

// Debugging for Printing Armor Amounts on Screen
script "PrintArmorValues" (void)
{
 int I1, I2, Z1, Z2, C1, C2;

 Z1 = CheckInventory("Armor");
 Print(s:"BasicArmor: ",d:Z1);
 Z1 = CheckInventory("GreenArmor");
 Print(s:"GreenArmor: ",d:Z1);
 Z1 = CheckInventory("BlueArmor");
 Print(s:"BlueArmor: ",d:Z1);
 Z1 = CheckInventory("StoneSkin");
 Print(s:"StoneSkin: ",d:Z1);
 Z1 = CheckInventory("StoneSkinGA");
 Print(s:"StoneSkinGA: ",d:Z1);
 Z1 = CheckInventory("DiamondSkin");
 Print(s:"DiamondSkin: ",d:Z1);

 Z1 = CheckInventory("DiamondSkinGA");
 Print(s:"DiamondSkinGA: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDS");
 Print(s:"ArmorBonusDS: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSGreen");
 Print(s:"ArmorBonusDSGreen: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSBlue");
 Print(s:"ArmorBonusDSBlue: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSStone1");
 Print(s:"ArmorBonusDSStone1: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSStone2");
 Print(s:"ArmorBonusDSStone2: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSDiamond1");
 Print(s:"ArmorBonusDSDiamond1: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSDiamond2");
 Print(s:"ArmorBonusDSDiamond2: ",d:Z1);

/*
 Z1 = CheckInventory("SpiritualExoskin");
 Print(s:"SpiritualExoskin: ",d:Z1);
 Z1 = CheckInventory("GreaterSpiritualExoskin");
 Print(s:"GreaterSpiritualExoskin: ",d:Z1);
 Z1 = CheckInventory("PerfectedSpiritualExoskin");
 Print(s:"PerfectedSpiritualExoskin: ",d:Z1);
*/
}

// Emulates Armor Bonuses for all four (six?) types of armor in DVI-DS. [Applies Only to Deggaris and Illucia]
script "EmulateGiveArmorBonus" (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;

 if (CharacterClass != 2) // Stops Flora from getting armor benefits and sets the item's Args[3] to 1 to make the item fail to pickup
 {
  If (C5 <= 0) C5 = 1;

  // Saves original raw Armor Value
  Z1 = CheckActorInventory(1001,"Armor");

  // Clears Armor Types
  Z2 = CheckActorInventory(1001,"Armor"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDS"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSGreen"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSBlue"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSStone1"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSStone2"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSDiamond1"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSDiamond2"); TakeActorInventory(1001,"Armor", Z2);
  // Flora and her Spiritual Exoskin spell have no Armor Bonuses
  // Flora and her Greater Spiritual Exoskin spell have no Armor Bonuses
  // Flora and her Perfected Spiritual Exoskin spell have no Armor Bonuses

  if (Z1 == 0) // No Armor
  {
   C1 = 1; // Base Increase to Armor and make it Green class
   C1 = C1 * C5;
   Z1 += C1;
   GiveActorInventory(1001,"ArmorBonusDSGreen", Z1);
   CurrentArmorClass = 1;
   CurrentMaxArmor = 100;
   GiveActorInventory(1001,"DSGreenArmorClass", 1);
   TakeActorInventory(1001,"DSNoArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
  }
  else // Have some kind of existing Armor
  {
   C1 = CurrentArmorClass; // Base Increase to Armor and make it Green class
   C1 = C1 * C5;
   Z1 += C1;
   C2 = Z1 / 100;
   C2 = C2 * C5;
   Z1 += C2;
   C2 = PlayerLevel / 5;
   C2 = C2 * C5;
   Z1 += C2;
   if (Z1 < 101)
   {
    if (CurrentArmorClass < 1) CurrentArmorClass = 1;
   }
   else
   {
    if (Z1 < 201)
    {
     if (CurrentArmorClass < 2) CurrentArmorClass = 2;
    }
    else
    {
     if (Z1 < 334)
     {
      if (CurrentArmorClass < 3) CurrentArmorClass = 3;
     }
     else
     {
      if (Z1 < 889)
      {
       if (CurrentArmorClass < 4) CurrentArmorClass = 4;
      }
      else
      {
       if (Z1 < 1333)
       {
        if (CurrentArmorClass < 5) CurrentArmorClass = 5;
       }
       else
       {
        if (CurrentArmorClass < 6) CurrentArmorClass = 6;
       }
      }
     }
    }
   }
 
   if (CurrentArmorClass == 0)
   {
    CurrentMaxArmor = 0;
    GiveActorInventory(1001,"DSNoArmorClass", 1);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 1)
   {
    GiveActorInventory(1001,"ArmorBonusDSGreen", Z1);
    CurrentMaxArmor = 100;
    GiveActorInventory(1001,"DSGreenArmorClass", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 2)
   {
    GiveActorInventory(1001,"ArmorBonusDSBlue", Z1);
    CurrentMaxArmor = 200;
    GiveActorInventory(1001,"DSBlueArmorClass", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 3)
   {
    GiveActorInventory(1001,"ArmorBonusDSStone1", Z1);
    CurrentMaxArmor = 333;
    GiveActorInventory(1001,"DSStoneArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 4)
   {
    GiveActorInventory(1001,"ArmorBonusDSDiamond1", Z1);
    CurrentMaxArmor = 888;
    GiveActorInventory(1001,"DSDiamondArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 5)
   {
    GiveActorInventory(1001,"ArmorBonusDSStone2", Z1);
    CurrentMaxArmor = 1332;
    GiveActorInventory(1001,"DSStoneArmorClass2", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass >= 6)
   {
    GiveActorInventory(1001,"ArmorBonusDSDiamond2", Z1);
    CurrentMaxArmor = 3552;
    GiveActorInventory(1001,"DSDiamondArmorClass2", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   }
  }
 }

}

// Checks Whether a Full Armor Item can be picked up or not
script "CheckArmorLevels" (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;

 if (CharacterClass == 2) // Stops Flora from getting armor benefits and sets the item's Args[4] to 0 to make the item fail to pickup
 {
  SetThingSpecial(0,0,0,0,0,0,0);
 }
 else
 {
  Z1 = CheckInventory("Armor");
  if (C5 == 1)
  {
   if (CurrentArmorClass <= 1)
   {
    if (Z1 < 100)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 2)
  {
   if (CurrentArmorClass <= 2)
   {
    if (Z1 < 200)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 3)
  {
   if (CurrentArmorClass <= 3)
   {
    if (Z1 < 333)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 4)
  {
   if (CurrentArmorClass <= 4)
   {
    if (Z1 < 888)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 5)
  {
   if (CurrentArmorClass <= 5)
   {
    if (Z1 < 1332)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 6)
  {
   if (CurrentArmorClass <= 6)
   {
    if (Z1 < 3552)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 }

}

// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
script "PickupArmorMain" (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;
 
 // Saves original raw Armor Value
 Z1 = CheckInventory("Armor");

 // Clears Armor Types
 Z2 = CheckInventory("Armor"); TakeInventory("Armor", Z2);
 Z2 = CheckInventory("ArmorBonusDS"); TakeInventory("ArmorBonusDS", Z2);

 Z2 = CheckInventory("ArmorBonusDSGreen"); TakeInventory("ArmorBonusDSGreen", Z2);
 Z2 = CheckInventory("ArmorBonusDSBlue"); TakeInventory("ArmorBonusDSBlue", Z2);
 Z2 = CheckInventory("ArmorBonusDSStone1"); TakeInventory("ArmorBonusDSStone1", Z2);
 Z2 = CheckInventory("ArmorBonusDSStone2"); TakeInventory("ArmorBonusDSStone2", Z2);
 Z2 = CheckInventory("ArmorBonusDSDiamond1"); TakeInventory("ArmorBonusDSDiamond1", Z2);
 Z2 = CheckInventory("ArmorBonusDSDiamond2"); TakeInventory("ArmorBonusDSDiamond2", Z2);

 if (C5 == 1 && CurrentArmorClass <= 1) { CurrentArmorClass = 1; C2 = 100; }
 if (C5 == 2 && CurrentArmorClass <= 2) { CurrentArmorClass = 2; C2 = 200; }
 if (C5 == 3 && CurrentArmorClass <= 3) { CurrentArmorClass = 3; C2 = 333; }
 if (C5 == 4 && CurrentArmorClass <= 4) { CurrentArmorClass = 4; C2 = 888; }
 if (C5 == 5 && CurrentArmorClass <= 5) { CurrentArmorClass = 5; C2 = 1332; }
 if (C5 == 6 && CurrentArmorClass <= 6) { CurrentArmorClass = 6; C2 = 3552; }

 if (CurrentArmorClass == 1)
 {
  GiveInventory("ArmorBonusDSGreen", C2);
  GiveInventory("DSGreenArmorClass", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 100;
 }
 if (CurrentArmorClass == 2)
 {
  GiveInventory("ArmorBonusDSBlue", C2);
  GiveInventory("DSBlueArmorClass", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 200;
 }
 if (CurrentArmorClass == 3)
 {
  GiveInventory("ArmorBonusDSStone1", C2);
  GiveInventory("DSStoneArmorClass1", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 333;
 }
 if (CurrentArmorClass == 4)
 {
  GiveInventory("ArmorBonusDSDiamond1", C2);
  GiveInventory("DSDiamondArmorClass1", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 888;
 }
 if (CurrentArmorClass == 5)
 {
  GiveInventory("ArmorBonusDSStone2", C2);
  GiveInventory("DSStoneArmorClass2", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 1332;
 }
 if (CurrentArmorClass == 6)
 {
  GiveInventory("ArmorBonusDSDiamond2", C2);
  GiveInventory("DSDiamondArmorClass2", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  CurrentMaxArmor = 3552;
 }
}

// ************************
// ** Check Player Stuff **
// ************************
script "CENTRALSCRIPTOFEVERYTHING" ENTER
{
 int G1, G2, G3, C1, C2, C3, C4, I1, I2, I3, H1;
 int Mas1;
 int BuddhaRNGVal, GodlyAvatarBuddhaAdd;
 int ArmorBits, Armor2Bits, Armor3Bits, LevelChecker, LevelChecker2, RuinousPtsNeeded, AmmoCheck, HellcoreCoolRatio, IronFeetChance, FearChance;
 int BaseSceptreEXP;
 int SceptreEXPRatio;
 int HealthRatio;
 int checkmeleeweapons;
 int staminaregenbase;
 int staminaregenfinal;
 int buttons;
 int haveruinousshield;
 int SpawnFixedX, SpawnFixedY, SpawnFixedZ, KilledMonsterFactor, Randomizer1;
 int MaxHealthLimit = MaxHealthTrue * 2;
 int FreezePlayer;
 int PerkFactor;

 if (GetActorProperty(1001,APROP_Health) <= 0) // Sets a special flag to check for a "pistol reset" like in resurgance
 {
  if (MiscellaneousVars[149] != 1) MiscellaneousVars[149] = 1;
  if (CheckActorInventory(1001,"Dedz") < 1) GiveActorInventory(1001,"Dedz", 1);
 }

 // Check for HUD type settings
 MiscellaneousVars[2000] = GetCVAR("dvds_newhud"); // 0 = Old HUD, 1 = DQH-ish Style
 if (MiscellaneousVars[2000] == 0) GiveActorInventory(1001,"DVDSOldHud",1); else TakeActorInventory(1001,"DVDSOldHud",9999); 

 MiscellaneousVars[197] = GetCVAR("dvds_aeonstartlvl");
 if (MiscellaneousVars[197] < 0) MiscellaneousVars[197] = 0;
 if (MiscellaneousVars[197] > 200) MiscellaneousVars[197] = 200;

 MiscellaneousVars[169] = GetCVar("dvds_mapdifficultyinflationOVERALL");
 if (MiscellaneousVars[169] < -50) MiscellaneousVars[169] = -50;
 if (MiscellaneousVars[169] > 50) MiscellaneousVars[169] = 50;

 MiscellaneousVars[52] = GetCVar("dvds_mapdifficultyinflationEXP");
 if (MiscellaneousVars[52] < -50) MiscellaneousVars[52] = -50;
 if (MiscellaneousVars[52] > 50) MiscellaneousVars[52] = 50;

 MiscellaneousVars[53] = GetCVar("dvds_mapdifficultyinflationStats");
 if (MiscellaneousVars[53] < -50) MiscellaneousVars[53] = -50;
 if (MiscellaneousVars[53] > 50) MiscellaneousVars[53] = 50;

 MiscellaneousVars[54] = GetCVar("dvds_mapdifficultyinflationSpawnStealth");
 if (MiscellaneousVars[54] < -50) MiscellaneousVars[54] = -50;
 if (MiscellaneousVars[54] > 50) MiscellaneousVars[54] = 50;

 MiscellaneousVars[86] = GetCVar("dvds_aeonpointmultiplier") + 1;
 MiscellaneousVars[87] = GetCVar("dvds_seedmultiplier") + 1;
 MiscellaneousVars[146] = GetCVar("dvds_lvlstatmultiplier") + 1;

 if (GetCVar("dvds_expmultiplier") > -1 && GetCVar("dvds_expmultiplier") < 20) MiscellaneousVars[90] = (GetCVar("dvds_expmultiplier") + 1) * 100;
 if (GetCVar("dvds_expmultiplier") > 19 && GetCVar("dvds_expmultiplier") < 39) MiscellaneousVars[90] = (GetCVar("dvds_expmultiplier") - 19) * 5;

 if (GetCVar("dvds_sceptreexpmultiplier") > -1 && GetCVar("dvds_sceptreexpmultiplier") < 20) MiscellaneousVars[88] = (GetCVar("dvds_sceptreexpmultiplier") + 1) * 100;
 if (GetCVar("dvds_sceptreexpmultiplier") > 19 && GetCVar("dvds_sceptreexpmultiplier") < 39) MiscellaneousVars[88] = (GetCVar("dvds_sceptreexpmultiplier") - 19) * 5;

 if (GetCVar("dvds_heatheatmultiplier") > -1 && GetCVar("dvds_heatheatmultiplier") < 20) MiscellaneousVars[130] = (GetCVar("dvds_heatheatmultiplier") + 1) * 100;
 if (GetCVar("dvds_heatheatmultiplier") > 19 && GetCVar("dvds_heatheatmultiplier") < 39) MiscellaneousVars[130] = (GetCVar("dvds_heatheatmultiplier") - 19) * 5;

 if (GetCVar("dvds_heatcoolmultiplier") > -1 && GetCVar("dvds_heatcoolmultiplier") < 20) MiscellaneousVars[131] = (GetCVar("dvds_heatcoolmultiplier") + 1) * 100;
 if (GetCVar("dvds_heatcoolmultiplier") > 19 && GetCVar("dvds_heatcoolmultiplier") < 39) MiscellaneousVars[131] = (GetCVar("dvds_heatcoolmultiplier") - 19) * 5;

 if (GetCVar("dvds_uncurserate") > -1 && GetCVar("dvds_uncurserate") < 20) MiscellaneousVars[89] = (GetCVar("dvds_uncurserate") + 1) * 100;
 if (GetCVar("dvds_uncurserate") > 19 && GetCVar("dvds_uncurserate") < 39) MiscellaneousVars[89] = (GetCVar("dvds_uncurserate") - 19) * 5;

 if (GetCVar("dvds_staminaregenmultiplier") > -1 && GetCVar("dvds_staminaregenmultiplier") < 20) MiscellaneousVars[137] = (GetCVar("dvds_staminaregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_staminaregenmultiplier") > 19 && GetCVar("dvds_staminaregenmultiplier") < 39) MiscellaneousVars[137] = (GetCVar("dvds_staminaregenmultiplier") - 19) * 5;

 if (GetCVar("dvds_healthregenmultiplier") > -1 && GetCVar("dvds_healthregenmultiplier") < 20) MiscellaneousVars[138] = (GetCVar("dvds_healthregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_healthregenmultiplier") > 19 && GetCVar("dvds_healthregenmultiplier") < 39) MiscellaneousVars[138] = (GetCVar("dvds_healthregenmultiplier") - 19) * 5;

 if (GetCVar("dvds_manaregenmultiplier") > -1 && GetCVar("dvds_manaregenmultiplier") < 20) MiscellaneousVars[139] = (GetCVar("dvds_manaregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_manaregenmultiplier") > 19 && GetCVar("dvds_manaregenmultiplier") < 39) MiscellaneousVars[139] = (GetCVar("dvds_manaregenmultiplier") - 19) * 5;

 if (GetCVar("dvds_manaregenratemultiplier") > -1 && GetCVar("dvds_manaregenratemultiplier") < 20) MiscellaneousVars[213] = (GetCVar("dvds_manaregenratemultiplier") + 1) * 100;
 if (GetCVar("dvds_manaregenratemultiplier") > 19 && GetCVar("dvds_manaregenratemultiplier") < 39) MiscellaneousVars[213] = (GetCVar("dvds_manaregenratemultiplier") - 19) * 5;

 if (GetCVar("dvds_manacostgmultiplier") > -1 && GetCVar("dvds_manacostgmultiplier") < 20) MiscellaneousVars[145] = (GetCVar("dvds_manacostgmultiplier") + 1) * 100;
 if (GetCVar("dvds_manacostgmultiplier") > 19 && GetCVar("dvds_manacostgmultiplier") < 39) MiscellaneousVars[145] = (GetCVar("dvds_manacostgmultiplier") - 19) * 5;

 if (GetCVar("dvds_starthpmanafactor") > -1 && GetCVar("dvds_starthpmanafactor") < 20) MiscellaneousVars[147] = (GetCVar("dvds_starthpmanafactor") + 1) * 100;
 if (GetCVar("dvds_starthpmanafactor") > 19 && GetCVar("dvds_starthpmanafactor") < 39) MiscellaneousVars[147] = (GetCVar("dvds_starthpmanafactor") - 19) * 5;

 if (GetCVar("dvds_startotherstatsfactor") > -1 && GetCVar("dvds_startotherstatsfactor") < 20) MiscellaneousVars[148] = (GetCVar("dvds_startotherstatsfactor") + 1) * 100;
 if (GetCVar("dvds_startotherstatsfactor") > 19 && GetCVar("dvds_startotherstatsfactor") < 39) MiscellaneousVars[148] = (GetCVar("dvds_startotherstatsfactor") - 19) * 5;

 if (GetCVar("dvds_expcombotimermultiplier") > -1 && GetCVar("dvds_expcombotimermultiplier") < 20) MiscellaneousVars[161] = (GetCVar("dvds_expcombotimermultiplier") + 1) * 100;
 if (GetCVar("dvds_expcombotimermultiplier") > 19 && GetCVar("dvds_expcombotimermultiplier") < 39) MiscellaneousVars[161] = (GetCVar("dvds_expcombotimermultiplier") - 19) * 5;

 if (GetCVar("dvds_expcombobasemultiplier") > -1 && GetCVar("dvds_expcombobasemultiplier") < 20) MiscellaneousVars[162] = (GetCVar("dvds_expcombobasemultiplier") + 1) * 100;
 if (GetCVar("dvds_expcombobasemultiplier") > 19 && GetCVar("dvds_expcombobasemultiplier") < 39) MiscellaneousVars[162] = (GetCVar("dvds_expcombobasemultiplier") - 19) * 5;

 if (GetCVar("dvds_tension_chargemultiplier") > -1 && GetCVar("dvds_tension_chargemultiplier") < 20) MiscellaneousVars[187] = (GetCVar("dvds_tension_chargemultiplier") + 1) * 100;
 if (GetCVar("dvds_tension_chargemultiplier") > 19 && GetCVar("dvds_tension_chargemultiplier") < 39) MiscellaneousVars[187] = (GetCVar("dvds_tension_chargemultiplier") - 19) * 5;

 if (GetCVar("dvds_tension_countdownmultiplier") > -1 && GetCVar("dvds_tension_countdownmultiplier") < 20) MiscellaneousVars[191] = (GetCVar("dvds_tension_countdownmultiplier") + 1) * 100;
 if (GetCVar("dvds_tension_countdownmultiplier") > 19 && GetCVar("dvds_tension_countdownmultiplier") < 39) MiscellaneousVars[191] = (GetCVar("dvds_tension_countdownmultiplier") - 19) * 5;

 if (GetCVar("dvds_tension_cooldownmultiplier") > -1 && GetCVar("dvds_tension_cooldownmultiplier") < 20) MiscellaneousVars[192] = (GetCVar("dvds_tension_cooldownmultiplier") + 1) * 100;
 if (GetCVar("dvds_tension_cooldownmultiplier") > 19 && GetCVar("dvds_tension_cooldownmultiplier") < 39) MiscellaneousVars[192] = (GetCVar("dvds_tension_cooldownmultiplier") - 19) * 5;

 if (GetCVar("dvds_tensionspeed") <= 0 ) MiscellaneousVars[193] = 1;
 if (GetCVar("dvds_tensionspeed") == 1 ) MiscellaneousVars[193] = 2;
 if (GetCVar("dvds_tensionspeed") == 2 ) MiscellaneousVars[193] = 4;
 if (GetCVar("dvds_tensionspeed") == 3 ) MiscellaneousVars[193] = 8;
 if (GetCVar("dvds_tensionspeed") >= 4 ) MiscellaneousVars[193] = 16;

 // Print(d:MiscellaneousVars[86],s:"\n",d:MiscellaneousVars[87],s:"\n",d:MiscellaneousVars[88],s:"\n",d:MiscellaneousVars[89],s:"\n",d:MiscellaneousVars[90],s:"\n",d:MiscellaneousVars[130],s:"\n",d:MiscellaneousVars[131],s:"\n",d:MiscellaneousVars[137],s:"\n",d:MiscellaneousVars[138],s:"\n",d:MiscellaneousVars[139]);

 if (ClassCheck == 1) // Will run the check only once at the beginning of a new game
 {
  GiveActorInventory(1001,"GreaterVimstone",1);  TakeActorInventory(1001,"GreaterVimstone",1);
  GiveActorInventory(1001,"LesserVimstone",1);  TakeActorInventory(1001,"LesserVimstone",1);
  GiveActorInventory(1001,"MercuryBandana",1);  TakeActorInventory(1001,"MercuryBandana",1);
  GiveActorInventory(1001,"PaxaPunch",1);  TakeActorInventory(1001,"PaxaPunch",1);
  GiveActorInventory(1001,"YggdrasilDew",1);  TakeActorInventory(1001,"YggdrasilDew",1);
  GiveActorInventory(1001,"SpecialMedicine",1);  TakeActorInventory(1001,"SpecialMedicine",1);
  GiveActorInventory(1001,"StrongMedicine",1);  TakeActorInventory(1001,"StrongMedicine",1);
  GiveActorInventory(1001,"MedicinalHerb",1);  TakeActorInventory(1001,"MedicinalHerb",1);

  //PrintBold(d:ClassCheck);
  // Checks inital HP value of the player in order to assess the right class #. If you want to try to define extra characters, give the character's SpawnHealth a value that doesn't match below.
  if(GetActorProperty(1001,APROP_Health) == 103) CharacterClass = 0; // 0 is Deggaris
  else if(GetActorProperty(1001,APROP_Health) == 81) CharacterClass = 1; // 1 is Illucia
  else if(GetActorProperty(1001,APROP_Health) == 73) CharacterClass = 2; // 2 is Flora
  else { CharacterClass = -1; MaxHealthTrue = 100; } // Unknown Error! :P

  if (CharacterClass == 0) // Deggaris
  {
   // HP Range
   MaxHealthTrue = 103 + random(-4,12) * random(90,110) / 100; // 90-126 HP [103 Base]

   // MP Range
   MaxMana = (20 + random(-18,8) * (random(100,116) / 100) + random(0,4)); // 2-36 MP [20 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Deggaris is the lowest ranking in Base Survivability)
   MiscellaneousVars[0] = 32 + random(-16,16); // [1.6%-4.8%]

   // Seed Stat Randomization
   MiscellaneousVars[31] = random(1,3); // Agility
   MiscellaneousVars[32] = random(4,6); // Defense
   MiscellaneousVars[33] = random(2,4); // Deftness
   MiscellaneousVars[34] = random(1,3); // Sorcery
   MiscellaneousVars[35] = random(5,7); // Strength
   MiscellaneousVars[36] = random(2,4); // Therapeusis

   if (GameSkill() == SKILL_VERY_EASY) // 33-57
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 200);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_EASY) // 21-45
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 150);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_NORMAL) // 15-45
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis

    if (random(0,1) == 0)
    {
     GiveInventory("ArmorBonusDSBlue", 100);
     CurrentMaxArmor = 200;
     CurrentArmorClass = 2;
     GiveInventory("DSBlueArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     GiveInventory("ArmorBonusDSGreen", 100);
     CurrentMaxArmor = 100;
     CurrentArmorClass = 1;
     GiveInventory("DSGreenArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
   }
   if (GameSkill() == SKILL_HARD) // 15-39
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 50);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_VERY_HARD) // 9-33
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 25);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
  }
  else
  if (CharacterClass == 1) // Illucia
  {
   // HP Range
   MaxHealthTrue = 81 + random(-8,8) * random(90,110) / 100; // 66-97 HP [81 Base]

   // MP Range
   MaxMana = (26 + random(-13,13) * (random(116,132) / 100) + random(3,7)); // 18-58 MP [26 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Illucia is the highest ranking in Base Survivability)
   MiscellaneousVars[0] = 46 + random(-16,16); // [3.0%-6.2%]

   // Seed Stat Ranomization
   MiscellaneousVars[31] = random(3,5); // Agility
   MiscellaneousVars[32] = random(2,4); // Defense
   MiscellaneousVars[33] = random(2,4); // Deftness
   MiscellaneousVars[34] = random(3,5); // Sorcery
   MiscellaneousVars[35] = random(3,5); // Strength
   MiscellaneousVars[36] = random(2,4); // Therapeusis

   if (GameSkill() == SKILL_VERY_EASY) // 33-57
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 200);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_EASY) // 21-45
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 150);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_NORMAL) // 15-45
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis

    if (random(0,1) == 0)
    {
     GiveInventory("ArmorBonusDSBlue", 100);
     CurrentMaxArmor = 200;
     CurrentArmorClass = 2;
     GiveInventory("DSBlueArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     GiveInventory("ArmorBonusDSGreen", 100);
     CurrentMaxArmor = 100;
     CurrentArmorClass = 1;
     GiveInventory("DSGreenArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
   }
   if (GameSkill() == SKILL_HARD) // 15-39
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 50);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_VERY_HARD) // 9-33
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 25);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }

  }
  else
  if (CharacterClass == 2) // Flora
  {
   // HP Range
   MaxHealthTrue = 73 + random(-12,4) * random(90,110) / 100; // 55-84 HP [73 Base]

   // MP Range
   MaxMana = (35 + random(-8,18) * (random(132,164) / 100) + random(6,10)); // 35-79 MP [35 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Flora is the middle ranking in Base Survivability)
   MiscellaneousVars[0] = 39 + random(-16,16); // [2.3%-5.5%]

   // Seed Stat Ranomization
   MiscellaneousVars[31] = random(5,7); // Agility
   MiscellaneousVars[32] = random(1,3); // Defense
   MiscellaneousVars[33] = random(4,6); // Deftness
   MiscellaneousVars[34] = random(4,6); // Sorcery
   MiscellaneousVars[35] = random(1,3); // Strength
   MiscellaneousVars[36] = random(3,5); // Therapeusis
   BaseSceptreEXP = 312;

   if (GameSkill() == SKILL_VERY_EASY) // 37-60
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis
    BaseSceptreEXP = 240;
   }
   if (GameSkill() == SKILL_EASY) // 25-48
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis
    BaseSceptreEXP = 288;
   }
   if (GameSkill() == SKILL_NORMAL) // 19-48
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis
    BaseSceptreEXP = 312;
   }
   if (GameSkill() == SKILL_HARD) // 19-42
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis
    BaseSceptreEXP = 336;
   }
   if (GameSkill() == SKILL_VERY_HARD) // 13-36
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis
    BaseSceptreEXP = 384;
   }

   // Ensures Flora will not start off with armor. :P
   CurrentMaxArmor = 0;
   CurrentArmorClass = 0;
   TakeActorInventory(1001,"Armor", 999999);
   TakeActorInventory(1001,"BasicArmor", 999999);
   TakeActorInventory(1001,"HexenArmor", 999999);
   GiveActorInventory(1001,"DSNoArmorClass", 1);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);

   MiscellaneousVars[140] = GetCVar("dvds_sceptrestartlvl");
   if (MiscellaneousVars[140] < 0) MiscellaneousVars[140] = 0;
   if (MiscellaneousVars[140] > 16) MiscellaneousVars[140] = 16;
   while (MiscellaneousVars[140] > 0)
   {
    SceptreEXPRatio += MiscellaneousVars[140];
    MiscellaneousVars[140] -= 1;
   }   
   SceptreLevelEXP = BaseSceptreEXP * SceptreEXPRatio;

   if (GetCVar("dvds_startsceptre") == 1)
   {
    GiveActorInventory(1001,"SceptreOfEmpyrea",1);
    SetActivator(1001);
    SetWeapon("SceptreOfEmpyrea");
    SetActivator(0);
   }
   else
   {
    if (ModType != 0)
    {
     GiveActorInventory(1001,"SceptreOfEmpyrea",1);
     SetActivator(1001);
     SetWeapon("SceptreOfEmpyrea");
     SetActivator(0);
    }
   }

  }

  MiscellaneousVars[31] = MiscellaneousVars[31] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor
  MiscellaneousVars[32] = MiscellaneousVars[32] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor
  MiscellaneousVars[33] = MiscellaneousVars[33] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor
  MiscellaneousVars[34] = MiscellaneousVars[34] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor
  MiscellaneousVars[35] = MiscellaneousVars[35] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor
  MiscellaneousVars[36] = MiscellaneousVars[36] * MiscellaneousVars[148] / 100; // Check Start Other Stats Factor

  MaxMana = MaxMana * MiscellaneousVars[147] / 100; // Check Start Mana Factor
  if (MaxMana < 1) MaxMana = 1;
  CurrentMana = MaxMana;

  if (CharacterClass == 2) // Deggaris and Illucia have an extra randomization to their HP, while Flora has a slightly more varied randomization which works more to her favor on easier skill levels.
  {
   // Flora: 55-84 HP
   if (GameSkill() == SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random(120,140) / 100;	// 66-118 HP [spread of 52]
   if (GameSkill() == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random(110,130) / 100;		// 60-109 HP [spread of 49]
   if (GameSkill() == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random(100,120) / 100;		// 55-101 HP [spread of 46]
   if (GameSkill() == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random(90,110) / 100; 		// 49-92 HP [spread of 43]
   if (GameSkill() == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random(80,100) / 100;	// 44-84 HP [spread of 40]
  }
  else
  {
   // Deg: 90-126 HP
   // Illu: 66-97 HP
   if (GameSkill() == SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random(100,120) / 100;	// Deg: 90-151 HP [spread of 61], Illu: 66-116 HP [spread of 50]
   if (GameSkill() == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random(95,115) / 100;			// Deg: 85-145 HP [spread of 60], Illu: 62-111 HP [spread of 49]
   if (GameSkill() == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random(90,110) / 100;		// Deg: 81-138 HP [spread of 57], Illu: 59-106 HP [spread of 47]
   if (GameSkill() == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random(85,105) / 100; 		// Deg: 76-132 HP [spread of 56], Illu: 56-102 HP [spread of 46]
   if (GameSkill() == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random(80,100) / 100; 	// Deg: 72-126 HP [spread of 54], Illu: 52-97 HP [spread of 45]
  }
  MaxHealthTrue = MaxHealthTrue * MiscellaneousVars[147] / 100; // Check Start HP Factor
  if (MaxHealthTrue < 1) MaxHealthTrue = 1;
  SetActorProperty(1001,APROP_Health,MaxHealthTrue);
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
  MiscellaneousVars[241] = MaxHealthTrue;
 }
 if (ClassCheck == 5) // Will run the check only once at the beginning of a new game
 {
  MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
 }
 if (ClassCheck < 6)
 {
  if (MiscellaneousVars[31] < 0) MiscellaneousVars[31] = 0;
  if (MiscellaneousVars[32] < 0) MiscellaneousVars[32] = 0;
  if (MiscellaneousVars[33] < 0) MiscellaneousVars[33] = 0;
  if (MiscellaneousVars[34] < 0) MiscellaneousVars[34] = 0;
  if (MiscellaneousVars[35] < 0) MiscellaneousVars[35] = 0;
  if (MiscellaneousVars[36] < 0) MiscellaneousVars[36] = 0;

  MiscellaneousVars[21] = MiscellaneousVars[22];
  ClassCheck += 1; // Class Check is done six times for randomization purposes.
 }

 if (MiscellaneousVars[171] > 0) MiscellaneousVars[171] --; // Ticks down the "Level Up" and "Stat Up" indicators on the new HUD after a level up occurs
 if (MiscellaneousVars[2031] > 0) MiscellaneousVars[2031] --; // Ticks down the "MaxHP" gain timer
 if (MiscellaneousVars[2032] > 0) MiscellaneousVars[2032] --; // Ticks down the "MaxMP" gain timer
 if (MiscellaneousVars[2033] > 0) MiscellaneousVars[2033] --; // Ticks down the "AeonPts" gain timer
 if (MiscellaneousVars[2034] > 0) MiscellaneousVars[2034] --; // Ticks down the "Strength" gain timer
 if (MiscellaneousVars[2035] > 0) MiscellaneousVars[2035] --; // Ticks down the "Defense" gain timer
 if (MiscellaneousVars[2036] > 0) MiscellaneousVars[2036] --; // Ticks down the "Sorcery" gain timer
 if (MiscellaneousVars[2037] > 0) MiscellaneousVars[2037] --; // Ticks down the "Therapeusis" gain timer
 if (MiscellaneousVars[2038] > 0) MiscellaneousVars[2038] --; // Ticks down the "Agility" gain timer
 if (MiscellaneousVars[2039] > 0) MiscellaneousVars[2039] --; // Ticks down the "Deftness" gain timer
  // [222] # of TOTAL Max HP gained during multiple level ups [for displays]
  // [223] # of TOTAL Max MP gained during multiple level ups [for displays]
  // [224] # of TOTAL Aeon Points gained during multiple level ups [for displays]
  // [225] # of TOTAL Agility Points gained during multiple level ups [for displays]
  // [226] # of TOTAL Defense Points gained during multiple level ups [for displays]
  // [227] # of TOTAL Deftness Points gained during multiple level ups [for displays]
  // [228] # of TOTAL Sorcery Points gained during multiple level ups [for displays]
  // [229] # of TOTAL Strength Points gained during multiple level ups [for displays]
  // [230] # of TOTAL Therapeusis Points gained during multiple level ups [for displays]
  if (MiscellaneousVars[2031] <= 0) MiscellaneousVars[222] = 0;
  if (MiscellaneousVars[2032] <= 0) MiscellaneousVars[223] = 0;
  if (MiscellaneousVars[2033] <= 0) MiscellaneousVars[224] = 0;
  if (MiscellaneousVars[2034] <= 0) MiscellaneousVars[225] = 0;
  if (MiscellaneousVars[2035] <= 0) MiscellaneousVars[226] = 0;
  if (MiscellaneousVars[2036] <= 0) MiscellaneousVars[227] = 0;
  if (MiscellaneousVars[2037] <= 0) MiscellaneousVars[228] = 0;
  if (MiscellaneousVars[2038] <= 0) MiscellaneousVars[229] = 0;
  if (MiscellaneousVars[2039] <= 0) MiscellaneousVars[230] = 0;

 FreezePlayer = 0;
 if (MiscellaneousVars[2500] == 1) FreezePlayer += 1; // Freezes the player's actions if in the menu...
 if (PowerupTimer[20] > 0) FreezePlayer += 1; // ...or put to sleep.
 if (FreezePlayer > 0)
 {
  SetPlayerProperty(1,1,PROP_TOTALLYFROZEN);
 }
 else
 {
  SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
 }

 // Check for Sceptre Abilities
 if (CharacterClass == 2 && PlayerLevel >= 8 && SceptreActualLevel >= 2)
 {
  MiscellaneousVars[244] = 1;
 }
 else
 {
  MiscellaneousVars[244] = 0;
 }

 int TempMaxHealth = MaxHealthTrue;
 int TempMaxMana = MaxMana;
 int TempPerkFactor = 0;
 int TempCombinedLevels = 0;
 int TempStartValue;
 int TempEndValue;

 //****************
 //*HP Perk Checks*
 //****************
 // "LifeUp [EX]" perks
 TempCombinedLevels = MiscellaneousVars[10001] + MiscellaneousVars[10002];
 // [9901] = LifeUp Perk ComboLevel Check
 // [9902] = LifeUp Perk PerkFactor
 // [9903] = LifeUp Perk Base PerkFactor
if (MiscellaneousVars[9901] != TempCombinedLevels)
 {
  if (MiscellaneousVars[9901] != 0)
  {
   MiscellaneousVars[9903] = MiscellaneousVars[9902];
   TempStartValue = MaxHealthTrue;
   TempEndValue = MaxHealthTrue;
   TempEndValue = TempEndValue * ((1000000 / MiscellaneousVars[9902])) / 1000;
   TempEndValue += random(0,1);
   //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9902],s:") / ",d:TempEndValue);
  }
  else
  {
   MiscellaneousVars[9903] = 1000;
   TempStartValue = MaxHealthTrue;
   TempEndValue = MaxHealthTrue;
  }
  MiscellaneousVars[9902] = (MiscellaneousVars[10001] * 50) + (MiscellaneousVars[10002] * 125) + 1000;

  TempStartValue = TempEndValue;
  TempEndValue = TempEndValue * MiscellaneousVars[9902] / 1000;
  TempEndValue += random(0,1);
  //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9902],s:") / ",d:TempEndValue);

  MaxHealthTrue = TempEndValue;
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);

  MiscellaneousVars[9901] = TempCombinedLevels;
 }

 // [STRIFE-Compatibility] Stamina Upgrades [HP side]
 TempCombinedLevels = MiscellaneousVars[317];
 // [9907] = Stamina Upgrade [HP] ComboLevel Check
 // [9908] = Stamina Upgrade [HP] PerkFactor
 // [9909] = Stamina Upgrade [HP] Base PerkFactor
if (MiscellaneousVars[9907] != TempCombinedLevels)
 {
  if (MiscellaneousVars[9907] != 0)
  {
   MiscellaneousVars[9909] = MiscellaneousVars[9908];
   TempStartValue = MaxHealthTrue;
   TempEndValue = MaxHealthTrue;
   TempEndValue = TempEndValue * ((1000000 / MiscellaneousVars[9908])) / 1000;
   TempEndValue += random(0,1);
   //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9908],s:") / ",d:TempEndValue);
  }
  else
  {
   MiscellaneousVars[9909] = 1000;
   TempStartValue = MaxHealthTrue;
   TempEndValue = MaxHealthTrue;
  }
  MiscellaneousVars[9908] = (MiscellaneousVars[317] * 125) + 1000;

  TempStartValue = TempEndValue;
  TempEndValue = TempEndValue * MiscellaneousVars[9908] / 1000;
  TempEndValue += random(0,1);
  //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9908],s:") / ",d:TempEndValue);

  MaxHealthTrue = TempEndValue;
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);

  MiscellaneousVars[9907] = TempCombinedLevels;
 }

 //****************
 //*MP Perk Checks*
 //****************
 // "MagiUp [EX]" perks
 TempCombinedLevels = MiscellaneousVars[10003] + MiscellaneousVars[10004];
 // [9904] = MagiUp Perk ComboLevel Check
 // [9905] = MagiUp Perk PerkFactor
 // [9906] = MagiUp Perk Base PerkFactor
 if (MiscellaneousVars[9904] != TempCombinedLevels)
 {
  if (MiscellaneousVars[9904] != 0)
  {
   MiscellaneousVars[9906] = MiscellaneousVars[9905];
   TempStartValue = MaxMana;
   TempEndValue = MaxMana;
   TempEndValue = TempEndValue * ((1000000 / MiscellaneousVars[9905])) / 1000;
   TempEndValue += random(0,1);
   //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9905],s:") / ",d:TempEndValue);
  }
  else
  {
   MiscellaneousVars[9906] = 1000;
   TempStartValue = MaxMana;
   TempEndValue = MaxMana;
  }
  MiscellaneousVars[9905] = (MiscellaneousVars[10003] * 50) + (MiscellaneousVars[10004] * 125) + 1000;

  TempStartValue = TempEndValue;
  TempEndValue = TempEndValue * MiscellaneousVars[9905] / 1000;
  TempEndValue += random(0,1);
  //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9905],s:") / ",d:TempEndValue);

  MaxMana = TempEndValue;

  MiscellaneousVars[9904] = TempCombinedLevels;
 }

 // [STRIFE-Compatibility] Stamina Upgrades [MP side]
 TempCombinedLevels = MiscellaneousVars[317];
 // [9910] = Stamina Upgrade [MP] ComboLevel Check
 // [9911] = Stamina Upgrade [MP] PerkFactor
 // [9912] = Stamina Upgrade [MP] Base PerkFactor
 if (MiscellaneousVars[9910] != TempCombinedLevels)
 {
  if (MiscellaneousVars[9910] != 0)
  {
   MiscellaneousVars[9912] = MiscellaneousVars[9911];
   TempStartValue = MaxMana;
   TempEndValue = MaxMana;
   TempEndValue = TempEndValue * ((1000000 / MiscellaneousVars[9911])) / 1000;
   TempEndValue += random(0,1);
   //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9911],s:") / ",d:TempEndValue);
  }
  else
  {
   MiscellaneousVars[9912] = 1000;
   TempStartValue = MaxMana;
   TempEndValue = MaxMana;
  }
  MiscellaneousVars[9911] = (MiscellaneousVars[317] * 125) + 1000;

  TempStartValue = TempEndValue;
  TempEndValue = TempEndValue * MiscellaneousVars[9911] / 1000;
  TempEndValue += random(0,1);
  //PrintBold(d:TempStartValue,s:" / (",d:MiscellaneousVars[9911],s:") / ",d:TempEndValue);

  MaxMana = TempEndValue;

  MiscellaneousVars[9910] = TempCombinedLevels;
 }


/*
 int TempBitField = 1.0;
 if (MiscellaneousVars[10001] >= 1) TempBitField -= 0.025;
 if (MiscellaneousVars[10001] >= 2) TempBitField -= 0.025;
 if (MiscellaneousVars[10001] >= 3) TempBitField -= 0.025;
 if (MiscellaneousVars[10001] >= 4) TempBitField -= 0.025;
 if (MiscellaneousVars[10001] >= 5) TempBitField -= 0.025;
 if (MiscellaneousVars[10002] >= 1) TempBitField -= 0.0625;
 if (MiscellaneousVars[10002] >= 2) TempBitField -= 0.0625;
 //PrintBold(f:TempBitField);
 SetActorProperty(1001,APROP_DAMAGEFACTOR,TempBitField);
*/

 int TimerMulti;
 int TimerPart1;
 // Check EXP Kill Combo Timer
 if (MiscellaneousVars[157] > 0)
 {
  TimerMulti = 20 * MiscellaneousVars[161] / 100;
  TimerPart1 = 100;
  if (CharacterClass == 2)
  {
   if (CheckActorInventory(1001,"RuinousShield") > 0) TimerPart1 += 78;
   else
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") > 0) TimerPart1 -= 10; // Item 1
    if (CheckActorInventory(1001,"CloakofEvasion") > 0) TimerPart1 -= 5; // Item 5
    if (CheckActorInventory(1001,"DivineShield") > 0) TimerPart1 -= 15; // Item 8
   }
  }
  else
  {
   if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) TimerPart1 -= 5;
   if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) TimerPart1 -= 10;
   if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) TimerPart1 -= 15;
   if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) TimerPart1 -= 20;
   if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) TimerPart1 -= 25;
   if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) TimerPart1 -= 30;
  }
  if (CheckActorInventory(1001,"TheOneRing") > 0) TimerPart1 -= 20;
  if (TimerPart1 < 50) TimerPart1 = 50;
  TimerMulti = (TimerMulti * TimerPart1) / 100;

  if (PowerupTimer[5] > 0) TimerMulti = TimerMulti / 15;
  if (TimerMulti < 1) TimerMulti = 1;
  MiscellaneousVars[157] -= TimerMulti;
 }
 if (MiscellaneousVars[157] <= 0)
 {
  MiscellaneousVars[158] = 0; // Set kill counter back to 0
  MiscellaneousVars[160] = 0; // Set EXP Combo Amount back to 0
 }

 int DivineRegenTimer;
 if (PowerupTimer[7] > 0)
 {
  DivineRegenTimer -= 1;
  if (DivineRegenTimer < 1)
  {
   DivineRegenTimer = random(30,35);
   C3 = MaxHealthLimit / random(67,100);
   if (CharacterClass == 0 && CheckActorInventory(1001, "SauronGauntlets") > 0) C3 = C3 * 17 / 16;
   if (CharacterClass == 1 && CheckActorInventory(1001, "SauronGauntletsIllucia") > 0) C3 = C3 * 17 / 16;
   if (CheckActorInventory(1001, "TheOneRing") > 0) C3 = C3 * 9 / 8;
   I3 = GetActorProperty(1001,APROP_HEALTH);
   if (I3 > 0 && I3 < MaxHealthLimit)
   {
    I3 += C3;
    if (I3 >= MaxHealthLimit) I3 = MaxHealthLimit;
    SetActorProperty(1001,APROP_HEALTH,I3);
    MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
    MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
   }
  }
 }

 int DoveRegenTimer;
 DoveRegenTimer -= 1;
 if (DoveRegenTimer < 1)
 {
  DoveRegenTimer = random(27,32);
  if (CharacterClass == 2 && CheckActorInventory(1001,"DoveRibbon") > 0) // Flora
  {
   C3 = PlayerLevel / 50 + 1;
   I3 = GetActorProperty(1001,APROP_HEALTH);
   if (I3 > 0 && I3 < MaxHealthLimit)
   {
    I3 += C3;
    if (I3 >= MaxHealthLimit) I3 = MaxHealthLimit;
    SetActorProperty(1001,APROP_HEALTH,I3);
    MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
    MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
   }
  }
 }



 //*******************************************************************************
 //*Attempting to Interpolate Health Values for the player to show damage values.*
 //*******************************************************************************
 int HealthDifferenceTimer;
 int ArmorResistance, ArmRes1, ArmRes2, ArmRes3;
 if (ClassCheck > 2)
 {
  if (HealthDifferenceTimer > 0)
  {
   MiscellaneousVars[241] = MiscellaneousVars[175];
   MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
   MiscellaneousVars[173] = MiscellaneousVars[175] - MiscellaneousVars[241];
   MiscellaneousVars[174] = MiscellaneousVars[173] * 100 / MaxHealthTrue;

   MiscellaneousVars[243] = MiscellaneousVars[238];
   MiscellaneousVars[238] = CurrentMana;
   MiscellaneousVars[236] = MiscellaneousVars[238] - MiscellaneousVars[243];
   MiscellaneousVars[237] = MiscellaneousVars[236] * 100 / MaxMana;

   if (CharacterClass != 2)
   {
    if (CurrentMaxArmor > 0)
    {
     MiscellaneousVars[242] = MiscellaneousVars[178];
     MiscellaneousVars[178] = CheckActorInventory(1001,"BasicArmor");
     MiscellaneousVars[176] = MiscellaneousVars[178] - MiscellaneousVars[242];
     MiscellaneousVars[177] = MiscellaneousVars[176] * 100 / CurrentMaxArmor;
    }
    else
    {
     MiscellaneousVars[242] = MiscellaneousVars[178];
     MiscellaneousVars[178] = CheckActorInventory(1001,"BasicArmor");
     MiscellaneousVars[176] = 0;
     MiscellaneousVars[177] = 0;
    }
   }

   ArmorResistance = 0;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") > 0) ArmorResistance += 30; // Item 1
    if (CheckActorInventory(1001,"PearlyCorset") > 0) ArmorResistance += 70; // Item 2
    if (CheckActorInventory(1001,"WaterFlyingDress") > 0) ArmorResistance += 80; // Item 3
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) ArmorResistance += 20; // Item 4
    if (CheckActorInventory(1001,"CloakofEvasion") > 0) ArmorResistance += 40; // Item 5
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) ArmorResistance += 50; // Item 6
    if (CheckActorInventory(1001,"KissaBra") > 0) ArmorResistance += 60; // Item 7
    if (CheckActorInventory(1001,"DivineShield") > 0) ArmorResistance += 160; // Item 8
    if (CheckActorInventory(1001,"BalrogRing") > 0) ArmorResistance += 20; // Item 9
    if (CheckActorInventory(1001,"DoveRibbon") > 0) ArmorResistance += 90; // Item 10
    if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) ArmorResistance += 50; // Item 11
   }
   else
   {
    if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) ArmorResistance += 350;
    if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) ArmorResistance += 525;
    if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) ArmorResistance += 708;
    if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) ArmorResistance += 937;
    if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) ArmorResistance += 875;
    if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) ArmorResistance += 987;
   }

   MiscellaneousVars[233] = ArmorResistance;
   SavePercent = ArmorResistance / 10;

   int PopUpXPlacement = random(-128,128) * 1.0;
   int PopUpYPlacement = random(-96,96) * 1.0;
   int PopupHoldDuration = 0.0;
   int PopupFadeOutDuration = 0.0;

   if (Timer() > 3)
   {
    PopupHoldDuration = 0.0;
    PopupFadeOutDuration = 0.0;
    // HP/Health Damage/Heal
    MiscellaneousVars[173] = MiscellaneousVars[173];
    MiscellaneousVars[174] = MiscellaneousVars[174];
    MiscellaneousVars[175] = MiscellaneousVars[175];
    if (MiscellaneousVars[173] != 0)
    {
      SetHudSize(640,480,0);
      if (MiscellaneousVars[2000] == 0)
      {
       SetFont("SmallFont");
       if (MiscellaneousVars[173] > 0) // Positive Value
       {
        if (MiscellaneousVars[174] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[174] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        //HudMessageBold(s:"+",d:MiscellaneousVars[173],s:" HP (+",d:MiscellaneousVars[174],s:"%)";0,1,cr_green,64.0,427.0,2.5);
        HudMessageBold(s:"+",d:MiscellaneousVars[173],s:" HP (+",d:MiscellaneousVars[174],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_green,320.0+PopUpXPlacement,240.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[173] < 0) // Negative Value
       {
        MiscellaneousVars[173] *= -1;
        MiscellaneousVars[174] *= -1;
        if (MiscellaneousVars[174] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[174] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        //HudMessageBold(s:"-",d:MiscellaneousVars[173],s:" HP (-",d:MiscellaneousVars[174],s:"%)";0,1,cr_red,64.0,427.0,2.5);
        if (MiscellaneousVars[175] <= 0) HudMessageBold(s:"FATAL!\n",s:"-",d:MiscellaneousVars[173],s:" HP (-",d:MiscellaneousVars[174],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_red,320.0+PopUpXPlacement,240.0+PopUpYPlacement,1.5+PopupHoldDuration,1.0+PopupFadeOutDuration,1.0);
        else HudMessageBold(s:"-",d:MiscellaneousVars[173],s:" HP (-",d:MiscellaneousVars[174],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_red,320.0+PopUpXPlacement,240.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
      }
    }

    PopupHoldDuration = 0.0;
    PopupFadeOutDuration = 0.0;
    // AP/Armor Damage/Heal
    if (CharacterClass != 2 && MiscellaneousVars[176] != 0)
    {
      SetHudSize(640,480,0);
      if (MiscellaneousVars[2000] == 0)
      {
       SetFont("SmallFont");
       if (MiscellaneousVars[176] > 0) // Positive Value
       {
        if (MiscellaneousVars[177] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[177] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        HudMessageBold(s:"+",d:MiscellaneousVars[176],s:" AP (+",d:MiscellaneousVars[177],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_lightblue,308.0+PopUpXPlacement,228.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[176] < 0) // Negative Value
       {
        MiscellaneousVars[176] *= -1;
        MiscellaneousVars[177] *= -1;
        if (MiscellaneousVars[177] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[177] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        if (MiscellaneousVars[178] <= 0) HudMessageBold(s:"\ctARMOR BREAK!\n",s:"-",d:MiscellaneousVars[176],s:" AP (-",d:MiscellaneousVars[177],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_purple,308.0+PopUpXPlacement,228.0+PopUpYPlacement,1.5+PopupHoldDuration,1.0+PopupFadeOutDuration,1.0);
        else HudMessageBold(s:"\ct-",d:MiscellaneousVars[176],s:" AP (-",d:MiscellaneousVars[177],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_purple,308.0+PopUpXPlacement,228.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
      }
    }

    PopupHoldDuration = 0.0;
    PopupFadeOutDuration = 0.0;
    // MP/Mana Damage/Heal
    if (MiscellaneousVars[236] != 0)
    {
      SetHudSize(640,480,0);
      if (MiscellaneousVars[2000] == 0)
      {
       SetFont("SmallFont");
       if (MiscellaneousVars[236] > 0) // Positive Value
       {
        if (MiscellaneousVars[237] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[237] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        HudMessageBold(s:"+",d:MiscellaneousVars[236],s:" MP (+",d:MiscellaneousVars[237],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_blue,332.0+PopUpXPlacement,252.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
       else
       if (MiscellaneousVars[236] < 0) // Negative Value
       {
        MiscellaneousVars[236] *= -1;
        MiscellaneousVars[237] *= -1;
        if (MiscellaneousVars[237] < 5) { PopupHoldDuration = -0.375; PopupFadeOutDuration = -0.25; }
        if (MiscellaneousVars[237] >= 30) SetFont("BigFont"); else SetFont("SmallFont");
        if (MiscellaneousVars[238] <= 0) HudMessageBold(s:"MANA DEPLETED!\n",s:"-",d:MiscellaneousVars[236],s:" MP (-",d:MiscellaneousVars[237],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,332.0+PopUpXPlacement,252.0+PopUpYPlacement,1.5+PopupHoldDuration,1.0+PopupFadeOutDuration,1.0);
        else HudMessageBold(s:"",d:MiscellaneousVars[236],s:" MP (-",d:MiscellaneousVars[237],s:"%)";HUDMSG_ALPHA|HUDMSG_FADEOUT,0,cr_brick,332.0+PopUpXPlacement,252.0+PopUpYPlacement,0.75+PopupHoldDuration,0.5+PopupFadeOutDuration,0.834);
       }
      }
    }

   }
  }
  HealthDifferenceTimer += 1;
 }

 int InterPolLowestHealth, InterPolStrength;
 InterPolLowestHealth = MaxHealthTrue * -1;
 InterPolStrength = MaxHealthTrue / 35; // 8 is the average
 if (InterPolStrength < 4) InterPolStrength = 4;

 //**************************************************************************************************************
 //*Flicker the Player when they survive a mortal hit (mercy invincibility) and perform actions related to perks*
 //**************************************************************************************************************

 // [194] Mercy Invincibility "Flag"
 // [195] Mercy Invincibility Timer
 // [196] Mercy Invincibility 'Modulus/Remainder'
 //MiscellaneousVars[241] = MiscellaneousVars[175];
 MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
 //PrintBold(d:MiscellaneousVars[241],s:" ",d:MiscellaneousVars[175]);
 if (MiscellaneousVars[175] == 1 && MiscellaneousVars[241] > 1 && GetCVar("dvds_survivemercyinvin") == 1)
 {
  MiscellaneousVars[194] = 1; // Turns on Mercy Invincibility Flag
  MiscellaneousVars[195] = 1210; // 1.5 seconds [51.5 tics * 20]

  // Check "Mortal Hit Survivability Psyche Up" Perk
  if (CharacterClass == 2) PerkFactor = 7500; else PerkFactor = 4000;
  if (random(1,10000) <= PerkFactor)
  {
   if (MiscellaneousVars[10037] == 1 && MiscellaneousVars[181] <= 1) ACS_NamedExecuteAlways("SetTensionLevel",0,1,0);
   if (MiscellaneousVars[10037] == 2 && MiscellaneousVars[181] <= 2) ACS_NamedExecuteAlways("SetTensionLevel",0,2,0);
   if (MiscellaneousVars[10037] == 3 && MiscellaneousVars[181] <= 3) ACS_NamedExecuteAlways("SetTensionLevel",0,3,0);
   if (MiscellaneousVars[10037] == 4 && MiscellaneousVars[181] <= 4) ACS_NamedExecuteAlways("SetTensionLevel",0,4,0);
   if (MiscellaneousVars[10037] == 5 && MiscellaneousVars[181] <= 5) ACS_NamedExecuteAlways("SetTensionLevel",0,5,0);
   if (MiscellaneousVars[10037] == 6 && MiscellaneousVars[181] <= 6) ACS_NamedExecuteAlways("SetTensionLevel",0,6,0);
   if (MiscellaneousVars[10037] == 7 && MiscellaneousVars[181] <= 7) ACS_NamedExecuteAlways("SetTensionLevel",0,7,0);
  }

  // Check "Mortal Hit Survivability Mana Recovery [EX]" Perk
  if (MiscellaneousVars[10039] > 0)
  {
   PerkFactor = 0;
   if (MiscellaneousVars[10039] > 0) PerkFactor += 6666;
   if (MiscellaneousVars[10040] > 0) PerkFactor += 3334;
   if (random(1,10000) <= PerkFactor)
   {
    PerkFactor = 0;
    if (MiscellaneousVars[10039] > 0) PerkFactor += 10;
    if (MiscellaneousVars[10040] > 0) PerkFactor += 25;
    TempStartValue = MaxMana * PerkFactor / 100;
    TempEndValue = MaxMana * (100 + PerkFactor) / 100;
    if (CurrentMana < TempEndValue) CurrentMana += TempStartValue;
    if (CurrentMana > TempEndValue) CurrentMana = TempEndValue;
    FadeRange(192, 0, 192, 0.75, 0, 0, 0, 0.0, 0.5);
   }
  }

  // Check "Mortal Hit Survivability Blast Wave [EX]" Perk
  if (MiscellaneousVars[10041] > 0)
  {
  }

  // Check "Mortal Hit Survivability 'Death Rage'" Perk
  if (MiscellaneousVars[10043] > 0)
  {
  }


 }

 if (MiscellaneousVars[194] != 0) // Flickering
 {
  if (MiscellaneousVars[195] > 0) // Timer Above 0
  {
   if (PowerupTimer[4] == 0) 
   {
    SetActorProperty(1001,APROP_INVULNERABLE,1);
    GiveActorInventory(1001,"IsInvulnerable",1);
   }
   MiscellaneousVars[196] = MiscellaneousVars[195] % 120;
   if (MiscellaneousVars[196] >= 0 && MiscellaneousVars[196] <= 59)
   {
    SetActorProperty(1001,APROP_RenderStyle,STYLE_Fuzzy);
   }
   else
   if (MiscellaneousVars[196] >= 60 && MiscellaneousVars[196] <= 119)
   {
    SetActorProperty(1001,APROP_RenderStyle,STYLE_Add);
   }

   MiscellaneousVars[195] -= 20;
  }
  else // Timer at 0
  {
   if (PowerupTimer[4] == 0) 
   {
    SetActorProperty(1001,APROP_INVULNERABLE,0);
    TakeActorInventory(1001,"IsInvulnerable",9999);
   }
   if (MiscellaneousVars[195] != 0) SetActorProperty(1001,APROP_RenderStyle,STYLE_Normal);
   MiscellaneousVars[195] = 0;
  }
 }

 if (MiscellaneousVars[194] == 0) // Not Flickering
 {
  if (PowerupTimer[4] == 0) 
  {
   SetActorProperty(1001,APROP_INVULNERABLE,0);
   TakeActorInventory(1001,"IsInvulnerable",9999);
  }
  if (MiscellaneousVars[195] != 0) SetActorProperty(1001,APROP_RenderStyle,STYLE_Normal);
  MiscellaneousVars[195] = 0;
 }

 //******************************************************************
 //*For interpolation of HP [like a Heretic or Hexen style counting]*
 //******************************************************************
 if (HPInterpolationDisplay != GetActorProperty(1001,APROP_Health))
 {
  if (HPInterpolationDisplay > GetActorProperty(1001,APROP_Health)) // Go down
  {
   HPInterpolationDisplay -= InterPolStrength;
   if (HPInterpolationDisplay < GetActorProperty(1001,APROP_Health)) HPInterpolationDisplay = GetActorProperty(1001,APROP_Health);
  }
  else
  if (HPInterpolationDisplay < GetActorProperty(1001,APROP_Health)) // Go up
  {
   HPInterpolationDisplay += InterPolStrength;
   if (HPInterpolationDisplay > GetActorProperty(1001,APROP_Health)) HPInterpolationDisplay = GetActorProperty(1001,APROP_Health);
  }

  if (HPInterpolationDisplay < InterPolLowestHealth) HPInterpolationDisplay = InterPolLowestHealth;
 }

 // Blacken Screen if Blinded
 if (PowerupTimer[19] > 0) 
 {
  FadeRange(0, 0, 0, 0.95, 0, 0, 0, 0.0, 0.1);
 }

 // Blacken Screen if Asleep
 if (PowerupTimer[20] > 0) 
 {
  FadeRange(0, 0, 0, 0.95, 0, 0, 0, 0.0, 0.1);
 }

 // Check for Magic Focus
 int FocusDrain;
 if (random(1,25) == 1) FocusDrain = (random(1,2) * 4);
                   else FocusDrain = (random(4,8) * 5);
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) FocusDrain = FocusDrain * 9 / 10;

 buttons = GetPlayerInput(0, INPUT_BUTTONS); 
 FreezePlayer = 0;
 if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
 if (PowerupTimer[18] > 0 && random(1,5) > 2) FreezePlayer += 1;
 if (PowerupTimer[20] > 0) FreezePlayer += 1;
 if (PowerupTimer[21] > 0 && random(1,5) > 2) FreezePlayer += 1;
 if (buttons & BT_ZOOM && buttons & BT_SPEED && MiscellaneousVars[21] >= FocusDrain && FreezePlayer == 0)
 {
  MiscellaneousVars[21] -= FocusDrain;

  if (MiscellaneousVars[21] < 0) MiscellaneousVars[21] = 0;

  MiscellaneousVars[212] = 1; // "Focus" on
  MiscellaneousVars[231] += 1;
 }
 else
 {
  MiscellaneousVars[212] = 0; // "Focus" off
  MiscellaneousVars[231] = 0;
 }

 if (MiscellaneousVars[212] > 0) // Focusing
 {
  if (GetActorProperty(1001,APROP_Health) > 0) FadeRange(0, 0, 48, 0.9375, 0, 0, 0, 0.0, 0.05);
  if (CheckActorInventory(1001,"FocusingMagic_Defense") < 1) GiveActorInventory(1001,"FocusingMagic_Defense", 1);
  if (CheckActorInventory(1001,"FocusingMagic_Speed") < 1) GiveActorInventory(1001,"FocusingMagic_Speed", 1);
 }
 else
 {
  if (CheckActorInventory(1001,"FocusingMagic_Defense") > 0) TakeActorInventory(1001,"FocusingMagic_Defense", 1);
  if (CheckActorInventory(1001,"FocusingMagic_Speed") > 0) TakeActorInventory(1001,"FocusingMagic_Speed", 1);
 }

 // Check Aireal Damage
 buttons = GetPlayerInput(0, INPUT_BUTTONS);
 if (GetActorVelZ(1001) < -10240 && PowerupTimer[2] < 1 && buttons & BT_JUMP)
 {
  //PrintBold(s:"\cd",d:GetActorVelZ(1001));
  if (CheckActorInventory(1001,"LandingDMGBonus") < 1) GiveActorInventory(1001,"LandingDMGBonus", 1);
 }
 else
 {
  //PrintBold(s:"\cg",d:GetActorVelZ(1001));
  if (CheckActorInventory(1001,"LandingDMGBonus") > 0) TakeActorInventory(1001,"LandingDMGBonus", 1);
 }

 //
 int SceptreJumpDmgMulti;
 SceptreJumpDmgMulti = GetActorVelZ(1001) / -6553;
 SceptreJumpDmgMulti += 100;
 if (SceptreJumpDmgMulti < 100) SceptreJumpDmgMulti = 100;
 // PrintBold(d:GetActorVelZ(1001),s:"\n",d:SceptreJumpDmgMulti,s:"%");

 //********************
 //*Regenerate Stamina*
 //********************
 // [21] is current Stamina points
 // [22] is maximum Stamina points
 // Base Stamina Maximum
 MiscellaneousVars[22] = 10000;
 if (CharacterClass == 2)
 {
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[22] += 1000; // +10.00%
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) MiscellaneousVars[22] += 1750; // +17.50%
  if (CheckActorInventory(1001,"DivineShield") > 0) MiscellaneousVars[22] += 500; // +5.00%
  if (CheckActorInventory(1001,"BalrogRing") > 0) MiscellaneousVars[22] += 1250; // +12.50%
  // Total = 45.00%
 }
 else
 {
  // Armor
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) MiscellaneousVars[22] += 125; // +1.25%
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) MiscellaneousVars[22] += 250; // +2.5%
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) MiscellaneousVars[22] += 500; // +5%
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) MiscellaneousVars[22] += 1000; // +10%
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) MiscellaneousVars[22] += 1250; // +12.5%
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) MiscellaneousVars[22] += 2500; // +25%
  // Other
   // To Be Added [maybe]
 }
 // Stats

 int staminastatfactor = 0;
 // Agility
 if (CharacterClass == 0) H1 = MiscellaneousVars[31] * 6;
 if (CharacterClass == 1) H1 = MiscellaneousVars[31] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[31] * 10;
 staminastatfactor += H1;

 // Defense
 if (CharacterClass == 0) H1 = MiscellaneousVars[32] * 10;
 if (CharacterClass == 1) H1 = MiscellaneousVars[32] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[32] * 6;
 staminastatfactor += H1;

 // Deftness
 if (CharacterClass == 0) H1 = MiscellaneousVars[33] * 8;
 if (CharacterClass == 1) H1 = MiscellaneousVars[33] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[33] * 8;
 staminastatfactor += H1;

 // Sorcery
 if (CharacterClass == 0) H1 = MiscellaneousVars[34] * 6;
 if (CharacterClass == 1) H1 = MiscellaneousVars[34] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[34] * 10;
 staminastatfactor += H1;

 // Strength
 if (CharacterClass == 0) H1 = MiscellaneousVars[35] * 10;
 if (CharacterClass == 1) H1 = MiscellaneousVars[35] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[35] * 6;
 staminastatfactor += H1;

 // Therapeusis
 if (CharacterClass == 0) H1 = MiscellaneousVars[36] * 8;
 if (CharacterClass == 1) H1 = MiscellaneousVars[36] * 8;
 if (CharacterClass == 2) H1 = MiscellaneousVars[36] * 8;
 staminastatfactor += H1;

 H1 = 0;
 // Final Calc
 staminastatfactor += 20000;
 MiscellaneousVars[22] = MiscellaneousVars[22] * staminastatfactor / 20000;

 PerkFactor = ((MiscellaneousVars[10005] * 500) + (MiscellaneousVars[10006] * 1250)) + 10000;
 MiscellaneousVars[22] = MiscellaneousVars[22] * PerkFactor / 10000; // "StamUp" and "StamUp EX" perks.

 PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
 MiscellaneousVars[22] = MiscellaneousVars[22] * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"

 MiscellaneousVars[164] = MiscellaneousVars[22] * 5;
 

 if (MiscellaneousVars[21] < MiscellaneousVars[22])
 {
  staminaregenfinal = 0;
  if (CharacterClass == 0) staminaregenbase = 15; // Deggaris (0.15%/tic = 5.25%/sec)
  if (CharacterClass == 1) staminaregenbase = 13; // Illucia (0.13%/tic = 4.55%/sec)
  if (CharacterClass == 2) staminaregenbase = 9; // Flora (0.09%/tic = 3.15%/sec)
  staminaregenfinal += staminaregenbase;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinal [Base1]: ",d:staminaregenfinal);

  if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 16); // +6-13
  if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 14); // +7-15
  if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 10); // +10-20
  staminaregenfinal += staminaregenbase;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinal [Base2]: ",d:staminaregenfinal);

  // Check Input for Bonus/Penalties
  FreezePlayer = 0;
  if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
  if (PowerupTimer[20] > 0) FreezePlayer += 1;
  if (FreezePlayer == 0)
  {
   buttons = GetPlayerInput(0, INPUT_BUTTONS); 
   if (buttons & BT_FORWARD) C3 = 76;
   else if (buttons & BT_BACK) C3 = 76;
   else if (buttons & BT_MOVELEFT) C3 = 76;
   else if (buttons & BT_MOVERIGHT) C3 = 76;
   else if (buttons & BT_MOVEUP) C3 = 84;
   else if (buttons & BT_MOVEDOWN) C3 = 84;
   else if (buttons & BT_JUMP) C3 = 76;
   else if (buttons & BT_CROUCH) C3 = 120;
   else C3 = 100;
   staminaregenfinal = staminaregenfinal * C3 / 100;
  }
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinal [Input]: ",d:staminaregenfinal);

  // Check Armor for Bonus/Penalties
  C3 = 1000;
  // Marine Specfic Armors
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	C3 += 12; 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)		C3 += 25; 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	C3 += 50; 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	C3 += 100;  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	C3 += 75;  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	C3 += 150; 
  // Sauron Stuff
  if (CheckActorInventory(1001,"SauronHelmet") > 0)	 		C3 -= 100; 
  if (CheckActorInventory(1001,"SauronGauntletsItem") > 0)	C3 -= 100; 
  // Flora's Stuff
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		C3 -= 375;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0)	 		C3 += 100;  
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0)		C3 += 25;  
  if (CheckActorInventory(1001,"KissaBra") > 0)	 			C3 += 75;  
  if (CheckActorInventory(1001,"DivineShield") > 0)			C3 += 125;  
  if (CheckActorInventory(1001,"DoveRibbon") > 0)	 		C3 += 50;  
  if (C3 < 125) C3 = 125;
  staminaregenfinal = staminaregenfinal * C3 / 1000;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Armor]: ",d:staminaregenfinal);

  // Initia1 Stat Check = 16pts of Strength = +1% Stamina Regen Speed [max of +32% @ 512 Str]
  C3 = (MiscellaneousVars[35] / 16) + 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [StatCheck1]: ",d:staminaregenfinal);

  // Secondary Stat Check = 16pts of [?] = +1% Stamina Regen Speed [max of +32% @ 512 [?]]
  if (CharacterClass == 0) C3 = (MiscellaneousVars[35] / 16) + 100; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
  if (CharacterClass == 1) C3 = (MiscellaneousVars[32] / 16) + 100; // Illucia's Secondary Stat is Defense. :P
  if (CharacterClass == 2) C3 = (MiscellaneousVars[31] / 16) + 100; // Flora's Secondary Stat is Agility. :P
  staminaregenfinal = staminaregenfinal * C3 / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [StatCheck2]: ",d:staminaregenfinal);

  // Tension
  if (MiscellaneousVars[181] == 1) staminaregenfinal = staminaregenfinal * 101 / 100;
  if (MiscellaneousVars[181] == 2) staminaregenfinal = staminaregenfinal * 104 / 100;
  if (MiscellaneousVars[181] == 3) staminaregenfinal = staminaregenfinal * 110 / 100;
  if (MiscellaneousVars[181] == 4) staminaregenfinal = staminaregenfinal * 120 / 100;
  if (MiscellaneousVars[181] == 5) staminaregenfinal = staminaregenfinal * 150 / 100;
  if (MiscellaneousVars[181] == 6) staminaregenfinal = staminaregenfinal * 200 / 100;
  if (MiscellaneousVars[181] == 7) staminaregenfinal = staminaregenfinal * 300 / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Tension]: ",d:staminaregenfinal);

  // Divine Avatar = +100% Regen
  if (PowerupTimer[7] > 0) staminaregenfinal = staminaregenfinal * 2;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [DivineAvatar]: ",d:staminaregenfinal);

  if (PowerupTimer[12] > 0) staminaregenfinal = staminaregenfinal * 11 / 10; // Acceleratle
  if (PowerupTimer[15] > 0) staminaregenfinal = staminaregenfinal * 9 / 10; // Deceleratle
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Accel/Decel]: ",d:staminaregenfinal);

  // Fatigue = -80% Regen
  if (PowerupTimer[18] > 0) staminaregenfinal = staminaregenfinal / 5;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Fatigue]: ",d:staminaregenfinal);

  // Sleeping = +400% Regen
  if (PowerupTimer[20] > 0) staminaregenfinal = staminaregenfinal * 5;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Sleep]: ",d:staminaregenfinal);

  // Berserk = +25% Regen
  if (PowerupTimer[23] > 0) staminaregenfinal = staminaregenfinal * 5 / 4;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Berserk]: ",d:staminaregenfinal);

  // Checks Stamina Regen Rate Menu Option
  staminaregenfinal = staminaregenfinal * MiscellaneousVars[137] / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [StamMenuOption]: ",d:staminaregenfinal);

  // Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
  staminaregenfinal = staminaregenfinal * MiscellaneousVars[22] / 10000;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [StamCapVal]: ",d:staminaregenfinal);

  // RegenStamFast perks
  PerkFactor = ((MiscellaneousVars[10017] * 500) + (MiscellaneousVars[10018] * 1250)) + 10000;
  staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [Perks]: ",d:staminaregenfinal);

  // Check Musou Power Trip Mode
  if (GetCVar("dvds_musou_powertripmode") == 1) staminaregenfinal = staminaregenfinal * 5 / 2; // 250%
  if (GetCVar("dvds_musou_powertripmode") == 2) staminaregenfinal = staminaregenfinal * 5; // 500%
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [PowerTrip]: ",d:staminaregenfinal);

  // Low Caps Regen to 1 tic minimum
  if (staminaregenfinal < 1) staminaregenfinal = 1;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaRegenFinall [LowCap]: ",d:staminaregenfinal);

  MiscellaneousVars[21] += staminaregenfinal;
  if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
 }
 else
 {
  staminaregenfinal = 0;
  if (CharacterClass == 0) staminaregenbase = -4; // Deggaris (-0.04%/tic = -1.40%/sec)
  if (CharacterClass == 1) staminaregenbase = -6; // Illucia (-0.06%/tic = -2.10%/sec)
  if (CharacterClass == 2) staminaregenbase = -7; // Flora (-0.07%/tic = -2.45%/sec)
  staminaregenfinal += staminaregenbase;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Base1]: ",d:staminaregenfinal);

  if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 64); // +1-3
  if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 56); // +1-3
  if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 40); // +2-5
  staminaregenfinal += staminaregenbase;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Base2]: ",d:staminaregenfinal);

  FreezePlayer = 0;
  if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
  if (PowerupTimer[20] > 0) FreezePlayer += 1;
  if (FreezePlayer == 0)
  {
   buttons = GetPlayerInput(0, INPUT_BUTTONS); 
   if (buttons & BT_FORWARD) C3 = 112;
   else if (buttons & BT_BACK) C3 = 112;
   else if (buttons & BT_MOVELEFT) C3 = 112;
   else if (buttons & BT_MOVERIGHT) C3 = 112;
   else if (buttons & BT_MOVEUP) C3 = 108;
   else if (buttons & BT_MOVEDOWN) C3 = 108;
   else if (buttons & BT_JUMP) C3 = 112;
   else if (buttons & BT_CROUCH) C3 = 90;
   else C3 = 100;
   staminaregenfinal = staminaregenfinal * C3 / 100;
  }
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Input]: ",d:staminaregenfinal);

  // Check Armor for Bonus/Penalties
  C3 = 1000;
  // Marine Specfic Armors
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	C3 -= 6; 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)		C3 -= 12; 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	C3 -= 25; 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	C3 -= 50;  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	C3 -= 37;  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	C3 -= 75; 
  // Sauron Stuff
  if (CheckActorInventory(1001,"SauronHelmet") > 0)	 		C3 += 50; 
  if (CheckActorInventory(1001,"SauronGauntletsItem") > 0)	C3 += 50; 
  // Flora's Stuff
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		C3 += 187;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0)	 		C3 -= 50;  
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0)		C3 -= 13;  
  if (CheckActorInventory(1001,"KissaBra") > 0)	 			C3 -= 37;  
  if (CheckActorInventory(1001,"DivineShield") > 0)			C3 -= 63;  
  if (CheckActorInventory(1001,"DoveRibbon") > 0)	 		C3 -= 25;  
  if (C3 < 1) C3 = 1;
  if (C3 > 2500) C3 = 2500;
  staminaregenfinal = staminaregenfinal * C3 / 1000;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Armor]: ",d:staminaregenfinal);

  // 16pts of Strength = -1% Stamina Degen Speed [max of -32% @ 512 Str]
  C3 = ((MiscellaneousVars[35] / 16) * -1) + 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [StatCheck1]: ",d:staminaregenfinal);

  // Secondary Stat Check = 16pts of [?] = -1% Stamina Degen Speed [max of -32% @ 512 [?]]
  if (CharacterClass == 0) C3 = ((MiscellaneousVars[35] / 16) * -1) + 100; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
  if (CharacterClass == 1) C3 = ((MiscellaneousVars[32] / 16) * -1) + 100; // Illucia's Secondary Stat is Defense. :P
  if (CharacterClass == 2) C3 = ((MiscellaneousVars[31] / 16) * -1) + 100; // Flora's Secondary Stat is Agility. :P
  staminaregenfinal = staminaregenfinal * C3 / 100;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [StatCheck2]: ",d:staminaregenfinal);

  // Tension
  if (MiscellaneousVars[181] == 1) staminaregenfinal = staminaregenfinal * 995 / 1000;
  if (MiscellaneousVars[181] == 2) staminaregenfinal = staminaregenfinal * 980 / 1000;
  if (MiscellaneousVars[181] == 3) staminaregenfinal = staminaregenfinal * 950 / 1000;
  if (MiscellaneousVars[181] == 4) staminaregenfinal = staminaregenfinal * 900 / 1000;
  if (MiscellaneousVars[181] == 5) staminaregenfinal = staminaregenfinal * 750 / 1000;
  if (MiscellaneousVars[181] == 6) staminaregenfinal = staminaregenfinal * 500 / 1000;
  if (MiscellaneousVars[181] == 7) staminaregenfinal = staminaregenfinal * random(0,1) / 1000;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Tension]: ",d:staminaregenfinal);

  // Divine Avatar = -50% Degen
  if (PowerupTimer[7] > 0) staminaregenfinal = staminaregenfinal / 2;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [DivineAvatar]: ",d:staminaregenfinal);

  if (PowerupTimer[12] > 0) staminaregenfinal = staminaregenfinal * 9 / 10; // Acceleratle
  if (PowerupTimer[15] > 0) staminaregenfinal = staminaregenfinal * 11 / 10; // Deceleratle
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Accel/Decel]: ",d:staminaregenfinal);

  // Fatigue = +400% Degen
  if (PowerupTimer[18] > 0) staminaregenfinal = staminaregenfinal * 5;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Fatigue]: ",d:staminaregenfinal);

  // Sleep = -80% Degen
  if (PowerupTimer[20] > 0) staminaregenfinal /= 5;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Sleep]: ",d:staminaregenfinal);

  // Berserk = -20% Degen
  if (PowerupTimer[23] > 0) staminaregenfinal = staminaregenfinal * 4 / 5;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Berserk]: ",d:staminaregenfinal);

  // RegenStamFast perks
  PerkFactor = 10000 - ((MiscellaneousVars[10017] * 500) + (MiscellaneousVars[10018] * 1250));
  staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [Perks]: ",d:staminaregenfinal);

  // Check Musou Power Trip Mode
  if (GetCVar("dvds_musou_powertripmode") == 1) staminaregenfinal = staminaregenfinal * (2 / 5); // 40%
  if (GetCVar("dvds_musou_powertripmode") == 2) staminaregenfinal = staminaregenfinal / 5; // 20%
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [PowerTrip]: ",d:staminaregenfinal);

  // Low Caps Regen to 1 tic minimum
  if (staminaregenfinal > -1) staminaregenfinal = -1;
  if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) PrintBold(s:"StaminaDegenFinall [LowCap]: ",d:staminaregenfinal);

  MiscellaneousVars[21] += staminaregenfinal;
  if (MiscellaneousVars[21] < MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
 }

 //***************************
 //*Calculate Stamina for HUD*
 //***************************
 StaminaPercent = MiscellaneousVars[21] * 100 / MiscellaneousVars[22];

 //************************************************************************************************************************
 //**From here on, this script will run the remaining code constantly in order to keep tabs on Survivability ratings, etc**
 //************************************************************************************************************************

 if (CharacterClass == 0) GiveActorInventory(1001,"DeggarisInPlay", 1); else TakeActorInventory(1001,"DeggarisInPlay", 1); // Deggaris
 if (CharacterClass == 1) GiveActorInventory(1001,"IlluciaInPlay", 1); else TakeActorInventory(1001,"IlluciaInPlay", 1); // Illucia
 if (CharacterClass == 2) GiveActorInventory(1001,"FloraInPlay", 1); else TakeActorInventory(1001,"FloraInPlay", 1); // Flora

 if (CharacterClass == 2)
 {
  // Slot 1
  if (CheckActorInventory(1001,"Chainsaw") > 0) TakeActorInventory(1001,"Chainsaw", 1);
  if (CheckActorInventory(1001,"Chainsaw2") > 0) TakeActorInventory(1001,"Chainsaw2", 1);
  // Slot 2
  if (CheckActorInventory(1001,"FloraLearnedPistols") == 0)
  { 
   if (CheckActorInventory(1001,"Pistol") > 0) TakeActorInventory(1001,"Pistol", 1);
   if (CheckActorInventory(1001,"Pistol2") > 0) TakeActorInventory(1001,"Pistol2", 1);
  }
  // Slot 3
  if (CheckActorInventory(1001,"Shotgun") > 0) TakeActorInventory(1001,"Shotgun", 1);
  if (CheckActorInventory(1001,"Shotgun2") > 0) TakeActorInventory(1001,"Shotgun2", 1);
  // Slot 4
  if (CheckActorInventory(1001,"Chaingun") > 0) TakeActorInventory(1001,"Chaingun", 1);
  if (CheckActorInventory(1001,"Chaingun2") > 0) TakeActorInventory(1001,"Chaingun2", 1);
  // Slot 5
  if (CheckActorInventory(1001,"RocketLauncher") > 0) TakeActorInventory(1001,"RocketLauncher", 1);
  if (CheckActorInventory(1001,"RocketLauncher2") > 0) TakeActorInventory(1001,"RocketLauncher2", 1);
  // Slot 6
  if (CheckActorInventory(1001,"PlasmaRifle") > 0) TakeActorInventory(1001,"PlasmaRifle", 1);
  if (CheckActorInventory(1001,"PlasmaRifle2") > 0) TakeActorInventory(1001,"PlasmaRifle2", 1);
  if (CheckActorInventory(1001,"Repeater") > 0) TakeActorInventory(1001,"Repeater", 1);
  if (CheckActorInventory(1001,"Repeater2") > 0) TakeActorInventory(1001,"Repeater2", 1);
  if (CheckActorInventory(1001,"Karasawa") > 0) TakeActorInventory(1001,"Karasawa", 1);
  if (CheckActorInventory(1001,"Karasawa2") > 0) TakeActorInventory(1001,"Karasawa2", 1);
  // Slot 7
  if (CheckActorInventory(1001,"BFG9000") > 0) TakeActorInventory(1001,"BFG9000", 1);
  if (CheckActorInventory(1001,"BFG90002") > 0) TakeActorInventory(1001,"BFG90002", 1);
 }
 else
 {
  // Slot 1
  if (CheckActorInventory(1001,"SceptreOfEmpyrea") > 0) TakeActorInventory(1001,"SceptreOfEmpyrea", 1);
  if (CheckActorInventory(1001,"DoubleBladedChainsaw") > 0 && CheckActorInventory(1001,"Chainsaw2")) TakeActorInventory(1001,"Chainsaw2", 1);
  // Slot 3
  if (CheckActorInventory(1001,"DiarisLongbow") > 0) TakeActorInventory(1001,"DiarisLongbow", 1);
  // Slot 4
  if (CheckActorInventory(1001,"ImpClaw") > 0) TakeActorInventory(1001,"ImpClaw", 1);
  if (CheckActorInventory(1001,"DarkImpClaw") > 0) TakeActorInventory(1001,"DarkImpClaw", 1);
  if (CheckActorInventory(1001,"CacodemonEye") > 0) TakeActorInventory(1001,"CacodemonEye", 1);
  if (CheckActorInventory(1001,"CacolanternEye") > 0) TakeActorInventory(1001,"CacolanternEye", 1);
  if (CheckActorInventory(1001,"AbaddonEye") > 0) TakeActorInventory(1001,"AbaddonEye", 1);
  // Slot 5
  if (CheckActorInventory(1001,"KnightFist") > 0) TakeActorInventory(1001,"KnightFist", 1);
  if (CheckActorInventory(1001,"BaronFist") > 0) TakeActorInventory(1001,"BaronFist", 1);
  if (CheckActorInventory(1001,"BelphegorFist") > 0) TakeActorInventory(1001,"BelphegorFist", 1);
  if (CheckActorInventory(1001,"BruiserFist") > 0) TakeActorInventory(1001,"BruiserFist", 1);
  if (CheckActorInventory(1001,"ArchonFist") > 0) TakeActorInventory(1001,"ArchonFist", 1);
  if (CheckActorInventory(1001,"PyroFist") > 0) TakeActorInventory(1001,"PyroFist", 1);
  // Slot 6
  if (CheckActorInventory(1001,"IncarnateSkull") > 0) TakeActorInventory(1001,"IncarnateSkull", 1);
  if (CheckActorInventory(1001,"ArchvileHand") > 0) TakeActorInventory(1001,"ArchvileHand", 1);
  if (CheckActorInventory(1001,"DiabloistHand") > 0) TakeActorInventory(1001,"DiabloistHand", 1);
  if (CheckActorInventory(1001,"BalrogFist") > 0) TakeActorInventory(1001,"BalrogFist", 1);
 }

 // Check Dash Timer
 if (MiscellaneousVars[166] > 0) 
 { 
  MiscellaneousVars[166]--;
  GiveActorInventory(1001,"PlayerDashing",1);
  GiveActorInventory(1001,"DodgeGhostOn",1);
  GiveActorInventory(1001,"DodgeMeleeBoost",1);
  if (GetActorZ(1001) - GetActorFloorZ(1001) <= 0) SpawnForced("DashPuff",GetActorX(1001),GetActorY(1001),GetActorZ(1001)+(8*65536),0,0);
 }
 else
 {
  TakeActorInventory(1001,"PlayerDashing",1); 
  GiveActorInventory(1001,"DodgeGhostOff",1);
  TakeActorInventory(1001,"DodgeMeleeBoost",1);
 }

 // Checks for the Musou-style "Power Trip" mode cheat-option [5x damage dealt, -80% damage taken]
 if (GetCVar("dvds_musou_powertripmode") == 2)
 {
  if (CheckActorInventory(1001,"MusouDMGBoost2") < 1) GiveActorInventory(1001,"MusouDMGBoost2", 1);
  if (CheckActorInventory(1001,"MusouDMGResist2") < 1) GiveActorInventory(1001,"MusouDMGResist2", 1);
  if (CheckActorInventory(1001,"MusouDMGBoost1") > 0) TakeActorInventory(1001,"MusouDMGBoost1", 1);
  if (CheckActorInventory(1001,"MusouDMGResist1") > 0) TakeActorInventory(1001,"MusouDMGResist1", 1);
 }
 else
 if (GetCVar("dvds_musou_powertripmode") == 1)
 {
  if (CheckActorInventory(1001,"MusouDMGBoost1") < 1) GiveActorInventory(1001,"MusouDMGBoost1", 1);
  if (CheckActorInventory(1001,"MusouDMGResist1") < 1) GiveActorInventory(1001,"MusouDMGResist1", 1);
  if (CheckActorInventory(1001,"MusouDMGBoost2") > 0) TakeActorInventory(1001,"MusouDMGBoost2", 1);
  if (CheckActorInventory(1001,"MusouDMGResist2") > 0) TakeActorInventory(1001,"MusouDMGResist2", 1);
 }
 else
 {
  if (CheckActorInventory(1001,"MusouDMGBoost1") > 0) TakeActorInventory(1001,"MusouDMGBoost1", 1);
  if (CheckActorInventory(1001,"MusouDMGResist1") > 0) TakeActorInventory(1001,"MusouDMGResist1", 1);
  if (CheckActorInventory(1001,"MusouDMGBoost2") > 0) TakeActorInventory(1001,"MusouDMGBoost2", 1);
  if (CheckActorInventory(1001,"MusouDMGResist2") > 0) TakeActorInventory(1001,"MusouDMGResist2", 1);
 }
 

 // Check the Character's Current Mass
 //-----------------------------------
 MiscellaneousVars[201] = 100; // Put at the start just in case some check fails to run so the player will always have at least 100 mass.

 if (CharacterClass == 0) // Deggaris
 {
  MiscellaneousVars[201] = 116; // Deggaris is pretty heavy! :P
  MiscellaneousVars[201] += (MiscellaneousVars[32] / 9); // Defense [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[35] / 15); // Strength [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[34] / 27); // Sorcery [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[36] / 21); // Therapeusis [Seeds]

  // Check Deggaris's Armor Types
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	{ MiscellaneousVars[201] += 4;  MiscellaneousVars[201] = MiscellaneousVars[201] * 101 / 100; } 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)		{ MiscellaneousVars[201] += 8;  MiscellaneousVars[201] = MiscellaneousVars[201] * 102 / 100; } 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	{ MiscellaneousVars[201] += 12; MiscellaneousVars[201] = MiscellaneousVars[201] * 104 / 100; } 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	{ MiscellaneousVars[201] += 16; MiscellaneousVars[201] = MiscellaneousVars[201] * 108 / 100; }  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	{ MiscellaneousVars[201] += 12; MiscellaneousVars[201] = MiscellaneousVars[201] * 112 / 100; }  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	{ MiscellaneousVars[201] += 16; MiscellaneousVars[201] = MiscellaneousVars[201] * 124 / 100; } 

  // Add a point of mass for every 8 levels for Deggaris [max of 25]
  Mas1 = PlayerLevel / 8;

 }
 else
 if (CharacterClass == 1) // Illucia
 {
  MiscellaneousVars[201] = 92; // Illucia is a tad above average for her frame. :P
  MiscellaneousVars[201] += (MiscellaneousVars[32] / 12); // Defense [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[35] / 18); // Strength [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[34] / 21); // Sorcery [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[36] / 15); // Therapeusis [Seeds]

  // Check Illucia's Armor Types
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	{ MiscellaneousVars[201] += 4;  MiscellaneousVars[201] = MiscellaneousVars[201] * 101 / 100; } 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)	{ MiscellaneousVars[201] += 8;  MiscellaneousVars[201] = MiscellaneousVars[201] * 102 / 100; } 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	{ MiscellaneousVars[201] += 12; MiscellaneousVars[201] = MiscellaneousVars[201] * 104 / 100; } 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	{ MiscellaneousVars[201] += 16; MiscellaneousVars[201] = MiscellaneousVars[201] * 108 / 100; }  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	{ MiscellaneousVars[201] += 12; MiscellaneousVars[201] = MiscellaneousVars[201] * 112 / 100; }  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	{ MiscellaneousVars[201] += 16; MiscellaneousVars[201] = MiscellaneousVars[201] * 124 / 100; } 

  // Add a point of mass for every 10 levels for Illucia [max of 20]
  Mas1 = PlayerLevel / 10;

 }
 else
 if (CharacterClass == 2) // Flora
 {
  MiscellaneousVars[201] = 68; // Flora almost blows over like a twig in the wind. :V
  MiscellaneousVars[201] += (MiscellaneousVars[32] / 15); // Defense [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[35] / 21); // Strength [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[34] / 15); // Sorcery [Seeds]
  MiscellaneousVars[201] += (MiscellaneousVars[36] / 9); // Therapeusis [Seeds]

  // Check for Flora's specfic armor items
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) 		MiscellaneousVars[201] += 1;
  if (CheckActorInventory(1001,"PearlyCorset") > 0) 		MiscellaneousVars[201] += 3;
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) 	MiscellaneousVars[201] += 4;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) 	MiscellaneousVars[201] += 1;
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) 		MiscellaneousVars[201] += 3;
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) 	MiscellaneousVars[201] += 2;
  if (CheckActorInventory(1001,"KissaBra") > 0) 		MiscellaneousVars[201] += 1;
  if (CheckActorInventory(1001,"BalrogRing") > 0) 		MiscellaneousVars[201] += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) 		MiscellaneousVars[201] += 2;
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) 	MiscellaneousVars[201] += 1;
  if (CheckActorInventory(1001,"DivineShield") > 0) 		{ MiscellaneousVars[201] += 10; MiscellaneousVars[201] *= 2; }
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		{ MiscellaneousVars[201] -= 10; MiscellaneousVars[201] /= 2; }

  // Check Flora's Spiritual Exoskins
  if (CheckActorInventory(1001,"DSSpiritualExoskin1") > 0) 	{ MiscellaneousVars[201] += 4; MiscellaneousVars[201] = MiscellaneousVars[201] * 102 / 100; }
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) 	{ MiscellaneousVars[201] += 12; MiscellaneousVars[201] = MiscellaneousVars[201] * 106 / 100; }
  if (CheckActorInventory(1001,"DSSpiritualExoskin3") > 0) 	{ MiscellaneousVars[201] += 30; MiscellaneousVars[201] = MiscellaneousVars[201] * 115 / 100; }

  if (CheckActorInventory(1001,"ShieldDefense") > 0) 		MiscellaneousVars[201] = MiscellaneousVars[201] * 1250 / 1000;
  if (CheckActorInventory(1001,"ShieldDefense2") > 0)		MiscellaneousVars[201] = MiscellaneousVars[201] * 1500 / 1000;
  if (CheckActorInventory(1001,"ShieldDefense3") > 0)		MiscellaneousVars[201] = MiscellaneousVars[201] * 1875 / 1000;

  // Add a point of mass for every 12 levels for Flora [max of 16/17]
  Mas1 = PlayerLevel / 12;

 }
 MiscellaneousVars[201] += Mas1;
 if (PowerupTimer[4] > 0) MiscellaneousVars[201] *= 128; // 128x Mass when Invulnerable
 if (PowerupTimer[7] > 0) MiscellaneousVars[201] *= 4; // 4x Mass when using Divine Avatar
 if (PowerupTimer[11] > 0) MiscellaneousVars[201] *= 2; // 2x Mass when using Buff


 int DegenMinimumHPFactor = 10;
 if (GameSkill() == SKILL_VERY_EASY) DegenMinimumHPFactor = 12;
 if (GameSkill() == SKILL_EASY) DegenMinimumHPFactor = 11;
 if (GameSkill() == SKILL_HARD) DegenMinimumHPFactor = 9;
 if (GameSkill() == SKILL_VERY_HARD) DegenMinimumHPFactor = 8;
 int DegenMinimumHP = MaxHealthTrue / DegenMinimumHPFactor;

 int DegenMinimumManaFactor = 80;
 if (GameSkill() == SKILL_VERY_EASY) DegenMinimumManaFactor = 96;
 if (GameSkill() == SKILL_EASY) DegenMinimumManaFactor = 88;
 if (GameSkill() == SKILL_HARD) DegenMinimumManaFactor = 72;
 if (GameSkill() == SKILL_VERY_HARD) DegenMinimumManaFactor = 64;
 int DegenMinimumMana = MaxMana / DegenMinimumManaFactor;

 int CursedShieldDegenInterval;
 int CursedShieldDegenTimer;

 // Cursed Shield Degeneration Effect [will NOT kill the player though]
 if (CheckActorInventory(1001,"RuinousShield") > 0 && GetActorProperty(1001,APROP_Health) > DegenMinimumHP)
 {
   CursedShieldDegenInterval = 5;
   FreezePlayer = 0;
   if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
   if (PowerupTimer[20] > 0) FreezePlayer += 1;
   if (FreezePlayer == 0)
   {
    buttons = GetPlayerInput(0, INPUT_BUTTONS); 
    if (buttons & BT_FORWARD) CursedShieldDegenInterval = 6;
    else if (buttons & BT_BACK) CursedShieldDegenInterval = 6;
    else if (buttons & BT_MOVELEFT) CursedShieldDegenInterval = 6;
    else if (buttons & BT_MOVERIGHT) CursedShieldDegenInterval = 6;
    else if (buttons & BT_ATTACK) CursedShieldDegenInterval = random(6,7);
    else if (buttons & BT_ALTATTACK) CursedShieldDegenInterval = random(6,7);
    else if (buttons & BT_MOVEUP) CursedShieldDegenInterval = 7;
    else if (buttons & BT_MOVEDOWN) CursedShieldDegenInterval = 7;
    else if (buttons & BT_JUMP) CursedShieldDegenInterval = 6;
    else if (buttons & BT_CROUCH) CursedShieldDegenInterval = 2;
   }

   if (random(1,16) == 1) CursedShieldDegenInterval *= 2;

   // Checks Armor Items and other types for Degen speed.
   C2 = 200;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 -= 20;
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 -= 10;
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 -= 15;
    if (CheckActorInventory(1001,"BalrogRing") > 0) C2 -= 25;
    // total of -34 = 66% speed with all four items
   }
   CursedShieldDegenInterval = CursedShieldDegenInterval * C2 / 200;

   MiscellaneousVars[15] += CursedShieldDegenInterval;
   if (MiscellaneousVars[15] >= CursedShieldDegenTimer)
   {
    // HP Degeneration
    C2 = random(1,8);

    switch(C2)
    {
     case 1: C3 = MaxHealthTrue / 33; break;
     case 2: case 3: C3 = MaxHealthTrue / 67; break;
     case 4: case 5: C3 = MaxHealthTrue / 100; break;
     case 6: case 7: C3 = MaxHealthTrue / 133; break;
     case 8: C3 = MaxHealthTrue / 167; break;
    }

    if (C3 < 1) C3 = 1;
    C1 = GetActorProperty(1001,APROP_Health);
    C1 -= C3;
    if (C1 < DegenMinimumHP) C1 = DegenMinimumHP;
    SetActorProperty(1001,APROP_HEALTH,C1);
    MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
    MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);

    if (CurrentMana > DegenMinimumMana)
    {
     // MP Degeneration
     C2 = random(1,8);
     switch(C2)
     {
      case 1: C3 = MaxMana / 33; break;
      case 2: case 3: C3 = MaxMana / 67; break;
      case 4: case 5: C3 = MaxMana / 100; break;
      case 6: case 7: C3 = MaxMana / 133; break;
      case 8: C3 = MaxMana / 167; break;
     }

     if (C3 < 1) C3 = 1;
     C1 = CurrentMana;
     C1 -= C3;
     if (C1 < DegenMinimumMana) C1 = DegenMinimumMana;
     CurrentMana = C1;
     MiscellaneousVars[243] = CurrentMana;
     MiscellaneousVars[238] = CurrentMana;
    }

    MiscellaneousVars[15] = 0;
    CursedShieldDegenTimer = 175 + random(-10,10);
   }

//   PrintBold(s:"CurseDegen: [",d:MaxHealthTrue,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[15],s:"/",d:CursedShieldDegenTimer,s:"]");
 }
 else
 {
  C1 = 0;
  C2 = 0;
  C3 = 0;
  MiscellaneousVars[15] = 0;
  CursedShieldDegenTimer = 175 + random(-10,10);

 }

 int StaminaInputFactor = 100;
 int StaminaRegenRate = 0;
 int StaminaDegenRate = 0;
 //***********************
 //**Health-Regen Checks**
 //***********************
  if (CharacterClass == 0) MiscellaneousVars[14] = 118; // Deggaris Regenerates the Fastest [3.54 seconds]
  if (CharacterClass == 1) MiscellaneousVars[14] = 140; // Illucia has an even speed of Regeneration [4 seconds]
  if (CharacterClass == 2) MiscellaneousVars[14] = 162; // Flora Regenerates the Slowest [4.46 seconds]

  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[14] -= 6;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[14] -= 2;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[14] += 2;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[14] += 6;
  C3 = MiscellaneousVars[32] / 12; // 12pts of Defense will decrease regen wait by 1 tic each
  MiscellaneousVars[14] -= C3; 
  C3 = PlayerLevel / 7; // up to -28
  MiscellaneousVars[14] -= C3; 
  MiscellaneousVars[14] *= 20;

  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (CharacterClass == 2) // Flora
  {
   if (CheckActorInventory(1001,"DoveRibbon") > 0) C1 = MaxHealthLimit; else C1 = MaxHealthTrue;
  }
  else C1 = MaxHealthTrue;

  int delaycount;
  delaycount = 20;
  // Accelerates HP Regen when Tension is Boosted
  if (MiscellaneousVars[181] >= 1) delaycount += 1; // "5" = +1 [+5%]
  if (MiscellaneousVars[181] >= 2) delaycount += 1; // "20" = +2 [+10%]
  if (MiscellaneousVars[181] >= 3) delaycount += 2; // "50" = +4 [+20%]
  if (MiscellaneousVars[181] >= 4) delaycount += 2; // "100" = +6 [+30%]
  if (MiscellaneousVars[181] >= 5) delaycount += 3; // "250" = +9 [+45%]
  if (MiscellaneousVars[181] >= 6) delaycount += 4; // "500" = +13 [+65%]
  if (MiscellaneousVars[181] >= 7) delaycount += 5; // "500" = +18 [+90%]
  // Check Musou Power Trip Mode
  if (GetCVar("dvds_musou_powertripmode") == 1) delaycount = delaycount * 5 / 2; // 250%
  if (GetCVar("dvds_musou_powertripmode") == 2) delaycount = delaycount * 5; // 500%

  I3 = GetActorProperty(1001,APROP_HEALTH);
  if (I3 < C1)
  {
   if (buttons & BT_FORWARD) StaminaInputFactor = 40;
   else if (buttons & BT_BACK) StaminaInputFactor = 40;
   else if (buttons & BT_MOVELEFT) StaminaInputFactor = 40;
   else if (buttons & BT_MOVERIGHT) StaminaInputFactor = 40;
   else if (buttons & BT_ATTACK) StaminaInputFactor = 50;
   else if (buttons & BT_ALTATTACK) StaminaInputFactor = 50;
   else if (buttons & BT_MOVEUP) StaminaInputFactor = 60;
   else if (buttons & BT_MOVEDOWN) StaminaInputFactor = 60;
   else if (buttons & BT_JUMP) StaminaInputFactor = 40;
   else if (buttons & BT_CROUCH) StaminaInputFactor = 180;
   else StaminaInputFactor = 100;

   delaycount = (delaycount * StaminaInputFactor) / 100;

   // Checks Armor Items and other types for regen speed.
   C2 = 100;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 += 20;
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 += 10;
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 += 15;
    if (CheckActorInventory(1001,"BalrogRing") > 0) C2 += 25;
    // total of 70 = 170% speed with all four items
   }
   delaycount = delaycount * C2 / 100;

   // Divine Avatar = 150% Total Regeneration Speed
   if (PowerupTimer[7] > 0) delaycount = delaycount * 3 / 2;

   if (PowerupTimer[12] > 0) delaycount = delaycount * 11 / 10; // Acceleratle
   if (PowerupTimer[15] > 0) delaycount = delaycount * 9 / 10; // Deceleratle

   // Fatigue = 0.2x regen speed
   if (PowerupTimer[18] > 0) delaycount = delaycount / 5;

   // Sleep = x5 regen speed
   if (PowerupTimer[20] > 0) delaycount *= 5;

   // Flora's Regeneration Speed is reduced by 3/4s [75%] when holding the Ruinous Shield [curse effect]
   if (CharacterClass == 2) if (CheckActorInventory(1001,"RuinousShield") > 0) delaycount = delaycount * 1 / 4;

   // RegenHPFast perks
   PerkFactor = ((MiscellaneousVars[10013] * 500) + (MiscellaneousVars[10014] * 1250)) + 10000;
   delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.

   // Checks Health Regen Rate Menu Option
   delaycount = delaycount * MiscellaneousVars[138] / 100;

   // Low Cap to 1 Tics
   if (delaycount < 1) delaycount = 1;

   StaminaRegenRate = delaycount;

   MiscellaneousVars[13] -= delaycount;
  }
  else MiscellaneousVars[13] = MiscellaneousVars[14] + random(-20,20);

  int HPRegenAmount;
  if (MiscellaneousVars[13] < 1)
  {
   // Base of 1 HP regen
   HPRegenAmount = 1;

   // Every 50 Levels = +1 HP Regen
   HPRegenAmount += (PlayerLevel / 50);

   // Every 15 Pts of Strength = +1 HP Regen
   HPRegenAmount += (MiscellaneousVars[35] / 15);

   // Makes having the Dove Ribbon allow HP Regen up to 200% maximum
   if (CharacterClass == 2) // Flora
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0) C2 = MaxHealthLimit; else C2 = MaxHealthTrue;
   }
   else C2 = MaxHealthTrue;

   if (I3 > 0 && I3 < C2)
   {
    I3 += HPRegenAmount;
    if (I3 > C2) I3 = C2;
    SetActorProperty(1001,APROP_HEALTH,I3);
    MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
    MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
   }

   MiscellaneousVars[13] = MiscellaneousVars[14] + random(-20,20);
  }

 //***********************
 //**Health-Degen Checks**
 //***********************
  MiscellaneousVars[142] = GetCVar("dvds_healthdegenmode");
  if (MiscellaneousVars[142] == 1)
  {
   if (CharacterClass == 0) MiscellaneousVars[144] = 41; // Deggaris Degenerates the Slowest [1.17 seconds]
   if (CharacterClass == 1) MiscellaneousVars[144] = 35; // Illucia has an even speed of Degeneration [1 second]
   if (CharacterClass == 2) MiscellaneousVars[144] = 29; // Flora Degenerates the Fastest [0.83 seconds]

   if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[144] += 3;
   if (GameSkill() == SKILL_EASY) MiscellaneousVars[144] += 1;
   if (GameSkill() == SKILL_HARD) MiscellaneousVars[144] -= 1;
   if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[144] -= 3;
   C3 = MiscellaneousVars[32] / 24; // 24pts of Defense will increase degen wait by 1 tic each
   MiscellaneousVars[144] += C3; 
   C3 = PlayerLevel / 14; // up to +14
   MiscellaneousVars[144] += C3; 
   MiscellaneousVars[144] *= 20;

   buttons = GetPlayerInput(0, INPUT_BUTTONS); 
   if (CharacterClass == 2) // Flora
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0) C1 = MaxHealthLimit; else C1 = MaxHealthTrue;
   }
   else C1 = MaxHealthTrue;
 
   delaycount = 20;
   // Decelerates HP Degen when Tension is Boosted
   if (MiscellaneousVars[181] >= 1) delaycount -= 0; // "5" = -0 [-0%]
   if (MiscellaneousVars[181] >= 2) delaycount -= 1; // "20" = -1 [-5%]
   if (MiscellaneousVars[181] >= 3) delaycount -= 1; // "50" = -2 [-10%]
   if (MiscellaneousVars[181] >= 4) delaycount -= 1; // "100" = -3 [-15%]
   if (MiscellaneousVars[181] >= 5) delaycount -= 1; // "250" = -4 [-20%]
   if (MiscellaneousVars[181] >= 6) delaycount -= 2; // "500" = -6 [-30%]
   if (MiscellaneousVars[181] >= 7) delaycount -= 3; // "500" = -9 [-45%]
   // Check Musou Power Trip Mode
   if (GetCVar("dvds_musou_powertripmode") == 1) delaycount = delaycount * 2 / 5; // 40%
   if (GetCVar("dvds_musou_powertripmode") == 2) delaycount = delaycount / 5; // 20%

   I3 = GetActorProperty(1001,APROP_HEALTH);
   if (I3 > C1)
   {
    if (buttons & BT_FORWARD) StaminaInputFactor = 120;
    else if (buttons & BT_BACK) StaminaInputFactor = 120;
    else if (buttons & BT_MOVELEFT) StaminaInputFactor = 120;
    else if (buttons & BT_MOVERIGHT) StaminaInputFactor = 120;
    else if (buttons & BT_ATTACK) StaminaInputFactor = 130;
    else if (buttons & BT_ALTATTACK) StaminaInputFactor = 130;
    else if (buttons & BT_MOVEUP) StaminaInputFactor = 120;
    else if (buttons & BT_MOVEDOWN) StaminaInputFactor = 120;
    else if (buttons & BT_JUMP) StaminaInputFactor = 140;
    else if (buttons & BT_CROUCH) StaminaInputFactor = 40;
    else StaminaInputFactor = 100;

    delaycount = (delaycount * StaminaInputFactor) / 100;

    // Checks Armor Items and other types for Degen speed.
    C2 = 200;
    if (CharacterClass == 2)
    {
     if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 -= 20;
     if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 -= 10;
     if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 -= 15;
     if (CheckActorInventory(1001,"BalrogRing") > 0) C2 -= 25;
     // total of -34 = 66% speed with all four items
    }
    delaycount = delaycount * C2 / 200;

    // Divine Avatar = 62.5% Total Degeneration Speed
    if (PowerupTimer[7] > 0) delaycount = delaycount * 5 / 8;

    if (PowerupTimer[12] > 0) delaycount = delaycount * 9 / 10; // Acceleratle
    if (PowerupTimer[15] > 0) delaycount = delaycount * 11 / 10; // Deceleratle

    // Fatigue = 5x degen speed
    if (PowerupTimer[18] > 0) delaycount = delaycount * 5;

    // Sleep = 0.2x degen speed
    if (PowerupTimer[20] > 0) delaycount /= 5;

    // Flora's Degeneration Speed is multiplied by 4 when holding the Ruinous Shield [curse effect]
    if (CharacterClass == 2) if (CheckActorInventory(1001,"RuinousShield") > 0) delaycount = delaycount * 4;
 
    // RegenHPFast perks
    PerkFactor = 10000 - ((MiscellaneousVars[10013] * 500) + (MiscellaneousVars[10014] * 1250));
    delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.

    // Low Cap to 1 Tics
    if (delaycount < 1) delaycount = 1;
 
    StaminaDegenRate = delaycount;

    MiscellaneousVars[143] -= delaycount;
   }
   else MiscellaneousVars[143] = MiscellaneousVars[144] + random(-20,20);

   int HPDegenAmount;
   if (MiscellaneousVars[143] < 1)
   {
    // Base of 1 HP degen
    HPDegenAmount = 1;

    // Makes having the Dove Ribbon allow HP Regen up to 200% maximum
    if (CharacterClass == 2) // Flora
    {
     if (CheckActorInventory(1001,"DoveRibbon") > 0) C2 = MaxHealthLimit; else C2 = MaxHealthTrue;
    }
    else C2 = MaxHealthTrue;

    if (I3 > C2)
    {
     I3 -= HPDegenAmount;
     if (I3 < C2) I3 = C2;
     SetActorProperty(1001,APROP_HEALTH,I3);
     MiscellaneousVars[241] = GetActorProperty(1001,APROP_Health);
     MiscellaneousVars[175] = GetActorProperty(1001,APROP_Health);
    }

    MiscellaneousVars[143] = MiscellaneousVars[144] + random(-20,20);
   }

   if (GetCVar("dvdsdebug_showhpregenstuff") == 1)
   {
    PrintBold(
              s:"Regen: [",d:I3,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[13],s:"/",d:MiscellaneousVars[14],s:"] & [",d:StaminaRegenRate,s:"]\n",
              s:"Degen: [",d:I3,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[143],s:"/",d:MiscellaneousVars[144],s:"] & [",d:StaminaDegenRate,s:"]"
             );
   }
  }

 // Check DoomSpell Bonuses
 if (CharacterClass == 0)
 {
  if (CheckActorInventory(1001,"DeggarisDoomspellBonus") == 0) GiveActorInventory(1001,"DeggarisDoomspellBonus", 1);
  if (CheckActorInventory(1001,"IlluciaDoomspellBonus") >= 0) TakeActorInventory(1001,"IlluciaDoomspellBonus", 1);
  if (CheckActorInventory(1001,"FloraDoomspellBonus") >= 0) TakeActorInventory(1001,"FloraDoomspellBonus", 1);
 }
 if (CharacterClass == 1)
 {
  if (CheckActorInventory(1001,"DeggarisDoomspellBonus") >= 0) TakeActorInventory(1001,"DeggarisDoomspellBonus", 1);
  if (CheckActorInventory(1001,"IlluciaDoomspellBonus") == 0) GiveActorInventory(1001,"IlluciaDoomspellBonus", 1);
  if (CheckActorInventory(1001,"FloraDoomspellBonus") >= 0) TakeActorInventory(1001,"FloraDoomspellBonus", 1);
 }
 if (CharacterClass == 2)
 {
  if (CheckActorInventory(1001,"DeggarisDoomspellBonus") >= 0) TakeActorInventory(1001,"DeggarisDoomspellBonus", 1);
  if (CheckActorInventory(1001,"IlluciaDoomspellBonus") >= 0) TakeActorInventory(1001,"IlluciaDoomspellBonus", 1);
  if (CheckActorInventory(1001,"FloraDoomspellBonus") == 0) GiveActorInventory(1001,"FloraDoomspellBonus", 1);
 }

 //************************
 //**Flora Specfic Checks**
 //************************


 if (ClassCheck > 5)
 {
  if (CharacterClass != 2)
  {
   LevelCap = GetCVar("dvds_marines_maxlevel"); // Necessary to prevent the game from giving bogus EXP requirements at level 100-199
   if (LevelCap < 0) LevelCap = 0;
   if (LevelCap > 200) LevelCap = 200;
  }
  else
  {
   if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 0)
   {
    LevelCap = 100;
    if (CheckActorInventory(1001,"SafeTeaShoes") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"PearlyCorset") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"WaterFlyingDress") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"CloakofEvasion") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"KissaBra") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"BalrogRing") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"DoveRibbon") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"DivineShield") > 0) LevelCap += 9;
    if (CheckActorInventory(1001,"RuinousShield") > 0) LevelCap += 4;
  
    if (LevelCap == 199) LevelCap = 200;
    if (LevelCap > 200) LevelCap = 200;
   }
   else
   {
    LevelCap = GetCVar("dvds_flora_maxlevel");
    if (LevelCap < 0) LevelCap = 0;
    if (LevelCap > 200) LevelCap = 200;
   }
  }
 }

 int UncurseInterval;
 UncurseInterval = 700; // 70 tics [up to -17 tics with all items]
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseInterval -= 50;
 if (CheckActorInventory(1001,"BalrogRing") > 0) UncurseInterval -= 40;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) UncurseInterval -= 30;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseInterval -= 20;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) UncurseInterval -= 20;
 if (CheckActorInventory(1001,"KissaBra") > 0) UncurseInterval -= 10;

 int UncurseIntervalChance;
 UncurseIntervalChance = 40;
 if (CheckActorInventory(1001,"SafeTeaShoes") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"PearlyCorset") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"CloakofEvasion") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseIntervalChance += 3;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"KissaBra") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"BalrogRing") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) UncurseIntervalChance += 1;

 if (CheckActorInventory(1001,"SauronHelmet") > 0) UncurseIntervalChance -= 2;
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) UncurseIntervalChance -= 3;

 if (CheckActorInventory(1001,"TheOneRing") > 0) UncurseIntervalChance += 11;


 int UncurseIntervalChance2;
 UncurseIntervalChance2 = 8;
 if (CheckActorInventory(1001,"PearlyCorset") > 0) UncurseIntervalChance2 += random(0,1);
 if (CheckActorInventory(1001,"DoveRibbon") > 0) UncurseIntervalChance2 += random(1,3);
 if (CheckActorInventory(1001,"CloakOfEvasion") > 0) UncurseIntervalChance2 += random(2,5);
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) UncurseIntervalChance2 += 2;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseIntervalChance2 += 4;
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseIntervalChance2 += 6;

 // Checks to determine how many points the Ruinous Shield has gathered towards becoming an uncursed Divine Shield
 if (CharacterClass == 2 && CheckActorInventory(1001,"RuinousShield") > 0) // Flora
 {
  // Amount of Points is determined by Difficulty level
  if (GameSkill() == SKILL_VERY_EASY) RuinousPtsNeeded = 384;
  if (GameSkill() == SKILL_EASY) RuinousPtsNeeded = 448;
  if (GameSkill() == SKILL_NORMAL) RuinousPtsNeeded = 576;
  if (GameSkill() == SKILL_HARD) RuinousPtsNeeded = 768;
  if (GameSkill() == SKILL_VERY_HARD) RuinousPtsNeeded = 1024;

  RuinousShieldPercent = MiscellaneousVars[202] * 100 / RuinousPtsNeeded;
  RuinousShieldPercentF = MiscellaneousVars[202] * 1000 / RuinousPtsNeeded;

  MiscellaneousVars[11] += 10 * (MiscellaneousVars[89] / 100);
  if (MiscellaneousVars[11] >= UncurseInterval)
  {
   MiscellaneousVars[11] -= UncurseInterval;
   if (random(1,100) <= UncurseIntervalChance) // 35-66% chance of increase
   {
    if (random(1,100) <= UncurseIntervalChance2) MiscellaneousVars[202] += 4; else MiscellaneousVars[202] += 2;
   }

   if (random(1,100) <= UncurseIntervalChance && CheckActorInventory(1001,"PearlyCorset") > 0) // 35-66% chance of increase
   {
    if (random(1,100) <= UncurseIntervalChance2) MiscellaneousVars[202] += 4; else MiscellaneousVars[202] += 2;
   }

   if (random(1,100) <= UncurseIntervalChance && CheckActorInventory(1001,"DoveRibbon") > 0) // 35-66% chance of increase
   {
    if (random(1,100) <= UncurseIntervalChance2) MiscellaneousVars[202] += 4; else MiscellaneousVars[202] += 2;
   }

  }

   // Once You Exceed the Amount, the Shield Automatically Uncurses!
  if (MiscellaneousVars[202] > RuinousPtsNeeded)
  {
   GiveActorInventory(1001,"DivineShield", 1);
   if (CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1);
   PrintBold(s:"CONGRADULATIONS!!\n\nTHE RUINOUS SHIELD IS NO LONGER CURSED!\n\nYOU NOW POSSESS AND WIELD THE MIGHTY 'DIVINE SHIELD'!!");
   AmbientSound("Uncursed",127);
   MiscellaneousVars[11] = 0;
  }
 }

 // Checks to make sure you cannot hold the Ruinous Shield if you already have a Divine Shield (the latter is the uncursed version of the former).
 if (CharacterClass == 2 && CheckActorInventory(1001,"DivineShield") > 0 && CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1); // Flora

 int DY1 = MaxHealthTrue * -1;
 // [12] is for the death time counter, to fade the screen to blackish-red when the player dies.
 if (GetActorProperty(1001,APROP_Health) < 1)
 {
  MiscellaneousVars[12] += 1;
  // Game Over Music
  if (GetCVar("dvds_deathmusic") != 0)
  {
   if (MiscellaneousVars[12] == 1) SetMusic("",0);
   if (GetCVar("dvds_deathmusic") == 1 && MiscellaneousVars[12] == 8) SetMusic("RoReDead",0);
   if (GetCVar("dvds_deathmusic") == 2 && MiscellaneousVars[12] == 35) SetMusic("GaOvYe",0);
   if (GetCVar("dvds_deathmusic") == 3 && MiscellaneousVars[12] == 35) SetMusic("DRQUDEAD",0);
   if (GetCVar("dvds_deathmusic") == 4 && MiscellaneousVars[12] == 4) SetMusic("MiRiBuTi",0);
   if (GetCVar("dvds_deathmusic") == 5 && MiscellaneousVars[12] == 14) SetMusic("ToDiYoAD",0);

   if (GetCVar("dvds_deathmusic") == 1 && MiscellaneousVars[12] >= 2220) SetMusic("",0);
   if (GetCVar("dvds_deathmusic") == 2 && MiscellaneousVars[12] >= 367) SetMusic("",0);
   if (GetCVar("dvds_deathmusic") == 3 && MiscellaneousVars[12] >= 255) SetMusic("",0);
   if (GetCVar("dvds_deathmusic") == 4 && MiscellaneousVars[12] >= 290) SetMusic("",0);
   if (GetCVar("dvds_deathmusic") == 5 && MiscellaneousVars[12] == 3970) SetMusic("",0);
  }

  // Fading Death Heart Beats, if not gibbed
  if (GetActorProperty(1001,APROP_Health) > DY1)
  {
   SetActivator(1001); // Set to Player's ID
   if (MiscellaneousVars[12] == 18) localambientsound("heartb2", 120); // +20
   if (MiscellaneousVars[12] == 20) localambientsound("heartb2", 120); // +20

   if (MiscellaneousVars[12] == 42) localambientsound("heartb2", 103); // +22
   if (MiscellaneousVars[12] == 44) localambientsound("heartb2", 103); // +22

   if (MiscellaneousVars[12] == 68) localambientsound("heartb2", 86); // +26
   if (MiscellaneousVars[12] == 70) localambientsound("heartb2", 86); // +26

   if (MiscellaneousVars[12] == 100) localambientsound("heartb2", 69); // +32
   if (MiscellaneousVars[12] == 102) localambientsound("heartb2", 69); // +32

   if (MiscellaneousVars[12] == 140) localambientsound("heartb2", 52); // +40
   if (MiscellaneousVars[12] == 142) localambientsound("heartb2", 52); // +40

   if (MiscellaneousVars[12] == 188) localambientsound("heartb2", 35); // +62
   if (MiscellaneousVars[12] == 190) localambientsound("heartb2", 35); // +50

   if (MiscellaneousVars[12] == 250) localambientsound("heartb2", 18); // +62
   if (MiscellaneousVars[12] == 252) localambientsound("heartb2", 18); // +62
   SetActivator(0); // Set back to worldly activator
  }
  if (GetActorProperty(1001,APROP_Health) > DY1)
  {
   if (MiscellaneousVars[12] == 115)
   {
    if (CheckActorInventory(1001,"PlayerDeathFadeOut") < 1) GiveActorInventory(1001,"PlayerDeathFadeOut", 1);
    SetActivator(1001); // Set to Player's ID
    FadeRange(16, 0, 0, 0.0, 16, 0, 0, 1.0, 4.0);
    SetActivator(0); // Set back to worldly activator
   }
   if (MiscellaneousVars[12] == 260) FadeRange(16, 0, 0, 1.0, 255, 0, 0, 1.0, 1.0); // Intended to show a "Game Over" Euqse Screen
  }
  else
  {
   if (MiscellaneousVars[12] == 4)
   {
    if (CheckActorInventory(1001,"PlayerDeathFadeOut") < 1) GiveActorInventory(1001,"PlayerDeathFadeOut", 1);
    SetActivator(1001); // Set to Player's ID
    FadeRange(0, 0, 0, 0.0, 255, 0, 0, 1.0, 0.8);
    SetActivator(0); // Set back to worldly activator
   }
  }
 }
 else
 {
  if (MiscellaneousVars[12] > 114)
  {
   SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
   FadeRange(0, 0, 0, 0.0, 0, 0, 0, 0.0, 0.0);
   SetActivator(0); // Set back to worldly activator at the end of weapon checking.
  }
  if (CheckActorInventory(1001,"PlayerDeathFadeOut") > 0) TakeActorInventory(1001,"PlayerDeathFadeOut", 1);
  if (GetCVar("dvds_deathmusic") != 0)
  {
   if (MiscellaneousVars[12] > 0) SetMusic("*", 0);
  }
  MiscellaneousVars[12] = 0;
 }

 // Whistle Countdown
 if (GetActorProperty(1001,APROP_Health) > 0)
 {
  if (MiscellaneousVars[168] > 0) MiscellaneousVars[168] -= 1;
 }

 // Checks Flora's EXP for using the Sceptre of Empyrea
 if (CharacterClass == 2) // Flora
 {
  BaseSceptreEXP = 312;
  if (GameSkill() == SKILL_VERY_EASY) BaseSceptreEXP = 240;
  if (GameSkill() == SKILL_EASY) BaseSceptreEXP = 288;
  if (GameSkill() == SKILL_NORMAL) BaseSceptreEXP = 312;
  if (GameSkill() == SKILL_HARD) BaseSceptreEXP = 336;
  if (GameSkill() == SKILL_VERY_HARD) BaseSceptreEXP = 384;

  MiscellaneousVars[301] = BaseSceptreEXP * 1; // +1
  MiscellaneousVars[302] = BaseSceptreEXP * 3; // +2
  MiscellaneousVars[303] = BaseSceptreEXP * 6; // +3
  MiscellaneousVars[304] = BaseSceptreEXP * 10; // +4
  MiscellaneousVars[305] = BaseSceptreEXP * 15; // +5
  MiscellaneousVars[306] = BaseSceptreEXP * 21; // +6
  MiscellaneousVars[307] = BaseSceptreEXP * 28; // +7
  MiscellaneousVars[308] = BaseSceptreEXP * 36; // +8
  MiscellaneousVars[309] = BaseSceptreEXP * 45; // +9
  MiscellaneousVars[310] = BaseSceptreEXP * 55; // +10
  MiscellaneousVars[311] = BaseSceptreEXP * 66; // +11
  MiscellaneousVars[312] = BaseSceptreEXP * 78; // +12
  MiscellaneousVars[313] = BaseSceptreEXP * 91; // +13
  MiscellaneousVars[314] = BaseSceptreEXP * 105; // +14
  MiscellaneousVars[315] = BaseSceptreEXP * 120; // +15
  MiscellaneousVars[316] = BaseSceptreEXP * 136; // +16

  if (SceptreLevelEXP >= MiscellaneousVars[316]) SceptreActualLevel = 16;
  if (SceptreLevelEXP < MiscellaneousVars[316]) SceptreActualLevel = 15;
  if (SceptreLevelEXP < MiscellaneousVars[315]) SceptreActualLevel = 14;
  if (SceptreLevelEXP < MiscellaneousVars[314]) SceptreActualLevel = 13;
  if (SceptreLevelEXP < MiscellaneousVars[313]) SceptreActualLevel = 12;
  if (SceptreLevelEXP < MiscellaneousVars[312]) SceptreActualLevel = 11;
  if (SceptreLevelEXP < MiscellaneousVars[311]) SceptreActualLevel = 10;
  if (SceptreLevelEXP < MiscellaneousVars[310]) SceptreActualLevel = 9;
  if (SceptreLevelEXP < MiscellaneousVars[309]) SceptreActualLevel = 8;
  if (SceptreLevelEXP < MiscellaneousVars[308]) SceptreActualLevel = 7;
  if (SceptreLevelEXP < MiscellaneousVars[307]) SceptreActualLevel = 6;
  if (SceptreLevelEXP < MiscellaneousVars[306]) SceptreActualLevel = 5;
  if (SceptreLevelEXP < MiscellaneousVars[305]) SceptreActualLevel = 4;
  if (SceptreLevelEXP < MiscellaneousVars[304]) SceptreActualLevel = 3;
  if (SceptreLevelEXP < MiscellaneousVars[303]) SceptreActualLevel = 2;
  if (SceptreLevelEXP < MiscellaneousVars[302]) SceptreActualLevel = 1;
  if (SceptreLevelEXP < MiscellaneousVars[301]) SceptreActualLevel = 0;

  int i = 0;
  str SceptreLevelItem;
  // REVISED: Changed If statements info a for block for the Sceptre-Level Bitfield (7/3/12)
  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   if (SceptreActualLevel != MiscellaneousVars[3]) // [3] is for checking Sceptre Levels so it doesn't have to run EVERY tic and lag the game too badly.
   {
    for (i = 1; i < 17; i++)
    {
     SceptreLevelItem = StrParam(s:"SceptreLevel", d:i);
 
     if (SceptreActualLevel == i)
     GiveActorInventory(1001, SceptreLevelItem, 1);
      else
     TakeActorInventory(1001, SceptreLevelItem, 1);
    }
    MiscellaneousVars[3] = SceptreActualLevel;
   }
  }
  else
  {
   MiscellaneousVars[3] = 0; // Resets the check if death/0 HP is detected
  }

 }

 //*********************************************************************
 //**General Modifiers that are universal between all three characters**
 //*********************************************************************
 if (CheckActorInventory(1001,"SauronHelmet") > 0) { MiscellaneousVars[201] += 17; MiscellaneousVars[201] = MiscellaneousVars[201] * 117 / 100; }
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) { MiscellaneousVars[201] += 5; MiscellaneousVars[201] = MiscellaneousVars[201] * 105 / 100; } // Deggaris
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { MiscellaneousVars[201] += 6; MiscellaneousVars[201] = MiscellaneousVars[201] * 106 / 100; } // Illucia
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { MiscellaneousVars[201] += 4; MiscellaneousVars[201] = MiscellaneousVars[201] * 104 / 100; } // Flora
 if (CheckActorInventory(1001,"TheOneRing") > 0) { MiscellaneousVars[201] += 10; MiscellaneousVars[201] = MiscellaneousVars[201] * 110 / 100; }
 SetActorProperty(1001,APROP_Mass,MiscellaneousVars[201]);


 // Check Buddha Mode (Works for Survivability Rate [like a "Last Chance Hit Point" when you'd otherwise die from an attack], like in various RPGs)
 //------------------
 BuddhaRNGVal = random (1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]

 // 0.1% for every 2 levels (max of 50 or 5.0% [max of 100 or 10.0% for Flora at Level 200])
 // Base: Deggaris = 3.2%, Illucia = 4.6%, Flora = 3.9%
 MiscellaneousVars[232] = (PlayerLevel / 2) + MiscellaneousVars[0];

 // Every 3/4/5 Points of Defenses = 0.1% increase to Survivability Rate
 if (GameSkill() < SKILL_NORMAL) MiscellaneousVars[232] += MiscellaneousVars[32] / 3;
 if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[232] += MiscellaneousVars[32] / 4;
 if (GameSkill() > SKILL_NORMAL) MiscellaneousVars[232] += MiscellaneousVars[32] / 5;

 if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [Base]");

 // Abhorrent's Equipment Set
 if (CheckActorInventory(1001,"SauronHelmet") > 0) MiscellaneousVars[232] += 175; // Helmet = 17.5%
 if (CheckActorInventory(1001,"SauronGauntlets") > 0) MiscellaneousVars[232] += 50; // Gauntlets (Deggaris) = 5.0%
 if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) MiscellaneousVars[232] += 60; // Gauntlets (Illucia) = 6.0%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) MiscellaneousVars[232] += 40; // Gauntlets (Flora) = 4.0%
 if (CheckActorInventory(1001,"TheOneRing") > 0) MiscellaneousVars[232] += 333; // The One Ring = 33.3%
 if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [SauronEquipCheck]");

 if (CharacterClass != 2) // Deggaris and Illucia take advantage of Doom-equse Armor, however Flora cannot.
 {
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) MiscellaneousVars[232] += 5; // Green Armor = 0.5% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) MiscellaneousVars[232] += 10; // Blue Armor = 1.0% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) MiscellaneousVars[232] += 16; // Stone Skin [1] = 1.6% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) MiscellaneousVars[232] += 44; // Diamond Skin [1] = 4.4% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) MiscellaneousVars[232] += 66; // Stone Skin [2] = 6.6% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) MiscellaneousVars[232] += 176; // Diamond Skin [2] = 17.6% [Deggaris and Illucia Only]
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [MarineArmorCheck]");
 }
 if (CharacterClass == 2) // Items only Flora can make use of
 {
  if (CheckActorInventory(1001,"DSSpiritualExoskin1") > 0) MiscellaneousVars[232] += 32; // Spiritual Exoskin = 3.2% [Flora Only]
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) MiscellaneousVars[232] += 96; // Greater Spiritual Exoskin = 9.6% [Flora Only]
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) MiscellaneousVars[232] += 288; // Perfected Spiritual Exoskin = 28.8% [Flora Only]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) MiscellaneousVars[232] += 100; // Anubis Cufflinks = 10.0% [Flora Only]
  if (CheckActorInventory(1001,"DoveRibbon") > 0) MiscellaneousVars[232] += 150; // Dove Ribbon = 15.0% [Flora Only]
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [FloraArmorCheck]");
 }
 // Divine Avatar = (25.0% of remaining amount uncovered)
 if (PowerupTimer[7] > 0)
 {  
  GodlyAvatarBuddhaAdd = (1000 - MiscellaneousVars[232]) / 4;
  MiscellaneousVars[232] += GodlyAvatarBuddhaAdd;
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [DivineAvatarCheck]");
 }

 // [STRIFE-Compatibility] Stamina Upgrades
 PerkFactor = (MiscellaneousVars[317] * 11);
 MiscellaneousVars[232] += PerkFactor; // [STRIFE-Compatibility] Stamina Upgrades
 if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [STRIFEStamCheck]");

 // Buff = (10.0% of remaining amount uncovered)
 if (PowerupTimer[11] > 0)
 {  
  GodlyAvatarBuddhaAdd = (1000 - MiscellaneousVars[232]) / 10;
  MiscellaneousVars[232] += GodlyAvatarBuddhaAdd;
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [BuffCheck]");
 }

 // Kissa's Armored Brassiere = 25.0%
 if (CheckActorInventory(1001,"KissaBra") > 0)
 {  
  MiscellaneousVars[232] += 250; 
  if (MiscellaneousVars[232] > 938) MiscellaneousVars[232] = 938;
 } 
 else
 {
  if (MiscellaneousVars[232] > 875) MiscellaneousVars[232] = 875;
 }
 if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [KissaBraCheck]");

 if (CheckActorInventory(1001,"RuinousShield") > 0)
 {
  MiscellaneousVars[232] = MiscellaneousVars[232] / 10; // Ruinous Shield divides Survival Rate by 10
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [CursedShieldCheck]");
 }

 if (PowerupTimer[4] > 0) // Invulnerability
 {
  MiscellaneousVars[232] = 1000;
  if (GetCVar("dvdsdebug_showsurvivalstuff") > 0) PrintBold(s:"Survival Rate %: ",d:MiscellaneousVars[232],s:" [Invulnerable]");
 }

 // For the Status Bar (Only shows an int value, not a floating point amount)
 SurvivalWhole = MiscellaneousVars[232] / 10;

 if (BuddhaRNGVal <= MiscellaneousVars[232]) SetPlayerProperty(1,1,PROP_BUDDHA); // Buddha Mode is basically perfect for emulating Survivability [this also means, you can't use the Buddha cheat directly though]
 else SetPlayerProperty(1,0,PROP_BUDDHA);
 if (GetCVar("dvdsdebug_showsurvivalstuff") > 0)
 {
  if (BuddhaRNGVal <= MiscellaneousVars[232])
  {
   PrintBold(s:"\c[green]Survival Rate Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[green]Survival Rate Chance % - ",d:MiscellaneousVars[232]);
  }
  else
  {
   PrintBold(s:"\c[red]Survival Rate Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[red]Survival Rate Chance % - ",d:MiscellaneousVars[232]);
  }
 }

 // Dealing Critical Hits
 MiscellaneousVars[235] = (PlayerLevel / 2) + MiscellaneousVars[0];
 if (GameSkill() < SKILL_NORMAL) MiscellaneousVars[235] += MiscellaneousVars[32] / 3;
 if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[235] += MiscellaneousVars[32] / 4;
 if (GameSkill() > SKILL_NORMAL) MiscellaneousVars[235] += MiscellaneousVars[32] / 5;

 MiscellaneousVars[235] /= 4;
 if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [Base]");

 //PrintBold(d:MiscellaneousVars[232]);
 MiscellaneousVars[235] += (MiscellaneousVars[33] * 3); // 1 pt of Deftness is +0.3% crit rate
 //PrintBold(d:MiscellaneousVars[232]);
 if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [DeftCheck]");

 // Oomph = (8.33% of remaining amount uncovered)
 if (PowerupTimer[10] > 0)
 {
  GodlyAvatarBuddhaAdd = (1000 - MiscellaneousVars[235]) / 12;
  MiscellaneousVars[235] += GodlyAvatarBuddhaAdd;
  if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [OomphCheck]");
 }

 // Acceleratle (16.67% of remaining amount uncovered)
 if (PowerupTimer[12] > 0)
 {
  GodlyAvatarBuddhaAdd = (1000 - MiscellaneousVars[235]) / 6;
  MiscellaneousVars[235] += GodlyAvatarBuddhaAdd;
  if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [AccelCheck]");
 }
 // Deceleratle (-8.33% of remaining amount uncovered)
 if (PowerupTimer[15] > 0)
 {
  GodlyAvatarBuddhaAdd = (1000 - MiscellaneousVars[235]) / 12;
  MiscellaneousVars[235] -= GodlyAvatarBuddhaAdd;
  if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [DecelCheck]");
 }

 // [STRIFE-Compatibility] Stamina Upgrades
 PerkFactor = (MiscellaneousVars[317] * 11);
 MiscellaneousVars[235] += PerkFactor; // [STRIFE-Compatibility] Stamina Upgrades
 if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0) PrintBold(s:"Crit Rate %: ",d:MiscellaneousVars[235],s:" [STRIFEStamCheck]");

 //PrintBold(d:MiscellaneousVars[235]);
 BuddhaRNGVal = random (1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]
 if (MiscellaneousVars[235] < 1) MiscellaneousVars[235] = 1;
 if (BuddhaRNGVal <= MiscellaneousVars[235]) GiveActorInventory(1001,"DealCriticalHit", 1);
 else TakeActorInventory(1001,"DealCriticalHit", 1);
 if (GetCVar("dvdsdebug_showcriticalhitstuff") > 0)
 {
  if (BuddhaRNGVal <= MiscellaneousVars[235])
  {
   PrintBold(s:"\c[green]Critical Hit Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[green]Critical Hit Chance % - ",d:MiscellaneousVars[235]);
  }
  else
  {
   PrintBold(s:"\c[red]Critical Hit Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[red]Critical Hit Chance % - ",d:MiscellaneousVars[235]);
  }
 }

 //**********************************************************
 //**********************************************************
 //**********************************************************
 //** Hellcore Cooldown Process [25 tics = 1% of cooldown] **
 //**********************************************************
 //**********************************************************
 //**********************************************************
 if (HellcoreOverheatLevel > 0 && GetActorProperty(1001,APROP_HEALTH) > 0)
 {
  HellcoreCoolRatio = 4; // 25 tics = 100 units [or 1% cooldown], so 1 tic = 4 units (or 0.04% cooldown)

  // Dove Ribbon quickly cools down Hellcore meter.
  if (CheckActorInventory(1001,"DoveRibbon") > 0) HellcoreCoolRatio *= 3;

  // Divine Avatar speeds up cooldown by 50%
  if (PowerupTimer[7] > 0) HellcoreCoolRatio = HellcoreCoolRatio * 3 / 2;

  // Fatigue = 0.2x cooldown speed
  if (PowerupTimer[18] > 0) HellcoreCoolRatio /= 5;

  // Sleep VERY quickly cools down Hellcore meter.
  if (PowerupTimer[20] > 0) HellcoreCoolRatio *= 5; 

  // Check Hellcore Cooldown Multiplier in Options
  HellcoreCoolRatio = (HellcoreCoolRatio * MiscellaneousVars[131]) / 100;
  if (HellcoreCoolRatio < 1) HellcoreCoolRatio = 1;

  if (CheckActorInventory(1001,"IsHaSatanNow") > 0) HellcoreCoolRatio = HellcoreCoolRatio * 16;

  HellcoreOverheatLevel -= HellcoreCoolRatio;
 }
 if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

 // Converts Hellcore Timer to % format for HUD display
 HellcorePercentFull = HellcoreOverheatLevel / 100;
 if (HellcorePercentFull < 0) HellcorePercentFull = 0;
 if (HellcorePercentFull > 1000) HellcorePercentFull = 1000;

 H1 = 0;
 SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
 if (CheckWeapon("ImpClaw") == 1) H1 += 1;
 if (CheckWeapon("DarkImpClaw") == 1) H1 += 1; 
 if (CheckWeapon("CacodemonEye") == 1) H1 += 1; 
 if (CheckWeapon("CacolanternEye") == 1) H1 += 1; 
 if (CheckWeapon("AbaddonEye") == 1) H1 += 1; 
 if (CheckWeapon("KnightFist") == 1) H1 += 1; 
 if (CheckWeapon("BaronFist") == 1) H1 += 1; 
 if (CheckWeapon("BelphegorFist") == 1) H1 += 1; 
 if (CheckWeapon("BruiserFist") == 1) H1 += 1; 
 if (CheckWeapon("ArchonFist") == 1) H1 += 1; 
 if (CheckWeapon("PyroFist") == 1) H1 += 1; 
 if (CheckWeapon("IncarnateSkull") == 1) H1 += 1; 
 if (CheckWeapon("ArchvileHand") == 1) H1 += 1; 
 if (CheckWeapon("DiabloistHand") == 1) H1 += 1; 
 if (CheckWeapon("BalrogFist") == 1) H1 += 1; 
 if (H1 > 0) { GiveActorInventory(1001,"FloraUsingHellcoreWeapon", 1); } else { TakeActorInventory(1001,"FloraUsingHellcoreWeapon", 1); }
 SetActivator(0); // Set back to worldly activator at the end of weapon checking.


 if (CharacterClass == 2) 
 {
  TakeActorInventory(1001,"FloraHellcoreNotOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore25PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore50PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore75PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore100PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore250PercentOverheated", 1);

  if (HellcoreOverheatLevel < 2500) GiveActorInventory(1001,"FloraHellcoreNotOverheated", 1);
  if (HellcoreOverheatLevel > 2499 && HellcoreOverheatLevel < 5000) GiveActorInventory(1001,"FloraHellcore25PercentOverheated", 1);
  if (HellcoreOverheatLevel > 4999 && HellcoreOverheatLevel < 7500) GiveActorInventory(1001,"FloraHellcore50PercentOverheated", 1);
  if (HellcoreOverheatLevel > 7499 && HellcoreOverheatLevel < 10000) GiveActorInventory(1001,"FloraHellcore75PercentOverheated", 1);
  if (HellcoreOverheatLevel > 9999 && HellcoreOverheatLevel < 25000) GiveActorInventory(1001,"FloraHellcore100PercentOverheated", 1);
  if (HellcoreOverheatLevel > 24999) GiveActorInventory(1001,"FloraHellcore250PercentOverheated", 1);
 }

 // Melee Weapon Inv Check
 H1 = 0;
 SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
 if (CheckWeapon("Fist") == 1) H1 += 1;
 if (CheckWeapon("FistInvisible") == 1) H1 += 1;
 if (CheckWeapon("FistDeggaris") == 1) H1 += 1; 
 if (CheckWeapon("FistIllucia") == 1) H1 += 1; 
 if (CheckWeapon("FistFlora") == 1) H1 += 1; 
 if (CheckWeapon("SauronGauntlets") == 1) H1 += 1; 
 if (CheckWeapon("SauronGauntletsIllucia") == 1) H1 += 1; 
 if (CheckWeapon("SauronGauntletsFlora") == 1) H1 += 1; 
 if (CheckWeapon("SceptreOfEmpyrea") == 1) H1 += 1; 
 if (CheckWeapon("Chainsaw") == 1) H1 += 1; 
 if (CheckWeapon("Chainsaw2") == 1) H1 += 1; 
 if (CheckWeapon("DoubleBladedChainsaw") == 1) H1 += 1; 
 if (H1 > 0) { GiveActorInventory(1001,"UsingMeleeWeapon", 1); } else { TakeActorInventory(1001,"UsingMeleeWeapon", 1); }
 SetActivator(0); // Set back to worldly activator at the end of weapon checking.



 //*****************************
 //*****************************
 //** Aeon Point Distribution **
 //*****************************
 //*****************************

 int AeonBonusChecker = GetCVar("dvds_aeonpointbonus");
 //if (ModType == 0 && GetCVar("dvds_aeonpointbonus") != 0) AeonBonusChecker = 0; // If in Classic Mode and the Aeon Point bonus option is off, don't check counts
 if (AeonBonusChecker == 1)
 {
  // Kills
  MiscellaneousVars[63] = 0;
  for (i = 0; i < 51; i++) { MiscellaneousVars[63] += MonstersKilled[i]; }
  MiscellaneousVars[61] = MiscellaneousVars[63] / GetCVar("dvds_killsforaeonpts");

  if (MiscellaneousVars[62] < MiscellaneousVars[61])
  {
   MiscellaneousVars[25] += 1; MiscellaneousVars[224] += 1; MiscellaneousVars[2033] = 105;
   MiscellaneousVars[62] += 1;
 
   if (PlayerLevel >= MiscellaneousVars[197])
   {
    SetHudSize(0,0,0);
    HudMessage(s:"You have gained 1 Aeon Point for killing enough monsters!\n\nRemember to allocate your Aeon Points as soon as possible...";
    HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
   }
  }

  // Secrets
  MiscellaneousVars[64] = 0;
  for (i = 0; i < 51; i++) { MiscellaneousVars[64] += SecretsFound[i]; }
  MiscellaneousVars[59] = MiscellaneousVars[64] / GetCVar("dvds_secretsforaeonpts");
 
  if (MiscellaneousVars[60] < MiscellaneousVars[59])
  {
   MiscellaneousVars[25] += 1; MiscellaneousVars[224] += 1; MiscellaneousVars[2033] = 105;
   MiscellaneousVars[60] += 1;
 
   if (PlayerLevel >= MiscellaneousVars[197])
   {
    SetHudSize(0,0,0);
    HudMessage(s:"You have gained 1 Aeon Point for finding enough secrets!\n\nRemember to allocate your Aeon Points as soon as possible...";
    HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
   }
  }
 
  // Items
  MiscellaneousVars[56] = 0;
  for (i = 0; i < 51; i++) { MiscellaneousVars[56] += ItemsFound[i]; }
  MiscellaneousVars[57] = MiscellaneousVars[56] / GetCVar("dvds_itemsforaeonpts");
 
  if (MiscellaneousVars[58] < MiscellaneousVars[57])
  {
   MiscellaneousVars[25] += 1; MiscellaneousVars[224] += 1; MiscellaneousVars[2033] = 105;
   MiscellaneousVars[58] += 1;
 
   if (PlayerLevel >= MiscellaneousVars[197])
   {
    SetHudSize(0,0,0);
    HudMessage(s:"You have gained 1 Aeon Point for finding enough special items!\n\nRemember to allocate your Aeon Points as soon as possible...";
    HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
   }
  }
 }

/*
 PrintBold(s:"Kills: ",d:MiscellaneousVars[63],s:" / ",d:GetCVar("dvds_killsforaeonpts"),s:"\n",
           s:"Secrets: ",d:MiscellaneousVars[64],s:" / ",d:GetCVar("dvds_secretsforaeonpts"),s:"\n",
           s:"Items: ",d:MiscellaneousVars[56],s:" / ",d:GetCVar("dvds_itemsforaeonpts"));
*/

 if (MiscellaneousVars[25] < 1) MiscellaneousVars[24] = 0;
 if (MiscellaneousVars[31] > 511 && MiscellaneousVars[32] > 511 && MiscellaneousVars[33] > 511 && MiscellaneousVars[34] > 511 && MiscellaneousVars[35] > 511 && MiscellaneousVars[36] > 511) MiscellaneousVars[24] = 0;

 // Inventory Items Check [death-exits]
 if (MiscellaneousVars[149] != 1) // If the check is not on, acculmate the ArmorBits as per the norm.
 {
  MiscellaneousVars[214] = CheckActorInventory(1001,"MedicinalHerb");
  MiscellaneousVars[215] = CheckActorInventory(1001,"StrongMedicine");
  MiscellaneousVars[216] = CheckActorInventory(1001,"SpecialMedicine");
  MiscellaneousVars[217] = CheckActorInventory(1001,"YggdrasilDew");
  MiscellaneousVars[218] = CheckActorInventory(1001,"PaxaPunch");
  MiscellaneousVars[219] = CheckActorInventory(1001,"LesserVimstone");
  MiscellaneousVars[220] = CheckActorInventory(1001,"GreaterVimstone");
  MiscellaneousVars[221] = CheckActorInventory(1001,"MercuryBandana");
 }
 else
 {
  if (GetCvar("dvds_pistolrestart_allkeepinventoryitems") > 0)
  {
   SetActorInventory(1001,"GreaterVimstone",MiscellaneousVars[220]);
   if (CheckActorInventory(1001,"GreaterVimstone") == 0) { GiveActorInventory(1001,"GreaterVimstone",1);  TakeActorInventory(1001,"GreaterVimstone",1); }

   SetActorInventory(1001,"LesserVimstone",MiscellaneousVars[219]);
   if (CheckActorInventory(1001,"LesserVimstone") == 0) { GiveActorInventory(1001,"LesserVimstone",1);  TakeActorInventory(1001,"LesserVimstone",1); }

   SetActorInventory(1001,"MercuryBandana",MiscellaneousVars[221]);
   if (CheckActorInventory(1001,"MercuryBandana") == 0) { GiveActorInventory(1001,"MercuryBandana",1);  TakeActorInventory(1001,"MercuryBandana",1); }

   SetActorInventory(1001,"PaxaPunch",MiscellaneousVars[218]);
   if (CheckActorInventory(1001,"PaxaPunch") == 0) { GiveActorInventory(1001,"PaxaPunch",1);  TakeActorInventory(1001,"PaxaPunch",1); }

   SetActorInventory(1001,"YggdrasilDew",MiscellaneousVars[217]);
   if (CheckActorInventory(1001,"YggdrasilDew") == 0) { GiveActorInventory(1001,"YggdrasilDew",1);  TakeActorInventory(1001,"YggdrasilDew",1); }

   SetActorInventory(1001,"SpecialMedicine",MiscellaneousVars[216]);
   if (CheckActorInventory(1001,"SpecialMedicine") == 0) { GiveActorInventory(1001,"SpecialMedicine",1);  TakeActorInventory(1001,"SpecialMedicine",1); }

   SetActorInventory(1001,"StrongMedicine",MiscellaneousVars[215]);
   if (CheckActorInventory(1001,"StrongMedicine") == 0) { GiveActorInventory(1001,"StrongMedicine",1);  TakeActorInventory(1001,"StrongMedicine",1); }

   SetActorInventory(1001,"MedicinalHerb",MiscellaneousVars[214]);
   if (CheckActorInventory(1001,"MedicinalHerb") == 0) { GiveActorInventory(1001,"MedicinalHerb",1);  TakeActorInventory(1001,"MedicinalHerb",1); }
  }
 }

 int WeaponBits = 0;
 if (MiscellaneousVars[149] != 1) // If the check is not on, acculmate the ArmorBits as per the norm.
 {
  if (CharacterClass == 2) // Flora
  {
   // Slot 1
   if (CheckActorInventory(1001,"FistFlora")) WeaponBits += 1;
   if (CheckActorInventory(1001,"SceptreOfEmpyrea")) WeaponBits += 2;
   // Slot 3
   if (CheckActorInventory(1001,"DiarisLongBow")) WeaponBits += 4;
   MiscellaneousVars[156] = CheckActorInventory(1001,"DiarisArrow");
   // Slot 4
   if (CheckActorInventory(1001,"ImpClaw")) WeaponBits += 8;
   if (CheckActorInventory(1001,"DarkImpClaw")) WeaponBits += 16;
   if (CheckActorInventory(1001,"CacodemonEye")) WeaponBits += 32;
   if (CheckActorInventory(1001,"CacolanternEye")) WeaponBits += 64;
   if (CheckActorInventory(1001,"AbaddonEye")) WeaponBits += 128;
   // Slot 5
   if (CheckActorInventory(1001,"KnightFist")) WeaponBits += 256;
   if (CheckActorInventory(1001,"BaronFist")) WeaponBits += 512;
   if (CheckActorInventory(1001,"BelphegorFist")) WeaponBits += 1024;
   if (CheckActorInventory(1001,"BruiserFist")) WeaponBits += 2048;
   if (CheckActorInventory(1001,"ArchonFist")) WeaponBits += 4096;
   if (CheckActorInventory(1001,"PyroFist")) WeaponBits += 8192;
   // Slot 6
   if (CheckActorInventory(1001,"IncarnateSkull")) WeaponBits += 16384;
   if (CheckActorInventory(1001,"ArchvileHand")) WeaponBits += 32768;
   if (CheckActorInventory(1001,"DiabloistHand")) WeaponBits += 65536;
   if (CheckActorInventory(1001,"BalrogFist")) WeaponBits += 131072;
  }
  else // Marines
  {
   // Slot 1
   if (CharacterClass == 0 && CheckActorInventory(1001,"FistDeggaris")) WeaponBits += 1;
   if (CharacterClass == 1 && CheckActorInventory(1001,"FistIllucia")) WeaponBits += 1;
   if (CheckActorInventory(1001,"Chainsaw2") > 0) WeaponBits += 2;
   if (CheckActorInventory(1001,"DoubleBladeChainsaw") > 0) WeaponBits += 4;
   // Slot 2
   if (CheckActorInventory(1001,"Pistol2") > 0) WeaponBits += 8;
   if (CheckActorInventory(1001,"DualPistols") > 0) WeaponBits += 16;
   // Slot 3
   if (CheckActorInventory(1001,"Shotgun2") > 0) WeaponBits += 32;
   if (CheckActorInventory(1001,"SuperShotgun2") > 0) WeaponBits += 64;
   // Slot 4
   if (CheckActorInventory(1001,"Chaingun2") > 0) WeaponBits += 128;
   if (CheckActorInventory(1001,"Minigun") > 0) WeaponBits += 256;
   // Slot 5
   if (CheckActorInventory(1001,"RocketLauncher2") > 0) WeaponBits += 512;
   // Slot 6
   if (CheckActorInventory(1001,"PlasmaRifle2") > 0) WeaponBits += 1024;
   if (CheckActorInventory(1001,"Repeater2") > 0) WeaponBits += 2048;
   if (CheckActorInventory(1001,"KaraSawa2") > 0) WeaponBits += 4096;
   // Slot 7
   if (CheckActorInventory(1001,"BFG90002") > 0) WeaponBits += 8192;
  }
  MiscellaneousVars[151] = WeaponBits;
  MiscellaneousVars[152] = CheckActorInventory(1001,"Clip");
  MiscellaneousVars[153] = CheckActorInventory(1001,"Shell");
  MiscellaneousVars[154] = CheckActorInventory(1001,"RocketAmmo");
  MiscellaneousVars[155] = CheckActorInventory(1001,"Cell");
 }
 else // If detected from a resurgence-style pistol-restart, give back any weapons previously accumlated [and anyone the Sauron Equipment they accumlated]
 {
  if (ClassCheck >= 6)
  {
   WeaponBits = MiscellaneousVars[151];
   if (CharacterClass == 2) // Flora
   {
    // Slot 1
    if (WeaponBits & 1) GiveActorInventory(1001,"FistFlora",1);
    if (WeaponBits & 2) GiveActorInventory(1001,"SceptreOfEmpyrea",1);
    if (GetCvar("dvds_pistolrestart_florakeepdiarisbow") > 0)
    {
     // Slot 3
     if (WeaponBits & 4) GiveActorInventory(1001,"DiarisLongBow",1);
     SetActorInventory(1001,"DiarisArrow",MiscellaneousVars[156]);
    }
    if (GetCvar("dvds_pistolrestart_florakeephellcore") > 0)
    {
     // Slot 4
     if (WeaponBits & 8) GiveActorInventory(1001,"ImpClaw",1);
     if (WeaponBits & 16) GiveActorInventory(1001,"DarkImpClaw",1);
     if (WeaponBits & 32) GiveActorInventory(1001,"CacodemonEye",1);
     if (WeaponBits & 64) GiveActorInventory(1001,"CacolanternEye",1);
     if (WeaponBits & 128) GiveActorInventory(1001,"AbaddonEye",1);
     // Slot 5
     if (WeaponBits & 256) GiveActorInventory(1001,"KnightFist",1);
     if (WeaponBits & 512) GiveActorInventory(1001,"BaronFist",1);
     if (WeaponBits & 1024) GiveActorInventory(1001,"BelphegorFist",1);
     if (WeaponBits & 2048) GiveActorInventory(1001,"BruiserFist",1);
     if (WeaponBits & 4096) GiveActorInventory(1001,"ArchonFist",1);
     if (WeaponBits & 8192) GiveActorInventory(1001,"PyroFist",1);
     // Slot 6
     if (WeaponBits & 16384) GiveActorInventory(1001,"IncarnateSkull",1);
     if (WeaponBits & 32768) GiveActorInventory(1001,"ArchvileHand",1);
     if (WeaponBits & 65536) GiveActorInventory(1001,"DiabloistHand",1);
     if (WeaponBits & 131072) GiveActorInventory(1001,"BalrogFist",1);
    }
   }
   else // Marines
   {
    // Slot 1
    if (WeaponBits & 1 && CharacterClass == 0) GiveActorInventory(1001,"FistDeggaris",1);
    if (WeaponBits & 1 && CharacterClass == 1) GiveActorInventory(1001,"FistIllucia",1);
    if (GetCvar("dvds_pistolrestart_marineskeepweapons") > 0)
    {
     // Slot 1
     if (WeaponBits & 2) GiveActorInventory(1001,"Chainsaw2",1);
     if (WeaponBits & 4) GiveActorInventory(1001,"DoubleBladedChainsaw",1);
     // Slot 2
     if (WeaponBits & 8) GiveActorInventory(1001,"Pistol2",1);
     if (WeaponBits & 16) GiveActorInventory(1001,"DualPistols",1);
     // Slot 3
     if (WeaponBits & 32) GiveActorInventory(1001,"Shotgun2",1);
     if (WeaponBits & 64) GiveActorInventory(1001,"SuperShotgun2",1);
     // Slot 4
     if (WeaponBits & 128) GiveActorInventory(1001,"Chaingun2",1);
     if (WeaponBits & 256) GiveActorInventory(1001,"Minigun",1);
     // Slot 5
     if (WeaponBits & 512) GiveActorInventory(1001,"RocketLauncher2",1);
     // Slot 6
     if (WeaponBits & 1024) GiveActorInventory(1001,"PlasmaRifle2",1);
     if (WeaponBits & 2048) GiveActorInventory(1001,"Repeater2",1);
     if (WeaponBits & 4096) GiveActorInventory(1001,"KaraSawa2",1);
     // Slot 7
     if (WeaponBits & 8192) GiveActorInventory(1001,"BFG90002",1);
    }
    if (GetCvar("dvds_pistolrestart_marineskeepammo") > 0)
    {
     SetActorInventory(1001,"Clip",MiscellaneousVars[152]);
     SetActorInventory(1001,"Shell",MiscellaneousVars[153]);
     SetActorInventory(1001,"RocketAmmo",MiscellaneousVars[154]);
     SetActorInventory(1001,"Cell",MiscellaneousVars[155]);
    }
   }
  }
 }

 ArmorBits = 0;
 if (CharacterClass != 2)
 {
  if (MiscellaneousVars[149] != 1) // If the check is not on, acculmate the ArmorBits as per the norm.
  {
   MiscellaneousVars[150] = ArmorBits;
   if (CheckActorInventory(1001,"SauronHelmet") > 0) MiscellaneousVars[150] += 4096;
   if (CheckActorInventory(1001,"SauronGauntlets") > 0) MiscellaneousVars[150] += 8192;
   if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) MiscellaneousVars[150] += 16384;
   if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) MiscellaneousVars[150] += 32768;
   if (CheckActorInventory(1001,"TheOneRing") > 0) MiscellaneousVars[150] += 65536;
  }
  else
  {
   if (GetCvar("dvds_pistolrestart_allkeepsauronequip") > 0)
   {
    if (MiscellaneousVars[150] & 4096) { GiveActorInventory(1001, "SauronHelmet", 1); }
    if (MiscellaneousVars[150] & 8192) { GiveActorInventory(1001, "SauronGauntlets", 1); }
    if (MiscellaneousVars[150] & 16384) { GiveActorInventory(1001, "SauronGauntletsIllucia", 1); }
    if (MiscellaneousVars[150] & 32768) { GiveActorInventory(1001, "SauronGauntletsFlora", 1); }
    if (MiscellaneousVars[150] & 65536) { GiveActorInventory(1001, "TheOneRing", 1); }
   }
  }
 }

 int PerkBitfield = 0;
 // Perk BitField Checks
  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   PerkBitfield = 0;
   if (MiscellaneousVars[10001] >= 1) PerkBitfield += 1;
   if (MiscellaneousVars[10001] >= 2) PerkBitfield += 2;
   if (MiscellaneousVars[10001] >= 3) PerkBitfield += 4;
   if (MiscellaneousVars[10001] >= 4) PerkBitfield += 8;
   if (MiscellaneousVars[10001] >= 5) PerkBitfield += 16;
   if (MiscellaneousVars[10002] >= 1) PerkBitfield += 32;
   if (MiscellaneousVars[10002] >= 2) PerkBitfield += 64;

   str LifeUpPerkItem;
   if (PerkBitfield != MiscellaneousVars[9801]) // [9801] is for checking LifeUp BitFields
   {
    for (i = 0; i < 128; i++)
    {
     LifeUpPerkItem = StrParam(s:"LifeUpDEFBits", d:i);
 
     if (PerkBitfield == i)
     GiveActorInventory(1001, LifeUpPerkItem, 1);
      else
     TakeActorInventory(1001, LifeUpPerkItem, 1);
    }
    MiscellaneousVars[9801] = PerkBitfield;
   }
  }
  else
  {
   MiscellaneousVars[9801] = 0; // Resets to 0 on Death [because of Resurge.wad style pistol-resets :P]
  }
 
  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   PerkBitfield = 0;
   if (MiscellaneousVars[10003] >= 1) PerkBitfield += 1;
   if (MiscellaneousVars[10003] >= 2) PerkBitfield += 2;
   if (MiscellaneousVars[10003] >= 3) PerkBitfield += 4;
   if (MiscellaneousVars[10003] >= 4) PerkBitfield += 8;
   if (MiscellaneousVars[10003] >= 5) PerkBitfield += 16;
   if (MiscellaneousVars[10004] >= 1) PerkBitfield += 32;
   if (MiscellaneousVars[10004] >= 2) PerkBitfield += 64;

   str MagiUpPerkItem;
   if (PerkBitfield != MiscellaneousVars[9802]) // [9802] is for checking MagiUp BitFields
   {
    for (i = 0; i < 128; i++)
    {
     MagiUpPerkItem = StrParam(s:"MagiUpATKBits", d:i);
 
     if (PerkBitfield == i)
     GiveActorInventory(1001, MagiUpPerkItem, 1);
      else
     TakeActorInventory(1001, MagiUpPerkItem, 1);
    }
    MiscellaneousVars[9802] = PerkBitfield;
   }
  }
  else
  {
   MiscellaneousVars[9802] = 0; // Resets to 0 on Death [because of Resurge.wad style pistol-resets :P]
  }
 
  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   PerkBitfield = 0;
   if (MiscellaneousVars[10005] >= 1) PerkBitfield += 1;
   if (MiscellaneousVars[10005] >= 2) PerkBitfield += 2;
   if (MiscellaneousVars[10005] >= 3) PerkBitfield += 4;
   if (MiscellaneousVars[10005] >= 4) PerkBitfield += 8;
   if (MiscellaneousVars[10005] >= 5) PerkBitfield += 16;
   if (MiscellaneousVars[10006] >= 1) PerkBitfield += 32;
   if (MiscellaneousVars[10006] >= 2) PerkBitfield += 64;

   str StamUpPerkItem;
   if (PerkBitfield != MiscellaneousVars[9803]) // [9803] is for checking StamUp BitFields
   {
    for (i = 0; i < 128; i++)
    {
     StamUpPerkItem = StrParam(s:"StamUpATKBits", d:i);
 
     if (PerkBitfield == i)
     GiveActorInventory(1001, StamUpPerkItem, 1);
      else
     TakeActorInventory(1001, StamUpPerkItem, 1);
    }
    MiscellaneousVars[9803] = PerkBitfield;
   }
  }
  else
  {
   MiscellaneousVars[9803] = 0; // Resets to 0 on Death [because of Resurge.wad style pistol-resets :P]
  }
 

 //***************************************************************************
 //***************************************************************************
 //************* Armor Stuff for DVII-DS's armor items :P ********************
 //** Note: ONLY FLORA [(CharacterClass == 2)] CAN USE THESE ITEMS LEGALLY. **
 //***************************************************************************
 //***************************************************************************
 ArmorBits = 0;
 FloraArmorClass = 0;
 if (CharacterClass == 2)
 {
  // These 11 items are all part of a bitfield
  // "FloraArmorClass" is mainly for a display purpose on the HUD than it having an actual affect on the damage taken.
  // The "PermenantArmorBits[#]" items in the section below are the actual mechanic that gives her resistances to damage].
  if (MiscellaneousVars[149] != 1) // If the check is not on, acculmate the ArmorBits as per the norm.
  {
   if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { ArmorBits += 1; FloraArmorClass += 3; } // Item 1
   if (CheckActorInventory(1001,"PearlyCorset") > 0) { ArmorBits += 2; FloraArmorClass += 7; } // Item 2
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { ArmorBits += 4; FloraArmorClass += 8; } // Item 3
   if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { ArmorBits += 8; FloraArmorClass += 2; } // Item 4
   if (CheckActorInventory(1001,"CloakofEvasion") > 0) { ArmorBits += 16; FloraArmorClass += 4; } // Item 5
   if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { ArmorBits += 32; FloraArmorClass += 5; } // Item 6
   if (CheckActorInventory(1001,"KissaBra") > 0) { ArmorBits += 64; FloraArmorClass += 6; } // Item 7
   if (CheckActorInventory(1001,"DivineShield") > 0) { ArmorBits += 128; FloraArmorClass += 16; } // Item 8
   if (CheckActorInventory(1001,"BalrogRing") > 0) { ArmorBits += 256; FloraArmorClass += 2; } // Item 9
   if (CheckActorInventory(1001,"DoveRibbon") > 0) { ArmorBits += 512; FloraArmorClass += 9; } // Item 10
   if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { ArmorBits += 1024; FloraArmorClass += 5; } // Item 11
   MiscellaneousVars[150] = ArmorBits;
   if (CheckActorInventory(1001,"RuinousShield") > 0) MiscellaneousVars[150] += 2048;
   if (CheckActorInventory(1001,"SauronHelmet") > 0) MiscellaneousVars[150] += 4096;
   if (CheckActorInventory(1001,"SauronGauntlets") > 0) MiscellaneousVars[150] += 8192;
   if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) MiscellaneousVars[150] += 16384;
   if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) MiscellaneousVars[150] += 32768;
   if (CheckActorInventory(1001,"TheOneRing") > 0) MiscellaneousVars[150] += 65536;
  }
  else // If detected from a resurgence-style pistol-restart, give Flora back any armor she previously accumlated [and anyone the Sauron Equipment they accumlated]
  {
   //PrintBold(d:ArmorBits);
   ArmorBits = MiscellaneousVars[150];
   if (GetCvar("dvds_pistolrestart_florakeeparmor") > 0)
   {
    if (ArmorBits & 1) { GiveActorInventory(1001, "SafeTeaShoes", 1); FloraArmorClass += 3; }
    if (ArmorBits & 2) { GiveActorInventory(1001, "PearlyCorset", 1); FloraArmorClass += 7; }
    if (ArmorBits & 4) { GiveActorInventory(1001, "WaterFlyingDress", 1); FloraArmorClass += 8; }
    if (ArmorBits & 8) { GiveActorInventory(1001, "EvenstarNecklace", 1); FloraArmorClass += 2; }
    if (ArmorBits & 16) { GiveActorInventory(1001, "CloakofEvasion", 1); FloraArmorClass += 4; }
    if (ArmorBits & 32) { GiveActorInventory(1001, "AnubisCufflinks", 1); FloraArmorClass += 5; }
    if (ArmorBits & 64) { GiveActorInventory(1001, "KissaBra", 1); FloraArmorClass += 6; }
    if (ArmorBits & 128) { GiveActorInventory(1001, "DivineShield", 1); FloraArmorClass += 16; }
    if (ArmorBits & 256) { GiveActorInventory(1001, "BalrogRing", 1); FloraArmorClass += 2; }
    if (ArmorBits & 512) { GiveActorInventory(1001, "DoveRibbon", 1); FloraArmorClass += 9; }
    if (ArmorBits & 1024) { GiveActorInventory(1001, "FalconKnifeEarrings", 1); FloraArmorClass += 5; }
    if (MiscellaneousVars[150] & 2048) { GiveActorInventory(1001, "RuinousShield", 1); }
   }
   if (GetCvar("dvds_pistolrestart_allkeepsauronequip") > 0)
   {
    if (MiscellaneousVars[150] & 4096) { GiveActorInventory(1001, "SauronHelmet", 1); }
    if (MiscellaneousVars[150] & 8192) { GiveActorInventory(1001, "SauronGauntlets", 1); }
    if (MiscellaneousVars[150] & 16384) { GiveActorInventory(1001, "SauronGauntletsIllucia", 1); }
    if (MiscellaneousVars[150] & 32768) { GiveActorInventory(1001, "SauronGauntletsFlora", 1); }
    if (MiscellaneousVars[150] & 65536) { GiveActorInventory(1001, "TheOneRing", 1); }
   }
  }

  // Ruinous Shield is Cursed, so it acts seperately. (do note the Cursed Shield gives penalties which are only called bonuses in a techincal sense)
  if (CheckActorInventory(1001,"RuinousShield") > 0) { GiveActorInventory(1001,"CursedShieldBonusATK", 1); GiveActorInventory(1001,"CursedShieldBonusDEF", 1); FloraArmorClass = FloraArmorClass * 100 / 256; } else { TakeActorInventory(1001,"CursedShieldBonusATK", 1); TakeActorInventory(1001,"CursedShieldBonusDEF", 1); } // Item 12

  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   str ArmorBitsItem;
   // REVISED: Changed If statements info a for block for the Armor Bitfield (7/3/12)
   if (ArmorBits != MiscellaneousVars[1]) // [1] is for checking Flora's Armor Bitfield so it doesn't have to run EVERY tic and lag the game too badly.
   {
    for (i = 0; i < 2048; i++)
    {
     ArmorBitsItem = StrParam(s:"PermenantArmorBits", d:i);
 
     if (ArmorBits == i)
     GiveActorInventory(1001, ArmorBitsItem, 1);
      else
     TakeActorInventory(1001, ArmorBitsItem, 1);
    }
    MiscellaneousVars[1] = ArmorBits;
   }
  }
  else
  {
   MiscellaneousVars[1] = 0; // Resets to 0 on Death [because of Resurge.wad style pistol-resets :P]
  }

  // Safe Tea Boots [25% chance of damagefloor/ironfeet guard during normal incursion of damage]
  // Cloak of Evasion [12.5% chance of damagefloor/ironfeet guard during normal incursion of damage]
  IronFeetChance = 0;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) IronFeetChance += 250;
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) IronFeetChance += 125;
  if (IronFeetChance > 1000) IronFeetChance = 1000;
  if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) TakeActorInventory(1001,"FloraArmorFloorGuard", 1);   
  if (random(1,1000) <= IronFeetChance && CheckActorInventory(1001,"FloraArmorFloorGuard") < 1) GiveActorInventory(1001,"FloraArmorFloorGuard", 1);

  FearChance = 200;
  if (CheckActorInventory(1001,"TheOneRing") > 0) FearChance = FearChance * 5 / 3;
  // Anubis Cufflinks [20% (33.3% with One Ring) chance of brief fear-effect on all hostile creatures with attacks]
  if (CheckActorInventory(1001,"AnubisCufflinksFear") > 0) TakeActorInventory(1001,"AnubisCufflinksFear", 1);   
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0 && random(1,1000) <= FearChance && CheckActorInventory(1001,"AnubisCufflinksFear") < 1) GiveActorInventory(1001,"AnubisCufflinksFear", 1);

  // Damage Boosts from DVII-DS Armors
  Armor2Bits = 0;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) Armor2Bits += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Armor2Bits += 2;

  if (Armor2Bits == 1) GiveActorInventory(1001,"EvenstarNecklaceBoost", 1); else TakeActorInventory(1001,"EvenstarNecklaceBoost", 1);
  if (Armor2Bits == 2) GiveActorInventory(1001,"DoveRibbonDamage", 1); else TakeActorInventory(1001,"DoveRibbonDamage", 1);
  if (Armor2Bits == 3) GiveActorInventory(1001,"EvenstarDoveDamage", 1); else TakeActorInventory(1001,"EvenstarDoveDamage", 1);

  // Speed Boosts from DVII-DS Armors
  Armor3Bits = 0;
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) Armor3Bits += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Armor3Bits += 2;
  if (Armor3Bits == 1) GiveActorInventory(1001,"CloakofEvasionBoost", 1); else TakeActorInventory(1001,"CloakofEvasionBoost", 1);
  if (Armor3Bits == 2) GiveActorInventory(1001,"DoveRibbonSpeed", 1); else TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (Armor3Bits == 3) GiveActorInventory(1001,"EvasionDoveSpeed", 1); else TakeActorInventory(1001,"EvasionDoveSpeed", 1);


  // Falcon Knife Earrings [+50% extra damage overall]
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0)
  {
   if (CheckActorInventory(1001,"FalconKnifeDamage") < 1) GiveActorInventory(1001,"FalconKnifeDamage", 1);
  }
  else
  {
   if (CheckActorInventory(1001,"FalconKnifeDamage") > 0) TakeActorInventory(1001,"FalconKnifeDamage", 1);   
  }

  int DivineShieldBlock, DivineShieldBits;
  // Gets the Divine Shield's blocking ability and occurance rate
  if (CheckActorInventory(1001,"DivineShield") > 0)
  {
   DivineShieldBlock = 13;
   DivineShieldBits = 1;
   if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"PearlyCorset") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"CloakofEvasion") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"KissaBra") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"BalrogRing") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"DoveRibbon") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }

   if (random(1,100) <= DivineShieldBlock)
   {
    for (i = 0; i < 12; i++)
    {
     ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);

     if (DivineShieldBits == i)
      GiveActorInventory(1001, ArmorBitsItem, 1);
       else
      TakeActorInventory(1001, ArmorBitsItem, 1);
    }
   }
   else
   {
    for (i = 0; i < 12; i++)
    {
     ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);
     TakeActorInventory(1001, ArmorBitsItem, 1);
    }
   }
  }
 }
 else // If the items are detected on Deggaris or Illucia, take them away since they have no function on those two. :P
 {
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) TakeActorInventory(1001,"SafeTeaShoes", 1);
  if (CheckActorInventory(1001,"PearlyCorset") > 0) TakeActorInventory(1001,"PearlyCorset", 1);
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) TakeActorInventory(1001,"WaterFlyingDress", 1);
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) TakeActorInventory(1001,"EvenstarNecklace", 1);
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) TakeActorInventory(1001,"CloakofEvasion", 1);
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) TakeActorInventory(1001,"AnubisCufflinks", 1);
  if (CheckActorInventory(1001,"KissaBra") > 0) TakeActorInventory(1001,"KissaBra", 1);
  if (CheckActorInventory(1001,"DivineShield") > 0) TakeActorInventory(1001,"DivineShield", 1);
  if (CheckActorInventory(1001,"BalrogRing") > 0) TakeActorInventory(1001,"BalrogRing", 1);
  if (CheckActorInventory(1001,"DoveRibbon") > 0) TakeActorInventory(1001,"DoveRibbon", 1);
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) TakeActorInventory(1001,"FalconKnifeEarrings", 1);
  if (CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1);
  if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) TakeActorInventory(1001,"FloraArmorFloorGuard", 1);   
  if (CheckActorInventory(1001,"AnubisCufflinksFear") > 0) TakeActorInventory(1001,"AnubisCufflinksFear", 1);   
  if (CheckActorInventory(1001,"EvenstarNecklaceBoost") > 0) TakeActorInventory(1001,"EvenstarNecklaceBoost", 1);
  if (CheckActorInventory(1001,"DoveRibbonSpeed") > 0) TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (CheckActorInventory(1001,"EvenstarDoveDamage") > 0) TakeActorInventory(1001,"EvenstarDoveDamage", 1);
  if (CheckActorInventory(1001,"CloakofEvasionBoost") > 0) TakeActorInventory(1001,"CloakofEvasionBoost", 1);
  if (CheckActorInventory(1001,"DoveRibbonSpeed") > 0) TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (CheckActorInventory(1001,"EvasionDoveSpeed") > 0) TakeActorInventory(1001,"EvasionDoveSpeed", 1);
  if (CheckActorInventory(1001,"FalconKnifeDamage") > 0) TakeActorInventory(1001,"FalconKnifeDamage", 1);   
  for (i = 0; i < 12; i++)
  {
   ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);
   if (CheckActorInventory(1001, ArmorBitsItem) > 0) TakeActorInventory(1001, ArmorBitsItem, 1);
  }
 }


 int AglEvadeCheck;
 int DftEvadeCheck;
 // Evasion Rate (it actually sets the character's damagefactor to 0.0% to null all damage and makes them all but invulnerable to simulate the effect)
 // [23] is a character's 'Evasion' chance [out of 100.00%]

 // Set's The Base increase from each point of Agility
 if (CharacterClass == 0) { AglEvadeCheck = 9; DftEvadeCheck = 0; } // Deggaris
 if (CharacterClass == 1) { AglEvadeCheck = 10; DftEvadeCheck = 0; } // Illucia
 if (CharacterClass == 2) { AglEvadeCheck = 11; DftEvadeCheck = 0; } // Flora

 if (CheckActorInventory(1001,"SauronHelmet") > 0) { AglEvadeCheck += 1; DftEvadeCheck += 1; }
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CheckActorInventory(1001,"TheOneRing") > 0) { AglEvadeCheck += 6; DftEvadeCheck += 6; }

 MiscellaneousVars[23] = MiscellaneousVars[31] * AglEvadeCheck;
 MiscellaneousVars[23] += MiscellaneousVars[33] * DftEvadeCheck;
 MiscellaneousVars[23] /= 2;
 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [Base]");

 if (PowerupTimer[7] > 0) 
 {
  MiscellaneousVars[23] = MiscellaneousVars[23] * 7 / 4;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [DivineAvatarCheck]");
 }

 // DodgeMore perks
 PerkFactor = ((MiscellaneousVars[10007] * 250) + (MiscellaneousVars[10008] * 625));
 MiscellaneousVars[23] += PerkFactor; // "DodgeMore" and "DodgeMore EX" perks.
 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [DodgeMoreCheck]");

 // [STRIFE-Compatibility] Stamina Upgrades
 PerkFactor = (MiscellaneousVars[317] * 111);
 MiscellaneousVars[23] += PerkFactor; // [STRIFE-Compatibility] Stamina Upgrades
 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [STRIFEStamCheck]");

 // Checks Evasion Based on Level
 int LevelCheck;
 LevelCheck = PlayerLevel * 5;
 if (PowerupTimer[7] > 0) LevelCheck = LevelCheck * 7 / 5;
 MiscellaneousVars[23] += LevelCheck;
 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [LevelCheck]");

 if (CharacterClass == 2)
 {
  // Flora has Safe Tea Shoes? [+3.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) MiscellaneousVars[23] += 375;

  // Flora has Pearly Corset? [+0.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"PearlyCorset") > 0) MiscellaneousVars[23] += 75;

  // Flora has Water Flying Dress? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[23] += 125;

  // Flora has Evenstar Necklace? [+2.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) MiscellaneousVars[23] += 250;

  // Flora has Cloak of Evasion? [+12.50% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) MiscellaneousVars[23] += 1250;

  // Flora has Falcon Knife Earrings? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) MiscellaneousVars[23] += 125;

  // Flora has Anubis Cufflinks? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) MiscellaneousVars[23] += 50;

  // Flora has Kissa's Brasseire? [+1% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"KissaBra") > 0) MiscellaneousVars[23] += 100;

  // Flora has Balrog Ring? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"BalrogRing") > 0) MiscellaneousVars[23] += 50;

  // Flora has Dove Ribbon? [+1.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"DoveRibbon") > 0) MiscellaneousVars[23] += 175;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [FloraArmorCheck]");
 }

 // Someone has Sauron's Helmet [-1.56% Chance]
 if (CheckActorInventory(1001,"SauronHelmet") > 0) MiscellaneousVars[23] -= 156;

 // Someone has Sauron's Gauntlets [-1.56% Chance]
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) MiscellaneousVars[23] -= 156;
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) MiscellaneousVars[23] -= 156;
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) MiscellaneousVars[23] -= 156;

 // Someone has The One Ring [+6.25% Chance]
 if (CheckActorInventory(1001,"TheOneRing") > 0) MiscellaneousVars[23] += 625;

 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [SauronArmorCheck]");

 // Haste Buff [150% Evade]
 if (CheckActorInventory(1001,"HasteBuff") > 0)
 {
  MiscellaneousVars[23] = MiscellaneousVars[23] * 3 / 2;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [HasteCheck]");
 }

 // Slow Ailment [66.7% Evade]
 if (CheckActorInventory(1001,"SlowAilment") > 0)
 {
  MiscellaneousVars[23] = MiscellaneousVars[23] * 2 / 3;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [SlowCheck]");
 }

 if (CharacterClass == 2)
 {
  // Ruinous Shield [Evade reduced by 3/4s]
  if (CheckActorInventory(1001,"RuinousShield") > 0)
  {
   MiscellaneousVars[23] = MiscellaneousVars[23] / 4;
   if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [CursedShieldCheck]");
  }

  // Divine Shield [Evade Increased by 1/4ths]
  if (CheckActorInventory(1001,"DivineShield") > 0)
  {
   MiscellaneousVars[23] = MiscellaneousVars[23] * 5 / 4;
   if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [DivineShieldCheck]");
  }
 }

 // Caps Evasion Chances out at 75% [unless you have the Dove's Ribbon, which it caps at 92.5%]
 if (CheckActorInventory(1001,"DoveRibbon") > 0)
 {
  if (MiscellaneousVars[23] < 175) MiscellaneousVars[23] = 175;
  if (MiscellaneousVars[23] > 9250) MiscellaneousVars[23] = 9250;
 }
 else
 {
  if (MiscellaneousVars[23] < 0) MiscellaneousVars[23] = 0;
  if (MiscellaneousVars[23] > 7500) MiscellaneousVars[23] = 7500;
 }
 if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [DoveRibbonCheck]");

 int AccelEvadeAdd;
 // Acceleratle = +1/10 of remaining % Evasion added (done after caps are normally calculated)
 if (PowerupTimer[12] > 0)
 {
  AccelEvadeAdd = (10000 - MiscellaneousVars[23]) / 10;
  MiscellaneousVars[23] += AccelEvadeAdd;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [AccelCheck]");
 }

 // Deceleratle = -1/10 of remaining % Current Evasion removed (done after caps are normally calculated)
 if (PowerupTimer[15] > 0)
 {
  AccelEvadeAdd = MiscellaneousVars[23] / 10;
  MiscellaneousVars[23] -= AccelEvadeAdd;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [DecelCheck]");
 }

 int InvisEvadeAdd;
 // BlurSphere = +1/3 of remaining % Evasion added (done after caps are normally calculated) [in other words, make the Blur Sphere & Invisibility Spells actually USEFUL >__>;]
 if (CheckActorInventory(1001,"PowerInvisibility") > 0 | CheckActorInventory(1001,"InvisiblitySpell") > 0)
 {
  InvisEvadeAdd = (10000 - MiscellaneousVars[23]) / 3;
  MiscellaneousVars[23] += InvisEvadeAdd;
  if (GetCVar("dvdsdebug_showevadestuff") > 0) PrintBold(s:"Evasion Rate %: ",d:MiscellaneousVars[23],s:" [InvisCheck]");
 }

 // For the Status Bar (Only shows an int value, not a floating point amount)
 EvadeWhole = MiscellaneousVars[23] / 100;

 // Run Final RNG Check on Evasion
 BuddhaRNGVal = random(1,10000);
 if (BuddhaRNGVal <= MiscellaneousVars[23])
 {
  if (CheckActorInventory(1001,"EvadeAnAttack") < 1) GiveActorInventory(1001,"EvadeAnAttack", 1); // "Dodge/Null" the damage.
 }
 else
 {
  if (CheckActorInventory(1001,"EvadeAnAttack") > 0) TakeActorInventory(1001,"EvadeAnAttack", 1); // Damage will occur as normal   
 }
 if (GetCVar("dvdsdebug_showevadestuff") > 0)
 {
  if (BuddhaRNGVal <= MiscellaneousVars[23])
  {
   PrintBold(s:"\c[green]Evasion Rate Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[green]Evasion Rate Chance % - ",d:MiscellaneousVars[23]);
  }
  else
  {
   PrintBold(s:"\c[red]Evasion Rate Roll - ",d:BuddhaRNGVal,s:"\n",
             s:"\c[red]Evasion Rate Chance % - ",d:MiscellaneousVars[23]);
  }
 }

 //*****************************
 //**End DVII-DS Armor Testing**
 //*****************************

 // Check Sauron Equipment Directly
 if (CheckActorInventory(1001,"SauronHelmet") > 0) GiveActorInventory(1001,"HelmetDMGReduction", 1); else TakeActorInventory(1001,"HelmetDMGReduction", 1);

 if (CharacterClass == 0) // Deggaris's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { TakeActorInventory(1001,"SauronGauntletsIllucia", 9999); GiveActorInventory(1001,"SauronGauntlets", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { TakeActorInventory(1001,"SauronGauntletsFlora", 9999); GiveActorInventory(1001,"SauronGauntlets", 1); }
  if (CheckActorInventory(1001,"SauronGauntlets") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 if (CharacterClass == 1) // Illucia's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) { TakeActorInventory(1001,"SauronGauntlets", 9999); GiveActorInventory(1001,"SauronGauntletsIllucia", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { TakeActorInventory(1001,"SauronGauntletsFlora", 9999); GiveActorInventory(1001,"SauronGauntletsIllucia", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 if (CharacterClass == 2) // Flora's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) { TakeActorInventory(1001,"SauronGauntlets", 9999); GiveActorInventory(1001,"SauronGauntletsFlora", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { TakeActorInventory(1001,"SauronGauntletsIllucia", 9999); GiveActorInventory(1001,"SauronGauntletsFlora", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 
 if (CheckActorInventory(1001,"TheOneRing") > 0)
 {  
  GiveActorInventory(1001,"RingSpeedBonus", 1); // All characters get a speed bonus with the Ring
  GiveActorInventory(1001,"RingDMGBonus", 1); // All characters get a damage bonus with the Ring
  GiveActorInventory(1001,"RingDMGReduction", 1); // All characters get a defense bonus with the Ring
  GiveActorInventory(1001,"RingFullMap", 1); // All characters get a full automap with the Ring
  GiveActorInventory(1001,"RingScanner", 1); // All characters get a map scanner with the Ring
  if (CharacterClass == 0) GiveActorInventory(1001,"RingGhost", 1); // Deggaris becomes Ghostly like with the Ring
  if (CharacterClass == 1) GiveActorInventory(1001,"RingShadow", 1); // Illucia becomes Shadow like with the Ring 
 }
 else
 {
  TakeActorInventory(1001,"RingSpeedBonus", 1);
  TakeActorInventory(1001,"RingDMGBonus", 1);
  TakeActorInventory(1001,"RingDMGReduction", 1);
  TakeActorInventory(1001,"RingFullMap", 1);
  TakeActorInventory(1001,"RingScanner", 1);
  TakeActorInventory(1001,"RingGhost", 1);
  TakeActorInventory(1001,"RingShadow", 1);
 }

  // Infinite Ammo Chances
  int infammoreqremaining;
  int infammoneeded = 0;
  int infammoneeded2 = 0;

  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)		infammoneeded += 25; // +2.5% Chance
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)			infammoneeded += 40; // +4.0% Chance
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)		infammoneeded += 65; // +6.5% Chance
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)		infammoneeded += 100; // +10.0% Chance
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)		infammoneeded += 150; // +15.0% Chance
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)		infammoneeded += 250; // +25.0% Chance
  if (ModType != 0) infammoneeded = infammoneeded * 3 / 2; // Marine's Armor gives them 1.5x the chance of infinite ammo (from their specfic armors only) on each tic in DVI/DVII mode.

  if (CheckActorInventory(1001,"SauronHelmet") > 0)				infammoneeded2 += 75; // +7.5% Chance
  if (CheckActorInventory(1001,"SauronGauntlets") > 0)			infammoneeded2 += 75; // +7.5% Chance
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)	infammoneeded2 += 75; // +7.5% Chance
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0)		infammoneeded2 += 75; // +7.5% Chance
  if (CheckActorInventory(1001,"TheOneRing") > 0)				infammoneeded2 += 250; // +25.0% Chance
  if (ModType != 0) infammoneeded2 = infammoneeded2 * 5 / 4; // Sauron's Armor gives them 1.25x the chance of infinite ammo on each tic in DVI/DVII mode.

  infammoneeded += infammoneeded2;
  if (PowerupTimer[7] > 0)
  {
   infammoneeded += 125;
   infammoreqremaining = (1000 - infammoneeded) / 4; // Gets 25% of the remaining value not covered by the above.
   infammoneeded += infammoreqremaining;
  }

  int infammochance = random(1,1000);
  if (infammochance <= infammoneeded)
  {
   GiveActorInventory(1001,"RandomInfiniteAmmo", 1); 
   //PrintBold(s:"DA Chance: ",d:infammoreqremaining,             s:"\n\cdChance: ",d:infammochance,s:" / ",d:infammoneeded);
  }
  else
  {
   TakeActorInventory(1001,"RandomInfiniteAmmo", 1);
   //PrintBold(s:"DA Chance: ",d:infammoreqremaining,             s:"\n\cfChance: ",d:infammochance,s:" / ",d:infammoneeded);
  }

  // DQ-Style Seed System [DROPPED Versions only, naturally added Seeds/etc do not get despawned via this system]
  // "MiscellaneousVars[29]" is for the Seed limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[29] = 128;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[29] = 120;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[29] = 112;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[29] = 104;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[29] = 96;
  if (ModType == 0) MiscellaneousVars[29] = MiscellaneousVars[29] * 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife

  // "MiscellaneousVars[28]" is for the Seed of Skill limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[28] = 32;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[28] = 30;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[28] = 28;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[28] = 26;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[28] = 24;
  if (ModType == 0) MiscellaneousVars[28] = MiscellaneousVars[28] * 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife

  // "MiscellaneousVars[26]" is for the Fygg limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[26] = 3;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[26] = 3;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[26] = 2;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[26] = 1;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[26] = 1;
  if (ModType == 0) MiscellaneousVars[26] = MiscellaneousVars[26] * 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
   

 if (CheckActorInventory(1001,"PowerIronFeet") > 0)
 {
  if (CheckActorInventory(1001,"IronFeetNoPoison") == 0) GiveActorInventory(1001,"IronFeetNoPoison",1);
 }
 else
 {
  if (CheckActorInventory(1001,"IronFeetNoPoison") > 0) TakeActorInventory(1001,"IronFeetNoPoison",9999);
 }

 //*********************
 //*Check Tension Level*
 //*********************
 // [181] Tension Level
 // [182] Tension Level Compare
 // [183] Tension Timer
 // [184] Tension Timer Counts Down
 // [185] Tension Warmup Meter [you must hold down for this long for tension to go up a level]
 // [186] Tension Cooldown Timer [when Tension levels change, or run out, this decides how long to wait before you can do so again]
 // [187] Tension Charge Multiplier [CVAR]
 // [188] Tension Max Cooldown Timer [for bar displays]
 // [189] Tension Sound Charge Loop Timer
 // [190] Active-Tension Pulse Timer
 // [191] Tension Countdown Multiplier [CVAR]
 // [192] Tension Cooldown Multiplier [CVAR]
 // [193] Tension Aura Appearance Frame
 str TensionPlaceholderItem;
 str TensionAttackItem;
 str TensionDefenseItem;

 int TensionChargeFailRate;
 int TensionChargeTimeMax;
 int TensionStaminaPerTic;
 int randompulseinterval1;
 int randompulseinterval2;
 int randompulseinterval3;
 int randompulseinterval4;
 int pulsevolume;
 int maxpulseinterval;

 if (MiscellaneousVars[181] == 0)  // 0 to 5 Tension [4 Seconds, 20% Total Stamina Use, 0% Fail Rate]
 {
  TensionChargeFailRate = 0;
  TensionChargeTimeMax = 1400;
  TensionStaminaPerTic = 2000;
 }

 if (MiscellaneousVars[181] == 1)  // 5 to 20 Tension [4.25~ Seconds, 22.5% Total Stamina Use, 2.5% Fail Rate]
 {
  TensionChargeFailRate = 25;
  TensionChargeTimeMax = 1488;
  TensionStaminaPerTic = 2250;
 }

 if (MiscellaneousVars[181] == 2)  // 20 to 50 Tension [4.5~ Seconds, 25% Total Stamina Use, 10% Fail Rate]
 {
  TensionChargeFailRate = 100;
  TensionChargeTimeMax = 1575;
  TensionStaminaPerTic = 2500;
 }

 if (MiscellaneousVars[181] == 3)  // 50 to 100 Tension [5 Seconds, 30% Total Stamina Use, 50% Fail Rate]
 {
  TensionChargeFailRate = 500;
  TensionChargeTimeMax = 1750;
  TensionStaminaPerTic = 3000;
 }

 if (MiscellaneousVars[181] == 4)  // 100 to 250 Tension [5.5 Seconds, 35% Total Stamina Use, 70% Fail Rate]
 {
  TensionChargeFailRate = 700;
  TensionChargeTimeMax = 1925;
  TensionStaminaPerTic = 3500;
 }

 if (MiscellaneousVars[181] == 5)  // 250 to 500 Tension [6 Seconds, 40% Total Stamina Use, 85% Fail Rate]
 {
  TensionChargeFailRate = 850;
  TensionChargeTimeMax = 2100;
  TensionStaminaPerTic = 4000;
 }

 if (MiscellaneousVars[181] == 6)  // 500 to 1000 Tension [7.5 Seconds, 50% Total Stamina Use, 92.5% Fail Rate]
 {
  TensionChargeFailRate = 950;
  TensionChargeTimeMax = 2625;
  TensionStaminaPerTic = 5000;
 }
 if (MiscellaneousVars[181] == 7)
 {
  TensionChargeFailRate = 1000;
  TensionChargeTimeMax = 2625;
  TensionStaminaPerTic = 5000;
 }
 TensionStaminaPerTic = TensionStaminaPerTic / (TensionChargeTimeMax / 19);
 // Check Tension Speed Option [also affects Stamina]
 TensionStaminaPerTic = TensionStaminaPerTic * MiscellaneousVars[193] / 4;
 // Falcon Knife Earrings [-10% Consumption]
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) TensionStaminaPerTic = TensionStaminaPerTic * 9 / 10;

 if (CheckActorInventory(1001,"PowerStrength") > 0) TensionChargeFailRate -= 125; // -12.5% Fail Rate When Berserked
 if (PowerupTimer[7] > 0) TensionChargeFailRate -= 250; // -25% Fail Rate When In Divine Avatar
 if (PowerupTimer[129] > 0) TensionChargeFailRate = TensionChargeFailRate / 2; // 0.5x Fail Rate When In GoE

 int TensionChargeFailRatio = GetCVar("dvds_tension_failrateratio");
 if (TensionChargeFailRatio < 0) TensionChargeFailRatio = 0;
 if (TensionChargeFailRatio > 200) TensionChargeFailRatio = 200;

 TensionChargeFailRate = TensionChargeFailRate * TensionChargeFailRatio / 100;
 if (GetCVar("dvds_musou_powertripmode") == 1) TensionChargeFailRate = TensionChargeFailRate / 5; // Check "Power Trip" mode Cheat
 if (GetCVar("dvds_musou_powertripmode") == 2) TensionChargeFailRate = TensionChargeFailRate / 10; // Check "Power Trip" mode Cheat
 if (TensionChargeFailRate <= 0) TensionChargeFailRate = 0;

 int TensionChargeAmount;
 int TensionCoolDownRatio = 20;
 TensionCoolDownRatio = TensionCoolDownRatio * MiscellaneousVars[192] / 100;
  if (MiscellaneousVars[166] <= 0) MiscellaneousVars[186] -= TensionCoolDownRatio;

 if (MiscellaneousVars[186] <= 0) { MiscellaneousVars[186] = 0; MiscellaneousVars[188] = MiscellaneousVars[186]; }
 buttons = GetPlayerInput(0, INPUT_BUTTONS); 
 if (GetActorProperty(1001,APROP_Health) > 0)
 {
  TensionChargeAmount = 0;
  FreezePlayer = 0;
  if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
  if (PowerupTimer[18] > 0 && random(1,20) == 1) FreezePlayer += 1;
  if (PowerupTimer[20] > 0) FreezePlayer += 1;
  if (buttons & BT_USE && buttons & BT_SPEED && MiscellaneousVars[186] <= 0 && FreezePlayer == 0)
  {   
   if (GetCVar("dvds_allowtension") > 0)
   {
    MiscellaneousVars[186] = 0;
    MiscellaneousVars[188] = MiscellaneousVars[186];
    if (MiscellaneousVars[181] <= 7 && MiscellaneousVars[184] <= 0)
    {
     if (MiscellaneousVars[21] >= TensionStaminaPerTic)
     {
      if (MiscellaneousVars[181] < 7)
      {
       MiscellaneousVars[189] ++; // Increase Charge-Up Sound Loop Timer
       if (MiscellaneousVars[189] == 4)
       {
        SetActivator(1001);
        ActivatorSound("tensioncharge",127);
        SetActivator(0);
       }
       if (MiscellaneousVars[189] >= 9) MiscellaneousVars[189] = 0;
 
       SpawnFixedX = GetActorX(1001);
       SpawnFixedY = GetActorY(1001);
       SpawnFixedZ = GetActorZ(1001);
       SpawnForced("TensionParticleGenerator",SpawnFixedX,SpawnFixedY,SpawnFixedZ+(1*65536),0,0);
       if (MiscellaneousVars[181] > 3) // "100"+ Tension
       {
        if (random(1,100) > 50) SpawnForced("TensionParticleGenerator",SpawnFixedX,SpawnFixedY,SpawnFixedZ+(1*65536),0,0);
       }
       if (MiscellaneousVars[181] > 4) // "250"+ Tension
       {
        if (random(1,100) > 80) SpawnForced("TensionParticleGenerator",SpawnFixedX,SpawnFixedY,SpawnFixedZ+(1*65536),0,0);
       }
       if (MiscellaneousVars[181] > 5) // "500"+ Tension
       {
        if (random(1,100) > 86) SpawnForced("TensionParticleGenerator",SpawnFixedX,SpawnFixedY,SpawnFixedZ+(1*65536),0,0);
       }
       if (MiscellaneousVars[181] > 6) // "1000"+ Tension
       {
        if (random(1,100) > 91) SpawnForced("TensionParticleGenerator",SpawnFixedX,SpawnFixedY,SpawnFixedZ+(1*65536),0,0);
       }
      }
      else MiscellaneousVars[189] = 0;
 
      if (MiscellaneousVars[181] == 0) Radius_Quake2(1001,1,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 1) Radius_Quake2(1001,2,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 2) Radius_Quake2(1001,3,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 3) Radius_Quake2(1001,4,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 4) Radius_Quake2(1001,5,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 5) Radius_Quake2(1001,7,4,0,512,"world/quake");
      if (MiscellaneousVars[181] == 6) Radius_Quake2(1001,9,4,0,512,"world/quake");
      if (MiscellaneousVars[181] < 7) MiscellaneousVars[21] -= TensionStaminaPerTic;
 
      // 10 = 1 tic
      TensionChargeAmount = 10;
 
      // -37.5% Charge Speed When Fatigued
      if (PowerupTimer[18] > 0) TensionChargeAmount = TensionChargeAmount * 5 / 8;
      // -25% Charge Speed When Berserked
      if (CheckActorInventory(1001,"PowerStrength") > 0) TensionChargeAmount = TensionChargeAmount * 3 / 4;
      // -12.5% Charge Speed When in Divine Avatar
      if (PowerupTimer[7] > 0) TensionChargeAmount = TensionChargeAmount * 7 / 8;
      // +12.5% Charge Speed When Low on Health
      if (CheckActorInventory(1001,"LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1125 / 1000;
      // +33.4% Charge Speed When Critically Low on Health
      if (CheckActorInventory(1001,"CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
      // +33.4% Charge Speed for Flora
      if (CharacterClass == 2) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
      // +50% Charge Speed for Flora when Low on Health
      if (CharacterClass == 2 && CheckActorInventory(1001,"LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1500 / 1000;
      // +125% Charge Speed for Flora when Critically low on Health
      if (CharacterClass == 2 && CheckActorInventory(1001,"CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 2250 / 1000;
      // Check Tension Charge Multiplier Option
      TensionChargeAmount = TensionChargeAmount * MiscellaneousVars[187] / 100;
      // Check Tension Speed Option [also affects Stamina]
      TensionChargeAmount = TensionChargeAmount * MiscellaneousVars[193] / 4;
      // Check "Power Trip" mode Cheat
      if (GetCVar("dvds_musou_powertripmode") == 1) TensionChargeAmount *= 5;
      if (GetCVar("dvds_musou_powertripmode") == 2) TensionChargeAmount *= 10;

      // PsycheMore perks
      PerkFactor = ((MiscellaneousVars[10011] * 250) + (MiscellaneousVars[10012] * 625)) + 10000;
      TensionChargeAmount = TensionChargeAmount * PerkFactor / 10000; // "PsycheMore" and "PsycheMore EX" perks.
      TensionChargeAmount += (MiscellaneousVars[10011] / 2);
      TensionChargeAmount += MiscellaneousVars[10012];

      // Up-Clamp to 1 Tic
      if (TensionChargeAmount < 1) TensionChargeAmount = 1;
     }
     else
     {
      if (MiscellaneousVars[189] > 0) MiscellaneousVars[189] = 0;
      if (MiscellaneousVars[181] < 7)
      {
       SetActivator(1001);
       ActivatorSound("tensionfailed",127);
       SetActivator(0);
      }
      MiscellaneousVars[186] = 700; // 1 sec [20 = 1 tic]
      MiscellaneousVars[188] = MiscellaneousVars[186];
      MiscellaneousVars[21] = 0;
      TensionChargeAmount -= 25;
     }
    }
   }

  }
  else
  {
   if (MiscellaneousVars[189] > 0) MiscellaneousVars[189] = 0;
   TensionChargeAmount -= 25;
  }

  // Movement to decrease Tension charge.
  C3 = 0;
  FreezePlayer = 0;
  if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
  if (PowerupTimer[20] > 0) FreezePlayer += 1;
  if (FreezePlayer == 0)
  {
   if (buttons & BT_FORWARD) C3 = -50;
   else if (buttons & BT_BACK) C3 = -50;
   else if (buttons & BT_MOVELEFT) C3 = -50;
   else if (buttons & BT_MOVERIGHT) C3 = -50;
   else if (buttons & BT_MOVEUP) C3 = -50;
   else if (buttons & BT_MOVEDOWN) C3 = -50;
   else if (buttons & BT_JUMP) C3 = -50;
   else if (buttons & BT_CROUCH) C3 = -50;
  }

  FreezePlayer = 0;
  if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
  if (PowerupTimer[20] > 0) FreezePlayer += 1;
  if (C3 != 0 && MiscellaneousVars[186] < 700 && FreezePlayer == 0)
  {
   if (GetCVar("dvds_allowtension") > 0)
   {
    MiscellaneousVars[186] = 700; // 1 Sec
    MiscellaneousVars[188] = MiscellaneousVars[186];
   }
  }
  TensionChargeAmount += C3;
  int TensionTimerMax;
  if (MiscellaneousVars[184] <= 0) MiscellaneousVars[185] += TensionChargeAmount;

  if (MiscellaneousVars[185] <= 0) MiscellaneousVars[185] = 0;
  if (MiscellaneousVars[185] >= TensionChargeTimeMax)
  {
   if (random(1,1000) > TensionChargeFailRate)
   {
    MiscellaneousVars[184] = 0;

    if (MiscellaneousVars[181] == 0) { MiscellaneousVars[186] = 350; FadeRange(254,104,253,0.33,254,104,253,0,1.25); }
    else if (MiscellaneousVars[181] == 1) { MiscellaneousVars[186] = 372; FadeRange(254,104,253,0.44,254,104,253,0,1.375); }
    else if (MiscellaneousVars[181] == 2) { MiscellaneousVars[186] = 394; FadeRange(254,104,253,0.55,254,104,253,0,1.5); }
    else if (MiscellaneousVars[181] == 3) { MiscellaneousVars[186] = 438; FadeRange(254,104,253,0.66,254,104,253,0,1.625); }
    else if (MiscellaneousVars[181] == 4) { MiscellaneousVars[186] = 481; FadeRange(254,104,253,0.77,254,104,253,0,1.75); }
    else if (MiscellaneousVars[181] == 5) { MiscellaneousVars[186] = 525; FadeRange(254,104,253,0.88,254,104,253,0,1.875); }
    else if (MiscellaneousVars[181] == 6) { MiscellaneousVars[186] = 656; FadeRange(254,104,253,0.99,254,104,253,0,2.0); }
    MiscellaneousVars[186] *= 2;
    MiscellaneousVars[188] = MiscellaneousVars[186];

    SetActivator(1001);
    if (MiscellaneousVars[181] >= 0 && MiscellaneousVars[181] <= 2) ActivatorSound("tensionincrease",127);
    if (MiscellaneousVars[181] >= 3 && MiscellaneousVars[181] <= 4) ActivatorSound("tensionhigh1",127);
    if (MiscellaneousVars[181] == 5) ActivatorSound("tensionhigh2",127);
    if (MiscellaneousVars[181] == 6) ActivatorSound("tensionhigh3",127);
    SetActivator(0);
    MiscellaneousVars[181] += 1;

    if (MiscellaneousVars[181] == 1) MiscellaneousVars[183] = 3600;
    if (MiscellaneousVars[181] == 2) MiscellaneousVars[183] = 4320;
    if (MiscellaneousVars[181] == 3) MiscellaneousVars[183] = 5184;
    if (MiscellaneousVars[181] == 4) MiscellaneousVars[183] = 6221;
    if (MiscellaneousVars[181] == 5) MiscellaneousVars[183] = 7465;
    if (MiscellaneousVars[181] == 6) MiscellaneousVars[183] = 8958;
    if (MiscellaneousVars[181] == 7) MiscellaneousVars[183] = 10750;
   }   
   else
   {
    MiscellaneousVars[184] = 0;

    if (GetCVar("dvds_allowtension") > 0)
    {
     if (MiscellaneousVars[181] == 0) MiscellaneousVars[186] = 350;
     else if (MiscellaneousVars[181] == 1) MiscellaneousVars[186] = 372;
     else if (MiscellaneousVars[181] == 2) MiscellaneousVars[186] = 394;
     else if (MiscellaneousVars[181] == 3) MiscellaneousVars[186] = 438;
     else if (MiscellaneousVars[181] == 4) MiscellaneousVars[186] = 481;
     else if (MiscellaneousVars[181] == 5) MiscellaneousVars[186] = 525;
     else if (MiscellaneousVars[181] == 6) MiscellaneousVars[186] = 656;
     MiscellaneousVars[186] *= 2;
     MiscellaneousVars[186] /= 4;
     MiscellaneousVars[188] = MiscellaneousVars[186];
    }

    if (MiscellaneousVars[181] < 7)
    {
     SetActivator(1001);
     ActivatorSound("tensionfailed",127);
     SetActivator(0);
    }

    if (MiscellaneousVars[181] == 1) MiscellaneousVars[183] = 3600;
    if (MiscellaneousVars[181] == 2) MiscellaneousVars[183] = 4320;
    if (MiscellaneousVars[181] == 3) MiscellaneousVars[183] = 5184;
    if (MiscellaneousVars[181] == 4) MiscellaneousVars[183] = 6221;
    if (MiscellaneousVars[181] == 5) MiscellaneousVars[183] = 7465;
    if (MiscellaneousVars[181] == 6) MiscellaneousVars[183] = 8958;
    if (MiscellaneousVars[181] == 7) MiscellaneousVars[183] = 10750;
   }
   MiscellaneousVars[185] = 0; // Warmup Timer
  }
 }
 else
 {
  MiscellaneousVars[181] = 0; // Level
  MiscellaneousVars[183] = 0; // Timer
  MiscellaneousVars[184] = 0; // Timer Counts Down?
  MiscellaneousVars[185] = 0;
  MiscellaneousVars[186] = 0;
  MiscellaneousVars[189] = 0;
  MiscellaneousVars[190] = 0;
  PlaySound(1001,"tensionrevert",CHAN_BODY,1.0,0,ATTN_NORM);
 }

 if (GetActorProperty(1001,APROP_Health) > 0)
 {
  if (MiscellaneousVars[181] != 0)
  {
   if (MiscellaneousVars[181] == 1) { pulsevolume = random(15,31); maxpulseinterval = random(21,23); }
   if (MiscellaneousVars[181] == 2) { pulsevolume = random(18,47); maxpulseinterval = random(19,21); }
   if (MiscellaneousVars[181] == 3) { pulsevolume = random(21,63); maxpulseinterval = random(17,19); }
   if (MiscellaneousVars[181] == 4) { pulsevolume = random(24,79); maxpulseinterval = random(15,17); }
   if (MiscellaneousVars[181] == 5) { pulsevolume = random(27,95); maxpulseinterval = random(13,15); }
   if (MiscellaneousVars[181] == 6) { pulsevolume = random(30,111); maxpulseinterval = random(12,14); }
   if (MiscellaneousVars[181] == 7) { pulsevolume = random(33,127); maxpulseinterval = random(11,13); }
   maxpulseinterval *= 2;
   if (random(1,4) == 1) randompulseinterval1 = maxpulseinterval * 2; else randompulseinterval1 = random(1,maxpulseinterval);
   if (random(1,4) == 1) randompulseinterval2 = maxpulseinterval * 2; else randompulseinterval2 = random(1,maxpulseinterval);
   if (random(1,4) == 1) randompulseinterval3 = maxpulseinterval * 2; else randompulseinterval3 = random(1,maxpulseinterval);
   if (random(1,4) == 1) randompulseinterval4 = maxpulseinterval * 2; else randompulseinterval4 = random(1,maxpulseinterval);
   MiscellaneousVars[190] ++; // Increase Charge-Up Sound Loop Timer

   if (MiscellaneousVars[190] == randompulseinterval1 && MiscellaneousVars[181] >= 1)
   {
    SetActivator(1001); 
    ActivatorSound("tensionpulserand",pulsevolume); 
    SetActivator(0);
    randompulseinterval1 = random(1,maxpulseinterval);
   }
   if (MiscellaneousVars[190] == randompulseinterval2 && MiscellaneousVars[181] >= 3)
   {
    SetActivator(1001); 
    ActivatorSound("tensionpulserand",pulsevolume); 
    SetActivator(0);
    randompulseinterval2 = random(1,maxpulseinterval);
   }
   if (MiscellaneousVars[190] == randompulseinterval3 && MiscellaneousVars[181] >= 5)
   {
    SetActivator(1001); 
    ActivatorSound("tensionpulserand",pulsevolume); 
    SetActivator(0);
    randompulseinterval3 = random(1,maxpulseinterval);
   }
   if (MiscellaneousVars[190] == randompulseinterval4 && MiscellaneousVars[181] >= 7)
   {
    SetActivator(1001); 
    ActivatorSound("tensionpulserand",pulsevolume); 
    SetActivator(0);
    randompulseinterval4 = random(1,maxpulseinterval);
   }


   if (MiscellaneousVars[190] >= maxpulseinterval) MiscellaneousVars[190] = 0;
   int tensiontimerdecrease;
   if (MiscellaneousVars[184] > 0 && MiscellaneousVars[183] >= 0)
   {
    tensiontimerdecrease = 20;
    tensiontimerdecrease = tensiontimerdecrease * MiscellaneousVars[191] / 100;
    if (GetCVar("dvds_musou_powertripmode") == 1) tensiontimerdecrease = tensiontimerdecrease / 5; // 'Power Trip' mode cheat
    if (GetCVar("dvds_musou_powertripmode") == 2) tensiontimerdecrease = tensiontimerdecrease / 10; // 'Power Trip' mode cheat
    MiscellaneousVars[183] -= tensiontimerdecrease;
   }
   if (MiscellaneousVars[183] <= 0) 
   { 
    if (GetCVar("dvds_allowtension") > 0)
    {
     if (MiscellaneousVars[181] == 1) MiscellaneousVars[186] = 1400; // Cooldown Timer set to 4 seconds
     if (MiscellaneousVars[181] == 2) MiscellaneousVars[186] = 1488; // Cooldown Timer set to 4.25 seconds
     if (MiscellaneousVars[181] == 3) MiscellaneousVars[186] = 1575; // Cooldown Timer set to 4.5 seconds
     if (MiscellaneousVars[181] == 4) MiscellaneousVars[186] = 1750; // Cooldown Timer set to 5 seconds
     if (MiscellaneousVars[181] == 5) MiscellaneousVars[186] = 1925; // Cooldown Timer set to 5.5 seconds
     if (MiscellaneousVars[181] == 6) MiscellaneousVars[186] = 2100; // Cooldown Timer set to 6 seconds
     if (MiscellaneousVars[181] == 7) MiscellaneousVars[186] = 2625; // Cooldown Timer set to 7.5 seconds
     MiscellaneousVars[186] *= 2;
     MiscellaneousVars[188] = MiscellaneousVars[186];
    }

    MiscellaneousVars[185] = 0; // Warmup Timer
    MiscellaneousVars[184] = 0; // Tension Timer
    MiscellaneousVars[181] = 0; // Tension Level

    PlaySound(1001,"tensionrevert",CHAN_BODY,1.0,0,ATTN_NORM);
   }
  }
  if (GetCVar("dvds_allowtension") > 0)
  {
   if (MiscellaneousVars[181] < 0) MiscellaneousVars[181] = 0;
   if (MiscellaneousVars[181] > 7) MiscellaneousVars[181] = 7;
  }
  else
  {
   if (MiscellaneousVars[181] != 0) { MiscellaneousVars[181] = 0; PlaySound(1001,"tensionrevert",CHAN_BODY,1.0,0,ATTN_NORM); }
   if (MiscellaneousVars[183] != 0) MiscellaneousVars[183] = 0; // Timer
   if (MiscellaneousVars[184] != 0) MiscellaneousVars[184] = 0; // Timer Counts Down?
   if (MiscellaneousVars[185] != 0) MiscellaneousVars[185] = 0;
   if (MiscellaneousVars[186] != 0) MiscellaneousVars[186] = 0;
   if (MiscellaneousVars[187] != 0) MiscellaneousVars[189] = 0;
   if (MiscellaneousVars[188] != 0) MiscellaneousVars[190] = 0;   
  }
  if (GetActorProperty(1001,APROP_Health) > 0)
  {
   if (GetCVar("dvds_allowtension") > 0)
   {
    if (MiscellaneousVars[181] == 1) // Tension is "5"
    {
     GiveActorInventory(1001,"Tension5", 1);
     GiveActorInventory(1001,"Tension5Atk", 1);
     GiveActorInventory(1001,"Tension5Def", 1);
     GiveActorInventory(1001,"Tension5Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension5", 9999);
     TakeActorInventory(1001,"Tension5Atk", 9999);
     TakeActorInventory(1001,"Tension5Def", 9999);
     TakeActorInventory(1001,"Tension5Spd", 9999);
    }
   
    if (MiscellaneousVars[181] == 2) // Tension is "20"
    {
     GiveActorInventory(1001,"Tension20", 1);
     GiveActorInventory(1001,"Tension20Atk", 1);
     GiveActorInventory(1001,"Tension20Def", 1);
     GiveActorInventory(1001,"Tension20Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension20", 9999);
     TakeActorInventory(1001,"Tension20Atk", 9999);
     TakeActorInventory(1001,"Tension20Def", 9999);
     TakeActorInventory(1001,"Tension20Spd", 9999);
    }
   
    if (MiscellaneousVars[181] == 3) // Tension is "50"
    {
     GiveActorInventory(1001,"Tension50", 1);
     GiveActorInventory(1001,"Tension50Atk", 1);
     GiveActorInventory(1001,"Tension50Def", 1);
     GiveActorInventory(1001,"Tension50Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension50", 9999);
     TakeActorInventory(1001,"Tension50Atk", 9999);
     TakeActorInventory(1001,"Tension50Def", 9999);
     TakeActorInventory(1001,"Tension50Spd", 9999);
    }
  
    if (MiscellaneousVars[181] == 4) // Tension is "100"
    {
     GiveActorInventory(1001,"Tension100", 1);
     GiveActorInventory(1001,"Tension100Atk", 1);
     GiveActorInventory(1001,"Tension100Def", 1);
     GiveActorInventory(1001,"Tension100Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension100", 9999);
     TakeActorInventory(1001,"Tension100Atk", 9999);
     TakeActorInventory(1001,"Tension100Def", 9999);
     TakeActorInventory(1001,"Tension100Spd", 9999);
    }
  
    if (MiscellaneousVars[181] == 5) // Tension is "250"
    {
     GiveActorInventory(1001,"Tension250", 1);
     GiveActorInventory(1001,"Tension250Atk", 1);
     GiveActorInventory(1001,"Tension250Def", 1);
     GiveActorInventory(1001,"Tension250Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension250", 9999);
     TakeActorInventory(1001,"Tension250Atk", 9999);
     TakeActorInventory(1001,"Tension250Def", 9999);
     TakeActorInventory(1001,"Tension250Spd", 9999);
    }
  
    if (MiscellaneousVars[181] == 6) // Tension is "500"
    {
     GiveActorInventory(1001,"Tension500", 1);
     GiveActorInventory(1001,"Tension500Atk", 1);
     GiveActorInventory(1001,"Tension500Def", 1);
     GiveActorInventory(1001,"Tension500Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension500", 9999);
     TakeActorInventory(1001,"Tension500Atk", 9999);
     TakeActorInventory(1001,"Tension500Def", 9999);
     TakeActorInventory(1001,"Tension500Spd", 9999);
    }
  
    if (MiscellaneousVars[181] == 7) // Tension is "1000"
    {
     GiveActorInventory(1001,"Tension1000", 1);
     GiveActorInventory(1001,"Tension1000Atk", 1);
     GiveActorInventory(1001,"Tension1000Def", 1);
     GiveActorInventory(1001,"Tension1000Spd", 1);
    }
    else
    {
     TakeActorInventory(1001,"Tension1000", 9999);
     TakeActorInventory(1001,"Tension1000Atk", 9999);
     TakeActorInventory(1001,"Tension1000Def", 9999);
     TakeActorInventory(1001,"Tension1000Spd", 9999);
    }
   }
   else
   {
    TakeActorInventory(1001,"Tension5", 9999);
    TakeActorInventory(1001,"Tension5Atk", 9999);
    TakeActorInventory(1001,"Tension5Def", 9999);
    TakeActorInventory(1001,"Tension5Spd", 9999);
    TakeActorInventory(1001,"Tension20", 9999);
    TakeActorInventory(1001,"Tension20Atk", 9999);
    TakeActorInventory(1001,"Tension20Def", 9999);
    TakeActorInventory(1001,"Tension20Spd", 9999);
    TakeActorInventory(1001,"Tension50", 9999);
    TakeActorInventory(1001,"Tension50Atk", 9999);
    TakeActorInventory(1001,"Tension50Def", 9999);
    TakeActorInventory(1001,"Tension50Spd", 9999);
    TakeActorInventory(1001,"Tension100", 9999);
    TakeActorInventory(1001,"Tension100Atk", 9999);
    TakeActorInventory(1001,"Tension100Def", 9999);
    TakeActorInventory(1001,"Tension100Spd", 9999);
    TakeActorInventory(1001,"Tension250", 9999);
    TakeActorInventory(1001,"Tension250Atk", 9999);
    TakeActorInventory(1001,"Tension250Def", 9999);
    TakeActorInventory(1001,"Tension250Spd", 9999);
    TakeActorInventory(1001,"Tension500", 9999);
    TakeActorInventory(1001,"Tension500Atk", 9999);
    TakeActorInventory(1001,"Tension500Def", 9999);
    TakeActorInventory(1001,"Tension500Spd", 9999);
    TakeActorInventory(1001,"Tension1000", 9999);
    TakeActorInventory(1001,"Tension1000Atk", 9999);
    TakeActorInventory(1001,"Tension1000Def", 9999);
    TakeActorInventory(1001,"Tension1000Spd", 9999);
   }  

  }
 }
 
 // Tension Aura Actor Control
 // TID 2001 - Aura
 str TensionAuraLight;
 int TensionAuraSpawnHeight;
 int TensionAuraXScale;
 int TensionAuraYScale;
 int TensionAuraAlpha;
 int TensionAuraAlphaInvis;
 if (MiscellaneousVars[181] > 0)
 {
  SpawnFixedX = GetActorX(1001);
  SpawnFixedY = GetActorY(1001);
  SpawnFixedZ = GetActorZ(1001);
  if (CharacterClass == 0) TensionAuraSpawnHeight = 28 * 65536;
  if (CharacterClass == 1) TensionAuraSpawnHeight = 26 * 65536;
  if (CharacterClass == 2) TensionAuraSpawnHeight = 25 * 65536;
  TensionAuraSpawnHeight += SpawnFixedZ;

  if (MiscellaneousVars[181] == 1)
  {
   TensionAuraLight = "TensionAuraLight5"; 
   TensionAuraXScale = 0.5;
   TensionAuraYScale = 0.75;
   TensionAuraAlpha = 0.20;
   TensionAuraAlphaInvis = 0.02;
   if (ThingCountName("TensionAuraLight5", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 2)
  {
   TensionAuraLight = "TensionAuraLight20";
   TensionAuraXScale = 0.5555;
   TensionAuraYScale = 0.8333;
   TensionAuraAlpha = 0.26;
   TensionAuraAlphaInvis = 0.026;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 3) 
  { 
   TensionAuraLight = "TensionAuraLight50"; 
   TensionAuraXScale = 0.6111;
   TensionAuraYScale = 0.9116;
   TensionAuraAlpha = 0.32;
   TensionAuraAlphaInvis = 0.032;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 4)
  {
   TensionAuraLight = "TensionAuraLight100"; 
   TensionAuraXScale = 0.6667;
   TensionAuraYScale = 1.0;
   TensionAuraAlpha = 0.38;
   TensionAuraAlphaInvis = 0.038;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 5) 
  {
   TensionAuraLight = "TensionAuraLight250";
   TensionAuraXScale = 0.7222;
   TensionAuraYScale = 1.0833;
   TensionAuraAlpha = 0.44;
   TensionAuraAlphaInvis = 0.044;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 6) 
  {
   TensionAuraLight = "TensionAuraLight500"; 
   TensionAuraXScale = 0.7777;
   TensionAuraYScale = 1.1666;
   TensionAuraAlpha = 0.5;
   TensionAuraAlphaInvis = 0.05;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 7) 
  {
   TensionAuraLight = "TensionAuraLight1000";
   TensionAuraXScale = 0.8333;
   TensionAuraYScale = 1.25;
   TensionAuraAlpha = 0.56;
   TensionAuraAlphaInvis = 0.056;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
  }

  if (CharacterClass == 0) { TensionAuraXScale = TensionAuraXScale * 112 / 100;  TensionAuraYScale = TensionAuraYScale * 123 / 100; }
  if (CharacterClass == 1) { TensionAuraXScale = TensionAuraXScale * 104 / 100;  TensionAuraYScale = TensionAuraYScale * 108 / 100; }
  if (CharacterClass == 2) { TensionAuraXScale = TensionAuraXScale * 100 / 100;  TensionAuraYScale = TensionAuraYScale * 100 / 100; }

  if (ThingCountName("TensionAuraLooper", 1501) < 1) SpawnForced("TensionAuraLooper",SpawnFixedX,SpawnFixedY,SpawnFixedZ,1501,0);
  if (ThingCountName("TensionAuraLooper", 1501) > 0)
  {
   SetActorProperty(1501,APROP_ScaleX,TensionAuraXScale);
   SetActorProperty(1501,APROP_ScaleY,TensionAuraYScale);
   if (PowerupTimer[1] > 0) SetActorProperty(1501,APROP_Alpha,TensionAuraAlphaInvis);
   else SetActorProperty(1501,APROP_Alpha,TensionAuraAlpha);
  }
 }
 else
 {
  if (ThingCountName("TensionAuraLooper", 1501) > 0) Thing_Remove(1501);
  if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
 }

 // Debug Displays
 if (GetCVar("dvdsdebug_showtensioninformation") > 0)
 {
  if (MiscellaneousVars[181] < 7)
  {
   PrintBold(s:"Fail-Rate: ",d:TensionChargeFailRate,s:"\n",
             s:"Stamina-Per-Tic: ",d:TensionStaminaPerTic,s:"\n",
             s:"Charge-Timer: ",d:MiscellaneousVars[185],s:" / ",d:TensionChargeTimeMax,s:"\n",
             s:"ChargePulseTimer: ",d:MiscellaneousVars[189],s:"\n",
             s:"ChargeIncreaseAmount: ",d:TensionChargeAmount,s:"\n",
             s:"Timer-Count?: ",d:MiscellaneousVars[184],s:"\n",
             s:"Tension-Timer: ",d:MiscellaneousVars[183],s:"\n",
             s:"Cooldown-Timer: ",d:MiscellaneousVars[186],s:"\n",
             s:"PulseTimer: ",d:MiscellaneousVars[190],s:" / ",d:maxpulseinterval,s:"\n",
             s:"Interval1: ",d:randompulseinterval1,s:"\n",
             s:"Interval2: ",d:randompulseinterval2,s:"\n",
             s:"Interval3: ",d:randompulseinterval3,s:"\n",
             s:"Interval4: ",d:randompulseinterval4,s:"\n",
             s:"AuraXPos: ",f:SpawnFixedX,s:"\n",
             s:"AuraYPos: ",f:SpawnFixedY,s:"\n",
             s:"AuraZPos: ",f:SpawnFixedZ,s:"\n",
             s:"AuraXScale: ",f:TensionAuraXScale,s:"\n",
             s:"AuraYScale: ",f:TensionAuraYScale,s:"\n",
             s:"AuraZAlpha: ",f:TensionAuraAlpha,s:"\n",
             s:"TensionLevel: ",d:MiscellaneousVars[181],s:"\n",
             s:"TensionLevelLastTic: ",d:MiscellaneousVars[182],s:"\n");
  }
  else
  {
   PrintBold(s:"Charge-Timer: ",d:MiscellaneousVars[185],s:" / ",d:TensionChargeTimeMax,s:"\n",
             s:"ChargePulseTimer: ",d:MiscellaneousVars[189],s:"\n",
             s:"ChargeIncreaseAmount: ",d:TensionChargeAmount,s:"\n",
             s:"Timer-Count?: ",d:MiscellaneousVars[184],s:"\n",
             s:"Tension-Timer: ",d:MiscellaneousVars[183],s:"\n",
             s:"Cooldown-Timer: ",d:MiscellaneousVars[186],s:"\n",
             s:"PulseTimer: ",d:MiscellaneousVars[190],s:" / ",d:maxpulseinterval,s:"\n",
             s:"Interval1: ",d:randompulseinterval1,s:"\n",
             s:"Interval2: ",d:randompulseinterval2,s:"\n",
             s:"Interval3: ",d:randompulseinterval3,s:"\n",
             s:"Interval4: ",d:randompulseinterval4,s:"\n",
             s:"AuraXPos: ",f:SpawnFixedX,s:"\n",
             s:"AuraYPos: ",f:SpawnFixedY,s:"\n",
             s:"AuraZPos: ",f:SpawnFixedZ,s:"\n",
             s:"AuraXScale: ",f:TensionAuraXScale,s:"\n",
             s:"AuraYScale: ",f:TensionAuraYScale,s:"\n",
             s:"AuraZAlpha: ",f:TensionAuraAlpha,s:"\n",
             s:"TensionLevel: ",d:MiscellaneousVars[181],s:"\n",
             s:"TensionLevelLastTic: ",d:MiscellaneousVars[182],s:"\n");
  }
 }



//********************
 //**Level Up Bonuses**
 //********************

 // REVISED: Changed If statements info a for block for the Level Items Bitfield (7/3/12)
 str LevelAttackItem;
 str LevelDefenseItem;
 str LevelSpeedItem;

 if (GetActorProperty(1001,APROP_Health) > 0)
 {
  if (PlayerLevel != MiscellaneousVars[2]) // [2] is for checking Levels for level specfic boosts (so it doesn't have to run EVERY tic and lag the game too badly)
  {
   for (i = 0; i < 201; i++)
   {
    if (CharacterClass == 0)
    {
     LevelAttackItem = StrParam(s:"DeggarisAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"DeggarisDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"DeggarisSpeedLevel", d:i);
    }
    if (CharacterClass == 1)
    {
     LevelAttackItem = StrParam(s:"IlluciaAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"IlluciaDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"IlluciaSpeedLevel", d:i);
    }
    if (CharacterClass == 2)
    {
     LevelAttackItem = StrParam(s:"FloraAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"FloraDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"FloraSpeedLevel", d:i);
    }

    if (PlayerLevel == i)
    {
     GiveActorInventory(1001, LevelAttackItem, 1);
     GiveActorInventory(1001, LevelDefenseItem, 1);
     GiveActorInventory(1001, LevelSpeedItem, 1);
    }
    else
    {
     TakeActorInventory(1001, LevelAttackItem, 1);
     TakeActorInventory(1001, LevelDefenseItem, 1);
     TakeActorInventory(1001, LevelSpeedItem, 1);
    }
   }
   MiscellaneousVars[2] = PlayerLevel;
  }

  // REVISED: Changed If statements info a for block for the AGL Seed Bitfield (7/3/12)
  str AGLSeedItem;
  // "MiscellaneousVars[31]" is for the number of Seeds of Agility carried by your character [Speed]
  // "MiscellaneousVars[41]" is the previous number of seeds of Agility so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[31] != MiscellaneousVars[41])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) AGLSeedItem = StrParam(s:"DeggarisAGLSeedLVL", d:i);
    if (CharacterClass == 1) AGLSeedItem = StrParam(s:"IlluciaAGLSeedLVL", d:i);
    if (CharacterClass == 2) AGLSeedItem = StrParam(s:"FloraAGLSeedLVL", d:i);

    if (MiscellaneousVars[31] < 0) MiscellaneousVars[31] = 0;
    if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
    if (MiscellaneousVars[31] == i)
     GiveActorInventory(1001, AGLSeedItem, 1);
       else
     TakeActorInventory(1001, AGLSeedItem, 1);
   }
   MiscellaneousVars[41] = MiscellaneousVars[31];
  }

  // REVISED: Changed If statements info a for block for the DEF Seed Bitfield (7/3/12)
  str DEFSeedItem;
  // "MiscellaneousVars[32]" is for the number of Seeds of Defense carried by your character [Overall Defense]
  // "MiscellaneousVars[42]" is the previous number of seeds of Defense so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[32] != MiscellaneousVars[42])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) DEFSeedItem = StrParam(s:"DeggarisDEFSeedLVL", d:i);
    if (CharacterClass == 1) DEFSeedItem = StrParam(s:"IlluciaDEFSeedLVL", d:i);
    if (CharacterClass == 2) DEFSeedItem = StrParam(s:"FloraDEFSeedLVL", d:i);

    if (MiscellaneousVars[32] < 0) MiscellaneousVars[32] = 0;
    if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
    if (MiscellaneousVars[32] == i)
     GiveActorInventory(1001, DEFSeedItem, 1);
       else
     TakeActorInventory(1001, DEFSeedItem, 1);
   }
   MiscellaneousVars[42] = MiscellaneousVars[32];
  }

  // "MiscellaneousVars[33]" is for the number of Seeds of Deftness carried by your character [EXP Gain]
  // "MiscellaneousVars[43]" is the previous number of seeds of Deftness so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[33] != MiscellaneousVars[43])
  {
   MiscellaneousVars[40] = (MiscellaneousVars[33] * 1);
   if (MiscellaneousVars[33] < 0) MiscellaneousVars[33] = 0;
   if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
   MiscellaneousVars[43] = MiscellaneousVars[33];
  }

  // REVISED: Changed If statements info a for block for the SOR Seed Bitfield (7/3/12)
  str SORSeedItem;
  // "MiscellaneousVars[34]" is for the number of Seeds of Sorcery carried by your character [Magic Attack]
  // "MiscellaneousVars[44]" is the previous number of seeds of Sorcery so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[34] != MiscellaneousVars[44])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) SORSeedItem = StrParam(s:"DeggarisSORSeedLVL", d:i);
    if (CharacterClass == 1) SORSeedItem = StrParam(s:"IlluciaSORSeedLVL", d:i);
    if (CharacterClass == 2) SORSeedItem = StrParam(s:"FloraSORSeedLVL", d:i);

    if (MiscellaneousVars[34] < 0) MiscellaneousVars[34] = 0;
    if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
    if (MiscellaneousVars[34] == i)
     GiveActorInventory(1001, SORSeedItem, 1);
       else
     TakeActorInventory(1001, SORSeedItem, 1);
   }
   MiscellaneousVars[44] = MiscellaneousVars[34];
  }

  // REVISED: Changed If statements info a for block for the STR Seed Bitfield (7/3/12)
  str STRSeedItem;
  // "MiscellaneousVars[35]" is for the number of Seeds of Strength carried by your character [Overall Attack]
  // "MiscellaneousVars[45]" is the previous number of seeds of Strength so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[35] != MiscellaneousVars[45])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) STRSeedItem = StrParam(s:"DeggarisSTRSeedLVL", d:i);
    if (CharacterClass == 1) STRSeedItem = StrParam(s:"IlluciaSTRSeedLVL", d:i);
    if (CharacterClass == 2) STRSeedItem = StrParam(s:"FloraSTRSeedLVL", d:i);

    if (MiscellaneousVars[35] < 0) MiscellaneousVars[35] = 0;
    if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
    if (MiscellaneousVars[35] == i)
     GiveActorInventory(1001, STRSeedItem, 1);
       else
     TakeActorInventory(1001, STRSeedItem, 1);
   }
   MiscellaneousVars[45] = MiscellaneousVars[35];
  }

  // REVISED: Changed If statements info a for block for the THE Seed Bitfield (7/3/12)
  str THESeedItem;
  // "MiscellaneousVars[36]" is for the number of Seeds of Therapeusis carried by your character [Magic Defense]
  // "MiscellaneousVars[46]" is the previous number of seeds of Therapeusis so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[36] != MiscellaneousVars[46])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) THESeedItem = StrParam(s:"DeggarisTHESeedLVL", d:i);
    if (CharacterClass == 1) THESeedItem = StrParam(s:"IlluciaTHESeedLVL", d:i);
    if (CharacterClass == 2) THESeedItem = StrParam(s:"FloraTHESeedLVL", d:i);

    if (MiscellaneousVars[36] < 0) MiscellaneousVars[36] = 0;
    if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
    if (MiscellaneousVars[36] == i)
     GiveActorInventory(1001, THESeedItem, 1);
       else
     TakeActorInventory(1001, THESeedItem, 1);
   }
   MiscellaneousVars[46] = MiscellaneousVars[36];
  }
 // End of DQ-Style Seed System

 // Check Hellcore Weapon Levels
  str HellcoreItemName;

  // Imp's Claw
  // "MiscellaneousVars[96]" Current Imp Claw Level
  // "MiscellaneousVars[113]" Previous Imp Claw Level [prevents lag]
  if (MiscellaneousVars[96] != MiscellaneousVars[113])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ImpClawLVL", d:i);

    if (MiscellaneousVars[96] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[96] < 1) MiscellaneousVars[96] = 1;
   if (MiscellaneousVars[96] > 8) MiscellaneousVars[96] = 8;
   MiscellaneousVars[113] = MiscellaneousVars[96];
  }

  // Dark Imp's Claw
  // "MiscellaneousVars[97]" Current Dark Imp Claw Level
  // "MiscellaneousVars[114]" Previous Dark Imp Claw Level [prevents lag]
  if (MiscellaneousVars[97] != MiscellaneousVars[114])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"DarkImpClawLVL", d:i);

    if (MiscellaneousVars[97] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[97] < 1) MiscellaneousVars[97] = 1;
   if (MiscellaneousVars[97] > 8) MiscellaneousVars[97] = 8;
   MiscellaneousVars[114] = MiscellaneousVars[97];
  }

  // Cacodemon's Eye
  // "MiscellaneousVars[98]" Current Cacodemon Eye Level
  // "MiscellaneousVars[115]" Previous Cacodemon Eye Level [prevents lag]
  if (MiscellaneousVars[98] != MiscellaneousVars[115])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"CacodemonEyeLVL", d:i);

    if (MiscellaneousVars[98] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[98] < 1) MiscellaneousVars[98] = 1;
   if (MiscellaneousVars[98] > 8) MiscellaneousVars[98] = 8;
   MiscellaneousVars[115] = MiscellaneousVars[98];
  }

  // Cacolantern's Eye
  // "MiscellaneousVars[99]" Current Cacolantern Eye Level
  // "MiscellaneousVars[116]" Previous Cacolantern Eye Level [prevents lag]
  if (MiscellaneousVars[99] != MiscellaneousVars[116])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"CacolanternEyeLVL", d:i);

    if (MiscellaneousVars[99] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[99] < 1) MiscellaneousVars[99] = 1;
   if (MiscellaneousVars[99] > 8) MiscellaneousVars[99] = 8;
   MiscellaneousVars[116] = MiscellaneousVars[99];
  }

  // Abaddon's Eye
  // "MiscellaneousVars[100]" Current Abaddon Eye Level
  // "MiscellaneousVars[117]" Previous Abaddon Eye Level [prevents lag]
  if (MiscellaneousVars[100] != MiscellaneousVars[117])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"AbaddonEyeLVL", d:i);

    if (MiscellaneousVars[100] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[100] < 1) MiscellaneousVars[100] = 1;
   if (MiscellaneousVars[100] > 8) MiscellaneousVars[100] = 8;
   MiscellaneousVars[117] = MiscellaneousVars[100];
  }

  // Hell Knight's Fist
  // "MiscellaneousVars[101]" Current Hell Knight Fist Level
  // "MiscellaneousVars[118]" Previous Hell Knight Fist Level [prevents lag]
  if (MiscellaneousVars[101] != MiscellaneousVars[118])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"KnightFistLVL", d:i);


    if (MiscellaneousVars[101] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[101] < 1) MiscellaneousVars[101] = 1;
   if (MiscellaneousVars[101] > 8) MiscellaneousVars[101] = 8;
   MiscellaneousVars[118] = MiscellaneousVars[101];
  }

  // Baron of Hell's Fist
  // "MiscellaneousVars[102]" Current Baron of Hell Fist Level
  // "MiscellaneousVars[119]" Previous Baron of Hell Fist Level [prevents lag]
  if (MiscellaneousVars[102] != MiscellaneousVars[119])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BaronFistLVL", d:i);

    if (MiscellaneousVars[102] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[102] < 1) MiscellaneousVars[102] = 1;
   if (MiscellaneousVars[102] > 8) MiscellaneousVars[102] = 8;
   MiscellaneousVars[119] = MiscellaneousVars[102];
  }

  // Belphegor's Fist
  // "MiscellaneousVars[103]" Current Belphegor Fist Level
  // "MiscellaneousVars[120]" Previous Belphegor Fist Level [prevents lag]
  if (MiscellaneousVars[103] != MiscellaneousVars[120])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BelphegorFistLVL", d:i);

    if (MiscellaneousVars[103] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[103] < 1) MiscellaneousVars[103] = 1;
   if (MiscellaneousVars[103] > 8) MiscellaneousVars[103] = 8;
   MiscellaneousVars[120] = MiscellaneousVars[103];
  }

  // Bruiser Demon's Fist
  // "MiscellaneousVars[104]" Current Bruiser Demon Fist Level
  // "MiscellaneousVars[121]" Previous Bruiser Demon Fist Level [prevents lag]
  if (MiscellaneousVars[104] != MiscellaneousVars[121])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BruiserFistLVL", d:i);

    if (MiscellaneousVars[104] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[104] < 1) MiscellaneousVars[104] = 1;
   if (MiscellaneousVars[104] > 8) MiscellaneousVars[104] = 8;
   MiscellaneousVars[121] = MiscellaneousVars[104];
  }

  // Archon of Hell's Fist
  // "MiscellaneousVars[105]" Current Archon of Hell Fist Level
  // "MiscellaneousVars[122]" Previous Archon of Hell Fist Level [prevents lag]
  if (MiscellaneousVars[105] != MiscellaneousVars[122])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ArchonFistLVL", d:i);

    if (MiscellaneousVars[105] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[105] < 1) MiscellaneousVars[105] = 1;
   if (MiscellaneousVars[105] > 8) MiscellaneousVars[105] = 8;
   MiscellaneousVars[122] = MiscellaneousVars[105];
  }

  // Pyro Demon's Fist
  // "MiscellaneousVars[106]" Current Pyro Demon Fist Level
  // "MiscellaneousVars[123]" Previous Pyro Demon Fist Level [prevents lag]
  if (MiscellaneousVars[106] != MiscellaneousVars[123])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"PyroFistLVL", d:i);

    if (MiscellaneousVars[106] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[106] < 1) MiscellaneousVars[106] = 1;
   if (MiscellaneousVars[106] > 8) MiscellaneousVars[106] = 8;
   MiscellaneousVars[123] = MiscellaneousVars[106];
  }

  // Death Incarnate's Skull
  // "MiscellaneousVars[107]" Current Death Incarnate Skull Level
  // "MiscellaneousVars[124]" Previous Death Incarnate Skull Level [prevents lag]
  if (MiscellaneousVars[107] != MiscellaneousVars[124])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"IncarnateSkullLVL", d:i);

    if (MiscellaneousVars[107] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[107] < 1) MiscellaneousVars[107] = 1;
   if (MiscellaneousVars[107] > 8) MiscellaneousVars[107] = 8;
   MiscellaneousVars[124] = MiscellaneousVars[107];
  }

  // Archvile's Hand
  // "MiscellaneousVars[108]" Current Archvile Hand Level
  // "MiscellaneousVars[125]" Previous Archvile Hand Level [prevents lag]
  if (MiscellaneousVars[108] != MiscellaneousVars[125])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ArchvileHandLVL", d:i);

    if (MiscellaneousVars[108] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[108] < 1) MiscellaneousVars[108] = 1;
   if (MiscellaneousVars[108] > 8) MiscellaneousVars[108] = 8;
   MiscellaneousVars[125] = MiscellaneousVars[108];
  }

  // Diabloist's Hand
  // "MiscellaneousVars[109]" Current Diabloist Hand Level
  // "MiscellaneousVars[126]" Previous Diabloist Hand Level [prevents lag]
  if (MiscellaneousVars[109] != MiscellaneousVars[126])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"DiabloistHandLVL", d:i);

    if (MiscellaneousVars[109] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[109] < 1) MiscellaneousVars[109] = 1;
   if (MiscellaneousVars[109] > 8) MiscellaneousVars[109] = 8;
   MiscellaneousVars[126] = MiscellaneousVars[109];
  }

  // Flying Balrog's Fist
  // "MiscellaneousVars[110]" Current Flying Balrog Fist Level
  // "MiscellaneousVars[127]" Previous Flying Balrog Fist Level [prevents lag]
  if (MiscellaneousVars[110] != MiscellaneousVars[127])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BalrogFistLVL", d:i);

    if (MiscellaneousVars[110] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[110] < 1) MiscellaneousVars[110] = 1;
   if (MiscellaneousVars[110] > 8) MiscellaneousVars[110] = 8;
   MiscellaneousVars[127] = MiscellaneousVars[110];
  }

  // Hades Elemental's Eye [?]
  // Hades Overlord's Eye [?]
  // End of Checking Hellcore Weapon Levels
 }
 else
 {
  MiscellaneousVars[2] = 0; // Reset Level Check
  MiscellaneousVars[41] = 0; // Reset Agility Check
  MiscellaneousVars[42] = 0;
  MiscellaneousVars[43] = 0;
  MiscellaneousVars[44] = 0;
  MiscellaneousVars[45] = 0;
  MiscellaneousVars[46] = 0;
  MiscellaneousVars[113] = 0;
  MiscellaneousVars[114] = 0;
  MiscellaneousVars[115] = 0;
  MiscellaneousVars[116] = 0;
  MiscellaneousVars[117] = 0;
  MiscellaneousVars[118] = 0;
  MiscellaneousVars[119] = 0;
  MiscellaneousVars[120] = 0;
  MiscellaneousVars[121] = 0;
  MiscellaneousVars[122] = 0;
  MiscellaneousVars[123] = 0;
  MiscellaneousVars[124] = 0;
  MiscellaneousVars[125] = 0;
  MiscellaneousVars[126] = 0;
  MiscellaneousVars[127] = 0;
 }

 // Calculates Friction [Ice/Mud] so Safe Tea Shoes can properly adjust for slowdown/slipperiness?
 int PlayerFriction = GetActorProperty(1001,APROP_Friction);
 //PrintBold(f:PlayerFriction);

 // Calculate Jumping Heights
 // "65" is the main storage value for a character's JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[65] = FixedMul(5.0, 1.5); // Deggaris (7.50)
 else if (CharacterClass == 1) MiscellaneousVars[65] = FixedMul(5.0, 1.7); // Illucia (8.50)
 else if (CharacterClass == 2) MiscellaneousVars[65] = FixedMul(5.0, 1.8); // Flora (9.00)
 else MiscellaneousVars[65] = FixedMul(5.0, 1.6); // Other (8.00)

 // "66" is storage for the level-based multiplier for JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00226) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 1) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00256) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 2) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00276) + FixedMul(1.00, 1.00);
 else MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00246) + FixedMul(1.00, 1.00);
 // PrintBold(f:MiscellaneousVars[66]);

 // "67" is storage for the AGLSeed-based multiplier for JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00076) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 1) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00086) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 2) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00093) + FixedMul(1.00, 1.00);
 else MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00083) + FixedMul(1.00, 1.00);
 // PrintBold(f:MiscellaneousVars[67]);

 // "68" is storage for bonuses/penalities from armor or other items for JumpZ height.
 MiscellaneousVars[68] = FixedMul(1.00, 1.00);
 if (CharacterClass == 2) 
 {
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.10); }		// +10%
  if (CheckActorInventory(1001,"PearlyCorset") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.005); }		// +0.5%
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.005); }	// +0.5%
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }	// +1.25%
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.025); }		// +2.5%
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }	// +1.25%
  if (CheckActorInventory(1001,"KissaBra") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.025); }			// +2.5%
  if (CheckActorInventory(1001,"DivineShield") > 0) {MiscellaneousVars[68] =  MiscellaneousVars[68] + FixedMul(1.00, 0.00625); }		// +0.625%
  if (CheckActorInventory(1001,"BalrogRing") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }		// +1.25%
  if (CheckActorInventory(1001,"DoveRibbon") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.05); }		// +5%
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0375); }	// +3.75%
 }
 else
 {
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.033); }	// -3.3%
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }		// -5%
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.067); }	// -6.7%
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.09); }	// -9%
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.083); }	// -8.3%
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.095); }	// -9.5%
 }
 if (CheckActorInventory(1001,"SauronHelmet") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.10); }		// -10%
 if (CheckActorInventory(1001,"SauronGauntlets") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }		// -5%
 if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }	// -5%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }	// -5%
 if (CheckActorInventory(1001,"TheOneRing") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.25); }			// +25%

 // Acceleratle Buff = +25% Jumping Height
 if (CheckActorInventory(1001,"AcceleratleDQSpell") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.25); }			// +25%

 // "69" is storage for Sceptre for JumpZ height.
 MiscellaneousVars[69] = FixedMul(1.00, 1.00);
 if (CheckActorInventory(1001,"ShieldSlowdown") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.20); }		// -20%
 if (CheckActorInventory(1001,"ShieldSlowdown2") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.10); }		// -10%
 if (CheckActorInventory(1001,"ShieldSlowdown3") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.05); }		// -5%
 // PrintBold(f:MiscellaneousVars[69]);

 // Multiply all the jumpz properties
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[66]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[67]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[68]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[69]);

 // JumpMore perks
 int PerkFactorF = 0.0;
 PerkFactorF = ((MiscellaneousVars[10009] * 0.025) + (MiscellaneousVars[10010] * 0.0625)) + 1.0;
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],PerkFactorF);

 SetActorProperty (1001, APROP_JumpZ, MiscellaneousVars[65]);
 // Convert JumpZ to Player's Jump Height
 MiscellaneousVars[200] = (FixedMul(MiscellaneousVars[65],MiscellaneousVars[65]) / 2);
 MiscellaneousVars[200] = MiscellaneousVars[200] >> 16;
 MiscellaneousVars[200] += 24;
 if (PowerupTimer[7] > 0) MiscellaneousVars[200] = MiscellaneousVars[200] * 4;

/*
 PrintBold(s:"Level X: ",f:MiscellaneousVars[66],
           s:"\nSeed X: ",f:MiscellaneousVars[67],
           s:"\nArmor X: ",f:MiscellaneousVars[68],
           s:"\nSceptreShield X: ",f:MiscellaneousVars[69],
           s:"\nTotal Jump [fixed]: ",f:MiscellaneousVars[65],
           s:"\nTotal Jump [solid]: ",d:MiscellaneousVars[200]);
*/

 //************************************************************************
 //***Determines Maximum Ammo Ammounts Based on Strength Seeds and Level***
 //************************************************************************
 // "80" is the number of backpacks grabbed.
 // "81" is storage for the current Clip maximum. // 1 STRSeed = 5 Bullets, 1 STRLevel = 10 Bullets [need backpacks to maximize use of this] [(Base) + 2560 + 2000 = 4560+]
 // "82" is storage for the current Shell maximum. // 1 STRSeed = 2 Shells, 1 STRLevel = 4 Shells [need backpacks to maximize use of this] [(Base) + 1024 + 800 = 1824+]
 // "83" is storage for the current Rocket maximum. // 1 STRSeed = 1 Rocket, 1 STRLevel = 2 Rockets [need backpacks to maximize use of this] [(Base) + 512 + 400 = 912+]
 // "84" is storage for the current Cell maximum. // 1 STRSeed = 20 Cells, 1 STRLevel = 40 Cells [need backpacks to maximize use of this] [(Base) + 10240 + 8000 = 18240+]
 // "85" is storage for the current DiarisArrow maximum. // 1 STRSeed = 3 Arrows, 1 STRLevel = 6 Arrows [need backpacks to maximize use of this] [(Base) + 1536 + 1200 = 2736+]

 // "91" is storage for the ultimate Clip maximum.
 // "92" is storage for the ultimate Shell maximum.
 // "93" is storage for the ultimate Rocket maximum.
 // "94" is storage for the ultimate Cell maximum.
 // "95" is storage for the ultimate DiarisArrow maximum.

 if (CharacterClass == 0) // Deggaris
 {
  MiscellaneousVars[91] = 500 + (MiscellaneousVars[35] * 5) + (PlayerLevel * 10); // Clip/Bullets
  MiscellaneousVars[92] = 140 + (MiscellaneousVars[35] * 2) + (PlayerLevel * 4); // Shells
  MiscellaneousVars[93] = 120 + (MiscellaneousVars[35] * 1) + (PlayerLevel * 2); // Rockets
  MiscellaneousVars[94] = 750 + (MiscellaneousVars[35] * 20) + (PlayerLevel * 40); // Cells
  MiscellaneousVars[95] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // DiarisArrows

  MiscellaneousVars[81] = 250 + (MiscellaneousVars[80] * 100);
  MiscellaneousVars[82] = 70 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[83] = 60 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[84] = 375 + (MiscellaneousVars[80] * 150);
  MiscellaneousVars[85] = 0 + (MiscellaneousVars[80] * 15);
 }

 if (CharacterClass == 1) // Illucia
 {
  MiscellaneousVars[91] = 300 + (MiscellaneousVars[35] * 15 / 4) + (PlayerLevel * 15 / 2); // Clip/Bullets
  MiscellaneousVars[92] = 90 + (MiscellaneousVars[35] * 3 / 2) + (PlayerLevel * 3); // Shells
  MiscellaneousVars[93] = 70 + (MiscellaneousVars[35] * 3 / 4) + (PlayerLevel * 3 / 2); // Rockets
  MiscellaneousVars[94] = 500 + (MiscellaneousVars[35] * 15) + (PlayerLevel * 30); // Cells
  MiscellaneousVars[95] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // DiarisArrows

  MiscellaneousVars[81] = 175 + (MiscellaneousVars[80] * 100);
  MiscellaneousVars[82] = 45 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[83] = 35 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[84] = 250 + (MiscellaneousVars[80] * 150);
  MiscellaneousVars[85] = 0 + (MiscellaneousVars[80] * 15);
 }

 if (CharacterClass == 2) // Flora
 {
  if (CheckActorInventory(1001,"FloraLearnedPistols") > 0)
  {
   MiscellaneousVars[91] = 200 + (MiscellaneousVars[35] * 5 / 2) + (PlayerLevel * 5); // Clip/Bullets
  }
  else
  {
   MiscellaneousVars[91] = 0; // Clip/Bullets
  }
  MiscellaneousVars[92] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Shells
  MiscellaneousVars[93] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Rockets
  MiscellaneousVars[94] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Cells
  MiscellaneousVars[95] = 30 + (MiscellaneousVars[35] * 3) + (PlayerLevel * 6); // DiarisArrows

  if (ClassicDoomType == 3) // Hexen has no backpack item so in Hexen her max ammo is solely determined on her Strength stat and her level.
  {
   MiscellaneousVars[81] = MiscellaneousVars[91];
   MiscellaneousVars[82] = MiscellaneousVars[92];
   MiscellaneousVars[83] = MiscellaneousVars[93];
   MiscellaneousVars[84] = MiscellaneousVars[94];
   MiscellaneousVars[85] = MiscellaneousVars[95];
  }
  else
  {
   MiscellaneousVars[81] = 100 + (MiscellaneousVars[80] * 100);
   MiscellaneousVars[82] = 0 + (MiscellaneousVars[80] * 25);
   MiscellaneousVars[83] = 0 + (MiscellaneousVars[80] * 25);
   MiscellaneousVars[84] = 0 + (MiscellaneousVars[80] * 150);
   MiscellaneousVars[85] = 15 + (MiscellaneousVars[80] * 15);
  }
 }

 
 if (MiscellaneousVars[81] > MiscellaneousVars[91]) MiscellaneousVars[81] = MiscellaneousVars[91];
 if (MiscellaneousVars[82] > MiscellaneousVars[92]) MiscellaneousVars[82] = MiscellaneousVars[92];
 if (MiscellaneousVars[83] > MiscellaneousVars[93]) MiscellaneousVars[83] = MiscellaneousVars[93];
 if (MiscellaneousVars[84] > MiscellaneousVars[94]) MiscellaneousVars[84] = MiscellaneousVars[94];
 if (MiscellaneousVars[85] > MiscellaneousVars[95]) MiscellaneousVars[85] = MiscellaneousVars[95];

 SetActivator(1001); // Set to Player's ID
 SetAmmoCapacity("Clip", MiscellaneousVars[81]);
 SetAmmoCapacity("Shell", MiscellaneousVars[82]);
 SetAmmoCapacity("RocketAmmo", MiscellaneousVars[83]);
 SetAmmoCapacity("Cell", MiscellaneousVars[84]);
 SetAmmoCapacity("DiarisArrow", MiscellaneousVars[85]);
 SetActivator(0); // Set back to worldly activator

 if (CheckActorInventory(1001,"Clip") > MiscellaneousVars[81]) TakeActorInventory(1001,"Clip", (CheckActorInventory(1001,"Clip") - MiscellaneousVars[81]) ); 
 if (CheckActorInventory(1001,"Shell") > MiscellaneousVars[82]) TakeActorInventory(1001,"Shell", (CheckActorInventory(1001,"Shell") - MiscellaneousVars[82]) ); 
 if (CheckActorInventory(1001,"RocketAmmo") > MiscellaneousVars[83]) TakeActorInventory(1001,"RocketAmmo", (CheckActorInventory(1001,"RocketAmmo") - MiscellaneousVars[83]) ); 
 if (CheckActorInventory(1001,"Cell") > MiscellaneousVars[84]) TakeActorInventory(1001,"Cell", (CheckActorInventory(1001,"Cell") - MiscellaneousVars[84]) ); 
 if (CheckActorInventory(1001,"DiarisArrow") > MiscellaneousVars[85]) TakeActorInventory(1001,"DiarisArrow", (CheckActorInventory(1001,"DiarisArrow") - MiscellaneousVars[85]) ); 

 //***************************
 //***Check DVII Game Flags***
 //***************************

 if (CharacterClass == 2 && ModType == 2)
 {
  if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) != 0) KilledMonsterFactor = GetLevelInfo(LEVELINFO_KILLED_MONSTERS) * 1000 / GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);

  // Checks for all secrets found in order to spawn Safe Tea Shoes in MAP01
  if (SpecialGameFlags[0] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1201 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1744 * 65536; SpawnFixedY = -724 * 65536; SpawnFixedZ = 16 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("SafeTeaShoes",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[0] = 1;
  }

  // Checks for all secrets found in order to spawn Pearly Corset in MAP02
  if (SpecialGameFlags[1] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1202 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1440 * 65536; SpawnFixedY = 160 * 65536; SpawnFixedZ = 112 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("PearlyCorset",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[1] = 1;
  }

  // Checks for all secrets found in order to spawn Water Flying Dress in MAP03
  if (SpecialGameFlags[2] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1203 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS)) 
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -6592 * 65536; SpawnFixedY = 4416 * 65536; SpawnFixedZ = 24 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("WaterFlyingDress",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[2] = 1;
  }

  // Checks for all secrets found in order to spawn Evenstar Necklace in MAP04
  if (SpecialGameFlags[3] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1204 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   Randomizer1 = random(1,4);
   if (Randomizer1 == 1) { SpawnFixedX = -2752 * 65536; SpawnFixedY = 3872 * 65536; SpawnFixedZ = 16 * 65536; } // -2752,3872,0 coords
   if (Randomizer1 == 2) { SpawnFixedX = -2560 * 65536; SpawnFixedY = 4064 * 65536; SpawnFixedZ = 16 * 65536; } // -2560,4064,0 coords
   if (Randomizer1 == 3) { SpawnFixedX = -2752 * 65536; SpawnFixedY = 4256 * 65536; SpawnFixedZ = 16 * 65536; } // -2752,4256,0 coords
   if (Randomizer1 == 4) { SpawnFixedX = -2944 * 65536; SpawnFixedY = 4064 * 65536; SpawnFixedZ = 16 * 65536; } // -2944,4064,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("EvenstarNecklace",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[3] = 1;
  }

  // Checks for all secrets found in order to spawn Cloak of Evasion in MAP05
  if (SpecialGameFlags[4] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1205 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1216 * 65536; SpawnFixedY = -464 * 65536; SpawnFixedZ = 1416 * 65536; // 1216,-464,1400 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("CloakOfEvasion",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[4] = 1;
  }

  // Checks for all secrets found in order to spawn Falcon Knife Earrings in MAP05S
  if (SpecialGameFlags[5] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1206 && KilledMonsterFactor >= 950)
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -4160 * 65536; SpawnFixedY = -2396 * 65536; SpawnFixedZ = 16 * 65536; // -4160,-2396,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("FalconKnifeEarrings",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[5] = 1;
  }

  // Checks for all secrets found in order to spawn Anubis Cufflinks in MAP06
  if (SpecialGameFlags[6] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1207 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -128 * 65536; SpawnFixedY = -1312 * 65536; SpawnFixedZ = -48 * 65536; // -128,-1312,-64 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("AnubisCufflinks",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[6] = 1;
  }

  // Checks for all secrets found in order to spawn Kissa's Armored Brassiare in MAP07
  if (SpecialGameFlags[7] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1208 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -544 * 65536; SpawnFixedY = -224 * 65536; SpawnFixedZ = 272 * 65536; // -544,-224,256 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("KissaBra",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[7] = 1;
  }

  // Checks for all secrets found in order to spawn Ruinous/Divine Shield in MAP08
  if (SpecialGameFlags[8] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1209 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -6784 * 65536; SpawnFixedY = 12320 * 65536; SpawnFixedZ = 16 * 65536; // -6784,12320,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else
   {
    if (random(1,256) < 5) { SpawnForced("DivineShield",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0); }
    else { SpawnForced("RuinousShield",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0); }
   }
   SpecialGameFlags[8] = 1;
  }

  // Checks for all secrets found in order to spawn Balrog's Ring in MAP09
  if (SpecialGameFlags[9] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1210 && ThingCountName("FlyingBalrog",0) < 1 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 512 * 65536; SpawnFixedY = 2240 * 65536; SpawnFixedZ = 16 * 65536; // 512,2240,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("BalrogRing",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[9] = 1;
  }

  // Checks for all secrets found in order to spawn Dove's Ribbon in MAP10
  if (SpecialGameFlags[10] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1211 && KilledMonsterFactor >= 750)
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 8048 * 65536; SpawnFixedY = 2272 * 65536; SpawnFixedZ = 256 * 65536; // 8048,2272,240 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("DoveRibbon",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   SpecialGameFlags[10] = 1;
  }

 }


 if (MaxHealthTrue > 0)
 {
  HealthRatio = GetActorProperty(1001,APROP_Health) * 1000 / MaxHealthTrue;
  if (HealthRatio < 0) HealthRatio = 0;
  if (HealthRatio > 2000) HealthRatio = 2000;
 }

 if (GetActorProperty(1001,APROP_Health) <= 0) { GiveActorInventory(1001,"PlayerIsDead", 1); }
 else
 {
  TakeActorInventory(1001,"PlayerIsDead", 1);

  if (HealthRatio != MiscellaneousVars[4]); // "4" is for saving health ratio for giving Low or Critical Health Inventory items [for Status Bar Displays and using "Nova" with Flora's Hellcore weapons]
  {
   TakeActorInventory(1001,"NormalHealth", 1);
   TakeActorInventory(1001,"LowHealth", 1);
   TakeActorInventory(1001,"CriticalHealth", 1);

   if (HealthRatio < 167)
   {
    if (HealthRatio < 21) GiveActorInventory(1001,"CriticalHealth", 1);
    else GiveActorInventory(1001,"LowHealth", 1);
   }
   else GiveActorInventory(1001,"NormalHealth", 1);

   MiscellaneousVars[4] = HealthRatio;
  }
 }

 if (CurrentArmorClass == 6)
 {
  GiveActorInventory(1001,"DSDiamondArmorClass2", 1);
  TakeActorInventory(1001,"DSNoArmorClass", 9999);
  TakeActorInventory(1001,"DSGreenArmorClass", 9999);
  TakeActorInventory(1001,"DSBlueArmorClass", 9999);
  TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
  TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
  TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
  if (CharacterClass != 2) Thing_SetTranslation(1001, 21); 
 }
 else
 {
  if (CurrentArmorClass == 5)
  {
   GiveActorInventory(1001,"DSStoneArmorClass2", 1);
   TakeActorInventory(1001,"DSNoArmorClass", 9999);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   if (CharacterClass != 2) Thing_SetTranslation(1001, 20); 
  }
  else
  {
   if (CurrentArmorClass == 4)
   {
    GiveActorInventory(1001,"DSDiamondArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
    if (CharacterClass != 2) Thing_SetTranslation(1001, 21); 
   }
   else
   {
    if (CurrentArmorClass == 3)
    {
     GiveActorInventory(1001,"DSStoneArmorClass1", 1);
     TakeActorInventory(1001,"DSNoArmorClass", 9999);
     TakeActorInventory(1001,"DSGreenArmorClass", 9999);
     TakeActorInventory(1001,"DSBlueArmorClass", 9999);
     TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
     TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
     TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
     if (CharacterClass != 2) Thing_SetTranslation(1001, 20); 
    }
    else
    {
     if (CurrentArmorClass == 2)
     {
      GiveActorInventory(1001,"DSBlueArmorClass", 1);
      TakeActorInventory(1001,"DSNoArmorClass", 9999);
      TakeActorInventory(1001,"DSGreenArmorClass", 9999);
      TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
      TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
      TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
      TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
      if (CharacterClass != 2) Thing_SetTranslation(1001, 19); 
     }
     else
     {
      if (CurrentArmorClass == 1)
      {
       GiveActorInventory(1001,"DSGreenArmorClass", 1);
       TakeActorInventory(1001,"DSNoArmorClass", 9999);
       TakeActorInventory(1001,"DSBlueArmorClass", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
       if (CharacterClass != 2) Thing_SetTranslation(1001, 18); 
      }
      else
      {
       GiveActorInventory(1001,"DSNoArmorClass", 1);
       TakeActorInventory(1001,"DSGreenArmorClass", 9999);
       TakeActorInventory(1001,"DSBlueArmorClass", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
       if (CharacterClass != 2) Thing_SetTranslation(1001, 17); 
      }
     }
    }
   }
  }
 }

 if (CheckActorInventory(1001,"Armor") <= 0)
 {
  CurrentArmorClass = 0;
  CurrentMaxArmor = 0;
  if (CheckActorInventory(1001,"DSNoArmorClass") == 0)
  {
   GiveActorInventory(1001,"DSNoArmorClass", 1);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
  }
 }
 // PrintBold(d:CurrentArmorClass);

 //***************************************
 //**Scripted Events for Individual Maps**
 //***************************************

 if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1204) // MAP04 - Minas Morgul
  {
   // [1401] = MAP04, Damage inflicted by Helltoxins in Minas Morgul
   GameScriptEvents[1401] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1401] = random(15,17);
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1401] = random(16,20);
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1401] = random(17,23);
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1401] = random(18,26);
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1401] = random(21,31);

   // [1402] = MAP04, Max Damage timer for Helltoxins in Minas Morgul
   GameScriptEvents[1402] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1402] = 35;
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1402] = 32;
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1402] = 29;
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1402] = 26;
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1402] = 21;

   // [1403] = MAP04, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.
   GameScriptEvents[1403] = 0;
   if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerIronFeet") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerMask") > 0) GameScriptEvents[1403] += 1;   

   // [1404] = MAP04, Current HellToxen Interval [seperate timer]   
   GameScriptEvents[1404] += 1;
   if (GameScriptEvents[1404] >= GameScriptEvents[1402])
   {
    GameScriptEvents[1404] -= GameScriptEvents[1402];
    if (GameScriptEvents[1403] == 0)
    {
     G1 = random(1,100);
     if (CharacterClass == 2)
     {
      if (G1 < 15) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 86) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     if (CharacterClass == 1)
     {
      if (G1 < 11) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 90) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     else
     {
      if (G1 < 13) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 88) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     Thing_Damage(1001,GameScriptEvents[1401],13);
    }
   }

  }

  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1205) // MAP05 - Eagle's Nest
  {
   // [1401] = MAP05, Damage inflicted by Helltoxins in Eagle's Nest
   GameScriptEvents[1401] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1401] = random(2,4);
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1401] = random(3,5);
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1401] = random(4,6);
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1401] = random(5,7);
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1401] = random(6,8);

   // [1402] = MAP05, Max Damage timer for Helltoxins in Eagle's Nest
   GameScriptEvents[1402] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1402] = 35;
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1402] = 32;
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1402] = 29;
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1402] = 26;
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1402] = 21;

   // [1403] = MAP05, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.
   GameScriptEvents[1403] = 0;
   if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerIronFeet") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerMask") > 0) GameScriptEvents[1403] += 1;   

   SpawnFixedX = GetActorX(1001) >> 16;
   SpawnFixedY = GetActorY(1001) >> 16;
   SpawnFixedZ = GetActorZ(1001) >> 16;

   // [1404] = MAP05, Current HellToxen Interval [seperate timer]   
   GameScriptEvents[1404] += 1;
   if (GameScriptEvents[1404] >= GameScriptEvents[1402])
   {
    GameScriptEvents[1404] -= GameScriptEvents[1402];
    if (GameScriptEvents[1403] == 0)
    {
     G1 = random(1,100);
     if (CharacterClass == 2)

     {
      if (G1 < 15) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 86) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     if (CharacterClass == 1)
     {
      if (G1 < 11) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 90) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     else
     {
      if (G1 < 13) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 88) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     // Upper Left = -9216, 11776
     // Lower Right = 14336, -11776
     // Chasm Bottom = -5000

     if (SpawnFixedZ < 0) // Negative Z Vels
     {
      if (SpawnFixedZ > -1001) { G1 = 10; GameScriptEvents[1401] = GameScriptEvents[1401] * 4 / 3; }
      if (SpawnFixedZ > -2001 && SpawnFixedZ < -1000) { G1 = 16; GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 3; }
      if (SpawnFixedZ > -3001 && SpawnFixedZ < -2000) { G1 = 23; GameScriptEvents[1401] = GameScriptEvents[1401] * 6 / 3; }
      if (SpawnFixedZ > -4001 && SpawnFixedZ < -3000) { G1 = 31; GameScriptEvents[1401] = GameScriptEvents[1401] * 7 / 3; }
      if (SpawnFixedZ < -4000) { G1 = 40; GameScriptEvents[1401] = GameScriptEvents[1401] * 8 / 3; }
     }
     else // Positive Z Vels
     {
      if (SpawnFixedZ > -1 && SpawnFixedZ < 1000) { G1 = 5; }
      if (SpawnFixedZ > 999 && SpawnFixedZ < 2000) { G1 = 4; }
      if (SpawnFixedZ > 1999 && SpawnFixedZ < 3000) { G1 = 3; GameScriptEvents[1401] = GameScriptEvents[1401] * 2 / 3; }
      if (SpawnFixedZ > 2999 && SpawnFixedZ < 4000) { G1 = 2; GameScriptEvents[1401] = GameScriptEvents[1401] * 2 / 3; }
      if (SpawnFixedZ > 3999 && SpawnFixedZ < 5000) { G1 = 1; GameScriptEvents[1401] = GameScriptEvents[1401] * 1 / 3; }
      if (SpawnFixedZ > 4999) { G1 = 0; GameScriptEvents[1401] = GameScriptEvents[1401] * 0 / 3; }
     }

     if (SpawnFixedX > -9217 && SpawnFixedX < 14337 && SpawnFixedY > -11777 && SpawnFixedY < 11777 && random(1,100) <= G1) { Thing_Damage(1001,GameScriptEvents[1401],13); }
    }
   }
  }

  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1209) // MAP08 - Unholy Cathedrel
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
/*
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1210) // MAP09 - You Shall Not Pass!
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1211) // MAP10 - Hell's Vendetta
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1212) // MAP10B - attedneV s'lleH
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
*/
 }

 int VelX = GetActorVelX(1001);
 int VelY = GetActorVelY(1001);
 int VelZ = GetActorVelZ(1001);

 if (GetCVar("dvdsdebug_showdashinformation") > 0)
 {
  PrintBold(s:"VelX: ",d:VelX,
            s:"\nVelY: ",d:VelY,
            s:"\nVelZ: ",d:VelZ);
 }

 if (GetActorProperty(1001,APROP_Health) > 0) 
 {
  if (MiscellaneousVars[149] != 0) MiscellaneousVars[149] = 0; // Unsets a special flag to check for a "pistol reset" like in resurgance
  if (CheckActorInventory(1001,"Dedz") > 0) TakeActorInventory(1001,"Dedz", 9999);
 }

 Delay(1);
 Restart;
}

// MegaSphere Armor [Deggaris & Illucia Only] or Mana [All Three Characters]
script "MegaSphereArmor" (void)
{
 int I1, I2, Z1, Z2, C1, C2;
 int MaxManaLimit;

 if (CharacterClass == 2) // Flora does not get armor from a Soul Sphere, but instead gets Mana up to 200% of her maximum
 {
  CurrentMana = MaxMana * 2;
 }
 else
 {
  // Gives Deggaris and Illucia full MP
  if (CharacterClass == 1) MaxManaLimit = MaxMana * 5 / 3;
  if (CharacterClass == 0) MaxManaLimit = MaxMana * 4 / 3;
  CurrentMana = MaxManaLimit;

  // Saves original raw Armor Value
  Z1 = CheckInventory("Armor");

  // Clears Armor Types
  Z2 = CheckInventory("Armor"); TakeInventory("Armor", Z2);
  Z2 = CheckInventory("ArmorBonusDS"); TakeInventory("ArmorBonusDS", Z2);
  Z2 = CheckInventory("ArmorBonusDSGreen"); TakeInventory("ArmorBonusDSGreen", Z2);
  Z2 = CheckInventory("ArmorBonusDSBlue"); TakeInventory("ArmorBonusDSBlue", Z2);
  Z2 = CheckInventory("ArmorBonusDSStone1"); TakeInventory("ArmorBonusDSStone1", Z2);
  Z2 = CheckInventory("ArmorBonusDSStone2"); TakeInventory("ArmorBonusDSStone2", Z2);
  Z2 = CheckInventory("ArmorBonusDSDiamond1"); TakeInventory("ArmorBonusDSDiamond1", Z2);
  Z2 = CheckInventory("ArmorBonusDSDiamond2"); TakeInventory("ArmorBonusDSDiamond2", Z2);
 
  // Reinitalizes the proper Armor Class after the previous code above clears it
  if (CurrentArmorClass <= 1) { CurrentArmorClass = 2; GiveInventory("ArmorBonusDSBlue", 200); }
  else if (CurrentArmorClass == 2) { CurrentArmorClass = 3; GiveInventory("ArmorBonusDSStone1", 333); }
  else if (CurrentArmorClass == 3) { CurrentArmorClass = 4; GiveInventory("ArmorBonusDSDiamond1", 888); }
  else if (CurrentArmorClass == 4) { CurrentArmorClass = 5; GiveInventory("ArmorBonusDSStone2", 1332); }
  else if (CurrentArmorClass == 5) { CurrentArmorClass = 6; GiveInventory("ArmorBonusDSDiamond2", 3552); }
  else if (CurrentArmorClass == 6) { GiveInventory("ArmorBonusDSDiamond2", 3552); }
 
  if (CurrentArmorClass == 6)
  {  
   CurrentMaxArmor = 3552;
   GiveInventory("DSDiamondArmorClass2", 1);
   TakeInventory("DSNoArmorClass", 9999);
   TakeInventory("DSGreenArmorClass", 9999);
   TakeInventory("DSBlueArmorClass", 9999);
   TakeInventory("DSStoneArmorClass1", 9999);
   TakeInventory("DSDiamondArmorClass1", 9999);
   TakeInventory("DSStoneArmorClass2", 9999);
  }
  else
  {
   if (CurrentArmorClass == 5)
   {
    CurrentMaxArmor = 1332;
    GiveInventory("DSStoneArmorClass2", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   else
   {
    if (CurrentArmorClass == 4)
    {
     CurrentMaxArmor = 888;
     GiveInventory("DSDiamondArmorClass1", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     if (CurrentArmorClass == 3)
     {
      CurrentMaxArmor = 333;
      GiveInventory("DSStoneArmorClass1", 1);
      TakeInventory("DSNoArmorClass", 9999);
      TakeInventory("DSGreenArmorClass", 9999);
      TakeInventory("DSBlueArmorClass", 9999);
      TakeInventory("DSDiamondArmorClass1", 9999);
      TakeInventory("DSStoneArmorClass2", 9999);
      TakeInventory("DSDiamondArmorClass2", 9999);
     }
     else
     {
      if (CurrentArmorClass == 2)
      {
       CurrentMaxArmor = 200;
       GiveInventory("DSBlueArmorClass", 1);
       TakeInventory("DSNoArmorClass", 9999);
       TakeInventory("DSGreenArmorClass", 9999);
       TakeInventory("DSStoneArmorClass1", 9999);
       TakeInventory("DSDiamondArmorClass1", 9999);
       TakeInventory("DSStoneArmorClass2", 9999);
       TakeInventory("DSDiamondArmorClass2", 9999);
      }
      else
      {
       if (CurrentArmorClass == 1)
       {
        CurrentMaxArmor = 100;
        GiveInventory("DSGreenArmorClass", 1);
        TakeInventory("DSNoArmorClass", 9999);
        TakeInventory("DSBlueArmorClass", 9999);
        TakeInventory("DSStoneArmorClass1", 9999);
        TakeInventory("DSDiamondArmorClass1", 9999);
        TakeInventory("DSStoneArmorClass2", 9999);
        TakeInventory("DSDiamondArmorClass2", 9999);
       }
       else
       {
        CurrentMaxArmor = 0;
        GiveInventory("DSNoArmorClass", 1);
        TakeInventory("DSGreenArmorClass", 9999);
        TakeInventory("DSBlueArmorClass", 9999);
        TakeInventory("DSStoneArmorClass1", 9999);
        TakeInventory("DSDiamondArmorClass1", 9999);
        TakeInventory("DSStoneArmorClass2", 9999);
        TakeInventory("DSDiamondArmorClass2", 9999);
       }
      }
     }
    }
   }
  }
 }

}

// DEBUG SCRIPT: Sets Mana to the Current Amount
script "SetManaAmount" (int C5)
{
 CurrentMana = C5;
 int MaxManaLimit;
 if (CurrentMana < 1) CurrentMana = 0;

 if (CharacterClass == 2) MaxManaLimit = MaxMana * 2;		// Flora = 200%
 if (CharacterClass == 1) MaxManaLimit = MaxMana * 5 / 3;	// Illucia = 166.6%
 if (CharacterClass == 0) MaxManaLimit = MaxMana * 4 / 3;	// Deggaris = 133.3%

 if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
}

// Checks the Player's level to determine how much drawing the Diaris Longbow will slow you down while aiming
script "DrawBow" (int isbowdrawn)
{
 int i = 0;
 int bowlevel;
 int strforbowdraw;
 int aglforbowdraw;
 str BowLevelItem;

 bowlevel = PlayerLevel / 25;
 strforbowdraw = MiscellaneousVars[35] / 16;
 aglforbowdraw = MiscellaneousVars[31] / 10;
 bowlevel += strforbowdraw;
 bowlevel += aglforbowdraw;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) bowlevel = bowlevel * 4 / 3;

 if (bowlevel < 0) bowlevel = 0; // Min of 0
 if (bowlevel > 50) bowlevel = 50; // Max of 50
 if (isbowdrawn == 1)
 {
  if (bowlevel != MiscellaneousVars[8]) // [8] is for bow profiency
  {
   for (i = 0; i < 51; i++)
   {
    BowLevelItem = StrParam(s:"BowDrawnSlowdown", d:i);

    if (bowlevel == i)
    GiveActorInventory(1001, BowLevelItem, 1);
     else
    TakeActorInventory(1001, BowLevelItem, 1);
   }
   MiscellaneousVars[8] = bowlevel;
  }
 }
 else
 {
  MiscellaneousVars[8] = -1;
  for (i = 0; i < 51; i++)
  {
   BowLevelItem = StrParam(s:"BowDrawnSlowdown", d:i);

   TakeActorInventory(1001, BowLevelItem, 1);
  }
 }
}

// Checks Sauron's Gauntlets to see if the item is removed from the map or not.
script "GauntletsCheckCharacter" (void)
{
 if (CharacterClass == 0) 
 {
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) SetThingSpecial(0,0,0,0,0,1,2); else SetThingSpecial(0,0,0,0,0,0,2);
 }
 if (CharacterClass == 1)
 {
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) SetThingSpecial(0,0,0,0,0,1,1); else SetThingSpecial(0,0,0,0,0,0,1);
 }
 if (CharacterClass == 2)
 {
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) SetThingSpecial(0,0,0,0,0,1,3); else SetThingSpecial(0,0,0,0,0,0,3);
 }
}

// Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color based on the current Armor Class of Deggaris or Illucia [does not apply to Flora as she can't use Armor Bonuses and they aren't supposed to "appear" when she is in play]
script "ArmorBonusEyeGlow" (void)
{
 if (CharacterClass != 2)
 {
  if (CurrentArmorClass == 0) { SetThingSpecial(0,0,0,0,0,1,0); Thing_SetTranslation(1281,18); } // If you have no Armor Class
  if (CurrentArmorClass == 1) { SetThingSpecial(0,0,0,0,0,1,0); Thing_SetTranslation(1281,18); } // If you have Green Armor Class
  if (CurrentArmorClass == 2) { SetThingSpecial(0,0,0,0,0,2,0); Thing_SetTranslation(1281,22); } // If you have Blue Armor Class
  if (CurrentArmorClass == 3) { SetThingSpecial(0,0,0,0,0,3,0); Thing_SetTranslation(1281,20); } // If you have Stone Armor [1] Class
  if (CurrentArmorClass == 4) { SetThingSpecial(0,0,0,0,0,4,0); Thing_SetTranslation(1281,21); } // If you have Diamond Armor [1] Class
  if (CurrentArmorClass == 5) { SetThingSpecial(0,0,0,0,0,3,0); Thing_SetTranslation(1281,20); } // If you have Stone Armor [2] Class
  if (CurrentArmorClass == 6) { SetThingSpecial(0,0,0,0,0,6,0); Thing_SetTranslation(1281,21); } // If you have Diamond Armor [2] Class
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
}

// Backpack Pickup Script
script "GrabBackpack" (void)
{
 int ClipMax, ShellMax, RocketMax, CellMax, DiarisArrowMax;

 MiscellaneousVars[80] += 1; 
 if (MiscellaneousVars[80] > 512) MiscellaneousVars[80] = 512;

 if (CharacterClass != 2) // Deggaris & Illucia
 {
  GiveActorInventory(1001,"Clip", 20); 
  GiveActorInventory(1001,"Shell", 8); 
  GiveActorInventory(1001,"RocketAmmo", 2); 
  GiveActorInventory(1001,"Cell", 80); 
 }
 if (CharacterClass == 2) // Flora
 {
  if (CheckActorInventory(1001,"FloraLearnedPistols") > 0) GiveActorInventory(1001,"Clip", 20);
  GiveActorInventory(1001,"DiarisArrow", 6); 
 }
}

// Debug. Prints whatever it specified. :P
script "PrintTest" (void)
{
 int test;
 test += 1;
 Print(d:test);
// Print(s:"?");
}

// Checks to see if you already possess the Ring so it cannot appear more than once.
script "OneRingCopyCheck" (void)
{
 if (CheckActorInventory(1001,"TheOneRing") > 0) SetThingSpecial(0,0,0,0,0,1,0); else SetThingSpecial(0,0,0,0,0,0,0);
}

// Checks to see if you already possess the Helmet so it cannot appear more than once.
script "HelmetCopyCheck" (void)
{
 if (CheckActorInventory(1001,"SauronHelmet") > 0) SetThingSpecial(0,0,0,0,0,1,0); else SetThingSpecial(0,0,0,0,0,0,0);
}

// Prints out damage on screen for a projectile attached to this script
script "DamagePrintout" (void)
{
 int C1;
 C1 = GetActorProperty(0,APROP_Damage); 
 PrintBold(d:C1);
}

// Set Levelcap Manually
script "SetLevelCap" (int C5)
{
 int C1;
 if (C5 > 99)
 {
  if (C5 < 201)
  {
   LevelCap = C5;
  }
  else
  {
   LevelCap = 200;
  }
 }
 else
 {
  LevelCap = 100;
 }
}

//Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
script "SceptreTwirlFrameCheck" (int Arg1)
{
 int ManaDrainTimer;
 if (Arg1 == 0) { MiscellaneousVars[198] = 0; } // 0 resets the timer to 0
 else // Arg1's value is the speed of the twirling
 {
  if (Arg1 > 16) Arg1 = 16;
  if (Arg1 < 1) Arg1 = 1;
  MiscellaneousVars[198] += Arg1;

  if (MiscellaneousVars[198] < 1) MiscellaneousVars[198] += 32; // Prevents Timer Underflow
  if (MiscellaneousVars[198] > 32) MiscellaneousVars[198] -= 32; // Prevents Timer Overflow
 }

 int i;
 str TwirlFrame;
 for (i = 1; i < 33; i++)
 {
  TwirlFrame = StrParam(s:"SceptreTwirlTimer", d:i);

  if (MiscellaneousVars[198] == i)
   GiveActorInventory(1001, TwirlFrame, 1);
    else
   TakeActorInventory(1001, TwirlFrame, 1);
 }
}

// Increases the number of points towards uncursing a Ruinous Shield into a Divine Shield
script "CursedShieldPain" (int Arg1)
{
 int C1;

 if (CheckActorInventory(1001,"PearlyCorset") > 0) Arg1 += Arg1;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) Arg1 += Arg1;

 if (CharacterClass == 2)
 {
  if (CheckActorInventory(1001,"RuinousShield") > 0)
  {
   C1 = random(1,100);
   if (C1 == 1) Arg1 = Arg1 * 16;
   if (C1 == 2) Arg1 = Arg1 * 8;
   if (C1 == 3) Arg1 = Arg1 * 8;
   if (C1 == 4) Arg1 = Arg1 * 4;
   if (C1 == 5) Arg1 = Arg1 * 4;
   if (C1 == 6) Arg1 = Arg1 * 4;
   if (C1 == 7) Arg1 = Arg1 * 4;
   if (C1 == 8) Arg1 = Arg1 * 2;
   if (C1 == 9) Arg1 = Arg1 * 2;
   if (C1 == 10) Arg1 = Arg1 * 2;
   if (C1 == 11) Arg1 = Arg1 * 2;
   if (C1 == 12) Arg1 = Arg1 * 2;
   if (C1 == 13) Arg1 = Arg1 * 2;
   if (C1 == 14) Arg1 = Arg1 * 2;
   if (C1 == 15) Arg1 = Arg1 * 2;
   Arg1 *= 2;
   if (Arg1 < 2) Arg1 = 2;
   if (Arg1 > 1024) Arg1 = 1024;
   MiscellaneousVars[202] += Arg1;
   // PrintBold(s:"+",d:Arg1,s:" (",d:MiscellaneousVars[202],s:")");
  }
 }
}
// Checks for DivineShield in inventory for the Ruinous Shield PICKUP.
script "DivineShieldChecker" (void)
{
 if (CheckActorInventory(1001,"DivineShield") > 0)
 {
  SetThingSpecial(0,0,0,0,0,0,1); // Sets Args[4] to 1 so the item can know to make the shield vanish
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,0); // Sets Args[4] to 0 so the item can know to NOT make the shield vanish
 }
}

// Gauntlet Flash Effect
script "GauntletFlashEffect" (void)
{
 if (MiscellaneousVars[49] > 0)
 {
  FadeRange(224,224,224,0.33,224,224,224,0,0.5);
  MiscellaneousVars[49] = 0;
 }
}

// Sauron's Gauntlets Effect
script "SauronGauntletsHit" (int Amount, int HitType)
{
 int C1, C2, C3, Z1, Z2, Z3, I1, I2, I3, G2, G3;
 int MaxManaLimit = MaxMana * 2;
 if (HitType <= 0) HitType = 1;
 if (HitType >= 3) HitType = 2;

 if (HitType == 1) // Give some life when hurting a monster [1+(HP/500)]
 {
  if (GetUserVariable(0,"user_MaxHP") > 0) Amount = GetUserVariable(0,"user_MaxHP");
  else Amount = GetActorProperty(0,APROP_SpawnHealth);
  Amount = Amount / 500;
  Amount = Amount + 1;
 }
 else
 if (HitType == 2) // Give some life when killing a monster [3+(HP/100)]
 {
  if (GetUserVariable(0,"user_MaxHP") > 0) Amount = GetUserVariable(0,"user_MaxHP");
  else Amount = GetActorProperty(0,APROP_SpawnHealth);
  Amount = Amount / 100;
  Amount = Amount + 3;
 }
 If (Amount <= 0) Amount = 1;

 MiscellaneousVars[49] = 1; // Screen Flash
 ACS_NamedExecuteAlways("EmulateGiveHealthBonus",0,Amount,0,0); // Restore Health
 if (CharacterClass != 2) ACS_NamedExecuteAlways("EmulateGiveArmorBonus",0,Amount,0,0);  // Restore Armor [Flora Cannot Gain Armor from it though]

 // Restore Mana
 C1 = (PlayerLevel * 4) + 100;
 C2 = Amount;
 C2 = C2 * C1 / 100;
 if (CharacterClass == 2) C2 = C2 * 3 / 2; // Flora will gain Extra Mana from a Gauntlet punch to make up for not being able to get armor.
 CurrentMana += C2;
 if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
 SetHudSize(640,480,0);
 SetFont("SmallFont");
 //if (MiscellaneousVars[2000] == 0) HudMessage(s:"+",d:C2,s:" Mana";0,3419,cr_blue,0.036,0.081,0.75);
}

// Makes Monsters in MAP04 [DVI-DS] or MAP12 [DVII-DS] have a TID of 666 [this makes them suspectible to the Sauravatar's activation script]
script "DVI-M04MonsterTags" (void)
{
 if (ModType == 1) // DVI
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1104)
  {
   Thing_ChangeTID (0, 666);
  }
 }
 else
 if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1214)
  {
   Thing_ChangeTID (0, 666);
  }
 }
}

// "Gravity" style Spell (used for fixed % damage based on CURRENT/REMAINING HP or CURRENT/REMAINING Invulnerability Timer)
script "DiabloistGravity" (int C5, int gravitytype)
{
 int C1, C2, C3;
 int basedmgratio;
 int AffectedStat, MultFactor, THEEffect;

 if (GetActorProperty(1001,APROP_Health) < 1) terminate;

 //PrintBold(d:gravitytype);
 if (gravitytype == 0) // HP only
 {
  if (PowerupTimer[4] > 0) // If the character is Invulnerable, diminish their Invulnerability Timer
  {
   if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
   if (GameSkill() == SKILL_EASY) C5 = 125;  
   if (GameSkill() == SKILL_NORMAL) C5 = 250;  
   if (GameSkill() == SKILL_HARD) C5 = 375;  
   if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
   if (random(1,16) == 16) C5 = C5 * 2;
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0)
   {
    C3 = 300 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 300;
   }
   if (CharacterClass == 1)
   {
    C3 = 200 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 200;
   }
   if (CharacterClass == 2)
   {
    C3 = 150 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 150;
   }
   C2 = 1000 - C5;
 
   if (C5 < 0) C5 = 0;
   if (C5 > 0)
   {
    C1 = PowerupTimer[4];
    C1 = C1 * C2 / 1000;
 
    if (C1 < 1) C1 = 1;
    PowerupTimer[4] = C1;
    SetActorState(1001,"InvulnFlashGravity");
   }
  }
  else // Otherwise affect their HP as per usual
  {
   if (GameSkill() == SKILL_VERY_EASY) C5 = 125;  
   if (GameSkill() == SKILL_EASY) C5 = 250;  
   if (GameSkill() == SKILL_NORMAL) C5 = 500;  
   if (GameSkill() == SKILL_HARD) C5 = 750;  
   if (GameSkill() == SKILL_VERY_HARD) C5 = 875;  
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0)
   {
    C3 = 300 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 300;
   }
   if (CharacterClass == 1)
   {
    C3 = 200 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 200;
   }
   if (CharacterClass == 2)
   {
    C3 = 150 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 150;
   }
   C2 = 1000 - C5;
 
   if (C5 < 0) C5 = 0;
   if (C5 > 0)
   {
    C1 = GetActorProperty(1001,APROP_Health);
    C1 = C1 * C2 / 1000;
 
    if (C1 < 1) C1 = 1;
    SetActorProperty(1001,APROP_Health,C1);
    SetActorState(1001,"HPFlashGravity");
   }
  }
 }
 else
 if (gravitytype == 1) // Mana only
 {
  if (PowerupTimer[4] > 0) // If the character is Invulnerable, diminish their Invulnerability Timer
  {
   if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
   if (GameSkill() == SKILL_EASY) C5 = 125;  
   if (GameSkill() == SKILL_NORMAL) C5 = 250;  
   if (GameSkill() == SKILL_HARD) C5 = 375;  
   if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
   if (random(1,16) == 16) C5 = C5 * 2;
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0)
   {
    C3 = 300 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 300;
   }
   if (CharacterClass == 1)
   {
    C3 = 200 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 200;
   }
   if (CharacterClass == 2)
   {
    C3 = 150 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 150;
   }
   C2 = 1000 - C5;
 
   // PrintBold(d:C2);
 
   if (C5 < 0) C5 = 0;
   if (C5 > 0)
   {
    C1 = PowerupTimer[4];
    C1 = C1 * C2 / 1000;
 
    if (C1 < 1) C1 = 1;
 
    PowerupTimer[4] = C1;
    SetActorState(1001,"InvulnFlashGravity");
   }
  }
  else // Otherwise affect their MP as per usual
  {
   if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
   if (GameSkill() == SKILL_EASY) C5 = 125;  
   if (GameSkill() == SKILL_NORMAL) C5 = 250;  
   if (GameSkill() == SKILL_HARD) C5 = 375;  
   if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
   if (random(1,16) == 16) C5 = C5 * 2;
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0)
   {
    C3 = 300 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 300;
   }
   if (CharacterClass == 1)
   {
    C3 = 200 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 200;
   }
   if (CharacterClass == 2)
   {
    C3 = 150 - MiscellaneousVars[36];
    if (C3 < 0) C3 = 0;
    C5 = C5 * C3 / 150;
   }
   C2 = 1000 - C5;
 
   // PrintBold(d:C2);
 
   if (C5 < 0) C5 = 0;
   if (C5 > 0)
   {
    C1 = CurrentMana;
    C1 = C1 * C2 / 1000;
 
    if (C1 < 0) C1 = 0;
 
    CurrentMana = C1;
    SetActorState(1001,"ManaFlashGravity");
   }
  }
 }
 else
 if (gravitytype == 2) // HP & Mana
 {
  if (PowerupTimer[4] > 0) // If the character is Invulnerable, diminish their Invulnerability Timer
  {
   if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 125; // 12.5% Base Damage
   if (GameSkill() == SKILL_EASY) basedmgratio = 250; // 25.0% Base Damage
   if (GameSkill() == SKILL_NORMAL) basedmgratio = 500; // 50.0% Base Damage
   if (GameSkill() == SKILL_HARD) basedmgratio = 750; // 75.0% Base Damage
   if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 875; // 87.5% Base Damage
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
   if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
   if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
   if (THEEffect < 0) THEEffect = 0;
   if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
   if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
   if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
   MultFactor = 1000 - basedmgratio;
 
   if (basedmgratio < 0) basedmgratio = 0;
   if (basedmgratio > 0)
   {
    AffectedStat = PowerupTimer[4] * MultFactor / 1000;
    if (AffectedStat < 1) AffectedStat = 1;
 
    PowerupTimer[4] = AffectedStat;
    SetActorState(1001,"InvulnFlashGravity");
   }
  }
  else // Otherwise affect their HP & MP as per usual
  {
   if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 125; // 12.5% Base Damage
   if (GameSkill() == SKILL_EASY) basedmgratio = 250; // 25.0% Base Damage
   if (GameSkill() == SKILL_NORMAL) basedmgratio = 500; // 50.0% Base Damage
   if (GameSkill() == SKILL_HARD) basedmgratio = 750; // 75.0% Base Damage
   if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 875; // 87.5% Base Damage
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
   if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
   if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
   if (THEEffect < 0) THEEffect = 0;
   if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
   if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
   if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
   MultFactor = 1000 - basedmgratio;
 
   if (basedmgratio < 0) basedmgratio = 0;
   if (basedmgratio > 0)
   {
    AffectedStat = GetActorProperty(1001,APROP_Health) * MultFactor / 1000;
    if (AffectedStat < 1) AffectedStat = 1;
 
    SetActorProperty(1001,APROP_Health,AffectedStat);
   }
 
   if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 63; // 6.3%
   if (GameSkill() == SKILL_EASY) basedmgratio = 125; // 12.5%
   if (GameSkill() == SKILL_NORMAL) basedmgratio = 250; // 25.0%
   if (GameSkill() == SKILL_HARD) basedmgratio = 375; // 37.5%
   if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 437; // 43.7%
   if (random(1,16) == 16) basedmgratio = basedmgratio * 2;
   // SeedTHE Levels
   // Deggaris = 300 Needed to max out
   // Illucia = 200 Needed to max out
   // Flora = 150 Needed to max out
   if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
   if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
   if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
   if (THEEffect < 0) THEEffect = 0;
   if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
   if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
   if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
   MultFactor = 1000 - basedmgratio;
 
   if (basedmgratio < 0) basedmgratio = 0;
   if (basedmgratio > 0)
   {
    AffectedStat = CurrentMana * MultFactor / 1000;
 
    if (AffectedStat < 0) AffectedStat = 0;
 
    CurrentMana = AffectedStat;
 
    SetActorState(1001,"HPManaFlashGravity");
   }
  }
 }

}

// Redone Buff Checker (allows additive buff timers from spells and powerup items) [must use the "DoomSpellACS" actor on a map to make this work!]
script "CheckBuffTimers" ENTER
{
 int G1, G2, G3, C1, C2, C3, I1, I2, I3, D1;
 int DoveRegenTimer;
 int DivineRegenTimer;
 int xpos, xposint, ypos, yposint;
 int MaxHealthLimit = MaxHealthTrue * 2;

 // Light/Infared
 SetHudSize(704,528,0); // 640,480 //  SetHudSize(960,720,0);
 xpos = 0.1; // 0% [left side]
 ypos = 209.0; // 210.0; // 90% [towards bottom]
 yposint = 11.0;
 if (PowerupTimer[0] > 0)
 {
  GiveActorInventory(1001,"NightVisionSpell",1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Light: ",d:(PowerupTimer[0]/35),s:" Secs";0,3433,cr_white,xpos,ypos,0.03);
  PowerupTimer[0] -= 1;
 }
 else
 {
  TakeActorInventory(1001,"NightVisionSpell",9999);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Invisibility
 if (CheckActorInventory(1001, "InvisAttack1") > 0) TakeActorInventory(1001, "InvisAttack1", 1);
 if (CheckActorInventory(1001, "InvisDefense1") > 0) TakeActorInventory(1001, "InvisDefense1", 1);
 if (CheckActorInventory(1001, "InvisAttack2") > 0) TakeActorInventory(1001, "InvisAttack2", 1);
 if (CheckActorInventory(1001, "InvisDefense2") > 0) TakeActorInventory(1001, "InvisDefense2", 1);
 if (CheckActorInventory(1001, "InvisAttack3") > 0) TakeActorInventory(1001, "InvisAttack3", 1);
 if (CheckActorInventory(1001, "InvisDefense3") > 0) TakeActorInventory(1001, "InvisDefense3", 1);
 if (CheckActorInventory(1001, "InvisAttack4") > 0) TakeActorInventory(1001, "InvisAttack4", 1);
 if (CheckActorInventory(1001, "InvisDefense4") > 0) TakeActorInventory(1001, "InvisDefense4", 1);
 if (PowerupTimer[1] > 0)
 {
  GiveActorInventory(1001,"InvisiblitySpell",1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Invisibility: ",d:(PowerupTimer[1]/35),s:" Secs";0,3434,cr_white,xpos,ypos,0.03);
  if (MiscellaneousVars[194] == 0)
  {
   SetActorProperty(1001,APROP_Alpha,0.1);
   SetActorProperty(1001,APROP_RenderStyle,STYLE_Translucent);
  }
  if (random(1,100) > 25) // 75% chance of the level 1 version
  {
   if (CheckActorInventory(1001, "InvisAttack1") < 1) GiveActorInventory(1001, "InvisAttack1", 1); // +25% Damage Dealth
   if (CheckActorInventory(1001, "InvisDefense1") < 1) GiveActorInventory(1001, "InvisDefense1", 1); // -20% Damage Taken
  }
  else
  {
   if (random(1,100) > 25) // 18.75% chance of the level 2 version
   {
    if (CheckActorInventory(1001, "InvisAttack2") < 1) GiveActorInventory(1001, "InvisAttack2", 1); // +50% Damage Dealt
    if (CheckActorInventory(1001, "InvisDefense2") < 1) GiveActorInventory(1001, "InvisDefense2", 1); // -33.3% Damage Taken
   }
   else
   {
    if (random(1,100) > 25) // 4.6875% chance of the level 3 version
    {
     if (CheckActorInventory(1001, "InvisAttack3") < 1) GiveActorInventory(1001, "InvisAttack3", 1); // +75% Damage Dealt
     if (CheckActorInventory(1001, "InvisDefense3") < 1) GiveActorInventory(1001, "InvisDefense3", 1); // -42.86% Damage Taken
    }
    else // 1.5625% chance of the level 4 version
    {
     if (CheckActorInventory(1001, "InvisAttack4") < 1) GiveActorInventory(1001, "InvisAttack4", 1); // +100% Damage Dealt
     if (CheckActorInventory(1001, "InvisDefense4") < 1) GiveActorInventory(1001, "InvisDefense4", 1); // -50% Damage Taken
    }
   }
  }
  PowerupTimer[1] -= 1;
 }
 else
 {
  TakeActorInventory(1001,"InvisiblitySpell",9999);
  if (MiscellaneousVars[194] == 0)
  {
   SetActorProperty(1001,APROP_Alpha,1.0);
   SetActorProperty(1001,APROP_RenderStyle,STYLE_Normal);
  }
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Flight
 if (PowerupTimer[2] > 0)
 {
  GiveActorInventory(1001,"FlightSpell",1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Flight: ",d:(PowerupTimer[2]/35),s:" Secs";0,3435,cr_white,xpos,ypos,0.03);
  PowerupTimer[2] -= 1;
 }
 else
 {
  TakeActorInventory(1001,"FlightSpell",9999);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Stealth
 if (PowerupTimer[3] > 0)
 {
  SetPlayerProperty(1,1,PROP_NOTARGET);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Stealth: ",d:(PowerupTimer[3]/35),s:" Secs";0,3436,cr_white,xpos,ypos,0.03);
  PowerupTimer[3] -= 1;
 }
 else
 {
  SetPlayerProperty(1,0,PROP_NOTARGET);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Invulnerability
 if (PowerupTimer[4] > 0)
 {
  SetPlayerProperty(1,1,PROP_INVULNERABILITY);
  GiveActorInventory(1001,"IsInvulnerable",1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Invulnerability: ",d:(PowerupTimer[4]/35),s:" Secs";0,3437,cr_white,xpos,ypos,0.03);
  PowerupTimer[4] -= 1;
 }
 else
 {
  TakeActorInventory(1001,"IsInvulnerable",9999);
  SetPlayerProperty(1,0,PROP_INVULNERABILITY);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Time Stop
 if (PowerupTimer[5] > 0)
 {
  GiveActorInventory(1001, "PowerTimeFreezer", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Time Freeze: ",d:(PowerupTimer[5]/35),s:" Secs";0,3438,cr_white,xpos,ypos,0.03);
  PowerupTimer[5] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "PowerTimeFreezer", 9999);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Fear Aura Effects
 if (PowerupTimer[6] > 0)
 {
  GiveActorInventory(1001, "PowerFrightener", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Fear Aura: ",d:(PowerupTimer[6]/35),s:" Secs";0,3439,cr_white,xpos,ypos,0.03);
  PowerupTimer[6] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "PowerFrightener", 9999);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Divine Avatar Effects
 if (PowerupTimer[7] > 0)
 {

  GiveActorInventory(1001, "PowerDoubleDamage", 1);
  GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
  GiveActorInventory(1001, "PowerHalfDamage", 1);
  GiveActorInventory(1001, "PowerSpeed", 1);
  GiveActorInventory(1001, "PowerHighJump", 1);

  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Divine Avatar: ",d:(PowerupTimer[7]/35),s:" Secs";0,3440,cr_white,xpos,ypos,0.03);
    
  PowerupTimer[7] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "PowerDoubleDamage", 9999);
  TakeActorInventory(1001, "PowerDoubleFiringSpeed", 9999);
  TakeActorInventory(1001, "PowerHalfDamage", 9999);
  TakeActorInventory(1001, "PowerSpeed", 9999);
  TakeActorInventory(1001, "PowerHighJump", 9999);
 }

 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 // Speader Aura Lv. 1 Effects
 if (PowerupTimer[9] > 0)
 {
  PowerupTimer[8] = 0;
  TakeActorInventory(1001, "SpreaderAura1", 9999);
 }
 else
 {
  if (PowerupTimer[8] > 0)
  {
   GiveActorInventory(1001, "SpreaderAura1", 1);
   if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Spread-Aura Lv. 1: ",d:(PowerupTimer[8]/35),s:" Secs";0,3441,cr_white,xpos,ypos,0.03);
   PowerupTimer[8] -= 1;
  }
  else
  {
   TakeActorInventory(1001, "SpreaderAura1", 9999);
  }
 }

 // Speader Aura Lv. 2 Effects
 if (PowerupTimer[9] > 0)
 {
  GiveActorInventory(1001, "SpreaderAura2", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Spread-Aura Lv. 2: ",d:(PowerupTimer[9]/35),s:" Secs";0,3441,cr_white,xpos,ypos,0.03);
  PowerupTimer[9] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "SpreaderAura2", 9999);
 }

 // Oomph Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[10] > 0)
 {
  GiveActorInventory(1001, "OomphDQSpell", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Oomph: ",d:(PowerupTimer[10]/35),s:" Secs";0,3442,cr_white,xpos,ypos,0.03);
  PowerupTimer[10] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "OomphDQSpell", 9999);
 }

 // Buff Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[11] > 0)
 {
  GiveActorInventory(1001, "BuffDQSpell", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Buff: ",d:(PowerupTimer[11]/35),s:" Secs";0,3443,cr_white,xpos,ypos,0.03);
  PowerupTimer[11] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "BuffDQSpell", 9999);
 }

 // Buff Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[12] > 0)
 {
  GiveActorInventory(1001, "AcceleratleDQSpell", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Acceleratle: ",d:(PowerupTimer[12]/35),s:" Secs";0,3443,cr_white,xpos,ypos,0.03);
  PowerupTimer[12] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "AcceleratleDQSpell", 9999);
 }

 // RadSphere Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[22] > 0)
 {
  GiveActorInventory(1001, "PowerIronFeet", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"BioShield: ",d:(PowerupTimer[22]/35),s:" Secs";0,3444,cr_white,xpos,ypos,0.03);
  PowerupTimer[22] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "PowerIronFeet", 9999);
 }

 // Berserk Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[23] > 0)
 {
  GiveActorInventory(1001, "PowerStrength", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Berserk: ",d:(PowerupTimer[23]/35),s:" Secs";0,3445,cr_white,xpos,ypos,0.03);
  PowerupTimer[23] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "PowerStrength", 9999);
 }


 // Fatigue Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[18] > 0)
 {
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Fatigue: ",d:(PowerupTimer[18]/35),s:" Secs";0,3446,cr_white,xpos,ypos,0.03);
  PowerupTimer[18] -= 1;
 }
 else
 {
  //TakeActorInventory(1001, "SleepDMGPenalty", 9999);
 }

 // Blind Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[19] > 0)
 {
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Blind: ",d:(PowerupTimer[19]/35),s:" Secs";0,3447,cr_white,xpos,ypos,0.03);
  PowerupTimer[19] -= 1;
 }
 else
 {
  //TakeActorInventory(1001, "SleepDMGPenalty", 9999);
 }

 // Sleep Effects
 ypos = ypos + yposint; // 210.0; // 90% [towards bottom]
 if (PowerupTimer[20] > 0)
 {
  GiveActorInventory(1001, "SleepDMGPenalty", 1);
  if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[2000] == 0) HudMessageBold(s:"Sleep: ",d:(PowerupTimer[20]/35),s:" Secs";0,3448,cr_white,xpos,ypos,0.03);
  PowerupTimer[20] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "SleepDMGPenalty", 9999);
 }


 // GoE?? Effects
 if (PowerupTimer[129] > 0)
 {
  GiveActorInventory(1001, "GoEDamageBonus", 1);
  GiveActorInventory(1001, "GoEDefenseBonus", 1);
  // (GoE is intended as a "permenant buff" once activated. To disable this and make it time elasped, uncomment the line below)
  // PowerupTimer[129] -= 1;
 }
 else
 {
  TakeActorInventory(1001, "GoEDamageBonus", 9999);
  TakeActorInventory(1001, "GoEDefenseBonus", 9999);
 }
 SetHudSize(0,0,0);

 Delay(1);
 Restart;
}


// Enforces Giving or Removing Buffs when certain powerup timers are on/off
script "GiveBuffsPowerup" (int powertype, int powertimeadd)
{
 // powertype = Powerup Type
 // powertimeadd = Powerup Timer Additive
 int G1, G2, G3, C1, C2, C3, I1, I2, I3;

 powertimeadd *= 35;
 if (powertype == 0) // Light/Infared
 {
  PowerupTimer[0] += powertimeadd;
  if (PowerupTimer[0] > 0) GiveActorInventory(1001,"NightVisionSpell",1);
 }
 if (powertype == 1) // Invisibility
 {
  PowerupTimer[1] += powertimeadd;
  if (PowerupTimer[1] > 0) GiveActorInventory(1001,"InvisiblitySpell",1);
 }
 if (powertype == 2) // Flight
 {
  PowerupTimer[2] += powertimeadd;
  if (PowerupTimer[2] > 0) GiveActorInventory(1001,"FlightSpell",1);
 }
 if (powertype == 3) // Stealth
 {
  PowerupTimer[3] += powertimeadd;
  // if (PowerupTimer[3] > 0) SetPlayerProperty(1,1,PROP_NOTARGET);
 }
 if (powertype == 4) // Invulnerability
 {
  PowerupTimer[4] += powertimeadd;
  if (PowerupTimer[4] > 0) SetPlayerProperty(1,1,PROP_INVULNERABILITY);
 }
 if (powertype == 5) // Time Freeze
 {
  PowerupTimer[5] += powertimeadd;
  if (PowerupTimer[5] > 0) GiveActorInventory(1001, "PowerTimeFreezer", 1);
 }
 if (powertype == 6) // Fear Aura
 {
  PowerupTimer[6] += powertimeadd;
  if (PowerupTimer[6] > 0) GiveActorInventory(1001, "PowerFrightener", 1);
 }
 if (powertype == 7) // Divine Avatar
 {
  PowerupTimer[7] += powertimeadd;
  if (PowerupTimer[7] > 0)
  {
   GiveActorInventory(1001, "PowerDoubleDamage", 1);
   GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
   GiveActorInventory(1001, "PowerHalfDamage", 1);
   GiveActorInventory(1001, "PowerSpeed", 1);
   GiveActorInventory(1001, "PowerHighJump", 1);
  }
 }
 if (powertype == 8) // Spreader Aura Lv. 1
 {
  if (PowerupTimer[9] == 0) // If lacking the Lv. 2 Aura, add to the Lv. 1
  {
   PowerupTimer[8] += powertimeadd;
   if (PowerupTimer[8] > 0) GiveActorInventory(1001, "SpreaderAura1", 1);
  }
  else // If possessing Lv. 2 aura, give the player the timer divided by 5 or 6 instead and add to the second level aura.
  {
   if (PowerupTimer[8] > 0) TakeActorInventory(1001, "SpreaderAura1", 1);
   PowerupTimer[8] = 0;
   powertimeadd = powertimeadd / random(5,6);
   PowerupTimer[9] += powertimeadd;
   if (PowerupTimer[9] > 0) GiveActorInventory(1001, "SpreaderAura2", 1);
  }
 }
 if (powertype == 9) // Spreader Aura Lv. 2
 {
  PowerupTimer[9] += powertimeadd;
  if (PowerupTimer[9] > 0) GiveActorInventory(1001, "SpreaderAura2", 1);
  if (PowerupTimer[8] > 0) { TakeActorInventory(1001, "SpreaderAura1", 1); PowerupTimer[8] = 0; }
 }
 if (powertype == 10) // Oomph [double damage from player]
 {
  PowerupTimer[10] += powertimeadd;
  if (PowerupTimer[10] > 0) GiveActorInventory(1001, "OomphDQSpell", 1);
 }
 if (powertype == 11) // Buff [-50% damage to player]
 {
  PowerupTimer[11] += powertimeadd;
  if (PowerupTimer[11] > 0) GiveActorInventory(1001, "BuffDQSpell", 1);
 }
 if (powertype == 12) // Acceleratle [+33% speed for player]
 {
  PowerupTimer[12] += powertimeadd;
  if (PowerupTimer[12] > 0) GiveActorInventory(1001, "AcceleratleDQSpell", 1);
 }

 if (powertype == 22) // RadSuit [IronFeet, protection from most damage floors]
 {
  PowerupTimer[22] += powertimeadd;
  if (PowerupTimer[22] > 0) GiveActorInventory(1001, "PowerIronFeet", 1);
 }
 if (powertype == 23) // Berserk [10x damage on exertion based melee attacks]
 {
  PowerupTimer[23] += powertimeadd;
  if (PowerupTimer[23] > 0) GiveActorInventory(1001, "PowerStrength", 1);
 }
 if (powertype == 129) // GoE??
 {
  PowerupTimer[129] += powertimeadd;
  if (PowerupTimer[129] > 0)
  {
   GiveActorInventory(1001, "GoEDamageBonus", 1);
   GiveActorInventory(1001, "GoEDefenseBonus", 1);
  }
 }
}

// Screen Flash for Diabloist's Gravity Attack
script "DiabloistGravityFlash" (int C5)
{ 
 if (C5 == 0) FadeRange(192,0,0,1.25,192,0,0,0,1.125);
 if (C5 == 1) FadeRange(0,0,192,1.25,0,0,192,0,1.125);
 if (C5 == 2) FadeRange(192,192,192,1.25,192,192,192,0,1.125);
 if (C5 == 3) FadeRange(192,0,192,1.25,192,0,192,0,1.125);
}


// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
script "ClassicDoom2ArmorCheck" (void)
{
 if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
 {
  if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,3);
  if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,4);
  if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,5); // Sets Args[4] to 5 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
 else
 {
  if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,0);
  if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,1);
  if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
}

script "CheckChainsaw" (void)
{

 if (CheckActorInventory(1001,"DoubleBladedChainsaw") > 0) SetResultValue(2);
 else if (CheckActorInventory(1001,"Chainsaw2") > 0) SetResultValue(1);
 else SetResultValue(0);
}

// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items
script "ArmorBonusCheckCharacter" (void)
{
 if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,0);
 if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,1);
 if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
}

// Keeps Diabloist Locked on players as targets.
script "DiabloistGravityLock" (void)
{
 Thing_Hate(0,1001,0);
}

// Accmulate EXP for Sceptre
script "AddSceptreEXP" (int Arg1, int Arg2, int DivAmount)
{
 int C1, C2;
 int EXPBonus1;

 if (ModType == 0 && GetCVar("dvds_noscexpgains") != 0) terminate;

 if (DivAmount <= 1) DivAmount = 1;

 if (CharacterClass != 2) terminate;
 if (CharacterClass == 2)
 {
  if (Arg2 > 0)
  {
   C2 = 16 - SceptreActualLevel;
   if (C2 < 1) C2 += 16;
   if (C2 > 16) C2 -= 16;

   EXPBonus1 = 1000;
   // Pearly Corset [+30% EXP Bonus]
   if (CheckActorInventory(1001,"PearlyCorset")) 
   {
    if (random(1,100) <= 5) EXPBonus1 += 450; // 5% Chance of +45% EXP Bonus
    else EXPBonus1 += 300; // Else +30% EXP Bonus
   }
   // Divine Avatar {+25% EXP Bonus]
   if (PowerupTimer[7] > 0)
   {
    if (random(1,100) <= 20) EXPBonus1 += 500; // 20% Chance of +50% EXP Bonus
    else EXPBonus1 += 250; // 20% Else +25% EXP Bonus
   }
   C2 = C2 * EXPBonus1 / 1000;
   C2 = C2 * (48 + MiscellaneousVars[40]) / 48;
   C2 = C2 * MiscellaneousVars[88] / 100;

   if (ModType == 0) C2 = C2 * 4 / 3; // Classic Doom 1/2 / Heretic / Hexen / Strife
   MiscellaneousVars[203] += C2;


   // PrintBold(d:C2);
   while (MiscellaneousVars[203] > 15) // if (MiscellaneousVars[203] > 15)
   {
    MiscellaneousVars[203] -= 16;
    SceptreLevelEXP += 1;
   }
  }
  else
  {
   if (GetUserVariable(0,"user_MaxHP") > 0) Arg1 = GetUserVariable(0,"user_MaxHP"); else Arg1 = GetActorProperty(0,APROP_SpawnHealth);
   if (ModType == 0) Arg1 = Arg1 * 4 / 3; // Classic Doom 1/2 / Heretic / Hexen / Strife
   Arg1 *= 16;
   Arg1 = Arg1 / 300;

   if (DivAmount >= 1) Arg1 = Arg1 / DivAmount;
   Arg1 = Arg1 + 16;

   C1 = random(1,256);
   if (C1 == 1) Arg1 = Arg1 * 8;
   if (C1 == 2) Arg1 = Arg1 * 4;
   if (C1 == 3) Arg1 = Arg1 * 4;
   if (C1 == 4) Arg1 = Arg1 * 2;
   if (C1 == 5) Arg1 = Arg1 * 2;
   if (C1 == 6) Arg1 = Arg1 * 2;
   if (C1 == 7) Arg1 = Arg1 * 2;

   // Higher Levels = slightly less chances to get all EXP
   if (SceptreActualLevel > 15 && C1 == 241) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 14 && C1 == 242) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 13 && C1 == 243) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 12 && C1 == 244) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 11 && C1 == 245) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 10 && C1 == 246) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 9 && C1 == 247) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 8 && C1 == 248) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 7 && C1 == 249) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 6 && C1 == 250) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 5 && C1 == 251) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 4 && C1 == 252) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 3 && C1 == 253) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 2 && C1 == 254) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 1 && C1 == 255) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 0 && C1 == 256) Arg1 = Arg1 / 2;

   EXPBonus1 = 1000;
   // Pearly Corset [+30%/+45% EXP Bonus]
   if (CheckActorInventory(1001,"PearlyCorset")) 
   {
    if (random(1,100) <= 5) EXPBonus1 += 450; // 5% Chance of +45% EXP Bonus
    else EXPBonus1 += 300; // Else +30% EXP Bonus
   }
   if (PowerupTimer[7] > 0) // Divine Avatar
   {
    if (random(1,100) <= 20) EXPBonus1 += 500; // 20% Chance of +50% EXP Bonus
    else EXPBonus1 += 250; // Else +25% EXP Bonus
   }

   Arg1 = Arg1 * EXPBonus1 / 1000;
   Arg1 = Arg1 * (48 + MiscellaneousVars[40]) / 48;
   Arg1 = Arg1 * MiscellaneousVars[88] / 100;

   while (Arg1 > 15)
   {
    Arg1 -= 16;
    SceptreLevelEXP += 1;
   }
   MiscellaneousVars[203] += Arg1;

   while (MiscellaneousVars[203] > 15) // if (MiscellaneousVars[203] > 15)
   {
    MiscellaneousVars[203] -= 16;
    SceptreLevelEXP += 1;
   }
   

   // PrintBold(d:Arg1);
  }  
 }
}

// Calculates the occurance rate of Sauron's Gauntlets and Sauron's Helmet Dropping when a spawner item for them is spawned from a dying monster and gets the character's ID number to determine the right version of the Gauntlets to drop.
script "SauronItemSpawnerCheck" (void)
{
 if (random(1,4) == 1)
 {
  if (CharacterClass == 0) SetResultValue(1);
  if (CharacterClass == 1) SetResultValue(2);
  if (CharacterClass == 2) SetResultValue(3);
 }
 else
 {
  SetResultValue(0);
 }
}

// script: Red Tunnel Vision/Heartbeat Effect when badly injured
script "TunnelVisionControl" ENTER
{
 int LowHealth, CriticalHealth;
 CriticalHealth = MaxHealthTrue / 10;

  if (GetActorProperty(0, APROP_HEALTH) > 0)
  {
   if (GetActorProperty(0, APROP_HEALTH) <= CriticalHealth && GetActorProperty(0, APROP_HEALTH) > 0)
   {
    SetHudSize(640, 480, 0);
    Setfont("M_INJ");
    Hudmessage(s:"A"; HUDMSG_FADEINOUT, 3, CR_WHITE, 320.0, 240.0, 0.0, 0.5, 0.5);
    localambientsound("heartb2", 116);
    delay(15);
    localambientsound("heartb2", 116);
   }
   delay(25);
   restart;
  }
  else
  {
   delay(1);
   restart;
  }
}

// script
script "DeathTunnelVision" ENTER
{
  if (GetActorProperty(0, APROP_HEALTH) <= 0)
  {
   SetHudSize(640, 480, 0);
   Setfont("M_INJ2");
   Hudmessage(s:"A"; HUDMSG_FADEINOUT, 2, CR_WHITE, 320.0, 240.0, 0.0, 1.0, 1.0);
   Hudmessage(s:"A"; 0, 3, CR_WHITE, 320.0, 240.0, 0.0, 1.0, 1.0);
   delay(65);
   restart;
  }
  else
  {
   delay(1);
   restart;
  }
}

// script for Hellcore Energy and Heating usage [and also controls dealing Flora direct damage when using a Hellcore weapon when heating is 100% or higher]
script "IncreaseHellcoreHeat" (int percent, int trydamageuser)
{
 int C1, C2, C3, C4, C5, OldHealth, NewHealth, HealthDiff, DamageFactor, DamageDealt, DamageRatio, ObitTimes;
 int MaxHealthLimit = MaxHealthTrue * 2;
 //PrintBold(d:percent,s:" - ",d:trydamageuser);

 // Any damage from overheating is inflicted BEFORE increasing the heating counter (so going from below 100% to above 100% with a single attack doesn't harm you, only being above 100% at the moment of pulling the trigger will harm you)
 if (HellcoreOverheatLevel > 10000) // Translates to 100% or higher when you first fire your attack, which means you'll deal yourself damage upon use of this attack if above 100% at this point and the "trydamageuser" argument is set to something other than 0.
 {
  if (trydamageuser != 0)
  {
   DamageFactor = HellcoreOverheatLevel;
   DamageFactor -= 10000;
   // Dove's Ribbon cuts Hellcore Overheating Damage in half
   if (CheckActorInventory(1001,"DoveRibbon") > 0) DamageFactor = DamageFactor * 1 / 5; else DamageFactor = DamageFactor * 2 / 5;

   DamageDealt = DamageFactor * MaxHealthTrue / 10000;
   
   if (DamageDealt < 1) DamageDealt = 1;
   if (DamageDealt > MaxHealthLimit) DamageDealt = MaxHealthLimit;
   
   // PrintBold(d:DamageDealt);
   // Deal the Actual Damage
   OldHealth = GetActorProperty(1001,APROP_Health);
   Thing_Damage2(1001,DamageDealt,"HellcoreDrain");
   NewHealth = GetActorProperty(1001,APROP_Health);

   HealthDiff = OldHealth - NewHealth;

   // Get's the damage % for a fade screen
   DamageRatio = HealthDiff; // DamageDealt;
   DamageRatio = DamageRatio * 10000;
   DamageRatio = DamageRatio / MaxHealthTrue;

   if (GetActorProperty(1001,APROP_Health) <= 0 && MiscellaneousVars[19] == 0)
   {
    if (CharacterClass == 0) log(s:"\cgDeggaris incinerated his own soul on the power of Hellcore Magic.");
    if (CharacterClass == 1) log(s:"\cgIllucia incinerated her own soul on the power of Hellcore Magic.");
    if (CharacterClass == 2) log(s:"\cgFlora incinerated her own soul on the power of Hellcore Magic.");    
    MiscellaneousVars[19]++;
   }

   if (GetActorProperty(1001,APROP_Health) > 0)
   {
    if (NewHealth < OldHealth)
    {
     if (DamageRatio > 0 && DamageRatio < 1001) FadeRange(192,0,64,0.15,192,0,64,0,0.625);
     if (DamageRatio > 1000 && DamageRatio < 2001) FadeRange(192,0,64,0.3,192,0,64,0,0.625);
     if (DamageRatio > 2000 && DamageRatio < 3001) FadeRange(192,0,64,0.45,192,0,64,0,0.625);
     if (DamageRatio > 3000 && DamageRatio < 4001) FadeRange(192,0,64,0.6,192,0,64,0,0.625);
     if (DamageRatio > 4000 && DamageRatio < 5001) FadeRange(192,0,64,0.75,192,0,64,0,0.625);
     if (DamageRatio > 5000 && DamageRatio < 6001) FadeRange(192,0,64,0.9,192,0,64,0,0.625);
     if (DamageRatio > 6000 && DamageRatio < 7001) FadeRange(192,0,64,1.05,192,0,64,0,0.625);
     if (DamageRatio > 7000 && DamageRatio < 8001) FadeRange(192,0,64,1.2,192,0,64,0,0.625);
     if (DamageRatio > 8000 && DamageRatio < 9001) FadeRange(192,0,64,1.35,192,0,64,0,0.625);
     if (DamageRatio > 9000 && DamageRatio < 10001) FadeRange(192,0,64,1.5,192,0,64,0,0.625);
     if (DamageRatio > 10000) FadeRange(192,0,64,1.65,192,0,64,0,0.625);
    }
   }
  }
 }

 int ArmorHellCoreRate = 200;
 // Armor Based items [Sauron-class or Flora's specfic] can alter the rate of how fast Hellcore heats up.
 if (CheckActorInventory(1001,"RuinousShield") > 0) percent = percent * 3; 					// +200%
 if (CheckActorInventory(1001,"SauronHelmet") > 0) percent = percent * 134 / 100; 			// +34%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) percent = percent * 134 / 100; 	// +34%
 if (CheckActorInventory(1001,"TheOneRing") > 0) percent = percent * 75 / 100; 				// -25%

 if (CheckActorInventory(1001,"SafeTeaShoes") > 0) ArmorHellCoreRate -= 1; 			// -0.5% (1)
 if (CheckActorInventory(1001,"PearlyCorset") > 0) ArmorHellCoreRate -= 5; 			// -2.5% (5)
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) ArmorHellCoreRate -= 15; 	// -7.5% (15)
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) ArmorHellCoreRate -= 27; 	// -13.5% (27)
 if (CheckActorInventory(1001,"CloakofEvasion") > 0) ArmorHellCoreRate -= 3; 		// -1.5% (3)
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) ArmorHellCoreRate -= 9; 	// -4.5% (9)
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) ArmorHellCoreRate -= 7; 		// -3.5% (7)
 if (CheckActorInventory(1001,"KissaBra") > 0) ArmorHellCoreRate -= 13; 			// -6.5% (13)
 if (CheckActorInventory(1001,"DivineShield") > 0) ArmorHellCoreRate -= 25; 		// -12.5% (25)
 if (CheckActorInventory(1001,"BalrogRing") > 0) ArmorHellCoreRate -= 17; 			// -8.5% (17)
 if (CheckActorInventory(1001,"DoveRibbon") > 0) ArmorHellCoreRate -= 11; 			// -5.5% (11)
																					// Total: -66.5% (133)

 percent = percent * ArmorHellCoreRate / 200;

 C2 = PlayerLevel / 10;
 C2 = C2 * -1;
 C2 += 200;
 percent = percent * C2 / 200;

 // Check Hellcore Multiplier in Options
 percent = (percent * MiscellaneousVars[130]) / 100;

 if (CheckActorInventory(1001,"IsHaSatanNow") > 0) percent = percent / 16;

 if (percent < 1) percent = 1;

 HellcoreOverheatLevel += percent;
 if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
 if (HellcoreOverheatLevel > 100000) HellcoreOverheatLevel = 100000;

}

// Spawn a Randomized Armor Item for Flora in "DVI" mode [used with "FloraRandomArmor" thing]
script "FloraRandomArmorDrop" (int type, int OldRand0, int DVIIMode)
{
 int Rand0, Rand1, Rand2, PX, PY, PZ, DVIIRandVal, spawnedaitem;

 if (ActivatorTID() == 0) Thing_ChangeTID(0,1535);

 DVIIRandVal = 1 + (MiscellaneousVars[33] / 32); // Default value for randomizer
 // Do not run script if Flora is not the character in play
 if (CharacterClass != 2) { Thing_Remove(1535); terminate; }
 else
 {
  // Do not run script if the game is Deus Vult II
  if (ModType == 2)
  {
   if (DVIIMode == 0) { Thing_Remove(1535); terminate; }
   else DVIIRandVal = 1024; // Randomizer will ALWAYS roll positive in DVII-AltMode
  }
 }

 // Spawn Occurance Rate
 if (type == 4) // ALWAYS SPAWNS [no random failure rate]
 {
  DVIIRandVal = 1024;
  Rand0 = 0;
 }
 if (type == 3) // Doom2-Armor Bonuses
 {
  Rand0 = random(1,3072);
  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,2208);
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,2496);
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,2784);
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,3072);
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,3648);
 }
 else
 if (type == 2) // Doom2-Armors
 {
  Rand0 = random(1,128);
  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,92);
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,104);
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,116);
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,128);
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,152);
 }
 else
 if (type == 1)
 {
  Rand0 = OldRand0;
 }
 else
 {
  if (ModType == 1) // DVI has 4 levels
  {
   Rand0 = random(1,256);
   if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,184);
   if (GameSkill() == SKILL_EASY) Rand0 = random(1,208);
   if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,232);
   if (GameSkill() == SKILL_HARD) Rand0 = random(1,256);
   if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,304);
  }
  else // Classic has 32 levels [1/4th the spawn rate of DVI mode]
  {
   Rand0 = random(1,768);
   if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,552);
   if (GameSkill() == SKILL_EASY) Rand0 = random(1,624);
   if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,696);
   if (GameSkill() == SKILL_HARD) Rand0 = random(1,768);
   if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,912);
  }
 }

 if (Rand0 <= DVIIRandVal)
 {
  Rand1 = 0;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"PearlyCorset") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"KissaBra") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"RuinousShield") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"DivineShield") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"BalrogRing") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Rand1 += 1;
  if (Rand1 > 10) { Thing_Remove(1535); terminate; } // If all at least 11 items or more are detected on Flora, this script will not run past this point.
 
  while (spawnedaitem == 0)
  {
   PX = GetActorX(1535);
   PY = GetActorY(1535);
   PZ = GetActorZ(1535);
   Rand2 = random(1,100);
   // PrintBold(d:Rand2,s:" / (",d:Rand0,s:") / [",d:Rand1,s:"]\n\n X",d:PX,s:" Y",d:PY,s:" Z",d:PZ);
 
   if (Rand2 > 0 && Rand2 < 10)
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") == 0)
    {
     SpawnForced("SafeTeaShoes",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 9 && Rand2 < 19)
   {
    if (CheckActorInventory(1001,"PearlyCorset") == 0)
    {
     SpawnForced("PearlyCorset",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 18 && Rand2 < 28)
   {
    if (CheckActorInventory(1001,"WaterFlyingDress") == 0)
    {
     SpawnForced("WaterFlyingDress",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 27 && Rand2 < 37)
   {
    if (CheckActorInventory(1001,"EvenstarNecklace") == 0)
    {
     SpawnForced("EvenstarNecklace",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 36 && Rand2 < 46)
   {
    if (CheckActorInventory(1001,"CloakOfEvasion") == 0)
    {
     SpawnForced("CloakOfEvasion",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 45 && Rand2 < 55)
   {
    if (CheckActorInventory(1001,"FalconKnifeEarrings") == 0)
    {
     SpawnForced("FalconKnifeEarrings",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 54 && Rand2 < 64)
   {
    if (CheckActorInventory(1001,"AnubisCufflinks") == 0)
    {
     SpawnForced("AnubisCufflinks",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 63 && Rand2 < 73)
   {
    if (CheckActorInventory(1001,"KissaBra") == 0)
    {
     SpawnForced("KissaBra",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 72 && Rand2 < 82)
   {
    if (CheckActorInventory(1001,"DivineShield") == 0)
    {
     if (CheckActorInventory(1001,"RuinousShield") == 0)
     {
      SpawnForced("RuinousShield",PX,PY,PZ,0,0);
      spawnedaitem++;
      Thing_Remove(1535);
     }
    }
   }
   if (Rand2 > 81 && Rand2 < 91)
   {
    if (CheckActorInventory(1001,"BalrogRing") == 0)
    {
     SpawnForced("BalrogRing",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 90 && Rand2 < 100)
   {
    if (CheckActorInventory(1001,"DoveRibbon") == 0)
    {
     SpawnForced("DoveRibbon",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 99)
   {
    if (CheckActorInventory(1001,"RuinousShield") == 0)
    {
     if (CheckActorInventory(1001,"DivineShield") == 0)
     {
      SpawnForced("DivineShield",PX,PY,PZ,0,0);
      spawnedaitem++;
      Thing_Remove(1535);
     }
    }
   }
  }

 }
 else // No spawn
 {
  Thing_Remove(1535);
 }
}

// Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
script "CheckFloraArmorCopies" (int Armortype)
{
 if (CharacterClass == 2)
 {
  if (Armortype == 1 && CheckActorInventory(1001,"SafeTeaShoes") > 0 && ActivatorTID() == 0) // SafeTeaShoes
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }

  if (Armortype == 2 && CheckActorInventory(1001,"PearlyCorset") > 0 && ActivatorTID() == 0) // PearlyCorset
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }

  if (Armortype == 3 && CheckActorInventory(1001,"WaterFlyingDress") > 0 && ActivatorTID() == 0) // WaterFlyingDress
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }

  if (Armortype == 4 && CheckActorInventory(1001,"EvenstarNecklace") > 0 && ActivatorTID() == 0) // EvenstarNecklace
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }

  if (Armortype == 5 && CheckActorInventory(1001,"CloakOfEvasion") > 0 && ActivatorTID() == 0) // CloakOfEvasion
  {
     Thing_ChangeTID(0,1534);
     Thing_Remove(1534);
  }

  if (Armortype == 6 && CheckActorInventory(1001,"AnubisCufflinks") > 0 && ActivatorTID() == 0) // AnubisCufflinks
  {
     Thing_ChangeTID(0,1534);
     Thing_Remove(1534);
  }

  if (Armortype == 7 && CheckActorInventory(1001,"KissaBra") > 0 && ActivatorTID() == 0) // KissaBra
  {
     Thing_ChangeTID(0,1534);
     Thing_Remove(1534);
  }

  if (Armortype == 8) 
  {
   if (CheckActorInventory(1001,"DivineShield") > 0 && ActivatorTID() == 0) // RuinousShield
   {
    Thing_ChangeTID(0,1534);
    Thing_Remove(1534);
   }
   else
   {
    if (CheckActorInventory(1001,"RuinousShield") > 0 && ActivatorTID() == 0)
    {
     Thing_ChangeTID(0,1534);
     Thing_Remove(1534);
    }
   }
  }

  if (Armortype == 9 && CheckActorInventory(1001,"DivineShield") > 0 && ActivatorTID() == 0) // DivineShield 
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }
 
  if (Armortype == 10 && CheckActorInventory(1001,"BalrogRing") > 0 && ActivatorTID() == 0) // BalrogRing
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }
 
  if (Armortype == 11 && CheckActorInventory(1001,"DoveRibbon") > 0 && ActivatorTID() == 0) // DoveRibbon
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }

  if (Armortype == 12 && CheckActorInventory(1001,"FalconKnifeEarrings") > 0 && ActivatorTID() == 0) // FalconKnifeEarrings
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }
 }
 else
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

}

// Using a Diabloist's Hands' HP Gravity attack-projectile on an enemy
script "Hand-GravityAttack" (int type)
{
 int C1, C2, C3, C4, C5, PrinterOld, PrinterNew;

  PrinterOld = GetActorProperty(0,APROP_Health);
  if (GameSkill() == SKILL_VERY_EASY) C5 = 875;  
  if (GameSkill() == SKILL_EASY) C5 = 750;  
  if (GameSkill() == SKILL_NORMAL) C5 = 500;  
  if (GameSkill() == SKILL_HARD) C5 = 250;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 125;  

  C5 = 750;  

  C2 = 1000;
  C2 = C2 - C5;

  C1 = GetActorProperty(0,APROP_Health);
  C1 = C1 * C2 / 1000;
  if (C1 < 1) C1 = 1;

  SetActorProperty(0,APROP_Health,C1);
  PrinterNew = GetActorProperty(0,APROP_Health);
  // PrintBold(d:PrinterOld,s:"  ",d:PrinterNew);
  // SetActorState(0,"HPFlashGravity");
}

// Determines Attack/Defense/Speed Bonuses for Monsters [depending on difficulty level and maps and game mode]
script "MonsterStatsHP_ATK_DEF_SPD" (int type)
{
 int CurrHP, MaxHP, Speed, Attack, Defense, Temp, RangeVar, LevelCheck, MapCheck;
 int StealthChance;

 if (type < 0) type = 0;
 if (type > 1) type = 1;

 if (type == 0)
 {
  ACS_NamedExecuteWithResult("RefreshStealthInfo"); // Runs to check Stealth information [in case something like finding the Ring has happened]

  if (CheckInventory("MonsterHasBuffs") != 0) terminate;
  if (GetUserVariable(0, "user_checkmapskill") > 0) terminate;

  StealthChance = ACS_NamedExecuteWithResult("GetStealthChance");
  if (random(1,256) <= StealthChance && GetActorClass(0) != "PracticeTarget")
  {
   if (CheckActorInventory(1001,"TheOneRing") > 0) 
   {
    GiveInventory("IsAStealthMonsterRing", 1);
    TakeInventory("IsAStealthMonster5000", 1); 
    TakeInventory("IsAStealthMonster7500", 1); 
    TakeInventory("IsAStealthMonster8750", 1); 
    TakeInventory("IsAStealthMonster9375", 1); 
   }
   else
   {
    TakeInventory("IsAStealthMonsterRing", 1); 
    if (GetCVar("dvds_dviistealthlevel") == 0) GiveInventory("IsAStealthMonster5000", 1); 
    if (GetCVar("dvds_dviistealthlevel") == 1) GiveInventory("IsAStealthMonster7500", 1); 
    if (GetCVar("dvds_dviistealthlevel") == 2) GiveInventory("IsAStealthMonster8750", 1); 
    if (GetCVar("dvds_dviistealthlevel") == 3) GiveInventory("IsAStealthMonster9375", 1); 
    if (GetCVar("dvds_dviistealthlevel") != 0) TakeInventory("IsAStealthMonster5000", 1); 
    if (GetCVar("dvds_dviistealthlevel") != 1) TakeInventory("IsAStealthMonster7500", 1); 
    if (GetCVar("dvds_dviistealthlevel") != 2) TakeInventory("IsAStealthMonster8750", 1); 
    if (GetCVar("dvds_dviistealthlevel") != 3) TakeInventory("IsAStealthMonster9375", 1); 
   }   
   SetUserVariable(0, "user_isstealth", 1);
  }
  else
  {
   SetUserVariable(0, "user_isstealth", 0);
   TakeInventory("IsAStealthMonster", 1);
   TakeInventory("IsAStealthMonsterRing", 1);
  }

  //*******************************************************
  //** Calculates Stats By Checking the Difficulty Level **
  //*******************************************************
  int DifficultyChecker = 1;
  if (ModType == 0)
  { 
   if (GetCVar("dvds_monsterstatcalc_skill") > 0) DifficultyChecker = 1; else DifficultyChecker = 0;
  }
  else DifficultyChecker = 1;

  int SpeedFactor = 0.0;
  int AttackFactor = 0.0;
  int DefenseFactor = 0.0;
  int MaxHPFactor = 0;
  Speed = GetActorProperty(0,APROP_Speed);
  Attack = GetActorProperty(0,APROP_DamageMultiplier); 
  Defense = GetActorProperty(0,APROP_DamageFactor); 
  SetUserVariable(0, "user_basespeed", GetActorProperty(0,APROP_Speed));
  SetUserVariable(0, "user_baseattack", GetActorProperty(0,APROP_DamageMultiplier));
  SetUserVariable(0, "user_basedefense", GetActorProperty(0,APROP_DamageFactor));

  MaxHP = GetActorProperty(0,APROP_Health);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Start Max HP: ",d:MaxHP);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Start: ",f:speed);
  if (DifficultyChecker == 1 && GetActorClass(0) != "PracticeTarget") // Difficulty-checking enabled
  {
   if (GameSkill() == SKILL_VERY_EASY)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = -0.3333;
     DefenseFactor = 0.5000;
     SpeedFactor = -0.083334;
     MaxHPFactor = -0.15;
    }
    else
    {
     AttackFactor = -0.1667;
     DefenseFactor = 0.2000;
     SpeedFactor = -0.041667;
     MaxHPFactor = -0.075;
    }
   }
   else
   if (GameSkill() == SKILL_EASY)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = -0.1667;
     DefenseFactor = 0.2000;
     SpeedFactor = -0.041667;
     MaxHPFactor = -0.05;
    }
    else
    {
     AttackFactor = -0.08333;
     DefenseFactor = 0.090909;
     SpeedFactor = -0.0208333;
     MaxHPFactor = -0.025;
    }
   }
   else
   if (GameSkill() == SKILL_NORMAL)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = 0.0;
     DefenseFactor = 0.0;
     SpeedFactor = 0.0;
     MaxHPFactor = 0.0;
    }
    else
    {
     AttackFactor = 0.0;
     DefenseFactor = 0.0;
     SpeedFactor = 0.0;
     MaxHPFactor = 0.0;
    }
   }
   else
   if (GameSkill() == SKILL_HARD)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = 0.1667;
     DefenseFactor = -0.142857;
     SpeedFactor = 0.041667;
     MaxHPFactor = 0.05;
    }
    else
    {
     AttackFactor = 0.08333;
     DefenseFactor = -0.076924;
     SpeedFactor = 0.0208325;
     MaxHPFactor = 0.0375;
    }
   }
   else
   if (GameSkill() == SKILL_VERY_HARD)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = 0.5;
     DefenseFactor = -0.333334;
     SpeedFactor = 0.125;
     MaxHPFactor = 0.15;
    }
    else
    {
     AttackFactor = 0.2;
     DefenseFactor = -0.1667;
     SpeedFactor = 0.05;
     MaxHPFactor = 0.10;
    }
   }
   else
   if (GameSkill() == 5)
   {
    if (GetCVar("dvds_skilllevelcalctype") == 0)
    {
     AttackFactor = 1.0;
     DefenseFactor = -0.5;
     SpeedFactor = 0.25;
     MaxHPFactor = 0.30;
    }
    else
    {
     AttackFactor = 0.5;
     DefenseFactor = -0.3333;
     SpeedFactor = 0.125;
     MaxHPFactor = 0.225;
    }
   }

   SpeedFactor = FixedMul(SpeedFactor, GetCVar("dvds_monsterspeedratio_skill"));
   if (SpeedFactor > 0.01) SpeedFactor = 0.01;
   if (SpeedFactor > 2.00) SpeedFactor = 2.00;
   Speed = FixedMul(Speed, (1.0+SpeedFactor));
   SetActorProperty(0,APROP_Speed,Speed); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(1.0+SpeedFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"After Skill: ",f:speed);

   AttackFactor = FixedMul(AttackFactor, GetCVar("dvds_monsterattackratio_skill"));
   if (AttackFactor > 0.01) AttackFactor = 0.01;
   if (AttackFactor > 2.00) AttackFactor = 2.00;
   Attack = FixedMul(Attack, (1.0+AttackFactor));
   SetActorProperty(0,APROP_DamageMultiplier,Attack); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(1.0+AttackFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Attack After Skill: ",f:Attack);

   DefenseFactor = FixedMul(DefenseFactor, GetCVar("dvds_monsterdefenseratio_skill"));
   if (DefenseFactor > 0.01) DefenseFactor = 0.01;
   if (DefenseFactor > 2.00) DefenseFactor = 2.00;
   Defense = FixedMul(Defense, (1.0+DefenseFactor));
   SetActorProperty(0,APROP_DamageFactor,Defense); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(1.0+DefenseFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Defense After Skill: ",f:Defense);

   MaxHPFactor = FixedMul(MaxHPFactor, GetCVar("dvds_monstermaxhpratio_skill"));
   if (MaxHPFactor > 0.01) MaxHPFactor = 0.01;
   if (MaxHPFactor > 2.00) MaxHPFactor = 2.00;
   MaxHP = FixedMul(MaxHP, (1.0+MaxHPFactor));
   if (MaxHP < 1) MaxHP = 1;
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(1.0+MaxHPFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHP After Skill: ",d:MaxHP);

  }    

  //*************************************************
  //** Calculates Stats By Checking the Map Number **
  //*************************************************
  int MapChecker = 1;
  if (ModType == 0)
  { 
   if (GetCVar("dvds_monsterstatcalc_maps") > 0) MapChecker = 1; else MapChecker = 0;
  }
  else MapChecker = 1;

  if (MapChecker == 1 && GetActorClass(0) != "PracticeTarget") // Map-checking enabled
  {
   if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
   {
    if (ClassicDoomType == 1 || ClassicDoomType == 2) // Doom 1 / Heretic [ExMx system]
    {
     MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
     MapCheck += MiscellaneousVars[53];
     MapCheck += MiscellaneousVars[169];
     if (MapCheck < 1) MapCheck = 1;
     if (MapCheck > 50) MapCheck = 50;
 
     AttackFactor = 0.0;
     if (MapCheck > 1) AttackFactor += (0.02 * (MapCheck - 1));
     if (MapCheck > 2) AttackFactor += (0.001 * (MapCheck - 2));
     if (MapCheck >= 1 && MapCheck <= 10) AttackFactor = FixedMul(AttackFactor, 1.0125);
     if (MapCheck >= 11 && MapCheck <= 20) AttackFactor = FixedMul(AttackFactor, 1.025);
     if (MapCheck >= 21 && MapCheck <= 30) AttackFactor = FixedMul(AttackFactor, 1.0375);
     if (MapCheck >= 31 && MapCheck <= 40) AttackFactor = FixedMul(AttackFactor, 1.05);
     if (MapCheck >= 41 && MapCheck <= 50) AttackFactor = FixedMul(AttackFactor, 1.0625);
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(AttackFactor));

     DefenseFactor = FixedDiv(1.0, (AttackFactor+1.0)); //(1.0 / (AttackFactor + 1.0)) - 1.0;
     DefenseFactor -= 1.0;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(DefenseFactor));

     SpeedFactor = FixedDiv(AttackFactor,4.0);
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(SpeedFactor));

     MaxHPFactor = AttackFactor;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(MaxHPFactor));
    }
    else // Doom 2 / Hexen / Strife [MAPxx system]
    {
     MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
     MapCheck += MiscellaneousVars[53];
     MapCheck += MiscellaneousVars[169];
     if (MapCheck < 1) MapCheck = 1;
     if (MapCheck > 50) MapCheck = 50;

     AttackFactor = 0.0;
     if (MapCheck > 1) AttackFactor += (0.025 * (MapCheck - 1));

     if (MapCheck >= 1 && MapCheck <= 6) AttackFactor = FixedMul(AttackFactor, 1.0125);
     if (MapCheck >= 7 && MapCheck <= 11) AttackFactor = FixedMul(AttackFactor, 1.025);
     if (MapCheck >= 12 && MapCheck <= 20) AttackFactor = FixedMul(AttackFactor, 1.0375);
     if (MapCheck == 31) AttackFactor = FixedMul(AttackFactor, 1.0375);
     if (MapCheck == 32) AttackFactor = FixedMul(AttackFactor, 1.0375);
     if (MapCheck >= 21 && MapCheck <= 30) AttackFactor = FixedMul(AttackFactor, 1.05);
     if (MapCheck >= 33 && MapCheck <= 40) AttackFactor = FixedMul(AttackFactor, 1.0625);
     if (MapCheck >= 41 && MapCheck <= 50) AttackFactor = FixedMul(AttackFactor, 1.075);
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(AttackFactor));

     DefenseFactor = FixedDiv(1.0, (AttackFactor+1.0)); //(1.0 / (AttackFactor + 1.0)) - 1.0;
     DefenseFactor -= 1.0;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(DefenseFactor));

     SpeedFactor = FixedDiv(AttackFactor,4.0);
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(SpeedFactor));

     MaxHPFactor = AttackFactor;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(MaxHPFactor));

    }
   }

   if (ModType == 1 && GetActorClass(0) != "PracticeTarget") // Deus Vult 1
   {
    MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
    MapCheck += MiscellaneousVars[53];
    MapCheck += MiscellaneousVars[169];
    if (MapCheck < 1101) MapCheck = 1101;
    if (MapCheck > 1104) MapCheck = 1104;
 
    AttackFactor = 0.0;
    if (MapCheck == 1101) AttackFactor = 0.0; // MAP01 - Insurgents
    if (MapCheck == 1102) AttackFactor = 0.25; // MAP02 - Torture Chamber
    if (MapCheck == 1103) AttackFactor = 0.75; // MAP03 - Cathedral
    if (MapCheck == 1104) AttackFactor = 1.5; // MAP04 - End Of Days

    DefenseFactor = FixedDiv(1.0, (AttackFactor+1.0)); //(1.0 / (AttackFactor + 1.0)) - 1.0;
    DefenseFactor -= 1.0;
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(DefenseFactor));

    SpeedFactor = FixedDiv(AttackFactor,4.0);
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(SpeedFactor));

    MaxHPFactor = FixedDiv(AttackFactor,2.0);
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(MaxHPFactor));
   }
   if (ModType == 2 && GetActorClass(0) != "PracticeTarget") // Deus Vult 2
   {
    MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
    MapCheck += MiscellaneousVars[53];
    MapCheck += MiscellaneousVars[169];
    if (MapCheck < 1201) MapCheck = 1201;
    if (MapCheck > 1212) MapCheck = 1212;

    // Earth-type Levels
    if (MapCheck == 1201) // MAP01 - Entryway Pass
    {
     AttackFactor = 0.0; //GiveInventory("MonsterAttack-DVII-MAP01", 1);
     DefenseFactor = 0.0; //GiveInventory("MonsterDefense-DVII-MAP01", 1);
     SpeedFactor = 0.0;
     MaxHPFactor = 0.0;
    }
    else
    if (MapCheck == 1202) // MAP02 - Mutagen
    {
     AttackFactor = 0.03; //GiveInventory("MonsterAttack-DVII-MAP02", 1);
     DefenseFactor = -0.029126; //GiveInventory("MonsterDefense-DVII-MAP02", 1);
     SpeedFactor = 0.0075;
     MaxHPFactor = 0.06;
    }
    else
    if (MapCheck == 1203) // MAP03 - Crouching Demon, Hidden Archvile
    {
     AttackFactor = 0.09; //GiveInventory("MonsterAttack-DVII-MAP03", 1);
     DefenseFactor = -0.082569; //GiveInventory("MonsterDefense-DVII-MAP03", 1);
     SpeedFactor = 0.0225;
     MaxHPFactor = 0.12;
    }
    else
    if (MapCheck == 1204) // MAP04 - Minas Morgul
    {
     AttackFactor = 0.18; //GiveInventory("MonsterAttack-DVII-MAP04", 1);
     DefenseFactor = -0.152542; //GiveInventory("MonsterDefense-DVII-MAP04", 1);
     SpeedFactor = 0.045;
     MaxHPFactor = 0.19;
    }
    else
    if (MapCheck == 1205) // MAP05 - Eagle's Nest
    {
     AttackFactor = 0.30; //GiveInventory("MonsterAttack-DVII-MAP05", 1);
     DefenseFactor = -0.230769; //GiveInventory("MonsterDefense-DVII-MAP05", 1);
     SpeedFactor = 0.075;
     MaxHPFactor = 0.26;
    }
    else
    if (MapCheck == 1206) // MAP05S - The Manliest Level Ever
    {
     AttackFactor = 0.45; //GiveInventory("MonsterAttack-DVII-MAP05S", 1);
     DefenseFactor = -0.310345; //GiveInventory("MonsterDefense-DVII-MAP05S", 1);
     SpeedFactor = 0.1125;
     MaxHPFactor = 0.34;
    }
    else
    if (MapCheck == 1207) // MAP06 - Stargate
    {
     AttackFactor = 0.63; //GiveInventory("MonsterAttack-DVII-MAP06", 1);
     DefenseFactor = -0.386503; //GiveInventory("MonsterDefense-DVII-MAP06", 1);
     SpeedFactor = 0.1575;
     MaxHPFactor = 0.42;
    }
    else
    if (MapCheck == 1208) // MAP07 - The Desert Temple
    {
     AttackFactor = 0.84; //GiveInventory("MonsterAttack-DVII-MAP07", 1);
     DefenseFactor = -0.456522; //GiveInventory("MonsterDefense-DVII-MAP07", 1);
     SpeedFactor = 0.21;
     MaxHPFactor = 0.50;
    }
    else
    // Hell Levels
    if (MapCheck == 1209) // MAP08 - The Unholy Cathedral
    {
     AttackFactor = 1.14; //GiveInventory("MonsterAttack-DVII-MAP08", 1);
     DefenseFactor = -0.53271; //GiveInventory("MonsterDefense-DVII-MAP08", 1);
     SpeedFactor = 0.285;
     MaxHPFactor = 0.77;
    }
    else
    if (MapCheck == 1210) // DV2M09 - You Shall Not Pass!
    {
     AttackFactor = 1.53; //("MonsterAttack-DVII-MAP09", 1);
     DefenseFactor = -0.604743; //GiveInventory("MonsterDefense-DVII-MAP09", 1);
     SpeedFactor = 0.3825;
     MaxHPFactor = 1.09;
    }
    else
    if (MapCheck == 1211) // DV2M10 - Hell's Vendetta
    {
     AttackFactor = 2.01; //GiveInventory("MonsterAttack-DVII-MAP10", 1);
     DefenseFactor = -0.667774; //GiveInventory("MonsterDefense-DVII-MAP10", 1);
     SpeedFactor = 0.5025;
     MaxHPFactor = 1.48;
    }
    else
    if (MapCheck == 1212) // DV2M10B - attedneV s'lleH
    {
     AttackFactor = 2.58; //GiveInventory("MonsterAttack-DVII-MAP10B", 1);
     DefenseFactor = -0.72067; //GiveInventory("MonsterDefense-DVII-MAP10B", 1);
     SpeedFactor = 0.645;
     MaxHPFactor = 1.92;
    }
    else
    if (MapCheck == 1214) // DV2M12 - "The Wings of The Maiar" [DVI combined level remake]
    {
     AttackFactor = 1.56; //GiveInventory("MonsterAttack-DVII-MAP12", 1);
     DefenseFactor = -0.609375; //GiveInventory("MonsterDefense-DVII-MAP12", 1);
     SpeedFactor = 0.39;
     MaxHPFactor = 1.41;
    }
    else
    if (MapCheck == 1215) // DV2M10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
    {
     AttackFactor = 2.58; //GiveInventory("MonsterAttack-DVII-MAP10B", 1);
     DefenseFactor = -0.72067; //GiveInventory("MonsterDefense-DVII-MAP10B", 1);
     SpeedFactor = 0.645;
     MaxHPFactor = 1.92;
    }
   } 

   SpeedFactor = FixedMul(SpeedFactor, GetCVar("dvds_monsterspeedratio_maps"));
   if (SpeedFactor > 0.01) SpeedFactor = 0.01;
   if (SpeedFactor > 2.00) SpeedFactor = 2.00;
   Speed = FixedMul(Speed, (1.0+SpeedFactor));
   SetActorProperty(0,APROP_Speed,Speed); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(1.0+SpeedFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"After MAP: ",f:Speed);

   AttackFactor = FixedMul(AttackFactor, GetCVar("dvds_monsterattackratio_maps"));
   if (AttackFactor > 0.01) AttackFactor = 0.01;
   if (AttackFactor > 2.00) AttackFactor = 2.00;
   Attack = FixedMul(Attack, (1.0+AttackFactor));
   SetActorProperty(0,APROP_DamageMultiplier,Attack); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(1.0+AttackFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Attack After MAP: ",f:Attack);

   DefenseFactor = FixedMul(DefenseFactor, GetCVar("dvds_monsterdefenseratio_maps"));
   if (DefenseFactor > 0.01) DefenseFactor = 0.01;
   if (DefenseFactor > 2.00) DefenseFactor = 2.00;
   Defense = FixedMul(Defense, (1.0+DefenseFactor));
   SetActorProperty(0,APROP_DamageFactor,Defense); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(1.0+DefenseFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Defense After MAP: ",f:Defense);

   MaxHPFactor = FixedMul(MaxHPFactor, GetCVar("dvds_monstermaxhpratio_maps"));
   if (MaxHPFactor > 0.01) MaxHPFactor = 0.01;
   if (MaxHPFactor > 2.00) MaxHPFactor = 2.00;
   MaxHP = FixedMul(MaxHP, (1.0+MaxHPFactor));
   if (MaxHP < 1) MaxHP = 1;
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(1.0+MaxHPFactor));
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHP After MAP: ",d:MaxHP);
 }


  //*****************************************************************
  //** Calculates Stats [and Level] By Checking the Player's Level **
  //*****************************************************************
  int LevelErrorRange;
  int LevelBaseMulti = 0.00375;
  if (GameSkill() == SKILL_VERY_EASY) LevelBaseMulti = 0.00225;
  if (GameSkill() == SKILL_EASY) LevelBaseMulti = 0.003;
  if (GameSkill() == SKILL_NORMAL) LevelBaseMulti = 0.00375;
  if (GameSkill() == SKILL_HARD) LevelBaseMulti = 0.0045;
  if (GameSkill() == SKILL_VERY_HARD) LevelBaseMulti = 0.00525;
  LevelBaseMulti = FixedMul(LevelBaseMulti, GetCVar("dvds_monsterlevelstatfactor"));

  int LevelChecker = 1;
  int LevelDifficultyInflation = GetCVar("dvds_leveldifficultyinflation");
  if (LevelDifficultyInflation < -2000) LevelDifficultyInflation = -2000;
  if (LevelDifficultyInflation > 2000) LevelDifficultyInflation = 2000;

  if (ModType == 0)
  { 
   if (GetCVar("dvds_monsterstatcalc_levels") > 0) LevelChecker = 1; else LevelChecker = 0;
  }
  else LevelChecker = 1;

  if (LevelChecker == 1 && GetActorClass(0) != "PracticeTarget")
  {
     LevelCheck = PlayerLevel;
     LevelCheck += LevelDifficultyInflation;

     LevelErrorRange = FixedMul(LevelCheck, 0.1667);
     if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
     LevelCheck += random(-LevelErrorRange,LevelErrorRange);

     if (ModType == 1) // DV1 [general]
     {
      LevelCheck += random(0,10);
     }
     if (ModType == 2)
     {
      if (MapCheck >= 1209 && MapCheck <= 1215) // DV2's Hell Levels
      {
       LevelCheck += random(10,25);
      }
     }

     if (random(1,1000) <= 167)
     {
      if (random(1,1000) <= 167)
      {
       if (random(1,1000) <= 167)
       {
        LevelCheck += random(64,96);
       }
       else
       {
        LevelCheck += random(16,24);
       }
      }
      else
      {
       LevelCheck += random(4,6);
      }
     }
     if (random(1,64) == 1) LevelCheck *= 4;

     if (LevelCheck < 0) LevelCheck = 0;
     if (LevelCheck > 2000) LevelCheck = 2000;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MonsterLevel: ",d:(LevelCheck));
     SetUserVariable(0,"user_monsterlevel",LevelCheck);

     AttackFactor = 0.0;
     if (LevelCheck > 0) AttackFactor += (LevelBaseMulti * (LevelCheck));
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(AttackFactor));

     DefenseFactor = FixedDiv(1.0, (AttackFactor+1.0)); //(1.0 / (AttackFactor + 1.0)) - 1.0;
     DefenseFactor -= 1.0;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(DefenseFactor));

     SpeedFactor = FixedDiv(AttackFactor,4.0);
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(SpeedFactor));

     MaxHPFactor = AttackFactor;
     if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(MaxHPFactor));

    SpeedFactor = FixedMul(SpeedFactor, GetCVar("dvds_monsterspeedratio_levels"));
    if (SpeedFactor > 0.01) SpeedFactor = 0.01;
    if (SpeedFactor > 2.00) SpeedFactor = 2.00;
    Speed = FixedMul(Speed, (1.0+SpeedFactor));
    SetActorProperty(0,APROP_Speed,Speed); 
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"SpeedFactor: ",f:(1.0+SpeedFactor));
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Speed After Levels: ",f:Speed);


    AttackFactor = FixedMul(AttackFactor, GetCVar("dvds_monsterattackratio_levels"));
    if (AttackFactor > 0.01) AttackFactor = 0.01;
    if (AttackFactor > 2.00) AttackFactor = 2.00;
    Attack = FixedMul(Attack, (1.0+AttackFactor));
    SetActorProperty(0,APROP_DamageMultiplier,Attack); 
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"AttackFactor: ",f:(1.0+AttackFactor));
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Attack After Levels: ",f:Attack);

    DefenseFactor = FixedMul(DefenseFactor, GetCVar("dvds_monsterdefenseratio_levels"));
    if (DefenseFactor > 0.01) DefenseFactor = 0.01;
    if (DefenseFactor > 2.00) DefenseFactor = 2.00;
    Defense = FixedMul(Defense, (1.0+DefenseFactor));
    SetActorProperty(0,APROP_DamageFactor,Defense); 
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"DefenseFactor: ",f:(1.0+DefenseFactor));
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Defense After Levels: ",f:Defense);

    MaxHPFactor = FixedMul(MaxHPFactor, GetCVar("dvds_monstermaxhpratio_levels"));
    if (MaxHPFactor > 0.01) MaxHPFactor = 0.01;
    if (MaxHPFactor > 2.00) MaxHPFactor = 2.00;
    MaxHP = FixedMul(MaxHP, (1.0+MaxHPFactor));
    if (MaxHP < 1) MaxHP = 1;
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHPFactor: ",f:(1.0+MaxHPFactor));
    if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHP After Levels: ",d:MaxHP);
  }


  //**********************************************
  //** Calculates Stats Based on Varience/Error **
  //**********************************************
  int ErrorChecker = 1;
  if (ModType == 0)
  { 
   if (GetCVar("dvds_monsterstatcalc_varience") > 0) ErrorChecker = 1; else ErrorChecker = 0;
  }
  else ErrorChecker = 1;

  if (ErrorChecker == 1 && GetActorClass(0) != "PracticeTarget")
  {
   // HP Error
   int MaxHPErrorRange = FixedMul(MaxHP, GetCVar("dvds_monstermaxhpvarience")); //MaxHP / 10;
   if (MaxHPErrorRange > 0.01) MaxHPErrorRange = 0.01;
   if (MaxHPErrorRange > 1.00) MaxHPErrorRange = 1.00;
   MaxHP += random(-MaxHPErrorRange,MaxHPErrorRange);
   if (MaxHP < 1) MaxHP = 1;
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"MaxHP Error Range: ",d:MaxHPErrorRange);

   int SpeedErrorRange = FixedMul(Speed, GetCVar("dvds_monsterspeedvarience"));
   if (SpeedErrorRange > 0.01) SpeedErrorRange = 0.01;
   if (SpeedErrorRange > 1.00) SpeedErrorRange = 1.00;
   Speed += random(-SpeedErrorRange,SpeedErrorRange);
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Speed Error Range: ",f:SpeedErrorRange);
   SetActorProperty(0,APROP_Speed,Speed); //Set's Final Speed values

   int AttackErrorRange = FixedMul(Attack, GetCVar("dvds_monsterattackvarience"));
   if (AttackErrorRange > 0.01) AttackErrorRange = 0.01;
   if (AttackErrorRange > 1.00) AttackErrorRange = 1.00;
   Attack += random(-AttackErrorRange,AttackErrorRange);
   SetActorProperty(0,APROP_DamageMultiplier,Attack); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Attack Error Range: ",f:AttackErrorRange);

   int DefenseErrorRange = FixedMul(Defense, GetCVar("dvds_monsterdefensevarience"));
   if (DefenseErrorRange > 0.01) DefenseErrorRange = 0.01;
   if (DefenseErrorRange > 1.00) DefenseErrorRange = 1.00;
   Defense += random(-DefenseErrorRange,DefenseErrorRange);
   SetActorProperty(0,APROP_DamageFactor,Defense); 
   if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Defense Error Range: ",f:DefenseErrorRange);
  }


  //** Set's Final MaxHP and Current HP values **
  SetActorProperty(0,APROP_Health,MaxHP);
  SetActorProperty(0,APROP_SpawnHealth,MaxHP);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Final Speed: ",f:Speed);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Final Attack: ",f:Attack);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Final Defense: ",f:Defense);
  if (GetCVar("dvdsdebug_showstatcalcstuff") != 0) PrintBold(s:"Final Max HP: ",d:MaxHP);

  if (GetActorClass(0) != "Sauravatar") { SetInventory("CurrentMaxHealth", MaxHP); SetUserVariable(0,"user_MaxHP",MaxHP); }

  // Sets the monster's "Desperation Buff" level. The level it must fall below in order to gain it's unique buffs
  RangeVar = 375;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 250; // 25.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 313; // 31.3%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 375; // 37.5%
  if (GameSkill() == SKILL_HARD) RangeVar = 437; // 43.7%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 500; // 50.0%
  if (GameSkill() == 5) RangeVar = 625; // 62.5%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPBuffRange",Temp);


  // Sets the monster's "Low Range" of HP, meaning there is a 25% chance it will execute a "nova" or "shock" attack
  RangeVar = 160;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 80; // 8.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 120; // 12.0%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 160; // 16.0%
  if (GameSkill() == SKILL_HARD) RangeVar = 200; // 20.0%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 240; // 24.0%
  if (GameSkill() == 5) RangeVar = 320; // 32.0%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPLowRange",Temp);


  // Sets the monster's "Critical Range" of HP, meaning there is a 100% chance it will execute a "nova" or "shock" attack
  RangeVar = 20;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 10; // 1.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 15; // 1.5%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 20; // 2.0%
  if (GameSkill() == SKILL_HARD) RangeVar = 25; // 2.5%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 30; // 3.0%
  if (GameSkill() == 5) RangeVar = 40; // 4.0%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPCritRange",Temp);


  // Sets the monster's "Extreme Death" range of HP, determining how much it takes to gib most monsters (or permenantly kill a Death Incarnate)
  Temp = MaxHP * -1; // -100.0%
  if (Temp > 0) Temp = 0;
  SetUserVariable(0,"user_HPXDeathRange",Temp);

  // Excutes Lifebar-Related Code
  GiveInventory("MonsterDisplayDMG", 1);
  ACS_NamedExecuteAlways("DamageDisplays",0,0,0,0);

  GiveInventory("MonsterHasBuffs", 1);
  SetUserVariable(0, "user_checkmapskill", GetUserVariable(0, "user_checkmapskill") + 1);
 }
 else // Usually if the monster/actor is dying, the script is called using "type 1"
 {
  if (CheckInventory("MonsterHasBuffs") <= 0) terminate;
  if (GetUserVariable(0, "user_checkmapskill") < 1) terminate;
  SetActorProperty(0,APROP_DamageMultiplier,GetUserVariable(0, "user_baseattack"));
  SetActorProperty(0,APROP_DamageFactor,GetUserVariable(0, "user_basedefense"));
  SetActorProperty(0,APROP_Speed,GetUserVariable(0, "user_basespeed"));

  TakeInventory("MonsterDisplayDMG", 1);
  TakeInventory("MonsterHasBuffs", 1);
  SetUserVariable(0, "user_monsterlevel",0);
  SetUserVariable(0, "user_checkmapskill", 0);
  SetUserVariable(0, "user_isstealth", 0);
 }
}

script "CheckFloraItems" (int forelse)
{
 if (forelse == 1) // else
 {
  if (CharacterClass == 2)
  {
   Thing_ChangeTID(0,1534); Thing_Remove(1534);
  }
 }
 else // for
 {
  if (CharacterClass != 2)
  {
   Thing_ChangeTID(0,1534); Thing_Remove(1534);
  }
 }
}

// Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
script "HellcoreWeaponCheckCharacter" (int Weapontype)
{
 int IsWeaponLevelMaxed;
 if (CharacterClass == 2)
 {
  IsWeaponLevelMaxed = 0;
  if (Weapontype == 0 && MiscellaneousVars[96] >= 8) IsWeaponLevelMaxed = 1; // Imp Claw [4]
  if (Weapontype == 1 && MiscellaneousVars[97] >= 8) IsWeaponLevelMaxed = 1; // Dark Imp Claw [4]

  if (Weapontype == 2 && MiscellaneousVars[98] >= 8) IsWeaponLevelMaxed = 1; // CacoDemon Eye [4]
  if (Weapontype == 3 && MiscellaneousVars[99] >= 8) IsWeaponLevelMaxed = 1; // Cacolantern Eye [4]
  if (Weapontype == 4 && MiscellaneousVars[100] >= 8) IsWeaponLevelMaxed = 1; // Abaddon Eye [4]

  if (Weapontype == 5 && MiscellaneousVars[101] >= 8) IsWeaponLevelMaxed = 1; // Knight Fist [5]
  if (Weapontype == 6 && MiscellaneousVars[102] >= 8) IsWeaponLevelMaxed = 1; // Baron Fist [5]
  if (Weapontype == 7 && MiscellaneousVars[103] >= 8) IsWeaponLevelMaxed = 1; // Belphegor Fist [5]
  if (Weapontype == 8 && MiscellaneousVars[104] >= 8) IsWeaponLevelMaxed = 1; // Bruiser Fist [5]
  if (Weapontype == 9 && MiscellaneousVars[105] >= 8) IsWeaponLevelMaxed = 1; // Archon Fist [5]
  if (Weapontype == 10 && MiscellaneousVars[106] >= 8) IsWeaponLevelMaxed = 1; // Pyro Fist [5]

  if (Weapontype == 11 && MiscellaneousVars[107] >= 8) IsWeaponLevelMaxed = 1; // Incarnate Skull [6]
  if (Weapontype == 12 && MiscellaneousVars[108] >= 8) IsWeaponLevelMaxed = 1; // Archvile Hand [6]
  if (Weapontype == 13 && MiscellaneousVars[109] >= 8) IsWeaponLevelMaxed = 1; // Diabloist Hand  [6]
  if (Weapontype == 14 && MiscellaneousVars[110] >= 8) IsWeaponLevelMaxed = 1; // Balrog Fist [6]

  if (Weapontype == 15 && MiscellaneousVars[111] >= 8) IsWeaponLevelMaxed = 1; // Elemental's Eye [6]
  if (Weapontype == 16 && MiscellaneousVars[112] >= 8) IsWeaponLevelMaxed = 1; // Overlord's Eye [6]
  if (IsWeaponLevelMaxed != 0) { Thing_ChangeTID(0,1534); Thing_Remove(1534); }
 }
 else { Thing_ChangeTID(0,1534); Thing_Remove(1534); }
}

// Checks the mapnumber and gametype for Monster Spawners (main number)
script "GetEvolveChance" (void)
{
 int SpawnChance, G1, LevelCheck, MapCheck;

 if(GetCVar("dvds_dviirndmonsters") == 0) SpawnChance = 0;
 else SpawnChance = GetCVar("dvds_monsterevolchance");
 if (SpawnChance < 0) SpawnChance = 0;
 if (SpawnChance > 512) SpawnChance = 512;

 SpawnChance = SpawnChance + (SceptreActualLevel * 2 / 10) + (PlayerLevel / 15);

 if (CharacterClass == 0) SpawnChance = SpawnChance * 900 / 1000;
 else if (CharacterClass == 1) SpawnChance = SpawnChance * 975 / 1000;
 else if (CharacterClass == 2) SpawnChance = SpawnChance * 1050 / 1000;
 else SpawnChance = SpawnChance * 1000 / 1000;

 if (GameSkill() == SKILL_VERY_EASY) SpawnChance = SpawnChance * 80 / 100;
 else if (GameSkill() == SKILL_EASY) SpawnChance = SpawnChance * 90 / 100;
 else if (GameSkill() == SKILL_NORMAL) SpawnChance = SpawnChance * 100 / 100;
 else if (GameSkill() == SKILL_HARD) SpawnChance = SpawnChance * 110 / 100;
 else if (GameSkill() == SKILL_VERY_HARD) SpawnChance = SpawnChance * 125 / 100;
 else SpawnChance = SpawnChance * 100 / 100;

 if (CheckActorInventory(1001,"SauronHelmet") > 0) SpawnChance = SpawnChance * 110 / 100; // Elevates Spawn Chances by 10%
 if (CheckActorInventory(1001,"SauronGauntletsItem") > 0) SpawnChance = SpawnChance * 110 / 100; // Elevates Spawn Chances by 10%

 if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
 {
  if (ClassicDoomType == 1 || ClassicDoomType == 2) // Doom 1 / Heretic
  {
   MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
   MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
   if (MapCheck < 1) MapCheck = 1;
   if (MapCheck > 50) MapCheck = 50;

   if (MapCheck >= 1 && MapCheck <= 10) G1 = (MapCheck * 30);
   if (MapCheck >= 11 && MapCheck <= 20) G1 = (MapCheck * 35);
   if (MapCheck >= 21 && MapCheck <= 30) G1 = (MapCheck * 40);
   if (MapCheck == 31) G1 = (MapCheck * 42);
   if (MapCheck == 32) G1 = (MapCheck * 44);
   if (MapCheck == 39) G1 = (MapCheck * 47);
   if (MapCheck == 40) G1 = (MapCheck * 47);
   if (MapCheck == 33) G1 = (MapCheck * 50);
   if (MapCheck == 34) G1 = (MapCheck * 54);
   if (MapCheck == 35) G1 = (MapCheck * 58);
   if (MapCheck == 36) G1 = (MapCheck * 63);
   if (MapCheck == 37) G1 = (MapCheck * 68);
   if (MapCheck == 38) G1 = (MapCheck * 75);
   if (MapCheck == 41) G1 = (MapCheck * 78);
   if (MapCheck == 42) G1 = (MapCheck * 81);
   if (MapCheck == 49) G1 = (MapCheck * 84);
   if (MapCheck == 50) G1 = (MapCheck * 87);
   if (MapCheck == 43) G1 = (MapCheck * 91);
   if (MapCheck == 44) G1 = (MapCheck * 95);
   if (MapCheck == 45) G1 = (MapCheck * 99);
   if (MapCheck == 46) G1 = (MapCheck * 104);
   if (MapCheck == 47) G1 = (MapCheck * 109);
   if (MapCheck == 48) G1 = (MapCheck * 115);
   if (MapCheck == 49) G1 = (MapCheck * 121);
   if (MapCheck == 50) G1 = (MapCheck * 127);
  }
  else // Doom 2 / Hexen / Strife
  {
   MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
   MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
   if (MapCheck < 1) MapCheck = 1;
   if (MapCheck > 50) MapCheck = 50;

   if (MapCheck >= 1 && MapCheck <= 5) G1 = (MapCheck * 30);
   if (MapCheck >= 6 && MapCheck <= 10) G1 = (MapCheck * 35);
   if (MapCheck >= 11 && MapCheck <= 15) G1 = (MapCheck * 40);
   if (MapCheck >= 16 && MapCheck <= 20) G1 = (MapCheck * 45);
   if (MapCheck >= 21 && MapCheck <= 25) G1 = (MapCheck * 55);
   if (MapCheck == 26) G1 = (MapCheck * 56);
   if (MapCheck == 27) G1 = (MapCheck * 58);
   if (MapCheck == 28) G1 = (MapCheck * 61);
   if (MapCheck == 29) G1 = (MapCheck * 65);
   if (MapCheck == 30) G1 = (MapCheck * 70);
   if (MapCheck == 31) G1 = (MapCheck * 45);
   if (MapCheck == 32) G1 = (MapCheck * 55);
   if (MapCheck == 33) G1 = (MapCheck * 72);
   if (MapCheck == 34) G1 = (MapCheck * 74);
   if (MapCheck == 35) G1 = (MapCheck * 76);
   if (MapCheck == 36) G1 = (MapCheck * 79);
   if (MapCheck == 37) G1 = (MapCheck * 82);
   if (MapCheck == 38) G1 = (MapCheck * 85);
   if (MapCheck == 39) G1 = (MapCheck * 88);
   if (MapCheck == 40) G1 = (MapCheck * 92);
   if (MapCheck == 41) G1 = (MapCheck * 96);
   if (MapCheck == 42) G1 = (MapCheck * 100);
   if (MapCheck == 43) G1 = (MapCheck * 104);
   if (MapCheck == 44) G1 = (MapCheck * 109);
   if (MapCheck == 45) G1 = (MapCheck * 114);
   if (MapCheck == 46) G1 = (MapCheck * 119);
   if (MapCheck == 47) G1 = (MapCheck * 125);
   if (MapCheck == 48) G1 = (MapCheck * 131);
   if (MapCheck == 49) G1 = (MapCheck * 137);
   if (MapCheck == 50) G1 = (MapCheck * 143);
  }
  G1 += 1000;
  SpawnChance = SpawnChance * G1 / 1000;
 }
 else if (ModType == 1) // DVI
 {
  MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
  MapCheck += MiscellaneousVars[54];
  MapCheck += MiscellaneousVars[169];
  if (MapCheck < 1101) MapCheck = 1101;
  if (MapCheck > 1104) MapCheck = 1104;

  if (MapCheck == 1101) SpawnChance = SpawnChance * 1000 / 1000; // MAP01 - Insurgents
  else if (MapCheck == 1102) SpawnChance = SpawnChance * 1116 / 1000; // MAP02 - Torture Chamber
  else if (MapCheck == 1103) SpawnChance = SpawnChance * 1256 / 1000; // MAP03 - Cathedral
  else if (MapCheck == 1104) SpawnChance = SpawnChance * 1418 / 1000; // MAP04 - End Of Days
  else SpawnChance = SpawnChance * 1000 / 1000; // Any other Map
 }
 else if (ModType == 2) // DVII
 {
  MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
  MapCheck += MiscellaneousVars[54];
  MapCheck += MiscellaneousVars[169];
  if (MapCheck < 1201) MapCheck = 1201;
  if (MapCheck > 1212) MapCheck = 1212;

  if (MapCheck == 1201) SpawnChance = SpawnChance * 1000 / 1000; // MAP01 - Entryway Pass
  else if (MapCheck == 1202) SpawnChance = SpawnChance * 1070 / 1000; // MAP02 - Mutagen
  else if (MapCheck == 1203) SpawnChance = SpawnChance * 1140 / 1000; // MAP03 - Crouching Demon, Hidden Archvile
  else if (MapCheck == 1204) SpawnChance = SpawnChance * 1209 / 1000; // MAP04 - Minas Morgul
  else if (MapCheck == 1205) SpawnChance = SpawnChance * 1302 / 1000; // MAP05 - Eagle's Nest
  else if (MapCheck == 1206) SpawnChance = SpawnChance * 1395 / 1000; // MAP05B - The Manliest Level Ever
  else if (MapCheck == 1207) SpawnChance = SpawnChance * 1488 / 1000; // MAP06 - Stargate
  else if (MapCheck == 1208) SpawnChance = SpawnChance * 1605 / 1000; // MAP07 - The Desert Temple
  else if (MapCheck == 1209) SpawnChance = SpawnChance * 1953 / 1000; // MAP08 - The Unholy Cathedral
  else if (MapCheck == 1210) SpawnChance = SpawnChance * 2372 / 1000; // MAP09 - You Shall Not Pass!
  else if (MapCheck == 1211) SpawnChance = SpawnChance * 2884 / 1000; // MAP10 - Hell's Vendetta
  else if (MapCheck == 1212) SpawnChance = SpawnChance * 3488 / 1000; // MAP10B - attedneV s'lleH
  else if (MapCheck == 1214) SpawnChance = SpawnChance * 1465 / 1000; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
  else if (MapCheck == 1215) SpawnChance = SpawnChance * 3488 / 1000; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
  else SpawnChance = SpawnChance * 1000 / 1000; // All other Maps
 }
 else SpawnChance = SpawnChance * 1000 / 1000;

 // PrintBold(d:SpawnChance);
 SetResultValue(SpawnChance);
}

// Checks the mapnumber and gametype for Monster Spawners (stealth number)
script "GetStealthChance" (void)
{
 int StealthChance, G1, LevelCheck, MapCheck;

 if(GetCVar("dvds_dviirndstealthmonsters") == 0) StealthChance = 0;
 else StealthChance = GetCVar("dvds_monsterstealthchance");
 if (StealthChance < 0) StealthChance = 0;
 if (StealthChance > 512) StealthChance = 512;

 StealthChance = StealthChance + (SceptreActualLevel * 2 / 50) + (PlayerLevel / 75);

 if (CharacterClass == 0) StealthChance = StealthChance * 1125 / 1000;
 else if (CharacterClass == 1) StealthChance = StealthChance * 1000 / 1000;
 else if (CharacterClass == 2) StealthChance = StealthChance * 875 / 1000;
 else StealthChance = StealthChance * 1000 / 1000;

 if (GameSkill() == SKILL_VERY_EASY) StealthChance = StealthChance * 75 / 100;
 else if (GameSkill() == SKILL_EASY) StealthChance = StealthChance * 90 / 100;
 else if (GameSkill() == SKILL_NORMAL) StealthChance = StealthChance * 100 / 100;
 else if (GameSkill() == SKILL_HARD) StealthChance = StealthChance * 110 / 100;
 else if (GameSkill() == SKILL_VERY_HARD) StealthChance = StealthChance * 125 / 100;
 else StealthChance = StealthChance * 100 / 100;

 if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
 {
  if (ClassicDoomType == 1 || ClassicDoomType == 2) // Doom 1 / Heretic
  {
   MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
   MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
   if (MapCheck < 1) MapCheck = 1;
   if (MapCheck > 50) MapCheck = 50;

   if (MapCheck >= 1 && MapCheck <= 10) G1 = (MapCheck * 30);
   if (MapCheck >= 11 && MapCheck <= 20) G1 = (MapCheck * 35);
   if (MapCheck >= 21 && MapCheck <= 30) G1 = (MapCheck * 40);
   if (MapCheck == 31) G1 = (MapCheck * 42);
   if (MapCheck == 32) G1 = (MapCheck * 44);
   if (MapCheck == 39) G1 = (MapCheck * 47);
   if (MapCheck == 40) G1 = (MapCheck * 47);
   if (MapCheck == 33) G1 = (MapCheck * 50);
   if (MapCheck == 34) G1 = (MapCheck * 54);
   if (MapCheck == 35) G1 = (MapCheck * 58);
   if (MapCheck == 36) G1 = (MapCheck * 63);
   if (MapCheck == 37) G1 = (MapCheck * 68);
   if (MapCheck == 38) G1 = (MapCheck * 75);
   if (MapCheck == 41) G1 = (MapCheck * 78);
   if (MapCheck == 42) G1 = (MapCheck * 81);
   if (MapCheck == 49) G1 = (MapCheck * 84);
   if (MapCheck == 50) G1 = (MapCheck * 87);
   if (MapCheck == 43) G1 = (MapCheck * 91);
   if (MapCheck == 44) G1 = (MapCheck * 95);
   if (MapCheck == 45) G1 = (MapCheck * 99);
   if (MapCheck == 46) G1 = (MapCheck * 104);
   if (MapCheck == 47) G1 = (MapCheck * 109);
   if (MapCheck == 48) G1 = (MapCheck * 115);
   if (MapCheck == 49) G1 = (MapCheck * 121);
   if (MapCheck == 50) G1 = (MapCheck * 127);
  }
  else // Doom / Hexen / Strife
  {
   MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
   MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
   if (MapCheck < 1) MapCheck = 1;
   if (MapCheck > 32) MapCheck = 32;

   if (MapCheck >= 1 && MapCheck <= 5) G1 = (MapCheck * 30);
   if (MapCheck >= 6 && MapCheck <= 10) G1 = (MapCheck * 35);
   if (MapCheck >= 11 && MapCheck <= 15) G1 = (MapCheck * 40);
   if (MapCheck >= 16 && MapCheck <= 20) G1 = (MapCheck * 45);
   if (MapCheck >= 21 && MapCheck <= 25) G1 = (MapCheck * 55);
   if (MapCheck == 26) G1 = (MapCheck * 56);
   if (MapCheck == 27) G1 = (MapCheck * 58);
   if (MapCheck == 28) G1 = (MapCheck * 61);
   if (MapCheck == 29) G1 = (MapCheck * 65);
   if (MapCheck == 30) G1 = (MapCheck * 70);
   if (MapCheck == 31) G1 = (MapCheck * 45);
   if (MapCheck == 32) G1 = (MapCheck * 55);
   if (MapCheck == 33) G1 = (MapCheck * 72);
   if (MapCheck == 34) G1 = (MapCheck * 74);
   if (MapCheck == 35) G1 = (MapCheck * 76);
   if (MapCheck == 36) G1 = (MapCheck * 79);
   if (MapCheck == 37) G1 = (MapCheck * 82);
   if (MapCheck == 38) G1 = (MapCheck * 85);
   if (MapCheck == 39) G1 = (MapCheck * 88);
   if (MapCheck == 40) G1 = (MapCheck * 92);
   if (MapCheck == 41) G1 = (MapCheck * 96);
   if (MapCheck == 42) G1 = (MapCheck * 100);
   if (MapCheck == 43) G1 = (MapCheck * 104);
   if (MapCheck == 44) G1 = (MapCheck * 109);
   if (MapCheck == 45) G1 = (MapCheck * 114);
   if (MapCheck == 46) G1 = (MapCheck * 119);
   if (MapCheck == 47) G1 = (MapCheck * 125);
   if (MapCheck == 48) G1 = (MapCheck * 131);
   if (MapCheck == 49) G1 = (MapCheck * 137);
   if (MapCheck == 50) G1 = (MapCheck * 143);

  }
  G1 += 1000;
  StealthChance = StealthChance * G1 / 1000;
  StealthChance = StealthChance * 5 / 8;
 }
 else if (ModType == 1) // DVI
 {
  MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
  MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
  if (MapCheck < 1101) MapCheck = 1101;
  if (MapCheck > 1104) MapCheck = 1104;

  if (MapCheck == 1101) StealthChance = StealthChance * 1000 / 1000; // MAP01 - Insurgents
  else if (MapCheck == 1102) StealthChance = StealthChance * 1116 / 1000; // MAP02 - Torture Chamber
  else if (MapCheck == 1103) StealthChance = StealthChance * 1256 / 1000; // MAP03 - Cathedral
  else if (MapCheck == 1104) StealthChance = StealthChance * 1418 / 1000; // MAP04 - End Of Days
  else StealthChance = StealthChance * 1000 / 1000; // Any other map
 }
 else
 if (ModType == 2) // DVII
 {
  MapCheck = GetLevelInfo(LEVELINFO_LEVELNUM);
  MapCheck += MiscellaneousVars[54];
   MapCheck += MiscellaneousVars[169];
  if (MapCheck < 1201) MapCheck = 1201;
  if (MapCheck > 1212) MapCheck = 1212;

  if (MapCheck == 1201) StealthChance = StealthChance * 1000 / 1000; // MAP01 - Entryway Pass
  else if (MapCheck == 1202) StealthChance = StealthChance * 1070 / 1000; // MAP02 - Mutagen
  else if (MapCheck == 1203) StealthChance = StealthChance * 1140 / 1000; // MAP03 - Crouching Demon, Hidden Archvile
  else if (MapCheck == 1204) StealthChance = StealthChance * 1209 / 1000; // MAP04 - Minas Morgul
  else if (MapCheck == 1205) StealthChance = StealthChance * 1302 / 1000; // MAP05 - Eagle's Nest
  else if (MapCheck == 1206) StealthChance = StealthChance * 1395 / 1000; // MAP05B - The Manliest Level Ever
  else if (MapCheck == 1207) StealthChance = StealthChance * 1488 / 1000; // MAP06 - Stargate
  else if (MapCheck == 1208) StealthChance = StealthChance * 1605 / 1000; // MAP07 - The Desert Temple
  else if (MapCheck == 1209) StealthChance = StealthChance * 1953 / 1000; // MAP08 - The Unholy Cathedral
  else if (MapCheck == 1210) StealthChance = StealthChance * 2372 / 1000; // MAP09 - You Shall Not Pass!
  else if (MapCheck == 1211) StealthChance = StealthChance * 2884 / 1000; // MAP10 - Hell's Vendetta
  else if (MapCheck == 1212) StealthChance = StealthChance * 3488 / 1000; // MAP10B - attedneV s'lleH
  else if (MapCheck == 1214) StealthChance = StealthChance * 1465 / 1000; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
  else if (MapCheck == 1215) StealthChance = StealthChance * 3488 / 1000; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
  else StealthChance = StealthChance * 1000 / 1000; // All other Maps
 }
 else StealthChance = StealthChance * 1000 / 1000;

 //PrintBold(d:StealthChance,s:" - ",s:GetActorClass(0));
 SetResultValue( StealthChance );
}

// Updates information on Stealth-ified Monsters
script "RefreshStealthInfo" (int type)
{
 if (type == 0) // nothing special
 {
  TakeInventory("IsAStealthMonsterRingAttacking", 1); 
  TakeInventory("IsAStealthMonster5000Attacking", 1); 
  TakeInventory("IsAStealthMonster7500Attacking", 1); 
  TakeInventory("IsAStealthMonster8750Attacking", 1); 
  TakeInventory("IsAStealthMonster9375Attacking", 1); 
  TakeInventory("IsAStealthMonsterRingAttackingNV", 1); 
  TakeInventory("IsAStealthMonster5000AttackingNV", 1); 
  TakeInventory("IsAStealthMonster7500AttackingNV", 1); 
  TakeInventory("IsAStealthMonster8750AttackingNV", 1); 
  TakeInventory("IsAStealthMonster9375AttackingNV", 1); 

  if (GetUserVariable(0, "user_isstealth") > 0)
  {
   if (CheckActorInventory(1001,"TheOneRing") > 0) 
   {
    if (PowerupTimer[0] > 0)
    {
     GiveInventory("IsAStealthMonsterRingNV", 1);
     TakeInventory("IsAStealthMonster5000NV", 1); 
     TakeInventory("IsAStealthMonster7500NV", 1); 
     TakeInventory("IsAStealthMonster8750NV", 1); 
     TakeInventory("IsAStealthMonster9375NV", 1); 
    }
    else
    {
     GiveInventory("IsAStealthMonsterRing", 1);
     TakeInventory("IsAStealthMonster5000", 1); 
     TakeInventory("IsAStealthMonster7500", 1); 
     TakeInventory("IsAStealthMonster8750", 1); 
     TakeInventory("IsAStealthMonster9375", 1); 
    }
   }
   else
   {
    if (PowerupTimer[0] > 0)
    {
     TakeInventory("IsAStealthMonsterRingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 0) GiveInventory("IsAStealthMonster5000NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 1) GiveInventory("IsAStealthMonster7500NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 2) GiveInventory("IsAStealthMonster8750NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 3) GiveInventory("IsAStealthMonster9375NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 0) TakeInventory("IsAStealthMonster5000NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 1) TakeInventory("IsAStealthMonster7500NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 2) TakeInventory("IsAStealthMonster8750NV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 3) TakeInventory("IsAStealthMonster9375NV", 1); 
    }
    else
    {
     TakeInventory("IsAStealthMonsterRing", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 0) GiveInventory("IsAStealthMonster5000", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 1) GiveInventory("IsAStealthMonster7500", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 2) GiveInventory("IsAStealthMonster8750", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 3) GiveInventory("IsAStealthMonster9375", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 0) TakeInventory("IsAStealthMonster5000", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 1) TakeInventory("IsAStealthMonster7500", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 2) TakeInventory("IsAStealthMonster8750", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 3) TakeInventory("IsAStealthMonster9375", 1); 
    }
   }   
   SetUserVariable(0, "user_isstealth", 1);
  }
  else
  {
   SetUserVariable(0, "user_isstealth", 0);
   TakeInventory("IsAStealthMonster5000", 1); 
   TakeInventory("IsAStealthMonster7500", 1); 
   TakeInventory("IsAStealthMonster8750", 1); 
   TakeInventory("IsAStealthMonster9375", 1); 
   TakeInventory("IsAStealthMonsterRing", 1);
   TakeInventory("IsAStealthMonster5000NV", 1); 
   TakeInventory("IsAStealthMonster7500NV", 1); 
   TakeInventory("IsAStealthMonster8750NV", 1); 
   TakeInventory("IsAStealthMonster9375NV", 1); 
   TakeInventory("IsAStealthMonsterRingNV", 1);
  }
 }


 if (type == 1) // attacking
 {
  TakeInventory("IsAStealthMonsterRing", 1); 
  TakeInventory("IsAStealthMonster5000", 1); 
  TakeInventory("IsAStealthMonster7500", 1); 
  TakeInventory("IsAStealthMonster8750", 1); 
  TakeInventory("IsAStealthMonster9375", 1); 
  TakeInventory("IsAStealthMonsterRingNV", 1); 
  TakeInventory("IsAStealthMonster5000NV", 1); 
  TakeInventory("IsAStealthMonster7500NV", 1); 
  TakeInventory("IsAStealthMonster8750NV", 1); 
  TakeInventory("IsAStealthMonster9375NV", 1); 

  if (GetUserVariable(0, "user_isstealth") > 0)
  {
   if (CheckActorInventory(1001,"TheOneRing") > 0) 
   {
    if (PowerupTimer[0] > 0)
    {
     GiveInventory("IsAStealthMonsterRingAttackingNV", 1);
     TakeInventory("IsAStealthMonster5000AttackingNV", 1); 
     TakeInventory("IsAStealthMonster7500AttackingNV", 1); 
     TakeInventory("IsAStealthMonster8750AttackingNV", 1); 
     TakeInventory("IsAStealthMonster9375AttackingNV", 1); 
    }
    else
    {
     GiveInventory("IsAStealthMonsterRingAttacking", 1);
     TakeInventory("IsAStealthMonster5000Attacking", 1); 
     TakeInventory("IsAStealthMonster7500Attacking", 1); 
     TakeInventory("IsAStealthMonster8750Attacking", 1); 
     TakeInventory("IsAStealthMonster9375Attacking", 1); 
    }
   }
   else
   {
    if (PowerupTimer[0] > 0)
    {
     TakeInventory("IsAStealthMonsterRingAttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 0) GiveInventory("IsAStealthMonster5000AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 1) GiveInventory("IsAStealthMonster7500AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 2) GiveInventory("IsAStealthMonster8750AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 3) GiveInventory("IsAStealthMonster9375AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 0) TakeInventory("IsAStealthMonster5000AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 1) TakeInventory("IsAStealthMonster7500AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 2) TakeInventory("IsAStealthMonster8750AttackingNV", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 3) TakeInventory("IsAStealthMonster9375AttackingNV", 1); 
    }
    else
    {
     TakeInventory("IsAStealthMonsterRingAttacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 0) GiveInventory("IsAStealthMonster5000Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 1) GiveInventory("IsAStealthMonster7500Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 2) GiveInventory("IsAStealthMonster8750Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") == 3) GiveInventory("IsAStealthMonster9375Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 0) TakeInventory("IsAStealthMonster5000Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 1) TakeInventory("IsAStealthMonster7500Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 2) TakeInventory("IsAStealthMonster8750Attacking", 1); 
     if (GetCVar("dvds_dviistealthlevel") != 3) TakeInventory("IsAStealthMonster9375Attacking", 1); 
    }
   }   
   SetUserVariable(0, "user_isstealth", 1);
  }
  else
  {
   SetUserVariable(0, "user_isstealth", 0);
   TakeInventory("IsAStealthMonster5000Attacking", 1); 
   TakeInventory("IsAStealthMonster7500Attacking", 1); 
   TakeInventory("IsAStealthMonster8750Attacking", 1); 
   TakeInventory("IsAStealthMonster9375Attacking", 1); 
   TakeInventory("IsAStealthMonsterRingAttacking", 1);
   TakeInventory("IsAStealthMonster5000AttackingNV", 1); 
   TakeInventory("IsAStealthMonster7500AttackingNV", 1); 
   TakeInventory("IsAStealthMonster8750AttackingNV", 1); 
   TakeInventory("IsAStealthMonster9375AttackingNV", 1); 
   TakeInventory("IsAStealthMonsterRingAttackingNV", 1);
  }
 }
}

// Checks the gametype for monster spawns to allow or deny specfic enemy evolutions from appearing
script "Monster-CheckModType" (void)
{
 SetResultValue( ModType );
}

// Runs the "Grabbed a Seed of Life/Magic" script
script "GrabLifeManaSeed" (int SeedType, int SeedAmount, int SeedLimitTypeIncrease)
{
 int SkillSeedRuns, SkillSeedRND, OldHP, NewHP, OldMP, NewMP, StatGain1, StatGain2, ArmorHPBonus, PerkFactor;

 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) terminate;

 if (SeedAmount < 1) SeedAmount = 1;

 if (SeedType < 1) SeedAmount = 1;
 if (SeedType > 2) SeedAmount = 2;

 OldHP = MaxHealthTrue;
 OldMP = MaxMana;

 if (SeedType == 1) // Seed of Life
 {
  StatGain1 = MaxHealthTrue / 80;
  if (CharacterClass == 0) StatGain1 += 4;
  if (CharacterClass == 1) StatGain1 += 2;
  if (CharacterClass == 2) StatGain1 += 1;

  SkillSeedRND = random(1,13);

  if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
  if (SkillSeedRND == 2) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 3) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 4) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 5) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 6) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 7) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 8) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 9) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 10) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 11) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 12) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;

  StatGain1 = StatGain1 * SeedAmount;
  StatGain1 = StatGain1 * MiscellaneousVars[87];

  // Flora's Armor Items [up to +45% Max HP gained from Max HP Bonuses]
  if (CharacterClass == 2 && CheckActorInventory(1001,"PearlyCorset")) ArmorHPBonus += 20; // +20%
  if (CharacterClass == 2 && CheckActorInventory(1001,"KissaBra")) ArmorHPBonus += 10; // +10%
  if (CharacterClass == 2 && CheckActorInventory(1001,"BalrogRing")) ArmorHPBonus += 15; // +25%
  ArmorHPBonus += 100;
  StatGain1 = StatGain1 * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset

  PerkFactor = ((MiscellaneousVars[10001] * 500) + (MiscellaneousVars[10002] * 1250)) + 10000;
  StatGain1 = StatGain1 * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.

  PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
  StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"

  if (StatGain1 < 1) StatGain1 = 1;
  MiscellaneousVars[222] += StatGain1;
  MiscellaneousVars[2031] = 105; 

  StatGain2 = GetActorProperty(1001,APROP_HEALTH);
  //GiveInventory("UpgradeStamina", StatGain1);
  SetActorProperty(1001,APROP_HEALTH,(StatGain2+StatGain1));
  MaxHealthTrue += StatGain1;
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
 }

 if (SeedType == 2) // Seed of Magic
 {
  StatGain1 = MaxMana / 80;
  if (CharacterClass == 0) StatGain1 += 1;
  if (CharacterClass == 1) StatGain1 += 2;
  if (CharacterClass == 2) StatGain1 += 4;

  SkillSeedRND = random(1,13);

  if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
  if (SkillSeedRND == 2) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 3) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 4) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 5) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 6) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 7) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 8) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 9) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 10) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 11) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 12) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;

  StatGain1 = StatGain1 * SeedAmount;
  StatGain1 = StatGain1 * MiscellaneousVars[87];

  PerkFactor = ((MiscellaneousVars[10003] * 500) + (MiscellaneousVars[10004] * 1250)) + 10000;
  StatGain1 = StatGain1 * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.

  PerkFactor = (MiscellaneousVars[317] * 1250) + 10000;
  StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"

  if (StatGain1 < 1) StatGain1 = 1;
  MiscellaneousVars[223] += StatGain1;
  MiscellaneousVars[2032] = 105; 

  MaxMana += StatGain1;
  CurrentMana += StatGain1;
 }

 NewHP = MaxHealthTrue;
 NewMP = MaxMana;

 if (SeedType == 1) 
 {
  PrintBold
  (
   s:"You've Found a Seed of Life!\n\n",
   s:"HP/Health: ",d:OldHP,s:" --> ",d:NewHP
  );
 }

 if (SeedType == 2) 
 {
  PrintBold
  (
   s:"You've Found a Seed of Magic!\n\n",
   s:"MP/Mana: ",d:OldMP,s:" --> ",d:NewMP
  );
 }

}

// Runs the "Grabbed a Seed of [Bleh]" script
script "GrabSeedOther" (int SeedType, int SeedAmount, int SeedLimitTypeIncrease)
{
 int SkillSeedRuns, MaxSkillSeedRuns, SkillSeedRND, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE, OldAeonPts, NewAeonPts;

 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) terminate;

 if (SeedAmount < 1) SeedAmount = 1;

 // "0" is for non-dropped or map-placed seeds as to not impose a limit on those
 if (SeedLimitTypeIncrease == 1) MiscellaneousVars[30] += 1; // "1" is Normal Seeds
 if (SeedLimitTypeIncrease == 2) MiscellaneousVars[37] += 1; // "2" is Skill Seeds
 if (SeedLimitTypeIncrease == 3) MiscellaneousVars[27] += 1; // "3" is Fyggs


 if (SeedType < 0) SeedAmount = 0;
 if (SeedType > 7) SeedAmount = 0;

 OldAeonPts = MiscellaneousVars[25];
 OldAGL = MiscellaneousVars[31];
 OldDEF = MiscellaneousVars[32];
 OldDFT = MiscellaneousVars[33];
 OldSOR = MiscellaneousVars[34];
 OldSTR = MiscellaneousVars[35];
 OldTHE = MiscellaneousVars[36];

 if (SeedType == 0) // Seed of Skill [special seed, 4+ AeonPts ]
 {
  SeedAmount = 4;
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  MiscellaneousVars[25] += SeedAmount;
 }

 if (SeedType == 1) // Seed of Agility [Speed/Movement]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[31] < 512) MiscellaneousVars[31] += SeedAmount;
 }

 if (SeedType == 2) // Seed of Defense [Overall Resistance]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[32] < 512) MiscellaneousVars[32] += SeedAmount;
 }

 if (SeedType == 3) // Seed of Deftness [EXP Gain %]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[33] < 512) MiscellaneousVars[33] += SeedAmount;
 }

 if (SeedType == 4) // Seed of Sorcery [Magical Attack]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[34] < 512) MiscellaneousVars[34] += SeedAmount;
 }

 if (SeedType == 5) // Seed of Strength [Overall Attack]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[35] < 512) MiscellaneousVars[35] += SeedAmount;
 }

 if (SeedType == 6) // Seed of Therapeusis [Magical Resistance]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[36] < 512) MiscellaneousVars[36] += SeedAmount;
 }

 if (SeedType == 7) // Fygg (extremely rare) [all stats +16]
 {
  SeedAmount = SeedAmount * 16;
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[31] < 512) MiscellaneousVars[31] += SeedAmount;
  if (MiscellaneousVars[32] < 512) MiscellaneousVars[32] += SeedAmount;
  if (MiscellaneousVars[33] < 512) MiscellaneousVars[33] += SeedAmount;
  if (MiscellaneousVars[34] < 512) MiscellaneousVars[34] += SeedAmount;
  if (MiscellaneousVars[35] < 512) MiscellaneousVars[35] += SeedAmount;
  if (MiscellaneousVars[36] < 512) MiscellaneousVars[36] += SeedAmount;
 }

 if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
 if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
 if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
 if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
 if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
 if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
 NewAeonPts = MiscellaneousVars[25];
 NewAGL = MiscellaneousVars[31];
 NewDEF = MiscellaneousVars[32];
 NewDFT = MiscellaneousVars[33];
 NewSOR = MiscellaneousVars[34];
 NewSTR = MiscellaneousVars[35];
 NewTHE = MiscellaneousVars[36];

 if (NewAeonPts-OldAeonPts > 0)
 {
  MiscellaneousVars[224] += NewAeonPts - OldAeonPts; 
  MiscellaneousVars[2033] = 105; 
 }
 if (NewAGL-OldAGL > 0)
 {
  MiscellaneousVars[225] += NewAGL - OldAGL; 
  MiscellaneousVars[2034] = 105; 
 }
 if (NewDEF-OldDEF > 0)
 {
  MiscellaneousVars[226] += NewDEF - OldDEF; 
  MiscellaneousVars[2035] = 105; 
 }
 if (NewDFT-OldDFT > 0)
 {
  MiscellaneousVars[227] += NewDFT - OldDFT; 
  MiscellaneousVars[2036] = 105; 
 }
 if (NewSOR-OldSOR > 0)
 {
  MiscellaneousVars[228] += NewSOR - OldSOR; 
  MiscellaneousVars[2037] = 105; 
 }
 if (NewSTR-OldSTR > 0)
 {
  MiscellaneousVars[229] += NewSTR - OldSTR; 
  MiscellaneousVars[2038] = 105; 
 }
 if (NewTHE-OldTHE > 0)
 {
  MiscellaneousVars[230] += NewTHE - OldTHE; 
  MiscellaneousVars[2039] = 105; 
 }

 if (SeedType == 0) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Skill!\n\n",
   s:"AeonPts: ",d:OldAeonPts,s:" --> ",d:NewAeonPts
  );
 }

 if (SeedType == 1) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Agility!\n\n",
   s:"Agility: ",d:OldAGL,s:" --> ",d:NewAGL
  );
 }

 if (SeedType == 2) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Defense!\n\n",
   s:"Defense: ",d:OldDEF,s:" --> ",d:NewDEF
  );
 }

 if (SeedType == 3) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Deftness!\n\n",
   s:"Deftness: ",d:OldDFT,s:" --> ",d:NewDFT
  );
 }

 if (SeedType == 4) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Sorcery!\n\n",
   s:"Sorcery: ",d:OldSOR,s:" --> ",d:NewSOR
  );
 }

 if (SeedType == 5) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Strength!\n\n",
   s:"Strength: ",d:OldSTR,s:" --> ",d:NewSTR
  );
 }

 if (SeedType == 6) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Therapeusis!\n\n",
   s:"Therapeusis: ",d:OldTHE,s:" --> ",d:NewTHE
  );
 }

 if (SeedType == 7) 
 {
  PrintBold
  (
   s:"ZOMG You've Ate a Fygg!!!!\n\n",
   s:"Agility: ",d:OldAGL,s:" --> ",d:NewAGL,
   s:"\nDefense: ",d:OldDEF,s:" --> ",d:NewDEF,
   s:"\nDeftness: ",d:OldDFT,s:" --> ",d:NewDFT,
   s:"\nSorcery: ",d:OldSOR,s:" --> ",d:NewSOR,
   s:"\nStrength: ",d:OldSTR,s:" --> ",d:NewSTR,
   s:"\nTherapeusis: ",d:OldTHE,s:" --> ",d:NewTHE
  );
 }

}

//
script "CalculateSpellBaseAngles" (void)
{
 int value;

 value = -1*((GetActorPitch(1001)) / 136);
 // if (value > 64) value = 64;
 // if (value < -63) value = -63;
 // value = -1*((GetActorPitch(1001)) >> 8);
 // value = -1*((GetActorPitch(1001)) * 64 >> 16);
 // Print(d:value); 
 SetResultValue(value);
}

// Checks to Remove Seeds on the Map if too many have been picked up already.
script "SeedLimitChecker" (int SeedType)
{
 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) Thing_Remove(0);
 if (SeedType == 0 && MiscellaneousVars[37] >= MiscellaneousVars[28]) Thing_Remove(0); // Seed of Skill
 if (SeedType == 1 && MiscellaneousVars[30] >= MiscellaneousVars[29]) Thing_Remove(0); // Seed of Agility/Defense/Deftness/Sorcery/Strength/Therapeusis
 if (SeedType == 2 && MiscellaneousVars[27] >= MiscellaneousVars[26]) Thing_Remove(0); // Fygg Fruit
 // SeedType == 3 is a 'blank' type for other Seed type items that aren't covered above, so it will run the script checker
}

// Checks Seed amounts and will randomize dropped seeds.
script "SeedDrop" (int type, int OldRand0, int Forced)
{
 int Rand0, Rand1, Rand2, PX, PY, PZ, FullOnSkill, FullOnSeeds, spawnedaitem, SeedDropChance;

 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) terminate;

 if (ActivatorTID() == 0) Thing_ChangeTID(0,1537);
 PX = GetActorX(1537);
 PY = GetActorY(1537);
 PZ = GetActorZ(1537);
 
 if (Forced == 0)
 {
  if (MiscellaneousVars[37] >= MiscellaneousVars[28]) FullOnSkill = 1;
  if (MiscellaneousVars[30] >= MiscellaneousVars[29]) FullOnSeeds = 1;
 }

 // Spawn Occurance Rate
 if (type == 2)
 {
  Rand0 = 1;
 }
 else
 if (type == 1)
 {
  Rand0 = OldRand0;
 }
 else
 {
  if (MiscellaneousVars[27] < MiscellaneousVars[26])
  {
   // "MiscellaneousVars[6]" is a randomly picked ID number that DV-DS will pick at the Very-First-Run, from (1 to "MiscellaneousVars[7]")
   if (random(1,MiscellaneousVars[7]) == MiscellaneousVars[6])
   {
    if (Forced == 1) SpawnForced("FyggForced",PX,PY,PZ,0,0); else SpawnForced("Fygg",PX,PY,PZ,0,0); 
    Thing_Remove(1537);
    terminate;
   }
  }

  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,72); // 92
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,81); // 104
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,91); // 116
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,100); // 128
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,119); // 152
 }

 SeedDropChance = 1 + (MiscellaneousVars[33] / 32);

 while (spawnedaitem == 0)
 {
  if (Rand0 <= SeedDropChance)
  {
   if (FullOnSkill == 1)
   {
    if (FullOnSeeds == 1) Rand1 = random(31,40);
    else Rand1 = random(1,40);
   }
   else
   {
    if (FullOnSeeds == 1) Rand1 = random(31,41);
    else Rand1 = random(1,41);
   }

   if (Rand1 > 0 && Rand1 < 6) // Seed of Agility
   {
    if (Forced == 1) SpawnForced("SeedOfAgilityForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfAgility",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 5 && Rand1 < 11) // Seed of Defense
   {
    if (Forced == 1) SpawnForced("SeedOfDefenseForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfDefense",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 10 && Rand1 < 16) // Seed of Deftness
   {
    if (Forced == 1) SpawnForced("SeedOfDeftnessForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfDeftness",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 15 && Rand1 < 21) // Seed of Sorcery
   {
    if (Forced == 1) SpawnForced("SeedOfSorceryForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfSorcery",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 20 && Rand1 < 26)// Seed of Strength
   {
    if (Forced == 1) SpawnForced("SeedOfStrengthForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfStrength",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 25 && Rand1 < 31) // Seed of Therapeusis
   {
    if (Forced == 1) SpawnForced("SeedOfTherapeusisForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfTherapeusis",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 30 && Rand1 < 36) // Seed of Life
   {
    SpawnForced("SeedOfLife",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 35 && Rand1 < 41) // Seed of Magic
   {
    SpawnForced("SeedOfMagic",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 == 41) // Seed of Skill
   {
    if (Forced == 1) SpawnForced("SeedOfSkillForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfSkill",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
  }
  else // No spawn
  {
   Thing_Remove(1537);
   terminate;
  }
 }

}

// Overall Aeon Point Handling 
script "AeonPointKey" (int type) 
{
 int AeonIncrease = 1;
 if (MiscellaneousVars[31] > 511 && MiscellaneousVars[32] > 511 && MiscellaneousVars[33] > 511 && MiscellaneousVars[34] > 511 && MiscellaneousVars[35] > 511 && MiscellaneousVars[36] > 511) terminate;

 // Move Aeon Point Cursor DOWN
 if (type == 0)
 {
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= MiscellaneousVars[197])
  {
   MiscellaneousVars[24] += 1;
   if (MiscellaneousVars[24] > 6) MiscellaneousVars[24] = 1;
  }
  else
  {
   if (MiscellaneousVars[24] != 0) MiscellaneousVars[24] = 0;
  }
 }

 // Move Aeon Point Cursor UP
 if (type == 1)
 {
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= MiscellaneousVars[197])
  {
   MiscellaneousVars[24] -= 1;
   if (MiscellaneousVars[24] < 1) MiscellaneousVars[24] = 6;
  }
  else
  {
   if (MiscellaneousVars[24] != 0) MiscellaneousVars[24] = 0;
  }
 }

 // Use an Aeon Point
 if (type == 2)
 {
  AeonIncrease *= MiscellaneousVars[86];
 
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= MiscellaneousVars[197])
  {
   if (MiscellaneousVars[24] == 1) { if (MiscellaneousVars[31] < 512) { MiscellaneousVars[31] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Agility
   if (MiscellaneousVars[24] == 2) { if (MiscellaneousVars[32] < 512) { MiscellaneousVars[32] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Defense
   if (MiscellaneousVars[24] == 3) { if (MiscellaneousVars[33] < 512) { MiscellaneousVars[33] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Deftness
   if (MiscellaneousVars[24] == 4) { if (MiscellaneousVars[34] < 512) { MiscellaneousVars[34] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Sorcery
   if (MiscellaneousVars[24] == 5) { if (MiscellaneousVars[35] < 512) { MiscellaneousVars[35] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Strength
   if (MiscellaneousVars[24] == 6) { if (MiscellaneousVars[36] < 512) { MiscellaneousVars[36] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Therapeusis
 
   if (PlayerLevel < MiscellaneousVars[197]) MiscellaneousVars[24] = 0;
   if (MiscellaneousVars[25] < 1) MiscellaneousVars[24] = 0;
  }
 }
}

// Sceptre Twirl Mana/MP Check [to "balance" sceptre alt-fire cheapness >.>]
script "SceptreTwirlManaCheck" (int attacktype) 
{
 int C1, C2, C3;
 // "16" is the sceptre timer for mana consumption
 // "17" is the sceptre timer limit for mana consumption
 MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 0) MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 1) MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 2) MiscellaneousVars[17] = 11;
 if (SceptreActualLevel == 3) MiscellaneousVars[17] = 11;
 if (SceptreActualLevel == 4) MiscellaneousVars[17] = 12;
 if (SceptreActualLevel == 5) MiscellaneousVars[17] = 12;
 if (SceptreActualLevel == 6) MiscellaneousVars[17] = 13;
 if (SceptreActualLevel == 7) MiscellaneousVars[17] = 14;
 if (SceptreActualLevel == 8) MiscellaneousVars[17] = 14;
 if (SceptreActualLevel == 9) MiscellaneousVars[17] = 15;
 if (SceptreActualLevel == 10) MiscellaneousVars[17] = 16;
 if (SceptreActualLevel == 11) MiscellaneousVars[17] = 16;
 if (SceptreActualLevel == 12) MiscellaneousVars[17] = 17;
 if (SceptreActualLevel == 13) MiscellaneousVars[17] = 18;
 if (SceptreActualLevel == 14) MiscellaneousVars[17] = 19;
 if (SceptreActualLevel == 15) MiscellaneousVars[17] = 20;
 if (SceptreActualLevel == 16) MiscellaneousVars[17] = 22;

 //Print(d:attacktype);
 if (attacktype == 1)
 {
  if (SceptreActualLevel <= 4 && CurrentMana >= 5) { CurrentMana -= 5; C2++; }
  if (SceptreActualLevel > 4 && SceptreActualLevel <= 8 && CurrentMana >= 4 ) { CurrentMana -= 4; C2++; }
  if (SceptreActualLevel > 8 && SceptreActualLevel <= 12 && CurrentMana >= 3 ) { CurrentMana -= 3; C2++; }
  if (SceptreActualLevel > 12 && SceptreActualLevel <= 16 && CurrentMana >= 2 ) { CurrentMana -= 2; C2++; }
  if (SceptreActualLevel == 16 && CurrentMana >= 1) { CurrentMana -= 1; C2++; }
  if (CurrentMana < 0) CurrentMana = 0;
  MiscellaneousVars[243] = CurrentMana;
  MiscellaneousVars[238] = CurrentMana;
 }
 else
 {
  if (CurrentMana > 0) C2++;
  if (random(1,16) == 1) MiscellaneousVars[16] += 2; else MiscellaneousVars[16] += 1;
  //Print(d:MiscellaneousVars[16]);
  if (MiscellaneousVars[16] >= MiscellaneousVars[17])
  {
   C3 = random(1,2);
   if (SceptreActualLevel < 8 ) CurrentMana -= 2;
   if (SceptreActualLevel > 8 && SceptreActualLevel < 16) CurrentMana -= C3; C2++;
   if (SceptreActualLevel == 16) CurrentMana -= 1; C2++;
   if (CurrentMana < 0) CurrentMana = 0;
   MiscellaneousVars[16] -= MiscellaneousVars[17];
   MiscellaneousVars[243] = CurrentMana;
   MiscellaneousVars[238] = CurrentMana;
  }
 }

 //Print(d:C2);
 if (C2 > 0)
 {
  SetResultValue(1);
 }
 else 
 {
  MiscellaneousVars[16] = 0;
  SetResultValue(0); 
 }
}

// For Increasing the Strength Level of a Hellcore-type weapon when picking it up
script "IncreaseHellcoreLevel" (int HellcoreWeapon)
{
 if (HellcoreWeapon == 1) MiscellaneousVars[96] += 1;
 if (MiscellaneousVars[96] > 8) MiscellaneousVars[96] = 8;

 if (HellcoreWeapon == 2) MiscellaneousVars[97] += 1;
 if (MiscellaneousVars[97] > 8) MiscellaneousVars[97] = 8;

 if (HellcoreWeapon == 3) MiscellaneousVars[98] += 1;
 if (MiscellaneousVars[98] > 8) MiscellaneousVars[98] = 8;

 if (HellcoreWeapon == 4) MiscellaneousVars[99] += 1;
 if (MiscellaneousVars[99] > 8) MiscellaneousVars[99] = 8;

 if (HellcoreWeapon == 5) MiscellaneousVars[100] += 1;
 if (MiscellaneousVars[100] > 8) MiscellaneousVars[100] = 8;

 if (HellcoreWeapon == 6) MiscellaneousVars[101] += 1;
 if (MiscellaneousVars[101] > 8) MiscellaneousVars[101] = 8;

 if (HellcoreWeapon == 7) MiscellaneousVars[102] += 1;
 if (MiscellaneousVars[102] > 8) MiscellaneousVars[102] = 8;

 if (HellcoreWeapon == 8) MiscellaneousVars[103] += 1;
 if (MiscellaneousVars[103] > 8) MiscellaneousVars[103] = 8;

 if (HellcoreWeapon == 9) MiscellaneousVars[104] += 1;
 if (MiscellaneousVars[104] > 8) MiscellaneousVars[104] = 8;

 if (HellcoreWeapon == 10) MiscellaneousVars[105] += 1;
 if (MiscellaneousVars[105] > 8) MiscellaneousVars[105] = 8;

 if (HellcoreWeapon == 11) MiscellaneousVars[106] += 1;
 if (MiscellaneousVars[106] > 8) MiscellaneousVars[106] = 8;

 if (HellcoreWeapon == 12) MiscellaneousVars[107] += 1;
 if (MiscellaneousVars[107] > 8) MiscellaneousVars[107] = 8;

 if (HellcoreWeapon == 13) MiscellaneousVars[108] += 1;
 if (MiscellaneousVars[108] > 8) MiscellaneousVars[108] = 8;

 if (HellcoreWeapon == 14) MiscellaneousVars[109] += 1;
 if (MiscellaneousVars[109] > 8) MiscellaneousVars[109] = 8;

 if (HellcoreWeapon == 15) MiscellaneousVars[110] += 1;
 if (MiscellaneousVars[110] > 8) MiscellaneousVars[110] = 8;

 if (HellcoreWeapon == 16) MiscellaneousVars[111] += 1;
 if (MiscellaneousVars[111] > 8) MiscellaneousVars[111] = 8;

 if (HellcoreWeapon == 17) MiscellaneousVars[112] += 1;
 if (MiscellaneousVars[112] > 8) MiscellaneousVars[112] = 8;
}

// Check if to perform Sceptre's downswing alternate attack while falling or it's spinning alternate while grounded.
script "CheckSceptreAltFire" (void)
{
 if (MiscellaneousVars[2500] != 0) terminate;
 if (PowerupTimer[20] > 0) terminate;
 int buttons = GetPlayerInput(0, INPUT_BUTTONS);

 //PrintBold(d:GetActorVelZ(1001));
 if (GetActorVelZ(1001) < 0)
 {
  if (buttons & BT_JUMP && PlayerLevel >= 13 && SceptreActualLevel >= 4)
  {
   SetResultValue(1);
  }
  else
  {
   if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && MiscellaneousVars[244] > 0)
   {
    SetResultValue(2);
   }
   else
   {
    SetResultValue(0);
   }
  }
 }
 else
 {
  if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && MiscellaneousVars[244] > 0)
  {
   SetResultValue(2);
  }
  else
  {
   SetResultValue(0);
  }
 }
}

// Returns Sceptre Damage [including w/ berserk/other amplication items]
script "GetSceptreDamage" (int attacktype, int attacklevel, int shockwave)
{
 int damage;
 int strengthcounter;
 int sceptrestrbase;
 int sceptrestrmin;
 int sceptrestrmax;

 SetActivator(1001);
 str weapon = GetWeapon();
 SetActivator(0);

 if (SceptreActualLevel <= 0) damage = random(275,325); // Base Damage Range
 if (SceptreActualLevel == 1) damage = random(280,330); // +5 Damage Range
 if (SceptreActualLevel == 2) damage = random(290,340); // +10 Damage Range
 if (SceptreActualLevel == 3) damage = random(320,370); // +30 Damage Range
 if (SceptreActualLevel == 4) damage = random(340,390); // +20 Damage Range
 if (SceptreActualLevel == 5) damage = random(365,415); // +25 Damage Range
 if (SceptreActualLevel == 6) damage = random(425,475); // +60 Damage Range
 if (SceptreActualLevel == 7) damage = random(425,475); // +0 Damage Range
 if (SceptreActualLevel == 8) damage = random(545,595); // +120 Damage Range
 if (SceptreActualLevel == 9) damage = random(590,640); // +45 Damage Range
 if (SceptreActualLevel == 10) damage = random(640,690); // +50 Damage Range
 if (SceptreActualLevel == 11) damage = random(750,800); // +110 Damage Range
 if (SceptreActualLevel == 12) damage = random(810,860); // +60 Damage Range
 if (SceptreActualLevel == 13) damage = random(875,925); // +65 Damage Range
 if (SceptreActualLevel == 14) damage = random(1015,1065); // +140 Damage Range
 if (SceptreActualLevel == 15) damage = random(1015,1065); // +0 Damage Range
 if (SceptreActualLevel >= 16) damage = random(1255,1305); // +240 Damage Range

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0)
 {
   PrintBold(s:"BaseDmg: ",d:damage);
 }


 // Strength Stat Check
 for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
 {
  sceptrestrbase = ((SceptreActualLevel * (4 + (MiscellaneousVars[35] / 32))) + (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64)))));
  sceptrestrmin = sceptrestrbase - (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64))));
  sceptrestrmax = sceptrestrbase + (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64)))); 

  if (GetCVar("dvdsdebug_showmeleeinformation") > 0)
  {
   PrintBold(s:"StrBase: ",d:sceptrestrbase,
             s:"\nStrMin: ",d:sceptrestrmin,
             s:"\nStrMax: ",d:sceptrestrmax);
  }

  damage += random(sceptrestrmin,sceptrestrmax);
 }

 if (attacktype == 1) damage = damage * 5 / 2; // If performing the Aireal Attack
 if (attacktype == 2)
 {
  if (attacklevel < 0)
  {
   if (SceptreActualLevel <= 0) attacklevel = 0;
   if (SceptreActualLevel == 1) attacklevel = 0;
   if (SceptreActualLevel == 2) attacklevel = 0;
   if (SceptreActualLevel == 3) attacklevel = 0;
   if (SceptreActualLevel == 4) attacklevel = 0;
   if (SceptreActualLevel == 5) attacklevel = 1;
   if (SceptreActualLevel == 6) attacklevel = 1;
   if (SceptreActualLevel == 7) attacklevel = 1;
   if (SceptreActualLevel == 8) attacklevel = 1;
   if (SceptreActualLevel == 9) attacklevel = 1;
   if (SceptreActualLevel == 10) attacklevel = 2;
   if (SceptreActualLevel == 11) attacklevel = 2;
   if (SceptreActualLevel == 12) attacklevel = 2;
   if (SceptreActualLevel == 13) attacklevel = 2;
   if (SceptreActualLevel == 14) attacklevel = 2;
   if (SceptreActualLevel == 15) attacklevel = 3;
   if (SceptreActualLevel >= 16) attacklevel = 3;
  }

  if (attacklevel == 0) damage = damage / 2; // If performing the Spinning Attack [50%]
  else if (attacklevel == 1) damage = damage * 3 / 4; // If performing the Spinning Attack [75%]
  else if (attacklevel == 2) damage = damage * 7 / 8; // If performing the Spinning Attack [87.5%]
  else if (attacklevel == 3) damage = damage * 15 / 16; // If performing the Spinning Attack [93.25%]

  damage = damage / 4;
 }
 if (GetCVar("dvdsdebug_showmeleeinformation") > 0)
 {
   PrintBold(s:"BaseDmg: ",d:damage);
 }

 // Berserk Check
 if (CheckActorInventory(1001,"PowerStrength") > 0) damage = damage * 10;

 if (shockwave == 1) damage = damage / 6;

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"MeleeDmg: (",s:weapon,s:") ",d:damage);
 SetResultValue(damage);
}

script "GetMiscellaneousVar" (int index)
{
 SetResultValue(MiscellaneousVars[index]);
}

script "GetPlayerLevel" (void)
{
 SetResultValue(PlayerLevel);
}

script "GetSceptreLevel" (void)
{
 SetResultValue(SceptreActualLevel);
}

script "GetSceptreRange" (int attacktype)
{
 int range;
 if (attacktype == 0) // Normal Swing
 {
  if (SceptreActualLevel <= 0) range = 104;
  if (SceptreActualLevel == 1) range = 106; // +2
  if (SceptreActualLevel == 2) range = 108; // +2
  if (SceptreActualLevel == 3) range = 110; // +2
  if (SceptreActualLevel == 4) range = 112; // +2
  if (SceptreActualLevel == 5) range = 116; // +4
  if (SceptreActualLevel == 6) range = 118; // +2
  if (SceptreActualLevel == 7) range = 122; // +4
  if (SceptreActualLevel == 8) range = 128; // +6
  if (SceptreActualLevel == 9) range = 132; // +2
  if (SceptreActualLevel == 10) range = 134; // +2
  if (SceptreActualLevel == 11) range = 136; // +2
  if (SceptreActualLevel == 12) range = 138; // +2
  if (SceptreActualLevel == 13) range = 142; // +4
  if (SceptreActualLevel == 14) range = 144; // +2
  if (SceptreActualLevel == 15) range = 148; // +4
  if (SceptreActualLevel >= 16) range = 154; // +6
 }
 else
 if (attacktype == 1) // Aireal Attack
 {
  if (SceptreActualLevel <= 0) range = 104;
  if (SceptreActualLevel == 1) range = 106; // +2
  if (SceptreActualLevel == 2) range = 108; // +2
  if (SceptreActualLevel == 3) range = 110; // +2
  if (SceptreActualLevel == 4) range = 112; // +2
  if (SceptreActualLevel == 5) range = 116; // +4
  if (SceptreActualLevel == 6) range = 118; // +2
  if (SceptreActualLevel == 7) range = 122; // +4
  if (SceptreActualLevel == 8) range = 128; // +6
  if (SceptreActualLevel == 9) range = 132; // +2
  if (SceptreActualLevel == 10) range = 134; // +2
  if (SceptreActualLevel == 11) range = 136; // +2
  if (SceptreActualLevel == 12) range = 138; // +2
  if (SceptreActualLevel == 13) range = 142; // +4
  if (SceptreActualLevel == 14) range = 144; // +2
  if (SceptreActualLevel == 15) range = 148; // +4
  if (SceptreActualLevel >= 16) range = 154; // +6
 }
 else
 if (attacktype == 2) // Spinning Attack
 {
  if (SceptreActualLevel <= 0) range = 168;
  if (SceptreActualLevel == 1) range = 173; // +5
  if (SceptreActualLevel == 2) range = 178; // +5
  if (SceptreActualLevel == 3) range = 182; // +4
  if (SceptreActualLevel == 4) range = 187; // +5
  if (SceptreActualLevel == 5) range = 196; // +9
  if (SceptreActualLevel == 6) range = 201; // +5
  if (SceptreActualLevel == 7) range = 209; // +8
  if (SceptreActualLevel == 8) range = 222; // +13
  if (SceptreActualLevel == 9) range = 230; // +8
  if (SceptreActualLevel == 10) range = 236; // +6
  if (SceptreActualLevel == 11) range = 241; // +5
  if (SceptreActualLevel == 12) range = 247; // +6
  if (SceptreActualLevel == 13) range = 256; // +9
  if (SceptreActualLevel == 14) range = 262; // +6
  if (SceptreActualLevel == 15) range = 271; // +9
  if (SceptreActualLevel >= 16) range = 288; // +17
 }
 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"MeleeRange: ",d:Range);
 SetResultValue(Range);
}

script "MeleeImpactRadius" (int attacktype)
{
 int radius;
 if (attacktype == 0) // Sceptre [Normal]
 {
  if (SceptreActualLevel <= 0) radius = 80 + (MiscellaneousVars[35] * 16 / 16);
  if (SceptreActualLevel == 1) radius = 85 + (MiscellaneousVars[35] * 17 / 16);
  if (SceptreActualLevel == 2) radius = 90 + (MiscellaneousVars[35] * 18 / 16);
  if (SceptreActualLevel == 3) radius = 95 + (MiscellaneousVars[35] * 19 / 16);
  if (SceptreActualLevel == 4) radius = 100 + (MiscellaneousVars[35] * 20 / 16);
  if (SceptreActualLevel == 5) radius = 105 + (MiscellaneousVars[35] * 21 / 16);
  if (SceptreActualLevel == 6) radius = 110 + (MiscellaneousVars[35] * 22 / 16);
  if (SceptreActualLevel == 7) radius = 115 + (MiscellaneousVars[35] * 23 / 16);
  if (SceptreActualLevel == 8) radius = 120 + (MiscellaneousVars[35] * 24 / 16);
  if (SceptreActualLevel == 9) radius = 125 + (MiscellaneousVars[35] * 25 / 16);
  if (SceptreActualLevel == 10) radius = 130 + (MiscellaneousVars[35] * 26 / 16);
  if (SceptreActualLevel == 11) radius = 135 + (MiscellaneousVars[35] * 27 / 16);
  if (SceptreActualLevel == 12) radius = 140 + (MiscellaneousVars[35] * 28 / 16);
  if (SceptreActualLevel == 13) radius = 145 + (MiscellaneousVars[35] * 29 / 16);
  if (SceptreActualLevel == 14) radius = 150 + (MiscellaneousVars[35] * 30 / 16);
  if (SceptreActualLevel == 15) radius = 155 + (MiscellaneousVars[35] * 31 / 16);
  if (SceptreActualLevel >= 16) radius = 160 + (MiscellaneousVars[35] * 32 / 16);
 }
 else
 if (attacktype == 1) // Sceptre [Aireal]
 {
 }
 else
 if (attacktype == 2) // Sceptre [Spinning]
 {
  if (SceptreActualLevel <= 0) radius = 20 + (MiscellaneousVars[35] * 333 / 1000);
  if (SceptreActualLevel == 1) radius = 21 + (MiscellaneousVars[35] * 354 / 1000);
  if (SceptreActualLevel == 2) radius = 23 + (MiscellaneousVars[35] * 375 / 1000);
  if (SceptreActualLevel == 3) radius = 24 + (MiscellaneousVars[35] * 395 / 1000);
  if (SceptreActualLevel == 4) radius = 25 + (MiscellaneousVars[35] * 416 / 1000);
  if (SceptreActualLevel == 5) radius = 26 + (MiscellaneousVars[35] * 437 / 1000);
  if (SceptreActualLevel == 6) radius = 28 + (MiscellaneousVars[35] * 458 / 1000);
  if (SceptreActualLevel == 7) radius = 29 + (MiscellaneousVars[35] * 478 / 1000);
  if (SceptreActualLevel == 8) radius = 30 + (MiscellaneousVars[35] * 500 / 1000);
  if (SceptreActualLevel == 9) radius = 31 + (MiscellaneousVars[35] * 520 / 1000);
  if (SceptreActualLevel == 10) radius = 33 + (MiscellaneousVars[35] * 541 / 1000);
  if (SceptreActualLevel == 11) radius = 34 + (MiscellaneousVars[35] * 562 / 1000);
  if (SceptreActualLevel == 12) radius = 35 + (MiscellaneousVars[35] * 583 / 1000);
  if (SceptreActualLevel == 13) radius = 36 + (MiscellaneousVars[35] * 604 / 1000);
  if (SceptreActualLevel == 14) radius = 38 + (MiscellaneousVars[35] * 624 / 1000);
  if (SceptreActualLevel == 15) radius = 39 + (MiscellaneousVars[35] * 645 / 1000);
  if (SceptreActualLevel >= 16) radius = 40 + (MiscellaneousVars[35] * 666 / 1000);
 }
 else
 if (attacktype == 3) // Punch [unarmed] (normal)
 {
  radius = 16 + (MiscellaneousVars[35] / 8);
 }
 else
 if (attacktype == 4) // Punch [unarmed] (alt-fire)
 {
 }
 else
 if (attacktype == 5) // Punch [w/ Gauntlets] (normal)
 {
  radius = 40 + (MiscellaneousVars[35] / 3);
 }
 else
 if (attacktype == 6) // Punch [w/ Gauntlets] (alt-fire)
 {
  radius = 64 + (MiscellaneousVars[35] / 2);
 }
 if (CharacterClass == 0) radius = radius * 3 / 2;
 if (CharacterClass == 1) radius = radius * 5 / 4;

 if (PowerupTimer[7] > 0) radius = radius * 6 / 5; // 1.2x Radius [Divine Avatar]
 if (CheckActorInventory(1001,"PowerStrength") > 0) radius = radius * 7 / 4; // 1.75x Radius [Berserk]

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"EXPLRadius: ",d:radius);
 SetResultValue(radius);
}

// Quake tremor effects
script "QuakeMeleeIntensity" (int attacktype)
{
 int intensity;
 if (attacktype == 0) // Sceptre [Normal]
 {
  if (SceptreActualLevel <= 0) intensity = 1;
  if (SceptreActualLevel == 1) intensity = 1;
  if (SceptreActualLevel == 2) intensity = 1;
  if (SceptreActualLevel == 3) intensity = 1;
  if (SceptreActualLevel == 4) intensity = 1;
  if (SceptreActualLevel == 5) intensity = 1;
  if (SceptreActualLevel == 6) intensity = 1;
  if (SceptreActualLevel == 7) intensity = 1;
  if (SceptreActualLevel == 8) intensity = 2;
  if (SceptreActualLevel == 9) intensity = 2;
  if (SceptreActualLevel == 10) intensity = 2;
  if (SceptreActualLevel == 11) intensity = 2;
  if (SceptreActualLevel == 12) intensity = 2;
  if (SceptreActualLevel == 13) intensity = 2;
  if (SceptreActualLevel == 14) intensity = 2;
  if (SceptreActualLevel == 15) intensity = 2;
  if (SceptreActualLevel >= 16) intensity = 3;
  intensity = intensity + (MiscellaneousVars[35] / 12);
 }
 else
 if (attacktype == 1) // Sceptre [Aireal]
 {
 }
 else
 if (attacktype == 2) // Sceptre [Spinning]
 {
  if (SceptreActualLevel <= 0) intensity = 0;
  if (SceptreActualLevel == 1) intensity = 0;
  if (SceptreActualLevel == 2) intensity = 0;
  if (SceptreActualLevel == 3) intensity = 0;
  if (SceptreActualLevel == 4) intensity = 0;
  if (SceptreActualLevel == 5) intensity = 0;
  if (SceptreActualLevel == 6) intensity = 0;
  if (SceptreActualLevel == 7) intensity = 0;
  if (SceptreActualLevel == 8) intensity = 0;
  if (SceptreActualLevel == 9) intensity = 0;
  if (SceptreActualLevel == 10) intensity = 0;
  if (SceptreActualLevel == 11) intensity = 0;
  if (SceptreActualLevel == 12) intensity = 0;
  if (SceptreActualLevel == 13) intensity = 0;
  if (SceptreActualLevel == 14) intensity = 0;
  if (SceptreActualLevel == 15) intensity = 0;
  if (SceptreActualLevel >= 16) intensity = 0;
  intensity = intensity + (MiscellaneousVars[35] / 32);
 }
 else
 if (attacktype == 3) // Punch [unarmed] (normal)
 {
  intensity = 0 + (MiscellaneousVars[35] / 32);
 }
 else
 if (attacktype == 4) // Punch [unarmed] (alt-fire)
 {
 }
 else
 if (attacktype == 5) // Punch [w/ Gauntlets] (normal)
 {
  intensity = 1 + (MiscellaneousVars[35] / 12);
 }
 else
 if (attacktype == 6) // Punch [w/ Gauntlets] (alt-fire)
 {
  intensity = 1 + (MiscellaneousVars[35] / 8);
 }
 if (CharacterClass == 0) intensity = intensity * 3 / 2;
 if (CharacterClass == 1) intensity = intensity * 5 / 4;

 if (CheckActorInventory(1001,"PowerStrength") > 0) intensity += 1;

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"Intensity: ",d:intensity);
 SetResultValue(intensity);
}
script "QuakeMeleeDuration" (int attacktype)
{
 int duration;
 if (attacktype == 0) // Sceptre [Normal]
 {
  if (SceptreActualLevel <= 0) duration = 8;
  if (SceptreActualLevel == 1) duration = 8;
  if (SceptreActualLevel == 2) duration = 9;
  if (SceptreActualLevel == 3) duration = 9;
  if (SceptreActualLevel == 4) duration = 10;
  if (SceptreActualLevel == 5) duration = 10;
  if (SceptreActualLevel == 6) duration = 11;
  if (SceptreActualLevel == 7) duration = 11;
  if (SceptreActualLevel == 8) duration = 12;
  if (SceptreActualLevel == 9) duration = 12;
  if (SceptreActualLevel == 10) duration = 13;
  if (SceptreActualLevel == 11) duration = 13;
  if (SceptreActualLevel == 12) duration = 14;
  if (SceptreActualLevel == 13) duration = 14;
  if (SceptreActualLevel == 14) duration = 15;
  if (SceptreActualLevel == 15) duration = 15;
  if (SceptreActualLevel >= 16) duration = 16;
  duration = duration + (MiscellaneousVars[35] / 10);
 }
 else
 if (attacktype == 1) // Sceptre [Aireal]
 {
 }
 else
 if (attacktype == 2) // Sceptre [Spinning]
 {
  if (SceptreActualLevel <= 0) duration = 2;
  if (SceptreActualLevel == 1) duration = 2;
  if (SceptreActualLevel == 2) duration = 2;
  if (SceptreActualLevel == 3) duration = 2;
  if (SceptreActualLevel == 4) duration = 2;
  if (SceptreActualLevel == 5) duration = 2;
  if (SceptreActualLevel == 6) duration = 2;
  if (SceptreActualLevel == 7) duration = 2;
  if (SceptreActualLevel == 8) duration = 3;
  if (SceptreActualLevel == 9) duration = 3;
  if (SceptreActualLevel == 10) duration = 3;
  if (SceptreActualLevel == 11) duration = 3;
  if (SceptreActualLevel == 12) duration = 3;
  if (SceptreActualLevel == 13) duration = 3;
  if (SceptreActualLevel == 14) duration = 3;
  if (SceptreActualLevel == 15) duration = 3;
  if (SceptreActualLevel >= 16) duration = 4;
  duration = duration + (MiscellaneousVars[35] / 40);
 }
 else
 if (attacktype == 3) // Punch [unarmed] (normal)
 {
  duration = 2;
  duration = duration + (MiscellaneousVars[35] / 40);
 }
 else
 if (attacktype == 4) // Punch [unarmed] (alt-fire)
 {
 }
 else
 if (attacktype == 5) // Punch [w/ Gauntlets] (normal)
 {
  duration = 6;
  duration = duration + (MiscellaneousVars[35] / 14);
 }
 else
 if (attacktype == 6) // Punch [w/ Gauntlets] (alt-fire)
 {
  duration = 8;
  duration = duration + (MiscellaneousVars[35] / 10);
 }
 if (CharacterClass == 0) duration = duration * 3 / 2;
 if (CharacterClass == 1) duration = duration * 5 / 4;

 if (PowerupTimer[7] > 0) duration = duration * 3 / 2;
 if (CheckActorInventory(1001,"PowerStrength") > 0) duration *= 4;

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"Duration: ",d:duration);
 SetResultValue(duration);
}
script "QuakeMeleeTremrad" (int attacktype)
{
 int tremrad;
 if (attacktype == 0) // Sceptre [Normal]
 {
  if (SceptreActualLevel <= 0) tremrad = 512;
  if (SceptreActualLevel == 1) tremrad = 544;
  if (SceptreActualLevel == 2) tremrad = 576;
  if (SceptreActualLevel == 3) tremrad = 608;
  if (SceptreActualLevel == 4) tremrad = 640;
  if (SceptreActualLevel == 5) tremrad = 672;
  if (SceptreActualLevel == 6) tremrad = 704;
  if (SceptreActualLevel == 7) tremrad = 736;
  if (SceptreActualLevel == 8) tremrad = 768;
  if (SceptreActualLevel == 9) tremrad = 800;
  if (SceptreActualLevel == 10) tremrad = 832;
  if (SceptreActualLevel == 11) tremrad = 864;
  if (SceptreActualLevel == 12) tremrad = 896;
  if (SceptreActualLevel == 13) tremrad = 928;
  if (SceptreActualLevel == 14) tremrad = 960;
  if (SceptreActualLevel == 15) tremrad = 992;
  if (SceptreActualLevel >= 16) tremrad = 1024;
  tremrad = tremrad + (MiscellaneousVars[35] * 4);
 }
 else
 if (attacktype == 1) // Sceptre [Aireal]
 {
 }
 else
 if (attacktype == 2) // Sceptre [Spinning]
 {
  if (SceptreActualLevel <= 0) tremrad = 128;
  if (SceptreActualLevel == 1) tremrad = 136;
  if (SceptreActualLevel == 2) tremrad = 144;
  if (SceptreActualLevel == 3) tremrad = 152;
  if (SceptreActualLevel == 4) tremrad = 160;
  if (SceptreActualLevel == 5) tremrad = 168;
  if (SceptreActualLevel == 6) tremrad = 176;
  if (SceptreActualLevel == 7) tremrad = 184;
  if (SceptreActualLevel == 8) tremrad = 192;
  if (SceptreActualLevel == 9) tremrad = 200;
  if (SceptreActualLevel == 10) tremrad = 208;
  if (SceptreActualLevel == 11) tremrad = 216;
  if (SceptreActualLevel == 12) tremrad = 224;
  if (SceptreActualLevel == 13) tremrad = 232;
  if (SceptreActualLevel == 14) tremrad = 240;
  if (SceptreActualLevel == 15) tremrad = 248;
  if (SceptreActualLevel >= 16) tremrad = 256;
  tremrad = tremrad + (MiscellaneousVars[35]);
 }
 else
 if (attacktype == 3) // Punch [unarmed] (normal)
 {
  tremrad = 256;
  tremrad = tremrad + (MiscellaneousVars[35]);
 }
 else
 if (attacktype == 4) // Punch [unarmed] (alt-fire)
 {
 }
 else
 if (attacktype == 5) // Punch [w/ Gauntlets] (normal)
 {
  tremrad = 844;
  tremrad = tremrad + (MiscellaneousVars[35] * 13 / 4);
 }
 else
 if (attacktype == 6) // Punch [w/ Gauntlets] (alt-fire)
 {
  tremrad = 1024;
  tremrad = tremrad + (MiscellaneousVars[35] * 4);
 }
 if (CharacterClass == 0) tremrad = tremrad * 3 / 2;
 if (CharacterClass == 1) tremrad = tremrad * 5 / 4;

 if (PowerupTimer[7] > 0) tremrad = tremrad * 3 / 2;
 if (CheckActorInventory(1001,"PowerStrength") > 0) tremrad *= 8;

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"TremRad: ",d:tremrad);
 SetResultValue(tremrad);
}

// Fist/Punch Damage Checker
script "GetPunchDamage" (int altfire, int shockwave)
{
 int damage;
 int strengthcounter;

 SetActivator(1001);
 str weapon = GetWeapon();
 SetActivator(0);

 // Character Check [base damage]
 if (CharacterClass == 0) damage = random(18,24);
 if (CharacterClass == 1) damage = random(10,16);
 if (CharacterClass == 2) damage = random(6,12);

 // Gauntlet Check #1 [base damage]
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  if (CharacterClass == 0) damage += random(14,18);
  if (CharacterClass == 1) damage += random(10,14);
  if (CharacterClass == 2) damage += random(8,12);
 }
 
 // Strength Stat Check [7 pts = roughly double the character's base punch damage]
 //PrintBold(d:damage);
 for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
 {
  if (CharacterClass == 0) damage += random(1,3);
  if (CharacterClass == 1) damage += random(1,2);
  if (CharacterClass == 2) damage += random(0,2);
 }

 // Gauntlet Check #2 [strength stat check] [7 pts = roughly double the character's base gauntlet punch damage]
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
  {
   if (CharacterClass == 0) damage += random(2,3);
   if (CharacterClass == 1) damage += random(1,3);
   if (CharacterClass == 2) damage += random(1,2);
  } 
 }

 // Berserk Check
 //PrintBold(d:damage);
 if (CheckActorInventory(1001,"PowerStrength") > 0) damage = damage * 10;

 // Flora Armor Checks
 //PrintBold(d:damage);
 if (CharacterClass == 2) 
 {
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) Damage = Damage * 4 / 3; // +33.3~% Punch Damage
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) Damage = Damage * 7 / 4; // +75% Punch Damage
 }

 // Gauntlet Check #3
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  if (altfire == 0) damage *= 10;
  if (altfire == 1) damage *= 25;
 }

 if (shockwave > 0) damage = damage / 6;

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"MeleeDmg: (",s:weapon,s:") ",d:damage);
 SetResultValue(damage);
}

script "GetHitScanXSpread" (int type)
{
 int spread = 0.0;
 int spreadfactor = 1.0;
 if (type == 1) // Pistol [Single]
 {
  spread = 6.0;
  spreadfactor = 1.0 - ((MiscellaneousVars[10019] * 0.1) + (MiscellaneousVars[10020] * 0.15));
  spread = FixedMul(spread,spreadfactor);
 }
 if (type == 2) // Pistol [Dual]
 {
  spread = 5.6;
  spreadfactor = 1.0 - ((MiscellaneousVars[10019] * 0.1) + (MiscellaneousVars[10020] * 0.15));
  spread = FixedMul(spread,spreadfactor);
 }
 PrintBold(f:spread,s:" / ",f:spreadfactor);
 SetResultValue(spread);
}

script "GetHitScanYSpread" (int type)
{
 int spread = 0.0;
 int spreadfactor = 1.0;
 if (type == 1) // Pistol [Single]
 {
  spread = 0.0;
  spreadfactor = 1.0 - ((MiscellaneousVars[10019] * 0.1) + (MiscellaneousVars[10020] * 0.15));
  spread = FixedMul(spread,spreadfactor);
 }
 if (type == 2) // Pistol [Dual]
 {
  spread = 0.4;
  spreadfactor = 1.0 - ((MiscellaneousVars[10019] * 0.1) + (MiscellaneousVars[10020] * 0.15));
  spread = FixedMul(spread,spreadfactor);
 }
 PrintBold(f:spread,s:" / ",f:spreadfactor);
 SetResultValue(spread);
}

// Returns Damage inflicted by Doom-style hitscan weapons [players]
script "GetHitScanDMG" (int type)
{
 // MiscellaneousVars[31] = Agility
 // MiscellaneousVars[35] = Strength
 int damage, extradmg1, extradmg2, finaldmg;
 int rand1, rand2;
 int perkfactor = 10000;
 if (type == 1) // Pistol [Single]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10019] * random(100,200)) + (MiscellaneousVars[10020] * random(500,1000)));
  damage = random(1,4) * random(5,7); // 5 to 28
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 3) / 4; // 75% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 7) / 40; // 17.5% of Strength
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 2) // Pistol [Dual]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10019] * random(100,200)) + (MiscellaneousVars[10020] * random(500,1000)));
  damage = random(2,4) * random(6,7); // 12 to 28
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 7) / 8; // 87.5% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 5; // 20% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 3) // Shotgun
 {
  perkfactor = 10000 + ((MiscellaneousVars[10021] * random(100,200)) + (MiscellaneousVars[10022] * random(500,1000)));
  damage = random(2,3) * 5; // 10 to 15
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 1); // 100% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 7) / 80; // 8.75% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 4) // Super Shotgun
 {
  perkfactor = 10000 + ((MiscellaneousVars[10021] * random(100,200)) + (MiscellaneousVars[10022] * random(500,1000)));
  damage = random(2,3) * random(5,6); // 10 to 18
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 5) / 4; // 125% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 8; // 12.5% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 5) // Chaingun
 {
  perkfactor = 10000 + ((MiscellaneousVars[10019] * random(100,200)) + (MiscellaneousVars[10020] * random(500,1000)));
  damage = random(1,4) * random(5,7); // 5 to 28
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 7) / 8; // 87.5% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 5; // 20% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 6) // Minigun
 {
  perkfactor = 10000 + ((MiscellaneousVars[10019] * random(100,200)) + (MiscellaneousVars[10020] * random(500,1000)));
  damage = random(2,4) * random(6,7); // 12 to 28
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 1); // 100% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 4; // 25% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 7) // Repeater
 {
  perkfactor = 10000 + ((MiscellaneousVars[10023] * random(100,200)) + (MiscellaneousVars[10024] * random(500,1000)));
  damage = random(1,3) * 6; // 6 to 18
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 3) / 2; // 150% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 3) / 8; // 37.5% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 8) // Rocket [main hit]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10025] * random(700,1400)) + (MiscellaneousVars[10026] * random(1100,2200)));
  damage = random(1,8) * 20; // 20 to 160
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 5) / 2; // 250% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 9) / 8; // 112.5% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 9) // Rocket [explosion]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10025] * random(700,1400)) + (MiscellaneousVars[10026] * random(1100,2200)));
  damage = 128;
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 5) / 2; // 250% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 9) / 8; // 112.5% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 10) // Repeater [explosion]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10023] * random(100,200)) + (MiscellaneousVars[10024] * random(500,1000)));
  damage = 7; // 7
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 1) / 5; // 20% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 14; // 7.14% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 11) // Plasma
 {
  perkfactor = 10000 + ((MiscellaneousVars[10023] * random(100,200)) + (MiscellaneousVars[10024] * random(500,1000)));
  damage = random(1,8) * 5; // 5 to 40
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 15) / 16; // 93.34% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 9) / 20; // 45% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 12) // Plasma1 [BFG2704]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10023] * random(100,200)) + (MiscellaneousVars[10024] * random(500,1000)));
  damage = random(1,8) * 4; // 4 to 32
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 1); // 100% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 11) / 20; // 55% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 13) // Plasma2 [BFG2704]
 {
  perkfactor = 10000 + ((MiscellaneousVars[10023] * random(100,200)) + (MiscellaneousVars[10024] * random(500,1000)));
  damage = random(1,8) * 4; // 4 to 32
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 11) / 10; // 110% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 2; // 50% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 14) // BFG [Main]
 {
  damage = random(1,8) * 100; // 100 to 800
  if (MiscellaneousVars[10023] == 1) damage = random(4,17) * 50; // 100 to 800
  if (MiscellaneousVars[10023] == 2) damage = random(8,18) * 50; // 100 to 800
  extradmg1 = (MiscellaneousVars[31] * 11); // 1100% of Agility
  if (MiscellaneousVars[10023] == 1) extradmg1 = (MiscellaneousVars[31] * 12); // 1100% of Agility
  if (MiscellaneousVars[10023] == 2) extradmg1 = (MiscellaneousVars[31] * 13); // 1100% of Agility
  extradmg2 = (MiscellaneousVars[35] * 5); // 500% of Strength 
  if (MiscellaneousVars[10023] == 1) extradmg2 = ((MiscellaneousVars[35] * 11) / 2); // 550% of Strength 
  if (MiscellaneousVars[10023] == 2) extradmg2 = (MiscellaneousVars[35] * 6); // 600% of Strength 
 }
 if (type == 15) // BFG [Tracer]
 {
  damage = random(1,8) + 15; // 16 to 23
  if (MiscellaneousVars[10023] == 1) damage = random(2,9) + 17; // 18 to 25
  if (MiscellaneousVars[10023] == 2) damage = random(3,10) + 19; // 22 to 29
  extradmg1 = (MiscellaneousVars[31] * 11) / 5; // 220% of Agility
  if (MiscellaneousVars[10023] == 1) extradmg1 = (MiscellaneousVars[31] * 12) / 5; // 240% of Agility
  if (MiscellaneousVars[10023] == 2) extradmg1 = (MiscellaneousVars[31] * 14) / 5; // 280% of Agility
  extradmg2 = (MiscellaneousVars[35] * 1); // 100% of Strength 
  if (MiscellaneousVars[10023] == 1) extradmg2 = ((MiscellaneousVars[35] * 13) / 8); // 162.5% of Strength 
  if (MiscellaneousVars[10023] == 2) extradmg2 = ((MiscellaneousVars[35] * 9) / 4); // 225% of Strength 
 }
 if (type == 16) // KSawBolt
 {
  perkfactor = 10000 + ((MiscellaneousVars[10027] * 2500) + (MiscellaneousVars[10028] * 3750));
  damage = random(1,8) * 12; // 12 to 96
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 11) / 5; // 220% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1); // 100% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }
 if (type == 17) // KSawBolt
 {
  perkfactor = 10000 + ((MiscellaneousVars[10027] * 2500) + (MiscellaneousVars[10028] * 3750));
  damage = random(1,8) * 12; // 12 to 96
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 11) / 5; // 220% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1); // 100% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;
 }

 if (type == 18) // DiarisHolyArrow
 {
  perkfactor = 10000 + ((MiscellaneousVars[10031] * random(300,600)) + (MiscellaneousVars[10032] * random(1200,2400)));
  damage = 384 + random(-48,192); // 336 to 576 damage
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 5); // 500% of Agility
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 5; // 20% of Strength 
  extradmg2 = extradmg2 * perkfactor / 10000;

  damage /= 4;
  extradmg1 /= 4;
  extradmg2 /= 4;
 }
 if (type == 19) // DiarisHolyArrow2XDmg
 {
  perkfactor = 10000 + ((MiscellaneousVars[10031] * random(300,600)) + (MiscellaneousVars[10032] * random(1200,2400)));
  damage = 384 + random(-48,192); // 336 to 576 damage
  damage *= 2;
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 22 / 4); // 550% of Agility
  extradmg1 *= 2;
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 1) / 4; // 25% of Strength 
  extradmg2 *= 2;
  extradmg2 = extradmg2 * perkfactor / 10000;

  damage /= 4;
  extradmg1 /= 4;
  extradmg2 /= 4;
 }
 if (type == 20) // DiarisHolyArrow3XDmg
 {
  perkfactor = 10000 + ((MiscellaneousVars[10031] * random(300,600)) + (MiscellaneousVars[10032] * random(1200,2400)));
  damage = 384 + random(-48,192); // 336 to 576 damage
  damage *= 3;
  damage = damage * perkfactor / 10000;
  extradmg1 = (MiscellaneousVars[31] * 6); // 600% of Agility
  extradmg1 *= 3;
  extradmg1 = extradmg1 * perkfactor / 10000;
  extradmg2 = (MiscellaneousVars[35] * 3) / 10; // 30% of Strength 
  extradmg2 *= 3;
  extradmg2 = extradmg2 * perkfactor / 10000;

  damage /= 4;
  extradmg1 /= 4;
  extradmg2 /= 4;
 }

 rand1 = (extradmg1 + extradmg2) * 4 / 5;
 rand2 = (extradmg1 + extradmg2) * 6 / 5;

 finaldmg = damage + random(rand1,rand2);

 if (GetCVar("dvdsdebug_showhitscaninformation") == 1)
 {
  PrintBold(s:"Base: ",d:damage,
            s:"\nExtra1: ",d:extradmg1,
            s:"\nExtra2: ",d:extradmg2,
            s:"\nRandom: ",d:rand1,s:" - ",d:rand2,
            s:"\nPerkFactor: ",d:perkfactor,
            s:"\nTotal: ",d:finaldmg);
 }
 SetResultValue(finaldmg);
}

// Returns Damage inflicted by misc attacks
script "GetMiscDMG" (int type)
{
 int damage;
 if (type == 1) // Minor Magic Missile [particle]
 {
  if (random(1,1000) > 667) damage = 0;
  else damage = (2 + random(-1,1));
 }

 SetResultValue(damage);
}

// Returns Chainsaw Damage
script "GetChainsawDamage" (int sawtype)
{
 int damage;
 SetActivator(1001);
 str weapon = GetWeapon();
 SetActivator(0);

 if (sawtype <= 1) // Normal Chainsaw
 {
  damage = ((2 + (MiscellaneousVars[35] / 10)) * random(1,10)); // 2 - 20 + (Strength * 10%)
 }
 if (sawtype >= 2) // Double-Bladed Chainsaw
 {
  damage = (((9 / 2) + (MiscellaneousVars[35] * 9 / 40)) * random(3,12)); // 13.5 - 54 + (Strength * 22.5%)
 }

 // Berserk Check
 if (CheckActorInventory(1001,"PowerStrength") > 0) damage = damage * 7 / 4; // 175% Damage when Berserked

 if (GetCVar("dvdsdebug_showmeleeinformation") > 0) PrintBold(s:"MeleeDmg: (",s:weapon,s:") ",d:damage);
 SetResultValue(damage);
}

// Damage Indicators
function int pow (int x, int n)
{
 int y = 1;
 while (n-- > 0) y *= x;
 return y;
}

function int GetDigit(int Num, int Digit) 
{
 return (Num / pow(10, Digit)) % 10 ;
}

// For Monsters/Non-Players
script "DamageDisplays" (void)
{
 int xpos, ypos, zpos;
 int PlayerCrit;
 int dmgind_delay = GetCVAR("dvds_dmgind_delay");
 if (dmgind_delay < 1) dmgind_delay = 1;
 if (dmgind_delay > 35) dmgind_delay = 35;
 while (GetCVar("dvds_dmgindicator") == 1)
 {
  if (CheckInventory("MonsterDisplayDMG") == 0) terminate;
  int ActorWidth = GetActorProperty(0,APROP_Radius);
  int ActorHeight = GetActorProperty(0,APROP_Height);
  int PreviousHealth = GetActorProperty(0,APROP_Health);

  int totaldelay = ((1 + (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) / 160) ) * dmgind_delay);
  delay(totaldelay); // 1
  If (GetActorProperty(0,APROP_Health) != PreviousHealth)
  {
     //if (CheckActorInventory(1001,"DealCriticalHit") > 0 && IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == TRUE && totaldelay == 1) PlayerCrit = 1; else PlayerCrit = 0;
     if (CheckActorInventory(1001,"DealCriticalHit") > 0 && IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == TRUE) PlayerCrit = 1; else PlayerCrit = 0;
     //if (CheckInventory("TookCriticalHit") > 0) { PlayerCrit = 1; TakeInventory("TookCriticalHit",9999); } else PlayerCrit = 0;
     //PlayerCrit = 1;

     int DmgIndDisplayValue = PreviousHealth - GetActorProperty(0,APROP_Health);
     int DmgIndDisplayType;

     DmgIndDisplayType = 0; // 0 = Damage, 1 = Healing.
     If (DmgIndDisplayValue < 0)
     {
      DmgIndDisplayValue *= -1;
      DmgIndDisplayType = 1;
     }

     if (DmgIndDisplayValue > 9999999) DmgIndDisplayValue = 9999999;

     If (DmgIndDisplayValue > 0)
     {
      //if (PlayerCrit > 0) PrintBold(d:PlayerCrit);
      int Digit1 = GetDigit(DmgIndDisplayValue, 0);
      int Digit2 = GetDigit(DmgIndDisplayValue, 1);
      int Digit3 = GetDigit(DmgIndDisplayValue, 2);
      int Digit4 = GetDigit(DmgIndDisplayValue, 3);
      int Digit5 = GetDigit(DmgIndDisplayValue, 4);
      int Digit6 = GetDigit(DmgIndDisplayValue, 5);
      int Digit7 = GetDigit(DmgIndDisplayValue, 6);
      int DigitBG;

      int WidthPos = ActorWidth / 2;
      int WidthNeg = ActorWidth * -1 / 2;
      int x = GetActorX(0) + random(WidthNeg,WidthPos);
      int y = GetActorY(0) + random(WidthNeg,WidthPos);
      int z;
      If (ActorHeight > 0) 
          z = GetActorZ(0) + ActorHeight + Random(-4.0,4.0);
      else
          z = GetActorZ(0) + GetActorProperty(0, APROP_HEIGHT) + Random(-4.0,4.0);

      int NumberID = Random(7000, 8000);
      str DigitSpawn;

      //DmgIndDisplayType = 1;
      if (DmgIndDisplayType == 1) 
      {
       if (DmgIndDisplayValue >= 0) DigitSpawn = StrParam(s:"HealBurst1");
       if (DmgIndDisplayValue >= 10) DigitSpawn = StrParam(s:"HealBurst2");
       if (DmgIndDisplayValue >= 100) DigitSpawn = StrParam(s:"HealBurst3");
       if (DmgIndDisplayValue >= 1000) DigitSpawn = StrParam(s:"HealBurst4");
       if (DmgIndDisplayValue >= 10000) DigitSpawn = StrParam(s:"HealBurst5");
       if (DmgIndDisplayValue >= 100000) DigitSpawn = StrParam(s:"HealBurst6");
       if (DmgIndDisplayValue >= 1000000) DigitSpawn = StrParam(s:"HealBurst7");
      }
      else
      {
       if (PlayerCrit > 0)
       {
        if (DmgIndDisplayValue >= 0) DigitSpawn = StrParam(s:"DamageBurstCritical1");
        if (DmgIndDisplayValue >= 10) DigitSpawn = StrParam(s:"DamageBurstCritical2");
        if (DmgIndDisplayValue >= 100) DigitSpawn = StrParam(s:"DamageBurstCritical3");
        if (DmgIndDisplayValue >= 1000) DigitSpawn = StrParam(s:"DamageBurstCritical4");
        if (DmgIndDisplayValue >= 10000) DigitSpawn = StrParam(s:"DamageBurstCritical5");
        if (DmgIndDisplayValue >= 100000) DigitSpawn = StrParam(s:"DamageBurstCritical6");
        if (DmgIndDisplayValue >= 1000000) DigitSpawn = StrParam(s:"DamageBurstCritical7");
       }
       else
       {
        if (DmgIndDisplayValue >= 0) DigitSpawn = StrParam(s:"DamageBurst1");
        if (DmgIndDisplayValue >= 10) DigitSpawn = StrParam(s:"DamageBurst2");
        if (DmgIndDisplayValue >= 100) DigitSpawn = StrParam(s:"DamageBurst3");
        if (DmgIndDisplayValue >= 1000) DigitSpawn = StrParam(s:"DamageBurst4");
        if (DmgIndDisplayValue >= 10000) DigitSpawn = StrParam(s:"DamageBurst5");
        if (DmgIndDisplayValue >= 100000) DigitSpawn = StrParam(s:"DamageBurst6");
        if (DmgIndDisplayValue >= 1000000) DigitSpawn = StrParam(s:"DamageBurst7");
       }
      }
      Spawn(DigitSpawn, x, y, z, NumberID, 0);


      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical1Num", d:Digit1); else DigitSpawn = StrParam(s:"Digit1Num", d:Digit1);
      if (DmgIndDisplayValue >= 0) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical2Num", d:Digit2); else DigitSpawn = StrParam(s:"Digit2Num", d:Digit2);
      if (DmgIndDisplayValue >= 10) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical3Num", d:Digit3); else DigitSpawn = StrParam(s:"Digit3Num", d:Digit3);
      if (DmgIndDisplayValue >= 100) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical4Num", d:Digit4); else DigitSpawn = StrParam(s:"Digit4Num", d:Digit4);
      if (DmgIndDisplayValue >= 1000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical5Num", d:Digit5); else DigitSpawn = StrParam(s:"Digit5Num", d:Digit5);
      if (DmgIndDisplayValue >= 10000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical6Num", d:Digit6); else DigitSpawn = StrParam(s:"Digit6Num", d:Digit6);
      if (DmgIndDisplayValue >= 100000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (PlayerCrit > 0) DigitSpawn = StrParam(s:"DigitCritical7Num", d:Digit7); else DigitSpawn = StrParam(s:"Digit7Num", d:Digit7);
      if (DmgIndDisplayValue >= 1000000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      if (DmgIndDisplayType == 1) Thing_SetTranslation(NumberID, 30); // Healing
      else // Damage
      {
       if (PlayerCrit > 0)
       {
        PlaySound(1001,"player/criticalhit",CHAN_BODY,1.0,0,ATTN_NORM);
        Thing_SetTranslation(NumberID, 32);
       }
       else
       {
        Thing_SetTranslation(NumberID, 31);
       }
      }      

      if (PlayerCrit > 0)
      {
       if (DmgIndDisplayType == 1) SetActorVelocity(NumberID, random(-1.0,1.0), random(-1.0,1.0), random(0.25,0.5), 0, 0); // Healing cannot be critical'd
       else SetActorVelocity(NumberID, random(-0.5,0.5), random(-0.5,0.5), random(-0.50,-0.25), 0, 0);
      }
      else
      {
       SetActorVelocity(NumberID, random(-1.0,1.0), random(-1.0,1.0), random(0.25,0.5), 0, 0);
      }
     }
  }
  else
  {
   if (CheckInventory("TookCriticalHit") > 0) { TakeInventory("TookCriticalHit",9999); PlayerCrit = 0; }
  }
 }
}

// Used by DECORATE to check for the player's crit item
script "CheckCritRate" (void)
{
 if (CheckActorInventory(1001,"DealCriticalHit") > 0) SetResultValue(1); else SetResultValue(0);
}

// Used for testing SetHudSize customization in-game.
script "TestHudSize" (int screenX, int screenY, int usehud)
{
 MiscellaneousVars[76] = screenX;
 MiscellaneousVars[77] = screenY;
 MiscellaneousVars[78] = usehud;
}

// Used for testing coordinate/alignments on specfic "HudMessage" usages in-game.
script "TestHudAlign" (int X, int Y, int X2, int Y2)
{
 X *= 1.0;
 Y *= 1.0;
 X2 *= 0.1;
 Y2 *= 0.1;
 MiscellaneousVars[74] = X + X2;
 MiscellaneousVars[75] = Y + Y2;
 Print(f:X,s:" ",f:Y,s:" ",f:X2,s:" ",f:Y2);
}

// Test Script for Toggling pages for armor display lists
script "ChangeArmorPage" (int Page)
{
 MiscellaneousVars[55] += Page;
}

/*
   HudMessage IDs:
   901		-	Main List for Armor Display Menu
   902		-	Top Line for Armor Display Menu
   903		-	Armor Icon
   904		-	Background Tint for Menus/Armor-Display
*/
// Show Armor Stats
script "ShowArmorStats" ENTER
{
 int misc1, misc2, misc3, misc4, misc5;
 str ArmorString1, ArmorString2, ArmorString3, ArmorString4, ArmorString5, ArmorString6, ArmorString7, ArmorString8, ArmorString9, ArmorString10, ArmorString11, ArmorString12, ArmorString13, ArmorString14, ArmorString15, ArmorString16, ArmorString17, ArmorString18, ArmorString19, ArmorString20;
 str DivineShieldString1, DivineShieldString2;

 // [55] is the Armor Page to display
 if (MiscellaneousVars[55] != 0)
 {
  SetHudSize(512,384,0); // SetHudSize(MiscellaneousVars[76],MiscellaneousVars[77],MiscellaneousVars[78]);
  // Checks the Armor Info/Durability of the Marine's armor only.
  if (MiscellaneousVars[55] == 1) // Current Armor [Deggaris and Illucia only]
  {
   if (CharacterClass == 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CurrentArmorClass == 0) MiscellaneousVars[55] += 1;
    if (CurrentArmorClass == 1)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+2.5% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+3.75% Chance of Not Consuming Ammo\n";

     SetFont("ARM1A1");
     HudMessage(s:"A"; 0, 903, 0, 210.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Green Armor"; 0, 902, CR_WHITE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+33.3% Normal Damage Protection\n",
                s:"\cd+2.5% Unbreakable Damage Protection\n",
                s:"\cd+35% Total Damage Protection\n",
                s:"Up to 100 Durability Points\n",
                s:"\cd+15% Bullet Resistance\n",

                s:"\cd+2% Fire Resistance\n",
                s:"\cg-4% Maximum Mana Regeneration Rate\n",
                s:"\cd+1.2% Stamina Regeneration\n",
                s:"\cd+(4 + 1%) Balance\n",
                s:"\cd+0.5% Survival Chance\n",

                s:"\cg-3.3% Jump Strength\n",
                s:"\cd-5% EXP Combo Timer Speed\n",
                s:"\cd+1.25% Maximum Stamina\n",
                s:ArmorString1,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 2)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+4% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+6% Chance of Not Consuming Ammo\n";

     SetFont("ARM2A1");
     HudMessage(s:"A"; 0, 903, 0, 214.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Blue Armor"; 0, 902, CR_WHITE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+50% Normal Damage Protection\n",
                s:"\cd+5% Unbreakable Damage Protection\n",
                s:"\cd+52.5% Total Damage Protection\n",
                s:"Up to 200 Durability Points\n",
                s:"\cd+25% Bullet Resistance\n",

                s:"\cd+10% Fire Resistance\n",
                s:"\cg-8% Maximum Mana Regeneration Rate\n",
                s:"\cd+2.5% Stamina Regeneration\n",
                s:"\cd+(8 + 2%) Balance\n",
                s:"\cd+1% Survival Chance\n",

                s:"\cg-5% Jump Strength\n",
                s:"\cd-10% EXP Combo Timer Speed\n",
                s:"\cd+2.5% Maximum Stamina\n",
                s:ArmorString1,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 3)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+6.5% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+9.75% Chance of Not Consuming Ammo\n";

     SetFont("ARM3A1");
     HudMessage(s:"A"; 0, 903, 0, 195.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Stone Skin Armor"; 0, 902, CR_BRICK, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+66.67% Normal Damage Protection\n",
                s:"\cd+12.5% Unbreakable Damage Protection\n",
                s:"\cd+70.84% Total Damage Protection\n",
                s:"Up to 333 Durability Points\n",
                s:"\cd+40% Bullet Resistance\n",

                s:"\cd+27.5% Fire Resistance\n",
                s:"\cg-12.5% Ice Resistance\n",
                s:"\cg-10% Maximum Mana Regeneration Rate\n",
                s:"\cd+5% Stamina Regeneration\n",
                s:"\cd+(12 + 4%) Balance\n",

                s:"\cd+1.6% Survival Chance\n",
                s:"\cg-6.7% Jump Strength\n",
                s:"\cd-15% EXP Combo Timer Speed\n",
                s:"\cd+5% Maximum Stamina\n",
                s:ArmorString1,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 4)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+10% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+15% Chance of Not Consuming Ammo\n";

     SetFont("ARM4A1");
     HudMessage(s:"A"; 0, 903, 0, 190.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Diamond Skin Armor"; 0, 902, CR_BRICK, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+90% Damage Protection\n",
                s:"\cd+37.5% Unbreakable Damage Protection\n",
                s:"\cd+93.75% Total Damage Protection\n",
                s:"Up to 888 Durability Points\n",
                s:"\cd+47.5% Bullet Resistance\n",

                s:"\cd+37.5% Fire Resistance\n",
                s:"\cd+7.5% Ice Resistance\n",
                s:"\cg-14% Maximum Mana Regeneration Rate\n",
                s:"\cd+10% Stamina Regeneration\n",
                s:"\cd+(16 + 8%) Balance\n",

                s:"\cd+4.4% Survival Chance\n",
                s:"\cg-9% Jump Strength\n",
                s:"\cd-20% EXP Combo Timer Speed\n",
                s:"\cd+10% Maximum Stamina\n",
                s:ArmorString1,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 5)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+15% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+22.5% Chance of Not Consuming Ammo\n";

     SetFont("ARM3B1");
     HudMessage(s:"A"; 0, 903, 0, 174.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Divine Stone Skin Armor"; 0, 902, CR_GOLD, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+83.3334% Normal Damage Protection\n",
                s:"\cd+25% Unbreakable Damage Protection\n",
                s:"\cd+87.5% Total Damage Protection\n",
                s:"Up to 1332 Durability Points\n",
                s:"\cd+5% Overall Resistance\n",

                s:"\cd+40% Bullet Resistance\n",
                s:"\cd+27.5% Fire Resistance\n",
                s:"\cg-12.5% Ice Resistance\n",
                s:"\cg-12% Maximum Mana Regeneration Rate\n",
                s:"\cd+7.5% Stamina Regeneration\n",

                s:"\cd+(12 + 12%) Balance\n",
                s:"\cd+6.6% Survival Chance\n",
                s:"\cg-8.3% Jump Strength\n",
                s:"\cd-25% EXP Combo Timer Speed\n",
                s:"\cd+12.5% Maximum Stamina\n",

                s:ArmorString1,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 6)
    {
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     if (ModType == 0) ArmorString1 = "\cd+25% Chance of Not Consuming Ammo\n";
                  else ArmorString1 = "\cd+37.5% Chance of Not Consuming Ammo\n";

     SetFont("ARM4B1");
     HudMessage(s:"A"; 0, 903, 0, 167.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Divine Diamond Skin Armor"; 0, 902, CR_GOLD, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+95% Normal Damage Protection\n",
                s:"\cd+75% Unbreakable Damage Protection\n",
                s:"\cd+98.75% Total Damage Protection\n",
                s:"Up to 3552 Durability Points\n",
                s:"\cd+10% Overall Resistance\n",

                s:"\cd+47.5% Bullet Resistance\n",
                s:"\cd+37.5% Fire Resistance\n",
                s:"\cd+7.5% Ice Resistance\n",
                s:"\cg-16% Maximum Mana Regeneration Rate\n",
                s:"\cd+15% Stamina Regeneration\n",

                s:"\cd+(16 + 24%) Balance\n",
                s:"\cd+17.6% Survival Chance\n",
                s:"\cg-9.5% Jump Strength\n",
                s:"\cd-30% EXP Combo Timer Speed\n",
                s:"\cd+25% Maximum Stamina\n",

                s:ArmorString1,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
   }
  }

  // Checks the Armor Info of Sauron's Helmet. [all characters]
  if (MiscellaneousVars[55] == 2)
  {   
   if (CheckActorInventory(1001,"SauronHelmet") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cd+12.5% Mana Regeneration Rate\n";
    if (CharacterClass == 1) ArmorString1 = "\cd+25% Mana Regeneration Rate\n";
    if (CharacterClass == 2) ArmorString1 = "\cd+37.5% Mana Regeneration Rate\n";

    ArmorString2 = " \n";
    if (CharacterClass == 2) ArmorString2 = "\cg+34% Hellcore Heating Speed\n";

    if (ModType == 0) ArmorString3 = "\cd+7.5% Chance of Not Consuming Ammo\n";
                 else ArmorString3 = "\cd+9.375% Chance of Not Consuming Ammo\n";

    // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
    SetFont("BLACKBAR");
    HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

    SetFont("SHEMC0");
    HudMessage(s:"A"; 0, 903, 0, 190.0, 25.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"Sauron's Helmet"; 0, 902, CR_DARKGRAY, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd-25% Damage Received\n",
                s:"\cd-16.67% Damage from Bullets/Pellets\n",
                s:"\cd+12.5% Healing Spell Effect\n",
                s:ArmorString1,
                s:"\cg-25% Maximum Mana Regeneration Rate\n",

                s:"\cg-10% Stamina Regeneration\n",
                s:"\cd+12.5% Mana Gain from Items\n",
                s:"\cd+(17 + 17%) Balance\n",
                s:"\cd+17.5% Survival Chance\n",
                s:"\cg-10% Jump Strength\n",

                s:"\cg-1.56% Chance to Completely Evade an Attack\n",
                s:"\cdMarginally Increases Evasion Based on Agility & Deftness\n",
                s:ArmorString3,
                s:ArmorString2,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of Sauron's Gauntlets. [all characters]
  if (MiscellaneousVars[55] == 3)
  {   
   if (CheckActorInventory(1001,"SauronGauntletsItem") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cd+(5 + 5%) Balance\n";
    if (CharacterClass == 1) ArmorString1 = "\cd+(6 + 6%) Balance\n";
    if (CharacterClass == 2) ArmorString1 = "\cd+(4 + 4%) Balance\n";

    if (CharacterClass == 0) ArmorString2 = "\cd+5% Survival Chance\n";
    if (CharacterClass == 1) ArmorString2 = "\cd+6% Survival Chance\n";
    if (CharacterClass == 2) ArmorString2 = "\cd+4% Survival Chance\n";

    ArmorString3 = " \n";
    if (CharacterClass == 2) ArmorString3 = "\cg+34% Hellcore Heating Speed\n";

    if (ModType == 0) ArmorString4 = "\cd+7.5% Chance of Not Consuming Ammo\n";
                 else ArmorString4 = "\cd+9.375% Chance of Not Consuming Ammo\n";

    // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
    SetFont("BLACKBAR");
    HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

    SetFont("WGNTC0");
    HudMessage(s:"A"; 0, 903, 0, 170.0, 30.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"Sauron's Gauntlets"; 0, 902, CR_DARKGRAY, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+12.5% Healing Spell Effect\n",
                s:"\cd+25% Mana Regeneration Rate\n",
                s:"\cg-10% Maximum Mana Regeneration Rate\n",
                s:"\cg-10% Stamina Regeneration\n",
                s:"\cd+25% Mana Gain from Items\n",

                s:"\cg-1.56% Chance to Completely Evade an Attack\n",
                s:"\cdMarginally Increases Evasion Based on Agility & Deftness\n",
                s:ArmorString1,
                s:ArmorString2,
                s:"\cg-5% Jump Strength\n",

                s:"Recovers some health/mana with each hit [up to 200% maximum of each]\n",
                s:"Alt-Fire will throw a stronger, slower blow\n",
                s:ArmorString4,
                s:ArmorString3,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of The One Ring [all characters]
  if (MiscellaneousVars[55] == 4)
  {   
   if (CheckActorInventory(1001,"TheOneRing") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cg+25% Mana Cost\n";
    if (CharacterClass == 1) ArmorString1 = "\cg+25% Mana Cost\n";
    if (CharacterClass == 2) ArmorString1 = "\cd-18.75% Mana Cost\n";

    if (CharacterClass == 0) ArmorString2 = "\cg-37.5% Mana Regeneration Rate\n";
    if (CharacterClass == 1) ArmorString2 = "\cg-25% Mana Regeneration Rate\n";
    if (CharacterClass == 2) ArmorString2 = "\cg-12.5% Mana Regeneration Rate\n";

    if (CharacterClass == 0) ArmorString3 = "\cg-50% Mana Gain from Items\n";
    if (CharacterClass == 1) ArmorString3 = "\cg-50% Mana Gain from Items\n";
    if (CharacterClass == 2) ArmorString3 = "\cd+25% Mana Gain from Items\n";

    if (CharacterClass == 2)
    {
     if (CheckActorInventory(1001,"AnubisCufflinks") > 0) ArmorString4 = "\cqIncrease Fear Effect Chance from '\cnAnubis Cufflinks\cq' to 33.3%\n";
                                           else ArmorString4 = "\ck(?)\n";
    }
    else
    {
     if (CharacterClass == 0) ArmorString4 = "\cdYou Become Ghostly, Making Attacks Sometimes Pass Through You\n";
     if (CharacterClass == 1) ArmorString4 = "\cdYou Appear as a Shadow, Throwing Attacks off Course\n";
    }

    if (ModType == 0) ArmorString5 = "\cd+25% Chance of Not Consuming Ammo\n";
                 else ArmorString5 = "\cd+31.25% Chance of Not Consuming Ammo\n";

    // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
    SetFont("BLACKBAR");
    HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

    SetFont("RINGD0");
    HudMessage(s:"A"; 0, 903, 0, 195.0, 30.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"The One Ring"; 0, 902, CR_ORANGE, 256.0, 31.0, 0.03);

     HudMessage(
                s:ArmorString1,
                s:"\cd+150% Healing Spell Effect\n",
                s:ArmorString2,
                s:"\cd+50% Maximum Mana Regeneration Rate\n",
                s:"\cd+25% Extra Chance of a Gain to Each Stat on Level Up\n",

                s:ArmorString3,
                s:"\cd+10% Balance\n",
                s:"\cd+33.3% Survival Chance\n",
                s:"\cd+50% Movement Speed\n",
                s:"\cd+150% Damage Inflicted by All Attacks\n",

                s:"\cd-60% Damage Received\n",
                s:"\cd+6.25% Chance to Completely Evade an Attack\n",
                s:"\cdSlightly Increases Evasion Based on Agility & Deftness\n",
                s:"\cdAllows You to See The Entire Map\n",
                s:"\cdAllows You to See All Creatures and Items on The Map\n",

                s:ArmorString4,
                s:"\cd-20% EXP Combo Timer Speed\n",
                s:ArmorString5,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of the Safe Tea Boots [Flora only]
  if (MiscellaneousVars[55] == 5)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";

     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMA0");
     HudMessage(s:"A"; 0, 903, 0, 188.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Safe Tea Shoes"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+3% Armor Class\n",
                s:ArmorString3,
                s:"\cd+10% Stamina Regeneration\n",
                s:"\cd+1 Balance\n",
                s:"\cd+1.25% Magic Resistance\n",

                s:"\cd+25% Chance to Not Incur Slime/etc Damage\n",
                s:"\cd-0.5% Hellcore Heating Speed\n",
                s:"\cd+3.75% Chance to Completely Evade an Attack\n",
                s:"\cd+10% Jump Strength\n",
                s:ArmorString1,

                s:ArmorString2,
                s:"\cd-60% Stamina Use when Dashing/Air-Dashing\n",
                s:"\cd-25% Dash/Air-Dash Cooldown Time\n",
                s:"\cd-10% EXP Combo Timer Speed\n",
                s:ArmorString4,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Pearly Corset [Flora only]
  if (MiscellaneousVars[55] == 6)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"PearlyCorset") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMB0");
     HudMessage(s:"A"; 0, 903, 0, 190.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Pearly Corset"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+7% Armor Class\n",
                s:ArmorString3,
                s:"\cd+3 Balance\n",
                s:"\cd+2.5% Magic Resistance\n",
                s:"\cd+2% Fire-Elemental Resistance\n",

                s:"\cd+2% Ice-Elemental Resistance\n",
                s:"\cd+25% Bullet Resistance\n",
                s:"\cd-2.5% Hellcore Heating Speed\n",
                s:"\cd+0.5% Jump Strength\n",
                s:"\cd+20% HP Regen Speed\n",

                s:"\cd-10% HP Degen Speed (only if above 100% Maximum HP)\n",
                s:"\cd+30%-45% Extra EXP Gained\n",
                s:"\cd+30%-45% Extra Sceptre EXP Gained\n",
                s:"\cd+20% Max HP Gained From Max HP Bonuses/Seeds of Life\n",
                s:"\cd+0.75% Chance to Completely Evade an Attack\n",

                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Water Flying Dress [Flora only]
  if (MiscellaneousVars[55] == 7)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"WaterFlyingDress") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMC0");
     HudMessage(s:"A"; 0, 903, 0, 173.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Water Flying Dress"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+8% Armor Class\n",
                s:ArmorString3,
                s:"\cd+4 Balance\n",
                s:"\cd+25% Magic Resistance\n",
                s:"\cd+30% Fire-Elemental Resistance\n",

                s:"\cd+15% Bullet Resistance\n",
                s:"\cd-7.5% Hellcore Heating Speed\n",
                s:"\cd+0.5% Jump Strength\n",
                s:"\cd+1.25% Chance to Completely Evade an Attack\n",
                s:"\cd+10% Maximum Stamina\n",

                s:"\cd+66.6% Stamina Recovery From Items\n",
                s:"\cd+66.6% Hellcore Cooldown From Items\n",
                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";

                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Evenstar Necklace [Flora only]
  if (MiscellaneousVars[55] == 8)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMD0");
     HudMessage(s:"A"; 0, 903, 0, 174.0, 28.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Evenstar Necklace"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+2% Armor Class\n",
                s:ArmorString3,
                s:"\cd+1 Balance\n",
                s:"\cd-(10 + 10%) Mana Cost\n",
                s:"\cd+20% Magic Resistance\n",

                s:"\cd+20% Fire-Elemental Resistance\n",
                s:"\cd+20% Ice-Elemental Resistance\n",
                s:"\cd+20% Thunder-Elemental Resistance\n",
                s:"\cd+20% Magic Damage\n",
                s:"\cd+50% Fire-Elemental Damage\n",

                s:"\cd+50% Ice-Elemental Damage\n",
                s:"\cd+50% Thunder-Elemental Damage\n",
                s:"\cd+50% Holy-Elemental Damage\n",
                s:"\cd+10% HP Regen Speed\n",
                s:"\cd-5% HP Degen Speed (only if above 100% Maximum HP)\n",

                s:"\cd-13.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Jump Strength\n",
                s:"\cd+25% Maximum Mana Regeneration Rate\n",
                s:"\cd+33% Movement Speed While Drawing '\cfDiaris Bow\cd'\n",
                s:"\cd+2.5% Chance to Completely Evade an Attack\n",

                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Cloak Of Evasion [Flora only]
  if (MiscellaneousVars[55] == 9)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"CloakOfEvasion") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMME0");
     HudMessage(s:"A"; 0, 903, 0, 180.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Cloak Of Evasion"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+4% Armor Class\n",
                s:ArmorString3,
                s:"\cd+3 Balance\n",
                s:"\cd+5% Ice-Elemental Resistance\n",
                s:"\cd+2.5% Thunder-Elemental Resistance\n",

                s:"\cd+10% Bullet Resistance\n",
                s:"\cd+12.5% Chance to Not Incur Slime/etc Damage\n",
                s:"\cd+10% Movement Speed\n",
                s:"\cd+12.5% Chance to Completely Evade an Attack\n",
                s:"\cd+2.5% Jump Strength\n",

                s:"\cd-1.5% Hellcore Heating Speed\n",
                s:ArmorString1,
                s:ArmorString2,
                s:"\cd-5% EXP Combo Timer Speed\n",
                s:ArmorString4,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Falcon Knife Earrings [Flora only]
  if (MiscellaneousVars[55] == 10)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";

     if (CheckActorInventory(1001,"SauronGauntletsItem") > 0) ArmorString3 = "\cd+33.3% Damage Done By Punches and Gauntlet Punches\n";
                                               else ArmorString3 = "\cd+33.3% Damage Done By Punches\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\ck(?)\n";
                                                        else ArmorString4 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString5 = "\n";
                                                        else ArmorString5 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMK0");
     HudMessage(s:"A"; 0, 903, 0, 167.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Falcon Knife Earrings"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+5% Armor Class\n",
                s:ArmorString4,
                s:"\cd+1 Balance\n",
                s:"\cd+100% Damage Inflicted by All Attacks\n",
                s:"\cd+3.75% Jump Strength\n",

                s:"\cd-4.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Chance to Completely Evade an Attack\n",
                s:"\cd+17.5% Maximum Stamina\n",
                s:"\cd-25% Stamina Consumption for Attacks/Dashing/Whistling\n",
                s:"\cd-10% Stamina Comsumption for Focusing/Psyching Up\n",

                s:ArmorString3,
                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString5,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Anubis Cufflinks [Flora only]
  if (MiscellaneousVars[55] == 11)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (CheckActorInventory(1001,"SauronGauntletsItem") > 0) ArmorString3 = "\cd+75% Damage Done By Punches and Gauntlet Punches\n";
                                               else ArmorString3 = "\cd+75% Damage Done By Punches\n";
     
     if (CheckActorInventory(1001,"TheOneRing") > 0) ArmorString4 = "\cd+33.3% Chance to Induce Fear On Enemies and Make Them Hesitate\n";
                                      else ArmorString4 = "\cd+20% Chance to Induce Fear On Enemies and Make Them Hesitate\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString5 = "\ck(?)\n";
                                                        else ArmorString5 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString6 = "\n";
                                                        else ArmorString6 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMF0");
     HudMessage(s:"A"; 0, 903, 0, 181.0, 32.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Anubis Cufflinks"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+5% Armor Class\n",
                s:ArmorString5,
                s:"\cd+2.5% Stamina Regeneration\n",
                s:"\cd+2 Balance\n",
                s:"\cd-(2 + 2%) Mana Cost\n",

                s:ArmorString4,
                s:"\cd+6.25% Thunder-Elemental Resistance\n",
                s:"\cd+10% Survival Chance\n",
                s:"\cd+15% HP Regen Speed\n",
                s:"\cd-7.5% HP Degen Speed (only if above 100% Maximum HP)\n",

                s:"\cd+1.25% Jump Strength\n",
                s:"\cd-3.5% Hellcore Heating Speed\n",
                s:"\cd+62% Maximum Mana Regeneration Rate\n",
                s:"\cd+0.5% Chance to Completely Evade an Attack\n",
                s:ArmorString3,

                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString6,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Kissa's Armored Brassiere [Flora only]
  if (MiscellaneousVars[55] == 12)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"KissaBra") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMG0");
     HudMessage(s:"A"; 0, 903, 0, 151.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Kissa's Armored Brassiere"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+6% Armor Class\n",
                s:ArmorString3,
                s:"\cd+7.5% Stamina Regeneration\n",
                s:"\cd+1 Balance\n",
                s:"\cd+20% Bullet Resistance\n",

                s:"\cd+10% Max HP Gained From Max HP Bonuses/Seeds of Life\n",
                s:"\cd+25% Survival Chance\n",
                s:"\cqMaximum Survival Chance increases from 87.5% to 93.8%\n",
                s:"\cd+38% Maximum Mana Regeneration Rate\n",
                s:"\cd+2.5% Jump Strength\n",

                s:"\cd-6.5% Hellcore Heating Speed\n",
                s:"\cd+1% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Ruinous Shield [Flora only]
  if (MiscellaneousVars[55] == 13)
  {

   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"RuinousShield") > 0)
    {
     if (GameSkill() == SKILL_VERY_EASY) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 12.5% of Maximum\n";
     if (GameSkill() == SKILL_EASY) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 11.11~% of Maximum\n";
     if (GameSkill() == SKILL_NORMAL) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 10% of Maximum\n";
     if (GameSkill() == SKILL_HARD) ArmorString1 =" \cg-0.6% to -3.1% HP Degeneration Every Second Down to 9.09~% of Maximum\n";
     if (GameSkill() == SKILL_VERY_HARD) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 8.33~% of Maximum\n";

     if (GameSkill() == SKILL_VERY_EASY) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.56~% of Maximum\n";
     if (GameSkill() == SKILL_EASY) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.38~% of Maximum\n";
     if (GameSkill() == SKILL_NORMAL) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.25% of Maximum\n";
     if (GameSkill() == SKILL_HARD) ArmorString2 =" \cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.13~% of Maximum\n";
     if (GameSkill() == SKILL_VERY_HARD) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.04~% of Maximum\n";

     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+4 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMML0");
     HudMessage(s:"A"; 0, 903, 0, 192.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Ruinous Shield"; 0, 902, CR_DARKRED, 256.0, 31.0, 0.03);

     HudMessage(
                s:ArmorString3,
                s:"\cg-37.5% Stamina Regeneration\n",
                s:"\cg-(10 + 50%) Balance\n",
                s:"\cgSurvival Chance is cut by 9/10ths it's usual value\n",
                s:"\cg-61% Damage Inflicted\n",

                s:"\cg-61% Damage Resistance\n",
                s:"\cg+200% Hellcore Heating Speed\n",
                s:"\cg+34% Mana Cost\n",
                s:"\cg-75% HP Regen Speed\n",
                s:"\cg-75% Mana Regeneration Rate\n",

                s:"\cgEvasion Chance reduced by 3/4ths it's usual value\n",
                s:"\cdHellcore Weapons drop at 2.4x the normal rate\n",
                s:"Taking Damage Will Help Progress the Shield's Uncursing Process\n",
                s:"Shield Will Also Slowly Uncurse Itself Over Time On It's Own\n",
                s:"Killing Enemies Will Also Gradually Uncurse the Shield Over Time\n",

                s:ArmorString1,
                s:ArmorString2,
                s:"\cg+78% EXP Combo Timer Speed\n",
                s:ArmorString4,
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Divine Shield [Flora only]
  if (MiscellaneousVars[55] == 14)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"DivineShield") > 0)
    {
     misc1 = 0;
     if (CheckActorInventory(1001,"SafeTeaShoes") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"PearlyCorset") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"WaterFlyingDress") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"EvenstarNecklace") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"CloakOfEvasion") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"AnubisCufflinks") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"KissaBra") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"BalrogRing") > 0) misc1 += 1;
     if (CheckActorInventory(1001,"DoveRibbon") > 0) misc1 += 1;

     misc2 = 15 + (misc1 * 2);
     misc3 = 7 + (misc1 * 7);

     ArmorString1 = "% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
     ArmorString2 = "% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";

     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMH0");
     HudMessage(s:"A"; 0, 903, 0, 194.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Divine Shield"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+16% Armor Class\n",
                s:ArmorString3,
                s:"\cd+12.5% Stamina Regeneration\n",
                s:"\cd+(10 + 10%) Balance\n",
                s:"\cd+30% Magic Resistance\n",

                s:"\cd+25% Fire-Elemental Resistance\n",
                s:"\cd+25% Ice-Elemental Resistance\n",
                s:"\cd+25% Thunder-Elemental Resistance\n",
                s:"\cd-12.5% Hellcore Heating Speed\n",
                s:"\cd+0.625% Jump Strength\n",

                s:"\cdEvasion Chance increased by 11/10ths it's usual value\n",
                s:"\cq",d:misc2,s:ArmorString1,
                s:"\cq+",d:misc3,s:ArmorString2,
                s:"\cd-15% EXP Combo Timer Speed\n",
                s:"\cd+5% Maximum Stamina\n",

                s:ArmorString4,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Balrog's Ring [Flora only]
  if (MiscellaneousVars[55] == 15)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"BalrogRing") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "\ck(?)\n";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMI0");
     HudMessage(s:"A"; 0, 903, 0, 199.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Balrog's Ring"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+2% Armor Class\n",
                s:ArmorString3,
                s:"\cd+1 Balance\n",
                s:"\cd-(5 + 5%) Mana Cost\n",
                s:"\cd+15% Max HP Gained From Max HP Bonuses/Seeds of Life\n",

                s:"\cd+15% Fire-Elemental Resistance\n",
                s:"\cd+22.5% Ice-Elemental Resistance\n",
                s:"\cd+25% Area-Of-Effect Resistance\n",
                s:"\cd+25% HP Regen Speed\n",
                s:"\cd-12.5% HP Degen Speed (only if above 100% Maximum HP)\n",

                s:"\cd+25% Maximum Mana Regeneration Rate\n",
                s:"\cd-8.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Jump Strength\n",
                s:"\cd+0.5% Chance to Completely Evade an Attack\n",
                s:"\cd+12.5% Maximum Stamina\n",

                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Dove's Ribbon [Flora only]
  if (MiscellaneousVars[55] == 16)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0)
    {
     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckActorInventory(1001,"DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString3 = "";
                                                        else ArmorString3 = "\cd+9 Max Level Cap\n";
     
     if (GetCVar("dvds_flora_ignorearmormadelevelcap") == 1) ArmorString4 = "\n";
                                                        else ArmorString4 = "";
     
     misc4 = (PlayerLevel / 50) + 1;

     // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
     SetFont("BLACKBAR");
     HudMessage(s:"A"; HUDMSG_ALPHA, 904, 0, 160.0, 120.0, 0.03, 0.667);

     SetFont("ARMMJ0");
     HudMessage(s:"A"; 0, 903, 0, 192.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Dove's Ribbon"; 0, 902, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(
                s:"\cd+9% Armor Class\n",
                s:ArmorString3,
                s:"\cd+5% Stamina Regeneration\n",
                s:"\cd+2 Balance\n",
                s:"\cd+15% Survival Chance\n",

                s:"\cd+6.25% Magic Resistance\n",
                s:"\cd+1.25% Fire-Elemental Resistance\n",
                s:"\cd+6.25% Ice-Elemental Resistance\n",
                s:"\cd+15% Thunder-Elemental Resistance\n",
                s:"\cd+5% Bullet Resistance\n",

                s:"\cd+15% Movement Speed\n",
                s:"\cd+20% Magic Damage\n",
                s:"\cd+2 to 4 Mana Regeneration Rate\n",
                s:"\cd+",d:misc4,s:" HP Regeneration per Second, Up to 200% Maximum HP\n",
                s:"\cdHP will no longer Degenerate when above 100% Maximum HP\n",

                s:"\cd-5.5% Hellcore Heating Speed\n",
                s:"\cd+5% Jump Strength\n",
                s:"\cd+1.75% Chance to Completely Evade an Attack\n",
                s:"\cqDamage Suffered from Hellcore-Overheat Cut by 50%\n",
                s:"\cdIncreases Maximum Evasion Chance from 75% to 92.5%\n",

                s:ArmorString1,
                s:ArmorString2,
                s:ArmorString4,
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",

                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                0, 901, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  if (MiscellaneousVars[55] > 16) MiscellaneousVars[55] = 0; // Void Page
 }

 Delay(1);
 Restart;
}

script "CheckWeaponFlash" (int modulous, int increment)
{
 int result;
 if (increment != 0)
 {
  MiscellaneousVars[51] += increment;
  if (MiscellaneousVars[51] >= modulous) MiscellaneousVars[51] = 0;
 }
 else
 {
  result = MiscellaneousVars[51] % modulous;
  SetResultValue(result);
 }
 //PrintBold(d:MiscellaneousVars[51],s:" / ",d:modulous,s:"    [",d:increment,s:"]");
}

script "LifebarOptionChecker" ENTER
{
 If(GetCVar("dvds_actorlifebars") == 1) ACS_NamedExecuteAlways ("LifebarDisplayClientSide",0,0,0,0);
}

script "CheckBFG2704" (void)
{
 SetResultValue(GetCVar("dvds_BFG2704"));
}

str dvds_monsternames[209][2] =
{
  {"DSZombieman", "Zombieman"},
  {"PlasmaGuy", "Plasma Dude"},
  {"RepeaterZombie", "Repeater Guy"},
  {"KarasawaGuy", "'Sawa Man"},
  {"RocketLauncherGuy", "Rocketeer Zombie"},
  {"DSShotgunGuy", "Shotgun Guy"},
  {"SuperShotgunGuy", "SuperShotgun Guy"},
  {"DSChaingunGuy", "Chaingun Guy"},
  {"Minigunner", "Minigun Zombie"},
  {"BFGGuy", "BFG Commando"},
  {"DSDoomImp", "Imp"},
  {"DarkImp", "Dark Imp"},
  {"DSDemon", "Pinky Demon"},
  {"DSSpectre", "Pinky Spectre"},
  {"BloodDemon", "Blood Pinky"},
  {"BloodSpectre", "Blood Spectre"},
  {"DSWolfensteinSS", "SS Nazi"},
  {"DSLostSoul", "Lost Soul"},
  {"DSPainElemental", "Pain Elemental"},
  {"DSCacoDemon", "Cacodemon"},
  {"Cacolantern", "Cacolantern"},
  {"Abaddon", "Abaddon"},
  {"DSHellKnight", "Hell Knight"},
  {"DSBaronofHell", "Baron of Hell"},
  {"Belphegor", "Belphegor"},
  {"BruiserDemon", "Bruiser Demon"},
  {"ArchonofHell", "Archon of Hell"},
  {"PyroDemon", "Pyro Demon"},
  {"DSRevenant", "Revenant"},
  {"DeathIncarnate", "Death Incarnate"},
  {"DSFatso", "Mancubus"},
  {"Hectebus", "Hectebus"},
  {"DSArachnotron", "Arachnotron"},
  {"DSRailArachnotron", "Arachnotron"},
  {"FusionArachnotron", "Fusion Arachnotron"},
  {"DSArchvile", "Arch Vile"},
  {"Diabloist", "Diabloist"},
  {"DSSpiderMastermind", "Spider Mastermind"},
  {"Demolisher", "Spider-Demolisher"},
  {"DSCyberdemon", "Cyber Demon"},
  {"Annihilator", "Cyber-Annhilator"},
  {"DSScriptedMarine", "UAC Marine Buddy"},
  {"HadesSphere", "Hades Sphere"},
  {"HSOverlord", "Hades Sphere"},
  {"WeakenedFlyingBalrog", "Flying Balrog"},
  {"FlyingBalrog", "Flying Balrog"},
  {"CyBruiser", "CyBruiser"},
  {"HellCleric", "Hell Cleric"},
  {"HadesElemental", "Hades Elemental"},
  {"HadesOverlord", "Hades Overlord"},

  {"FZombieman", "Zombieman \cn(Friend)"},
  {"FPlasmaGuy", "Plasma Dude \cn(Friend)"},
  {"FRocketLauncherGuy", "Rocketeer Zombie \cn(Friend)"},
  {"FRepeaterZombie", "Repeater Guy \cn(Friend)"},
  {"FKarasawaGuy", "'Sawa Man \cn(Friend)"},

  {"FShotgunGuy", "Shotgun Guy \cn(Friend)"},
  {"FSuperShotgunGuy", "SuperShotgun Guy \cn(Friend)"},
  {"FChaingunGuy", "Chaingun Guy \cn(Friend)"},
  {"FBFGGuy", "BFG Commando \cn(Friend)"},
  {"FWolfensteinSS", "SS Nazi \cn(Friend)"},

  {"FDoomImp", "Imp \cn(Friend)"},
  {"FDarkImp", "Dark Imp \cn(Friend)"},
  {"FDemon", "Pinky Demon \cn(Friend)"},
  {"FSpectre", "Pinky Spectre \cn(Friend)"},
  {"FBloodDemon", "Blood Pinky \cn(Friend)"},

  {"FBloodSpectre", "Blood Spectre \cn(Friend)"},
  {"FRevenant", "Revenant \cn(Friend)"},
  {"FDeathIncarnate", "Death Incarnate \cn(Friend)"},
  {"FLostSoul", "Lost Soul \cn(Friend)"},
  {"FHadesSphere", "Hades Sphere \cn(Friend)"},

  {"FHSOverlord", "Hades Sphere \cn(Friend)"},
  {"FCacoDemon", "Cacodemon \cn(Friend)"},
  {"FCacolantern", "Cacolantern \cn(Friend)"},
  {"FAbaddon", "Abaddon \cn(Friend)"},
  {"FPainElemental", "Pain Elemental \cn(Friend)"},

  {"FHadesElemental", "Hades Elemental \cn(Friend)"},
  {"FHadesOverlord", "Hades Overlord \cn(Friend)"},
  {"FArachnotron", "Arachnotron \cn(Friend)"},
  {"FRailArachnotron", "Arachnotron \cn(Friend)"},
  {"FFusionArachnotron", "Fusion Arachnotron \cn(Friend)"},

  {"FHellKnight", "Hell Knight \cn(Friend)"},
  {"FBaronofHell", "Baron of Hell \cn(Friend)"},
  {"FBelphegor", "Belphegor \cn(Friend)"},
  {"FBruiserDemon", "Bruiser Demon \cn(Friend)"},
  {"FCyBruiser", "CyBruiser \cn(Friend)"},
  {"FArchonofHell", "Archon of Hell \cn(Friend)"},

  {"FPyroDemon", "Pyro Demon \cn(Friend)"},
  {"FFatso", "Mancubus \cn(Friend)"},
  {"FHectebus", "Hectebus \cn(Friend)"},
  {"FArchvile", "Arch Vile \cn(Friend)"},
  {"FDiabloist", "Diabloist \cn(Friend)"},

  {"FSpiderMastermind", "Spider Mastermind \cn(Friend)"},
  {"FDemolisher", "Spider-Demolisher \cn(Friend)"},
  {"FCyberdemon", "Cyber Demon \cn(Friend)"},
  {"FAnnihilator", "Cyber-Annhilator \cn(Friend)"},
  {"FHellCleric", "Hell Cleric \cn(Friend)"},

  {"FFlyingBalrog", "Flying Balrog \cn(Friend)"},

// Bosses

  {"SauronEyeWeak", "Lesser Sauron Eye"},
  {"SauronEyeStrong1", "Greater Sauron Eye"},
  {"SauronEyeStrong2", "Greater Sauron Eye"},
  {"SauronEyeMain", "\cfSauron's Mightiest Eye\c-"},
  {"Sauravatar", "\cfGreater Sauravatar\c-"},

// Non-Standard Doom Monsters
  {"BeefyNew", "Beefy The Clown"},
  {"MiniFluffyNew", "Fluffy [mini]"},
  {"FluffyNew", "Fluffy"},
  {"BulbyNew", "Bulby [mini]"},
  {"MegaBulbyNew", "Bulby"},
  {"TinyBingoNew", "Tiny Bingo"},
  {"BingoNew", "Bingo"},
  {"EvilDeadHandNew", "Evil Dead Hand"},
  {"ClownGhostNew", "Clown Ghost Balloon"},
  {"ClownGhost2New", "Ghost Clown Face"},
  {"JumpingSkullNew", "Bouncing Skull"},
  {"JumpingSkull2New", "Bouncing Skull"},
  {"PossessedBalloonNew", "Possessed Balloon"},
  {"BigBerthaNew", "Big Bertha"},
  {"ClownHeadNew", "Freaky Clown Head"},
  {"GoreWormNew", "Gore Worm"},
  {"BigBertha2New", "Big Bertha"},
  {"BlackBearNew", "Tiny Black Bear"},
  {"BouncingClownNew", "Giant Bouncing Clown"},
  {"BabyClownNew", "Baby Bouncing Clown"},
  {"BabyClown2New", "Baby Bouncing Clown"},
  {"SuperBerthaNew", "\cfSUPER Big Bertha\c-"},
  {"PennywiseHeadNew", "Flying Pennywise Head"},
  {"PennywiseHead2New", "Flying Pennywise Head"},
  {"PennywiseBoss", "\cfPennywise The Dancing Clown\c-"},

// Heretic Monsters

  {"HereticImpNew", "Gargoyle"},
  {"HereticImpLeaderNew", "NitroGargoyle"},

  {"MummyNew", "Golem"},
  {"MummyLeaderNew", "NitroGolem"},
  {"MummyGhostNew", "Golem (Ghost)"},
  {"MummyLeaderGhostNew", "NitroGolem (Ghost)"},

  {"KnightNew", "Undead Warrior"},
  {"KnightGhostNew", "Undead Warrior (Ghost)"},

  {"WizardNew", "Disciple of D'Sparil"},
  {"IronlichNew", "Iron Lich"},

  {"ClinkNew", "Sabreclaw"},
  {"BeastNew", "Were-Dragon"},
  {"MaulotaurNew", "Maulotaur"},
  {"SnakeNew", "Ophidian"},

  {"DSparilMountedNew", "\cfD'Sparil\c- (w/ Chaos Serpent Mount)"},
  {"DSparilUnmountedNew", "\cfD'Sparil\c-"},

// Hexen Monsters

  {"EttinNew", "Ettin"},

  {"FireDemonNew", "Afrit"},

  {"CentaurNew", "Centaur"},
  {"SlaughtaurNew", "Slaughtaur"},

  {"BishopNew", "Dark Bishop"},

  {"StalkerNew", "Stalker"},
  {"StalkerLeaderNew", "Alpha Stalker"},

  {"GreenChaosSerpentNew", "Chaos Serpent [Green]"},
  {"BrownChaosSerpentNew", "Chaos Serpent [Brown]"},

  {"IceGuyNew", "Wendigo"},

  {"WraithNew", "Reiver"},
  {"WraithBuriedNew", "Reiver"},

  {"DragonNew", "Death Wyvern"},

  {"HeresiarchNew", "Heresiarch"},

  {"ClericBossNew", "Traductus, Grand Patriarch of the Church"},
  {"FighterBossNew", "Zedek, Grand Marshal of the Legion"},
  {"MageBossNew", "Menelkir, Arch Mage of the Arcanum"},

  {"KoraxNew", "\cfKorax\c-"},

// Strife Monsters

  {"AcolyteBlueNew", "Order Acolyte"},
  {"AcolyteDGreenNew", "Order Acolyte"},
  {"AcolyteGoldNew", "Order Acolyte"},
  {"AcolyteGrayNew", "Order Acolyte"},
  {"AcolyteLGreenNew", "Order Acolyte"},
  {"AcolyteRedNew", "Order Acolyte"},
  {"AcolyteRustNew", "Order Acolyte"},
  {"AcolyteShadowNew", "Shadow Acolyte"},
  {"AcolyteTanNew", "Order Acolyte"},
  {"AcolyteNew", "Order Acolyte"},

  {"StalkerNew", "Order Stalker"},

  {"SentinelNew", "Order Sentinel"},

  {"CrusaderNew", "Order Crusader"},

  {"TemplarNew", "Order Templar"},

  {"CeilingTurretNew", "Ceiling Turret"},

  {"ReaverNew", "Order Reaver"},

  {"InquisitorNew", "Order Inquisitor"},

// Touhou Doom Characters/Monsters

  {"Fairy1New", "Lesser Fairy [blue]"},
  {"Fairy2New", "Greater Fairy [blue]"},
  {"Fairy3New", "Lesser Fairy [pink]"},
  {"Fairy4New", "Greater Fairy [pink]"},
  {"Fairy5New", "Greater Fairy [red]"},

  {"RumiaMidBossNew", "Rumia"},
  {"RumiaNew", "Rumia"},
  {"DaiyouseiNew", "Daiyousei"},
  {"CirnoNew", "Cirno"},
  {"MeilingMidBossNew", "Hong Meiling"},
  {"MeilingNew", "Hong Meiling"},

// TCOTD2 Monsters

  {"MiniSpiderNew", "Spider [smaller]"},
  {"ShotgunCultistNew", "Darkmoon Cultist [shotgun]"},
  {"ChainGunCultistNew", "Darkmoon Cultist [tommy gun]"},
  {"ThrallNew", "Darkmoon Cultist [magician]"},
  {"NightmareNew", "Nightmare"},
  {"SirenNightmareNew", "MEGA Nightmare"},
  {"VulgarNew", "Vulgar"},
  {"ClayDevilNew", "Clay Devil"},
  {"SoulHarvesterNew", "Soul Harvester"},
  {"ESoulNew", "Ethereal Soul"},
  {"DEWraithNew", "Wraith of the Eclipse"},
  {"ButcherZombieNew", "Bloated Butcher"},
  {"BloodZombieNew", "Axe Zombie"},

  {"HellHoundNew", "Hell Hound"},
  {"LargeSpiderNew", "Spider [huge]"},
  {"ShadowNew", "Grand Shadow Creature"},
  {"ApprenticeNew", "Darkmoon Grand Apprentice"},

  {"ThamuzNew", "\cfThamuz, The Dark God\c-"},
  {"TchernobogNew", "\cfTchernobog, The One That Binds\c-"}
};

Script "LifebarDisplayClientSide" (void) CLIENTSIDE
{
 While(GetCVar("dvds_actorlifebars") == 1 && GetActorProperty(1001,APROP_Health) > 0)
 {
  int activator;
  activator = ActivatorTid();
  SetActivatorToTarget(0);
  Delay(1);

  int class_index;
  int xpos = 0.0;
  int ypos = 0.0;

  for (int i = 0; i < 209; i++)
  {
   if (CheckActorClass(0, dvds_monsternames[i][0])) class_index = i;
  }

  int hpcritlevel = 2;
  if (GameSkill() == SKILL_VERY_EASY) hpcritlevel = 1; // 1.0%
  if (GameSkill() == SKILL_EASY) hpcritlevel = 1; // 1.5%
  if (GameSkill() == SKILL_NORMAL) hpcritlevel = 2; // 2.0%
  if (GameSkill() == SKILL_HARD) hpcritlevel = 2; // 2.5%
  if (GameSkill() == SKILL_VERY_HARD) hpcritlevel = 3; // 3.0%
  if (GameSkill() == 5) hpcritlevel = 4; // 4.0%

  int hplowlevel = 16;
  if (GameSkill() == SKILL_VERY_EASY) hplowlevel = 8; // 8.0%
  if (GameSkill() == SKILL_EASY) hplowlevel = 12; // 12.0%
  if (GameSkill() == SKILL_NORMAL) hplowlevel = 16; // 16.0%
  if (GameSkill() == SKILL_HARD) hplowlevel = 20; // 20.0%
  if (GameSkill() == SKILL_VERY_HARD) hplowlevel = 24; // 24.0%
  if (GameSkill() == 5) hplowlevel = 32; // 32.0%

  int actormaxhp = GetUserVariable(0, "user_MaxHP");
  int actorcurrhp = GetActorProperty(0, APROP_Health);
  int hppercentdisp;
  If(ActivatorTID() != Activator)
  {
   SetActivator(Activator);

   If (actormaxhp > 0)
   {
    hppercentdisp = (actorcurrhp * 100 / actormaxhp);

    int acounter;
    int bcounter;
    SetActivatorToTarget(0);
    If(ActivatorTID() != Activator)
    {
     If (CheckActorProperty(0, APROP_Friendly, 0)) SetFont ("MNRHPBAR");
     else If (CheckActorProperty(0, APROP_Friendly, 1)) SetFont ("MNGHPBAR");
     int stealthcheck = GetUserVariable(0, "user_isstealth");
     str stealthcheck2 = ""; if (stealthcheck > 0) stealthcheck2 = "?";
     int levelcheck = GetUserVariable(0, "user_monsterlevel");
     int leveldifference = levelcheck - PlayerLevel;

     SetActivator(Activator);
     SetHudSize (800,600,0);
     HudMessage (s:"a"; 0, 201, CR_GREEN, 400.0, 100.0, 0.05);
     SetFont ("SMALLFONT");
     SetHudSize (800,600,0);
     if (GetCVar("dvds_actorlifebarstats") == 1) HudMessage (i:actorcurrhp, s:"/", i:actormaxhp; 0, 199, CR_WHITE, 400.0, 100.0, 0.05);
     if (GetCVar("dvds_actorlifebarnames") == 1) HudMessage (s:dvds_monsternames[class_index][1],s:stealthcheck2; 0, 198, CR_WHITE, 400.0, 115.0, 0.05);
     SetFont ("BIGFONT");
     xpos = 274.2; //400.0;
     ypos = 100.0; //115.0;
     if (leveldifference <= 0) HudMessage (d:levelcheck; 0, 197, CR_LIGHTBLUE, xpos, ypos, 0.05);
     if (leveldifference >= 0 && leveldifference <= 20) HudMessage (d:levelcheck; 0, 197, CR_GOLD, xpos, ypos, 0.05);
     if (leveldifference >= 21 && leveldifference <= 50) HudMessage (d:levelcheck; 0, 197, CR_ORANGE, xpos, ypos, 0.05);
     if (leveldifference >= 51 && leveldifference <= 100) HudMessage (d:levelcheck; 0, 197, CR_RED, xpos, ypos, 0.05);
     if (leveldifference >= 101) HudMessage (d:levelcheck; 0, 197, CR_DARKRED, xpos, ypos, 0.05);

     SetFont ("SMALLFONT");
     for (acounter = 0; acounter <= hppercentdisp; acounter++)
     {
      bcounter = bcounter + 2.0;
      SetActivatorToTarget(0);

      if (hppercentdisp > 50) SetFont ("FILLNORM");
      else if (hppercentdisp > hplowlevel && hppercentdisp <= 50 ) SetFont ("FILLCAUT");
      else if (hppercentdisp > hpcritlevel && hppercentdisp <= hplowlevel ) SetFont ("FILLDANG");
      else if (hppercentdisp <= hpcritlevel ) SetFont ("FILLCRIT");

      SetActivator(Activator);
      SetHudSize (800,600,0);

      If(actorcurrhp > 0) hudmessage(s:"a"; 0, acounter+202, CR_GREEN, 303.0 + bcounter, 100.0, 0.05);
     }
     bcounter = 0;
     acounter = 0;
     Restart;
    }
   }
  }
 }
 If(GetCVar("dvds_actorlifebars") == 1 && GetActorProperty(0,APROP_Health) > 0) Restart;
}

script "CheckShotgunnerSpreads" (void)
{
 SetResultValue(GetCVAR("dvds_shotgunnerspread"));
}

script "CheckCrisisAttackType" (void)
{
 SetResultValue(GetCVAR("dvds_monstercrisisattacks"));
}

// Extends the 'lifespan' of Ultra Magic Missiles based on both Sorcery and Therapeusis stats
script "GetUltraMagicMissileFuse" (void)
{
 int Fuse, Extra;
 Fuse = 117;

 Extra = MiscellaneousVars[34] / 5; // 5 Sorcery = 1 point for the fuse
 Fuse += Extra;

 Extra = MiscellaneousVars[36] / 5; // 5 Therapeusis = 1 point for the fuse
 Fuse += Extra;
 SetResultValue(Fuse);
}

// For actual items that are stored in the inventory
script "UseCustomInventoryItem" (int type)
{
 int temp1, temp2, temp3, check1, check2, check3;
 int healmax;

 if (type == -7 && CheckActorInventory(1001,"ArtiInvisibilityNew") > 0) // Icon of the Defender
 {
  PowerupTimer[1] += (35 * 90);
  check1 += 1;
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"ArtiInvisibilityNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }

 if (type == -6 && CheckActorInventory(1001,"ArtiInvulnerabilityNew") > 0) // Ring of Invincibility
 {
  PowerupTimer[4] += (35 * 45);
  check1 += 1;
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"ArtiInvulnerabilityNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }

 if (type == -5 && CheckActorInventory(1001,"ArtiInvulnerability2New") > 0) // Icon of the Defender
 {
  PowerupTimer[4] += (35 * 45);
  check1 += 1;
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"ArtiInvulnerability2New",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }

 if (type == -4 && CheckActorInventory(1001,"ArtiHealingRadiusNew") > 0) // Mystic Ambit Incant
 {
  // Heal HP/Health [62.5%] up to 200%
  temp1 = GetActorProperty(1001,APROP_Health);
  healmax = MaxHealthTrue * 2;
  if (temp1 < healmax)
  {
   check1 += 1;
   temp1 += (MaxHealthTrue * 5 / 8);
   if (temp1 > healmax) temp1 = healmax;
   SetActorProperty(1001,APROP_Health,temp1);
  }

  // Heal MP/Mana [62.5%] up to 200%
  healmax = MaxMana * 2;
  if (CurrentMana < healmax)
  {
   check1 += 1;
   CurrentMana += (MaxMana * 5 / 8);
   if (CurrentMana > healmax) CurrentMana = healmax;
  }

  // Heal Stamina [125%] up to 500%
  healmax = ((MiscellaneousVars[22] * 5000) / 1000);
  if (MiscellaneousVars[21] < healmax)
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * 12500) / 10000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > healmax) MiscellaneousVars[21] = healmax;
  }

  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(192,128,192,0.55,192,128,192,0.01,0.77);
   TakeActorInventory(1001,"ArtiHealingRadiusNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == -3 && CheckActorInventory(1001,"ArtiBoostManaNew") > 0) // Krater of Might [Hexen]
 {
  if (CheckActorInventory(1001,"Mana1") < 500)
  {
   check1 += 1;
   GiveActorInventory(1001,"Mana1",500);
  }
  if (CheckActorInventory(1001,"Mana2") < 500)
  {
   check1 += 1;
   GiveActorInventory(1001,"Mana2",500);
  }
  if (CurrentMana < MaxMana * 2)
  {
   check1 += 1;
   CurrentMana = MaxMana * 2;
  }
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
   TakeActorInventory(1001,"ArtiBoostManaNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == -2 && CheckActorInventory(1001,"ArtiSuperHealthNew") > 0) // Mystic Urn [Heretic AND Hexen]
 {
  // Heal Health [~100 to 110% HP] up to 192.5% Max HP
  temp1 = GetActorProperty(1001,APROP_Health);
  healmax = ((MaxHealthTrue * 1925) / 1000);
  if (temp1 < healmax)
  {
   check1 += 1;
   temp1 += (MaxHealthTrue * random(100,110)) / 100;
   if (temp1 > healmax) temp1 = healmax;
   SetActorProperty(1001,APROP_Health,temp1);
  }
  // Heal Stamina [62.50%] up to 500%
  healmax = ((MiscellaneousVars[22] * 5000) / 1000);
  if (MiscellaneousVars[21] < healmax)
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * 6250) / 10000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > healmax) MiscellaneousVars[21] = healmax;
  }
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
   TakeActorInventory(1001,"ArtiSuperHealthNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == -1 && CheckActorInventory(1001,"ArtiHealthNew") > 0) // Quartz Flask [Heretic AND Hexen]
 {
  // Heal Health [~25 to 30% HP] up to 105% Max HP
  temp1 = GetActorProperty(1001,APROP_Health);
  healmax = ((MaxHealthTrue * 1050) / 1000);
  if (temp1 < healmax)
  {
   check1 += 1;
   temp1 += (MaxHealthTrue * random(25,30)) / 100;
   if (temp1 > healmax) temp1 = healmax;
   SetActorProperty(1001,APROP_Health,temp1);
  }

  // Heal Stamina [12.5%]
  healmax = MiscellaneousVars[22];
  if (MiscellaneousVars[21] < healmax)
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * 1250) / 10000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > healmax) MiscellaneousVars[21] = healmax;
  }
  if (check1 > 0)
  {
   PlaySound(1001,"misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
   TakeActorInventory(1001,"ArtiHealthNew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == 1 && CheckActorInventory(1001,"MedicinalHerb") > 0) // Medicinal Herb
 {
  // Heal Health [~25-35 HP]
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 < MaxHealthTrue)
  {
   check1 += 1;
   temp1 += random(25,35);
   if (temp1 > MaxHealthTrue) temp1 = MaxHealthTrue;
   SetActorProperty(1001,APROP_Health,temp1);
  }
  // Heal Stamina [~5.0% - ~7.0%]
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * random(50,70)) / 1000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
  if (check1 > 0)
  {
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.33,16,255,16,0.01,0.66);
   TakeActorInventory(1001,"MedicinalHerb",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == 2 && CheckActorInventory(1001,"StrongMedicine") > 0) // Strong Medicin(al Herb)
 {
  // Heal Health [~55-65 HP]
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 < MaxHealthTrue)
  {
   check1 += 1;
   temp1 += random(55,65);
   if (temp1 > MaxHealthTrue) temp1 = MaxHealthTrue;
   SetActorProperty(1001,APROP_Health,temp1);
  }

  // Heal Stamina [~11.0% - ~13.0%]
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * random(110,130)) / 1000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
  if (check1 > 0)
  {
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
   TakeActorInventory(1001,"StrongMedicine",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }


 if (type == 3 && CheckActorInventory(1001,"SpecialMedicine") > 0) // Special Medicin(al Herb)
 {
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 < MaxHealthTrue)
  {
   // Heal Health [~85-105 HP]
   check1 += 1;
   temp1 += random(85,105);
   if (temp1 > MaxHealthTrue) temp1 = MaxHealthTrue;
   SetActorProperty(1001,APROP_Health,temp1);
  }

  // Heal Stamina [~17.0% - ~21.0%]
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * random(170,210)) / 1000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
  if (check1 > 0)
  {
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.70,16,255,16,0.01,0.88);
   TakeActorInventory(1001,"SpecialMedicine",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }

 if (type == 4 && CheckActorInventory(1001,"YggdrasilDew") > 0) // Yggdrasil Dew
 {
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 < MaxHealthTrue)
  {
   // Heal Health [70.0% - 80.0%]
   check1 += 1;
   temp1 += ((MaxHealthTrue * random(700,800)) / 1000);
   if (temp1 > MaxHealthTrue) temp1 = MaxHealthTrue;
   SetActorProperty(1001,APROP_Health,temp1);
  }
  // Heal Mana [17.5% - 20.0%]
  if (CurrentMana < MaxMana)
  {
   check1 += 1;
   temp3 = (MaxMana * random(175,200)) / 1000;
   CurrentMana += temp3;
   if (CurrentMana > MaxMana) CurrentMana = MaxMana;
  }
  // Heal Stamina [70.0% - 80.0%]
  if (MiscellaneousVars[21] < MiscellaneousVars[22])
  {
   check1 += 1;
   temp2 = (MiscellaneousVars[22] * random(700,800)) / 1000;
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) temp2 = temp2 * 5 / 3;
   MiscellaneousVars[21] += temp2;
   if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
  }
  if (check1 > 0)
  {
   PlaySound(1001,"healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
   FadeRange(12,255,12,0.85,16,255,16,0.02,1.12);
   TakeActorInventory(1001,"YggdrasilDew",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 }

 if (type == 5 && CheckActorInventory(1001,"PaxaPunch") > 0) // Paxa Punch
 {
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 > 0 && PowerupTimer[10] < 6300 && PowerupTimer[11] < 6300)
  {
   // Oomph and Buff for a full minute
   PowerupTimer[10] += (60*35);
   PowerupTimer[11] += (60*35);
   PlaySound(1001,"use_paxa",CHAN_BODY,1.0,0,ATTN_NORM);
   PlaySound(1001,"use_paxa2",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"PaxaPunch",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 } 

 if (type == 6 && CheckActorInventory(1001,"LesserVimstone") > 0) // Lesser Vimstone
 {
  if (MiscellaneousVars[181] < 4) // Cooldown Timer is 0 and Tension is less than "100" [tier 4]
  {
   ACS_NamedExecuteAlways("SetTensionLevel",0,2,1);
   PlaySound(1001,"use_lesservimstone",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"LesserVimstone",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 } 

 if (type == 7 && CheckActorInventory(1001,"GreaterVimstone") > 0) // Greater Vimstone
 {
  if (MiscellaneousVars[181] < 7) // Cooldown Timer is 0 and Tension is less than "1000" [tier 7]
  {
   ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
   PlaySound(1001,"use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"GreaterVimstone",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 } 

 if (type == 8 && CheckActorInventory(1001,"MercuryBandana") > 0) // Mercury Bandana
 {
  temp1 = GetActorProperty(1001,APROP_Health);
  if (temp1 > 0 && PowerupTimer[12] < 6300)
  {
   // Acceleratle for a full minute
   PowerupTimer[12] += (60*35);
   PlaySound(1001,"use_mercurybandana",CHAN_BODY,1.0,0,ATTN_NORM);
   TakeActorInventory(1001,"MercuryBandana",1);
  }
  else
  {
   PlaySound(1001,"inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
  }
 } 

}

// Scripts for Footsteps

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// The credits go to Ryan Cordell for posting this as a resource <3
// He also credits
// "Credit goes to SolarSnowfall for the base, HotWax for optimization 
// on the script, Isle for further optimization, Kate for even further 
// optimization"
//------------------------------------------------------------------------

// #library "FOOTSTEP"
// #include "zcommon.acs"

#define V_OFFSET	20

int feet[8];		//footsteps on or off?
int v[8];			//velocity per player
int x;
int y;
int z;

FUNCTION int GetVelocity (void)
{
   int len;
   x = GetActorVelX(0);
   y = GetActorVelY(0);
   z = GetActorVelZ(0);

   int ang = vectorangle(x,y);
   if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
   else len = fixeddiv(x, cos(ang));

/*
   ang = vectorangle(len, z);
   if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
   else len = fixeddiv(len, cos(ang));
*/

   return len;
}

SCRIPT "FootSteps_PlayerEntersLevel" ENTER
{
   feet[PlayerNumber ()] = ON;
   ACS_NamedExecuteAlways ("FootSteps_SoundTables", 0);
   ACS_NamedExecuteAlways ("FootSteps_GetVelocity", 0);
   ACS_NamedExecuteAlways ("FootSteps_DoTheMaths", 0);
}

SCRIPT "FootSteps_PlayerRespawning" RESPAWN
{
   feet[PlayerNumber ()] = ON;
   ACS_NamedExecuteAlways ("FootSteps_SoundTables", 0);
   ACS_NamedExecuteAlways ("FootSteps_GetVelocity", 0);
   ACS_NamedExecuteAlways ("FootSteps_DoTheMaths", 0);
}

//This is the script that tracks the player's velocity.

SCRIPT "FootSteps_GetVelocity" (VOID)
{
   int p_num = PlayerNumber ();
   MiscellaneousVars[47] = 1;

   while (feet[p_num])
   {
      delay(1);

      v[p_num] = GetVelocity ()>>16;
   }
}

//=====================
// Do the floor maths.
//=====================

#DEFINE NUMFLOORTYPES 16

str FloorSound[NUMFLOORTYPES][250];

SCRIPT "FootSteps_DoTheMaths" (VOID)
{
   int i, counter;
   int delay_time = 2;
   int volume;
   MiscellaneousVars[47] = 1;

   while (feet[PlayerNumber ()])
   {
    delay_time = V_OFFSET -(3) - v[PlayerNumber ()]/2;
    if(delay_time<=0)
     delay_time=1;
    volume = (v[PlayerNumber ()] * 7);

      if (GetActorZ (0) == GetActorFloorZ (0))
      {
         // Loop through the different floor types
         for (i=0; i<NUMFLOORTYPES; i++) 
         {
            counter = 1;

            // Check through all the listed textures for this floor type
            while (counter < 250 && FloorSound[i][counter] != -1) {
               if (CheckActorFloorTexture(0, FloorSound[i][counter]))
               {
                  ActivatorSound (FloorSound[i][0], volume);

                  // No reason to keep looking
                  counter = 250;
               }
               counter++;
            }
         }
      }
      delay(delay_time+1);
   }
}

SCRIPT "FootSteps_SoundTables" OPEN
{
   // Initialize the array of floor sounds

   FloorSound[0][0] = "floor/tile";
   FloorSound[0][1] = "CEIL1_3";
   FloorSound[0][2] = "CEIL3_3";
   FloorSound[0][3] = "CEIL3_4";
   FloorSound[0][4] = "CONS1_1";
   FloorSound[0][5] = "CONS1_5";
   FloorSound[0][6] = "CONS1_7";
   FloorSound[0][7] = "COMP01";
   FloorSound[0][8] = "FLAT2";
   FloorSound[0][9] = "FLAT3";
   FloorSound[0][10] = "FLAT8";
   FloorSound[0][11] = "FLAT9";
   FloorSound[0][12] = "FLAT17";
   FloorSound[0][13] = "FLAT18";
   FloorSound[0][14] = "FLAT19";
   FloorSound[0][15] = "FLOOR0_5";
   FloorSound[0][16] = "FLOOR0_6";
   FloorSound[0][17] = "FLOOR0_7";
   FloorSound[0][18] = "FLOOR3_3";
   FloorSound[0][19] = "FLOOR4_1";
   FloorSound[0][20] = "FLOOR4_5";
   FloorSound[0][21] = "TLITE6_1";
   FloorSound[0][22] = "TLITE6_4";
   FloorSound[0][23] = "TLITE6_5";
   FloorSound[0][24] = "FLOOR5_1";
   FloorSound[0][25] = "FLOOR5_2";
   FloorSound[0][26] = "FLOOR5_3";
   FloorSound[0][27] = "FLOOR7_2";
   FloorSound[0][28] = "ADEL_F08"; //Check
   FloorSound[0][29] = "ADEL_F14"; //Check
   FloorSound[0][30] = "ADEL_F31"; //Check
   FloorSound[0][31] = "ADEL_F49"; //Check
   FloorSound[0][32] = "ADEL_F55"; //Check
   FloorSound[0][33] = "ADEL_F56"; //Check
   FloorSound[0][34] = "ADEL_F63"; //Check
   FloorSound[0][35] = "ADEL_J06"; //Check
   FloorSound[0][36] = "ADEL_J07"; //Check
   FloorSound[0][37] = "ADEL_J12"; //Check
   FloorSound[0][38] = "ADEL_J15"; //Check
   FloorSound[0][39] = "CFLOOR2"; //Check
   FloorSound[0][40] = "CFLOOR3"; //Check
   FloorSound[0][41] = "CFLOOR4"; //Check
   FloorSound[0][42] = "CITYF01"; //Check
   FloorSound[0][43] = "CITYF02"; //Check
   FloorSound[0][44] = "CITYF03"; //Check
   FloorSound[0][45] = "CITYF04"; //Check
   FloorSound[0][46] = "CITYF05"; //Check
   FloorSound[0][47] = "CITYF06"; //Check
   FloorSound[0][48] = "CITYF07"; //Check
   FloorSound[0][49] = "CITYF08"; //Check
   FloorSound[0][50] = "CITYF09"; //Check
   FloorSound[0][51] = "CITYF10"; //Check
   FloorSound[0][52] = "CITYF13"; //Check
   FloorSound[0][53] = "CITYF14"; //Check
   FloorSound[0][54] = "CITYF15"; //Check
   FloorSound[0][55] = "CITYF16"; //Check
   FloorSound[0][56] = "CITYF17"; //Check
   FloorSound[0][57] = "CITYF18"; //Check
   FloorSound[0][58] = "IKTCR05B"; //Check
   FloorSound[0][59] = "IKTCR05C"; //Check
   FloorSound[0][60] = "IKTKP11C"; //Check
   FloorSound[0][61] = "IKTKP18A"; //Check
   FloorSound[0][62] = "IKTKP18B"; //Check
   FloorSound[0][63] = "IKTKWL2B"; //Check
   FloorSound[0][64] = "NICK_A01"; //Check
   FloorSound[0][65] = "NICK_A07"; //Check
   FloorSound[0][66] = "NICK_A10"; //Check
   FloorSound[0][67] = "QFLAT02"; //Check
   FloorSound[0][68] = "QFLAT03"; //Check
   FloorSound[0][69] = "QFLAT04"; //Check
   FloorSound[0][70] = "QFLAT05"; //Check
   FloorSound[0][71] = "QFLAT06"; //Check
   FloorSound[0][72] = "QFLAT07"; //Check
   FloorSound[0][73] = "WALLF1"; //Check
   FloorSound[0][74] = "WALLF2"; //Check
   FloorSound[0][75] = "WALLF3"; //Check
   FloorSound[0][76] = "CONS1_3"; //Check
   FloorSound[0][77] = "GRNLITE1"; //Check
   FloorSound[0][78] = "NFBRGN01"; //Check
   FloorSound[0][79] = "NFBRKA03"; //Check
   FloorSound[0][80] = "NFCL31GN"; //Check
   FloorSound[0][81] = "NFCL31GR"; //Check
   FloorSound[0][82] = "NFCL32GN"; //Check
   FloorSound[0][83] = "NFCL32GR"; //Check
   FloorSound[0][84] = "NFCL33GN"; //Check
   FloorSound[0][85] = "NFCL33GR"; //Check
   FloorSound[0][86] = "NFCL41GN"; //Check
   FloorSound[0][87] = "NFCL41RD"; //Check
   FloorSound[0][88] = "NFCL42GN"; //Check
   FloorSound[0][89] = "NFCL42GR"; //Check
   FloorSound[0][90] = "NFCL42RD"; //Check
   FloorSound[0][91] = "NFCL43GN"; //Check
   FloorSound[0][92] = "NFCL43GR"; //Check
   FloorSound[0][93] = "NFCL52GN"; //Check
   FloorSound[0][94] = "NFCL52GR"; //Check
   FloorSound[0][95] = "NFCNS1_3"; //Check
   FloorSound[0][96] = "NFCSPN01"; //Check
   FloorSound[0][97] = "NFCSPN02"; //Check
   FloorSound[0][98] = "NFCSPN04"; //Check
   FloorSound[0][99] = "NFDM15BR"; //Check
   FloorSound[0][100] = "NFDM15GR"; //Check
   FloorSound[0][101] = "NFDM16BR"; //Check
   FloorSound[0][102] = "NFFL03GN"; //Check
   FloorSound[0][103] = "NFFL06BR"; //Check
   FloorSound[0][104] = "NFFL06GN"; //Check
   FloorSound[0][105] = "NFFL33GR"; //Check
   FloorSound[0][106] = "NFFL41GN"; //Check
   FloorSound[0][107] = "NFFL41GR"; //Check
   FloorSound[0][108] = "NFFL45GN"; //Check
   FloorSound[0][109] = "NFFL45GR"; //Check
   FloorSound[0][110] = "NFFL46GN"; //Check
   FloorSound[0][111] = "NFFL46GR"; //Check
   FloorSound[0][112] = "NFFL48B"; //Check
   FloorSound[0][113] = "NFFL52B"; //Check
   FloorSound[0][114] = "NFFL53B"; //Check
   FloorSound[0][115] = "NFFL54GN"; //Check
   FloorSound[0][116] = "NFFL54GR"; //Check
   FloorSound[0][117] = "NFFL54H"; //Check
   FloorSound[0][118] = "NFFL72GR"; //Check
   FloorSound[0][119] = "NFFT1BR"; //Check
   FloorSound[0][120] = "NFFT1GN"; //Check
   FloorSound[0][121] = "NFFT5GN"; //Check
   FloorSound[0][122] = "NFFT5GR"; //Check
   FloorSound[0][123] = "NFFT11GR"; //Check
   FloorSound[0][124] = "NFFT13GN"; //Check
   FloorSound[0][125] = "NFFT13GR"; //Check
   FloorSound[0][126] = "NFFT20BR"; //Check
   FloorSound[0][127] = "NFFT20GN"; //Check
   FloorSound[0][128] = "NFFT55GN"; //Check
   FloorSound[0][129] = "NFFT72BR"; //Check
   FloorSound[0][130] = "NFFT72GR"; //Check
   FloorSound[0][131] = "NFFT72RD"; //Check
   FloorSound[0][132] = "NFGCN1_1"; //Check
   FloorSound[0][133] = "NFGCN1_3"; //Check
   FloorSound[0][134] = "NFRR09GN"; //Check
   FloorSound[0][135] = "NFRR09GR"; //Check
   FloorSound[0][136] = "NFRR10GN"; //Check
   FloorSound[0][137] = "NFRR10GR"; //Check
   FloorSound[0][138] = "NFRR13BR"; //Check
   FloorSound[0][139] = "NFRR16GR"; //Check
   FloorSound[0][140] = "NFSL14GN"; //Check
   FloorSound[0][141] = "NFSL15GN"; //Check
   FloorSound[0][142] = "NFSPHT01"; //Check
   FloorSound[0][143] = "NFSTBN12"; //Check
   FloorSound[0][144] = "NFSTEP03"; //Check
   FloorSound[0][145] = "NFSTGN12"; //Check
   FloorSound[0][146] = "NFSTGY12"; //Check
   FloorSound[0][147] = "NFSTSK02"; //Check
   FloorSound[0][148] = "NFSTTN12"; //Check
   FloorSound[0][149] = "SLIME14"; //Check
   FloorSound[0][150] = "SLIME15"; //Check
   FloorSound[0][151] = "SLIME16"; //Check
   FloorSound[0][152] = "FLOOR0_1"; //Check - Doom (Pre-D2)
   FloorSound[0][153] = "FLOOR0_3"; //Check - Doom (Pre-D2)
   FloorSound[0][154] = "FLOOR0_6"; //Check - Doom (Pre-D2)
   FloorSound[0][155] = "FLOOR1_1"; //Check - Doom (Pre-D2)
   FloorSound[0][156] = "FLOOR1_7"; //Check - Doom (Pre-D2)
   FloorSound[0][157] = "FLOOR4_6"; //Check - Doom (Pre-D2)
   FloorSound[0][158] = "FLOOR4_8"; //Check - Doom (Pre-D2)
   FloorSound[0][159] = "RROCK25"; //Check - DVI Tile
   FloorSound[0][160] = "RROCK26"; //Check - DVI Tile
   FloorSound[0][161] = "RROCK28"; //Check - DVI Tile
   FloorSound[0][162] = "RROCK30"; //Check - DVI Tile
   FloorSound[0][163] = "RROCK31"; //Check - DVI Tile
   FloorSound[0][164] = "RROCK32"; //Check - DVI Tile
   FloorSound[0][165] = "RROCK33"; //Check - DVI Tile
   FloorSound[0][166] = "RROCK36"; //Check - DVI Tile
   FloorSound[0][167] = "AVFLAT10"; //Check - DVI Tile
   FloorSound[0][168] = "AVFLAT25"; //Check - DVI Tile
   FloorSound[0][169] = "AVFLAT26"; //Check - DVI Tile
   FloorSound[0][170] = "AVFLAT33"; //Check - DVI Tile
   FloorSound[0][171] = "R_01"; //Check - DVII Tile
   FloorSound[0][172] = "R_01A"; //Check - DVII Tile
   FloorSound[0][173] = "R_01D"; //Check - DVII Tile
   FloorSound[0][174] = "R_01G"; //Check - DVII Tile
   FloorSound[0][175] = "TILE_00"; //Check - DVII Tile
   FloorSound[0][176] = "TILE_01"; //Check - DVII Tile
   FloorSound[0][177] = "TILE_01B"; //Check - DVII Tile
   FloorSound[0][178] = "TILE_02"; //Check - DVII Tile
   FloorSound[0][179] = "TILE_03"; //Check - DVII Tile
   FloorSound[0][180] = "TILE_04"; //Check - DVII Tile
   FloorSound[0][181] = "TILE_05"; //Check - DVII Tile
   FloorSound[0][182] = "TILE_06"; //Check - DVII Tile
   FloorSound[0][183] = "TILE_07"; //Check - DVII Tile
   FloorSound[0][184] = "TILE_08"; //Check - DVII Tile
   FloorSound[0][185] = "TILE_09"; //Check - DVII Tile
   FloorSound[0][186] = "TILE_10"; //Check - DVII Tile
   FloorSound[0][187] = "TILE_11"; //Check - DVII Tile
   FloorSound[0][188] = "TILE_12"; //Check - DVII Tile
   FloorSound[0][189] = "TILE_12A"; //Check - DVII Tile
   FloorSound[0][190] = "TILE_13"; //Check - DVII Tile
   FloorSound[0][191] = "TILE_14"; //Check - DVII Tile
   FloorSound[0][192] = "TILE_15"; //Check - DVII Tile
   FloorSound[0][193] = "TILE_15B"; //Check - DVII Tile
   FloorSound[0][194] = "TILE_18"; //Check - DVII Tile
   FloorSound[0][195] = "TILE_19"; //Check - DVII Tile
   FloorSound[0][195] = "BRK_19"; //Check - DVII Tile
   FloorSound[0][196] = "BRK_21"; //Check - DVII Tile
   FloorSound[0][197] = "BRK_22"; //Check - DVII Tile
   FloorSound[0][198] = "GREEN_C1"; //Check - DVII Tile
   FloorSound[0][199] = "GREEN_C2"; //Check - DVII Tile
   FloorSound[0][200] = "RY_05"; //Check - DVII Tile
   FloorSound[0][201] = "HEXTILE1"; //Check - DVII Tile
   FloorSound[0][202] = "X14TUA1"; //Check - DVII Tile
   FloorSound[0][203] = "X14TUA2"; //Check - DVII Tile
   FloorSound[0][204] = "X14TUB2"; //Check - DVII Tile
   FloorSound[0][205] = "X14TUC1"; //Check - DVII Tile
   FloorSound[0][206] = "X14WA1"; //Check - DVII Tile
   FloorSound[0][207] = "X14WA2"; //Check - DVII Tile
   FloorSound[0][208] = "X14WB1"; //Check - DVII Tile
   FloorSound[0][209] = "X14WB2"; //Check - DVII Tile
   FloorSound[0][210] = "X14XA1"; //Check - DVII Tile
   FloorSound[0][211] = "X14XA2"; //Check - DVII Tile
   FloorSound[0][212] = "X14XB1"; //Check - DVII Tile
   FloorSound[0][213] = "X14XB2"; //Check - DVII Tile
   FloorSound[0][214] = "X14WA1"; //Check - DVII Tile
   FloorSound[0][215] = "X14WA2"; //Check - DVII Tile
   FloorSound[0][216] = "X14WB1"; //Check - DVII Tile
   FloorSound[0][217] = "X25T1A"; //Check - DVII Tile
   FloorSound[0][218] = "X25T1B"; //Check - DVII Tile
   FloorSound[0][219] = "X25T1C"; //Check - DVII Tile
   FloorSound[0][220] = "X25T2A"; //Check - DVII Tile
   FloorSound[0][221] = "X25T2B"; //Check - DVII Tile
   FloorSound[0][222] = "X25T2C"; //Check - DVII Tile
   FloorSound[0][223] = "TF_01"; //Check - DVII Tile
   FloorSound[0][224] = "TF_02"; //Check - DVII Tile
   FloorSound[0][225] = -1;

   FloorSound[1][0] = "floor/tile2";
   FloorSound[1][1] = "DEM1_1";
   FloorSound[1][2] = "DEM1_2";
   FloorSound[1][3] = "DEM1_3";
   FloorSound[1][4] = "DEM1_4";
   FloorSound[1][5] = "DEM1_5";
   FloorSound[1][6] = "DEM1_6";
   FloorSound[1][7] = "FLOOR4_6";
   FloorSound[1][8] = "FLOOR4_8";
   FloorSound[1][9] = "ADEL_F65"; //Check
   FloorSound[1][10] = "ADEL_F66"; //Check
   FloorSound[1][11] = "ADEL_F84"; //Check
   FloorSound[1][12] = "ADEL_J08"; //Check
   FloorSound[1][13] = "ADEL_J09"; //Check
   FloorSound[1][14] = "ADEL_J10"; //Check
   FloorSound[1][15] = "ADEL_J11"; //Check
   FloorSound[1][16] = "CFLOOR1"; //Check
   FloorSound[1][17] = "COLMF3"; //Check
   FloorSound[1][18] = "Q2FLAT05"; //Check
   FloorSound[1][19] = "Q2FLAT06"; //Check
   FloorSound[1][20] = "Q2FLAT07"; //Check
   FloorSound[1][21] = "Q2FLAT08"; //Check
   FloorSound[1][22] = "LITE7"; //Check
   FloorSound[1][23] = "NFLTB04H"; //Check
   FloorSound[1][24] = "NFLTB04V"; //Check
   FloorSound[1][25] = "NFLTW03H"; //Check
   FloorSound[1][26] = "NFLTW03V"; //Check
   FloorSound[1][27] = "NFLTW05H"; //Check
   FloorSound[1][28] = "NFLTW05V"; //Check
   FloorSound[1][29] = "MISC_01"; //Check
   FloorSound[1][30] = -1;

   FloorSound[2][0] = "floor/wood";
   FloorSound[2][1] = "CEIL1_1";
   FloorSound[2][2] = "CRATOP1";
   FloorSound[2][3] = "CRATOP2";
   FloorSound[2][4] = "FLAT5_1";
   FloorSound[2][5] = "FLAT5_2";
   FloorSound[2][6] = "ADEL_F12"; //Check
   FloorSound[2][7] = "ADEL_F13"; //Check
   FloorSound[2][8] = "ADEL_F54"; //Check
   FloorSound[2][9] = "ADEL_F67"; //Check
   FloorSound[2][10] = "ADEL_F68"; //Check
   FloorSound[2][11] = "ADEL_F71"; //Check
   FloorSound[2][12] = "ADEL_F72"; //Check
   FloorSound[2][13] = "ADEL_J18"; //Check
   FloorSound[2][14] = "ADEL_J19"; //Check
   FloorSound[2][15] = "DUNGF1"; //Check
   FloorSound[2][16] = "DUNGF2"; //Check
   FloorSound[2][17] = "DUNGF3"; //Check
   FloorSound[2][18] = "DUNGF4"; //Check
   FloorSound[2][19] = "FTUB1"; //Check
   FloorSound[2][20] = "FTUB2"; //Check
   FloorSound[2][21] = "FTUB3"; //Check
   FloorSound[2][22] = "NFWOOD"; //Check
   FloorSound[2][23] = "NICK_A02"; //Check
   FloorSound[2][24] = "NICK_A03"; //Check
   FloorSound[2][25] = "NICK_A06"; //Check
   FloorSound[2][26] = "NICK_A08"; //Check
   FloorSound[2][27] = "NICK_A09"; //Check
   FloorSound[2][28] = "OLA_F_01"; //Check
   FloorSound[2][29] = "OLA_F_02"; //Check
   FloorSound[2][30] = "SWITCH1"; //Check
   FloorSound[2][31] = "SWITCH2"; //Check
   FloorSound[2][32] = "SWITCH3"; //Check
   FloorSound[2][32] = "SWITCH4"; //Check
   FloorSound[2][34] = "WOODF1"; //Check
   FloorSound[2][35] = "WOODF2"; //Check
   FloorSound[2][36] = "WOODF3"; //Check
   FloorSound[2][37] = "WOODF4"; //Check
   FloorSound[2][38] = "WOODF5"; //Check
   FloorSound[2][39] = "WOODF6"; //Check
   FloorSound[2][40] = "WOODF7"; //Check
   FloorSound[2][41] = "WOODF8"; //Check
   FloorSound[2][42] = "NFPANL01"; //Check
   FloorSound[2][43] = "FLAT6"; //Check - DVI Texture
   FloorSound[2][44] = "FLAT7"; //Check - DVI Texture
   FloorSound[2][45] = "AVFLAT22"; //Check - DVI Tile
   FloorSound[2][46] = "AVFLAT37"; //Check - DVI Tile
   FloorSound[2][47] = "AVFLAT38"; //Check - DVI Tile
   FloorSound[2][48] = "WD_00A"; //Check - DVII Tile
   FloorSound[2][49] = "WD_00D"; //Check - DVII Tile
   FloorSound[2][50] = "WD_00F"; //Check - DVII Tile
   FloorSound[2][51] = "WD_00H"; //Check - DVII Tile
   FloorSound[2][52] = "WD_01"; //Check - DVII Tile
   FloorSound[2][53] = "WD_02"; //Check - DVII Tile
   FloorSound[2][54] = "WD_03"; //Check - DVII Tile
   FloorSound[2][55] = "WD_04"; //Check - DVII Tile
   FloorSound[2][56] = "WD_05"; //Check - DVII Tile
   FloorSound[2][57] = "WD_06"; //Check - DVII Tile
   FloorSound[2][58] = "WD_08"; //Check - DVII Tile
   FloorSound[2][59] = "WD_09"; //Check - DVII Tile
   FloorSound[2][60] = "WD_10"; //Check - DVII Tile
   FloorSound[2][61] = "WD_11"; //Check - DVII Tile
   FloorSound[2][62] = "WD_12"; //Check - DVII Tile
   FloorSound[2][63] = "WD_13"; //Check - DVII Tile
   FloorSound[2][64] = "WD_13J"; //Check - DVII Tile
   FloorSound[2][65] = "WD_13L"; //Check - DVII Tile
   FloorSound[2][66] = "WD_13P"; //Check - DVII Tile
   FloorSound[2][67] = "WD_13T"; //Check - DVII Tile
   FloorSound[2][68] = "WD_14"; //Check - DVII Tile
   FloorSound[2][69] = "WD_15"; //Check - DVII Tile
   FloorSound[2][70] = "WD_16"; //Check - DVII Tile
   FloorSound[2][71] = "WD_17"; //Check - DVII Tile
   FloorSound[2][72] = "WD_18"; //Check - DVII Tile
   FloorSound[2][73] = "WD_19"; //Check - DVII Tile
   FloorSound[2][74] = "WD_20"; //Check - DVII Tile
   FloorSound[2][75] = "WD_21"; //Check - DVII Tile
   FloorSound[2][76] = "CRT_01"; //Check
   FloorSound[2][77] = "CRT_01C"; //Check
   FloorSound[2][78] = "CRATOP3"; //Check
   FloorSound[2][79] = "WD01A"; //Check - DVII Tile
   FloorSound[2][80] = "WD01B"; //Check - DVII Tile
   FloorSound[2][81] = "WD01C"; //Check - DVII Tile

   FloorSound[2][82] = "WD01D"; //Check - DVII Tile
   FloorSound[2][83] = "WD02A"; //Check - DVII Tile
   FloorSound[2][84] = "WD02B"; //Check - DVII Tile
   FloorSound[2][85] = "WD02C"; //Check - DVII Tile
   FloorSound[2][86] = "WD02D"; //Check - DVII Tile
   FloorSound[2][87] = "WD03A"; //Check - DVII Tile
   FloorSound[2][88] = "WD03B"; //Check - DVII Tile
   FloorSound[2][89] = "WD04A"; //Check - DVII Tile
   FloorSound[2][90] = "WD04B"; //Check - DVII Tile
   FloorSound[2][91] = "WD05A"; //Check - DVII Tile
   FloorSound[2][92] = "WD06A"; //Check - DVII Tile
   FloorSound[2][93] = -1;

   // Hard Floors, First Section ---FULL, NO MORE ADDING TO THIS---
   FloorSound[3][0] = "floor/hard";
   FloorSound[3][1] = "CEIL3_1";
   FloorSound[3][2] = "CEIL3_2";
   FloorSound[3][3] = "CEIL3_5";
   FloorSound[3][4] = "CEIL3_6";
   FloorSound[3][5] = "CEIL5_1";
   FloorSound[3][6] = "CEIL5_2";
   FloorSound[3][7] = "FLAT5";
   FloorSound[3][8] = "FLOOR0_1";
   FloorSound[3][9] = "FLOOR0_2";
   FloorSound[3][10] = "FLOOR0_3";
   FloorSound[3][11] = "FLOOR1_6";
   FloorSound[3][12] = "FLOOR1_7";
   FloorSound[3][13] = "FLOOR7_1";
   FloorSound[3][14] = "GRNLITE1";
   FloorSound[3][15] = "MFLR8_1";
   FloorSound[3][16] = "ADEL_F62"; //Check
   FloorSound[3][17] = "ALTARF1"; //Check
   FloorSound[3][18] = "ALTARF2"; //Check
   FloorSound[3][19] = "M5"; //Check
   FloorSound[3][20] = "QFLAT01"; //Check
   FloorSound[3][21] = "NFGSTN01"; //Check
   FloorSound[3][22] = "NFPANL02"; //Check
   FloorSound[3][23] = "RROCK34"; //Check - DVI Tile
   FloorSound[3][24] = "AVFLAT01"; //Check - DVI Tile
   FloorSound[3][25] = "AVFLAT02"; //Check - DVI Tile
   FloorSound[3][26] = "AVFLAT04"; //Check - DVI Tile
   FloorSound[3][27] = "AVFLAT05"; //Check - DVI Tile
   FloorSound[3][28] = "AVFLAT07"; //Check - DVI Tile
   FloorSound[3][29] = "AVFLAT08"; //Check - DVI Tile
   FloorSound[3][30] = "AVFLAT09"; //Check - DVI Tile
   FloorSound[3][31] = "AVFLAT13"; //Check - DVI Tile
   FloorSound[3][32] = "AVFLAT14"; //Check - DVI Tile
   FloorSound[3][33] = "AVFLAT15"; //Check - DVI Tile
   FloorSound[3][34] = "AVFLAT17"; //Check - DVI Tile
   FloorSound[3][35] = "AVFLAT18"; //Check - DVI Tile
   FloorSound[3][36] = "AVFLAT19"; //Check - DVI Tile
   FloorSound[3][37] = "AVFLAT27"; //Check - DVI Tile
   FloorSound[3][38] = "AVFLAT29"; //Check - DVI Tile
   FloorSound[3][39] = "AVFLAT31"; //Check - DVI Tile
   FloorSound[3][40] = "AVFLAT32"; //Check - DVI Tile
   FloorSound[3][41] = "AVFLAT34"; //Check - DVI Tile
   FloorSound[3][42] = "BLU"; //Check - DVI Tile
   FloorSound[3][43] = "BLU_01"; //Check - DVII Tile
   FloorSound[3][44] = "BLU_02"; //Check - DVII Tile
   FloorSound[3][45] = "BLU_03"; //Check - DVII Tile
   FloorSound[3][46] = "BLU_05"; //Check - DVII Tile
   FloorSound[3][47] = "BLU_06"; //Check - DVII Tile
   FloorSound[3][48] = "BRK_01"; //Check - DVII Tile
   FloorSound[3][49] = "BRK_02"; //Check - DVII Tile
   FloorSound[3][50] = "BRK_04"; //Check - DVII Tile
   FloorSound[3][51] = "BRK_05"; //Check - DVII Tile
   FloorSound[3][52] = "BRK_5B"; //Check - DVII Tile
   FloorSound[3][53] = "BRK_06"; //Check - DVII Tile
   FloorSound[3][54] = "BRK_07"; //Check - DVII Tile
   FloorSound[3][55] = "BRK_7B"; //Check - DVII Tile
   FloorSound[3][56] = "BRK_08"; //Check - DVII Tile
   FloorSound[3][57] = "BRK_09"; //Check - DVII Tile
   FloorSound[3][58] = "BRK_10"; //Check - DVII Tile
   FloorSound[3][59] = "BRK_10B"; //Check - DVII Tile
   FloorSound[3][60] = "BRK_12"; //Check - DVII Tile
   FloorSound[3][61] = "BRK_12B"; //Check - DVII Tile
   FloorSound[3][62] = "BRK_13"; //Check - DVII Tile
   FloorSound[3][63] = "BRK_13B"; //Check - DVII Tile
   FloorSound[3][64] = "BRK_14"; //Check - DVII Tile
   FloorSound[3][65] = "BRK_14B"; //Check - DVII Tile
   FloorSound[3][66] = "BRK_15"; //Check - DVII Tile
   FloorSound[3][67] = "BRK_15B"; //Check - DVII Tile
   FloorSound[3][68] = "BRK_16"; //Check - DVII Tile
   FloorSound[3][69] = "BRK_16B"; //Check - DVII Tile
   FloorSound[3][70] = "BRK_16E"; //Check - DVII Tile
   FloorSound[3][71] = "BRK_16F"; //Check - DVII Tile
   FloorSound[3][72] = "PINK_02"; //Check - DVII Tile
   FloorSound[3][73] = "PINK_03"; //Check - DVII Tile
   FloorSound[3][74] = "R_03"; //Check - DVII Tile
   FloorSound[3][75] = "R_05"; //Check - DVII Tile
   FloorSound[3][76] = "R_06"; //Check - DVII Tile
   FloorSound[3][77] = "BRK_17"; //Check - DVII Tile
   FloorSound[3][78] = "CEMENT0"; //Check - DVII Tile
   FloorSound[3][79] = "CRK_02"; //Check - DVII Tile
   FloorSound[3][80] = "BLU_09"; //Check - DVII Tile
   FloorSound[3][81] = "R_09"; //Check - DVII Tile
   FloorSound[3][82] = "R_10"; //Check - DVII Tile
   FloorSound[3][83] = "R_15"; //Check - DVII Tile
   FloorSound[3][84] = "R_11"; //Check - DVII Tile
   FloorSound[3][85] = "R_13"; //Check - DVII Tile
   FloorSound[3][86] = "R_22"; //Check - DVII Tile
   FloorSound[3][87] = "R_04"; //Check - DVII Tile
   FloorSound[3][88] = "R_28"; //Check - DVII Tile
   FloorSound[3][89] = "R_25"; //Check - DVII Tile
   FloorSound[3][90] = "R_26"; //Check - DVII Tile
   FloorSound[3][91] = "R_27"; //Check - DVII Tile
   FloorSound[3][92] = "R_22A"; //Check - DVII Tile
   FloorSound[3][93] = "R_09A"; //Check - DVII Tile
   FloorSound[3][94] = "R_13A"; //Check - DVII Tile
   FloorSound[3][95] = "R_03A"; //Check - DVII Tile
   FloorSound[3][96] = "R_05A"; //Check - DVII Tile
   FloorSound[3][97] = "R_16"; //Check - DVII Tile
   FloorSound[3][98] = "R_02"; //Check - DVII Tile
   FloorSound[3][99] = "R_19J"; //Check - DVII Tile
   FloorSound[3][100] = "R_29"; //Check - DVII Tile
   FloorSound[3][101] = "R_30"; //Check - DVII Tile
   FloorSound[3][102] = "R_28J"; //Check - DVII Tile
   FloorSound[3][103] = "R_28L"; //Check - DVII Tile
   FloorSound[3][104] = "R_28N"; //Check - DVII Tile
   FloorSound[3][105] = "R_28O"; //Check - DVII Tile
   FloorSound[3][106] = "R_20"; //Check - DVII Tile
   FloorSound[3][107] = "PUZZ_2A"; //Check - DVII Tile
   FloorSound[3][108] = "PUZZ_4A"; //Check - DVII Tile
   FloorSound[3][109] = "BLU_04"; //Check - DVII Tile
   FloorSound[3][110] = "BLU_08"; //Check - DVII Tile
   FloorSound[3][111] = "BLU_09C"; //Check - DVII Tile
   FloorSound[3][112] = "BLU_11"; //Check - DVII Tile
   FloorSound[3][113] = "BLU_12"; //Check - DVII Tile
   FloorSound[3][114] = "BLU_12B"; //Check - DVII Tile
   FloorSound[3][115] = "BLU_13"; //Check - DVII Tile
   FloorSound[3][116] = "BLU_15"; //Check - DVII Tile
   FloorSound[3][117] = "BLU_19"; //Check - DVII Tile
   FloorSound[3][118] = "BLU_20"; //Check - DVII Tile
   FloorSound[3][119] = "BLU_21"; //Check - DVII Tile
   FloorSound[3][120] = "BLU_22"; //Check - DVII Tile
   FloorSound[3][121] = "BLU_22J"; //Check - DVII Tile
   FloorSound[3][122] = "BLU_23"; //Check - DVII Tile
   FloorSound[3][123] = "BLU_24"; //Check - DVII Tile
   FloorSound[3][124] = "BLU_24J"; //Check - DVII Tile
   FloorSound[3][125] = "BLU_24L"; //Check - DVII Tile
   FloorSound[3][126] = "BLU_24N"; //Check - DVII Tile
   FloorSound[3][127] = "BLU_24O"; //Check - DVII Tile
   FloorSound[3][128] = "BLU_25"; //Check - DVII Tile
   FloorSound[3][129] = "BLU_26"; //Check - DVII Tile
   FloorSound[3][130] = "PANEL_01"; //Check - DVII Tile
   FloorSound[3][131] = "PANEL_02"; //Check - DVII Tile
   FloorSound[3][132] = "PANEL_3"; //Check - DVII Tile
   FloorSound[3][133] = "CRK_07"; //Check - DVII Texture
   FloorSound[3][134] = "CRK_08"; //Check - DVII Texture
   FloorSound[3][135] = "CRK_09"; //Check - DVII Texture
   FloorSound[3][136] = "CRK_11"; //Check - DVII Texture
   FloorSound[3][137] = "CRK_13"; //Check - DVII Texture
   FloorSound[3][138] = "CRK_14"; //Check - DVII Texture
   FloorSound[3][139] = "TLITE6_A"; //Check - DVII Texture
   FloorSound[3][140] = "TLITE7_1"; //Check - DVII Texture
   FloorSound[3][141] = "TLITE7_2"; //Check - DVII Texture
   FloorSound[3][142] = "TLITE7_3"; //Check - DVII Texture
   FloorSound[3][143] = "TLITE7_4"; //Check - DVII Texture
   FloorSound[3][144] = "TLITE9_1"; //Check - DVII Texture
   FloorSound[3][145] = "TLITE9_2"; //Check - DVII Texture
   FloorSound[3][146] = "TLITE9_3"; //Check - DVII Texture
   FloorSound[3][147] = "TLITE9_4"; //Check - DVII Texture
   FloorSound[3][148] = "TLITE9_5"; //Check - DVII Texture
   FloorSound[3][149] = "TLITE9_6"; //Check - DVII Texture
   FloorSound[3][150] = "TLITEA_1"; //Check - DVII Texture
   FloorSound[3][151] = "TLITEA_2"; //Check - DVII Texture
   FloorSound[3][152] = "TLITEA_3"; //Check - DVII Texture
   FloorSound[3][153] = "TLITEA_4"; //Check - DVII Texture
   FloorSound[3][154] = "TLITE_B1"; //Check - DVII Texture
   FloorSound[3][155] = "TLITE_B3"; //Check - DVII Texture
   FloorSound[3][156] = "TLITE_B5"; //Check - DVII Texture
   FloorSound[3][157] = "TLITE_B7"; //Check - DVII Texture
   FloorSound[3][158] = "TLITE_B9"; //Check - DVII Texture
   FloorSound[3][159] = "TLITE_BB"; //Check - DVII Texture
   FloorSound[3][160] = "TLITE_G1"; //Check - DVII Texture
   FloorSound[3][161] = "TLITE_G3"; //Check - DVII Texture
   FloorSound[3][162] = "TLITE_G5"; //Check - DVII Texture
   FloorSound[3][163] = "TLITE_G7"; //Check - DVII Texture
   FloorSound[3][164] = "TLITE_G9"; //Check - DVII Texture
   FloorSound[3][165] = "TLITE_GB"; //Check - DVII Texture
   FloorSound[3][166] = "TLITE_R1"; //Check - DVII Texture
   FloorSound[3][167] = "TLITE_R3"; //Check - DVII Texture
   FloorSound[3][168] = "TLITE_R5"; //Check - DVII Texture
   FloorSound[3][169] = "TLITE_R7"; //Check - DVII Texture
   FloorSound[3][170] = "TLITE_R9"; //Check - DVII Texture
   FloorSound[3][171] = "TLITE_RB"; //Check - DVII Texture
   FloorSound[3][172] = "TLITE_W1"; //Check - DVII Texture
   FloorSound[3][173] = "TLITE_W3"; //Check - DVII Texture
   FloorSound[3][174] = "TLITE_W5"; //Check - DVII Texture
   FloorSound[3][175] = "TLITE_W7"; //Check - DVII Texture
   FloorSound[3][176] = "TLITE_W9"; //Check - DVII Texture
   FloorSound[3][177] = "TLITE_WB"; //Check - DVII Texture
   FloorSound[3][178] = "TLITE_Y1"; //Check - DVII Texture
   FloorSound[3][179] = "TLITE_Y3"; //Check - DVII Texture
   FloorSound[3][180] = "TLITE_Y5"; //Check - DVII Texture
   FloorSound[3][181] = "TLITE_Y7"; //Check - DVII Texture
   FloorSound[3][182] = "TLITE_Y9"; //Check - DVII Texture
   FloorSound[3][183] = "TLITE_YB"; //Check - DVII Texture
   FloorSound[3][184] = "TLITE_BW"; //Check - DVII Texture
   FloorSound[3][185] = "TLITE_BX"; //Check - DVII Texture
   FloorSound[3][186] = "TLITE_BZ"; //Check - DVII Texture
   FloorSound[3][187] = "TLITE_GW"; //Check - DVII Texture
   FloorSound[3][188] = "TLITE_GX"; //Check - DVII Texture
   FloorSound[3][189] = "TLITE_GZ"; //Check - DVII Texture
   FloorSound[3][190] = "TLITE_RW"; //Check - DVII Texture
   FloorSound[3][191] = "TLITE_RX"; //Check - DVII Texture
   FloorSound[3][192] = "TLITE_RZ"; //Check - DVII Texture
   FloorSound[3][193] = "TLITE_YW"; //Check - DVII Texture
   FloorSound[3][194] = "TLITE_YX"; //Check - DVII Texture
   FloorSound[3][195] = "TLITE_YZ"; //Check - DVII Texture
   FloorSound[3][196] = "CEMENT_2"; //Check - DVII Texture
   FloorSound[3][197] = "CEMENT_3"; //Check - DVII Texture
   FloorSound[3][198] = "CEMENT_4"; //Check - DVII Texture
   FloorSound[3][199] = "CEMENT_5"; //Check - DVII Texture
   FloorSound[3][200] = "CEMENT_6"; //Check - DVII Texture
   FloorSound[3][201] = "CEMENT_7"; //Check - DVII Texture
   FloorSound[3][202] = "CEMENT_8"; //Check - DVII Texture
   FloorSound[3][203] = "CEMENT_9"; //Check - DVII Texture
   FloorSound[3][204] = "CEMENT_A"; //Check - DVII Texture
   FloorSound[3][205] = "CEMENT_B"; //Check - DVII Texture
   FloorSound[3][206] = "CEMENT_C"; //Check - DVII Texture
   FloorSound[3][207] = "CEMENT_D"; //Check - DVII Texture
   FloorSound[3][208] = "CEMENT_E"; //Check - DVII Texture
   FloorSound[3][209] = "CEMENT_F"; //Check - DVII Texture
   FloorSound[3][210] = "CEMENT_G"; //Check - DVII Texture
   FloorSound[3][211] = "CEMENT_H"; //Check - DVII Texture
   FloorSound[3][212] = "CEMENT_I"; //Check - DVII Texture
   FloorSound[3][213] = "CEMENT_J"; //Check - DVII Texture
   FloorSound[3][214] = "CEMENT_K"; //Check - DVII Texture
   FloorSound[3][215] = "CEMENT_L"; //Check - DVII Texture
   FloorSound[3][216] = "CEMENT_M"; //Check - DVII Texture
   FloorSound[3][217] = "CEMENT_N"; //Check - DVII Texture
   FloorSound[3][218] = "CEMENT_O"; //Check - DVII Texture
   FloorSound[3][219] = "CEMENT_P"; //Check - DVII Texture
   FloorSound[3][220] = "BRIK_26"; //Check - DVII Texture
   FloorSound[3][221] = "BRK_09C"; //Check - DVII Texture
   FloorSound[3][222] = "BRK_09D"; //Check - DVII Texture
   FloorSound[3][223] = "BRK_09E"; //Check - DVII Texture
   FloorSound[3][224] = "BRK_16D"; //Check - DVII Texture
   FloorSound[3][225] = "BRK_18"; //Check - DVII Texture
   FloorSound[3][226] = "BRK_20"; //Check - DVII Texture
   FloorSound[3][227] = "BRK_23"; //Check - DVII Texture
   FloorSound[3][228] = "BRK_24"; //Check - DVII Texture
   FloorSound[3][229] = "BRK_25"; //Check - DVII Texture
   FloorSound[3][230] = "BRK_26"; //Check - DVII Texture
   FloorSound[3][231] = "BRK_27"; //Check - DVII Texture
   FloorSound[3][232] = "BRK_28"; //Check - DVII Texture
   FloorSound[3][233] = "BRK_28B"; //Check - DVII Texture
   FloorSound[3][234] = "BRK_30"; //Check - DVII Texture
   FloorSound[3][235] = "BRK_30B"; //Check - DVII Texture
   FloorSound[3][236] = "BRK_31"; //Check - DVII Texture
   FloorSound[3][237] = "BRK_31B"; //Check - DVII Texture
   FloorSound[3][238] = "BRK_31E"; //Check - DVII Texture
   FloorSound[3][239] = "BRK_31F"; //Check - DVII Texture
   FloorSound[3][240] = "BRK_32"; //Check - DVII Texture
   FloorSound[3][241] = "BRK_32B"; //Check - DVII Texture
   FloorSound[3][242] = "BRK_32E"; //Check - DVII Texture
   FloorSound[3][243] = "BRK_32F"; //Check - DVII Texture
   FloorSound[3][244] = "GREEN_05"; //Check - DVII Texture
   FloorSound[3][245] = "GREEN_08"; //Check - DVII Texture
   FloorSound[3][246] = "GREEN_11"; //Check - DVII Texture
   FloorSound[3][247] = "GREEN_12"; //Check - DVII Texture
   FloorSound[3][248] = "GREEN_16"; //Check - DVII Texture
   FloorSound[3][249] = -1;

   FloorSound[4][0] = "floor/carpet";
   FloorSound[4][1] = "CEIL4_1";
   FloorSound[4][2] = "CEIL4_2";
   FloorSound[4][3] = "CEIL4_3";
   FloorSound[4][4] = "FLAT5_3";
   FloorSound[4][5] = "FLAT5_4";
   FloorSound[4][6] = "FLAT5_5";
   FloorSound[4][7] = "FLAT14";
   FloorSound[4][8] = "FLOOR1_1";
   FloorSound[4][9] = "CRATEF1"; //Check
   FloorSound[4][10] = "CRATEF2"; //Check
   FloorSound[4][12] = "IKFLAT02"; //Check
   FloorSound[4][13] = "IKFLAT2"; //Check
   FloorSound[4][14] = "IKFLAT4"; //Check
   FloorSound[4][15] = "TRAV_F01"; //Check
   FloorSound[4][16] = "TRAV_F02"; //Check
   FloorSound[4][17] = "TRAV_F04"; //Check
   FloorSound[4][18] = "N5FL14RD"; //Check
   FloorSound[4][19] = "NFBRLT01"; //Check
   FloorSound[4][20] = "NFBRWN01"; //Check
   FloorSound[4][21] = "NFBRWN02"; //Check
   FloorSound[4][22] = "NFCTOP03"; //Check
   FloorSound[4][23] = "NFFT14RD"; //Check
   FloorSound[4][24] = "NFFT19BR"; //Check
   FloorSound[4][25] = "NFFT19GN"; //Check
   FloorSound[4][26] = "NFGNL1H"; //Check
   FloorSound[4][27] = "NFGRLT01"; //Check
   FloorSound[4][28] = "NFRDLT01"; //Check
   FloorSound[4][29] = "CARP_01"; //Check - DVII Texture
   FloorSound[4][30] = "CARP_02"; //Check - DVII Texture
   FloorSound[4][31] = "CARP_03"; //Check - DVII Texture
   FloorSound[4][32] = "CARP_04A"; //Check - DVII Texture
   FloorSound[4][33] = "CARP_04C"; //Check - DVII Texture
   FloorSound[4][34] = "CARP_05"; //Check - DVII Texture
   FloorSound[4][35] = "CARP_06"; //Check - DVII Texture
   FloorSound[4][36] = "CARP_07"; //Check - DVII Texture
   FloorSound[4][37] = "CARP_08"; //Check - DVII Texture
   FloorSound[4][38] = "CARP_09"; //Check - DVII Texture
   FloorSound[4][39] = "CARP_10"; //Check - DVII Texture
   FloorSound[4][40] = "CARP_11"; //Check - DVII Texture
   FloorSound[4][41] = "CARP_11C"; //Check - DVII Texture
   FloorSound[4][42] = "CARP_12"; //Check - DVII Texture
   FloorSound[4][43] = "CARP_12C"; //Check - DVII Texture
   FloorSound[4][44] = "CARP_13"; //Check - DVII Texture
   FloorSound[4][45] = "X25C01"; //Check - DVII Tile
   FloorSound[4][46] = "X25C02"; //Check - DVII Tile
   FloorSound[4][47] = "X25C03"; //Check - DVII Tile
   FloorSound[4][48] = "X25C04"; //Check - DVII Tile
   FloorSound[4][49] = -1;

   // Rock Floors, First Section
   FloorSound[5][0] = "floor/rock";
   FloorSound[5][1] = "FLAT1_1";
   FloorSound[5][2] = "FLAT1_2";
   FloorSound[5][3] = "FLAT5_6";
   FloorSound[5][4] = "FLAT5_7";
   FloorSound[5][5] = "FLAT5_8";
   FloorSound[5][6] = "FLOOR5_4";
   FloorSound[5][7] = "GRNROCK";
   FloorSound[5][8] = "RROCK03";
   FloorSound[5][9] = "RROCK04";
   FloorSound[5][10] = "RROCK09";
   FloorSound[5][11] = "RROCK10";
   FloorSound[5][12] = "RROCK11";
   FloorSound[5][13] = "RROCK12";
   FloorSound[5][14] = "RROCK13";
   FloorSound[5][15] = "RROCK14";
   FloorSound[5][16] = "RROCK15";
   FloorSound[5][17] = "SLIME13";
   FloorSound[5][18] = "ADEL_F47"; //Check
   FloorSound[5][19] = "ADEL_F48"; //Check
   FloorSound[5][20] = "CITYF20"; //Check
   FloorSound[5][21] = "ROCKF1"; //Check
   FloorSound[5][22] = "ROCKF2"; //Check
   FloorSound[5][23] = "ROCKF3"; //Check
   FloorSound[5][24] = "ROCKF4"; //Check
   FloorSound[5][25] = "ROCKF5"; //Check
   FloorSound[5][26] = "ROCKF6"; //Check
   FloorSound[5][27] = "ROCKF7"; //Check
   FloorSound[5][28] = "ROCKF8"; //Check
   FloorSound[5][29] = "STONEF"; //Check
   FloorSound[5][30] = "NFRR01GR"; //Check
   FloorSound[5][31] = "RROCK01"; //Check
   FloorSound[5][32] = "RROCK16"; //Check
   FloorSound[5][33] = "RROCK17"; //Check
   FloorSound[5][34] = "RROCK18"; //Check
   FloorSound[5][35] = "RROCK19"; //Check
   FloorSound[5][36] = "AVFLAT05"; //Check - DV1 Texture
   FloorSound[5][37] = "ROSA04"; //Check - DV1 Texture
   FloorSound[5][38] = "RROCK21"; //Check - DV1 Texture
   FloorSound[5][39] = "RROCK22"; //Check - DV1 Texture
   FloorSound[5][40] = "RROCK23"; //Check - DV1 Texture
   FloorSound[5][41] = "RROCK24"; //Check - DV1 Texture
   FloorSound[5][42] = "RROCK27"; //Check - DV1 Texture
   FloorSound[5][43] = "RROCKB"; //Check - DV1 Texture
   FloorSound[5][44] = "RROCKG"; //Check - DV1 Texture
   FloorSound[5][45] = "MUTX01"; //Check - DV1 Texture
   FloorSound[5][46] = "MUTX02"; //Check - DV1 Texture
   FloorSound[5][47] = "MUTX03"; //Check - DV1 Texture
   FloorSound[5][48] = "MUTX04"; //Check - DV1 Texture
   FloorSound[5][49] = "RROCK35"; //Check - DVI Tile
   FloorSound[5][50] = "AVFLAT03"; //Check - DVI Tile
   FloorSound[5][51] = "AVFLAT16"; //Check - DVI Tile
   FloorSound[5][52] = "AVFLAT23"; //Check - DVI Tile
   FloorSound[5][53] = "AVFLAT24"; //Check - DVI Tile
   FloorSound[5][54] = "AVFLAT36"; //Check - DVI Tile
   FloorSound[5][55] = "GREEN_04"; //Check - DVII Texture
   FloorSound[5][56] = "MISC_02"; //Check - DVII Texture
   FloorSound[5][57] = "MFLR8_5"; //Check - DVII Texture
   FloorSound[5][58] = "SOIL_01"; //Check - DVII Texture
   FloorSound[5][59] = "R_19"; //Check - DVII Texture
   FloorSound[5][60] = "R_19A"; //Check - DVII Texture
   FloorSound[5][61] = "R_17"; //Check - DVII Texture
   FloorSound[5][62] = "R_23"; //Check - DVII Texture
   FloorSound[5][63] = "R_19B"; //Check - DVII Texture
   FloorSound[5][64] = "R_19O"; //Check - DVII Texture
   FloorSound[5][65] = "R_22E"; //Check - DVII Texture
   FloorSound[5][66] = "BLU_17"; //Check - DVII Texture
   FloorSound[5][67] = "RK_02"; //Check - DVII Texture
   FloorSound[5][68] = "RK_03"; //Check - DVII Texture
   FloorSound[5][69] = "RK_04"; //Check - DVII Texture
   FloorSound[5][70] = "RK_05"; //Check - DVII Texture
   FloorSound[5][71] = "RK_06"; //Check - DVII Texture
   FloorSound[5][72] = "RK_07"; //Check - DVII Texture
   FloorSound[5][73] = "RK_08"; //Check - DVII Texture
   FloorSound[5][74] = "RK_09"; //Check - DVII Texture
   FloorSound[5][75] = "RK_10"; //Check - DVII Texture
   FloorSound[5][76] = "RK_11"; //Check - DVII Texture
   FloorSound[5][77] = "RK_11J"; //Check - DVII Texture
   FloorSound[5][78] = "RK_11O"; //Check - DVII Texture
   FloorSound[5][79] = "CRK_04"; //Check - DVII Texture
   FloorSound[5][80] = "CRK_05"; //Check - DVII Texture
   FloorSound[5][81] = "CRK_06"; //Check - DVII Texture
   FloorSound[5][82] = "CRK_10"; //Check - DVII Texture
   FloorSound[5][83] = "RROCK01A"; //Check
   FloorSound[5][84] = "RROCK02B"; //Check
   FloorSound[5][85] = "RROCK04A"; //Check
   FloorSound[5][86] = "RROCK13B"; //Check
   FloorSound[5][87] = "GREEN_14"; //Check
   FloorSound[5][88] = -1;

   // Metal 1, First Section ---FULL, NO MORE ADDING TO THIS---
   FloorSound[6][0] = "floor/metal";
   FloorSound[6][1] = "CEIL1_2";
   FloorSound[6][2] = "FLAT1_3";
   FloorSound[6][3] = "FLAT4";
   FloorSound[6][4] = "FLAT20";
   FloorSound[6][5] = "FLAT22";
   FloorSound[6][6] = "FLAT23";
   FloorSound[6][7] = "GATE1";
   FloorSound[6][8] = "GATE2";
   FloorSound[6][9] = "GATE3";
   FloorSound[6][10] = "GATE4";
   FloorSound[6][11] = "STEP1";
   FloorSound[6][12] = "STEP2";
   FloorSound[6][13] = "MFLR8_2";
   FloorSound[6][14] = "16X16"; //Check
   FloorSound[6][15] = "T_FL01"; //Check
   FloorSound[6][16] = "T_FL02"; //Check
   FloorSound[6][17] = "16X16LT"; //Check
   FloorSound[6][18] = "A-DAN1"; //Check
   FloorSound[6][19] = "A-DAN2"; //Check
   FloorSound[6][20] = "A-DAN3"; //Check
   FloorSound[6][21] = "A-DAN4"; //Check
   FloorSound[6][22] = "A-DAN5"; //Check
   FloorSound[6][23] = "ADEL_F09"; //Check
   FloorSound[6][24] = "ADEL_F16"; //Check
   FloorSound[6][25] = "ADEL_F33"; //Check
   FloorSound[6][26] = "ADEL_F34"; //Check
   FloorSound[6][27] = "ADEL_F36"; //Check
   FloorSound[6][28] = "ADEL_F50"; //Check
   FloorSound[6][29] = "ADEL_F51"; //Check
   FloorSound[6][30] = "ADEL_F52"; //Check
   FloorSound[6][31] = "ADEL_F53"; //Check
   FloorSound[6][32] = "ADEL_F57"; //Check
   FloorSound[6][33] = "ADEL_F58"; //Check
   FloorSound[6][34] = "ADEL_F59"; //Check
   FloorSound[6][35] = "ADEL_F60"; //Check
   FloorSound[6][36] = "ADEL_F61"; //Check
   FloorSound[6][37] = "ADEL_F64"; //Check
   FloorSound[6][38] = "ADEL_F73"; //Check
   FloorSound[6][39] = "ADEL_F74"; //Check
   FloorSound[6][40] = "ADEL_F80"; //Check
   FloorSound[6][41] = "ADEL_F81"; //Check
   FloorSound[6][42] = "ADEL_F82"; //Check
   FloorSound[6][43] = "ADEL_F83"; //Check
   FloorSound[6][44] = "ADEL_J03"; //Check
   FloorSound[6][45] = "ADEL_J13"; //Check
   FloorSound[6][46] = "ADEL_J16"; //Check
   FloorSound[6][47] = "BRFLR1"; //Check
   FloorSound[6][48] = "BRFLR2"; //Check
   FloorSound[6][49] = "BRFLR2B"; //Check
   FloorSound[6][50] = "BRFLR3"; //Check
   FloorSound[6][51] = "BRFLR3B"; //Check
   FloorSound[6][52] = "BRFLR4"; //Check
   FloorSound[6][53] = "BRFLR4B"; //Check
   FloorSound[6][54] = "BRFLR4B"; //Check
   FloorSound[6][55] = "COPF01"; //Check
   FloorSound[6][56] = "COPF02"; //Check
   FloorSound[6][57] = "COPF03"; //Check
   FloorSound[6][58] = "COPF04"; //Check
   FloorSound[6][59] = "COPF05"; //Check
   FloorSound[6][60] = "COPF06"; //Check
   FloorSound[6][61] = "COPF07"; //Check
   FloorSound[6][62] = "COPF08"; //Check
   FloorSound[6][63] = "COPF09"; //Check
   FloorSound[6][64] = "COPF10"; //Check
   FloorSound[6][65] = "COPF11"; //Check
   FloorSound[6][66] = "COPF12"; //Check
   FloorSound[6][67] = "ECOPF1"; //Check
   FloorSound[6][68] = "ECOPF2"; //Check
   FloorSound[6][69] = "ECOPF3"; //Check
   FloorSound[6][70] = "ECOPF4"; //Check
   FloorSound[6][71] = "ECOPF5"; //Check
   FloorSound[6][72] = "FLOOR1"; //Check
   FloorSound[6][73] = "FLOOR2"; //Check
   FloorSound[6][74] = "FLOOR3"; //Check
   FloorSound[6][75] = "FLOOR4"; //Check
   FloorSound[6][76] = "GRIDR"; //Check
   FloorSound[6][77] = "IKLITE2"; //Check
   FloorSound[6][78] = "IKLITE3"; //Check
   FloorSound[6][79] = "IKLITF01"; //Check
   FloorSound[6][80] = "IKLITF07"; //Check
   FloorSound[6][81] = "IKMTWL02"; //Check
   FloorSound[6][82] = "IKMTWL04"; //Check
   FloorSound[6][83] = "IKTKPN2"; //Check
   FloorSound[6][84] = "IKTKPN3"; //Check
   FloorSound[6][85] = "IKTKPN4"; //Check
   FloorSound[6][86] = "IKTPN02B"; //Check
   FloorSound[6][87] = "IKTPW06A"; //Check
   FloorSound[6][88] = "IKTPW06B"; //Check
   FloorSound[6][89] = "IKTPW06C"; //Check
   FloorSound[6][90] = "LITEF01"; //Check
   FloorSound[6][91] = "LITEF02"; //Check
   FloorSound[6][92] = "LITEF03"; //Check
   FloorSound[6][93] = "LITEF04"; //Check
   FloorSound[6][94] = "LITEF05"; //Check
   FloorSound[6][95] = "LITEF06"; //Check
   FloorSound[6][96] = "LITEF07"; //Check
   FloorSound[6][97] = "LITEF08"; //Check
   FloorSound[6][98] = "LITEF09"; //Check
   FloorSound[6][99] = "LITEF10"; //Check
   FloorSound[6][100] = "LITEF11"; //Check
   FloorSound[6][101] = "LITEF12"; //Check
   FloorSound[6][102] = "LITEF13"; //Check
   FloorSound[6][103] = "LITEF14"; //Check
   FloorSound[6][104] = "LITEF15"; //Check
   FloorSound[6][105] = "METALF01"; //Check
   FloorSound[6][106] = "METALF02"; //Check
   FloorSound[6][107] = "METALF03"; //Check
   FloorSound[6][108] = "METALF04"; //Check
   FloorSound[6][109] = "METALF05"; //Check
   FloorSound[6][110] = "METALF06"; //Check
   FloorSound[6][111] = "METALF07"; //Check
   FloorSound[6][112] = "METALF08"; //Check
   FloorSound[6][113] = "METALF09"; //Check
   FloorSound[6][114] = "METALF10"; //Check
   FloorSound[6][115] = "METALF11"; //Check
   FloorSound[6][116] = "METALF12"; //Check
   FloorSound[6][117] = "METALF13"; //Check
   FloorSound[6][118] = "METALF14"; //Check
   FloorSound[6][119] = "METALF15"; //Check
   FloorSound[6][120] = "METALF16"; //Check
   FloorSound[6][121] = "METALF17"; //Check
   FloorSound[6][122] = "METALF18"; //Check
   FloorSound[6][123] = "METALF19"; //Check
   FloorSound[6][124] = "METALF20"; //Check
   FloorSound[6][125] = "METALF21"; //Check
   FloorSound[6][126] = "METALF22"; //Check
   FloorSound[6][127] = "METALF23"; //Check
   FloorSound[6][128] = "METALF24"; //Check
   FloorSound[6][129] = "NMTRC1"; //Check
   FloorSound[6][130] = "NMTRC2"; //Check
   FloorSound[6][131] = "NMTRC5"; //Check
   FloorSound[6][132] = "PLATF1"; //Check
   FloorSound[6][133] = "PLATF2"; //Check
   FloorSound[6][134] = "QFLAT09"; //Check
   FloorSound[6][135] = "QFLAT10"; //Check
   FloorSound[6][136] = "QSLIP1"; //Check
   FloorSound[6][137] = "QSLIP2"; //Check
   FloorSound[6][138] = "QSLIP3"; //Check
   FloorSound[6][139] = "QSLIP4"; //Check
   FloorSound[6][140] = "QSLIP5"; //Check
   FloorSound[6][141] = "QSLIP6"; //Check
   FloorSound[6][142] = "QSLIP7"; //Check
   FloorSound[6][143] = "SFLOOR1"; //Check
   FloorSound[6][144] = "SFLOOR2"; //Check
   FloorSound[6][145] = "SFLOOR3"; //Check
   FloorSound[6][146] = "SFLOOR4"; //Check
   FloorSound[6][147] = "SFLOOR5"; //Check
   FloorSound[6][148] = "SFLOOR6"; //Check
   FloorSound[6][149] = "SLIPBOT"; //Check
   FloorSound[6][150] = "SLIPTOP"; //Check
   FloorSound[6][151] = "TECHBR1D"; //Check
   FloorSound[6][152] = "TECHBR1E"; //Check
   FloorSound[6][153] = "TECHBR2C"; //Check
   FloorSound[6][154] = "TECHBR2D"; //Check
   FloorSound[6][155] = "TECHF1"; //Check
   FloorSound[6][156] = "TECHF2"; //Check
   FloorSound[6][157] = "TECHF3"; //Check
   FloorSound[6][158] = "TECHF4"; //Check
   FloorSound[6][159] = "TECHF5"; //Check
   FloorSound[6][160] = "TECHFL2"; //Check
   FloorSound[6][161] = "TECHG"; //Check
   FloorSound[6][162] = "TELETOP"; //Check
   FloorSound[6][163] = "NFFL48W"; //Check
   FloorSound[6][164] = "NFFT22GN"; //Check
   FloorSound[6][165] = "NFFT22GR"; //Check
   FloorSound[6][166] = "NFFT22OR"; //Check
   FloorSound[6][167] = "NFFT22RD"; //Check
   FloorSound[6][168] = "NFGF22GN"; //Check
   FloorSound[6][169] = "NFGF22RD"; //Check
   FloorSound[6][170] = "NFGF23"; //Check
   FloorSound[6][171] = "NFMETA03"; //Check
   FloorSound[6][172] = "NFMETA05"; //Check
   FloorSound[6][173] = "NFMETA06"; //Check
   FloorSound[6][174] = "NFMETA45"; //Check
   FloorSound[6][175] = "NFMTPN04"; //Check
   FloorSound[6][176] = "NFMTPN05"; //Check
   FloorSound[6][177] = "NFMTPN06"; //Check
   FloorSound[6][178] = "NFMTSH00"; //Check
   FloorSound[6][179] = "NFMTSV00"; //Check
   FloorSound[6][180] = "NFMTTK01"; //Check
   FloorSound[6][181] = "NFMTTK12"; //Check
   FloorSound[6][182] = "NFMTTK13"; //Check
   FloorSound[6][183] = "NFMTTK14"; //Check
   FloorSound[6][184] = "NFMTTK15"; //Check
   FloorSound[6][185] = "NFMTWL01"; //Check
   FloorSound[6][186] = "NFMTWL02"; //Check
   FloorSound[6][187] = "NFMTWL03"; //Check
   FloorSound[6][188] = "NFSILV3A"; //Check
   FloorSound[6][189] = "NFSVPP01"; //Check
   FloorSound[6][190] = "NFSVPP02"; //Check
   FloorSound[6][191] = "NFSVPP04"; //Check
   FloorSound[6][192] = "NFTKGN00"; //Check
   FloorSound[6][193] = "NFTKGN01"; //Check
   FloorSound[6][194] = "NFTL65BL"; //Check
   FloorSound[6][195] = "NFTL65GN"; //Check
   FloorSound[6][196] = "NFTL65OR"; //Check
   FloorSound[6][197] = "NFTL65WT"; //Check
   FloorSound[6][198] = "NFTL65YL"; //Check
   FloorSound[6][199] = "NFTLTE01"; //Check
   FloorSound[6][200] = "NFTLTE02"; //Check
   FloorSound[6][201] = "VADFLR1"; //Check
   FloorSound[6][202] = "VADFLR2"; //Check
   FloorSound[6][203] = "AVFLAT06"; //Check - DVI Tile
   FloorSound[6][204] = "MT_01"; //Check - DVI Tile
   FloorSound[6][205] = "R_07"; //Check - DVI Tile
   FloorSound[6][206] = "R_08"; //Check - DVI Tile
   FloorSound[6][207] = "IRON_01"; //Check - DVI Tile
   FloorSound[6][208] = "IRON_02"; //Check - DVI Tile
   FloorSound[6][209] = "IRON_03"; //Check - DVI Tile
   FloorSound[6][210] = "IRON_03A"; //Check - DVI Tile
   FloorSound[6][211] = "IRON_04"; //Check - DVI Tile
   FloorSound[6][212] = "IRON_05"; //Check - DVI Tile
   FloorSound[6][213] = "IRON_05B"; //Check - DVI Tile
   FloorSound[6][214] = "IRON_05C"; //Check - DVI Tile
   FloorSound[6][215] = "IRON_05D"; //Check - DVI Tile
   FloorSound[6][216] = "IRON_05F"; //Check - DVI Tile
   FloorSound[6][217] = "IRON_05H"; //Check - DVI Tile
   FloorSound[6][218] = "IRON_05J"; //Check - DVI Tile
   FloorSound[6][219] = "IRON_05L"; //Check - DVI Tile
   FloorSound[6][220] = "IRON_05N"; //Check - DVI Tile
   FloorSound[6][221] = "IRON_06"; //Check - DVI Tile
   FloorSound[6][222] = "IRON_06B"; //Check - DVI Tile
   FloorSound[6][223] = "IRON_08"; //Check - DVI Tile
   FloorSound[6][224] = "IRON_09"; //Check - DVI Tile
   FloorSound[6][225] = "IRON_10"; //Check - DVI Tile
   FloorSound[6][226] = "IRON_11"; //Check - DVI Tile
   FloorSound[6][227] = "IRON_11D"; //Check - DVI Tile
   FloorSound[6][228] = "IRON_12"; //Check - DVI Tile
   FloorSound[6][229] = "IRON_13"; //Check - DVI Tile
   FloorSound[6][230] = "IRON_14"; //Check - DVI Tile
   FloorSound[6][231] = "IRON_14J"; //Check - DVI Tile
   FloorSound[6][232] = "IRON_14O"; //Check - DVI Tile
   FloorSound[6][233] = "IRON_15"; //Check - DVI Tile
   FloorSound[6][234] = "IRON_15J"; //Check - DVI Tile
   FloorSound[6][235] = "IRON_16"; //Check - DVI Tile
   FloorSound[6][236] = "IRON_16J"; //Check - DVI Tile
   FloorSound[6][237] = "IRON_17A"; //Check - DVI Tile
   FloorSound[6][238] = "IRON_17B"; //Check - DVI Tile
   FloorSound[6][239] = "IRON_17E"; //Check - DVI Tile
   FloorSound[6][240] = "IRON_17F"; //Check - DVI Tile
   FloorSound[6][241] = "IRON_17O"; //Check - DVI Tile
   FloorSound[6][242] = "IRON_17Q"; //Check - DVI Tile
   FloorSound[6][243] = "IRON_17S"; //Check - DVI Tile
   FloorSound[6][244] = "IRON_17V"; //Check - DVI Tile
   FloorSound[6][245] = "IRON_17W"; //Check - DVI Tile
   FloorSound[6][246] = "IRON_17X"; //Check - DVI Tile
   FloorSound[6][247] = "IRON_17Y"; //Check - DVI Tile
   FloorSound[6][248] = "IRON_17Z"; //Check - DVI Tile
   FloorSound[6][249] = -1;

   FloorSound[7][0] = "floor/dirt";
   FloorSound[7][1] = "FLAT10";
   FloorSound[7][2] = "GRASS1";
   FloorSound[7][3] = "GRASS2";
   FloorSound[7][4] = "RROCK16";
   FloorSound[7][5] = "RROCK17";
   FloorSound[7][6] = "RROCK18";
   FloorSound[7][7] = "RROCK19";
   FloorSound[7][8] = "RROCK20";
   FloorSound[7][9] = "MFLR8_4";
   FloorSound[7][10] = "ADEL_J02"; //Check
   FloorSound[7][11] = "ADEL_J04"; //Check
   FloorSound[7][12] = "ADEL_J05"; //Check
   FloorSound[7][13] = "NICK_A04"; //Check
   FloorSound[7][14] = "QGRASS"; //Check
   FloorSound[7][15] = "RROCK29"; //Check - DVI Texture
   FloorSound[7][16] = "DIRT_01"; //Check - DVII Texture
   FloorSound[7][17] = "DIRT_1C"; //Check - DVII Texture
   FloorSound[7][18] = "DIRT_02"; //Check - DVII Texture
   FloorSound[7][19] = "DIRT_03"; //Check - DVII Texture
   FloorSound[7][20] = "DIRT_04"; //Check - DVII Texture
   FloorSound[7][21] = "DIRT_05"; //Check - DVII Texture
   FloorSound[7][22] = "DIRT_05J"; //Check - DVII Texture
   FloorSound[7][23] = "DIRT_06"; //Check - DVII Texture
   FloorSound[7][24] = "DIRT_07"; //Check - DVII Texture
   FloorSound[7][25] = "DIRT_08"; //Check - DVII Texture
   FloorSound[7][26] = "DIRT_09"; //Check - DVII Texture
   FloorSound[7][27] = "DIRT_10"; //Check - DVII Texture
   FloorSound[7][28] = "DIRT_11"; //Check - DVII Texture
   FloorSound[7][29] = "DIRT_12"; //Check - DVII Texture
   FloorSound[7][30] = "DIRT_12C"; //Check - DVII Texture
   FloorSound[7][31] = "DIRT_12J"; //Check - DVII Texture
   FloorSound[7][32] = "DIRT_12L"; //Check - DVII Texture
   FloorSound[7][33] = "DIRT_13"; //Check - DVII Texture
   FloorSound[7][34] = "DIRT_13C"; //Check - DVII Texture
   FloorSound[7][35] = "DIRT_13F"; //Check - DVII Texture
   FloorSound[7][36] = "DIRT_13J"; //Check - DVII Texture
   FloorSound[7][37] = "DIRT_14"; //Check - DVII Texture
   FloorSound[7][38] = "DIRT_16"; //Check - DVII Texture
   FloorSound[7][39] = "DIRT_17"; //Check - DVII Texture
   FloorSound[7][40] = "DIRT_17C"; //Check - DVII Texture
   FloorSound[7][41] = "DIRT_17J"; //Check - DVII Texture
   FloorSound[7][42] = "DIRT_18"; //Check - DVII Texture
   FloorSound[7][43] = "DIRT_19"; //Check - DVII Texture
   FloorSound[7][44] = "DIRT_20"; //Check - DVII Texture
   FloorSound[7][45] = "DIRT_21"; //Check - DVII Texture
   FloorSound[7][46] = "DIRT_22"; //Check - DVII Texture
   FloorSound[7][47] = "DIRT_23"; //Check - DVII Texture
   FloorSound[7][48] = "DIRT_24"; //Check - DVII Texture
   FloorSound[7][49] = "DIRT_25"; //Check - DVII Texture
   FloorSound[7][50] = "DIRT_26"; //Check - DVII Texture
   FloorSound[7][51] = "DIRT_27"; //Check - DVII Texture
   FloorSound[7][52] = "DIRT_28"; //Check - DVII Texture
   FloorSound[7][53] = "PUZZ_3A"; //Check - DVII Texture
   FloorSound[7][54] = "PUZZ_3B"; //Check - DVII Texture
   FloorSound[7][55] = "PUZZ_3C"; //Check - DVII Texture
   FloorSound[7][56] = "PUZZ_3D"; //Check - DVII Texture
   FloorSound[7][57] = "SAND_01"; //Check - DVII Texture
   FloorSound[7][58] = -1;

   FloorSound[8][0] = "floor/gravel";
   FloorSound[8][1] = "FLOOR6_1";
   FloorSound[8][2] = "FLOOR6_2";
   FloorSound[8][3] = "MFLR8_3";
   FloorSound[8][4] = "ADEL_F04"; //Check
   FloorSound[8][5] = "ADEL_F75"; //Check
   FloorSound[8][6] = "ADEL_F76"; //Check
   FloorSound[8][7] = "ADEL_J01"; //Check
   FloorSound[8][8] = "ADEL_J17"; //Check
   FloorSound[8][9] = "CITYF11"; //Check
   FloorSound[8][10] = "CITYF12"; //Check
   FloorSound[8][11] = "CITYF19"; //Check
   FloorSound[8][12] = "CITYF21"; //Check
   FloorSound[8][13] = "COLMF1"; //Check
   FloorSound[8][14] = "COLMF2"; //Check
   FloorSound[8][15] = "COLMF4"; //Check
   FloorSound[8][16] = "GRAVE01"; //Check
   FloorSound[8][17] = "GRAVE02"; //Check
   FloorSound[8][18] = "GRAVE03"; //Check
   FloorSound[8][19] = "GRAVE04"; //Check
   FloorSound[8][20] = "GRAVE05"; //Check
   FloorSound[8][21] = "GRAVE06"; //Check
   FloorSound[8][22] = "GRAVE07"; //Check
   FloorSound[8][23] = "GRAVE08"; //Check
   FloorSound[8][24] = "GRAVE09"; //Check
   FloorSound[8][25] = "GRAVE10"; //Check
   FloorSound[8][26] = "GRAVE11"; //Check
   FloorSound[8][27] = "GRAVE12"; //Check
   FloorSound[8][28] = "GROUND1"; //Check
   FloorSound[8][29] = "GROUND2"; //Check
   FloorSound[8][30] = "GROUND3"; //Check
   FloorSound[8][31] = "GROUND4"; //Check
   FloorSound[8][32] = "NFMF82BR"; //Check
   FloorSound[8][33] = "NFMF82GN"; //Check
   FloorSound[8][34] = "NFMF82GR"; //Check
   FloorSound[8][35] = "FLOOR6G"; //Check - DVI Texture
   FloorSound[8][36] = "FLOOR6B"; //Check - DVI Texture
   FloorSound[8][37] = "MUTX05"; //Check - DVI Texture
   FloorSound[8][38] = "GREEN_02"; //Check - DVII Texture
   FloorSound[8][39] = "PINK_01"; //Check - DVII Tile
   FloorSound[8][40] = "RK_01"; //Check - DVII Tile
   FloorSound[8][41] = "CRK_03"; //Check - DVII Tile
   FloorSound[8][42] = "R_18"; //Check - DVII Texture
   FloorSound[8][43] = "CRK_12"; //Check - DVII Texture
   FloorSound[8][44] = -1;

   FloorSound[9][0] = "floor/met2";
   FloorSound[9][1] = "SLIME14";
   FloorSound[9][2] = "SLIME15";
   FloorSound[9][3] = "SLIME16";
   FloorSound[9][4] = "ADEL_F70"; //Check
   FloorSound[9][5] = "PUZZ_1A"; //Check - DVII Texture
   FloorSound[9][6] = "PUZZ_1B"; //Check - DVII Texture
   FloorSound[9][7] = "PUZZ_1C"; //Check - DVII Texture
   FloorSound[9][8] = "PUZZ_1D"; //Check - DVII Texture
   FloorSound[9][9] = "BLU_10A"; //Check - DVII Texture
   FloorSound[9][10] = "D64_01"; //Check - DVII Texture
   FloorSound[9][11] = "D64_02"; //Check - DVII Texture
   FloorSound[9][12] = "D64_03"; //Check - DVII Texture
   FloorSound[9][13] = "D64_04"; //Check - DVII Texture
   FloorSound[9][14] = "D64_05"; //Check - DVII Texture
   FloorSound[9][15] = "D64_06"; //Check - DVII Texture
   FloorSound[9][16] = "D64_07"; //Check - DVII Texture
   FloorSound[9][17] = "D64_08"; //Check - DVII Texture
   FloorSound[9][18] = "STEP0"; //Check - DVII Texture
   FloorSound[9][19] = "STEP00"; //Check - DVII Texture
   FloorSound[9][20] = "STEP000"; //Check - DVII Texture
   FloorSound[9][21] = "STEP0000"; //Check - DVII Texture
   FloorSound[9][22] = "GATE3A"; //Check - DVII Texture
   FloorSound[9][23] = "GATE4"; //Check - DVII Texture
   FloorSound[9][24] = "GATE4A"; //Check - DVII Texture
   FloorSound[9][25] = "GATE5"; //Check - DVII Texture
   FloorSound[9][26] = "GATE5A"; //Check - DVII Texture
   FloorSound[9][27] = "GATE6"; //Check - DVII Texture
   FloorSound[9][28] = "GATE6A"; //Check - DVII Texture
   FloorSound[9][29] = "GATE7"; //Check - DVII Texture
   FloorSound[9][30] = "GATE7A"; //Check - DVII Texture
   FloorSound[9][31] = "GATE8"; //Check - DVII Texture
   FloorSound[9][32] = "GATE8A"; //Check - DVII Texture
   FloorSound[9][33] = "GATE9"; //Check - DVII Texture
   FloorSound[9][34] = "GATE9A"; //Check - DVII Texture
   FloorSound[9][35] = -1;

   // Slimey/Fleshy Surfaces
   FloorSound[10][0] = "floor/slimy";
   FloorSound[10][1] = "BLOOD1";
   FloorSound[10][2] = "BLOOD2";
   FloorSound[10][3] = "BLOOD3";
   FloorSound[10][4] = "SLIME01";
   FloorSound[10][5] = "SLIME02";
   FloorSound[10][6] = "SLIME03";
   FloorSound[10][7] = "SLIME04";
   FloorSound[10][8] = "SLIME05";
   FloorSound[10][9] = "SLIME06";
   FloorSound[10][10] = "SLIME07";
   FloorSound[10][11] = "SLIME08";
   FloorSound[10][12] = "AQUAFLAT"; //Check
   FloorSound[10][13] = "NICK_A05"; //Check
   FloorSound[10][14] = "ORG11B"; //Check
   FloorSound[10][15] = "ORG9"; //Check
   FloorSound[10][16] = "QSLIME1"; //Check
   FloorSound[10][17] = "QSLIME9"; //Check
   FloorSound[10][18] = "SLIME05B"; //Check
   FloorSound[10][19] = "W3SNAKE"; //Check
   FloorSound[10][20] = "WBLOOD"; //Check
   FloorSound[10][21] = "SFLR6_1"; //Check
   FloorSound[10][22] = "SFLR6_4"; //Check
   FloorSound[10][23] = "SFLR7_1"; //Check
   FloorSound[10][24] = "SFLR7_4"; //Check
   FloorSound[10][25] = "SNAK7_1"; //Check
   FloorSound[10][26] = "SNAK8_1"; //Check
   FloorSound[10][27] = "HELL5_1"; //Check
   FloorSound[10][28] = "HELL5_2"; //Check
   FloorSound[10][29] = "HELL6_2"; //Check
   FloorSound[10][30] = "HELL6_3"; //Check
   FloorSound[10][31] = "HELL8_1"; //Check
   FloorSound[10][32] = "HELL8_2"; //Check
   FloorSound[10][33] = "HELL8_4"; //Check
   FloorSound[10][34] = "SPINE3_1"; //Check
   FloorSound[10][35] = "SPINE3_2"; //Check
   FloorSound[10][36] = "SPINE4_1"; //Check
   FloorSound[10][37] = "BFALL1"; //Check
   FloorSound[10][38] = "BFALL2"; //Check
   FloorSound[10][39] = "BFALL3"; //Check
   FloorSound[10][40] = "RW47_3"; //Check
   FloorSound[10][41] = "RW47_4"; //Check
   FloorSound[10][42] = "RW48_1"; //Check
   FloorSound[10][43] = "RW48_2"; //Check
   FloorSound[10][44] = "RW48_3"; //Check
   FloorSound[10][45] = "RW48_4"; //Check
   FloorSound[10][46] = "AVFLAT28"; //Check - DVI Texture
   FloorSound[10][47] = "MISC_03"; //Check - DVI Texture
   FloorSound[10][48] = "BRAIN_01"; //Check - DVI Texture
   FloorSound[10][49] = "SKINN1"; //Check - DVI Texture
   FloorSound[10][50] = "SKINN2"; //Check - DVI Texture
   FloorSound[10][51] = "PNK_BD"; //Check - DVI Texture
   FloorSound[10][52] = "SKT1A"; //Check - DVI Texture
   FloorSound[10][53] = "SKT1B"; //Check - DVI Texture
   FloorSound[10][54] = "SKT2A"; //Check - DVI Texture
   FloorSound[10][55] = "SKT2B"; //Check - DVI Texture
   FloorSound[10][56] = -1;

   // Water Floors
   FloorSound[11][0] = "floor/water";
   FloorSound[11][1] = "FWATER1";
   FloorSound[11][2] = "FWATER2";
   FloorSound[11][3] = "FWATER3";
   FloorSound[11][4] = "FWATER4";
   FloorSound[11][5] = "NUKAGE1";
   FloorSound[11][6] = "NUKAGE2";
   FloorSound[11][7] = "NUKAGE3";
   FloorSound[11][8] = "LAVA1";
   FloorSound[11][9] = "LAVA2";
   FloorSound[11][10] = "LAVA3";
   FloorSound[11][11] = "LAVA4";
   FloorSound[11][12] = "ADEL_J14"; //Check
   FloorSound[11][13] = "QFWAT"; //Check
   FloorSound[11][14] = "QLAVA"; //Check
   FloorSound[11][15] = "QLAVA2"; //Check
   FloorSound[11][16] = "QLAVA7"; //Check
   FloorSound[11][17] = "QWATER1"; //Check
   FloorSound[11][18] = "QWATER2"; //Check
   FloorSound[11][19] = "QWATER3"; //Check
   FloorSound[11][20] = "QWATER3A"; //Check
   FloorSound[11][21] = "QWATERT6"; //Check
   FloorSound[11][22] = "SB_FLAT3"; //Check
   FloorSound[11][23] = "SB_FLAT4"; //Check
   FloorSound[11][24] = "W3LAVA"; //Check
   FloorSound[11][25] = "WLAVA"; //Check
   FloorSound[11][26] = "WNUKAGE"; //Check
   FloorSound[11][27] = "WSLIME2"; //Check
   FloorSound[11][28] = "WSLIME"; //Check
   FloorSound[11][29] = "WWATER"; //Check
   FloorSound[11][30] = "ZB3_01"; //Check
   FloorSound[11][31] = "ZB3_02"; //Check
   FloorSound[11][32] = "ZB3_03"; //Check
   FloorSound[11][33] = "ZB3_99"; //Check
   FloorSound[11][34] = "ZB4_01"; //Check
   FloorSound[11][35] = "ZB4_02"; //Check
   FloorSound[11][36] = "ZB4_03"; //Check
   FloorSound[11][37] = "ZB4_99"; //Check
   FloorSound[11][38] = "ZB5_01"; //Check
   FloorSound[11][39] = "ZB5_02"; //Check
   FloorSound[11][40] = "ZB5_03"; //Check
   FloorSound[11][41] = "ZB5_99"; //Check
   FloorSound[11][42] = "ZB6_01"; //Check
   FloorSound[11][43] = "ZB6_02"; //Check
   FloorSound[11][44] = "ZB6_99"; //Check
   FloorSound[11][45] = "ZG3_01"; //Check
   FloorSound[11][46] = "ZG3_02"; //Check
   FloorSound[11][47] = "ZG3_03"; //Check
   FloorSound[11][48] = "ZG3_99"; //Check
   FloorSound[11][49] = "ZG4_01"; //Check
   FloorSound[11][50] = "ZG4_02"; //Check
   FloorSound[11][51] = "ZG4_03"; //Check
   FloorSound[11][52] = "ZG4_99"; //Check
   FloorSound[11][53] = "ZG5_01"; //Check
   FloorSound[11][54] = "ZG5_02"; //Check
   FloorSound[11][55] = "ZG5_03"; //Check
   FloorSound[11][56] = "ZG5_99"; //Check
   FloorSound[11][57] = "ZG6_01"; //Check
   FloorSound[11][58] = "ZG6_02"; //Check
   FloorSound[11][59] = "ZG6_99"; //Check
   FloorSound[11][60] = "ZM1_01"; //Check
   FloorSound[11][61] = "ZM1_02"; //Check
   FloorSound[11][62] = "ZM1_03"; //Check
   FloorSound[11][63] = "ZM1_99"; //Check
   FloorSound[11][64] = "ZM2_01"; //Check
   FloorSound[11][65] = "ZM2_02"; //Check
   FloorSound[11][66] = "ZM2_99"; //Check
   FloorSound[11][67] = "ZM3_01"; //Check
   FloorSound[11][68] = "ZM3_02"; //Check
   FloorSound[11][69] = "ZM3_03"; //Check
   FloorSound[11][70] = "ZM3_99"; //Check
   FloorSound[11][71] = "ZM4_01"; //Check
   FloorSound[11][72] = "ZM4_02"; //Check
   FloorSound[11][73] = "ZM4_03"; //Check
   FloorSound[11][74] = "ZM4_04"; //Check
   FloorSound[11][75] = "ZM4_05"; //Check
   FloorSound[11][76] = "ZM4_06"; //Check
   FloorSound[11][77] = "ZM4_99"; //Check
   FloorSound[11][78] = "ZM5_01"; //Check
   FloorSound[11][79] = "ZM5_02"; //Check
   FloorSound[11][80] = "ZM5_03"; //Check
   FloorSound[11][81] = "ZM5_99"; //Check
   FloorSound[11][82] = "ZR3_01"; //Check
   FloorSound[11][83] = "ZR3_02"; //Check
   FloorSound[11][84] = "ZR3_03"; //Check
   FloorSound[11][85] = "ZR3_99"; //Check
   FloorSound[11][86] = "ZR4_01"; //Check
   FloorSound[11][87] = "ZR4_02"; //Check
   FloorSound[11][88] = "ZR4_03"; //Check
   FloorSound[11][89] = "ZR4_99"; //Check
   FloorSound[11][90] = "ZR5_01"; //Check
   FloorSound[11][91] = "ZR5_02"; //Check
   FloorSound[11][92] = "ZR5_03"; //Check
   FloorSound[11][93] = "ZR5_99"; //Check
   FloorSound[11][94] = "ZR6_01"; //Check
   FloorSound[11][95] = "ZR6_02"; //Check
   FloorSound[11][96] = "ZR6_99"; //Check
   FloorSound[11][97] = "ZY3_01"; //Check
   FloorSound[11][98] = "ZY3_02"; //Check
   FloorSound[11][99] = "ZY3_03"; //Check
   FloorSound[11][100] = "ZY3_99"; //Check
   FloorSound[11][101] = "ZY5_01"; //Check
   FloorSound[11][102] = "ZY5_02"; //Check
   FloorSound[11][103] = "ZY5_03"; //Check
   FloorSound[11][104] = "ZY5_99"; //Check
   FloorSound[11][105] = "ZY6_01"; //Check
   FloorSound[11][106] = "ZY6_02"; //Check
   FloorSound[11][107] = "ZY6_99"; //Check
   FloorSound[11][108] = "ZO1_01"; //Check
   FloorSound[11][109] = "ZO1_02"; //Check
   FloorSound[11][110] = "ZO1_03"; //Check
   FloorSound[11][111] = "ZO1_99"; //Check
   FloorSound[11][112] = "ZO2_01"; //Check
   FloorSound[11][113] = "ZO2_02"; //Check
   FloorSound[11][114] = "ZO2_03"; //Check
   FloorSound[11][115] = "ZO2_99"; //Check
   FloorSound[11][116] = "ZO3_01"; //Check
   FloorSound[11][117] = "ZO3_02"; //Check
   FloorSound[11][118] = "ZO3_03"; //Check
   FloorSound[11][119] = "ZO3_99"; //Check
   FloorSound[11][120] = "ZO4_01"; //Check
   FloorSound[11][121] = "ZO4_02"; //Check
   FloorSound[11][122] = "ZO4_03"; //Check
   FloorSound[11][123] = "ZO4_04"; //Check
   FloorSound[11][124] = "ZO4_05"; //Check
   FloorSound[11][125] = "ZO4_06"; //Check
   FloorSound[11][126] = "ZO4_07"; //Check
   FloorSound[11][127] = "ZO4_08"; //Check
   FloorSound[11][128] = "ZO4_09"; //Check
   FloorSound[11][129] = "ZO4_99"; //Check
   FloorSound[11][130] = -1;

   // Snow Floors, First Section
   FloorSound[12][0] = "floor/snow";
   FloorSound[12][1] = "SNOW";
   FloorSound[12][2] = "SNOW3";
   FloorSound[12][3] = "SB_FLAT5";
   FloorSound[12][4] = "ICE";
   FloorSound[12][5] = "ICE2";
   FloorSound[12][6] = "ICE3";
   FloorSound[12][7] = "ICE4";
   FloorSound[12][8] = "ICE5";
   FloorSound[12][9] = "ICRETE5";
   FloorSound[12][10] = -1;

   // Metal 1, Second Section ---ADD TO THIS ONE---
   FloorSound[13][0] = "floor/metal"; //Check - DVII Tile
   FloorSound[13][1] = "IRON_19"; //Check - DVII Tile
   FloorSound[13][2] = "IRON_20"; //Check - DVII Tile
   FloorSound[13][3] = "IRON_20B"; //Check - DVII Tile
   FloorSound[13][4] = "IRON_21"; //Check - DVII Tile
   FloorSound[13][5] = "IRON_21B"; //Check - DVII Tile
   FloorSound[13][6] = "IRON_21C"; //Check - DVII Tile
   FloorSound[13][7] = "IRON_24"; //Check - DVII Tile
   FloorSound[13][8] = "IRON_24J"; //Check - DVII Tile
   FloorSound[13][9] = "IRON_24M"; //Check - DVII Tile
   FloorSound[13][10] = "IRON_24O"; //Check - DVII Tile
   FloorSound[13][11] = "IRON_25"; //Check - DVII Tile
   FloorSound[13][12] = "IRON_25J"; //Check - DVII Tile
   FloorSound[13][13] = "IRON_25M"; //Check - DVII Tile
   FloorSound[13][14] = "IRON_25O"; //Check - DVII Tile
   FloorSound[13][15] = "R_12"; //Check - DVII Tile
   FloorSound[13][16] = "R_31"; //Check - DVII Tile
   FloorSound[13][17] = "R_32"; //Check - DVII Tile
   FloorSound[13][18] = "R_33"; //Check - DVII Tile
   FloorSound[13][19] = "R_34"; //Check - DVII Tile
   FloorSound[13][20] = "R_35"; //Check - DVII Tile
   FloorSound[13][21] = "R_36"; //Check - DVII Tile
   FloorSound[13][22] = "R_37"; //Check - DVII Tile
   FloorSound[13][23] = "R_38"; //Check - DVII Tile
   FloorSound[13][24] = "R_39"; //Check - DVII Tile
   FloorSound[13][25] = "R_40"; //Check - DVII Tile
   FloorSound[13][26] = "R_41"; //Check - DVII Tile
   FloorSound[13][27] = "R_42"; //Check - DVII Tile
   FloorSound[13][28] = "R_43"; //Check - DVII Tile
   FloorSound[13][29] = "R_44"; //Check - DVII Tile
   FloorSound[13][31] = "IRON_18"; //Check - DVII Tile
   FloorSound[13][32] = "BLU_10"; //Check - DVII Tile
   FloorSound[13][33] = "BLU_27"; //Check - DVII Tile
   FloorSound[13][34] = "BLU_28"; //Check - DVII Tile
   FloorSound[13][35] = "BLU_29"; //Check - DVII Tile
   FloorSound[13][36] = "BLU_30"; //Check - DVII Tile
   FloorSound[13][37] = "BLU_31"; //Check - DVII Tile
   FloorSound[13][38] = "BLU_32"; //Check - DVII Tile
   FloorSound[13][39] = "BLU_33"; //Check - DVII Tile
   FloorSound[13][40] = "BLU_34"; //Check - DVII Tile
   FloorSound[13][41] = "BLU_35"; //Check - DVII Tile
   FloorSound[13][42] = "BLU_36"; //Check - DVII Tile
   FloorSound[13][43] = "BLU_37"; //Check - DVII Tile
   FloorSound[13][44] = "BLU_38"; //Check - DVII Tile
   FloorSound[13][45] = "BLU_39"; //Check - DVII Tile
   FloorSound[13][46] = "BLU_40"; //Check - DVII Tile
   FloorSound[13][47] = "MISC_06"; //Check - DVII Tile
   FloorSound[13][48] = "MISC_08"; //Check - DVII Tile
   FloorSound[13][49] = "MISC_08J"; //Check - DVII Tile
   FloorSound[13][50] = "MISC_08N"; //Check - DVII Tile
   FloorSound[13][51] = "MISC_08O"; //Check - DVII Tile
   FloorSound[13][52] = "MISC_08R"; //Check - DVII Tile
   FloorSound[13][53] = "MISC_08S"; //Check - DVII Tile
   FloorSound[13][54] = "MISC_08T"; //Check - DVII Tile
   FloorSound[13][55] = "MISC_08U"; //Check - DVII Tile
   FloorSound[13][56] = "MISC_08W"; //Check - DVII Tile
   FloorSound[13][57] = "MISC_08Y"; //Check - DVII Tile
   FloorSound[13][58] = "MISC_09"; //Check - DVII Tile
   FloorSound[13][59] = "MISC_10"; //Check - DVII Tile
   FloorSound[13][60] = "MISC_11"; //Check - DVII Tile
   FloorSound[13][61] = "MISC_14"; //Check - DVII Tile
   FloorSound[13][62] = "MISC_15"; //Check - DVII Tile
   FloorSound[13][63] = "MISC_15J"; //Check - DVII Tile
   FloorSound[13][64] = "MISC_15O"; //Check - DVII Tile
   FloorSound[13][65] = "MISC_16"; //Check - DVII Tile
   FloorSound[13][66] = "MISC_16J"; //Check - DVII Tile
   FloorSound[13][67] = "MISC_17"; //Check - DVII Tile
   FloorSound[13][68] = "MISC_18"; //Check - DVII Tile
   FloorSound[13][69] = "MISC_19A"; //Check - DVII Tile
   FloorSound[13][70] = "MISC_19B"; //Check - DVII Tile
   FloorSound[13][71] = "MISC_19C"; //Check - DVII Tile
   FloorSound[13][72] = "MISC_19D"; //Check - DVII Tile
   FloorSound[13][73] = "MISC_19E"; //Check - DVII Tile
   FloorSound[13][74] = "MISC_19F"; //Check - DVII Tile
   FloorSound[13][75] = "MISC_19G"; //Check - DVII Tile
   FloorSound[13][76] = "MISC_19H"; //Check - DVII Tile
   FloorSound[13][77] = "MISC_20A"; //Check - DVII Tile
   FloorSound[13][78] = "MISC_20B"; //Check - DVII Tile
   FloorSound[13][79] = "MISC_20C"; //Check - DVII Tile
   FloorSound[13][80] = "MISC_20D"; //Check - DVII Tile
   FloorSound[13][81] = "MISC_20E"; //Check - DVII Tile
   FloorSound[13][82] = "MISC_20F"; //Check - DVII Tile
   FloorSound[13][83] = "MISC_20G"; //Check - DVII Tile
   FloorSound[13][84] = "MISC_20H"; //Check - DVII Tile
   FloorSound[13][85] = "MT_02"; //Check - DVII Tile
   FloorSound[13][86] = "MT_03"; //Check - DVII Tile
   FloorSound[13][87] = "MT_04"; //Check - DVII Tile
   FloorSound[13][88] = "MT_05"; //Check - DVII Tile
   FloorSound[13][89] = "MT_06"; //Check - DVII Tile
   FloorSound[13][90] = "MT_06E"; //Check - DVII Tile
   FloorSound[13][91] = "MT_07"; //Check - DVII Tile
   FloorSound[13][92] = "MT_08"; //Check - DVII Tile
   FloorSound[13][93] = "MT_09"; //Check - DVII Tile
   FloorSound[13][94] = "MT_10"; //Check - DVII Tile
   FloorSound[13][95] = "MT_11"; //Check - DVII Tile
   FloorSound[13][96] = "MT_12"; //Check - DVII Tile
   FloorSound[13][97] = "MT_13"; //Check - DVII Tile
   FloorSound[13][98] = "MT_14"; //Check - DVII Tile
   FloorSound[13][99] = "MT_15"; //Check - DVII Tile
   FloorSound[13][100] = "MT_16"; //Check - DVII Tile
   FloorSound[13][101] = "MT_17"; //Check - DVII Tile
   FloorSound[13][102] = "MT_18"; //Check - DVII Tile
   FloorSound[13][103] = "MT_19"; //Check - DVII Tile
   FloorSound[13][104] = "MT_20"; //Check - DVII Tile
   FloorSound[13][105] = "MT_20C"; //Check - DVII Tile
   FloorSound[13][106] = "MT_21"; //Check - DVII Tile
   FloorSound[13][107] = "MT_21C"; //Check - DVII Tile
   FloorSound[13][108] = "MT_22"; //Check - DVII Tile
   FloorSound[13][109] = "MT_22C"; //Check - DVII Tile
   FloorSound[13][110] = "MT_22E"; //Check - DVII Tile
   FloorSound[13][111] = "MT_22G"; //Check - DVII Tile
   FloorSound[13][112] = "MT_23"; //Check - DVII Tile
   FloorSound[13][113] = "MT_23C"; //Check - DVII Tile
   FloorSound[13][114] = "MT_23E"; //Check - DVII Tile
   FloorSound[13][115] = "MT_23G"; //Check - DVII Tile
   FloorSound[13][116] = "GREEN_06"; //Check - DVII Tile
   FloorSound[13][117] = "GREEN_E1"; //Check - DVII Tile
   FloorSound[13][118] = "GREEN_E3"; //Check - DVII Tile
   FloorSound[13][119] = "GREEN_E5"; //Check - DVII Tile
   FloorSound[13][120] = "GREEN_E7"; //Check - DVII Tile
   FloorSound[13][121] = "GREEN_E9"; //Check - DVII Tile
   FloorSound[13][122] = "GREEN_EA"; //Check - DVII Tile
   FloorSound[13][123] = "GREEN_EC"; //Check - DVII Tile
   FloorSound[13][124] = "GREEN_EE"; //Check - DVII Tile
   FloorSound[13][125] = "GREEN_EG"; //Check - DVII Tile
   FloorSound[13][126] = "GREEN_EI"; //Check - DVII Tile
   FloorSound[13][127] = "GREEN_EK"; //Check - DVII Tile
   FloorSound[13][128] = "GREEN_EM"; //Check - DVII Tile
   FloorSound[13][129] = "GREEN_EO"; //Check - DVII Tile
   FloorSound[13][130] = "GREEN_EQ"; //Check - DVII Tile
   FloorSound[13][131] = "GREEN_G1"; //Check - DVII Tile
   FloorSound[13][132] = "GREEN_J1"; //Check - DVII Tile
   FloorSound[13][133] = "GREEN_J2"; //Check - DVII Tile
   FloorSound[13][134] = "TKEYB_1A"; //Check - DVII Tile
   FloorSound[13][135] = "TKEYB_1B"; //Check - DVII Tile
   FloorSound[13][136] = "TKEYB_1C"; //Check - DVII Tile
   FloorSound[13][137] = "TKEYB_1D"; //Check - DVII Tile
   FloorSound[13][138] = "TKEYB_2A"; //Check - DVII Tile
   FloorSound[13][139] = "TKEYB_2B"; //Check - DVII Tile
   FloorSound[13][140] = "TKEYB_2C"; //Check - DVII Tile
   FloorSound[13][141] = "TKEYB_2D"; //Check - DVII Tile
   FloorSound[13][142] = "TKEYR_1A"; //Check - DVII Tile
   FloorSound[13][143] = "TKEYR_1B"; //Check - DVII Tile
   FloorSound[13][144] = "TKEYR_1C"; //Check - DVII Tile
   FloorSound[13][145] = "TKEYR_1D"; //Check - DVII Tile
   FloorSound[13][146] = "TKEYR_2A"; //Check - DVII Tile
   FloorSound[13][147] = "TKEYR_2B"; //Check - DVII Tile
   FloorSound[13][148] = "TKEYR_2C"; //Check - DVII Tile
   FloorSound[13][149] = "TKEYR_2D"; //Check - DVII Tile
   FloorSound[13][150] = "TKEYY_1A"; //Check - DVII Tile
   FloorSound[13][151] = "TKEYY_1B"; //Check - DVII Tile
   FloorSound[13][152] = "TKEYY_1C"; //Check - DVII Tile
   FloorSound[13][153] = "TKEYY_1D"; //Check - DVII Tile
   FloorSound[13][154] = "TKEYY_2A"; //Check - DVII Tile
   FloorSound[13][155] = "TKEYY_2B"; //Check - DVII Tile
   FloorSound[13][156] = "TKEYY_2C"; //Check - DVII Tile
   FloorSound[13][157] = "TKEYY_2D"; //Check - DVII Tile
   FloorSound[13][158] = "STES1"; //Check - DVII Tile
   FloorSound[13][159] = "STES2"; //Check - DVII Tile
   FloorSound[13][160] = "CONS2_1"; //Check - DVII Tile
   FloorSound[13][161] = "CONS2_2"; //Check - DVII Tile
   FloorSound[13][162] = "CONS2_3"; //Check - DVII Tile
   FloorSound[13][163] = "CONS2_4"; //Check - DVII Tile
   FloorSound[13][164] = "RY_12"; //Check - DVII Tile
   FloorSound[13][165] = "TLRA1"; //Check - DVII Tile
   FloorSound[13][166] = "TLRA2"; //Check - DVII Tile
   FloorSound[13][167] = "TLRA3"; //Check - DVII Tile
   FloorSound[13][168] = "TLRA4"; //Check - DVII Tile
   FloorSound[13][169] = "TLRB1"; //Check - DVII Tile
   FloorSound[13][170] = "TLRB2"; //Check - DVII Tile
   FloorSound[13][171] = "TLRB3"; //Check - DVII Tile
   FloorSound[13][172] = "TLRB4"; //Check - DVII Tile
   FloorSound[13][173] = "STET1"; //Check - DVII Tile
   FloorSound[13][174] = "STET2"; //Check - DVII Tile
   FloorSound[13][175] = "TFH_01"; //Check - DVII Tile
   FloorSound[13][176] = "ZB1_01"; //Check - DVII Tile
   FloorSound[13][177] = "ZB1_02"; //Check - DVII Tile
   FloorSound[13][178] = "ZB1_03"; //Check - DVII Tile
   FloorSound[13][179] = "ZB1_04"; //Check - DVII Tile
   FloorSound[13][180] = "ZB1_05"; //Check - DVII Tile
   FloorSound[13][181] = "ZB1_99"; //Check - DVII Tile
   FloorSound[13][182] = "ZB2_01"; //Check - DVII Tile
   FloorSound[13][183] = "ZB2_02"; //Check - DVII Tile
   FloorSound[13][184] = "ZB2_03"; //Check - DVII Tile
   FloorSound[13][185] = "ZB2_04"; //Check - DVII Tile
   FloorSound[13][186] = "ZB2_05"; //Check - DVII Tile
   FloorSound[13][187] = "ZB2_99"; //Check - DVII Tile
   FloorSound[13][188] = "ZR1_01"; //Check - DVII Tile
   FloorSound[13][189] = "ZR1_02"; //Check - DVII Tile
   FloorSound[13][190] = "ZR1_03"; //Check - DVII Tile
   FloorSound[13][191] = "ZR1_04"; //Check - DVII Tile
   FloorSound[13][192] = "ZR1_05"; //Check - DVII Tile
   FloorSound[13][193] = "ZR1_99"; //Check - DVII Tile
   FloorSound[13][194] = "ZR2_01"; //Check - DVII Tile
   FloorSound[13][195] = "ZR2_02"; //Check - DVII Tile
   FloorSound[13][196] = "ZR2_03"; //Check - DVII Tile
   FloorSound[13][197] = "ZR2_04"; //Check - DVII Tile
   FloorSound[13][198] = "ZR2_05"; //Check - DVII Tile
   FloorSound[13][199] = "ZR2_99"; //Check - DVII Tile
   FloorSound[13][200] = "ZY1_01"; //Check - DVII Tile
   FloorSound[13][201] = "ZY1_02"; //Check - DVII Tile
   FloorSound[13][202] = "ZY1_03"; //Check - DVII Tile
   FloorSound[13][203] = "ZY1_04"; //Check - DVII Tile
   FloorSound[13][204] = "ZY1_05"; //Check - DVII Tile
   FloorSound[13][205] = "ZY1_99"; //Check - DVII Tile
   FloorSound[13][206] = "ZY2_01"; //Check - DVII Tile
   FloorSound[13][207] = "ZY2_02"; //Check - DVII Tile
   FloorSound[13][208] = "ZY2_03"; //Check - DVII Tile
   FloorSound[13][209] = "ZY2_04"; //Check - DVII Tile
   FloorSound[13][210] = "ZY2_05"; //Check - DVII Tile
   FloorSound[13][211] = "ZY2_99"; //Check - DVII Tile
   FloorSound[13][212] = "ZG1_01"; //Check - DVII Tile
   FloorSound[13][213] = "ZG1_02"; //Check - DVII Tile
   FloorSound[13][214] = "ZG1_03"; //Check - DVII Tile
   FloorSound[13][215] = "ZG1_04"; //Check - DVII Tile
   FloorSound[13][216] = "ZG1_05"; //Check - DVII Tile
   FloorSound[13][217] = "ZG1_99"; //Check - DVII Tile
   FloorSound[13][218] = "ZG2_01"; //Check - DVII Tile
   FloorSound[13][219] = "ZG2_02"; //Check - DVII Tile
   FloorSound[13][220] = "ZG2_03"; //Check - DVII Tile
   FloorSound[13][221] = "ZG2_04"; //Check - DVII Tile
   FloorSound[13][222] = "ZG2_05"; //Check - DVII Tile
   FloorSound[13][223] = "ZG2_99"; //Check - DVII Tile
   FloorSound[13][224] = "U25P01"; //Check - DVII Tile
   FloorSound[13][225] = -1;

   // Hard Floors, Second Section ---ADD TO THIS ONE---
   FloorSound[14][0] = "floor/hard";
   FloorSound[14][1] = "GREEN_17"; //Check - DVII Tile
   FloorSound[14][2] = "GREEN_18"; //Check - DVII Tile
   FloorSound[14][3] = "GREEN_19"; //Check - DVII Tile
   FloorSound[14][4] = "GREEN_24"; //Check - DVII Tile
   FloorSound[14][5] = "GREEN_26"; //Check - DVII Tile
   FloorSound[14][6] = "GREEN_27"; //Check - DVII Tile
   FloorSound[14][7] = "GREEN_A1"; //Check - DVII Tile
   FloorSound[14][8] = "GREEN_A2"; //Check - DVII Tile
   FloorSound[14][9] = "GREEN_B1"; //Check - DVII Tile
   FloorSound[14][10] = "GREEN_B2"; //Check - DVII Tile
   FloorSound[14][11] = "GREEN_A1"; //Check - DVII Tile
   FloorSound[14][12] = "GREEN_C5"; //Check - DVII Tile
   FloorSound[14][13] = "GREEN_D1"; //Check - DVII Tile
   FloorSound[14][14] = "GREEN_D3"; //Check - DVII Tile
   FloorSound[14][15] = "CEMENS0"; //Check - DVII Tile
   FloorSound[14][16] = "CEMENS0J"; //Check - DVII Tile
   FloorSound[14][17] = "CEMENS0M"; //Check - DVII Tile
   FloorSound[14][18] = "CEMENS1"; //Check - DVII Tile
   FloorSound[14][19] = "CEMENS2"; //Check - DVII Tile
   FloorSound[14][20] = "CEMENS2B"; //Check - DVII Tile
   FloorSound[14][21] = "C01"; //Check - DVII Tile
   FloorSound[14][22] = "C02"; //Check - DVII Tile
   FloorSound[14][23] = "C03"; //Check - DVII Tile
   FloorSound[14][24] = "C04"; //Check - DVII Tile
   FloorSound[14][25] = "AZTC_01"; //Check - DVII Tile
   FloorSound[14][26] = "AZTC_02"; //Check - DVII Tile
   FloorSound[14][27] = "AZTC_03"; //Check - DVII Tile
   FloorSound[14][28] = "AZTC_04"; //Check - DVII Tile
   FloorSound[14][29] = "DEM1_7"; //Check - DVII Tile
   FloorSound[14][30] = "DEM2_1"; //Check - DVII Tile
   FloorSound[14][31] = "DEM2_2"; //Check - DVII Tile
   FloorSound[14][32] = "DEM2_3"; //Check - DVII Tile
   FloorSound[14][33] = "DEM2_4"; //Check - DVII Tile
   FloorSound[14][34] = "ROCK21"; //Check - DVII Tile
   FloorSound[14][35] = "RY_04"; //Check - DVII Tile
   FloorSound[14][36] = "RY_06"; //Check - DVII Tile
   FloorSound[14][37] = "RY_13"; //Check - DVII Tile
   FloorSound[14][38] = "RY_15"; //Check - DVII Tile
   FloorSound[14][39] = "RY_19"; //Check - DVII Tile
   FloorSound[14][40] = "RY_20"; //Check - DVII Tile
   FloorSound[14][41] = "RY_21"; //Check - DVII Tile
   FloorSound[14][42] = "RY_22"; //Check - DVII Tile
   FloorSound[14][43] = "EH01A"; //Check - DVII Tile
   FloorSound[14][44] = "EH01B"; //Check - DVII Tile
   FloorSound[14][45] = "EH01C"; //Check - DVII Tile
   FloorSound[14][46] = "EH01D"; //Check - DVII Tile
   FloorSound[14][47] = "EH02A"; //Check - DVII Tile
   FloorSound[14][48] = "EH02B"; //Check - DVII Tile
   FloorSound[14][49] = "EH02C"; //Check - DVII Tile
   FloorSound[14][50] = "EH02D"; //Check - DVII Tile
   FloorSound[14][51] = "EH03A"; //Check - DVII Tile
   FloorSound[14][52] = "EH03B"; //Check - DVII Tile
   FloorSound[14][53] = "EH04A"; //Check - DVII Tile
   FloorSound[14][54] = "EH04B"; //Check - DVII Tile
   FloorSound[14][55] = "EH05A"; //Check - DVII Tile
   FloorSound[14][56] = "EH06A"; //Check - DVII Tile
   FloorSound[14][57] = "EH07A"; //Check - DVII Tile
   FloorSound[14][58] = "EH07B"; //Check - DVII Tile
   FloorSound[14][59] = "EH07C"; //Check - DVII Tile
   FloorSound[14][60] = "EH07D"; //Check - DVII Tile
   FloorSound[14][61] = "EH07E"; //Check - DVII Tile
   FloorSound[14][62] = "EH07F"; //Check - DVII Tile
   FloorSound[14][63] = "EH07G"; //Check - DVII Tile
   FloorSound[14][64] = "EH07H"; //Check - DVII Tile
   FloorSound[14][65] = "EH08A"; //Check - DVII Tile
   FloorSound[14][66] = "EH08B"; //Check - DVII Tile
   FloorSound[14][67] = "EH08C"; //Check - DVII Tile
   FloorSound[14][68] = "EH08D"; //Check - DVII Tile
   FloorSound[14][69] = "EH08E"; //Check - DVII Tile
   FloorSound[14][70] = "EH08F"; //Check - DVII Tile
   FloorSound[14][71] = "EH08G"; //Check - DVII Tile
   FloorSound[14][72] = "EH08H"; //Check - DVII Tile
   FloorSound[14][73] = "EG01A"; //Check - DVII Tile
   FloorSound[14][74] = "EG01B"; //Check - DVII Tile
   FloorSound[14][75] = "EG01C"; //Check - DVII Tile
   FloorSound[14][76] = "EG01D"; //Check - DVII Tile
   FloorSound[14][77] = "EG02A"; //Check - DVII Tile
   FloorSound[14][78] = "EG02B"; //Check - DVII Tile
   FloorSound[14][79] = "EG02C"; //Check - DVII Tile
   FloorSound[14][80] = "EG02D"; //Check - DVII Tile
   FloorSound[14][81] = "EG03A"; //Check - DVII Tile
   FloorSound[14][82] = "EG03B"; //Check - DVII Tile
   FloorSound[14][83] = "EG04A"; //Check - DVII Tile
   FloorSound[14][84] = "EG04B"; //Check - DVII Tile
   FloorSound[14][85] = "EG05A"; //Check - DVII Tile
   FloorSound[14][86] = "EG06A"; //Check - DVII Tile
   FloorSound[14][87] = "EG07A"; //Check - DVII Tile
   FloorSound[14][88] = "EG07B"; //Check - DVII Tile
   FloorSound[14][89] = "EG07C"; //Check - DVII Tile
   FloorSound[14][90] = "EG07D"; //Check - DVII Tile
   FloorSound[14][91] = "EG07E"; //Check - DVII Tile
   FloorSound[14][92] = "EG07F"; //Check - DVII Tile
   FloorSound[14][93] = "EG07G"; //Check - DVII Tile
   FloorSound[14][94] = "EG07H"; //Check - DVII Tile
   FloorSound[14][95] = "EG08A"; //Check - DVII Tile
   FloorSound[14][96] = "EG08B"; //Check - DVII Tile
   FloorSound[14][97] = "EG08C"; //Check - DVII Tile
   FloorSound[14][98] = "EG08D"; //Check - DVII Tile
   FloorSound[14][99] = "EG08E"; //Check - DVII Tile
   FloorSound[14][100] = "EG08F"; //Check - DVII Tile
   FloorSound[14][101] = "EG08G"; //Check - DVII Tile
   FloorSound[14][102] = "EG08H"; //Check - DVII Tile
   FloorSound[14][103] = "EG11A"; //Check - DVII Tile
   FloorSound[13][104] = "EG11B"; //Check - DVII Tile
   FloorSound[14][105] = "EG12A"; //Check - DVII Tile
   FloorSound[14][106] = "EG12B"; //Check - DVII Tile
   FloorSound[14][107] = "X14TA1"; //Check - DVII Tile
   FloorSound[14][108] = "X14TA2"; //Check - DVII Tile
   FloorSound[14][109] = "X14TB1"; //Check - DVII Tile
   FloorSound[14][110] = "X14TB2"; //Check - DVII Tile
   FloorSound[14][111] = "X22M01A"; //Check - DVII Tile
   FloorSound[14][112] = "X22M01B"; //Check - DVII Tile
   FloorSound[14][113] = "X22M01C"; //Check - DVII Tile
   FloorSound[14][114] = "X22M01D"; //Check - DVII Tile
   FloorSound[14][115] = "X22M02A"; //Check - DVII Tile
   FloorSound[14][116] = "X22M02B"; //Check - DVII Tile
   FloorSound[14][117] = "X22M02C"; //Check - DVII Tile
   FloorSound[14][118] = "X22M02D"; //Check - DVII Tile
   FloorSound[14][119] = "X22M03A"; //Check - DVII Tile
   FloorSound[14][120] = "X22M03B"; //Check - DVII Tile
   FloorSound[14][121] = "X22M03C"; //Check - DVII Tile
   FloorSound[14][122] = "X22M03D"; //Check - DVII Tile
   FloorSound[14][123] = "O_CRETE"; //Check - DVII Tile
   FloorSound[14][124] = "TANF01"; //Check - DVII Tile
   FloorSound[14][125] = "TANF02"; //Check - DVII Tile
   FloorSound[14][126] = "ZB7_01"; //Check - DVII Tile
   FloorSound[14][127] = "ZB7_02"; //Check - DVII Tile
   FloorSound[14][128] = "ZB7_03"; //Check - DVII Tile
   FloorSound[14][129] = "ZB7_04"; //Check - DVII Tile
   FloorSound[14][130] = "ZB7_05"; //Check - DVII Tile
   FloorSound[14][131] = "ZB7_99"; //Check - DVII Tile
   FloorSound[14][132] = "ZG7_01"; //Check - DVII Tile
   FloorSound[14][133] = "ZG7_02"; //Check - DVII Tile
   FloorSound[14][134] = "ZG7_03"; //Check - DVII Tile
   FloorSound[14][135] = "ZG7_04"; //Check - DVII Tile
   FloorSound[14][136] = "ZG7_05"; //Check - DVII Tile
   FloorSound[14][137] = "ZG7_99"; //Check - DVII Tile
   FloorSound[14][138] = "ZR7_01"; //Check - DVII Tile
   FloorSound[14][139] = "ZR7_02"; //Check - DVII Tile
   FloorSound[14][140] = "ZR7_03"; //Check - DVII Tile
   FloorSound[14][141] = "ZR7_04"; //Check - DVII Tile
   FloorSound[14][142] = "ZR7_05"; //Check - DVII Tile
   FloorSound[14][143] = "ZR7_99"; //Check - DVII Tile
   FloorSound[14][144] = "ZP1_01"; //Check - DVII Tile
   FloorSound[14][145] = "ZP1_02"; //Check - DVII Tile
   FloorSound[14][146] = "ZP1_03"; //Check - DVII Tile
   FloorSound[14][147] = "ZP1_04"; //Check - DVII Tile
   FloorSound[14][148] = "ZP1_05"; //Check - DVII Tile
   FloorSound[14][149] = "ZP1_99"; //Check - DVII Tile
   FloorSound[14][150] = "ZP2_01"; //Check - DVII Tile
   FloorSound[14][151] = "ZP2_02"; //Check - DVII Tile
   FloorSound[14][152] = "ZP2_03"; //Check - DVII Tile
   FloorSound[14][153] = "ZP2_04"; //Check - DVII Tile
   FloorSound[14][154] = "ZP2_05"; //Check - DVII Tile
   FloorSound[14][155] = "ZP2_99"; //Check - DVII Tile
   FloorSound[14][156] = "ZP3_01"; //Check - DVII Tile
   FloorSound[14][157] = "ZP3_02"; //Check - DVII Tile
   FloorSound[14][158] = "ZP3_03"; //Check - DVII Tile
   FloorSound[14][159] = "ZP3_04"; //Check - DVII Tile
   FloorSound[14][160] = "ZP3_05"; //Check - DVII Tile
   FloorSound[14][161] = "ZP3_99"; //Check - DVII Tile
   FloorSound[14][162] = -1;

}

SCRIPT "FootSteps_PlayerDeath" DEATH
{
   feet[PlayerNumber ()] = OFF;
}

//*******************
//***Named Scripts***
//*******************

// Emulates the various special scripts in Doom 1/2 mode [E1M8 (Barons), E2M8 (Cyberdemons), E3M8 (SpiderMasterminds), E4M6 (Cyberdemons again), MAP07 (Mancubi/Arachnotrons), etc]
script "DoomMonsterDeathEmulation" OPEN
{
 int LevelTime, TotalCount1, TotalCount2, TotalCount3, Script1Done, Script1Delay, Script2Done, Script2Delay, Script3Done, Script3Delay, CheckAllScripts;

 LevelTime = Timer();
 if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
 {
  if (ClassicDoomType == 4) // Strife
  {
  }
  else if (ClassicDoomType == 3) // Hexen
  {
  }
  else if (ClassicDoomType == 2) // Heretic
  {
  }
  else if (ClassicDoomType == 1) // Doom 1
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 8) // E1M8 [Barons (tag666)]
   {
    TotalCount1 = ThingCountName("HellKnight", 0);
    TotalCount1 += ThingCountName("DSHellKnight", 0);
    TotalCount1 += ThingCountName("BaronofHell", 0);
    TotalCount1 += ThingCountName("DSBaronofHell", 0);
    TotalCount1 += ThingCountName("Belphegor", 0);
    TotalCount1 += ThingCountName("BruiserDemon", 0);
    TotalCount1 += ThingCountName("ArchonOfHell", 0);
    TotalCount1 += ThingCountName("CyBruiser", 0);
    TotalCount1 += ThingCountName("PyroDemon", 0);
    TotalCount1 += ThingCountName("WeakenedFlyingBalrog", 0);
    TotalCount1 += ThingCountName("FlyingBalrog", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToLowest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 18) // E2M8 [Cyberdemons (endlevel)]
   {
    TotalCount1 = ThingCountName("Cyberdemon", 0);
    TotalCount1 += ThingCountName("DSCyberdemon", 0);
    TotalCount1 += ThingCountName("Annihilator", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 139) { Exit_Normal(0); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) // E3M8 [Spider Masterminds (endlevel)]
   {
    TotalCount1 = ThingCountName("SpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSSpiderMastermind", 0);
    TotalCount1 += ThingCountName("Demolisher", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 139) { Exit_Normal(0); Script1Done++; }
    }
    // PrintBold(d:LevelTime,s:" ",d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" ",d:Script2Done,s:" ",d:Script2Done,s:" ",d:Script3Done,s:" ",d:Script3Done);
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 36) // E4M6 [Cyberdemons (tag666)]
   {
    TotalCount1 = ThingCountName("Cyberdemon", 0);
    TotalCount1 += ThingCountName("DSCyberdemon", 0);
    TotalCount1 += ThingCountName("Annihilator", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Ceiling_RaiseToNearest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 38) // E4M8 [Spider Masterminds (tag666)]
   {
    TotalCount1 = ThingCountName("SpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSSpiderMastermind", 0);
    TotalCount1 += ThingCountName("Demolisher", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToLowest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
  }
  else if (ClassicDoomType == 0) // Doom 2
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 7) // MAP07 [Mancubi (tag666) and Arachnotrons (tag667)]
   {
    // Mancubi (tag666)
    TotalCount1 = ThingCountName("Fatso", 0);
    TotalCount1 += ThingCountName("DSFatso", 0);
    TotalCount1 += ThingCountName("Hectebus", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToNearest(666, 10); Script1Done++; }
    }

    // Arachnotrons (tag667)
    TotalCount2 = ThingCountName("Arachnotron", 0);
    TotalCount2 += ThingCountName("DSArachnotron", 0);
    TotalCount2 += ThingCountName("FusionArachnotron", 0);
    TotalCount2 += ThingCountName("DSRailArachnotron", 0);
    if (LevelTime > 2 && TotalCount2 <= 0 && Script2Done == 0) 
    { 
     Script2Delay++;
     if (Script2Delay > 34) { Floor_RaiseByTexture(667, 10); Script2Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
  }
 }

 Delay(1);
 Restart;
}

// For the Sceptre's Spin Attack & HellCore Weapons
script "WeaponAngleLoop" (int type, int cap, int setangle, int addangle)
{
 int result;
 if (setangle == 0) // check the cap
 {
  if (MiscellaneousVars[20] >= cap) { SetResultValue(1); MiscellaneousVars[20] = 0; }
  else SetResultValue(0);
 }
 else // increment
 {
  MiscellaneousVars[20] += type;
  if (setangle > 0) result = MiscellaneousVars[20];
  if (addangle != 0) result += addangle;

  // Print(d:addangle);
  SetResultValue(result);
 }

 // Print(d:MiscellaneousVars[20],s:"/",d:cap);
}

// For the Sceptre's Spin Attack & HellCore Weapons
script "WeaponAngleLoopSecondary" (int type, int cap, int setangle, int addangle)
{
 int result;
 if (setangle == 0) // check the cap
 {
  if (MiscellaneousVars[163] >= cap) { SetResultValue(1); MiscellaneousVars[163] = 0; }
  else SetResultValue(0);
 }
 else // increment
 {
  MiscellaneousVars[163] += type;
  if (setangle > 0) result = MiscellaneousVars[163];
  if (addangle != 0) result += addangle;

  // Print(d:addangle);
  SetResultValue(result);
 }

 //Print(d:MiscellaneousVars[163],s:"/",d:cap);
}

// DEBUG SCRIPT: Cheat to set stats (pukename "GiveStats" [type] [set/add] [value])
// [TYPE]
// 0 = Aeon Points
// 1 = Agility
// 2 = Defense
// 3 = Deftness
// 4 = Sorcery
// 5 = Strength
// 6 = Therapeusis
// 7 = Hit Points/Health
// 8 = Magic Points/Mana
// [SETADD]
// 0 = Sets [value] to a Fixed Number
// 1 = Adds/Subtracts the Value by [value]

script "GiveStats" (int type, int setadd, int value)
{
 if (setadd == 0) // Sets the stat to a fixed value
 {
  if (type == 0) MiscellaneousVars[25] = value; // Set Aeon Points
  if (type == 1) MiscellaneousVars[31] = value; // Set Agility
  if (type == 2) MiscellaneousVars[32] = value; // Set Defense
  if (type == 3) MiscellaneousVars[33] = value; // Set Deftness
  if (type == 4) MiscellaneousVars[34] = value; // Set Sorcery
  if (type == 5) MiscellaneousVars[35] = value; // Set Strength
  if (type == 6) MiscellaneousVars[36] = value; // Set Therapeusis
  if (type == 7) 
  {
   MaxHealthTrue = value;
   if (MaxHealthTrue < 1) MaxHealthTrue = 1;
   SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
  }
  if (type == 8) MaxMana = value;

 }
 else // Adds/Subtracts the stat
 {
  if (type == 0) // Add Aeon Points
  { 
   MiscellaneousVars[25] += value; 
   MiscellaneousVars[224] += value;
   MiscellaneousVars[2033] = 105;
  }
  if (type == 1) // Add Agility
  {
   MiscellaneousVars[31] += value; 
   MiscellaneousVars[225] += value; 
   MiscellaneousVars[2034] = 105; 
  }
  if (type == 2) // Add Defense
  { 
   MiscellaneousVars[32] += value; 
   MiscellaneousVars[226] += value; 
   MiscellaneousVars[2035] = 105; 
  }
  if (type == 3) // Add Deftness
  { 
   MiscellaneousVars[33] += value; 
   MiscellaneousVars[227] += value; 
   MiscellaneousVars[2036] = 105; 
  }
  if (type == 4) // Add Sorcery 
  { 
   MiscellaneousVars[34] += value; 
   MiscellaneousVars[228] += value; 
   MiscellaneousVars[2037] = 105; 
  }
  if (type == 5) // Add Strength
  { 
   MiscellaneousVars[35] += value; 
   MiscellaneousVars[229] += value; 
   MiscellaneousVars[2038] = 105; 
  }
  if (type == 6) // Add Therapeusis
  {
   MiscellaneousVars[36] += value; 
   MiscellaneousVars[230] += value; 
   MiscellaneousVars[2039] = 105; 
  }
  if (type == 7) // Add MaxHP
  {
   MaxHealthTrue += value;
   MiscellaneousVars[222] += value;
   MiscellaneousVars[2031] = 105;
   if (MaxHealthTrue < 1) MaxHealthTrue = 1;
   SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
  }
  if (type == 8) // Add MaxMP
  {
   MaxMana += value;
   MiscellaneousVars[223] += value;
   MiscellaneousVars[2032] = 105;
  }
 }

 // Lower End Limits
 if (MiscellaneousVars[25] < 0) MiscellaneousVars[25] = 0;
 if (MiscellaneousVars[31] < 0) MiscellaneousVars[31] = 0;
 if (MiscellaneousVars[32] < 0) MiscellaneousVars[32] = 0;
 if (MiscellaneousVars[33] < 0) MiscellaneousVars[33] = 0;
 if (MiscellaneousVars[34] < 0) MiscellaneousVars[34] = 0;
 if (MiscellaneousVars[35] < 0) MiscellaneousVars[35] = 0;
 if (MiscellaneousVars[36] < 0) MiscellaneousVars[36] = 0;
 if (MaxMana < 1) MaxMana = 1;
 

 // Higher End Limits
 if (MiscellaneousVars[25] > 3072) MiscellaneousVars[25] = 3072;
 if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
 if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
 if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
 if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
 if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
 if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
}

// DEBUG SCRIPT: "Pukename ExpCheat [number of experience to add/subtract/set to] [EXP type] [EXP Increment Type]"
script "ExpCheat" (int EXPAmount, int EXPType, int EXPIncType)
{
 // EXPType = 0 is Normal EXP, 1 is Sceptre EXP, 2 is Both Types
 // EXPIncType = 0 is to add, 1 is to subtract, 2 is to set
 if (EXPType == 0)
 {
  if (EXPIncType == 0) Experience += EXPAmount;
  if (EXPIncType == 1) Experience -= EXPAmount;
  if (EXPIncType == 2) Experience = EXPAmount;
  if (Experience < 0) Experience = 0;
 }
 if (EXPType == 1)
 {
  if (EXPIncType == 0) SceptreLevelEXP += EXPAmount;
  if (EXPIncType == 1) SceptreLevelEXP -= EXPAmount;
  if (EXPIncType == 2) SceptreLevelEXP = EXPAmount;
  if (SceptreLevelEXP < 0) SceptreLevelEXP = 0;
 }
 if (EXPType == 2)
 {
  if (EXPIncType == 0) Experience += EXPAmount;
  if (EXPIncType == 1) Experience -= EXPAmount;
  if (EXPIncType == 2) Experience = EXPAmount;
  if (Experience < 0) Experience = 0;
  if (EXPIncType == 0) SceptreLevelEXP += EXPAmount;
  if (EXPIncType == 1) SceptreLevelEXP -= EXPAmount;
  if (EXPIncType == 2) SceptreLevelEXP = EXPAmount;
  if (SceptreLevelEXP < 0) SceptreLevelEXP = 0;
 }
}

script "HellcoreFireMode" (int Check, int WeaponID)
{
 int a;
 // Print(d:Check,s:" ",d:WeaponID);
 if (Check > 0)
 {
  if (WeaponID == 0) { SetResultValue(MiscellaneousVars[132]); a = MiscellaneousVars[132]; } // Bruiser Fist
  if (WeaponID == 1) { SetResultValue(MiscellaneousVars[133]); a = MiscellaneousVars[133]; } // Archon Fist
  if (WeaponID == 2) { SetResultValue(MiscellaneousVars[134]); a = MiscellaneousVars[134]; } // Pyro Fist
  if (WeaponID == 3) { SetResultValue(MiscellaneousVars[135]); a = MiscellaneousVars[135]; } // Diabloist Hand
  //PrintBold(d:a);
 }
 else
 {
  if (WeaponID == 0) // Bruiser Fist
  {
   MiscellaneousVars[132]++;
   if (MiscellaneousVars[132] > 2) MiscellaneousVars[132] = 0;
   if (MiscellaneousVars[132] == 0) Print(s:"'Spread Wave' Selected.");
   if (MiscellaneousVars[132] == 1) Print(s:"'Bruiser Blast' Selected.");
   if (MiscellaneousVars[132] == 2) Print(s:"'Ground Wave' Selected.");
  }
  if (WeaponID == 1) // Archon Fist
  {
   MiscellaneousVars[133]++;
   if (MiscellaneousVars[133] > 2) MiscellaneousVars[133] = 0;
   if (MiscellaneousVars[133] == 0) Print(s:"'Tri-Plasma' Selected.");
   if (MiscellaneousVars[133] == 1) Print(s:"'Plasma Wave' Selected.");
   if (MiscellaneousVars[133] == 2) Print(s:"'Comet Attack' Selected.");
  }
  if (WeaponID == 2) // Pyro Fist
  {
   MiscellaneousVars[134]++;
   if (MiscellaneousVars[134] > 3) MiscellaneousVars[134] = 0;
   if (MiscellaneousVars[134] == 0) Print(s:"'Pyromatic Shot' Selected.");
   if (MiscellaneousVars[134] == 1) Print(s:"'Pyroball' Selected.");
   if (MiscellaneousVars[134] == 2) Print(s:"'Pyromatic Firebomb' Selected.");
   if (MiscellaneousVars[134] == 3) Print(s:"'Pyroportation' Selected.");
  }
  if (WeaponID == 3) // Diabloist Hand
  {
   MiscellaneousVars[135]++;
   if (MiscellaneousVars[135] > 4) MiscellaneousVars[135] = 0;
   if (MiscellaneousVars[135] == 0) Print(s:"'Gravitaton Glare' Selected.");
   if (MiscellaneousVars[135] == 1) Print(s:"'Diabloic Immolation' Selected.");
   if (MiscellaneousVars[135] == 2) Print(s:"'Fire Thrower' Selected.");
   if (MiscellaneousVars[135] == 3) Print(s:"'Fire Blast' Selected.");
   if (MiscellaneousVars[135] == 4) Print(s:"'Snakes of Fire' Selected.");
  }
 }
}

script "BowAntics" (int type)
{
  int buttons;
  if (MiscellaneousVars[2500] != 0) terminate;
  if (PowerupTimer[20] > 0) terminate;
  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (buttons & BT_ALTATTACK) SetResultValue(1);
  else if (buttons & BT_ATTACK) SetResultValue(2);
  else SetResultValue(0);
}

// Consumes a set amount of Stamina when called [1 = 0.01% stamina consumed, etc] or checks for that much for an A_JumpIf call
script "UseStaminaAttack" (int amount, int check)
{
 if (GetCVar("dvds_musou_powertripmode") == 1) amount = amount / 5;
 if (GetCVar("dvds_musou_powertripmode") == 2) amount = amount / 10;
 if (PowerupTimer[1] > 0) amount = amount * 21 / 20; // Partial Invisibility [105% Consumption]
 if (PowerupTimer[4] > 0) amount = amount * 4 / 5; // Invulnerability [80% consumption]
 if (PowerupTimer[10] > 0) amount = amount * 9 / 10; // Oomph [90% consumption]
 if (PowerupTimer[11] > 0) amount = amount * 9 / 10; // Buff [90% consumption]
 if (PowerupTimer[12] > 0) amount = amount * 9 / 10; // Acceleratle [90% consumption]
 if (PowerupTimer[13] > 0) amount = amount * 11 / 10; // Blunt [110% consumption]
 if (PowerupTimer[14] > 0) amount = amount * 11 / 10; // Sap [110% consumption]
 if (PowerupTimer[15] > 0) amount = amount * 11 / 10; // Deceleratle [110% consumption]
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) amount = amount * 3 / 4;

 int whole = amount / 100; 
 int modulus = amount % 100;
 if (GetCVar("dvdsdebug_showstaminausestuff") > 0)
 {
  if (modulus > -1 && modulus < 10) PrintBold(s:"Stamina Used: ",d:whole,s:".0",d:modulus,s:"%");
  else PrintBold(s:"Stamina Used: ",d:whole,s:".",d:modulus,s:"%");
 }

 if (check > 0)
 {
  if (MiscellaneousVars[21] >= amount) 
  {
   if (check > 1)
   {
    MiscellaneousVars[21] -= amount;
    if (MiscellaneousVars[21] < 1) MiscellaneousVars[21] = 0;
   }
   SetResultValue(1); 
  }
  else SetResultValue(0);
 }
 else
 {
  MiscellaneousVars[21] -= amount;
  if (MiscellaneousVars[21] < 1) MiscellaneousVars[21] = 0;
 }
}

script "MaxHPDropChance" (void)
{
 int Chance, roll;

 if (GameSkill() == SKILL_VERY_EASY) Chance = 144; // 9 out of 16
 else if (GameSkill() == SKILL_EASY) Chance = 128; // 8 out of 16
 else if (GameSkill() == SKILL_NORMAL) Chance = 112; // 7 out of 16
 else if (GameSkill() == SKILL_HARD) Chance = 96; // 6 out of 16
 else if (GameSkill() == SKILL_VERY_HARD) Chance = 64; // 4 out of 16
 else Chance = 112;

 roll = random(1,256);
 // PrintBold(d:roll,s:"/",d:Chance);
 SetResultValue(0);
 if (roll <= Chance) SetResultValue(1);
 if (ModType == 0 && GetCVar("dvds_canseedsappear") == 0) SetResultValue(0);
}

script "CheckPlayerIfDead" (void)
{
 if (GetActorProperty(1001,APROP_HEALTH) < 1) SetResultValue(1);
 else SetResultValue(0);
 //PrintBold(s:"1");
}

// Checks and Removes Tension Aura-generators that are at level 0
script "TensionAuraCheckVisual" (void)
{
 if (MiscellaneousVars[181] == 0) Thing_Remove(2001);
}

// CHEAT/DEBUG: Sets Tension level to the specfied amount
script "SetTensionLevel" (int level, int vimstone)
{
 int templevel;
 if (vimstone > 0)
 {
  templevel = MiscellaneousVars[181];
  if (vimstone == 1) 
  {
   templevel += level;
   if (templevel > 4) templevel = 4;
  }
  if (vimstone == 2) 
  {
   templevel += level;
   if (templevel > 7) templevel = 7;
  }
  level = templevel;
 }

 if (level < 0) level = 0;
 if (level > 7) level = 7;

      if (level == 1) FadeRange(254,104,253,0.33,254,104,253,0,1.25);
 else if (level == 2) FadeRange(254,104,253,0.44,254,104,253,0,1.375);
 else if (level == 3) FadeRange(254,104,253,0.55,254,104,253,0,1.5);
 else if (level == 4) FadeRange(254,104,253,0.66,254,104,253,0,1.625);
 else if (level == 5) FadeRange(254,104,253,0.77,254,104,253,0,1.75);
 else if (level == 6) FadeRange(254,104,253,0.88,254,104,253,0,1.875);
 else if (level == 7) FadeRange(254,104,253,0.99,254,104,253,0,2.0);

 SetActivator(1001);
      if (level >= 1 && level <= 3) ActivatorSound("tensionincrease",127);
 else if (level >= 4 && level <= 5) ActivatorSound("tensionhigh1",127);
 else if (level == 6) ActivatorSound("tensionhigh2",127);
 else if (level == 7) ActivatorSound("tensionhigh3",127);
 else if (MiscellaneousVars[181] > 0 && level == 0) PlaySound(1001,"tensionrevert",CHAN_BODY,1.0,0,ATTN_NORM);
 SetActivator(0);
 MiscellaneousVars[181] = level;

 if (MiscellaneousVars[181] == 1) MiscellaneousVars[183] = 3600;
 if (MiscellaneousVars[181] == 2) MiscellaneousVars[183] = 4320;
 if (MiscellaneousVars[181] == 3) MiscellaneousVars[183] = 5184;
 if (MiscellaneousVars[181] == 4) MiscellaneousVars[183] = 6221;
 if (MiscellaneousVars[181] == 5) MiscellaneousVars[183] = 7465;
 if (MiscellaneousVars[181] == 6) MiscellaneousVars[183] = 8958;
 if (MiscellaneousVars[181] == 7) MiscellaneousVars[183] = 10750;

 MiscellaneousVars[184] = 0; // Resets Tension Countdown to idle.
 MiscellaneousVars[186] = 0; // Resets Tension Cooldown to idle.

 // Tension Aura Actor Control
 // TID 2001 - Aura
 str TensionAuraLight;
 int SpawnFixedX;
 int SpawnFixedY;
 int SpawnFixedZ;
 int TensionAuraSpawnHeight;
 int TensionAuraXScale;
 int TensionAuraYScale;
 int TensionAuraAlpha;
 int TensionAuraAlphaInvis;
 if (MiscellaneousVars[181] > 0)
 {
  SpawnFixedX = GetActorX(1001);
  SpawnFixedY = GetActorY(1001);
  SpawnFixedZ = GetActorZ(1001);
  if (CharacterClass == 0) TensionAuraSpawnHeight = 28 * 65536;
  if (CharacterClass == 1) TensionAuraSpawnHeight = 26 * 65536;
  if (CharacterClass == 2) TensionAuraSpawnHeight = 25 * 65536;
  TensionAuraSpawnHeight += SpawnFixedZ;

  if (MiscellaneousVars[181] == 1)
  {
   TensionAuraLight = "TensionAuraLight5"; 
   TensionAuraXScale = 0.5;
   TensionAuraYScale = 0.75;
   TensionAuraAlpha = 0.20;
   TensionAuraAlphaInvis = 0.02;
   if (ThingCountName("TensionAuraLight5", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 2)
  {
   TensionAuraLight = "TensionAuraLight20";
   TensionAuraXScale = 0.5555;
   TensionAuraYScale = 0.8333;
   TensionAuraAlpha = 0.26;
   TensionAuraAlphaInvis = 0.026;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 3) 
  { 
   TensionAuraLight = "TensionAuraLight50"; 
   TensionAuraXScale = 0.6111;
   TensionAuraYScale = 0.9116;
   TensionAuraAlpha = 0.32;
   TensionAuraAlphaInvis = 0.032;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 4)
  {
   TensionAuraLight = "TensionAuraLight100"; 
   TensionAuraXScale = 0.6667;
   TensionAuraYScale = 1.0;
   TensionAuraAlpha = 0.38;
   TensionAuraAlphaInvis = 0.038;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 5) 
  {
   TensionAuraLight = "TensionAuraLight250";
   TensionAuraXScale = 0.7222;
   TensionAuraYScale = 1.0833;
   TensionAuraAlpha = 0.44;
   TensionAuraAlphaInvis = 0.044;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 6) 
  {
   TensionAuraLight = "TensionAuraLight500"; 
   TensionAuraXScale = 0.7777;
   TensionAuraYScale = 1.1666;
   TensionAuraAlpha = 0.5;
   TensionAuraAlphaInvis = 0.05;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
   if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
  }
  if (MiscellaneousVars[181] == 7) 
  {
   TensionAuraLight = "TensionAuraLight1000";
   TensionAuraXScale = 0.8333;
   TensionAuraYScale = 1.25;
   TensionAuraAlpha = 0.36;
   TensionAuraAlphaInvis = 0.056;
   if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
   if (ThingCountName("TensionAuraLight1000", 1502) < 1) SpawnForced(TensionAuraLight,SpawnFixedX,SpawnFixedY,TensionAuraSpawnHeight,1502,0);
  }

  if (CharacterClass == 0) { TensionAuraXScale = TensionAuraXScale * 112 / 100;  TensionAuraYScale = TensionAuraYScale * 123 / 100; }
  if (CharacterClass == 1) { TensionAuraXScale = TensionAuraXScale * 104 / 100;  TensionAuraYScale = TensionAuraYScale * 108 / 100; }
  if (CharacterClass == 2) { TensionAuraXScale = TensionAuraXScale * 100 / 100;  TensionAuraYScale = TensionAuraYScale * 100 / 100; }

  if (ThingCountName("TensionAuraLooper", 1501) < 1) SpawnForced("TensionAuraLooper",SpawnFixedX,SpawnFixedY,SpawnFixedZ,1501,0);
  if (ThingCountName("TensionAuraLooper", 1501) > 0)
  {
   SetActorProperty(1501,APROP_ScaleX,TensionAuraXScale);
   SetActorProperty(1501,APROP_ScaleY,TensionAuraYScale);
   if (PowerupTimer[1] > 0) SetActorProperty(1501,APROP_Alpha,TensionAuraAlphaInvis);
   else SetActorProperty(1501,APROP_Alpha,TensionAuraAlpha);
  }
 }
 else
 {
  if (ThingCountName("TensionAuraLooper", 1501) > 0) Thing_Remove(1501);
  if (ThingCountName("TensionAuraLight5", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight20", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight50", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight100", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight250", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight500", 1502) > 0) Thing_Remove(1502);
  if (ThingCountName("TensionAuraLight1000", 1502) > 0) Thing_Remove(1502);
 }
}

// Check Tension Type for Aura Settings on Aura Actors
script "CheckTensionLevel" (void)
{
 //PrintBold(d:MiscellaneousVars[181]);
 SetResultValue(MiscellaneousVars[181]);
}

// Check invisiblity for Tension lights
script "CheckTensionInvis" (void)
{
 if (PowerupTimer[1] > 0)
 {
  //PrintBold(s:"1");
  SetResultValue(1);
 }
 else
 {
  //PrintBold(s:"0");
  SetResultValue(0); 
 }
}

// When an attack or a healing ability is activated while Tension is active, starts the countdown for it to fade.
script "StartTensionCountDown" (void)
{
 int random1;
 if (MiscellaneousVars[181] > 0)
 {
  if (MiscellaneousVars[184] == 0) // If the timer is not activated
  {
   if (random(1,1000) > 10) // 1% An attack will NOT start the countdown
   {
    MiscellaneousVars[184] = 1;
    random1 = random(1,10);
    if (random1 == 1) MiscellaneousVars[183] = MiscellaneousVars[183] * 3 / 4; // 10% Chance for the timer to be cut by 25%
   }
  }
 }
}

script "TensionParticleSpawnChance" (void)
{
 // 256 means never spawn, 0 means ALWAYS spawn
 if (MiscellaneousVars[181] == 0) SetResultValue(224);
 if (MiscellaneousVars[181] == 1) SetResultValue(220); // -4
 if (MiscellaneousVars[181] == 2) SetResultValue(215); // -5
 if (MiscellaneousVars[181] == 3) SetResultValue(209); // -6
 if (MiscellaneousVars[181] == 4) SetResultValue(195); // -14
 if (MiscellaneousVars[181] == 5) SetResultValue(187); // -8
 if (MiscellaneousVars[181] == 6) SetResultValue(176); // -9
 if (MiscellaneousVars[181] == 7) SetResultValue(156); // -20
}

// Sets the player's amount of kills [or if a negative value is entered, will print the current amount of their kills]
script "SetKillCount" (int amount)
{
 if (amount >= 0) MiscellaneousVars[167] = amount;
 PrintBold(d:MiscellaneousVars[167]);
}

// New Method of adding EXP when certain kills or actions are performed, and searches for specfic things like +FRIENDLY of if the player killed said enemy, etc
script "AddEXP" (int baseamount, int flags, int incrementcombo)
{
 int baseexp, finalexpamount, overkillhp, overkillhp2;
 int Exp1, Exp2, ExpMultiFactor, RealExpGain;
 int ComboMultiplier;

 int MonsterX = GetActorX(0);
 int MonsterY = GetActorY(0);
 int MonsterZ = GetActorZ(0);

 int RandomArmorDropChance;
 int RandomArmorDropMulti;


 if (GameSkill() == SKILL_VERY_EASY) RandomArmorDropMulti = 75;
 else if (GameSkill() == SKILL_EASY) RandomArmorDropMulti = 90;
 else if (GameSkill() == SKILL_NORMAL) RandomArmorDropMulti = 100;
 else if (GameSkill() == SKILL_HARD) RandomArmorDropMulti = 110;
 else if (GameSkill() == SKILL_VERY_HARD) RandomArmorDropMulti = 125;

 if (GetCVar("dvds_exppropercredit") == 1 && IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == FALSE) terminate;
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"Passed Player-Credit Check: YES");
 }
 if (GetActorProperty(1001,APROP_Health) <= 0) terminate;
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"Passed Player-Alive Check: YES");
 }
 if (CheckFlag(0,"FRIENDLY") == 1)
 {
  if (flags & 1) { }
  else terminate; // Any "FRIENDLY" flagged monster who runs the script will not get beyond this point UNLESS they have bit 1 enabled.
 }
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"Passed FRIENDLY Check: YES");
 }

 int HellCoreRuinousDropChance = 5;
 if (CheckActorInventory(1001,"RuinousShield") > 0) HellCoreRuinousDropChance = 12;
 if (CharacterClass != 2) HellCoreRuinousDropChance = 0;
 // Monster Unique Drop Rates [Hellcore weapons]
 if (CheckActorClass(0,"DSDoomImp") == 1) 		DropItem(0,"ImpClawCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DarkImp") == 1) 		DropItem(0,"DarkImpClawCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DSCacodemon") == 1) 	DropItem(0,"CacodemonEyeCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"Cacolantern") == 1) 	DropItem(0,"CacolanternEyeCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"Abaddon") == 1) 		DropItem(0,"AbaddonEyeCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DSHellKnight") == 1) 	DropItem(0,"KnightFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DSBaronofHell") == 1) 	DropItem(0,"BaronFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"Belphegor") == 1) 		DropItem(0,"BelphegorFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"BruiserDemon") == 1) 	DropItem(0,"BruiserFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"ArchonOfHell") == 1) 	DropItem(0,"ArchonFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"PyroDemon") == 1) 		DropItem(0,"PyroFistCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DeathIncarnate") == 1) 	DropItem(0,"IncarnateSkullCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"DSArchvile") == 1) 		DropItem(0,"ArchvileHandCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"Diabloist") == 1) 		DropItem(0,"DiabloistHandCI",1,HellCoreRuinousDropChance);
 if (CheckActorClass(0,"FlyingBalrog") == 1) 	DropItem(0,"BalrogFistCI",1,HellCoreRuinousDropChance);
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1) PrintBold(d:HellCoreRuinousDropChance);


 // Ruinous Shield Checks
 if (IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == TRUE) 
 {
  if (CharacterClass == 2 && CheckActorInventory(1001,"RuinousShield") > 0) // Flora
  {
   if (GetCVar("dvdsdebug_showexpdebugstuff") == 1) PrintBold(d:MiscellaneousVars[202]);
   // Increase Ruinous Shield Counter by 1 or 2 pts [this allows the player to uncurse the shield slowly by killing enemies.
   if (random(1,100) <= 98)
   {
    if (random(1,100) <= 75) MiscellaneousVars[202] += 1; else MiscellaneousVars[202] += 2;
   }
   else
   {
    if (random(1,100) <= 75) MiscellaneousVars[202] += 4; else MiscellaneousVars[202] += 8;
   }
   if (GetCVar("dvdsdebug_showexpdebugstuff") == 1) PrintBold(d:MiscellaneousVars[202]);
  }

  MiscellaneousVars[167] += 1; // Increases Player's actual total kill count by 1
  //PrintBold(d:MiscellaneousVars[167]);
 }
 if (ModType == 0) // Classic Doom 1-2/Heretic/Hexen/Strife mode :P
 {
   if (CharacterClass == 2) // Flora
   {
    if (MiscellaneousVars[167] == 20) // 20 enemies killed, high chance of spawning an armor item for Flora
    {
     // 75% chance
     RandomArmorDropChance = 25 * RandomArmorDropMulti / 100;
     if (random(1,100) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 200) // 200 enemies killed, fair chance of spawning an armor item for Flora
    {
     // 50% chance
     RandomArmorDropChance = 50 * RandomArmorDropMulti / 100;
     if (random(1,100) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 800) // 800 enemies killed, low chance of spawning an armor item for Flora
    {
     // 25% chance
     RandomArmorDropChance = 75 * RandomArmorDropMulti / 100;
     if (random(1,100) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 1400) // 1400 enemies killed, low chance of spawning an armor item for Flora
    {
     // 25% chance
     RandomArmorDropChance = 75 * RandomArmorDropMulti / 100;
     if (random(1,100) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 2000) // 2000 enemies killed, low chance of spawning an armor item for Flora
    {
     // 12.5% chance
     RandomArmorDropChance = 875 * RandomArmorDropMulti / 1000;
     if (random(1,1000) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 2800) // 2800 enemies killed, low chance of spawning an armor item for Flora
    {
     // 12.5% chance
     RandomArmorDropChance = 875 * RandomArmorDropMulti / 1000;
     if (random(1,1000) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 3600) // 3600 enemies killed, low chance of spawning an armor item for Flora
    {
     // 6.25% chance
     RandomArmorDropChance = 9375 * RandomArmorDropMulti / 10000;
     if (random(1,10000) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
    if (MiscellaneousVars[167] == 4600) // 4600 enemies killed, low chance of spawning an armor item for Flora
    {
     // 6.25% chance
     RandomArmorDropChance = 9375 * RandomArmorDropMulti / 10000;
     if (random(1,10000) > RandomArmorDropChance) SpawnForced("FloraRandomArmorAlwaysDrop",GetActorX(0),GetActorY(0),GetActorZ(0)+(8*65536),0,0);
    }
   }
 }

 if (ModType == 0 && GetCVar("dvds_noexpgains") != 0) terminate; // If in Classic mode and the EXP Gain option is turned off, stop script here.

 int EXPTimerIncrease;
 // Increment the kill combo timer
 if (GetCVar("dvds_expcombosystem") == 1)
 {
  if (incrementcombo == 1)
  {
   if (MiscellaneousVars[157] <= 0) // If not set, set to 4 seconds, if already set, add 1 second
   {
    EXPTimerIncrease = 2800; // 140 tics [20 units / tic]
    EXPTimerIncrease += (MiscellaneousVars[31] * 16); // 1 point of Agility = 0.8 tics [or 16 units] [5 points = 4 tics (or 80 units)]
    EXPTimerIncrease += (MiscellaneousVars[33] * 4); // 1 point of Deftness = 0.2 tics [or 4 units] [20 points = 4 tics (or 80 units)]
   }
   else
   {
    EXPTimerIncrease = 700; // 35 tics [20 units / tic]
    EXPTimerIncrease += (MiscellaneousVars[31] * 4); // 1 point of Agility = 0.2 tics [or 4 units] [5 points = 1 tic (or 20 units)]
    EXPTimerIncrease += (MiscellaneousVars[33] * 1); // 1 point of Deftness = 0.05 tics [or 1 unit] [20 points = 1 tic (or 20 units)]
   }
   if (PowerupTimer[7] > 0) EXPTimerIncrease = EXPTimerIncrease * 5 / 4;
   MiscellaneousVars[157] += EXPTimerIncrease;
   if (PowerupTimer[7] > 0) 
   {
    if (MiscellaneousVars[157] >= 7000) MiscellaneousVars[157] = 7000; // Combo Timer maxes at 8 seconds.
   }
   else
   {
    if (MiscellaneousVars[157] >= 5600) MiscellaneousVars[157] = 5600; // Combo Timer maxes at 8 seconds.
   }
   MiscellaneousVars[158] += 1; // Increment Kill Combo Count by 1
  }
 }

 // Check Base Experience to see if it's a fixed amount or if it should be based on spawnhealth/user_MaxHP
 if (baseamount == -2) // Base on the menu option
 {
  if (GetCVar("dvds_monsterexpbase") == 1)
  {
   if (GetUserVariable(0,"user_MaxHP") <= 0)
   {
    baseexp = GetActorProperty(0,APROP_SpawnHealth);
   }
   else
   {
    baseexp = GetUserVariable(0,"user_MaxHP");
   }
  }
  else
  {
   baseexp = GetActorProperty(0,APROP_SpawnHealth);
  }
 }
 else
 if (baseamount == -1) // ALWAYS use SpawnHealth and not user_MaxHP [if you always want it based only on their base HP and not their recalculated HP]
 {
  baseexp = GetActorProperty(0,APROP_SpawnHealth);
 }
 else
 if (baseamount == 0) // Checks for user_MaxHP first, but will use SpawnHealth if it's not been set
 {
  if (GetUserVariable(0,"user_MaxHP") <= 0)
  {
   baseexp = GetActorProperty(0,APROP_SpawnHealth);
  }
  else
  {
   baseexp = GetUserVariable(0,"user_MaxHP");
  }
 }
 else
 if (baseamount > 0) // Sets the EXP to the defined value as a fixed amount
 {
  baseexp = baseamount;
 }

 finalexpamount = baseexp;
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"EXP: ",d:finalexpamount);
 }

 // Check for Fast Monsters setting
 if (GetCVar("sv_fastmonsters") == 1) finalexpamount = finalexpamount * 11 / 8; // [+37.5%]

 // Check Proper Flags
 if (GetUserVariable(0, "user_isstealth") > 0)
 {
  if (CheckActorInventory(1001,"TheOneRing") > 0) finalexpamount = finalexpamount * 9 / 8;	// DV-DS Style Stealth = [+12.5%]
  else finalexpamount = finalexpamount * 15 / 8;	// DV-DS Style Stealth = [+87.5%]
 }
 if (CheckFlag(0,"STEALTH") == 1) finalexpamount = finalexpamount * 2;	// ZDoom Style STEALTH = [+100%]
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"EXP2: ",d:finalexpamount);
 }

 if (GetUserVariable(0,"user_MaxHP") <= 0) { overkillhp = GetActorProperty(0,APROP_SpawnHealth) * -1; }
 else { overkillhp = GetUserVariable(0,"user_MaxHP") * -1; }

 if (GetUserVariable(0,"user_MaxHP") <= 0) { overkillhp2 = GetActorProperty(0,APROP_SpawnHealth) * -4; }
 else { overkillhp2 = GetUserVariable(0,"user_MaxHP") * -4; }

 if (GetActorProperty(0,APROP_Health) <= overkillhp) // Overkilled [+25%]
 {
  finalexpamount = finalexpamount * 9 / 8; 
  MiscellaneousVars[2022] = 1; 
  MiscellaneousVars[2023] = 52; 
 }
 if (GetActorProperty(0,APROP_Health) <= overkillhp2) // Super-Overkilled [+25%]
 {
  finalexpamount = finalexpamount * 9 / 8; 
  MiscellaneousVars[2022] = 2; 
  MiscellaneousVars[2023] = 52; 
 }
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"EXP3: ",d:finalexpamount);
 }

 ExpMultiFactor = GetExpMultiFactor(); // FUNCTION CALL
 finalexpamount = GetExperience(finalexpamount,ExpMultiFactor); // FUNCTION CALL
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"EXP4: ",d:finalexpamount);
 }

 int levelcheck = GetUserVariable(0, "user_monsterlevel") * 750; // Lvl 100 = +75.0% EXP
 levelcheck += 100000;
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"levelcheck: ",d:levelcheck);
 }
 finalexpamount = finalexpamount * levelcheck / 100000;
 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(s:"EXP5: ",d:finalexpamount);
 }

 int PreComboEXP = finalexpamount;
 // EXP Combo Counter
 // [158] = number of enemies killed in current combo
 // [159] = current multiplier amount [xxx.xx% format]
 // [162] = Exp Combo Base Multipler
 if (MiscellaneousVars[158] > 1)
 {
  if (MiscellaneousVars[158] < 11)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 16;
   // Each enemy = +0.16% to the bonus multiplier [2-11 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 10 && MiscellaneousVars[158] < 21)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 17;
   // Each enemy = +0.17% to the bonus multiplier [11-20 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 20 && MiscellaneousVars[158] < 36)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 20;
   // Each enemy = +0.20% to the bonus multiplier [21-35 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 35 && MiscellaneousVars[158] < 61)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 24;
   // Each enemy = +0.24% to the bonus multiplier [36-60 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 60 && MiscellaneousVars[158] < 101)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 28;
   // Each enemy = +0.28% to the bonus multiplier [61-100 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 100 && MiscellaneousVars[158] < 201)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 34;
   // Each enemy = +0.34% to the bonus multiplier [101-200 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 200 && MiscellaneousVars[158] < 501)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 40;
   // Each enemy = +0.40% to the bonus multiplier [201-500 enemies killed]
  }
  else
  if (MiscellaneousVars[158] > 500)
  {
   MiscellaneousVars[159] = MiscellaneousVars[158] * 52;
   // Each enemy = +0.52% to the bonus multiplier [501+ enemies killed]
  }
  MiscellaneousVars[159] = MiscellaneousVars[159] * MiscellaneousVars[162] / 100;
  if (MiscellaneousVars[159] < 1) MiscellaneousVars[159] = 1;
  MiscellaneousVars[159] = MiscellaneousVars[159] + 10000;

  //if (MiscellaneousVars[159] > 30000) MiscellaneousVars[159] = 30000;
  //if (finalexpamount > 200000) finalexpamount = 200000;

  finalexpamount = (finalexpamount * MiscellaneousVars[159]) / 10000;
  if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
  {
   PrintBold(s:"Combo %: ",d:MiscellaneousVars[159],
             s:"\nEXP5: ",d:finalexpamount);
  }
 }

 if (finalexpamount < 1) finalexpamount = 1;
 Experience += finalexpamount;

 if (GetCVar("dvdsdebug_showexpdebugstuff") == 1)
 {
  PrintBold(d:GetActorProperty(0,APROP_Health),s:" / ",d:overkillhp,s:"\n",
           d:baseexp,s:" / ",d:finalexpamount);
 }

 MiscellaneousVars[2024] = finalexpamount; // Total EXP for kill [for new HUD]
 MiscellaneousVars[2025] = PreComboEXP; // Total EXP for kill [for new HUD]
 MiscellaneousVars[2026] = 52; 
 SetHudSize(640,480,0);
 if (GetActorProperty(0,APROP_Health) <= overkillhp2)
 {
  SetActivator(0,AAPTR_PLAYER1);
  if (MiscellaneousVars[2000] == 0) // Show this version of the "OVERKILL!" message in old-style HUD mode only
  {
   if (finalexpamount-PreComboEXP > 1) HudMessage(s:"+",d:finalexpamount,s:" EXP \cn[+",d:finalexpamount-PreComboEXP,s:"]\c-";0,3418,cr_gold,59.0,6.0,1.5);
   else HudMessage(s:"+",d:finalexpamount,s:" EXP";0,3418,cr_gold,51.0,6.0,1.5);
   HudMessage(s:"\cjOVERKILL!";0,3421,cr_red,51.0,15.0,1.5);
  }
 }
 else
 {
  if (GetActorProperty(0,APROP_Health) <= overkillhp)
  {
   SetActivator(0,AAPTR_PLAYER1);
   if (MiscellaneousVars[2000] == 0) // Show this version of the "OVERKILL!" message in old-style HUD mode only
   {
    if (finalexpamount-PreComboEXP > 1) HudMessage(s:"+",d:finalexpamount,s:" EXP \cn[+",d:finalexpamount-PreComboEXP,s:"]\c-";0,3418,cr_gold,59.0,6.0,1.5);
    else HudMessage(s:"+",d:finalexpamount,s:" EXP";0,3418,cr_gold,51.0,6.0,1.5);
    HudMessage(s:"\cgOVERKILL!";0,3421,cr_red,51.0,15.0,1.5);
   }
  }
  else
  {
   SetActivator(0,AAPTR_PLAYER1);
   if (MiscellaneousVars[2000] == 0) // Show this version of the "OVERKILL!" message in old-style HUD mode only
   {
    if (finalexpamount-PreComboEXP > 1) HudMessage(s:"+",d:finalexpamount,s:" EXP \cn[+",d:finalexpamount-PreComboEXP,s:"]\c-";0,3418,cr_gold,59.0,11.0,1.5);
    else HudMessage(s:"+",d:finalexpamount,s:" EXP";0,3418,cr_gold,51.0,6.0,1.5);
    HudMessage(s:"";0,3421,cr_red,51.0,11.0,1.5);
   }
  }
 }

 if (GetCVar("dvds_expcombosystem") == 1 && incrementcombo == 1)
 {
  MiscellaneousVars[160] += finalexpamount;
 }
}

script "CheckDVIIMonstersOption" (void)
{
 SetResultValue(GetCVar("dvds_classicdviimonsters"));
}

// Activate's the player's whistle ability, which will awaken as many monsters as possible in a certain area
script "UseWhistle" (void)
{
 int FreezePlayer = 0;
 int WhistleStamUse = 200;
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) WhistleStamUse = WhistleStamUse * 3 / 4;

 if (PowerupTimer[20] > 0) FreezePlayer += 1;
 if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
 if (GetActorProperty(1001,APROP_Health) > 0 && MiscellaneousVars[168] == 0 && MiscellaneousVars[21] >= WhistleStamUse && FreezePlayer == 0)
 {
  SpawnForced("PlayerWhistle",GetActorX(1001),GetActorY(1001),GetActorZ(1001)+(32*65536),0,0);
  NoiseAlert(1001,1001);
  MiscellaneousVars[21] -= WhistleStamUse;
  MiscellaneousVars[168] = 24; // Set's cooldown for whistling
 }
}

// Checks the first Chainsaw to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
script "SawCheckSceptre" (void)
{
 int Result = 0;
 if (CharacterClass == 2)
 {
  if (GetCVar("dvds_startsceptre") == 0)
  {
   if (CheckActorInventory(1001,"SceptreOfEmpyrea") == 0)
   {
    if (ThingCountName("SceptreOfEmpyrea", 0) < 1)
    {
     Result = 1;
    }
   }
  }
 }

 SetResultValue(Result);
}

// Checks the Berserk Pack to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
script "BerserkCheckSceptre" (void)
{
 int Result = 0;
 if (random(1,4) == 1)
 {
  if (CharacterClass == 2)
  {
   if (GetCVar("dvds_startsceptre") == 0)
   {
    if (CheckActorInventory(1001,"SceptreOfEmpyrea") == 0)
    {
     if (ThingCountName("SceptreOfEmpyrea", 0) < 1)
     {
      Result = 1;
     }
    }
   }
  }
 }
 SetResultValue(Result);
}

// Gets the Type of Classic Doom mode being used
script "CheckDoomType" (void)
{
 // 0 = Doom 2
 // 1 = Doom 1
 // 2 = Heretic
 // 3 = Hexen
 // 4 = Strife
 SetResultValue(ClassicDoomType);
}

// Returns Damage inflicted by Raging Spirit ghosts.
script "GetRagingSpiritDMG" (void)
{
 int damage;
 int extradamage = (MiscellaneousVars[34] + MiscellaneousVars[36]) / 5;

 damage = (((5 + random(0,2)) * random(4,8)) + extradamage) / 10; // 5-7 * 4-8 + ? / 5 = 4-14
 if (damage < 1) damage = random(1,2);

 if (CharacterClass == 0) damage = damage * 21 / 10; // Deggaris gives a 2.1x damage boost
 else if (CharacterClass == 2) damage = damage * 32 / 10; // Flora gives a 3.2x damage boost

 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) damage = damage * 3 / 2;
 if (damage < 1) damage = random(1,2);

 SetResultValue(damage);
}

// Returns Damage inflicted by Poison Clouds.
script "GetPoisonCloudDMG" (int level)
{
 int damage, extradamage;

 if (Level == 0) damage = random(8,12); // Minor
 if (Level == 1) damage = random(17,23); // Normal
 if (Level == 2) damage = random(36,44); // Major

 if (Level == 3) damage = random(4,6); // Minor [left]
 if (Level == 4) damage = random(9,12); // Normal [left]
 if (Level == 5) damage = random(18,22); // Major [left]

      if (CharacterClass == 0) damage = damage * 32 / 10;
 else if (CharacterClass == 1) damage = damage * 21 / 10;

 extradamage = damage * (MiscellaneousVars[34] / 2) / 75;
 damage += extradamage;

 if (damage < 1) damage = 1;
 SetResultValue(damage);
}

// Returns the Character ID
script "CheckCharacterClass" (void)
{
 SetResultValue(CharacterClass);
}

// -----------------------------------------------------------------------------
//
// Side dashing / dodging scripts by KeksDose
//
// 23 / June / 2013
//
// This script allows you to double tap your strafing buttons to execute some
// mad side dash. Kinda like the sidestep spring in GoldenEye 007
// and Perfect Dark.
//
// Edit 20 / April / 2014:
//
// Condensed script to 80 character limit, improved some stuff. Dashing on the
// ground is more powerful, air dash adds a little jump. Using the resurrect
// cheat will no longer disable dashing. You can now dash with the turn buttons.
// And the dash sound will no longer play in the whole map. Now works like
// Unreal's dashing.
//
// Reuse and modify these scripts as you wish, just credit me somewhere.
//
// -----------------------------------------------------------------------------

// Preprocessor and global constants:

#libdefine SD_TIMEFRAME		8		// Tics during which you must double press
#libdefine SD_DASHDELAY		30		// Tics before being able to dash again
#libdefine SD_DASHSPEED		9.0		// Dash speed whilst in the air
#libdefine SD_DASHJUMP		10.0	// Adds a little z-velocity while in the air
#libdefine SD_DASHSTRONG	20.0	// And dash speed whilst grounded
#libdefine SD_SOUNDVOLUME	1.0		// How loud the dash sound is played

str dashSound;
str dashGruntSound;

// Global variables:

int settings[4][2] = 
{
 { BT_FORWARD,		0.00 	},
 { BT_MOVELEFT,		0.25	}, // Yeah, I don't like dashing by accident when I combine TURNLEFT w/ MOVELEFT, so TURNLEFT doesn't apply in DV-DS's version
 { BT_BACK,			0.50	},
 { BT_MOVERIGHT,	0.75	} // Yeah, I don't like dashing by accident when I combine TURNRIGHT w/ MOVERIGHT, so TURNRIGHT doesn't apply in DV-DS's version
};

function int IsButtonPressed (int input, int oldInput, int mask)
{
 return (input & ~oldInput) & mask;
}

script "KD-SideDodge" enter
{
 int input, oldInput, taps, tics, last, angle, velX, velY, velZ;
 int dashstamina, cooldownreduction;

 int dashtapwindow = 8;			// Same type of var/define as SD_TIMEFRAME, but made to be editable
 int dashcooldown = 30;			// Same type of var/define as SD_DASHDELAY, but made to be editable
 int airdashvel = 20.0;			// Same type of var/define as SD_DASHSPEED, but made to be editable 
 int dashjumpstrength = 5.0;	// Same type of var/define as SD_DASHJUMP, but made to be editable
 int floordashvel = 25.0;		// Same type of var/define as SD_DASHSTRONG, but made to be editable
 int dashsoundvolume = 0.67;	// Same type of var/define as SD_SOUNDVOLUME, but made to be editable
 int dashgruntsoundvolume = 1.0;

 int FreezePlayer = 0;
 while(GetActorProperty(0, APROP_HEALTH) > 0)
 { 
  input = GetPlayerInput(-1, INPUT_BUTTONS);
  oldInput = GetPlayerInput(-1, INPUT_OLDBUTTONS);

  dashcooldown = 30;
  if (PlayerLevel >= 16) cooldownreduction = 1 + ((PlayerLevel - 16) / 32);
  dashcooldown -= cooldownreduction;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) dashcooldown = dashcooldown * 3 / 4; // Dash-Cooldown time cut by 25%

  if (GetActorZ(0) - GetActorFloorZ(0) > 0)
  {
   dashstamina = 625;
  }
  else
  {
   dashstamina = 500;
  }
  if (GetCVar("dvds_musou_powertripmode") == 1) dashstamina = dashstamina / 5;
  if (GetCVar("dvds_musou_powertripmode") == 2) dashstamina = dashstamina / 10; 
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) dashstamina = dashstamina * 2 / 5; // Stamina require for dash/air-dash cut by 60%
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) dashstamina = dashstamina * 3 / 4;

  for (int i = 0; i < 4; i++)
  {
   if (IsButtonPressed(input, oldInput, settings[i][0]) && MiscellaneousVars[21] >= dashstamina && GetCVar("dvds_allowdashing") > 0) // DV-DS version also requires a minimal amount of Stamina and the Dash option on to perform
   {
    taps++;
    tics = dashtapwindow;

    if (taps == 2 && last == i)
    {
     taps = 0;
     angle = GetActorAngle(0) + settings[i][1];

     if (GetActorZ(0) - GetActorFloorZ(0) > 0)
     {
      velX = FixedMul(cos(angle), airdashvel);
      velY = FixedMul(sin(angle), airdashvel);
      velZ = -GetActorVelZ(0) + dashjumpstrength;
      dashSound = "player/airjump";
      if (CharacterClass == 0) dashGruntSound = "DeggarisDash";
      if (CharacterClass == 1) dashGruntSound = "IlluciaDash";
      if (CharacterClass == 2) dashGruntSound = "FloraDash";
     }
     else
     {
      velX = FixedMul(cos(angle), floordashvel);
      velY = FixedMul(sin(angle), floordashvel);
      velZ = 0.0;
      dashSound = "player/dash";
      if (CharacterClass == 0) dashGruntSound = "DeggarisDash";
      if (CharacterClass == 1) dashGruntSound = "IlluciaDash";
      if (CharacterClass == 2) dashGruntSound = "FloraDash";
     }

     FreezePlayer = 0;
     if (MiscellaneousVars[2500] > 0) FreezePlayer += 1;
     if (PowerupTimer[20] > 0) FreezePlayer += 1;
     if (FreezePlayer == 0)
     {
      MiscellaneousVars[21] -= dashstamina;
      if (MiscellaneousVars[21] < 0) MiscellaneousVars[21] = 0;
      SetActorVelocity(0, velX, velY, velZ, true, false);
      PlaySound(0, dashSound, CHAN_BODY, dashsoundvolume);
      if (random(1,100) <= GetCVar("dvds_dashgruntchance")) PlaySound(0, dashGruntSound, CHAN_VOICE, dashgruntsoundvolume);
      MiscellaneousVars[166] = 18;
      Delay(dashcooldown);
     }

     while(GetActorVelZ(0) < 0.0)
     {
      Delay(const:1);
     }
    }

    last = i;
   }
  }

  if(tics)
  {
   tics--;

   if(!tics)
   {
    taps = 0;
   }
  }

  if (GetCVar("dvdsdebug_showdashinformation") > 0)
  {
   PrintBold(s:"i: ",d:i,
             s:"\ninput: ",d:input,
             s:"\noldInput: ",d:oldInput,
             s:"\ntics: ",d:tics,
             s:"\nlast: ",d:last,
             s:"\ntaps: ",d:taps,
             s:"\ncooldownreduction: ",d:cooldownreduction,
             s:"\ndashcooldown: ",d:dashcooldown);
  }
  Delay(const:1);
 }
}

script "KD-ResurrectSideDodge" death
{
 while(GetActorProperty(0, APROP_HEALTH) <= 0)
  Delay(const:1);
 
 ACS_NamedExecuteAlways("KD-SideDodge", 0);
}

script "KD-ReactivateSideDodge" respawn
{
 ACS_NamedExecuteAlways("KD-SideDodge", 0);
}


// STRIFE Compatibility [Stamina Upgrades]
script "StrifeStaminaUpgrade" (int increaseamount)
{
 MiscellaneousVars[317] += 1;
 if (MiscellaneousVars[317] < 0) MiscellaneousVars[317] = 0;
 if (MiscellaneousVars[317] > 10) MiscellaneousVars[317] = 10;
}

// STRIFE Compatibility [Accuracy Upgrades]
script "StrifeAccuracyUpgrade" (int increaseamount)
{
 MiscellaneousVars[318] += 1;
 if (MiscellaneousVars[318] < 0) MiscellaneousVars[318] = 0;
 if (MiscellaneousVars[318] > 11) MiscellaneousVars[318] = 11;

 if (MiscellaneousVars[318] == 1) MiscellaneousVars[25] += 11;
 if (MiscellaneousVars[318] == 2) MiscellaneousVars[25] += 13;
 if (MiscellaneousVars[318] == 3) MiscellaneousVars[25] += 15;
 if (MiscellaneousVars[318] == 4) MiscellaneousVars[25] += 17;
 if (MiscellaneousVars[318] == 5) MiscellaneousVars[25] += 19;
 if (MiscellaneousVars[318] == 6) MiscellaneousVars[25] += 21;
 if (MiscellaneousVars[318] == 7) MiscellaneousVars[25] += 23;
 if (MiscellaneousVars[318] == 8) MiscellaneousVars[25] += 25;
 if (MiscellaneousVars[318] == 9) MiscellaneousVars[25] += 27;
 if (MiscellaneousVars[318] == 10) MiscellaneousVars[25] += 29;
}

