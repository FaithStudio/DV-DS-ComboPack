class DamageIndicators : StaticEventHandler
{
	/*
	 * Create a DamageTracker when an actor spawns or is revived. - Xaser
	 */
	override void WorldThingSpawned(WorldEvent e)
	{
		if (self.ShouldSpawn(e.Thing))
		{
			DamageTracker.Create(e.thing);
		}
	}
	override void WorldThingRevived(WorldEvent e)
	{
		if (self.ShouldSpawn(e.Thing))
		{
			DamageTracker.Create(e.thing);
		}
	}
	
	/*
	 * Determine if we should spawn/track a particular thing. - Xaser
	 */
	bool ShouldSpawn(Actor thing) 
	{
		if (thing)
		{
			AetheriusMonsterZSC type;
			AetheriusPlayerPawn type2;
			ExplosiveBarrel type3;
			Pod type4;
			ExplosiveBarrel2 type5;

			if (type = AetheriusMonsterZSC(thing)) return true;
			if (type2 = AetheriusPlayerPawn(thing)) return true;
			if (type3 = ExplosiveBarrel(thing)) return true;
			if (type4 = Pod(thing)) return true;
			if (type5 = ExplosiveBarrel2(thing)) return true;
		}
		
		//if (thing && (thing.bIsMonster || thing.bShootable)) return true;
		
		return false;
	}
}

class DamageTracker : Inventory
{
	int currentHealth;

	/*
	 * Create & set up Tracker for the specified actor. - Xaser
	 *
	 * TODO: remove this function if it turns out it isn't needed. - Xaser
	 */
	static void Create(Actor thing)
	{
		if (thing) 
		{
			thing.GiveInventoryType('DamageTracker');
		}
	}

	/*
	 * Initialize the tracker just before its first tic.
	 */
	override void PostBeginPlay()
	{
		// Don't spawn a tracker if the tracked thing is gone or already dead.
		// This stops numbers from spawning for PE-spawned Lost Souls that die
		// instantly due to being in a wall. Was amusing, but unintentional. :P - Xaser
		if (!self.owner || self.owner.health < 1) 
		{
			self.Destroy();
			return;
		}

		if (self && self.owner) self.currentHealth = self.owner.health;

		Super.PostBeginPlay();
	}
	

	/*
	 * Track damage and spawn stuff while the actor is alive.
	 */
	override void Tick()
	{
		if (self.owner) 
		{
			if (dvds_dmgindicator && self.owner.health != self.currentHealth) 
			{
				self.SpawnNumbers();
				self.currentHealth = self.owner.health;
			}
		} 
		else 
		{
			// clean up after oneself just in case an actor gets
			// Thing_Remove'd or similar.
			self.Destroy();
		}
		Super.Tick();
	}
	

	/*
	 * Upon owner death, spawn the last round of numbers. This is necessary to
	 * cover the case where an actor is removed immediately upon death. 
	 */
	override void OwnerDied()
	{
		self.SpawnNumbers();
		self.owner.RemoveInventory(self);
	}
	

	/*
	 * Do the actual number spawn. There's a bit of calculation and checking
	 * that's common to all Tracker spawns, so it's done here for convenience.
	 */
	int pow (int x, int n)
	{
		int y = 1;
		while (n-- > 0) y *= x;
		return y;
	}

	int GetDigit(int Num, int Digit) 
	{
		return (Num / pow(10, Digit)) % 10 ;
	}

	void SpawnNumbers()
	{
		double hitres1scale = 0.6667;
		double hitres2scale = 0.50;
		double hitres3scale = 0.3334;
		double hitweak1scale = 1.08334;
		double hitweak2scale = 1.28646625;
		double hitweak3scale = 1.4895925;
		
		if (dvds_dmgindicator && self.owner && self.owner.DamageTypeReceived != 'Massacre')
		{
			if (dvds_dmgindicator & 1) { } 
			else
			{
				AetheriusMonsterZSC type;
				if (type = AetheriusMonsterZSC(self.owner)) return;
			}
			if (dvds_dmgindicator & 2) { } 
			else
			{
				AetheriusPlayerPawn type2;
				if (type2 = AetheriusPlayerPawn(self.owner)) return;
			}
			if (dvds_dmgindicator & 4) { } 
			else
			{
				ExplosiveBarrel type3;
				if (type3 = ExplosiveBarrel(self.owner)) return;

				Pod type4;
				if (type4 = Pod(self.owner)) return;

				ExplosiveBarrel2 type5;
				if (type5 = ExplosiveBarrel2(self.owner)) return;
			}

			int OnCeiling = self.owner.CountInv("OnCeiling");
			double targetX = frandom((self.owner.radius/2),-(self.owner.radius/2));
			double targetY = frandom((self.owner.radius/2),-(self.owner.radius/2));
			double targetHeight = self.owner.height - frandom(-4.0,4.0);
			if (OnCeiling) targetHeight *= -2;
			Vector3 position = self.owner.pos + (targetX, targetY, targetHeight);
			int totalDamage = self.currentHealth - self.owner.health;
			double xvel, yvel, zvel;
			double veltest;
			int Digit1;
			int Digit2;
			int Digit3;
			int Digit4;
			int Digit5;
			int Digit6;
			int Digit7;
			
			int PlayerCrit = 0;
			if (self.owner.CountInv("TookCriticalHit") > 0) 
			{ 
				self.owner.A_TakeInventory("TookCriticalHit",0x7FFFFFFF); 
				PlayerCrit = 1; 
			}
			int HitWeakness = 0;
			if (self.owner.CountInv("TookWeaknessHit") > 0) 
			{ 
				HitWeakness = self.owner.CountInv("TookWeaknessHit"); 
				self.owner.A_TakeInventory("TookWeaknessHit",0x7FFFFFFF); 
			}
			int HitResistance = 0;
			if (self.owner.CountInv("TookResistanceHit") > 0) 
			{ 
				HitResistance = self.owner.CountInv("TookResistanceHit"); 
				self.owner.A_TakeInventory("TookResistanceHit",0x7FFFFFFF); 
			}

			if (totalDamage != 0) 
			{
				int DmgIndDisplayValue = totalDamage;

				int DmgIndDisplayType = 0; // 0 = Damage, 1 = Healing.
				If (DmgIndDisplayValue < 0)
				{
					DmgIndDisplayValue *= -1;
					DmgIndDisplayType = 1;
				}
				
				if (DmgIndDisplayValue > 9999999) DmgIndDisplayValue = 9999999;
				
				If (DmgIndDisplayValue > 0)
				{
					Digit1 = GetDigit(DmgIndDisplayValue, 0);
					Digit2 = GetDigit(DmgIndDisplayValue, 1);
					Digit3 = GetDigit(DmgIndDisplayValue, 2);
					Digit4 = GetDigit(DmgIndDisplayValue, 3);
					Digit5 = GetDigit(DmgIndDisplayValue, 4);
					Digit6 = GetDigit(DmgIndDisplayValue, 5);
					Digit7 = GetDigit(DmgIndDisplayValue, 6);
					
					targetX = frandom((self.owner.radius/2),-(self.owner.radius/2));
					targetY = frandom((self.owner.radius/2),-(self.owner.radius/2));
					targetHeight = self.owner.height - frandom(-4.0,4.0);
					position = self.owner.pos + (targetX, targetY, targetHeight);
					//Console.Printf("%d%d%d%d%d%d%d", Digit7, Digit6, Digit5, Digit4, Digit3, Digit2, Digit1);
				}
				
				int NumberID = Random(7000, 8000);
				int NumberID2 = NumberID + 1;
				
				string DigitSpawn = "";
				if (DmgIndDisplayType == 1) // Healing
				{
					if (DmgIndDisplayValue >= 0) DigitSpawn = "HealBurst1";
					if (DmgIndDisplayValue >= 10) DigitSpawn = "HealBurst2";
					if (DmgIndDisplayValue >= 100) DigitSpawn = "HealBurst3";
					if (DmgIndDisplayValue >= 1000) DigitSpawn = "HealBurst4";
					if (DmgIndDisplayValue >= 10000) DigitSpawn = "HealBurst5";
					if (DmgIndDisplayValue >= 100000) DigitSpawn = "HealBurst6";
					if (DmgIndDisplayValue >= 1000000) DigitSpawn = "HealBurst7";
				}
				else // Damage
				{
					if (PlayerCrit > 0)
					{
						if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurstCritical1";
						if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurstCritical2";
						if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurstCritical3";
						if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurstCritical4";
						if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurstCritical5";
						if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurstCritical6";
						if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurstCritical7";
					}
					else
					{
						if (HitWeakness > 0)
						{
							if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurstWeak1";
							if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurstWeak2";
							if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurstWeak3";
							if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurstWeak4";
							if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurstWeak5";
							if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurstWeak6";
							if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurstWeak7";
						}
						else
						{
							if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurst1";
							if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurst2";
							if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurst3";
							if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurst4";
							if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurst5";
							if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurst6";
							if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurst7";
						}
					}
				}

				veltest = dvds_dmgind_burstvelsxy;
				xvel = frandom(-veltest,veltest); 
				yvel = frandom(-veltest,veltest); 
				veltest = dvds_dmgind_burstvelszbase;
				zvel = frandom((veltest/2),veltest); // Healing cannot be critical'd
				if (OnCeiling) { xvel *= -1.0; yvel *= -1.0; zvel *= -2.0; }
				if (PlayerCrit > 0 && DmgIndDisplayType == 0)
				{
					owner.A_StartSound("player/criticalhit", 256, CHANF_DEFAULT, 1.0, ATTN_NONE, 1.0);
					if (DmgIndDisplayType != 1) 
					{ 
						xvel *= 0.5; yvel *= 0.5; 
						if (!OnCeiling) zvel *= -1.0; else zvel *= 2.0;
					}
				}
				if (HitWeakness > 0)
				{
					if (DmgIndDisplayType != 1) { xvel *= 0.75; yvel *= 0.75; zvel *= 0.75; }
				}
				if (random(1,4) == 1) xvel *= frandompick(0.5,2.0);
				if (random(1,4) == 1) yvel *= frandompick(0.5,2.0);
				if (random(1,4) == 1) zvel *= frandompick(0.5,2.0);
				vector3 nvel = (xvel, yvel, zvel);

				let damindspawn = Spawn(DigitSpawn, position, ALLOW_REPLACE);
				if (damindspawn)
				{
					damindspawn.vel = nvel;
					damindspawn.ChangeTID(NumberID);
					damindspawn.angle = 0;
					if (!PlayerCrit && HitWeakness > 0)
					{
						damindspawn.stamina = 2;
						if (HitWeakness == 1)
						{
							damindspawn.scale.x *= hitweak1scale;
							damindspawn.scale.y *= hitweak1scale;
						}
						if (HitWeakness == 2)
						{
							damindspawn.scale.x *= hitweak2scale;
							damindspawn.scale.y *= hitweak2scale;
						}
						if (HitWeakness == 3)
						{
							damindspawn.scale.x *= hitweak3scale;
							damindspawn.scale.y *= hitweak3scale;
						}
					}
					if (!PlayerCrit && HitResistance > 0)
					{
						damindspawn.gravity = 0.334;
						damindspawn.stamina = 1;
						if (HitResistance == 1)
						{
							damindspawn.scale.x *= hitres1scale;
							damindspawn.scale.y *= hitres1scale;
						}
						if (HitResistance == 2)
						{
							damindspawn.scale.x *= hitres2scale;
							damindspawn.scale.y *= hitres2scale;
						}
						if (HitResistance == 3)
						{
							damindspawn.scale.x *= hitres3scale;
							damindspawn.scale.y *= hitres3scale;
						}
					}
					//Console.Printf("ScaleX: %.8f, Scaley: %.8f", damindspawn.scale.x, damindspawn.scale.y);
				}
				
				// Digit ######1
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit1Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0) DigitSpawn = "DigitCritical1Num"; 
					else DigitSpawn = "DmgDigit1Num"; 
				}
				if (DmgIndDisplayValue >= 0) 
				{
					DigitSpawn = (DigitSpawn..""..Digit1);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn1 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn1)
					{
						damindspawn1.vel = nvel;
						damindspawn1.ChangeTID(NumberID2);
						damindspawn1.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn1.gravity = 0.625;
							damindspawn1.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn1.scale.x *= hitweak1scale;
								damindspawn1.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn1.scale.x *= hitweak2scale;
								damindspawn1.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn1.scale.x *= hitweak3scale;
								damindspawn1.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn1.gravity = 0.334;
							damindspawn1.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn1.scale.x *= hitres1scale;
								damindspawn1.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn1.scale.x *= hitres2scale;
								damindspawn1.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn1.scale.x *= hitres3scale;
								damindspawn1.scale.y *= hitres3scale;
							}
						}
						//Console.Printf("ScaleX: %.8f, Scaley: %.8f", damindspawn1.scale.x, damindspawn1.scale.y);
					}
				}
				
				// Digit #####2#
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit2Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical2Num"; 
					else DigitSpawn = "DmgDigit2Num"; 
				}
				if (DmgIndDisplayValue >= 10) 
				{
					DigitSpawn = (DigitSpawn..""..Digit2);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn2 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn2)
					{
						damindspawn2.vel = nvel;
						damindspawn2.ChangeTID(NumberID2);
						damindspawn2.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn2.gravity = 0.625;
							damindspawn2.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn2.scale.x *= hitweak1scale;
								damindspawn2.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn2.scale.x *= hitweak2scale;
								damindspawn2.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn2.scale.x *= hitweak3scale;
								damindspawn2.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn2.gravity = 0.334;
							damindspawn2.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn2.scale.x *= hitres1scale;
								damindspawn2.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn2.scale.x *= hitres2scale;
								damindspawn2.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn2.scale.x *= hitres3scale;
								damindspawn2.scale.y *= hitres3scale;
							}
						}
					}
				}
				
				// Digit ####3##
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit3Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical3Num"; 
					else DigitSpawn = "DmgDigit3Num"; 
				}
				if (DmgIndDisplayValue >= 100) 
				{
					DigitSpawn = (DigitSpawn..""..Digit3);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn3 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn3)
					{
						damindspawn3.vel = nvel;
						damindspawn3.ChangeTID(NumberID2);
						damindspawn3.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn3.gravity = 0.625;
							damindspawn3.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn3.scale.x *= hitweak1scale;
								damindspawn3.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn3.scale.x *= hitweak2scale;
								damindspawn3.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn3.scale.x *= hitweak3scale;
								damindspawn3.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn3.gravity = 0.334;
							damindspawn3.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn3.scale.x *= hitres1scale;
								damindspawn3.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn3.scale.x *= hitres2scale;
								damindspawn3.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn3.scale.x *= hitres3scale;
								damindspawn3.scale.y *= hitres3scale;
							}
						}
					}
				}
				
				// Digit ###4###
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit4Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical4Num"; 
					else DigitSpawn = "DmgDigit4Num"; 
				}
				if (DmgIndDisplayValue >= 1000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit4);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn4 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn4)
					{
						damindspawn4.vel = nvel;
						damindspawn4.ChangeTID(NumberID2);
						damindspawn4.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn4.gravity = 0.625;
							damindspawn4.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn4.scale.x *= hitweak1scale;
								damindspawn4.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn4.scale.x *= hitweak2scale;
								damindspawn4.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn4.scale.x *= hitweak3scale;
								damindspawn4.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn4.gravity = 0.334;
							damindspawn4.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn4.scale.x *= hitres1scale;
								damindspawn4.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn4.scale.x *= hitres2scale;
								damindspawn4.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn4.scale.x *= hitres3scale;
								damindspawn4.scale.y *= hitres3scale;
							}
						}
					}
				}
				
				// Digit ##5####
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit5Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical5Num"; 
					else DigitSpawn = "DmgDigit5Num"; 
				}
				if (DmgIndDisplayValue >= 10000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit5);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn5 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn5)
					{
						damindspawn5.vel = nvel;
						damindspawn5.ChangeTID(NumberID2);
						damindspawn5.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn5.gravity = 0.625;
							damindspawn5.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn5.scale.x *= hitweak1scale;
								damindspawn5.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn5.scale.x *= hitweak2scale;
								damindspawn5.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn5.scale.x *= hitweak3scale;
								damindspawn5.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn5.gravity = 0.334;
							damindspawn5.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn5.scale.x *= hitres1scale;
								damindspawn5.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn5.scale.x *= hitres2scale;
								damindspawn5.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn5.scale.x *= hitres3scale;
								damindspawn5.scale.y *= hitres3scale;
							}
						}
					}
				}
				
				// Digit #6#####
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit6Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical6Num"; 
					else DigitSpawn = "DmgDigit6Num"; 
				}
				if (DmgIndDisplayValue >= 100000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit6);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn6 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn6)
					{
						damindspawn6.vel = nvel;
						damindspawn6.ChangeTID(NumberID2);
						damindspawn6.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn6.gravity = 0.625;
							damindspawn6.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn6.scale.x *= hitweak1scale;
								damindspawn6.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn6.scale.x *= hitweak2scale;
								damindspawn6.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn6.scale.x *= hitweak3scale;
								damindspawn6.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn6.gravity = 0.334;
							damindspawn6.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn6.scale.x *= hitres1scale;
								damindspawn6.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn6.scale.x *= hitres2scale;
								damindspawn6.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn6.scale.x *= hitres3scale;
								damindspawn6.scale.y *= hitres3scale;
							}
						}
					}
				}
				
				// Digit 7######
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit7Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit > 0)  DigitSpawn = "DigitCritical7Num"; 
					else DigitSpawn = "DmgDigit7Num"; 
				}
				if (DmgIndDisplayValue >= 1000000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit7);
					//Console.Printf("%s", DigitSpawn);
					let damindspawn7 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn7)
					{
						damindspawn7.vel = nvel;
						damindspawn7.ChangeTID(NumberID2);
						damindspawn7.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn7.gravity = 0.625;
							damindspawn7.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn7.scale.x *= hitweak1scale;
								damindspawn7.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn7.scale.x *= hitweak2scale;
								damindspawn7.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn7.scale.x *= hitweak3scale;
								damindspawn7.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance > 0)
						{
							damindspawn7.gravity = 0.334;
							damindspawn7.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn7.scale.x *= hitres1scale;
								damindspawn7.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn7.scale.x *= hitres2scale;
								damindspawn7.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn7.scale.x *= hitres3scale;
								damindspawn7.scale.y *= hitres3scale;
							}
						}
					}
				}

			}
			else
			{
				if (self.owner.CountInv("TookCriticalHit")) { self.owner.A_SetInventory("TookCriticalHit",0); PlayerCrit = 0; }
				if (self.owner.CountInv("TookWeaknessHit")) { self.owner.A_SetInventory("TookWeaknessHit",0); HitWeakness = 0; }
				if (self.owner.CountInv("TookResistanceHit")) { self.owner.A_SetInventory("TookWeaknessHit",0); HitResistance = 0; }
			}
		}
	}
}
