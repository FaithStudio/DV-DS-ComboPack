// Base class [for later use]
class AetheriusBaseZSC : Actor
{
	float user_tempvar1, user_tempvar2, user_tempvar3, user_tempvar4, user_tempvar5;
	int user_hyperlvl1, user_hyperlvl2;
	int user_theta, user_dormant, user_isstealth, user_basespeed, user_baseattack, user_basedefense, user_basemass, user_monsterlevel, user_extraevolvechance, user_extrastealthchance;
	int user_willbecomelegendary, user_legendaryevolved;
	int user_MaxHP, user_HPCritRange, user_HPBuffRange, user_HPXDeathRange, user_HPXDeathRange2, user_HPLowRange;
	int user_checkmapskill, user_ressurrectstr, user_resurrectedtimes, user_canusecrisisatk;
	int user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2;
	int user_barragecounter, user_shotsfired, user_shotsfiredmax;
	float user_shotaccuracy, user_shotaccuracy1, user_shotaccuracy2; 
	float user_shotzaccuracy, user_shotzaccuracy1, user_shotzaccuracy2; 
	float user_randominaccuracy, user_randominaccuracy2;
	int user_pelletsfired, user_currenttracer, user_aimangleorigin; 
	int user_ammotype, user_gravitytype, user_shotangle, user_chargeinterval, user_pulseinterval;
	int user_spread, user_spread1, user_spread2;
	int user_attacktype, user_attacks, user_attackmax, user_fastchasechance, user_fastchaseextra, user_painfastchase;
	int user_paintomissile;
	int user_painreacttimer;
	int user_fastchasetimer, user_fastchasetimermax;
	int user_walksound;

	int user_nolegendarytrans;
	int user_golddrop;
	int user_crisisprojectile;
	int user_defendtimer, user_defendtimermax, user_defendcycles;
	int user_autorestimer;
	int user_firevolleys, user_firevolleymax;
	int user_random, user_random1, user_ailment1, user_ailmentmaxchance, user_attackpoint;
	int user_chargechance; 
	int user_charmchance, user_charmed;
	int user_regencycles, user_regencyclemax;
}

class AetheriusCustomInventory : CustomInventory
{
	int allowexperiessence, gfxeffectlevel;
	int animationtimer, heartbeattimer;
}

class AetheriusPlayerPawn : PlayerPawn
{
	int actortimer;
	int pbuddha1, pbuddha2, pgod1, pgod2, pnoclip1, pnoclip2;
	int breathdirection; // 0 = down [size decreases], 1 = up [size increases]

	double basexscale, baseyscale;
	double scalexmulti, scaleymulti;
	int breathframe;
	
	double neverbleeds;

	private class<Inventory> APPackToken, APPackCheck;

	double TotalAirControl;
	override void MovePlayer()
	{
		String nm;
		int CharacterClass = CallACS("CheckCharacterClass");
		//double LevelAirControl = level.aircontrol; // Saves a value
		int PlayerLevel = CallACS("StatCheck",0);
		int PlayerAGL = CallACS("StatCheck",3);

		double AirControlBase = 0.2375;
		if (CharacterClass == 0) AirControlBase = 0.2375;
		if (CharacterClass == 1) AirControlBase = 0.2500;
		if (CharacterClass == 2) AirControlBase = 0.2625;
		if (CharacterClass == 8) AirControlBase = 0.2375;
		if (CharacterClass == 9) AirControlBase = 0.275;
		
		// Level Based AirControl
		double LVLAirControl = 1.00 + (PlayerLevel * 0.00123);
		if (CharacterClass == 0) LVLAirControl = 1.00 + (PlayerLevel * 0.00113);
		if (CharacterClass == 1) LVLAirControl = 1.00 + (PlayerLevel * 0.00128);
		if (CharacterClass == 2) LVLAirControl = 1.00 + (PlayerLevel * 0.00138);
		if (CharacterClass == 8) LVLAirControl = 1.00 + (PlayerLevel * 0.00108);
		if (CharacterClass == 9) LVLAirControl = 1.00 + (PlayerLevel * 0.00148);

		// AGLSeed-based multiplier
		double AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
		if (CharacterClass == 0) AGLAirControl = 1.00 + (PlayerAGL * 0.000380);
		if (CharacterClass == 1) AGLAirControl = 1.00 + (PlayerAGL * 0.000430);
		if (CharacterClass == 2) AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
		if (CharacterClass == 8) AGLAirControl = 1.00 + (PlayerAGL * 0.000375);
		if (CharacterClass == 9) AGLAirControl = 1.00 + (PlayerAGL * 0.000400);

		// Armor items
		double ArmorAirControl = 1.00;
		if (CharacterClass == 2)
		{
			if (CountInv("SafeTeaShoes") > 0) 				ArmorAirControl += 0.20;
			if (CountInv("PearlyCorset") > 0) 				ArmorAirControl += 0.0125;
			if (CountInv("WaterFlyingDress") > 0)			ArmorAirControl += 0.0125;
			if (CountInv("EvenstarNecklace") > 0)			ArmorAirControl += 0.0375;
			if (CountInv("CloakofEvasion") > 0)				ArmorAirControl += 0.20;
			if (CountInv("AnubisCufflinks") > 0)			ArmorAirControl += 0.025;
			if (CountInv("KissaBra") > 0)							ArmorAirControl += 0.0375;
			if (CountInv("DivineShield") > 0)					ArmorAirControl += 0.05;
			if (CountInv("BalrogRing") > 0)						ArmorAirControl += 0.0125;
			if (CountInv("DoveRibbon") > 0)						ArmorAirControl += 0.0375;
			if (CountInv("FalconKnifeEarrings") > 0)	ArmorAirControl += 0.05;
		}
		else
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			if (CountInv("DSGreenArmorClass") > 0)		ArmorAirControl += 0.0667;
			if (CountInv("DSBlueArmorClass") > 0)			ArmorAirControl += 0.10;
			if (CountInv("DSStoneArmorClass1") > 0)		ArmorAirControl += 0.1334;
			if (CountInv("DSDiamondArmorClass1") > 0)	ArmorAirControl += 0.18;
			if (CountInv("DSStoneArmorClass2") > 0)		ArmorAirControl += 0.1667;
			if (CountInv("DSDiamondArmorClass2") > 0)	ArmorAirControl += 0.19;
		}
	
		// Sauron Armor items
		double SauronArmorAirControl = 1.00;
		if (CountInv("SauronHelmet") > 0)						SauronArmorAirControl -= 0.10;
		if (CountInv("SauronGauntlets") > 0)				SauronArmorAirControl -= 0.05;
		if (CountInv("SauronGauntletsIllucia") > 0)	SauronArmorAirControl -= 0.05;
		if (CountInv("SauronGauntletsFlora") > 0)		SauronArmorAirControl -= 0.05;
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		if (CountInv(APPackCheck) > 0)							SauronArmorAirControl -= 0.05;
		nm = "SauronGauntletsPetra"; APPackCheck = nm;
		if (CountInv(APPackCheck) > 0)							SauronArmorAirControl -= 0.05;
		if (CountInv("TheOneRing") > 0)							SauronArmorAirControl += 0.25;

		// Buffs
		double BuffAirControl = 1.00;
		if (CallACS("GetBuffTimer",12) > 0) BuffAirControl += 0.25;
		if (CallACS("GetBuffTimer",15) > 0) BuffAirControl -= 0.25;

		// Sceptre for AirControl.
		double SceptreAirControl = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreAirControl -= 0.20;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreAirControl -= 0.10;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreAirControl -= 0.05;

		double PerkFactorAirControl = 1.0;
		PerkFactorAirControl += ((CallACS("MiscVarCheckDECORATE",10009) * 0.05) + (CallACS("MiscVarCheckDECORATE",10010) * 0.125));

		double DashingAirControl = 1.0;
		if (CallACS("MiscVarCheckDECORATE",166) > 0) DashingAirControl = 0.015625;

		double DivineAvatarAirControl = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarAirControl *= 2.00;

		level.aircontrol = AirControlBase
										 * LVLAirControl
										 * AGLAirControl
										 * ArmorAirControl
										 * SauronArmorAirControl
										 * BuffAirControl
										 * SceptreAirControl
										 * PerkFactorAirControl
										 * DashingAirControl
										 * DivineAvatarAirControl;
		if (GetCVar("dvdsdebug_showmoveinformation") > 0)
		{
			Console.Printf("    \cwTotalAirControl:\c- \cw%8f\c-, \cyAirControlBase:\c- \cy%8f\c-, LVLAirControl: %8f, AGLAirControl: %8f, ArmorAirControl: %8f, SauronArmorAirControl: %8f, BuffAirControl: %8f, SceptreAirControl: %8f, PerkFactorAirControl: %8f, DashingAirControl: %8f, DivineAvatarAirControl: %8f", 
													level.aircontrol, AirControlBase,
													LVLAirControl, AGLAirControl,
													ArmorAirControl, SauronArmorAirControl,
													BuffAirControl, SceptreAirControl,
													PerkFactorAirControl, DashingAirControl,
													DivineAvatarAirControl);
		}

		super.MovePlayer();
	}

	override void PostBeginPlay()
	{
		basexscale = scale.x;
		baseyscale = scale.y;
		scalexmulti = 1.00;
		scaleymulti = 1.00;

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) { return Super.PostBeginPlay(); }

		if (bNOBLOOD == 1) 
		{
			if (bNOBLOODDECALS == 0) bNOBLOODDECALS == 1;
			neverbleeds = 1;
		}
		if (bNOBLOODDECALS == 1) 
		{
			if (bNOBLOOD == 0) bNOBLOOD == 1;
			neverbleeds = 1;
		}
		
		Super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO PostBeginPlay() BREAK :V
	}
	override void Tick()
	{
		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) { return Super.Tick(); }

		if (player.cheats & CF_BUDDHA) pbuddha1 = 1; else pbuddha1 = 0;
		if (player.cheats & CF_BUDDHA2) pbuddha2 = 1; else pbuddha2 = 0;
		if (player.cheats & CF_GODMODE) pgod1 = 1; else pgod1 = 0;
		if (player.cheats & CF_GODMODE2) pgod2 = 1; else pgod2 = 0;
		if (player.cheats & CF_NOCLIP) pnoclip1 = 1; else pnoclip1 = 0;
		if (player.cheats & CF_NOCLIP2) pnoclip2 = 1; else pnoclip2 = 0;

		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// Pass through different species of select types.
			if (other.bFRIENDLY == 1)
				return false;
		}
		// We don't really care about others making the check.
		return true;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (neverbleeds == 0)
		{
			bNOBLOOD = 0;
			bNOBLOODDECALS = 0;
		}
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor == null) infl = "NONE";
											else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE";
										else sour = source.GetClassName();

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) { return super.DamageMobj(inflictor, source, damage, mod, flags, angle); }

		// Makes the HUD show "Missed!" and play a sound if you evade an attack. V:
		if (self.health <= 0 || !bSHOOTABLE || bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("InvulnerabilitySpell",AAPTR_PLAYER1) > 0 || CountInv("IsInvulnerable",AAPTR_PLAYER1) > 0 || CountInv("MenuInvulnerability",AAPTR_PLAYER1) > 0 || (CountInv("IronFeetNoPoison",AAPTR_PLAYER1) > 0 && (mod == "PoisonElemental" || mod == "Poison")) )
		{
			damage = 0;
		}
		else
		{
			if (mod != "Falling" && (CountInv("EvadeAnAttack",AAPTR_DEFAULT) > 0 || CountInv("PlayerDashing",AAPTR_DEFAULT) > 0))
			{
				A_Playsound("DraQue/miss");
				A_Playsound("DraQue/miss");
				A_GiveInventory("Missed",1);
				damage = 0;
			}
		}

		int defense;
		// Defense Calculation
		if (damage > 0)
		{
			int olddmg = damage;
			int basedef = CallACS("StatCheck",4);
			defense = basedef * (5 + (CallACS("MiscVarCheckDECORATE",10001) * 1 / 2) + ((CallACS("MiscVarCheckDECORATE",10002) * 5 / 4))) / 50;

			int armordef = 0;
			if (CountInv("DSGreenArmorClass",AAPTR_DEFAULT) > 0) armordef = 1;
			if (CountInv("DSBlueArmorClass",AAPTR_DEFAULT) > 0) armordef = 2;
			if (CountInv("DSStoneArmorClass1",AAPTR_DEFAULT) > 0) armordef = 2;
			if (CountInv("DSDiamondArmorClass1",AAPTR_DEFAULT) > 0) armordef = 3;
			if (CountInv("DSStoneArmorClass2",AAPTR_DEFAULT) > 0) armordef = 3;
			if (CountInv("DSDiamondArmorClass2",AAPTR_DEFAULT) > 0) armordef = 4;
			if (armordef > 0)
			{
				armordef = armordef * (25 + CallACS("MiscVarCheckDECORATE",10001) + (CallACS("MiscVarCheckDECORATE",10002) * 5 / 4)) / 25;
				defense += ((armordef * 5) / 4);
			}

			if (inflictor == null && source == null && (mod == 'Slime' || mod == 'Crush' || mod == 'Fire' || mod == 'Magma')) defense /= 25; // Total Defense is only 4% as effective for damagefloors/slime sectors.
			if (gameinfo.gametype & GAME_Raven && inflictor == null && source == null && (mod == 'Fire' || mod == 'Magma')) damage = damage * frandom(1.5,2.5);

			damage -= defense;
			if (damage < 1)
			{
				if (random(1,256) < (248 - ((CallACS("MiscVarCheckDECORATE",10001) * 2) + (CallACS("MiscVarCheckDECORATE",10002) * 5))) ) damage = 1; else damage = 0;
			}

			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) Console.Printf("    (\czplayer-damagemobj input\c-:  \cyolddmg\c- = \cy%d\c-, basedef = %d, armdef = %d, def = %d, \cynewdmg = \cy%d\c-, \cwdmgtype\c- = \cw%s\c-, \cdinflictor\c- = \cd%s\c-, \cnsource\c- = \cn%s\c-)", olddmg, basedef, armordef, defense, damage, mod, infl, sour);
		}

		// Space for rent :V	
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\czplayer-damagemobj output\c-: \cydmg = \cy%d\c-, \cwdmgtype\c- = \cw%s\c-, \cdinflictor\c- = \cd%s\c-, \cnsource\c- = \cn%s\c-)", ret, mod, infl, sour);

		if (ret > 0) 
		{
			int hpratio = ret * 100 / CallACS("StatCheck",1);
			int cursemulti = 1;
			if (hpratio >= 101) cursemulti = 4;
			if (hpratio >= 51 && hpratio <= 100) cursemulti = 3;
			if (hpratio >= 26 && hpratio <= 50) cursemulti = 2;
			if (hpratio <= 25) cursemulti = 1;
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\czuncurse\c-: \cydmg = \cy%d\c-, \cwcursemulti\c- = \cw%d\c-, \cdhpratio\c- = \cd%d\c-)", ret, cursemulti, hpratio);
			ACS_NamedExecuteAlways("CursedShieldPain",0,1,cursemulti);
		}
		else
		{
			if (neverbleeds == 0)
			{
				bNOBLOOD = 1;
				bNOBLOODDECALS = 1;
			}
		}

		return ret;
	}
	
	// Reset Breathing Scale
	void A_APPBreatheReset()
	{
		scaleymulti = 1.00;
		breathdirection = 0;
		breathframe = 0;
		A_SetScale(basexscale,baseyscale*scaleymulti);
	}

	// Breathing Function
	void A_APPBreathe(double startpoint = 1.00, double endpoint = 0.976, double breathincrementbase = 0.002, double basetics = 4)
	{
		double StaminaBreathSpeed = 1.0;
		int StaminaLevel;
		int StaminaMax = 10000;
		if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
		StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;

		if (StaminaLevel < 157) StaminaBreathSpeed = 1.99;
		if (StaminaLevel > 156 && StaminaLevel < 626) StaminaBreathSpeed = 1.825;
		if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaBreathSpeed = 1.66;
		if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaBreathSpeed = 1.495;
		if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaBreathSpeed = 1.33;
		if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaBreathSpeed = 1.165;
		if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaBreathSpeed = 1.00;
		if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaBreathSpeed = 0.835;
		if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaBreathSpeed = 0.67;
		if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaBreathSpeed = 0.505;
		if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaBreathSpeed = 0.34;
		if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaBreathSpeed = 0.175;
		if (StaminaLevel > 48750) StaminaBreathSpeed = 0.01;
		breathincrementbase *= StaminaBreathSpeed;
		
		double ticmulti = 1.00 * (tics / basetics);
		breathincrementbase *= ticmulti;

		if (breathdirection == 0)
		{
			breathframe++;
			scaleymulti -= breathincrementbase;
			if (scaleymulti <= endpoint) { scaleymulti = endpoint; breathdirection = 1; breathframe = 0; }
		}
		else
		{
			breathframe++;
			scaleymulti += breathincrementbase;
			if (scaleymulti >= startpoint) { scaleymulti = startpoint; breathdirection = 0; breathframe = 0; }
		}
		if (GetCVar("dvdsdebug_showstaminaregenstuff") > 0) Console.Printf("scaleymulti = %8f, breathincrementbase = %8f, breathdirection = %d, breathframe = %d, StaminaBreathSpeed = %8f, ticmulti = %8f, actualtics = %d, basetics = %d", 
																																			scaleymulti, 
																																			breathincrementbase, 
																																			breathdirection, 
																																			breathframe, 
																																			StaminaBreathSpeed, 
																																			ticmulti, 
																																			tics, 
																																			basetics);
		A_SetScale(basexscale,baseyscale*scaleymulti);
	}
}

// Keeps Sounds/Music active during time Freeze powerups
class AetheriusTimeFreezer : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
	}
}

