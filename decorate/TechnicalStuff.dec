// Used for a base item for all the items that don't do anything themselves but are used for/as detecting flags.
actor PlaceholderItem : CustomInventory
{
 inventory.icon "NULLA0"
 States
 {
  Use:
   TNT1 A 0
   Stop
 }
}

actor FloraInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
actor IlluciaInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
actor DeggarisInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use

actor Dedz : PlaceholderItem { } // 

actor FloraUsingHellcoreWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
actor FloraHellcoreNotOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of less than 25%, give this to her inventory [for HUD displays]
actor FloraHellcore25PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 24%, give this to her inventory [for HUD displays]
actor FloraHellcore50PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 49%, give this to her inventory [for HUD displays]
actor FloraHellcore75PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 74%, give this to her inventory [for HUD displays]
actor FloraHellcore100PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 99%, give this to her inventory [for HUD displays]
actor FloraHellcore250PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 249%, give this to her inventory [for HUD displays]
actor FloraLearnedPistols : PlaceholderItem { } // If Flora has learned pistol usage, give this inventory item to the player
actor FloraDoomspellBonus : PowerDamage { DamageFactor "Doomspell", 1.5 inventory.icon "NULLA0" Powerup.Duration -1048576 } // Boosts "Doomspell" damage by 50%

actor UsingMeleeWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Melee Class" [for HUD displays]

Actor CurrentMaxHealth : Inventory { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 2147483647 }

actor MonsterHasBuffs : PlaceholderItem { } // This works as an inventory flag to indicate a monster has gotten their proper level-based buffs
actor PlayingDeusVultI : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingDeusVultII : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor DealCriticalHit : PowerDamage { damagefactor "normal", 3 inventory.icon "NULLA0" Powerup.Duration -1048576 } // Deal Critical Hit Item

actor SauronGauntletsItem : PlaceholderItem { } // For SBARINFO so the HUD shows the extra icon for having the Gauntlets regardless of which type/character.

actor IsHaSatanNow : PlaceholderItem { } // This works as an inventory flag to indicate the character is currently the 'HaSatan' of Hell [greatly reduces Hellcore Consumption]

// IMPORTANT: This actor is required to run player and status timer check and there must be one [and ONLY one] of these on each map intended to be used in your mod. It does not matter where it is placed, although a small single sector room near the start won't hurt either. :P
// IMPORTANT: If you make specialized scripts that are supposed to run once per tic, use this actor and add something for it.
actor DoomSpellACS : CustomInventory 191
{
 +NOTIMEFREEZE // Prevents time freezing abilities from stopping it's execution
 SpawnID 191
 States
 {
  Spawn:
    PLAY A 0
//    PLAY A 0 ACS_Execute(833,0,0,0,0) // Various Player Stuff
//    PLAY A 0 ACS_Execute(855,0,0,0,0) // Status Timers [Light, Invuln, Godly Avatar, etc]
    PLAY A 1
    Stop
 }
}

/*
// Damage Indicator/Lifebar Start
Actor ActorHasDMGIndTicked : Inventory
{
  +INVENTORY.UNDROPPABLE
  Inventory.MaxAmount 1
}
*/

Actor DSNoArmorClass : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSGreenArmorClass : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSBlueArmorClass : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSStoneArmorClass1 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSDiamondArmorClass1 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSStoneArmorClass2 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSDiamondArmorClass2 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSSpiritualExoskin1 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSSpiritualExoskin2 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

Actor DSSpiritualExoskin3 : CustomInventory
{
 Inventory.Amount 1
 Inventory.MaxAmount 1

 states
 {
  Use:
   TNT1 A 0
   Stop
 }
}

actor SceptreTwirlTimer : CustomInventory
{
 inventory.icon "NULLA0"
 States
 {
  Use:
   TNT1 A 0
   Stop
 }
}

actor SceptreTwirlTimer1 : SceptreTwirlTimer { }
actor SceptreTwirlTimer2 : SceptreTwirlTimer { }
actor SceptreTwirlTimer3 : SceptreTwirlTimer { }
actor SceptreTwirlTimer4 : SceptreTwirlTimer { }
actor SceptreTwirlTimer5 : SceptreTwirlTimer { }
actor SceptreTwirlTimer6 : SceptreTwirlTimer { }
actor SceptreTwirlTimer7 : SceptreTwirlTimer { }
actor SceptreTwirlTimer8 : SceptreTwirlTimer { }
actor SceptreTwirlTimer9 : SceptreTwirlTimer { }
actor SceptreTwirlTimer10 : SceptreTwirlTimer { }
actor SceptreTwirlTimer11 : SceptreTwirlTimer { }
actor SceptreTwirlTimer12 : SceptreTwirlTimer { }
actor SceptreTwirlTimer13 : SceptreTwirlTimer { }
actor SceptreTwirlTimer14 : SceptreTwirlTimer { }
actor SceptreTwirlTimer15 : SceptreTwirlTimer { }
actor SceptreTwirlTimer16 : SceptreTwirlTimer { }
actor SceptreTwirlTimer17 : SceptreTwirlTimer { }
actor SceptreTwirlTimer18 : SceptreTwirlTimer { }
actor SceptreTwirlTimer19 : SceptreTwirlTimer { }
actor SceptreTwirlTimer20 : SceptreTwirlTimer { }
actor SceptreTwirlTimer21 : SceptreTwirlTimer { }
actor SceptreTwirlTimer22 : SceptreTwirlTimer { }
actor SceptreTwirlTimer23 : SceptreTwirlTimer { }
actor SceptreTwirlTimer24 : SceptreTwirlTimer { }
actor SceptreTwirlTimer25 : SceptreTwirlTimer { }
actor SceptreTwirlTimer26 : SceptreTwirlTimer { }
actor SceptreTwirlTimer27 : SceptreTwirlTimer { }
actor SceptreTwirlTimer28 : SceptreTwirlTimer { }
actor SceptreTwirlTimer29 : SceptreTwirlTimer { }
actor SceptreTwirlTimer30 : SceptreTwirlTimer { }
actor SceptreTwirlTimer31 : SceptreTwirlTimer { }
actor SceptreTwirlTimer32 : SceptreTwirlTimer { }

actor SwingTimer : CustomInventory
{
  Inventory.Amount 1
  Inventory.MaxAmount 24
}

// Sceptre Experience Levels
actor SceptreLevelBase : PlaceholderItem { }
// Inventory Items for the Sceptre's Current Level
actor SceptreLevel1 : SceptreLevelBase { }
actor SceptreLevel2 : SceptreLevelBase { }
actor SceptreLevel3 : SceptreLevelBase { }
actor SceptreLevel4 : SceptreLevelBase { }
actor SceptreLevel5 : SceptreLevelBase { }
actor SceptreLevel6 : SceptreLevelBase { }
actor SceptreLevel7 : SceptreLevelBase { }
actor SceptreLevel8 : SceptreLevelBase { }
actor SceptreLevel9 : SceptreLevelBase { }
actor SceptreLevel10 : SceptreLevelBase { }
actor SceptreLevel11 : SceptreLevelBase { }
actor SceptreLevel12 : SceptreLevelBase { }
actor SceptreLevel13 : SceptreLevelBase { }
actor SceptreLevel14 : SceptreLevelBase { }
actor SceptreLevel15 : SceptreLevelBase { }
actor SceptreLevel16 : SceptreLevelBase { }


actor NormalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "normal" health range]
actor LowHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "low" health range]
actor CriticalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "critical" health range]
actor PlayerIsDead : PlaceholderItem { } // For HUD Checks [when player is dead]
actor PlayerDeathFadeOut : PlaceholderItem { } // For Controlling death-fadeout screens

actor TensionAuraBase
{
 +NOTIMEFREEZE
 RenderStyle Add
 Alpha 0.667
 Radius 16
 Height 56
 XScale 1
 YScale 1
 states
 {
  Spawn:
   TSIN A 1
   TSIN B 1
   TSIN C 1
   TSIN D 1
   TSIN E 1
   TSIN F 1
   TSIN G 1
   TSIN H 1
   TSIN I 1
   loop
 }
}

actor TensionAura5 : TensionAuraBase
{
 Alpha 0.111
 Radius 12
 Height 42
 XScale 0.5
 YScale 0.75
}

actor TensionAura20 : TensionAuraBase
{
 Alpha 0.222
 Radius 13
 Height 46
 XScale 0.5555
 YScale 0.8333
}

actor TensionAura50 : TensionAuraBase
{
 Alpha 0.333
 Radius 15
 Height 51
 XScale 0.6111
 YScale 0.9166
}

actor TensionAura100 : TensionAuraBase
{
 Alpha 0.444
 Radius 16
 Height 56
 XScale 0.6666
 YScale 1
}

actor TensionAura250 : TensionAuraBase
{
 Alpha 0.555
 Radius 16
 Height 56
 XScale 0.7222
 YScale 1.0833
}

actor TensionAura500 : TensionAuraBase
{
 Alpha 0.667
 Radius 16
 Height 56
 XScale 0.7777
 YScale 1.1666
}

actor TensionAura1000 : TensionAuraBase
{
 Alpha 0.778
 Radius 16
 Height 56
 XScale 0.8333
 YScale 1.25
}

actor TensionAuraFrameBase
{
 -SOLID
 +NOINTERACTION
 +NOTIMEFREEZE
 RenderStyle Add
 Alpha 0.25
 Radius 4
 Height 4
 XScale 0.667
 YScale 1
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN A 1
   TSIN A 1
   stop
 }
}

actor TensionAuraLooper : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN A 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN B 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN C 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN D 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN E 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN F 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN G 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN H 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   TSIN I 1 A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   loop
 }
}

actor TensionAuraFrameA : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN A 1
   TSIN A 1
   stop
 }
}

actor TensionAuraFrameB : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN B 1 
   TSIN B 1 
   stop
 }
}

actor TensionAuraFrameC : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN C 1 
   TSIN C 1 
   stop
 }
}

actor TensionAuraFrameD : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN D 1 
   TSIN D 1 
   stop
 }
}

actor TensionAuraFrameE : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN E 1 
   TSIN E 1 
   stop
 }
}

actor TensionAuraFrameF : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN F 1 
   TSIN F 1 
   stop
 }
}

actor TensionAuraFrameG : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN G 1 
   TSIN G 1 
   stop
 }
}

actor TensionAuraFrameH : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN H 1
   TSIN H 1
   stop
 }
}

actor TensionAuraFrameI : TensionAuraFrameBase
{
 states
 {
  Spawn:
   TNT1 A 0 NoDelay
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"SetScale5")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"SetScale20")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"SetScale50")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"SetScale100")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"SetScale250")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"SetScale500")
   TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"SetScale1000")
   stop

  SetScale5:
   TNT1 A 0 A_SetScale(0.5,0.75)
   goto Frame
  SetScale20:
   TNT1 A 0 A_SetScale(0.5555,0.8333)
   goto Frame
  SetScale50:
   TNT1 A 0 A_SetScale(0.6111,0.9166)
   goto Frame
  SetScale100:
   TNT1 A 0 A_SetScale(0.6666,1)
   goto Frame
  SetScale250:
   TNT1 A 0 A_SetScale(0.7222,1.0833)
   goto Frame
  SetScale500:
   TNT1 A 0 A_SetScale(0.7777,1.1666)
   goto Frame
  SetScale1000:
   TNT1 A 0 A_SetScale(0.8333,1.25)
   goto Frame

  Frame:
   TSIN I 1
   TSIN I 1
   stop
 }
}

actor TensionAuraLightBase
{
 -SOLID
 +NOINTERACTION
 +NOTIMEFREEZE
 RenderStyle Add
 Alpha 0.0
 Radius 1
 Height 1
 XScale 1
 YScale 1
 states
 {
  Spawn:
   TNT1 A 1 NoDelay A_Warp(AAPTR_PLAYER1,0,0,0,0, WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
   loop
 }
}

actor TensionAuraLight5 : TensionAuraLightBase { }
actor TensionAuraLight20 : TensionAuraLightBase { }
actor TensionAuraLight50 : TensionAuraLightBase { }
actor TensionAuraLight100 : TensionAuraLightBase { }
actor TensionAuraLight250 : TensionAuraLightBase { }
actor TensionAuraLight500 : TensionAuraLightBase { }
actor TensionAuraLight1000 : TensionAuraLightBase { }

ACTOR TensionParticle1 : CrossbowFX4
{
  VSpeed 3
  Height 1
  Radius 1
  -SOLID
  +NOINTERACTION
  +NOBLOCKMAP
  +NOGRAVITY
  +NOTELESTOMP
  RenderStyle Add
  States
  {
  Spawn:
    TNT1 A 0 NoDelay 
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 0,"ScaleCheck0")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"ScaleCheck5")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"ScaleCheck20")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"ScaleCheck50")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"ScaleCheck100")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"ScaleCheck250")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"ScaleCheck500")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"ScaleCheck1000")
    goto ScaleCheck0

  ScaleCheck0: // "0"
    TNT1 A 0 A_SetScale(frandom(0.21,0.32))
    goto Animate

  ScaleCheck5: // "5"
    TNT1 A 0 A_SetScale(frandom(0.27,0.38))
    goto Animate

  ScaleCheck20: // "20"
    TNT1 A 0 A_SetScale(frandom(0.33,0.45))
    goto Animate

  ScaleCheck50: // "50"
    TNT1 A 0 A_SetScale(frandom(0.39,0.51))
    goto Animate

  ScaleCheck100: // "100"
    TNT1 A 0 A_SetScale(frandom(0.46,0.58))
    goto Animate

  ScaleCheck250: // "250"
    TNT1 A 0 A_SetScale(frandom(0.53,0.65))
    goto Animate

  ScaleCheck500: // "500"
    TNT1 A 0 A_SetScale(frandom(0.60,0.73))
    goto Animate

  ScaleCheck1000: // "1000"
    TNT1 A 0 A_SetScale(frandom(0.68,0.81))
    goto Animate

  Animate:
    TNGT A 4 Bright A_FadeOut(0.10)
    TNGT B 4 Bright A_FadeOut(0.10)
    TNGT A 4 Bright A_FadeOut(0.10)
    TNGT B 4 Bright A_FadeOut(0.10)
    TNGT C 4 Bright A_FadeOut(0.10)
    TNGT D 4 Bright A_FadeOut(0.10)
    TNGT C 4 Bright A_FadeOut(0.10)
    TNGT D 4 Bright A_FadeOut(0.10)
    Stop
  }
}

ACTOR TensionParticle2 : CrossbowFX4
{
  VSpeed 3
  Height 1
  Radius 1
  -SOLID
  +NOINTERACTION
  +NOBLOCKMAP
  +NOGRAVITY
  +NOTELESTOMP
  RenderStyle Add
  States
  {
  Spawn:
    TNT1 A 0 NoDelay 
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 0,"ScaleCheck0")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 1,"ScaleCheck5")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 2,"ScaleCheck20")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 3,"ScaleCheck50")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 4,"ScaleCheck100")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 5,"ScaleCheck250")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 6,"ScaleCheck500")
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckTensionLevel") == 7,"ScaleCheck1000")
    goto ScaleCheck0

  ScaleCheck0: // "0"
    TNT1 A 0 
    TNT1 A 0 A_SetScale(frandom(0.21,0.32))
    goto Animate

  ScaleCheck5: // "5"
    TNT1 A 0 A_SetScale(frandom(0.27,0.38))
    goto Animate

  ScaleCheck20: // "20"
    TNT1 A 0 A_SetScale(frandom(0.33,0.45))
    goto Animate

  ScaleCheck50: // "50"
    TNT1 A 0 A_SetScale(frandom(0.39,0.51))
    goto Animate

  ScaleCheck100: // "100"
    TNT1 A 0 A_SetScale(frandom(0.46,0.58))
    goto Animate

  ScaleCheck250: // "250"
    TNT1 A 0 A_SetScale(frandom(0.53,0.65))
    goto Animate

  ScaleCheck500: // "500"
    TNT1 A 0 A_SetScale(frandom(0.60,0.73))
    goto Animate

  ScaleCheck1000: // "1000"
    TNT1 A 0 A_SetScale(frandom(0.68,0.81))
    goto Animate

  Animate:
    TNGT E 4 Bright A_FadeOut(0.10)
    TNGT F 4 Bright A_FadeOut(0.10)
    TNGT E 4 Bright A_FadeOut(0.10)
    TNGT F 4 Bright A_FadeOut(0.10)
    TNGT G 4 Bright A_FadeOut(0.10)
    TNGT H 4 Bright A_FadeOut(0.10)
    TNGT G 4 Bright A_FadeOut(0.10)
    TNGT H 4 Bright A_FadeOut(0.10)
    Stop
  }
}

ACTOR TensionParticleGenerator
{
  -SOLID
  +NOBLOCKMAP
  +NOINTERACTION
  +NOGRAVITY
  +NOTELESTOMP
  Height 1
  Radius 1
  States
  {
  Spawn:
   TNT1 A 0 Bright NoDelay
   TNT1 A 0 Bright A_SpawnItemEx("TensionParticle1",random(-13,13),random(-13,13),random(1,9),random(-1.4,1.4),random(-1.4,1.4),random(1.6,2.8),0,SXF_NOCHECKPOSITION,ACS_NamedExecuteWithResult("TensionParticleSpawnChance"))
   TNT1 A 1 Bright A_SpawnItemEx("TensionParticle2",random(-13,13),random(-13,13),random(1,9),random(-1.4,1.4),random(-1.4,1.4),random(1.6,2.8),0,SXF_NOCHECKPOSITION,ACS_NamedExecuteWithResult("TensionParticleSpawnChance"))
   TNT1 A 0 A_Jump(192,3)
   TNT1 A 0 A_Jump(192,2)
   TNT1 A 0 Bright A_AlertMonsters // 1 out of 36834 chance of a particle spawner alerting monsters
   TNT1 A 0 
   stop
  }
}

Actor DushPuff : PhoenixPuff
{
}