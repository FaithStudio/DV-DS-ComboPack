class PlayerStatItem : Inventory 
{
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		if (!passive && damage > 0) // If the wielder [usually the player] of the item is the ATTACKER
		{
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 10.00;
			if (CallACS("CheckCharacterClass") == 0) LVLFactor = 1.00 + (PlayerLevel * .00117);				// Deggaris	(1 LVL = +0.117% Damage Dealt)
			if (CallACS("CheckCharacterClass") == 1) LVLFactor = 1.00 + (PlayerLevel * .000863);			// Illucia	(1 LVL = +0.0863% Damage Dealt)
			if (CallACS("CheckCharacterClass") == 2) LVLFactor = 1.00 + (PlayerLevel * .0011577);			// Flora		(1 LVL = +0.11577% Damage Dealt)
			if (CallACS("CheckCharacterClass") == 8) LVLFactor = 1.00 + (PlayerLevel * .000825);			// Ailish		(1 LVL = +0.0825% Damage Dealt)
			if (CallACS("CheckCharacterClass") == 9) LVLFactor = 1.00 + (PlayerLevel * .001075);			// Petra		(1 LVL = +0.1075% Damage Dealt)
			if (LVLfactor > LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Strength
			int PlayerSTR = CallACS("StatCheck",7);
			double STRfactor = 1.0; double STRfactorclamp = 10.00;
			if (damageType != 'Magic')
			{
				if (CallACS("CheckCharacterClass") == 0) STRfactor = 1.00 + (PlayerSTR * .006667);			// Deggaris	(1 STR = +0.6667~% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 1) STRfactor = 1.00 + (PlayerSTR * .005);					// Illucia	(1 STR = +0.5% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 2) STRfactor = 1.00 + (PlayerSTR * .003334);			// Flora		(1 STR = +0.3334~% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 8) STRfactor = 1.00 + (PlayerSTR * .003);					// Ailish		(1 STR = +0.3% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 9) STRfactor = 1.00 + (PlayerSTR * .00625);				// Petra		(1 STR = +0.625% Damage Dealt)
			}
			if (STRfactor > STRfactorclamp) STRfactor = STRfactorclamp;

			// Check Sorcery
			int PlayerSOR = CallACS("StatCheck",6);
			double SORfactor = 1.0; double SORfactorclamp = 10.00;
			if (damageType == 'Magic')
			{
				if (CallACS("CheckCharacterClass") == 0) SORfactor = 1.00 + (PlayerSOR * .003334);			// Deggaris	(1 SOR = +0.3334~% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 1) SORfactor = 1.00 + (PlayerSOR * .005);					// Illucia	(1 SOR = +0.5% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 2) SORfactor = 1.00 + (PlayerSOR * .006667);			// Flora		(1 SOR = +0.6667~% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 8) SORfactor = 1.00 + (PlayerSOR * .00625);				// Ailish		(1 SOR = +0.625% Damage Dealt)
				if (CallACS("CheckCharacterClass") == 9) SORfactor = 1.00 + (PlayerSOR * .003);					// Petra		(1 SOR = +0.3% Damage Dealt)
			}
			if (SORfactor > SORfactorclamp) SORfactor = SORfactorclamp;

			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (GetCVar("dvds_musou_powertripmode") == 1) MusouFactor = 5.0;
			if (GetCVar("dvds_musou_powertripmode") == 2) MusouFactor = 10.0;

			// Hellcore Level Checker
			double HellcoreLevelFactor = 1.0;
			int HellcoreType = 0; 
			int HellcoreLevel = 0;
			// Slot 4 Hellcore Weapons
			if (damageType == 'ImpClaw') HellcoreType = 96;
			if (damageType == 'DarkImpClaw') HellcoreType = 97;
			if (damageType == 'CacodemonEye') HellcoreType = 98;
			if (damageType == 'CacolanternEye') HellcoreType = 99;
			if (damageType == 'AbaddonEye') HellcoreType = 100;
			// Slot 5 Hellcore Weapons
			if (damageType == 'KnightFist') HellcoreType = 101;
			if (damageType == 'BaronFist') HellcoreType = 102;
			if (damageType == 'BelphegorFist') HellcoreType = 103;
			if (damageType == 'BruiserFist') HellcoreType = 104;
			if (damageType == 'ArchonFist') HellcoreType = 105;
			if (damageType == 'PyroFist') HellcoreType = 106;
			// Slot 6 Hellcore Weapons
			if (damageType == 'IncarnateSkull') HellcoreType = 107;
			if (damageType == 'ArchvileHand') HellcoreType = 108;
			if (damageType == 'DiabloistHand') HellcoreType = 109;
			if (damageType == 'BalrogFist') HellcoreType = 110;
			if (damageType == 'ElementalEye') HellcoreType = 111;
			if (damageType == 'OverlordEye') HellcoreType = 112;
			if (HellcoreType != 0)
			{
				HellcoreLevel = CallACS("MiscVarCheckDECORATE",HellcoreType);
				if (HellcoreLevel > 0)
				{
					double HellcoreBaseMulti = 1.5;
					if (HellcoreLevel >= 1) HellcoreLevelFactor = HellcoreBaseMulti;
					if (HellcoreLevel >= 2) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 3) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 4) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 5) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 6) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 7) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 8) HellcoreLevelFactor *= HellcoreBaseMulti;
				}
				//Console.Printf("(input: HellcoreLevelFactor [%d, LVL %d] = %10f)", HellcoreType, HellcoreLevel, HellcoreLevelFactor);
			}

			// "Soul Mastery" Perk [Hellcore damage ONLY]
			double SoulMasteryFactor = 1.0;
			if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
			    damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
			    damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
			{
				SoulMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10033) * .10) + (CallACS("MiscVarCheckDECORATE",10034) * .25));;
			}
			
			// "MagiUp" and "Wand/Staff Mastery" Perks [Magic ONLY]
			double MagiUpATKFactor = 1.0;
			double WandStaffMasteryFactor = 1.0;
			if (damageType == 'Magic')
			{
				MagiUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10003) * .075) + (CallACS("MiscVarCheckDECORATE",10004) * .1875)); 
				WandStaffMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10053) * .0625) + (CallACS("MiscVarCheckDECORATE",10054) * .15625)); 
			}
			
			// Clearer of Mind "Perk"
			double ClearOfMindFactor = 1.0;
			if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
			{
				ClearOfMindFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10055) * .0375) + (CallACS("MiscVarCheckDECORATE",10056) * .09375)); 
			}
			
			// "StamUp" Perk [Melee Oriented Attacks]
			double StamUpATKFactor = 1.0;
			if (damageType == 'Melee' || 
					damageType == 'Sceptre' || 
					damageType == 'Gauntlets' || 
					damageType == 'Fist' || 
					damageType == 'Kick' || 
					damageType == 'Chainsaw' )
			{
				StamUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10005) * .075) + (CallACS("MiscVarCheckDECORATE",10006) * .1875)); 
			}
			
			// Strife's "Accuracy" Upgrades
			double StrifeAccuracyFactor = 1.0;
			StrifeAccuracyFactor = 1.00 + (CallACS("MiscVarCheckDECORATE",318) * .005);
			
			// Doomspell Bonuses
			double DoomSpellFactor = 1.0;
			if (CallACS("CheckCharacterClass") == 0) // Deggaris
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.5;
				if (damageType == 'Ice') DoomSpellFactor = 1.0;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.0;
				if (damageType == 'Acid') DoomSpellFactor = 3.2;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 3.2;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CallACS("CheckCharacterClass") == 1) // Illucia
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.333;
				if (damageType == 'Fire') DoomSpellFactor = 1.0;
				if (damageType == 'Holy') DoomSpellFactor = 0.75;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 3.2;
				if (damageType == 'Acid') DoomSpellFactor = 2.1;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 2.1;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CallACS("CheckCharacterClass") == 2) // Flora
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 4.0;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CallACS("CheckCharacterClass") == 8) // Ailish
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 3.25;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CallACS("CheckCharacterClass") == 9) // Petra
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 3.75;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			
			// Invisibility [OFFENSIVE]
			double InvisFactor = 1.0;
			if (Owner.CountInv("InvisiblitySpell") > 0)
			{
				if (random(1,100) > 25) { InvisFactor = 1.25; }
				else
				{
					if (random(1,100) > 25) { InvisFactor = 1.5; }
					else
					{
						if (random(1,100) > 25) { InvisFactor = 1.75; }
						else { InvisFactor = 2.0; }
					}
				}
			}
			//Console.Printf("(input: InvisFactor = %8f)", InvisFactor);
			
			// Tension Level [OFFENSIVE]
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			if (TensionLevel == 1) TensionFactor = 1.7;		// "5" Tension
			if (TensionLevel == 2) TensionFactor = 3;			// "20" Tension
			if (TensionLevel == 3) TensionFactor = 5;			// "50" Tension
			if (TensionLevel == 4) TensionFactor = 7.5;		// "100" Tension
			if (TensionLevel == 5) TensionFactor = 11.25;	// "250" Tension
			if (TensionLevel == 6) TensionFactor = 17.5;	// "500" Tension
			if (TensionLevel == 7) TensionFactor = 25;		// "1000" Tension
			
			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 2.5;

			// Divine Avatar [OFFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 4.0;

			double TOTALFactor = LVLfactor 
													* STRfactor 
													* SORfactor 
													* MusouFactor 
													* MagiUpATKFactor 
													* WandStaffMasteryFactor 
													* StamUpATKFactor 
													* StrifeAccuracyFactor 
													* ClearOfMindFactor 
													* HellcoreLevelFactor
													* SoulMasteryFactor
													* DoomSpellFactor
													* InvisFactor
													* TensionFactor
													* RingFactor
													* DivineAvatarFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (Owner != null && newdamage > damage) Owner.A_PlaySound(ActiveSound, CHAN_AUTO, 1.0, false, ATTN_NONE);
			if (dvdsdebug_actordmgdisplays > 0 && damage > 0) Console.Printf("(input: \cydamage\c- = \cy%d\c-, \cynewDamage\c- = \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, STRfactor [%d] = %8f, SORfactor [%d] = %8f, MusouFactor = %8f, StamUpATKFactor = %8f, MagiUpATKFactor = %8f, WandStaffMasteryFactor = %8f, StrifeAccuracyFactor = %8f, ClearOfMindFactor = %8f, HellcoreLevelFactor = %8f, SoulMasteryFactor = %8f, DoomSpellFactor = %8f, InvisFactor = %8f, TensionFactor = %8f, RingFactor = %8f, DivineAvatarFactor = %8f)", damage, newdamage, TOTALFactor, PlayerLevel, LVLFactor, PlayerSTR, STRfactor, PlayerSOR, SORfactor, MusouFactor, StamUpATKFactor, MagiUpATKFactor, WandStaffMasteryFactor, StrifeAccuracyFactor, ClearOfMindFactor, HellcoreLevelFactor, SoulMasteryFactor, DoomSpellFactor, InvisFactor, TensionFactor, RingFactor, DivineAvatarFactor);
		}

		if (passive && damage > 0) // If the wielder [usually the player] of the item is the DEFENDER
		{
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 0.05;
			if (CallACS("CheckCharacterClass") == 0) LVLFactor = 1.00 - (PlayerLevel * .00117);				// Deggaris	(1 LVL = -0.117% Damage Taken)
			if (CallACS("CheckCharacterClass") == 1) LVLFactor = 1.00 - (PlayerLevel * .0009707);			// Illucia	(1 LVL = -0.09707% Damage Taken)
			if (CallACS("CheckCharacterClass") == 2) LVLFactor = 1.00 - (PlayerLevel * .0007633);			// Flora		(1 LVL = -0.07633% Damage Taken)
			if (CallACS("CheckCharacterClass") == 8) LVLFactor = 1.00 - (PlayerLevel * .000800);			// Ailish		(1 LVL = -0.0800% Damage Taken)
			if (CallACS("CheckCharacterClass") == 9) LVLFactor = 1.00 - (PlayerLevel * .0010875);			// Petra		(1 LVL = -0.10875% Damage Taken)
			if (LVLfactor < LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Defense
			int PlayerDEF = CallACS("StatCheck",4);
			double DEFfactor = 1.0; double DEFfactorclamp = 0.05;
			if (damageType != 'Magic')
			{
				if (CallACS("CheckCharacterClass") == 0) DEFfactor = 1.00 - (PlayerDEF * .006667);			// Deggaris	(1 DEF = -0.6667~% Physical Damage)
				if (CallACS("CheckCharacterClass") == 1) DEFfactor = 1.00 - (PlayerDEF * .005);					// Illucia	(1 DEF = -0.5000% Physical Damage)
				if (CallACS("CheckCharacterClass") == 2) DEFfactor = 1.00 - (PlayerDEF * .003334);			// Flora		(1 DEF = -0.3334~% Physical Damage)
				if (CallACS("CheckCharacterClass") == 8) DEFfactor = 1.00 - (PlayerDEF * .003);					// Ailish		(1 DEF = -0.3000% Physical Damage)
				if (CallACS("CheckCharacterClass") == 9) DEFfactor = 1.00 - (PlayerDEF * .00725);				// Petra		(1 DEF = -0.7250% Physical Damage)
			}
			if (DEFfactor < DEFfactorclamp) DEFfactor = DEFfactorclamp;

			// Check Therapeusis
			int PlayerTHE = CallACS("StatCheck",8);
			double THEfactor = 1.0; double THEfactorclamp = 0.05;
			if (damageType == 'Magic')
			{
				if (CallACS("CheckCharacterClass") == 0) THEfactor = 1.00 - (PlayerTHE * .003334);			// Deggaris	(1 THE = -0.3334~% Magic Damage)
				if (CallACS("CheckCharacterClass") == 1) THEfactor = 1.00 - (PlayerTHE * .005);					// Illucia	(1 THE = -0.5000% Magic Damage)
				if (CallACS("CheckCharacterClass") == 2) THEfactor = 1.00 - (PlayerTHE * .006667);			// Flora		(1 THE = -0.6667~% Magic Damage)
				if (CallACS("CheckCharacterClass") == 8) THEfactor = 1.00 - (PlayerTHE * .00725);				// Ailish		(1 THE = -0.7250% Magic Damage)
				if (CallACS("CheckCharacterClass") == 9) THEfactor = 1.00 - (PlayerTHE * .003);					// Petra		(1 THE = -0.3000% Magic Damage)
			}
			if (THEfactor < THEfactorclamp) THEfactor = THEfactorclamp;
			
			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (GetCVar("dvds_musou_powertripmode") == 1) MusouFactor = 0.2;
			if (GetCVar("dvds_musou_powertripmode") == 2) MusouFactor = 0.1;

			// "LifeUp Perk"
			double LifeUpDEFFactor = 1.0;
			LifeUpDefFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10001) * .075) + (CallACS("MiscVarCheckDECORATE",10002) * .1875)); 

			// Strife's "Stamina" Upgrades
			double StrifeStaminaFactor = 1.0;
			StrifeStaminaFactor = 1.00 - (CallACS("MiscVarCheckDECORATE",317) * .005);
			
			// Invisibility [DEFENSIVE]
			double InvisFactor = 1.0;
			if (Owner.CountInv("InvisiblitySpell") > 0)
			{
				if (random(1,100) > 25) { InvisFactor = 0.8; }
				else
				{
					if (random(1,100) > 25) { InvisFactor = 0.667; }
					else
					{
						if (random(1,100) > 25) { InvisFactor = 0.5714; }
						else { InvisFactor = 0.5; }
					}
				}
			}
			//Console.Printf("(input: InvisFactor = %8f)", InvisFactor);
			
			// Tension Level [DEFENSIVE]
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			if (TensionLevel == 1) TensionFactor = 0.975;		// "5" Tension
			if (TensionLevel == 2) TensionFactor = 0.925;		// "20" Tension
			if (TensionLevel == 3) TensionFactor = 0.825;		// "50" Tension
			if (TensionLevel == 4) TensionFactor = 0.7;			// "100" Tension
			if (TensionLevel == 5) TensionFactor = 0.55;		// "250" Tension
			if (TensionLevel == 6) TensionFactor = 0.35;		// "500" Tension
			if (TensionLevel == 7) TensionFactor = 0.1;			// "1000" Tension

			// Sauron Equipment [DEFENSIVE]
			double SauronEquipFactor = 1.0;
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SauronEquipFactor = SauronEquipFactor * 3 / 4; // General Reduction
				if (damageType == 'Bullet') SauronEquipFactor = SauronEquipFactor * 5 / 6;
			}

			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 0.4;

			// Divine Avatar [DEFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 0.25;

			double TOTALFactor = LVLfactor 
													* DEFfactor 
													* THEfactor 
													* MusouFactor 
													* LifeUpDEFFactor 
													* StrifeStaminaFactor
													* InvisFactor
													* TensionFactor
													* SauronEquipFactor
													* RingFactor
													* DivineAvatarFactor;
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (Owner != null && newdamage > damage) Owner.A_PlaySound(ActiveSound, CHAN_AUTO, 1.0, false, ATTN_NONE);
			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) Console.Printf("(input: \cydamage\c- = \cy%d\c-, \cynewDamage\c- = \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, DEFfactor [%d] = %8f, THEfactor [%d] = %8f, MusouFactor = %8f, LifeUpDEFFactor = %8f, StrifeStaminaFactor = %8f, InvisFactor = %8f, TensionFactor = %8f, SauronEquipFactor = %8f, RingFactor = %8f, DivineAvatarFactor = %8f)", damage, newdamage, TOTALFactor, PlayerLevel, LVLFactor, PlayerDEF, DEFfactor, PlayerTHE, THEfactor, MusouFactor, LifeUpDEFFactor, StrifeStaminaFactor, InvisFactor, TensionFactor, SauronEquipFactor, RingFactor, DivineAvatarFactor);
		}
	}

/*
	override double GetSpeedFactor() 
	{
		double CVarAdjustSpeed = 1.00;
		CVarAdjustSpeed = GetCVar("dvds_speedmult");

		double StaminaSpeed = 1.00;

		double DodgeMoreSpeed = 1.00;
		double JumpMoreSpeed = 1.00;
		double OnTheMoveSpeed = 1.00;


		double LVLSpeed = 1.00;
		double AGLSpeed = 1.00;

		double ArmorSpeed = 1.00;
		double OneRingSpeed = 1.00;

		double HWShieldSpeed = 1.00;
		double FistBlockSpeed = 1.00;
		double SceptreShieldSpeed = 1.00;

		double BuffSpeed = 1.00;
		double TensionSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",181) == 1) TensionSpeed = 1.035;
		if (CallACS("MiscVarCheckDECORATE",181) == 2) TensionSpeed = 1.15;
		if (CallACS("MiscVarCheckDECORATE",181) == 3) TensionSpeed = 1.25;
		if (CallACS("MiscVarCheckDECORATE",181) == 4) TensionSpeed = 1.375;
		if (CallACS("MiscVarCheckDECORATE",181) == 5) TensionSpeed = 1.5625;
		if (CallACS("MiscVarCheckDECORATE",181) == 6) TensionSpeed = 1.875;
		if (CallACS("MiscVarCheckDECORATE",181) == 7) TensionSpeed = 2.25;

		double FocusSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",212) > 0) FocusSpeed = 0.25;

		double DivineAvatarSpeed = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarSpeed = 1.5;

		Speed = 1.00
					* CVarAdjustSpeed
					* StaminaSpeed 
					* DodgeMoreSpeed
					* JumpMoreSpeed
					* OnTheMoveSpeed
					* FocusSpeed
					* LVLSpeed
					* AGLSpeed
					* ArmorSpeed
					* OneRingSpeed
					* HWShieldSpeed
					* FistBlockSpeed
					* SceptreShieldSpeed
					* BuffSpeed
					* TensionSpeed
					* DivineAvatarSpeed;
		//Console.Printf("(input: Speed = %8f)", Speed);
		return Speed; 
	}
*/

}

// Resistance code [w/ some help from argv :V]
class Resistances : Inventory 
{
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage) 
	{
		double resist = 0;
		double resistN = 0;

		for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
				if (inv is "ResistanceGrantingItem")
						resist += ResistanceGrantingItem(inv).GetResistForDamageType(damageType);        
		newdamage = damage * (1. - resist);

		int newdmg1 = newdamage;
			for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
					if (inv is "ResistanceGrantingItem")
							resistN += ResistanceGrantingItem(inv).ResistNormal;
		newdamage = newdmg1 * (1. - resistN);

		if (GetCVar("dvdsdebug_playerdmgdisplays") > 0) Console.Printf("(FloraArmorAbsorb:  DmgType = %s, dmg = %d, res = %.4f, newdmg1 = %d, resN = %.4f, finaldmg = %d)", damageType, damage, resist, newdmg1, resistN, newdamage);
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ResistanceGrantingItem : CustomInventory 
{
	double ResistNormal, ResistPhysical, ResistMelee, ResistBullet, ResistMagic;
	double ResistFire, ResistIce, ResistThunder, ResistHoly, ResistDark, ResistWind, ResistEarth;
	double ResistSlime, ResistMagma, ResistCrush, ResistDrowning, ResistFalling, ResistExplosive;
	double ResistSceptre, ResistFist, ResistKick, ResistGauntlets, ResistChainsaw;
	double ResistAcid, ResistPoison;

	property ResistNormal: ResistNormal;
	property ResistPhysical: ResistPhysical;
	property ResistMelee: ResistMelee;
	property ResistBullet: ResistBullet;
	property ResistMagic: ResistMagic;

	property ResistFire: ResistFire;
	property ResistIce: ResistIce;
	property ResistThunder: ResistThunder;
	property ResistHoly: ResistHoly;
	property ResistDark: ResistDark;
	property ResistWind: ResistWind;
	property ResistEarth: ResistEarth;

	property ResistSlime: ResistSlime;
	property ResistMagma: ResistMagma;
	property ResistCrush: ResistCrush;
	property ResistDrowning: ResistDrowning;
	property ResistFalling: ResistFalling;
	property ResistExplosive: ResistExplosive;

	property ResistSceptre: ResistSceptre;
	property ResistFist: ResistFist;
	property ResistKick: ResistKick;
	property ResistGauntlets: ResistGauntlets;
	property ResistChainsaw: ResistChainsaw;

	property ResistAcid: ResistAcid;
	property ResistPoison: ResistPoison;
    
	double GetResistForDamageType(Name damageType) 
	{
		if (damageType == 'Physical')
				return ResistPhysical;
		else if (damageType == 'Melee')
				return ResistMelee;
		else if (damageType == 'Bullet' || damageType == 'Railgun')
				return ResistBullet;
		else if (damageType == 'Magic')
				return ResistMagic;
		else if (damageType == 'Fire' || damageType == 'Lava')
				return ResistFire;
		else if (damageType == 'Ice')
				return ResistIce;
		else if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Shock')
				return ResistThunder;
		else if (damageType == 'Holy')
				return ResistHoly;
		else if (damageType == 'Dark')
				return ResistDark;
		else if (damageType == 'Wind')
				return ResistWind;
		else if (damageType == 'Earth')
				return ResistEarth;
		else if (damageType == 'Slime')
				return ResistSlime;
		else if (damageType == 'Magma')
				return ResistMagma;
		else if (damageType == 'Crush')
				return ResistCrush;
		else if (damageType == 'Drowning')
				return ResistDrowning;
		else if (damageType == 'Falling')
				return ResistFalling;
		else if (damageType == 'Explosive' || damagetype == 'MOD_ROCKET' || damagetype == 'MOD_R_SPLASH' || damagetype == 'MOD_BARREL')
				return ResistExplosive;
		else if (damageType == 'Sceptre')
				return ResistSceptre;
		else if (damageType == 'Fist;')
				return ResistFist;
		else if (damageType == 'Kick')
				return ResistKick;
		else if (damageType == 'Gauntlets')
				return ResistGauntlets;
		else if (damageType == 'Chainsaw')
				return ResistChainsaw;
		else if (damageType == 'Acid')
				return ResistAcid;
		else if (damageType == 'Poison' || damageType == 'PoisonElemental')
				return ResistPoison;
		else
				return 0;
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItemZSC : ResistanceGrantingItem
{
	int loopernum;
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1 RenderStyle Add
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}
	property loopernum: loopernum;

	override void PostBeginPlay()
	{
		if (CountInv("PlayingDoom64",AAPTR_PLAYER1)) { scale.x * 1.2; scale.y * 1.2; }
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick() 
	{
		if (Owner == null)
		{
			ACS_NamedExecuteAlways("CheckFloraArmorCopies",0,loopernum,0,0);
			if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
			if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			A_GiveInventory("ActorVar1",1);
			if (CountInv("ActorVar1") >= 42)
			{
				A_Stopsound(CHAN_ITEM);
				A_Playsound("FloraArmor/Hum",CHAN_ITEM);
				A_SetInventory("ActorVar1",0);
			}
		}
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_PlaySound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

// Item 1
class SafeTeaShoes : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRA0"
		inventory.icon "FAMRA0";
		Inventory.PickupMessage "Got the \chSafe Tea Shoes\c-!!";
		ResistanceGrantingItem.ResistSlime 0.275;
		ResistanceGrantingItem.ResistMagma 0.275;
		ResistanceGrantingItem.ResistNormal 0.03;
		ResistanceGrantingItem.ResistMagic 0.0125;
		BaseFloraArmorItemZSC.loopernum 1;
	}

	override void Tick() 
	{
		ResistSlime = frandom(0.25, 0.3); 
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 1 bright NoDelay;
			loop;
	}
}

// Item 2
class PearlyCorset : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRB0"
		inventory.icon "FAMRB0";
		Inventory.PickupMessage "Got the \chPearly Corset\c-!!";
		ResistanceGrantingItem.ResistNormal 0.07;
		ResistanceGrantingItem.ResistFire 0.02;
		ResistanceGrantingItem.ResistMagma 0.02;
		ResistanceGrantingItem.ResistIce 0.02;
		ResistanceGrantingItem.ResistThunder 0.02;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.025;
		ResistanceGrantingItem.ResistBullet 0.25;
		BaseFloraArmorItemZSC.loopernum 2;
	}

	States
	{
		Spawn:
			FAMR B 1 bright NoDelay;
			loop;
	}
}

// Item 3
class WaterFlyingDress : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRC0"
		inventory.icon "FAMRC0";
		Inventory.PickupMessage "Got the \chWater Flying Dress\c-!!";
		ResistanceGrantingItem.ResistNormal 0.08;
		ResistanceGrantingItem.ResistFire 0.3;
		ResistanceGrantingItem.ResistMagma 0.3;
		ResistanceGrantingItem.ResistMagic 0.25;
		ResistanceGrantingItem.ResistBullet 0.15;
		ResistanceGrantingItem.ResistExplosive 0.20;
		BaseFloraArmorItemZSC.loopernum 3;
	}

	States
	{
		Spawn:
			FAMR C 1 bright NoDelay;
			loop;
	}
}

// Item 4
class EvenstarNecklace : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRD0"
		inventory.icon "FAMRD0";
		Inventory.PickupMessage "Got the \chEvenstar Necklace\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.2;
		ResistanceGrantingItem.ResistMagma 0.2;
		ResistanceGrantingItem.ResistIce 0.2;
		ResistanceGrantingItem.ResistThunder 0.2;
		ResistanceGrantingItem.ResistDark 0.2;
		ResistanceGrantingItem.ResistMagic 0.2;
		BaseFloraArmorItemZSC.loopernum 4;
	}

	States
	{
		Spawn:
			FAMR D 1 bright NoDelay;
			loop;
	}
}

// Item 5
class CloakOfEvasion : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRE0"
		inventory.icon "FAMRE0";
		Inventory.PickupMessage "Got the \chCloak of Evasion\c-!!";
		ResistanceGrantingItem.ResistNormal 0.04;
		ResistanceGrantingItem.ResistIce 0.05;
		ResistanceGrantingItem.ResistThunder 0.025;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 5;
	}

	States
	{
		Spawn:
			FAMR E 1 bright NoDelay;
			loop;
	}
}

// Item 6
class AnubisCufflinks : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRF0"
		inventory.icon "FAMRF0";
		Inventory.PickupMessage "Got the \chAnubis Cufflinks\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		ResistanceGrantingItem.ResistThunder 0.0625;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 6;
	}

	States
	{
		Spawn:
			FAMR F 1 bright NoDelay;
			loop;
	}
}

// Item 7
class KissaBra : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRG0"
		inventory.icon "FAMRG0";
		Inventory.PickupMessage "Got \chKissa's Armored Brasseire\c-!!";
		ResistanceGrantingItem.ResistNormal 0.06;
		ResistanceGrantingItem.ResistBullet 0.2;
		BaseFloraArmorItemZSC.loopernum 7;
	}

	States
	{
	Spawn:
		FAMR G 1 bright NoDelay;
		loop;
	}
}

// Item 8
class DivineShield : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRH0"
		inventory.icon "FAMRH0";
		Inventory.PickupMessage "Got the \chDivine Shield\c-!!";
		ResistanceGrantingItem.ResistNormal 0.16;
		ResistanceGrantingItem.ResistFire 0.25;
		ResistanceGrantingItem.ResistMagma 0.25;
		ResistanceGrantingItem.ResistIce 0.25;
		ResistanceGrantingItem.ResistThunder 0.25;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.3;
		BaseFloraArmorItemZSC.loopernum 9;
	}

	States
	{
		Spawn:
			FAMR H 1 bright NoDelay;
			loop;
	}
}

// Item 9
class BalrogRing : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRI0"
		inventory.icon "FAMRI0";
		Inventory.PickupMessage "Got the \chBalrog's Ring\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.15;
		ResistanceGrantingItem.ResistMagma 0.15;
		ResistanceGrantingItem.ResistIce 0.225;
		ResistanceGrantingItem.ResistExplosive 0.25;
		BaseFloraArmorItemZSC.loopernum 10;
	}

	States
	{
		Spawn:
			FAMR I 1 bright NoDelay;
			loop;
	}
}

// Item 10
class DoveRibbon : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRJ0"
		inventory.icon "FAMRJ0";
		Inventory.PickupMessage "Got the \chDove's Ribbon\c-!!";
		ResistanceGrantingItem.ResistNormal 0.09;
		ResistanceGrantingItem.ResistFire 0.0125;
		ResistanceGrantingItem.ResistMagma 0.0125;
		ResistanceGrantingItem.ResistIce 0.0625;
		ResistanceGrantingItem.ResistThunder 0.15;
		ResistanceGrantingItem.ResistDark 0.125;
		ResistanceGrantingItem.ResistMagic 0.0625;
		ResistanceGrantingItem.ResistBullet 0.05;
		BaseFloraArmorItemZSC.loopernum 11;
	}

	States
	{
		Spawn:
			FAMR J 1 bright NoDelay;
			loop;
	}
}

// Item 11
class FalconKnifeEarrings : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRK0"
		inventory.icon "FAMRK0";
		Inventory.PickupMessage "Got the \chFalcon Knife Earrings\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		BaseFloraArmorItemZSC.loopernum 12;
	}

	States
	{
		Spawn:
			FAMR K 1 bright NoDelay;
			loop;
	}
}