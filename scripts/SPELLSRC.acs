#Library "SpellLib"
#include "zcommon.acs"

/*

Script Reference

Used Tags and Scripts
Thing Tags:
	1-999		-	Assume used in standard levels
	1000		-	Friendly Monsters
	1001		-	The Main Player
	1002-1009	-	Temporary ThingIDs

	1123		-	Main Sauron Eye's TID
	1124		-	Sauravatar's TID
	1281		-	TID for Armor Bonuses [for color translations]
	1537		-	TID for Seed Spawn system

HudMessage Tags:
	2		-	Tunnel Vision Display [death]
	3		-	Tunnel Vision Display
      ...
      3101		-	Background Tint for Menus/Armor-Display
	3202-3303	-	Mana Bar
	3304-3405	-	Exp Bar
	3406-3407	-	Spell Name, Spell Description
	3408-3412	-	Readied Spells (quickuse, Deggaris/Illucia)
	3413		-	Level Display
	3415		-	Mana Points Display
	3416-3417	-	Stats Display Text
	3418		-	EXP Display
	3419		-	Mana Regeneration Display
	3420		-	Aeon Points Display
	3422		-	Player Damage/Healing Amount [uses interpolation to gauge]
	3432		-	Level Up/Aeon Points Up Text.
	3433-3441	-	Buff Timers
	3442		-	Spell Category Display [goes with 3406-3407]
	3501		-	"BOSS" text [when fighting a boss]
	3502-3759	-	Boss Lifebar [roughly] (257)
	3998		-	Name of Creature for Lifebars
	3999		-	HP/MaxHP display for Lifebars
	4001		-	Actor Lifebar [Frame]
	4002-4102	-	Lifebar Notches [100 total]
      
Functions
	{-1-}		-	Checks Spell Costs Across the Board [used at least on four occasions in the code]

Script #s and their functions:
	{-24-}		-	***EVENT*** Changes Music back when exiting the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS] ***EVENT***
	{-25-}		-	***EVENT*** Changes Music for the battle with the main Eye of Sauron on MAP04 [DVI-DS] or MAP12 [DVII-DS] ***EVENT***
	{-803-}	-	Mana Regeneration
	{-804-}	-	Experience Adding
	{-805-} 	-	Spell Selection
	{-806-} 	-	Spell Readying
	{-807-}	-	Spell Casting
	{-808-}	-	*ERRORS* DO NOT USE RIGHT NOW *ERRORS*
	{-809-}	-	Color Translation Tables **new for DV-DS and beyond**
	{-810-}	- 	Mana Recovery Items **new for DV-DS and beyond**
	{-811-}	-	***EVENT*** Defines the Buildup to Sauravatar's appearance [DVI-DS & DVII-DS] ***EVENT***
	{-812-}	-	***EVENT*** Awakens the Stone Cyberdemon that becomes Sauravatar [DVI-DS & DVII-DS] ***EVENT***
	{-813-}	-	***EVENT*** Killed MAP02 Eye [DVI-DS] / MAP12 First Eye [DVII-DS] ***EVENT***
	{-814-}	-	***EVENT*** Killed MAP04 Eye #1 [DVI-DS] / MAP12 Second Eye [DVII-DS] ***EVENT***
	{-815-}	-	***EVENT*** Killed MAP04 Eye #2 [DVI-DS] / MAP12 Third Eye [DVII-DS] ***EVENT***
	{-816-}	-	***EVENT*** Killed MAP04 Main Eye [DVI-DS] / MAP12 Fourth Eye [DVII-DS] ***EVENT***
	{-817-}	-	***EVENT*** Sauravatar's Death [DVI-DS specific version] ***EVENT***
	{-818-}	-	Soulsphere Pickup Script
	{-819-}	-	Megasphere Pickup Script [for health half]
	{-820-}	-	Health Bonus Pickup Script (also one part of the Sauron's Gauntlet hit effect)
	{-821-}	-	Configures the full max health of the Sauravatar and sets it to its proper Health to start the fight [DVI-DS & DVII-DS]
	{-822-}	-	***EVENT*** Health Regeneration for Main Sauravatar [only runs when it walks around] [DVI-DS & DVII-DS] ***EVENT***
	{-826-}	-	Max Health Bonus Pickup Script
	{-827-}	-	Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
	{-828-}	-	Stimpack / Medikit /Berserk Pack Pickups (All games)
	{-829-}	-	***DEBUG*** Debugging for Printing Armor Amounts on Screen ***DEBUG***
	{-830-}	-	Emulates Armor Bonuses for all four types of normal armor in DVI[I]-DS. [Applies Only to Deggaris and Illucia] (also one part of the Sauron's Gauntlet hit effect)
	{-831-}	-	Checks Whether a Full Armor Item can be picked up or not
	{-832-}	-	Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	{-833-}	-	***IMPORTANT*** Check Player Stuff Consistantly And Startup Stats. [requires a "DoomSpellACS" actor to be present on the map to work] ***IMPORTANT***
	{-834-}	-	MegaSphere Armor [Deggaris & Illucia Only] or Mana [Flora Only]
	{-835-}	-	***DEBUG*** Sets Mana to the Current Amount ("puke 835 [amount]" in console) ***DEBUG***
	{-836-}	-	----BLANK----
	{-837-}	-	Checks to see if you already possess Sauron's Gauntlets so they cannot appear more than once.
	{-838-}	-	Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color dependant on the current Armor Class of Deggaris/Illucia [does not apply to Flora].
	{-839-}	-	Backpack Pickup Script
	{-840-}	-	***DEBUG*** Prints whatever is defined in the script. ***DEBUG***
	{-841-}	-	Checks to see if you already possess The One Ring so it cannot appear more than once.
	{-842-}	-	Checks to see if you already possess Sauron's Helmet so it cannot appear more than once.
	{-843-}	-	***DEBUG*** Prints out damage on screen for a projectile attached to this script ***DEBUG***
	{-844-}	-	***DEBUG*** Set Levelcap Manually ***DEBUG***
	{-845-}	-	Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	{-846-}	-	Set Thing Special on the ShieldSpawner object for the twirling of the Sceptre. [Flora Only]
	{-847-}	-	Increases the number of points towards uncursing a Ruinous Shield into a Divine Shield
	{-848-}	-	Checks for DivineShield in inventory for the Ruinous Shield PICKUP.
	{-849-}	-	Creates the Screen Flash Effect when Hitting Someone with Sauron's Gauntlets
	{-850-}	-	Controls the Primary Effect of Sauron's Gauntlets when hitting someone [also calls scripts 20, 30 and 49]
	{-851-}	-	***EVENT*** Makes Monsters in MAP04 [DVI-DS] or MAP12 [DVII-DS] have a TID of 666 ***EVENT***
	{-852-}	-	***????*** Unknown Filler Script ***????***
	{-853-}	-	Ran if the Diabolist's "Gravity" type attack is set to affect Health/HP ONLY [or invulnerability if the player is currently such].
	{-854-}	-	Ran if the Diabolist's "Gravity" type attack is set to affect Mana/MP ONLY [or invulnerability if the player is currently such].
	{-855-}	-	***IMPORTANT*** Redone Buff Checker [must use the "DoomSpellACS" actor on a map to make this work!] ***IMPORTANT***
	{-856-}	-	Enforces Giving or Removing Buffs when certain powerup timers are on/off.
	{-857-}	-	***????*** Unknown Filler Script ***????***
	{-858-}	-	Screen Flash for Diabloist's Gravity Attack.
	{-859-}	-	Ran if the Diabolist's "Gravity" type attack is set to affect both Health/HP AND Mana/MP [or invulnerability if the player is currently such].
	{-860-}	-	Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items.
	{-861-}	-	Prevents the Diabolist from turning his wrath on a non-player target in order to maintain use of his Gravity attack properly.
	{-862-}	-	Accmulate EXP for Sceptre of Empyrea [Flora only]
	{-863-}	-	Spell Effects // SCRIPT 8'S POSITION IS BEING ERROR-RIDDEN AT THE MOMENT >_<
	{-864-}	-	Calculates the occurance rate of Sauron's Gauntlets and Sauron's Helmet Dropping.
	{-865-}	-	Red Tunnel Vision/Heartbeat Effect when badly injured
	{-866-}	-	(related to the tunnel vision effect somehow >.>)
	{-867-}	-	----BLANK----
	{-868-} 	-	Hellcore Overheating/Damage Script [ran with shooting Hellcore-class weapons]
	{-869-} 	-	Spawn a Randomized Armor Item for Flora in "DVI" mode [used with "FloraRandomArmor" thing]
	{-870-} 	-	Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
	{-871-} 	-	Using a Diabloist's Hands' HP Gravity attack-projectile on an enemy.
	[-873-] 	-	Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
	[-876-] 	-	Checks the mapnumber and gametype for Monster Spawners (main number)
	[-877-] 	-	Checks the mapnumber and gametype for Monster Spawners (stealth number)
	[-878-] 	-	Checks the gametype for monster spawns to allow or deny specfic enemy evolutions from appearing
	[-879-] 	-	Runs the "Grabbed a Seed of Life/Magic" script
	[-880-] 	-	Runs the "Grabbed a Seed of [Bleh]" script
	[-881-] 	-	Checks Seed amounts and will randomize dropped seeds.
	[-882-] 	-	Checks to Remove Seeds on the Map if too many have been picked up already.
	[-883-] 	-	----BLANK----
	[-884-] 	-	Seperated Levelup Code
	[-885-] 	-	Configures the Kill Totals for the Greater Sauravatar [and the Lesser Sauravatar in DVII-DS] (BLOCKED)
	[-886-] 	-	----BLANK----
	[-887-] 	-	----BLANK----
	[-888-] 	-	----BLANK----
	[-889-] 	-	----BLANK----
	[-890-] 	-	----BLANK----
	[-891-] 	-	Overall Aeon Point Handling [combines three once seperated scripts]
	[-894-]	-	Sceptre Spinning Mana/MP Check
	[-896-]	-	Increasing the Level of Hellcore Weapons when one is picked up
	[-897-] 	-	Check if to perform Sceptre's downswing alternate attack while falling.
	[-898-] 	-	Returns Sceptre Damage [including w/ berserk/other amplication items]
	[-899-] 	-	Returns Punch Damage (including Gauntlets) [including w/ berserk/other amplication items]
	[-900-]	-	Controls DamageIndicators for Non-Players
	[-913-]	-	Shows Stats for Armor items
	[-986-]	-	Controls Lifebar Displays
	[-988-]	-	Event Linked to call Event 986

NAMED Scripts and their functions:

	{"Initializer"}	-				Exp Table Setup (& Initial Startup Process [added for DVI/DVII-DS])
	{"HUDDisplay"}	-				HUD Display
	{"ClassicDoom2ArmorCheck"}		Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
	{"DV1M04-Music1"}-				***EVENT*** Changes Music for Entering the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS] ***EVENT***
	["MonsterStatsHP_ATK_DEF_SPD"] 	Determines Attack/Defense/Speed Bonuses for Monsters [depending on difficulty level and maps and game mode]
	["GiveStats"]	-				***DEBUG*** Cheat to set stats ("pukename GiveStats [type] [value]")
	{"EXPCheat"}	-				***DEBUG*** Adds EXP equal to the Amount Inputted ("Pukename EXPCheat [number of experience to add] [EXP type] [EXP Increment Type]" in console) ***DEBUG***
	["DoomMonsterDeathEmulation"]	Emulates the various special scripts in Doom 1/2 mode [E1M8, MAP07, etc]
*/


// TODO: Reduce # of Global Vars >________>; [stupid 64 global var limit]

global int 1:Experience;
global int 2:CurrentMana;
global int 3:MaxMana;
global int 4:PlayerLevel;
global int 5:SelectedSpell;
global int 6:ReadiedSpells[];
global int 7:VeryFirstRun;
global int 8:MaxHealthTrue;
global int 9:MaxHealthDoubleTrue;
global int 10:ExperienceNeeded;
global int 11:BaseEXPRequirement;

global int 12:ModType; 
// 0 = "Normal" Doom 1/2
// 1 = Deus Vult
// 2 = Deus Vult 2

global int 13:FinalBossActivated; // DVI-DS Sauravatar
global int 14:FinalBossMaxHealth; // DVI-DS Sauravatar

// Powerup Timers [moved to global to allow timers to transition between levels]
global int 15:PowerupRunning[];
global int 16:PowerupTimer[];

// Hellcore Energy and Heating
global int 17:CurrentHellcoreENG;
global int 18:MaxHellcoreENG;
global int 19:HellcoreOverheatLevel; // Every 1% is times 25 tics [1 tics of time equals 4 units]
global int 20:HellcorePercentFull; // For HUD Displays

global int 21:MiscellaneousVars[]; // ***ARRAY*** For various permenant vars in scripts
// [1] is for checking Flora's Armor Bitfield so it doesn't have to run EVERY tic and lag the game too badly.
// [2] is for checking Levels for level specfic boosts so it doesn't have to run EVERY tic and lag the game too badly.
// [3] is for checking Sceptre Levels so it doesn't have to run EVERY tic and lag the game too badly.
// [4] is for saving health ratio for giving Low or Critical Health Inventory items [for Status Bar Displays and using "Nova" with Flora's Hellcore weapons]
// [5] is the interpolation timer (how many HP count down/up per tic) [8 is the default for a game like Heretic or Hexen]
// [6] is the Fygg Drop Identification number (out of [7])
// [7] is the highest number for the Fygg chance drop
// [8] is for saving the bow proficency level
// [9] is for the category of spells you're using [for revised Spell Selecting]
// [10] is for the subspell within the current category of spells you're using [for revised Spell Selecting]
// [11] is a "casual" timer for the Ruinous Shield, allowing it to slowly uncurse by 1 point every 2 seconds [30% chance of success each interval].
// [12] is for the death time counter, to fade the screen to blackish-red when the player dies.
// [13] is for how far along the regeneration timer is.
// [14] is the base regeneration interval for the character
// [15] is for the Ruinous Shield's "Degeneration" timer
// [16] is the sceptre timer for mana consumption
// [17] is the sceptre timer limit for mana consumption
// [18] is the amount of raw armor points you have
// [19] is number of times Hellcore Death Obituary has Played
// [20] is the timer for the spinning attack [for weapon checks]
// [21] is current Stamina points
// [22] is maximum Stamina points
// [23] is a character's 'Evasion' chance [out of 100.0%]
// [24] is for the menu position for using Aeon Points [0 = No Selection, 1 = Agility, 2 = Defense, 3 = Deftness, 4 = Sorcery, 5 = Strength, 6 = Therapeusis]
// [25] is for the number of unused Aeon Points [extra points to allocate to stats]
// [26] is the Fygg limit [skill dependant]
// [27] is for the number of Fyggs found [limit is skill dependant]
// [28] is for the Seed of Skill limit amount [to be used in more than one script]
// [29] is for the Seed limit amount [to be used in more than one script]
// [30] is for the total number of seeds of types 31-36 carried by your character [to enforce a limit of seeds found in the game to prevent total game breakage]
// [31] is for the number of Seeds of Agility carried by your character [Speed/Jumping Strength]
// [32] is for the number of Seeds of Defense carried by your character [Overall Defense]
// [33] is for the number of Seeds of Deftness carried by your character [EXP Gains]
// [34] is for the number of Seeds of Sorcery carried by your character [Magic Damage]
// [35] is for the number of Seeds of Strength carried by your character [Overall Damage]
// [36] is for the number of Seeds of Therapeusis carried by your character [Magic Defense]
// [37] is for the number of Seeds of Skill carried by your character [will raise a random type [31-36] by one seed level, even if you have reached your seed limit]
// [38] is for the number of Seeds of Life carried by your character [HP Increases]
// [39] is for the number of Seeds of Magic carried by your character [MP Increases]
// [40] is for a seed of deftness EXP multiplier [x.x% format]
// [41] is the previous number of seeds of Agility so it doesn't have to run EVERY tic and lag the game too badly.
// [42] is the previous number of seeds of Defense so it doesn't have to run EVERY tic and lag the game too badly.
// [43] is the previous number of seeds of Deftness so it doesn't have to run EVERY tic and lag the game too badly.
// [44] is the previous number of seeds of Sorcery so it doesn't have to run EVERY tic and lag the game too badly.
// [45] is the previous number of seeds of Strength so it doesn't have to run EVERY tic and lag the game too badly.
// [46] is the previous number of seeds of Therapeusis so it doesn't have to run EVERY tic and lag the game too badly.
	// [47]-[54] are undefined so far :P
// [55] is the Weapon Page number
// [56] is the total number of items so far
// [57] is how many Aeon Points are given from items found so far
// [58] is how many Aeon Points should be given TOTAL from items found so far
// [59] is how many Aeon Points are given from secrets found so far
// [60] is how many Aeon Points should be given TOTAL from secrets found so far
// [61] is how many Aeon Points are given from kills so far
// [62] is how many Aeon Points should be given TOTAL from kills made so far
// [63] is the total number of kills so far
// [64] is the total number of secrets found so far
// [65] is the main storage value for a character's JumpZ height.
// [66] is storage for the level-based multiplier for JumpZ height.
// [67] is storage for the AGLSeed-based multiplier for JumpZ height.
// [68] is storage for bonuses/penalities from armor or other items for JumpZ height.
// [69] is storage for Sceptre for JumpZ height.
// [70] is storage for the Spell# under the "Offense" spell category
// [71] is storage for the Spell# under the "Restorative" spell category
// [72] is storage for the Spell# under the "Status" spell category
// [73] is storage for the Spell# under the "Conjure" spell category
// [74] is storage for a temporary var for helping in-game determination of X-coordinates
// [75] is storage for a temporary var for helping in-game determination of Y-coordinates
// [76] is storage for a temporary var for helping in-game determination of misc elements 1
// [77] is storage for a temporary var for helping in-game determination of misc elements 2
// [78] is storage for a temporary var for helping in-game determination of misc elements 3
// [79] is storage for a temporary var for helping in-game determination of misc elements 4
// [80] is the number of backpacks grabbed.
// [81] is storage for the current Clip maximum. // 1 STRSeed = 5 Bullets, 1 STRLevel = 10 Bullets [need backpacks to maximize use of this] [(Base) + 2560 + 2000 = 4560+]
// [82] is storage for the current Shell maximum. // 1 STRSeed = 2 Shells, 1 STRLevel = 4 Shells [need backpacks to maximize use of this] [(Base) + 1024 + 800 = 1824+]
// [83] is storage for the current Rocket maximum. // 1 STRSeed = 1 Rocket, 1 STRLevel = 2 Rockets [need backpacks to maximize use of this] [(Base) + 512 + 400 = 912+]
// [84] is storage for the current Cell maximum. // 1 STRSeed = 20 Cells, 1 STRLevel = 40 Cells [need backpacks to maximize use of this] [(Base) + 10240 + 8000 = 18240+]
// [85] is storage for the current DiarisArrow maximum. // 1 STRSeed = 3 Arrows, 1 STRLevel = 6 Arrows [need backpacks to maximize use of this] [(Base) + 1536 + 1200 = 2736+]
// [86] is storage for Aeon Points Multiplier [Menu CVar]
// [87] is storage for Seed Multiplier [Menu CVar]
// [88] is storage for SceptreXP Multiplier [Menu CVar]
// [89] is storage for Shield Uncurse Rate [Menu CVar]
// [90] is storage for Base EXP Multiplier [Menu CVar]
// [91] is storage for the ultimate Clip maximum.
// [92] is storage for the ultimate Shell maximum.
// [93] is storage for the ultimate Rocket maximum.
// [94] is storage for the ultimate Cell maximum.
// [95] is storage for the ultimate DiarisArrow maximum.
// [96] is the Current Level of the Imp's Claw
// [97] is the Current Level of the Dark Imp's Claw
// [98] is the Current Level of the Cacodemon's Eye
// [99] is the Current Level of the Cacolantern's Eye
// [100] is the Current Level of the Abaddon's Eye
// [101] is the Current Level of the Hell Knight's Fist
// [102] is the Current Level of the Baron of Hell's Fist
// [103] is the Current Level of the Belphegor's Fist
// [104] is the Current Level of the Bruiser Demon's Fist
// [105] is the Current Level of the Archon of Hell's Fist
// [106] is the Current Level of the Pyro Demon's Fist
// [107] is the Current Level of the Death Incarnate's Skull
// [108] is the Current Level of the Archvile's Hand
// [109] is the Current Level of the Diabloist's Hand
// [110] is the Current Level of the Flying Balrog's Fist
// [111] is the Current Level of the Hades Elemental's Eye [?]
// [112] is the Current Level of the Hades Overlord's Eye [?]
// [113] is the Previous Level of the Imp's Claw
// [114] is the Previous Level of the Dark Imp's Claw
// [115] is the Previous Level of the Cacodemon's Eye
// [116] is the Previous Level of the Cacolantern's Eye
// [117] is the Previous Level of the Abaddon's Eye
// [118] is the Previous Level of the Hell Knight's Fist
// [119] is the Previous Level of the Baron of Hell's Fist
// [120] is the Previous Level of the Belphegor's Fist
// [121] is the Previous Level of the Bruiser Demon's Fist
// [122] is the Previous Level of the Archon of Hell's Fist
// [123] is the Previous Level of the Pyro Demon's Fist
// [124] is the Previous Level of the Death Incarnate's Skull
// [125] is the Previous Level of the Archvile's Hand
// [126] is the Previous Level of the Diabloist's Hand
// [127] is the Previous Level of the Flying Balrog's Fist
// [128] is the Previous Level of the Hades Elemental's Eye [?]
// [129] is the Previous Level of the Hades Overlord's Eye [?]
// [130] is storage for Hellcore Heat Rate [Menu CVar]
// [131] is storage for Hellcore Cool Rate [Menu CVar]
// [132] is the Current Mode for the Bruiser Demon's Fist [0 = Spread Wave, 1 = Larger Fireball, 2 = Ground Wave]
// [133] is the Current Mode for the Archon of Hell's Fist [0 = Three-Shot Spread, 1 = Seven-Shot Spread, 2 = Comet Blast]
// [134] is the Current Mode for the Pyro Demon's Fist [0 = FireShot Wave, 1 = PyroBall, 2 = Firebomb, 3 = Teleport Explosions]
// [135] is the Current Mode for the Diabloist's Hand [0 = Gravity Glare, 1 = Immolation Glare, 2 = Fireblast Volley, 3 = Ground Snakes]
// [136] is storage for EXP Check Runs [Menu CVar]
// [137] is storage for Stamina Regen Rate [Menu CVar]
// [138] is storage for Stamina Regen Rate [Menu CVar]
// [139] is storage for Stamina Regen Rate [Menu CVar]
// [140] is storage for Starting Sceptre Level [Menu CVar]
// [142] is storage for Health Degeneration Mode [Menu CVar]
// [143] is for how far along the degeneration timer is.
// [144] is the base degeneration interval for the character
	// [144+] are undefined so far :P


global int 22:DVIIGameFlags[]; // ***ARRAY***
// [0] = Checks for MAP01 armor item [Safe Tea Shoes]
// [1] = Checks for MAP02 armor item [Pearly Corset]
// [2] = Checks for MAP03 armor item [Water Flying Dress]
// [3] = Checks for MAP04 armor item [Evenstar Necklace]
// [4] = Checks for MAP05 armor item [Cloak of Evasion]
// [5] = Checks for MAP05S armor item [Falcon Knife Earrings]
// [6] = Checks for MAP06 armor item [Anubis Cufflinks]
// [7] = Checks for MAP07 armor item [Kissa's Brassire]
// [8] = Checks for MAP08 armor item [Ruinous Shield/Divine Shield]
// [9] = Checks for MAP09 armor item [Balrog Ring]
// [10] = Checks for MAP10 armor item [Dove's Ribbon]

global int 23:BaseFinalBossHealth; // DVI-DS Sauravatar 
global int 24:FinalBossModerateHealth; // DVI-DS Sauravatar 
global int 25:FinalBossLowHealth; // DVI-DS Sauravatar 

global int 26:MonstersAlive[]; // ***ARRAY*** Array to Replace "MonstersAliveMAPXX" vars.
global int 27:MonstersKilled[]; // ***ARRAY*** Array to Replace "MonstersKilledMAPXX" vars.
global int 28:SecretsFound[]; // ***ARRAY*** Array to Replace "SecretsFoundMAPXX" vars.
// Table Definitions for all Level Held Stat-arrays
// [0] = MAP00 (DVI's Prolouge Level)
// [1] = MAP01 (All Games)
// [2] = MAP02 (All Games)
// [3] = MAP03 (All Games)
// [4] = MAP04 (All Games) // DVI-DS MAP04 (End of Days) & DVII-DS MAP04 (Minas Morgul)
// [5] = MAP05 (All Games) // DVII-DS MAP05 (Eagle's Nest)
// [6] = MAP06 (All Games) // DVII-DS MAP06 (Stargate)
// [7] = MAP07 (All Games) // DVII-DS MAP07 (The Desert Temple)
// [8] = MAP08 (All Games) // DVII-DS MAP08 (The Unholy Cathedral)
// [9] = MAP09 (All Games) // DVII-DS MAP09 (You Shall Not Pass!)
// [10] = MAP10 (All Games) // DVII-DS MAP10 (Hell's Vendetta)
// [11] = MAP11 (All Games) // DVII-DS MAP11 (St. Peter's Gate)
// [12] = MAP12 (All Games) // DVII-DS MAP12 (The Wings of the Maiar)
// [13] = MAP13 (All Games)
// [14] = MAP14 (All Games)
// [15] = MAP15 (All Games)
// [16] = MAP16 (All Games)
// [17] = MAP17 (All Games)
// [18] = MAP18 (All Games)
// [19] = MAP19 (All Games)
// [20] = MAP20 (All Games)
// [21] = MAP21 (All Games)
// [22] = MAP22 (All Games)
// [23] = MAP23 (All Games)
// [24] = MAP24 (All Games)
// [25] = MAP25 (All Games)
// [26] = MAP26 (All Games)
// [27] = MAP27 (All Games)
// [28] = MAP28 (All Games)
// [29] = MAP29 (All Games)
// [30] = MAP30 (All Games)
// [31] = MAP31 (All Games)
// [32] = MAP32 (All Games)
// [33] = MAP05B DVII Only) // DVII-DS MAP05B (The Manliest Level Ever)
// [34] = MAP10B (DVII Only) // DVII-DS MAP10B (AttedneV s'lleH)
// [35] = MAP10C (DVII Only) // DVII-DS MAP10C (attedneV s'lleH: The True End of All Things...)
// [63] = MAP00 (DVII's Prolouge Level)

global int 29:HPInterpolationDisplay;

global int 30:CurrentMaxArmor; // All Games
global int 31:CurrentArmorClass; // All Games
global int 32:GauntletEffectFlash; // All Games

global int 33:CharacterClass; // All Games

global int 34:ClassCheck; // All Games
global int 35:BaseSurvive; // All Games
global int 36:SurvivalWhole; // All Games

// New Vars for DVII-DS and the remade DVI-DS. :P

global int 37:LevelCap; // Applies to all games, however Flora's the only character legally able to extend her level cap from 100 to 200.
global int 38:SpellIDLimit; // Defines the total number of spells allowed for quick var references
global int 39:MaxManaDouble;
global int 40:ItemsFound[];
global int 41:AeonPointStartLevel;
global int 42:StaminaPercent;
global int 43:SavePercent;
global int 44:stepping;
global int 45:EvadeWhole; // All Games
global int 46:ClassicDoomType;
// global int 47:?;
// global int 48:?;
// global int 49:?;
global int 50:GameScriptEvents[]; // ***ARRAY*** Array for Controlling in-game scripts and story events
// [1401] = MAP04, Damage inflicted by Helltoxins in Minas Morgul
// [1402] = MAP04, Damage timer for Helltoxins in Minas Morgul
// [1403] = MAP04, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.

// [1801] = MAP08, Spawns all AmbientSound Actors in places meant to be high off the ground.

global int 51:PlayerJumpHeight;
global int 52:PlayerMass; // for various abilities that make it harder to toss a character around by increasing their mass
global int 53:TwirlTimer;
global int 54:SceptreLevelEXP; // For Determining the level of sceptre capabilities and allows it to grow stronger as it's used (Base level plus 16 more levels).
global int 55:SceptreActualLevel;
global int 56:RuinousShieldPts; // For Determining how many points is needed to turn the Ruinous Shield into the Divine Shield.
global int 57:SceptreEXPFragment; // For whiffing with the staff without hitting enemies to slowly increment exp.

// Vars for Attempting to Interpolate Health on the Previous Tic [for damage/heal displays via ACS]
global int 58:HealthDifferenceTimer;
global int 59:HealthDifference;
global int 60:LastHealthValue;
global int 61:NewHealthValue;
global int 62:RuinousShieldPercent;
global int 63:FloraArmorClass;

// 0 = Normal, 1 = Other

int FirstRun, KillBonusApplied, ItemBonusApplied, SecretBonusApplied;

int ExpTable[201];

str FriendID[16] = {
                    "FZombieMan", "FShotgunGuy", "FDoomImp", "FDemon", "FWolfSS", "FLostSoul", // Weak 0-5
                    "FSpectre", "FChaingunner", "FCaco", "FHellKnight", // Moderate 6-9
                    "FBaron", "FRevenant", "FManc", "FArach", // Strong 10-13
                    "FVile", // Vile 14
                    "FCyber" // Cyberdemon 15
                   };

// Monsters and EXP Tables [Doom + DVI, DVII]
int MonsterTable[94];
str MonsterID[94] = {
                     // Zombiemen types
                     "DSZombieman", "DSStealthZombieman",
                     // Plasma Guy types
                     "PlasmaGuy", "StealthPlasmaGuy",
                     // Repeater Zombie
                     "RepeaterZombie", "StealthRepeaterZombie", 
                     // Karasawa Guy
                     "KarasawaGuy", "StealthKarasawaGuy",
                     // RocketLauncher Guy types
                     "RocketLauncherGuy", "StealthRocketLauncherGuy",

                     // Shotgun Guy
                     "DSShotgunGuy", "DSStealthShotgunGuy", 
                     // Super Shotgun Guy
                     "SuperShotgunGuy", "StealthSuperShotgunGuy", 

                     // Chaingun Guy
                     "DSChaingunGuy", "DSStealthChaingunGuy", 
                     // BFG Guy
                     "BFGGuy", "StealthBFGGuy", 

                     // Imp [normal]
                     "DSDoomImp", "DSStealthDoomImp", 
                     // Dark Imps [Lesser]
                     // "LesserDarkImp", "StealthLesserDarkImp", 
                     // Dark Imps [Normal]
                     "DarkImp", "StealthDarkImp", 
                     // Dark Imps [Greater]
                     // "GreaterDarkImp", "StealthGreaterDarkImp",

                     // Demons/Spectres [normal]
                     "DSDemon", "DSSpectre", "DSStealthDemon", 
                     // Mauler Demon/Spectre [to be added]
                     // "MaulerDemon", "MaulerSpectre", "StealthMaulerDemon"
                     // Blood Demon/Spectre
                     "BloodDemon", "BloodSpectre", "StealthBloodDemon", 
                     // BloodMauler Demon/Spectre [to be added]
                     // "BloodMaulerDemon", "BloodMaulerSpectre", "StealthBloodMaulerDemon"

                     // Wolf SS
                     "DSWolfensteinSS", 

                     // Lost Soul
                     "DSLostSoul", 

                     // Pain Elemental
                     "DSPainElemental", 

                     // Cacodemon
                     "DSCacoDemon", "DSStealthCacoDemon", 
                     // Cacolantern
                     "Cacolantern", "StealthCacolantern", 
                     // Abaddon
                     "Abaddon", "StealthAbaddon", 

                     // Hell Knight
                     "DSHellKnight", "DSStealthHellKnight", 
                     // Baron of Hell
                     "DSBaronofHell", "DSStealthBaron", 
                     // Belphegor
                     "Belphegor", "StealthBelphegor",
                     // Bruiser Demon
                     "BruiserDemon", "StealthBruiserDemon", 
                     // Archon of Hell
                     "ArchonofHell", "StealthArchonofHell", 
                     // Pyro Demon
                     "PyroDemon", "StealthPyroDemon",

                     // Revenant
                     "DSRevenant", "DSStealthRevenant",
                     // Death Incarnate
                     "DeathIncarnate", "StealthDeathIncarnate",

                     // Mancubus
                     "DSFatso", "DSStealthFatso", 
                     // Hectebus
                     "Hectebus", "StealthHectebus", 

                     // Arachnotron
                     "DSArachnotron", "DSStealthArachnotron", 
                     // Rail Arachnotron
                     "DSRailArachnotron", "StealthRailArachnotron",
                     // Fusion Arachnotron
                     "FusionArachnotron", "StealthFusionArachnotron", 

                     // Archvile
                     "DSArchvile", "DSStealthArchvile",
                     // Diabloist
                     "Diabloist", "StealthDiabloist", 

                     // Spider Mastermind
                     "DSSpiderMastermind", "DSStealthSpiderMastermind", 
                     // Spider Demolisher
                     "Demolisher", "StealthDemolisher", 

                     // Cyberdemon
                     "DSCyberdemon", "DSStealthCyberdemon", 
                     // Cyber-Annihilator
                     "Annihilator", "StealthAnnihilator",

                     // Scripted Marine
                     "DSScriptedMarine",

                     // Sauron Eyes
                     "SauronEyeWeak", "SauronEyeStrong1", "SauronEyeStrong2", "SauronEyeMain", 
                     // Sauravatar
                     "Sauravatar",

                     // Hades Sphere [normal]
                     "HadesSphere", "StealthHadesSphere", 
                     // Hades Sphere [Overlord-spawned]
                     "HSOverlord", "StealthHSOverlord",

                     // Flying Balrog
                     "WeakenedFlyingBalrog", "FlyingBalrog", "StealthFlyingBalrog", 

                     // Hell Cleric
                     "HellCleric", "StealthHellCleric", 

                     // Hades Elemental
                     "HadesElemental", "StealthHadesElemental", 

                     // Hades Overlord
                     "HadesOverlord", "StealthHadesOverlord" 
                    };
int MonsterXP[94] = {
                     // Zombieman
                     20, 40,
                     // Plasma Guy
                     50, 100, 
                     // Repeater Zombie
                     100, 200, 
                     // Karasawa Guy
                     150, 300,
                     // RocketLauncher Guy
                     80, 160,

                     // Shotgun Guy	
                     30, 60,
                     // Super Shotgun Guy
                     120, 240, 

                     // Chaingun Guy
                     70, 140, 
                     // BFG Guy
                     200, 400, 

                     // Imp [normal]
                     60, 120, 
                     // Dark Imp [Lesser]
                     // 110, 220, 
                     // Dark Imp [Normal]
                     120, 240, 
                     // Dark Imp [Greater]
                     // 130, 260

                     // Demon/Spectre [normal]
                     150, 150, 300, 
                     // Mauler Demon/Spectre [to be added]
                     // 150, 150, 300, 
                     // Blood Demon/Spectre


                     300, 300, 600, 
                     // BloodMauler Demon/Spectre [to be added]
                     // 300, 300, 600, 

                     // Wolf SS
                     50, 

                     // Lost Soul
                     100, 

                     // Pain Elemental
                     400, 

                     // Cacodemon
                     400, 800, 
                     // Cacolantern
                     800, 1600, 
                     // Abaddon
                     1200, 2400, 

                     // Hell Knight
                     500, 1000, 
                     // Baron of Hell
                     1000, 2000, 
                     // Belphegor
                     1500, 3000,
                     // Bruiser Demon
                     2000, 4000, 
                     // Archon of Hell
                     2000, 4000, 
                     // Pyro Demon
                     5250, 10500,

                     // Revenant
                     300, 600,
                     // Death Incarnate
                     600, 1200,

                     // Mancubus
                     600, 1200, 
                     // Hectebus
                     1200, 2400, 

                     // Arachnotron
                     500, 1000, 
                     // Rail Arachnotron
                     500, 1000,
                     // Fusion Arachnotron
                     1000, 2000, 

                     // Archvile
                     700, 1400,
                     // Diabloist
                     1400, 2800, 

                     // Spider Mastermind
                     3000, 6000, 
                     // Spider Demolisher
                     6000, 12000, 

                     // Cyberdemon
                     4000, 8000, 
                     // Cyber-Annihilator
                     8000, 16000,

                     // Scripted Marine
                     300, 

                     // Sauron Eyes
                     10240, 25600, 25600, 51200, 
                     // Sauravatar
                     864000,

                     // Hades Sphere [normal]
                     35, 70, 
                     // Hades Sphere [Overlord-spawned]
                     35, 70,

                     // Flying Balrog
                     375, 1500, 3000, 

                     // Hell Cleric
                     200, 400,

                     // Hades Elemental
                     1600, 3200, 

                     // Hades Overlord
                     4000, 8000
                     };

//*****************************************
//***Deggaris and Illucia's Spell Tables***
//*****************************************
int SpellsLearned[32] = 
{
 1, 					// +1  (Level 0)
 3, 5, 6, 7, 8,			// +2, +2, +2, +1, +1  (Levels 1-5)
 9, 11, 12, 14, 15,		// +1, +1, +2, +1, +2  (Levels 6-10)
 18, 20, 22, 23, 24, 	// +1, +3, +2, +2, +1  (Levels 11-15)
 26, 27, 29, 30, 33, 	// +1, +2, +1, +2, +1  (Levels 16-20)
 37, 38, 39, 40, 44, 	// +3, +4, +1, +1, +1  (Levels 21-25)
 46, 47, 48, 49, 51, 	// +4, +2, +1, +1, +1  (Levels 26-30)
 53 					// +3  (Levels 31+)
};

int SpellCastTypes[55] = {
                           0, 1, 2, 0, 3,
                           4,10, 0, 5, 0, 
                           6, 0, 0, 0, 1,
                           7, 8, 9, 3, 0,
                           0, 2, 4, 0, 6,
                           7,10, 0,11, 1,
                           2, 0,12, 7, 8,
                           9, 3, 4, 0, 6,
                          11, 0, 0,10, 0,
                           9, 8, 0, 6, 0,
                          13,14,15,16, 6
                          };
int SpellCastStrength[55] = {
                                0,   2,  10,   1,  10,
                               10,   0,   2,   0,   3, 
                                0,   4,   5,   6,   5,
                                0,  10,  10,  30,   7,
                                8,  30,  30,   9,   1,
                                1,   1,  10,   0,  10,
                               60,  11,   0,   2,  30,
                               30,  60,  60,  12,   2,
                                1,  13,  14,   2,  15,
                               60,  60,  16,   3,  17,
                               15,  30,   0,  30,   4
                            };                     
str SpellCategory[4] = {
                         "\cdOffense Magic\c-",		//[0] (23) 0, 3, 6, 7, 9, 11, 12, 13, 15, 19, 20, 23, 25, 26, 27, 31, 33, 38, 41, 42, 43, 44, 49
                         "\cnRestorative Magic\c-",	//[1] (5)  1, 14, 28, 29, 40
                         "\cfStatus Magic\c-",		//[2] (20) 2, 4, 5, 8, 16, 17, 18, 21, 22, 30, 32, 34, 35, 36, 37, 45, 46, 50, 51, 53
                         "\ceConjure Magic\c-"		//[3] (7)  10, 24, 39, 47, 48, 52, 54
                       };
str SpellTable[55] = {                                        //[id] (deg?), (ill?), (flo?)
                      "\cdMinor Magic Missile\c-",	 //[0] O, O, O  [Offense]
                      "\cnMinor Healing\c-", 	 	 //[1] O, O, O  [Restorative]
                      "\cfMinor Night-Vision\c-", 	 //[2] O, O, O  [Status]
                      "\cdChill Touch\c-", 	 	 //[3] O, O, O  [Offense]
                      "\cfMinor Invisibility\c-",	 //[4] O, O, O  [Status]
                      "\cfMinor Flight\c-", 	 	 //[5] O, O, O  [Status]
                      "\cdMinor Poison Cloud\c-", 	 //[6] O, X, O  [Offense]
                      "\cdMinor Fireball\c-", 	 	 //[7] O, O, O  [Offense]
                      "\cfEnhanced Strength\c-", 	 //[8] O, O, O  [Status]
                      "\cdMinor Ice Blast\c-", 		 //[9] O, O, O  [Offense]
                      "\ceSummon Weak Monster\c-", 	 //[10] O, O, O  [Conjure]
                      "\cdMagic Missile\c-", 	 	 //[11] O, O, O  [Offense]
                      "\cdFireball\c-", 		 	 //[12] O, O, O  [Offense]
                      "\cdExplosive Glyph\c-", 		 //[13] O, O, O  [Offense]
                      "\cnHealing\c-",	 	 	 //[14] O, O, O  [Restorative]
                      "\cdFireball Nova\c-", 	 	 //[15] X, O, O  [Offense]
                      "\cfMinor Stealth\c-", 		 //[16] O, O, O  [Status]
                      "\cfMinor Invulnerability\c-", 	 //[17] O, O, O  [Status]
                      "\cfInvisibility\c-", 		 //[18] O, O, O  [Status]
                      "\cdAcid Rain\c-",			 //[19] O, O, O  [Offense]
                      "\cdFreezing Glyph\c-", 		 //[20] X, O, O  [Offense]
                      "\cfNight-Vision\c-",  		 //[21] O, O, O  [Status]
                      "\cfFlight\c-",  		 	 //[22] O, O, O  [Status]
                      "\cdMajor Magic Missile\c-", 	 //[23] X, O, O  [Offense]
                      "\ceSummon Monster\c-", 	 	 //[24] O, O, O  [Conjure]
                      "\cdIcy Nova\c-", 			 //[25] O, O, O  [Offense]
                      "\cdPoison Cloud\c-", 		 //[26] O, X, O  [Offense]
                      "\cdMinor Lightning\c-", 		 //[27] O, O, O  [Offense]
                      "\cnStone Skin\c-", 		 //[28] O, O, X  [Restorative]
                      "\cnMajor Healing\c-",		 //[29] X, O, O  [Restorative]
                      "\cfMajor Night-Vision\c-", 	 //[30] X, O, O  [Status]
                      "\cdIce Blast\c-", 		 //[31] O, O, O  [Offense]
                      "\cfFarsight\c-", 			 //[32] O, O, O  [Status]
                      "\cdLightning Nova\c-", 		 //[33] X, O, O  [Offense]
                      "\cfStealth\c-",		 	 //[34] X, O, O  [Status]
                      "\cfInvulnerability\c-",         //[35] O, O, O  [Status]
                      "\cfMajor Invisibility\c-",      //[36] X, O, O  [Status]
                      "\cfMajor Flight\c-",            //[37] X, O, O  [Status]
                      "\cdLightning\c-",               //[38] O, O, O  [Offense]
                      "\ceSummon Strong Monster\c-",   //[39] O, O, O  [Conjure]
                      "\cnDiamond Skin\c-",            //[40] O, O, X  [Restorative]
                      "\cdMajor Fireball\c-",          //[41] X, O, O  [Offense]
                      "\cdMajor Ice Blast\c-",         //[42] X, O, O  [Offense]
                      "\cdMajor Poison Cloud\c-",      //[43] O, X, O  [Offense]
                      "\cdMajor Lightning\c-",         //[44] X, O, O  [Offense]
                      "\cfMajor Invulnerability\c-",   //[45] X, O, O  [Status]
                      "\cfMajor Stealth\c-",           //[46] X, O, O  [Status]
                      "\ceRaging Spirits\c-",          //[47] O, O, O  [Conjure]
                      "\ceSummon Arch-Vile\c-",        //[48] X, O, O  [Conjure]
                      "\cdUltra Magic Missile\c-",     //[49] X, X, O  [Offense]
                      "\cfTime Freezer\c-",            //[50] X, O, O  [Status]
                      "\cfTerrorization Aura\c-",      //[51] O, X, O  [Status]
                      "\ceCreate Lotso' Ammo\c-",      //[52] O, O, X  [Conjure]
                      "\cfDivine Avatar\c-",            //[53] O, O, O  [Status]
                      "\ceSummon Cyberdemon\c-"        //[54] X, O, O  [Conjure]
                     };
// 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54 = Deggaris Cannot use these Spell IDs in final version
// 6, 25, 26, 43, 49, 51 = Illucia Cannot use these Spell IDs in final version
// 28, 40, 52 = Flora Cannot use these Spell IDs in final version

str SpellDesc[55] =  {
                      "Shoots an aetherbolt that does minimal damage",				// Minor Magic Missile
                      "Heals 2-4 health points up to ",						// Minor Healing
                      "See as if it were daylight for 10 seconds",					// Minor Night Vision
                      "Send a cold chill into whatever you touch",					// Chill Touch
                      "You become hard to see for 10 seconds",					// Minor Invisibility
                      "Leave the forces of gravity behind for 10 seconds",				// Minor Flight
                      "Creates a stationary cloud of poison",					// Minor Poison Cloud
                      "Shoots a fireball that does low damage",					// Minor Fireball
                      "Tear your enemies to shreds with your bare hands",				// Enchanced Strength
                      "Fires a few ice shards", 							// Minor Ice Blast
                      "Summons a weak monster on your side. 25% chance of spawning two.",	// Summon Weak Monster
                      "A more powerful version of the magic missile",				// Magic Missile
                      "A medium-damage fireball",							// Fireball
                      "Creates a bomb that will detonate when an enemy gets too close",		// Explosive Glyph
                      "Heals 4-9 health points up to ",						// Healing
                      "Creates a ring of fireballs",							// Fireball Nova
                      "Monsters cannot see or hear you for 10 seconds",
                      "Monsters cannot damage you for 10 seconds",
                      "Become invisible for slightly longer at 30 seconds",
                      "Summons rain from the ceiling down upon your enemies",
                      "Summons a bomb that will detonate with a freezing blast",
                      "Darkness will be no problem for 30 seconds",
                      "Bend gravity to your will for 30 seconds",
                      "A most powerful magic missile shot",						// Major Magic Missile
                      "Summons a moderately powerful helper. 25% chance of spawning two.",
                      "Emits a ring of ice shards.",
                      "A stationary poison cloud.  This one has a larger radius",
                      "Give your enemies a nasty shock with this spell",
                      "Fortify yourself with 333 armor, 66% protection",
                      "Heals 8-18 health points up to ",
                      "Makes everything bright for a full minute",
                      "Shoots several ice shards",
                      "This spell gives you the ability to see the entire area",
                      "A ring of lightning",
                      "Enemies will not be able to hear or see you for 30 seconds",
                      "Shrug of all damage for 30 seconds",
                      "Become harder to hit for a full minute",
                      "Defy gravity for a full minute",
                      "Shoots three lightning blasts",
                      "Summons a powerful monster to your side. 25% chance of spawning two.",
                      "Fortify yourself with 888 armor, 90% protection",				// Diamond Skin
                      "Shoot a highly damaging fireball",						// Major Fireball
                      "Fires lots of ice shards",							// Major Ice Blast
                      "Fill an entire small room with poison",					// Major Poison Cloud
                      "This shoots a shocking 5 lightning blasts",					// Major Lightning
                      "You cannot be damaged for a full minute",					// Major Invulnerability
                      "Hide from your enemies' senses for a full minute",				// Major Stealth
                      "Summon several angry spirits to tear apart your foes.",			// Raging Spirits
                      "Creates the master demon who will turn slain enemies to your side.",	// Summon Archvile
                      "The most powerful of all Magic Hissile spells.",				// Ultra Magic Missile
                      "Freeze Time for 15 seconds, rendering all but you frozen.",		// Time Freezer
                      "Makes enemies flee from you in terror for 30 seconds.",			// Terror Aura
                      "Creates a lot of ammo for your weapons.",					// Create Lotso Ammo
                      "Grants you access to your fullest potential in combat!",			// Divine Avatar
                      "Creates the ultimate Killing demon to destroy your enemies."		// Summon Cyberdemon
                     };
int SpellCosts[55] = {
                        1,		// Minor Magic Missile
                        5,		// Minor Healing
                        5,		// Minor Night Vision
                        5,		// Chill Touch
                       15,		// Minor Invisibility
                       10,		// Minor Flight
                       15,		// Minor Poison Cloud
                       10,		// Minor Fireball
                       30,		// Enhanced Strength
                       15,		// Minor Ice Blast
                       50,		// Summon Weak Monster
                       20,		// Magic Missile
                       20,		// Fireball
                       30,		// Explosive Glyph
                       15,		// Healing
                       40,		// Fireball Nova
                       50,		// Minor Stealth
                      100,		// Minor Invulnerability
                       75,		// Invisibility
                       25,		// Acid Rain
                       50,		// Freezing Glyph
                       40,		// Night-Vision
                       75,		// Flight
                       50,		// Major Magic Missile
                      125,		// Summon Monster
                      100,		// Poison Nova
                       75,		// Poison Cloud
                       75,		// Minor Lightning
                      100,		// Stone Skin
                       55,		// Major Healing
                      100,		// Major Night-Vision
                       50,		// Ice Blast
                      150,		// Farsight
                      150,		// Lightning Nova
                      150,		// Stealth
                      200,		// Invulnerability
                      150,		// Major Invisibility
                      150,		// Major Flight
                      125,		// Lightning
                      220,		// Summon Strong Monster
                      200,		// Diamond Skin
                       50,		// Major Fireball
                       75,		// Major Ice Blast
                      130,		// Major Poison Cloud
                      175,		// Major Lightning
                      250,		// Major Invulnerability
                      200,		// Major Stealth
                      150,		// Raging Spirits
                      250,		// Summon Archvile
                      160,		// Ultra Magic Missile
                      325,		// Time Freezer
                      225,		// Terror Aura
                      300,		// Create Lotso Ammo
                        0, 	// Divine Avatar [value doesn't matter since it auto-calculates based on max MP]
                      500		// Summon Cyberdemon
                     };

//***********************************
//***Flora's Spell Table [DVII-DS]***
//***********************************
/*

//***********************************************************
// GuideList of Numbers for Flora's Spells [Doomspell-Style]*
//***********************************************************
// TODO later :P
1. Minor Magic Missile (2)
2. Minor Farsight (4)
3. Summon Imp (6)
4. Minor Flight (7)
5. Minor Polymorphosis (9)
6. Magic Missile (10)
7. Summon Pinky (11)
8. Minor Stealth (13)
9. Farsight (14)
10. Enhanced Strength (15)
11. Summon Cacodemon (16)
12. Major Magic Missile (17)
13. Minor Invulnerability (18)
14. Flight (19)
15. Spiritual Exoskin (20)
16. Minor Revenger (22)
17. Summon Hell Noble (23)
18. Major Farsight (24)
19. Minor Charm (24)
20. Stealth (26)
21. Invulnerability (28)
22. Summon Archvile (29)
23. Ultra Magic Missile (30)
24. Polymorphosis (30)
25. Major Flight (32)
26. Summon Cyberdemon (36)
27. Major Stealth (37)
28. Major Invulnerability (39)
29. Greater Spiritual Exoskin (40)
30. Charm (42)
31. Revenger (43)
32. Aura of Anubis (45)
33. Create Ammo (48)
34. Spreader Aura (56)
35. Major Polymorphosis (62)
36. Dyspersion (64)
37. Major Charm (66)
38. Divine Avatar (69)
39. Light Haze Smite (77)
40. Major Revenger (84)
41. Perfected Spiritual Exoskin (92)
42. Shielding of the Larries (132)

//*************************************************************
// GuideList of Numbers for Flora's Spells [DragonQuest-Style]*
//*************************************************************
// TODO later :P
1. MidHeal (1)
2. Appraise (3)
3. KaBuff (11)
4. Dazzle (12)
5. Oomph (13)
6. Snooze (14)
7. Safe Passage (15)
8. Sizzle (16)
9. Tick-Tock (17)
10. Bounce (18)
11. Frizzle (20)
12. Crackle (21)
13. Kasap (22)
14. Thwack (23)
15. KaDazzle (25)
16. Zap (25)
17. Insulatle (26)
18. KaSizzle (27)
19. HighHeal (31)
20. KaFrizzle (33)
21. Tickety-Tockety (34)
22. Kazap (35)
23. KaClang (36)
24. KaBoom (37)
25. AbsMagic (41)
26. Crackle (45)
27. StopSpell (48)
28. MegaHeal (52)
29. DeMagic (63)
30. Kaboomle (66)
31. ?
32. ?
33. ?

// 43 Doomspell-Style Spells
int FloraSpellsLearnedDoomspell[201] = 
{
 // Add Here Later
 0,						// Level 0
 0, 1, 1, 2, 2,			// Levels 1-5
 3, 4, 4, 5, 6,			// Levels 6-10
 7, 7, 8, 9, 10,		// Levels 11-15
 11, 12, 13, 14, 15,	// Levels 16-20
 15, 16, 17, 19, 19,	// Levels 21-25
 20, 20, 21, 22, 24,	// Levels 26-30
 24, 25, 25, 25, 25,	// Levels 31-35
 26, 27, 27, 28, 29,	// Levels 36-40
 29, 30, 31, 31, 32,	// Levels 41-45
 32, 32, 33, 33, 33,	// Levels 46-50
 33, 33, 33, 33, 33,	// Levels 51-55
 34, 34, 34, 34, 34,	// Levels 56-60
 34, 35, 35, 36, 36,	// Levels 61-65
 37, 37, 37, 38, 38,	// Levels 66-70
 38, 38, 38, 38, 38,	// Levels 71-75
 38, 39, 39, 39, 39,	// Levels 76-80
 39, 39, 39, 40, 40,	// Levels 81-85
 40, 40, 40, 40, 40,	// Levels 86-90
 40, 41, 41, 41, 41,	// Levels 91-95
 41, 41, 41, 41, 41,	// Levels 96-100
};

// 33 DragonQuest-Style Spells
int FloraSpellsLearnedDQ5Style[201] = 
{
 // Add Here Later
 0,						// Level 0
 1, 1, 2, 2, 2,			// Levels 1-5
 2, 2, 2, 2, 2,			// Levels 6-10
 3, 4, 5, 6, 7,			// Levels 11-15
 8, 9, 10, 10, 11,		// Levels 16-20
 12, 13, 14, 14, 16,	// Levels 21-25
 17, 18, 18, 18, 18,	// Levels 26-30
 19, 19, 20, 21, 22,	// Levels 31-35
 23, 24, 24, 24, 24,	// Levels 36-40
 25, 25, 25, 25, 26,	// Levels 41-45
 26, 26, 27, 27, 27,	// Levels 46-50
 27, 28, 28, 28, 28,	// Levels 51-55
 28, 28, 28, 28, 28,	// Levels 56-60
 28, 28, 29, 29, 29,	// Levels 61-65
 30, 30, 30, 30, 30,	// Levels 66-70
 30, 30, 30, 30, 30,	// Levels 71-75
 30, 30, 30, 30, 30,	// Levels 76-80
 30, 30, 30, 30, 30,	// Levels 81-85
 30, 30, 30, 30, 30,	// Levels 86-90
 30, 30, 30, 30, 30,	// Levels 91-95
 30, 30, 30, 30, 30,	// Levels 96-100
};


// Doomspell-Style Types
int FloraSpellCastTypesDS[43] = 
{
 // Add Here Later
};
// DragonQuest-Style Types
int FloraSpellCastTypesDQ[33] = 
{
 // Add Here Later
};


// Doomspell-Style Types
int FloraSpellCastStrengthDS[43] = 
{
 // Add Here Later
};
// DragonQuest-Style Types
int FloraSpellCastStrengthDQ[33] = 
{
 // Add Here Later
};

// Doomspell-Style Names
str FloraSpellNameTableDS[43] =
{
 // Add Here Later
};
// DragonQuest-Style Names
str FloraSpellNameTableDQ[33] =
{
 // Add Here Later
};


// Doomspell-Style Descriptions
str FloraSpellDescDS[43] =
{
 // Add Here Later
};
// DragonQuest-Style Descriptions
str FloraSpellDescDQ[33] =
{
 // Add Here Later
};

// Doomspell-Style Spell Costs [Exact Values, not %ages]
int FloraSpellCostsDS[43] =
{
 // Add Here Later
};
// Doomspell-Style Spell Costs [Usually in %ages, not exact values]
int FloraSpellCostsDQ[33] =
{
 0, // No Spell
 5, 3, 6, 4, 6,	// 1-5
 3, 2, 6, 4, 4,	// 6-10
};

*/

//***TO BE ADDED IN THE FUTURE***

//*********************
//*********************
//******FUNCTIONS******
//*********************
//*********************

function int SetInventory (str item, int count) 
{
 int n = count - CheckInventory (item);
 if (n > 0)
  GiveInventory (item, n);
 else if (n < 0)
  TakeInventory (item, -n);

 return n;
}

// This function will place text or a sprite (depending on parameters passed) at the onscreen position of an actor with the specified tid, as long as it's in range (fixed mapunits). 


function void hudmessageonactor(int tid, int range, str sprite, str text)
{
 int dist, ang, vang, pitch, x, y;
 int HUDX = 640;
 int HUDY = 400;
 int offset = 0;

 if(sprite != -1)
 {
  setfont(sprite);
  text = "A";
  offset = 0.1;
 }

 sethudsize(HUDX, HUDY, 1);
 x = getactorx(tid) - getactorx(0);
 y = getactory(tid) - getactory(0); 

 vang = vectorangle(x,y);
 ang = (vang - GetActorAngle(0) + 1.0) % 1.0;

 if(((vang+0.125)%0.5) > 0.25) dist = fixeddiv(y, sin(vang));
 else dist = fixeddiv(x, cos(vang));

 if ((ang < 0.2 || ang > 0.8) && dist < range)
 {
  pitch = vectorangle(dist, getactorz(tid) - (getactorz(0) + 41.0));
  pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;

  x = HUDX/2 - ((HUDX/2) * sin(ang) / cos(ang));
  y = HUDY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

  hudmessage(s:text; HUDMSG_PLAIN, 1, CR_UNTRANSLATED, (x<<16)+offset, (y<<16)+offset, 0);
 }
 else
 hudmessage(s:" "; HUDMSG_PLAIN, 1, CR_UNTRANSLATED, 0, 0, 0);
}

// This Function will be used to check Spell Costs, all wrapped up in one place and easier to edit. :P
function int SpellCostCheck(int checktype)
{
 int SpellIsSelected, FinalSpellCost, GodlyAvatarPercentCost, SpellCostDeclineLevelsNeeded, LevelSpellCostReductionFactor, LvlSpellCostReducePercent, SecretSplCostReduceBonus, Check1, Check2;
 int OriginalSpellCost;

 // G1 = FinalSpellCost
 SpellIsSelected = checktype;

 // G4 = GodlyAvatarPercentCost
 if (SpellIsSelected == 53) // Divine Avatar Costs at most 90% of Mana Supply by Default
 {
  if (GameSkill() == SKILL_VERY_EASY) GodlyAvatarPercentCost = 70;
  else if (GameSkill() == SKILL_EASY) GodlyAvatarPercentCost = 80;
  else if (GameSkill() == SKILL_NORMAL) GodlyAvatarPercentCost = 85;
  else if (GameSkill() == SKILL_HARD) GodlyAvatarPercentCost = 90;
  else if (GameSkill() == SKILL_VERY_HARD) GodlyAvatarPercentCost = 100;

  FinalSpellCost = MaxMana * GodlyAvatarPercentCost / 100;
  OriginalSpellCost = MaxMana * GodlyAvatarPercentCost / 100;
 }
 else
 {
  FinalSpellCost = SpellCosts[SpellIsSelected];
  OriginalSpellCost = SpellCosts[SpellIsSelected];
 }

 // More Coming
 // Determines the number of levels one has to reach at minimum to start seeing spell cost reductions on the specfic spells below.
/*
 if (CharacterClass == 2) // Flora has a different spell list order from the other two characters
 {
 // TODO
 }
 else
 {
 }
*/
  // SpellCostDeclineLevelsNeeded = Number of Levels needed to be gained before the spell begins to decline in cost at every level up
  if (SpellIsSelected == 0) SpellCostDeclineLevelsNeeded = 8; // (Minor Magic Missile) Level 0
  if (SpellIsSelected == 1) SpellCostDeclineLevelsNeeded = 8; // (Minor Healing) Level 0
  if (SpellIsSelected == 2) SpellCostDeclineLevelsNeeded = 9; // (Minor Night Vision) Level 1
  if (SpellIsSelected == 3) SpellCostDeclineLevelsNeeded = 9; // (Chill Touch) Level 1
  if (SpellIsSelected == 4) SpellCostDeclineLevelsNeeded = 10; // (Minor Invisibility) Level 2
  if (SpellIsSelected == 5) SpellCostDeclineLevelsNeeded = 10; // (Minor Flight) Level 2
  if (SpellIsSelected == 6) SpellCostDeclineLevelsNeeded = 11; // (Minor Poison Cloud) Level 3
  if (SpellIsSelected == 7) SpellCostDeclineLevelsNeeded = 12; // (Minor Fireball) Level 4
  if (SpellIsSelected == 8) SpellCostDeclineLevelsNeeded = 13; // (Enhanced Strength) Level 5
  if (SpellIsSelected == 9) SpellCostDeclineLevelsNeeded = 14; // (Minor Ice Blast) Level 6
  if (SpellIsSelected == 10) SpellCostDeclineLevelsNeeded = 15; // (Summon Weak Monster) Level 7
  if (SpellIsSelected == 11) SpellCostDeclineLevelsNeeded = 15; // (Magic Missile) Level 7
  if (SpellIsSelected == 12) SpellCostDeclineLevelsNeeded = 16; // (Fireball) Level 8
  if (SpellIsSelected == 13) SpellCostDeclineLevelsNeeded = 17; // (Explosive Glyph) Level 9
  if (SpellIsSelected == 14) SpellCostDeclineLevelsNeeded = 17; // (Healing) Level 9
  if (SpellIsSelected == 15) SpellCostDeclineLevelsNeeded = 18; // (Fireball Nova) Level 10
  if (SpellIsSelected == 16) SpellCostDeclineLevelsNeeded = 19; // (Minor Stealth) Level 11
  if (SpellIsSelected == 17) SpellCostDeclineLevelsNeeded = 19; // (Minor Invulnerability) Level 11
  if (SpellIsSelected == 18) SpellCostDeclineLevelsNeeded = 19; // (Invisibility) Level 11
  if (SpellIsSelected == 19) SpellCostDeclineLevelsNeeded = 20; // (Acid Rain) Level 12
  if (SpellIsSelected == 20) SpellCostDeclineLevelsNeeded = 20; // (Freezing Glyph) Level 12
  if (SpellIsSelected == 21) SpellCostDeclineLevelsNeeded = 21; // (Night-Vision) Level 13
  if (SpellIsSelected == 22) SpellCostDeclineLevelsNeeded = 21; // (Flight) Level 13
  if (SpellIsSelected == 23) SpellCostDeclineLevelsNeeded = 22; // (Major Magic Missile) Level 14
  if (SpellIsSelected == 24) SpellCostDeclineLevelsNeeded = 23; // (Summon Monster) Level 15
  if (SpellIsSelected == 25) SpellCostDeclineLevelsNeeded = 24; // (Icy Nova) Level 16
  if (SpellIsSelected == 26) SpellCostDeclineLevelsNeeded = 24; // (Poison Cloud) Level 16
  if (SpellIsSelected == 27) SpellCostDeclineLevelsNeeded = 25; // (Minor Lightning) Level 17
  if (SpellIsSelected == 28) SpellCostDeclineLevelsNeeded = 26; // (Stone Skin) Level 18
  if (SpellIsSelected == 29) SpellCostDeclineLevelsNeeded = 26; // (Major Healing) Level 18
  if (SpellIsSelected == 30) SpellCostDeclineLevelsNeeded = 27; // (Major Night-Vision) Level 19
  if (SpellIsSelected == 31) SpellCostDeclineLevelsNeeded = 28; // (Ice Blast) Level 20
  if (SpellIsSelected == 32) SpellCostDeclineLevelsNeeded = 28; // (Farsight) Level 20
  if (SpellIsSelected == 33) SpellCostDeclineLevelsNeeded = 28; // (Lightning Nova) Level 20
  if (SpellIsSelected == 34) SpellCostDeclineLevelsNeeded = 29; // (Stealth) Level 21
  if (SpellIsSelected == 35) SpellCostDeclineLevelsNeeded = 29; // (Invulnerability) Level 21
  if (SpellIsSelected == 36) SpellCostDeclineLevelsNeeded = 29; // (Major Invisibility) Level 21
  if (SpellIsSelected == 37) SpellCostDeclineLevelsNeeded = 29; // (Major Flight) Level 21
  if (SpellIsSelected == 38) SpellCostDeclineLevelsNeeded = 30; // (Lightning) Level 22
  if (SpellIsSelected == 39) SpellCostDeclineLevelsNeeded = 31; // (Summon Strong Monster) Level 23
  if (SpellIsSelected == 40) SpellCostDeclineLevelsNeeded = 32; // (Diamond Skin) Level 24
  if (SpellIsSelected == 41) SpellCostDeclineLevelsNeeded = 33; // (Major Fireball) Level 25
  if (SpellIsSelected == 42) SpellCostDeclineLevelsNeeded = 33; // (Major Ice Blast) Level 25
  if (SpellIsSelected == 43) SpellCostDeclineLevelsNeeded = 33; // (Major Poison Cloud) Level 25
  if (SpellIsSelected == 44) SpellCostDeclineLevelsNeeded = 33; // (Major Lightning) Level 25
  if (SpellIsSelected == 45) SpellCostDeclineLevelsNeeded = 34; // (Major Invulnerability) Level 26
  if (SpellIsSelected == 46) SpellCostDeclineLevelsNeeded = 34; // (Major Stealth) Level 26 
  if (SpellIsSelected == 47) SpellCostDeclineLevelsNeeded = 35; // (Raging Spirits) Level 27
  if (SpellIsSelected == 48) SpellCostDeclineLevelsNeeded = 36; // (Summon Arch-Vile) Level 28
  if (SpellIsSelected == 49) SpellCostDeclineLevelsNeeded = 37; // (Ultra Magic Missile) Level 29
  if (SpellIsSelected == 50) SpellCostDeclineLevelsNeeded = 38; // (Time Freezer) Level 30
  if (SpellIsSelected == 51) SpellCostDeclineLevelsNeeded = 38; // (Terrorization Aura) Level 30
  if (SpellIsSelected == 52) SpellCostDeclineLevelsNeeded = 38; // (Create Lotso Ammo) Level 30
  if (SpellIsSelected == 53) SpellCostDeclineLevelsNeeded = 39; // (Divine Avatar) Level 31
  if (SpellIsSelected == 54) SpellCostDeclineLevelsNeeded = 39; // (Summon Cyberdemon) Level 31

  // Base Spell Cost Reduction Factor [level-based] 
  LevelSpellCostReductionFactor = PlayerLevel - SpellCostDeclineLevelsNeeded;
  if (LevelSpellCostReductionFactor < 0) LevelSpellCostReductionFactor = 0;

  LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 2 / 15; // This is for any class that is not one of the below otherwise ignore this line
  if (CharacterClass == 0) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 1 / 9; // 11.1% [Deggaris]
  else if (CharacterClass == 1) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 1 / 6; // 16.67% [Illucia]
  else if (CharacterClass == 2) LevelSpellCostReductionFactor = LevelSpellCostReductionFactor * 2 / 9; // 22.2% [Flora]

  LvlSpellCostReducePercent = 100;
  LvlSpellCostReducePercent -= LevelSpellCostReductionFactor;
  FinalSpellCost = FinalSpellCost * LvlSpellCostReducePercent / 100;

/*
 if (CharacterClass == 2) // Flora has a different spell list order from the other two characters
 {
 // TODO
 }
 else
 {
 }
*/
  if (SpellIsSelected == 50) // Time Freezer Costs at least 25% of Mana Supply by Default (Deggaris and Illucia Only)
  {
   LevelSpellCostReductionFactor = MaxMana / 4;
   FinalSpellCost += LevelSpellCostReductionFactor;
  }

  // Z1 = SecretSplCostReduceBonus
  // Secret Tally Affects Mana Consumption
  SecretSplCostReduceBonus = 0;
  SecretSplCostReduceBonus += SecretsFound[1];
  SecretSplCostReduceBonus += SecretsFound[2];
  SecretSplCostReduceBonus += SecretsFound[3];
  SecretSplCostReduceBonus += SecretsFound[4];
  SecretSplCostReduceBonus += SecretsFound[5];
  SecretSplCostReduceBonus += SecretsFound[6];
  SecretSplCostReduceBonus += SecretsFound[7];
  SecretSplCostReduceBonus += SecretsFound[8];
  SecretSplCostReduceBonus += SecretsFound[9];
  SecretSplCostReduceBonus += SecretsFound[10];
  SecretSplCostReduceBonus += SecretsFound[11];
  SecretSplCostReduceBonus += SecretsFound[12];
  SecretSplCostReduceBonus += SecretsFound[13];
  SecretSplCostReduceBonus += SecretsFound[14];
  SecretSplCostReduceBonus += SecretsFound[15];
  SecretSplCostReduceBonus += SecretsFound[16];
  SecretSplCostReduceBonus += SecretsFound[17];
  SecretSplCostReduceBonus += SecretsFound[18];
  SecretSplCostReduceBonus += SecretsFound[19];
  SecretSplCostReduceBonus += SecretsFound[20];
  SecretSplCostReduceBonus += SecretsFound[21];
  SecretSplCostReduceBonus += SecretsFound[22];
  SecretSplCostReduceBonus += SecretsFound[23];
  SecretSplCostReduceBonus += SecretsFound[24];
  SecretSplCostReduceBonus += SecretsFound[25];
  SecretSplCostReduceBonus += SecretsFound[26];
  SecretSplCostReduceBonus += SecretsFound[27];
  SecretSplCostReduceBonus += SecretsFound[28];
  SecretSplCostReduceBonus += SecretsFound[29];
  SecretSplCostReduceBonus += SecretsFound[30];
  SecretSplCostReduceBonus += SecretsFound[31];
  SecretSplCostReduceBonus += SecretsFound[32];
  SecretSplCostReduceBonus += SecretsFound[33];
  SecretSplCostReduceBonus += SecretsFound[34];
  SecretSplCostReduceBonus += SecretsFound[35];
  SecretSplCostReduceBonus += SecretsFound[36];
  if (GameSkill() == SKILL_VERY_EASY) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 7 / 30; // 23.33% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_EASY)  SecretSplCostReduceBonus = SecretSplCostReduceBonus * 3 / 15; // 20% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_NORMAL) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 1 / 6; // 16.67% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_HARD) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 2 / 15; // 13.34% of the total secrets found accumulate to the percentage
  if (GameSkill() == SKILL_VERY_HARD) SecretSplCostReduceBonus = SecretSplCostReduceBonus * 3 / 30; // 10% of the total secrets found accumulate to the percentage
  SecretSplCostReduceBonus *= -1; // Inverts the number to a "cost"
  SecretSplCostReduceBonus += 100; // Then adds 100 to it for the actual percentage factor

  if (SecretSplCostReduceBonus > 100) SecretSplCostReduceBonus = 100;
  if (CharacterClass == 2)
  {
   if (SecretSplCostReduceBonus < 50) SecretSplCostReduceBonus = 50; // Flora
  }
  else
  {
   if (SecretSplCostReduceBonus < 63) SecretSplCostReduceBonus = 63; // Deggaris/Illucia
  }
  FinalSpellCost = FinalSpellCost * SecretSplCostReduceBonus / 100;
 

 // Check for having The Ring in you inventory
 if (CheckInventory("TheOneRing") > 0)
 {  
  if (CharacterClass == 2) FinalSpellCost = FinalSpellCost * 13 / 16; // 81.25% MP Cost (Flora is the only one who doesn't have her MP Costs increased by the One Ring)
  else FinalSpellCost = FinalSpellCost * 5 / 4; // 125% MP Cost (Deggaris and Illucia)
 } 
 
 int SpellCostMinimum;

 if (CharacterClass == 2)
 {
  Check1 = 0; // Check1 is an exact value
  Check2 = 100; // Check2 is a % value
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { Check1 += 10; Check2 -= 10; } // Evenstar Necklace [MP reduction of 10 + 10%]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { Check1 += 2; Check2 -= 2; } // Anubis Cufflinks [MP reduction of 2 + 2%]
  if (CheckActorInventory(1001,"BalrogRing") > 0) { Check1 += 5; Check2 -= 5; } // Balrog's Ring [MP reduction of 5 + 5%]

  FinalSpellCost -= Check1;
  FinalSpellCost = FinalSpellCost * Check2 / 100;

  // Ruinous Shield = +34% MP Consumption
  if (CheckActorInventory(1001,"RuinousShield") > 0) FinalSpellCost = FinalSpellCost * 134 / 100;
 }

 if (FinalSpellCost > MaxMana) FinalSpellCost = MaxMana;

 if (GameSkill() == SKILL_VERY_EASY) SpellCostMinimum = OriginalSpellCost * 33 / 100;
 if (GameSkill() == SKILL_EASY) SpellCostMinimum =  OriginalSpellCost * 38 / 100;
 if (GameSkill() == SKILL_NORMAL) SpellCostMinimum =  OriginalSpellCost * 43 / 100;
 if (GameSkill() == SKILL_HARD) SpellCostMinimum =  OriginalSpellCost * 49 / 100;
 if (GameSkill() == SKILL_VERY_HARD) SpellCostMinimum = OriginalSpellCost * 55 / 100;

 if (FinalSpellCost < SpellCostMinimum) FinalSpellCost = SpellCostMinimum;
 if (FinalSpellCost < 1) FinalSpellCost = 1;

 return FinalSpellCost;
}

//*******************
//*******************
//******SCRIPTS******
//*******************
//*******************


//**********************
//***Numbered Scripts***
//**********************

// {-1-} Exp Table Setup

script "Initializer" OPEN
{
 int C1, I1, C2, I2, C3, I3;
 
 if (VeryFirstRun == 0) // Only on the very first tic of a new game, and never on loading of new maps past the first map.
 {
  Thing_ChangeTID(0,1001);
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1200) { ModType = 2; } // DVII-DS "MAP00" (Set To Deus Vult II)
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1100) { ModType = 1; } // DVI-DS "MAP00" // Set To Deus Vult I
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 2000) { ModType = 0; ClassicDoomType = 2; } // "E0M0" // Set To Classic Doom 1 & 2 Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1000) { ModType = 0; ClassicDoomType = 1; } // "E1M0" // Set To Classic Doom 1 Mode
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1050) { ModType = 0; ClassicDoomType = 0; } // "MAP00" // Set To Classic Doom 2 Mode
  else { ModType = 0; ClassicDoomType = 0; } // Set to Normal Doom 1/2 mode
  // PrintBold(d:ModType);
  LevelCap = 200; // KEEP AT THE MAXIMUM AMOUNT FOR LEVELS OVERALL [even if not all characters normally can reach said level]
  SpellIDLimit = 54;
  MaxHealthTrue = 100; // Sets to default Max of 100 to start
  MaxHealthDoubleTrue = MaxHealthTrue * 2;  // Sets to default 2XMax of 200 to start
  MiscellaneousVars[21] = 10000; // Current Stamina Points
  MiscellaneousVars[22] = 10000; // Maximum Stamina Points

  if (GameSkill() == SKILL_VERY_EASY)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 30);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 500);
    SetAmmoCapacity("Shell", 125);
    SetAmmoCapacity("RocketAmmo", 125);
    SetAmmoCapacity("Cell", 750);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_EASY)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 27);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 400);
    SetAmmoCapacity("Shell", 100);
    SetAmmoCapacity("RocketAmmo", 100);
    SetAmmoCapacity("Cell", 600);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_NORMAL)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 24);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 300);
    SetAmmoCapacity("Shell", 75);
    SetAmmoCapacity("RocketAmmo", 75);
    SetAmmoCapacity("Cell", 450);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_HARD)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 21);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 200);
    SetAmmoCapacity("Shell", 50);
    SetAmmoCapacity("RocketAmmo", 50);
    SetAmmoCapacity("Cell", 300);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  if (GameSkill() == SKILL_VERY_HARD)
  {
   SetActivator(1001); // Set to Player's ID
   if (CharacterClass == 2) // Flora cannot wield Doom-equse guns/armor, so ammo and armor is set to zero.
   {
    SetAmmoCapacity("Clip", 0);
    SetAmmoCapacity("Shell", 0);
    SetAmmoCapacity("RocketAmmo", 0);
    SetAmmoCapacity("Cell", 0);
    SetAmmoCapacity("DiarisArrow", 18);
   }
   else // Deggaris and Illucia however use guns and armor perfectly fine.
   {
    SetAmmoCapacity("Clip", 100);
    SetAmmoCapacity("Shell", 25);
    SetAmmoCapacity("RocketAmmo", 25);
    SetAmmoCapacity("Cell", 150);
    SetAmmoCapacity("DiarisArrow", 0);
   }
   SetActivator(0); // Set back to worldly activator
  }
  // Starting Armor

  AeonPointStartLevel = GetCVAR("dvds_aeonstartlvl"); // AeonPointStartLevel = 32;
  MiscellaneousVars[7] = 5120; // Set this for the maximum range of the randomizer for Fygg drops.
  MiscellaneousVars[6] = random(1,MiscellaneousVars[7]);
  VeryFirstRun = 1;
  if (GameSkill() == SKILL_VERY_EASY)
  {
   BaseFinalBossHealth = 111375; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1400; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1400; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1400; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_EASY)
  {
   BaseFinalBossHealth = 141750; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1600; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1600; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1600; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_NORMAL)
  {
   BaseFinalBossHealth = 162000; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 1800; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 1800; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 1800; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_HARD)
  {
   BaseFinalBossHealth = 182250; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 2000; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 2000; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 2000; // Flora's Level 1 (Base) EXP Requirement
  }
  if (GameSkill() == SKILL_VERY_HARD)
  {
   BaseFinalBossHealth = 212625; // Sauravatar [DVI-DS]

   if (CharacterClass == 0) BaseEXPRequirement = 2400; // Deggaris's Level 1 (Base) EXP Requirement
   if (CharacterClass == 1) BaseEXPRequirement = 2400; // Illucia's Level 1 (Base) EXP Requirement
   if (CharacterClass == 2) BaseEXPRequirement = 2400; // Flora's Level 1 (Base) EXP Requirement
  }
  FinalBossMaxHealth = BaseFinalBossHealth;
  MaxMana += random(10,20) + C2; // 5-25 MP
  CurrentMana = MaxMana;
  MaxManaDouble = MaxMana * 2;
 }

 // Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
 for (C1 = 0; C1 < 201; C1++)
 {
  if (C1 == 0) // Level 0 to Level 1 just use the Base Requirement
  {
   ExpTable[C1] = I1 + BaseEXPRequirement;
                 I1 += BaseEXPRequirement;
  }
  else // Level 1+ will use the actual formula :P
  {
   ExpTable[C1] = I1 + ( ( BaseEXPRequirement * (C1 + 1) ) * ( ( (C1 * 3) + 1000) ) / 1000 ) + ( BaseEXPRequirement / 96 );
                 I1 += ( ( BaseEXPRequirement * (C1 + 1) ) * ( ( (C1 * 3) + 1000) ) / 1000 ) + ( BaseEXPRequirement / 96 );
  }
 }
 ExpTable[200] = 2147483646;
 ExpTable[201] = 2147483647;

 for (C1 = 0; C1 < 92; C1 += 10)
 {
  MonsterTable[C1] = ThingCountName(MonsterID[C1],0);
  MonsterTable[C1+1] = ThingCountName(MonsterID[C1+1],0);
  MonsterTable[C1+2] = ThingCountName(MonsterID[C1+2],0);
  MonsterTable[C1+3] = ThingCountName(MonsterID[C1+3],0);
  MonsterTable[C1+4] = ThingCountName(MonsterID[C1+4],0);
  MonsterTable[C1+5] = ThingCountName(MonsterID[C1+5],0);
  MonsterTable[C1+6] = ThingCountName(MonsterID[C1+6],0);
  MonsterTable[C1+7] = ThingCountName(MonsterID[C1+7],0);
  MonsterTable[C1+8] = ThingCountName(MonsterID[C1+8],0);
  MonsterTable[C1+9] = ThingCountName(MonsterID[C1+9],0);
 }
 MiscellaneousVars[1] = 0; // Resets Armor Bitfield Checker to 0
 MiscellaneousVars[2] = 0; // Resets Level Checker to 0
 MiscellaneousVars[3] = 0; // Resets Sceptre Level Checker to 0
 MiscellaneousVars[41] = 0; // Resets Agility Checker to 0
 MiscellaneousVars[42] = 0; // Resets Defense Checker to 0
 MiscellaneousVars[43] = 0; // Resets Deftness Checker to 0
 MiscellaneousVars[44] = 0; // Resets Sorcery Checker to 0
 MiscellaneousVars[45] = 0; // Resets Strength Checker to 0
 MiscellaneousVars[46] = 0; // Resets Therapeusis Checker to 0
 MiscellaneousVars[113] = 0; // Resets Imp Claw Checker to 0
 MiscellaneousVars[114] = 0; // Resets Dark Imp Claw Checker to 0
 MiscellaneousVars[115] = 0; // Resets Cacodemon Eye Checker to 0
 MiscellaneousVars[116] = 0; // Resets Cacolantern Eye Checker to 0
 MiscellaneousVars[117] = 0; // Resets Abaddon Eye Checker to 0
 MiscellaneousVars[118] = 0; // Resets Knight Fist Checker to 0
 MiscellaneousVars[119] = 0; // Resets Baron Fist Checker to 0
 MiscellaneousVars[120] = 0; // Resets Belphegor Fist Checker to 0
 MiscellaneousVars[121] = 0; // Resets Bruiser Fist Checker to 0
 MiscellaneousVars[122] = 0; // Resets Archon Fist Checker to 0
 MiscellaneousVars[123] = 0; // Resets Pyro Fist Checker to 0
 MiscellaneousVars[124] = 0; // Resets Incarnate Skull Checker to 0
 MiscellaneousVars[125] = 0; // Resets Archvile Hand Checker to 0
 MiscellaneousVars[126] = 0; // Resets Diabloist Checker to 0
 MiscellaneousVars[127] = 0; // Resets Flying Balrog Checker to 0
 MiscellaneousVars[128] = 0; // Resets Elemental's Eye Checker to 0
 MiscellaneousVars[129] = 0; // Resets Overlord's Eye Checker to 0

 // PrintBold(d:CurrentArmorClass);
}

// {-2-} HUD Display

script "HUDDisplay" ENTER
{
 int C1, C2, I1, I2, Z1, Z2, G1, G2, G3, G4, HexToInt1, HexToInt2, G5, G8, HealMin, HealMax, HealSorcRatio;
 str S1;
 
 if (VeryFirstRun > 0 && CheckActorInventory(1001,"PlayerDeathFadeOut") < 1 && GetCVAR("dvds_showacshudelements") == 1)
 { 
  SetHudSize(640,480,0);
  // Mana Bar
  for (C1 = 101; C1 > 1; C1 --)
  {
   I1 = fixedmul(fixeddiv(CurrentMana << 16,MaxMana << 16),100.0) >> 16;
   if (C1 - 1 <= I1) SetFont("ManaHF"); else SetFont("ManaHE");
   I2 = C1 << 16;
   HudMessage(s:"A";HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP,C1+3200,cr_untranslated,1.0+I2,32.0,1.0);
  }
  // EXP Bar
  for (C1 = 101; C1 > 1; C1 --)
  {
   I1 = ((Experience - ExpTable[PlayerLevel - 1]) * 100) / (ExpTable[PlayerLevel] - ExpTable[PlayerLevel - 1]);
   if ((C1 - 1 <= I1) || (PlayerLevel == LevelCap)) SetFont("EXPHF"); else SetFont("ManaHE");
   I2 = C1 << 16;
   HudMessage(s:"A";HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP,C1+3302,cr_untranslated,1.0+I2,24.0,1.0);
  }

  // SauronEyeMain [Boss HP Bar]
  G1 = GetActorProperty(1123,APROP_Health);
  if (G1 > 0)
  {
   for (C1 = 257; C1 > 1; C1 --)
   {
    G3 = GetActorProperty(1123,APROP_Health);
    G2 = GetUserVariable(1123,"user_MaxHP"); // Max Health for Boss as set in it's Decorate Entry
    // PrintBold(d:G3,s:" / ",d:G2); 
    if (G2 != 0)
    {
     I1 = G3 * 256 / G2;
   
     if (C1 - 1 <= I1) SetFont("BossHF"); else SetFont("BossHE");
     I2 = C1 << 16;
     HudMessage(s:"A";0,C1+3502,cr_untranslated,192.0+I2,384.0,1.0);

     SetFont("BigFont");
     HudMessage(s:"SAURON'S EYE";0,3501,cr_red,320.0,400.0,1.0);
     SetFont("SmallFont");
     HudMessage(d:G3,s:" / ",d:G2;0,300,cr_red,320.0,376.0,1.0);
    }
   }
  }
  // Sauravatar [Boss HP Bar]
  G1 = GetActorProperty(1124,APROP_Health);
  if (G1 > 0)
  {
   for (C1 = 257; C1 > 1; C1 --)
   {
    G3 = GetActorProperty(1124,APROP_Health);
    G2 = FinalBossMaxHealth; // Max Health for Boss as set in it's Decorate Entry (162000)
    // PrintBold(d:G3,s:" / ",d:G2); 
    if (G2 != 0)
    {
     I1 = G3 * 256 / G2;
   
     if (C1 - 1 <= I1) SetFont("BossHF"); else SetFont("BossHE");
     I2 = C1 << 16;
     HudMessage(s:"A";0,C1+3502,cr_untranslated,192.0+I2,384.0,1.0);

     SetFont("BigFont");
     HudMessage(s:"SAURAVATAR";0,3501,cr_darkgrey,320.0,400.0,1.0);
     SetFont("SmallFont");
     HudMessage(d:G3,s:" / ",d:G2;0,300,cr_darkgrey,320.0,376.0,1.0);
    }
   }
  }

  SetHudSize(640,480,0);
  SetFont("SmallFont");
  if (PlayerLevel >= LevelCap)
  {
   HudMessage(s:"\cdLevel: ",d:PlayerLevel,s:" / ",d:LevelCap,s:"\c-    \cn(",d:Experience,s:" EXP)";HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP,3413,cr_white,120.1,24.0,1.0);
  }
  else
  {
   HudMessage(s:"\cdLevel: ",d:PlayerLevel,s:" / ",d:LevelCap,s:"\c-    \cn(",d:Experience,s:" EXP)    \ca(",d:ExperienceNeeded,s:" Needed)";HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP,3413,cr_white,120.1,24.0,1.0);
  }

  SetFont("SmallFont");
  HudMessage(s:"\c[Purple]Mana: ",d:CurrentMana,s:" / ",d:MaxMana;HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3415,cr_white,120.1,32.0,1.0);

  // Seed Level Displays [#3416 & #3417]
  if (MiscellaneousVars[24] == 0) // No Stat Selected
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  if (MiscellaneousVars[24] == 1) // Selected Agility
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \c[blue]",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  if (MiscellaneousVars[24] == 2) // Selected Defense
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \c[blue]",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  if (MiscellaneousVars[24] == 3) // Selected Deftness
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \c[blue]",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }

  if (MiscellaneousVars[24] == 4) // Selected Sorcery
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \c[blue]",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  if (MiscellaneousVars[24] == 5) // Selected Strength
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \c[blue]",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \cf",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  if (MiscellaneousVars[24] == 6) // Selected Therapeusis
  {
   HudMessage(
         s:"\c[LightBlue]Agility: \cf",d:MiscellaneousVars[31],
           s:"\n\c[Olive]Defense: \cf",d:MiscellaneousVars[32],
           s:"\n\c[Green]Deftness: \cf",d:MiscellaneousVars[33],
             s:"\n\c[Tan]Balance: \cf",d:PlayerMass;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3416,cr_white,120.1,53.0,1.0);
   HudMessage(
            s:"\c[Purple]Sorcery: \cf",d:MiscellaneousVars[34],
             s:"\n\c[Red]Strength: \cf",d:MiscellaneousVars[35],
            s:"\n\c[Gray]Therapeusis: \c[blue]",d:MiscellaneousVars[36],
       s:"\n\c[LightBlue]Jumping: \cf",d:PlayerJumpHeight;
           HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3417,cr_white,248.1,53.0,1.0);
  }
  // DP Display [#3420]
  G5 += 1;
  if (G5 > 11) G5 = 0; // Resets Palette Flasher

  if (MiscellaneousVars[25] > 0 && PlayerLevel >= AeonPointStartLevel)
  {
   if (G5 > 8)
   {
    HudMessage(
    s:"\c[LightBlue]AeonPTS: \cf",d:MiscellaneousVars[25];
    HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3420,cr_white,120.1,16.0,0.1);
   }
   else
   if (G5 > 5 && G5 < 9)
   {
    HudMessage(
    s:"\c[Gray]AeonPTS: \cf",d:MiscellaneousVars[25];
    HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3420,cr_white,120.1,16.0,0.1);
   }
   else
   if (G5 > 2 && G5 < 6)
   {
    HudMessage(
    s:"\c[Green]AeonPTS: \cf",d:MiscellaneousVars[25];
    HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3420,cr_white,120.1,16.0,0.1);
   }
   else
   if (G5 < 3)
   {
    HudMessage(
    s:"\c[Purple]AeonPTS: \cf",d:MiscellaneousVars[25];
    HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP ,3420,cr_white,120.1,16.0,0.1);
   }
  }

  SetHudSize(640,480,0);
  // Function Ran
  G1 = SpellCostCheck(SelectedSpell); // Function testing to come later :P
  // Function Ran

  G4 = CurrentMana / SpellCostCheck(SelectedSpell);
 
  if (CurrentMana >= G1)
  {
   // HudMessage(s:SpellCategory[MiscellaneousVars[9]];0,3442,cr_white,320.0,416.0,1.0);
   HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)   (",d:G4,s:" Uses)";0,3406,cr_white,320.0,432.0,1.0);
  }
  else
  {
   // HudMessage(s:SpellCategory[MiscellaneousVars[9]];0,3442,cr_white,320.0,416.0,1.0);
   HudMessage(s:SpellTable[SelectedSpell],s:"\n(",d:G1,s:" Mana)   (",d:G4,s:" Uses)";0,3406,cr_red,320.0,432.0,1.0);
  }

  if (SelectedSpell == 1) // Minor Healing
  {
   // Min
   HealMin = 2; HealMin += (PlayerLevel / 6);
   if (PlayerLevel > 29) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 59) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 89) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 119) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 149) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 179) HealMin = HealMin * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMin = HealMin * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMin = HealMin * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMin = HealMin * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMin = HealMin * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMin = HealMin * 5 / 2;
   if (CharacterClass == 2) HealMin = HealMin * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMin *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMin = (HealMin * HealSorcRatio) / 100;

   // Max
   HealMax = 4; HealMax += (PlayerLevel / 6);
   if (PlayerLevel > 29) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 59) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 89) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 119) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 149) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 179) HealMax = HealMax * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMax = HealMax * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMax = HealMax * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMax = HealMax * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMax = HealMax * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMax = HealMax * 5 / 2;
   if (CharacterClass == 2) HealMax = HealMax * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMax *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMax = (HealMax * HealSorcRatio) / 100;
 
   HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthTrue;0,3407,cr_gold,320.0,456.0,1.0);
  }
  else if (SelectedSpell == 14) // Healing
  {
   // Min
   HealMin = 5; HealMin += (PlayerLevel / 5);
   if (PlayerLevel > 29) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 59) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 89) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 119) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 149) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 179) HealMin = HealMin * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMin = HealMin * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMin = HealMin * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMin = HealMin * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMin = HealMin * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMin = HealMin * 5 / 2;
   if (CharacterClass == 2) HealMin = HealMin * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMin *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMin = (HealMin * HealSorcRatio) / 100;

   // Max
   HealMax = 9; HealMax += (PlayerLevel / 5);
   if (PlayerLevel > 29) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 59) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 89) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 119) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 149) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 179) HealMax = HealMax * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMax = HealMax * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMax = HealMax * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMax = HealMax * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMax = HealMax * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMax = HealMax * 5 / 2;
   if (CharacterClass == 2) HealMax = HealMax * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMax *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMax = (HealMax * HealSorcRatio) / 100;

   HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthTrue;0,3407,cr_gold,320.0,456.0,1.0);
  }
  else if (SelectedSpell == 29) // Major Healing
  {
   // Min
   HealMin = 11; HealMin += (PlayerLevel / 4);
   if (PlayerLevel > 29) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 59) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 89) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 119) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 149) HealMin = HealMin * 11 / 10;
   if (PlayerLevel > 179) HealMin = HealMin * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMin = HealMin * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMin = HealMin * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMin = HealMin * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMin = HealMin * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMin = HealMin * 5 / 2;
   if (CharacterClass == 2) HealMin = HealMin * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMin *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMin = (HealMin * HealSorcRatio) / 100;

   // Max
   HealMax = 19; HealMax += (PlayerLevel / 4);
   if (PlayerLevel > 29) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 59) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 89) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 119) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 149) HealMax = HealMax * 11 / 10;
   if (PlayerLevel > 179) HealMax = HealMax * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) HealMax = HealMax * 9 / 8;
   if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) HealMax = HealMax * 9 / 8; // Deggaris w/ Gauntlets
   if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) HealMax = HealMax * 9 / 8; // Illucia w/ Gauntlets
   if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) HealMax = HealMax * 9 / 8; // Flora w/ Gauntlets
   if (CheckInventory("TheOneRing") > 0) HealMax = HealMax * 5 / 2;
   if (CharacterClass == 2) HealMax = HealMax * 3 / 2; // Flora in use
   if (PowerupRunning[7] == 1) HealMax *= 4; // Divine Avatar
 
   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) HealSorcRatio = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) HealSorcRatio = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) HealSorcRatio = (MiscellaneousVars[34] * 100) / 150;
   HealSorcRatio += 100;
   HealMax = (HealMax * HealSorcRatio) / 100;
 
   HudMessage(s:"Heals ",d:HealMin,s:"-",d:HealMax,s:" health points up to ",d:MaxHealthDoubleTrue;0,3407,cr_gold,320.0,456.0,1.0);
  }
  else
  {
   HudMessage(s:SpellDesc[SelectedSpell];0,3407,cr_gold,320.0,456.0,1.0);
  }

  SetHudSize(640,480,0);
  // Spell Bind Displays
  for (C1 = 0; C1 < 5; C1 ++)
  {
   if (ReadiedSpells[C1] != 0)
   {
    // Function Ran
    G8 = SpellCostCheck(ReadiedSpells[C1] - 1); // Function testing to come later :P
    // Function Ran
 
    G4 = CurrentMana / SpellCostCheck(ReadiedSpells[C1] - 1);
 
    if (CurrentMana >= G8)
    {
     HudMessage(d:C1+1,s:": ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,3408+C1,cr_white,640.2,200.0+FixedMul(C1 << 16,10.0),1.0);
    }
    else
    {
     HudMessage(d:C1+1,s:": ",s:SpellTable[ReadiedSpells[C1] - 1],s:" (",d:G8,s:") [",d:G4,s:"]";0,3408+C1,cr_red,640.2,200.0+FixedMul(C1 << 16,10.0),1.0);
    }
   }
   else
   {
    HudMessage(d:C1+1,s:": Empty";0,3408+C1,cr_white,640.2,200.0+FixedMul(C1 << 16,10.0),1.0);
   }
  }

  SetHudSize(0,0,0);
 }

 SetHudSize(0,0,0);

 Delay(1);
 Restart;
}

// {-3-} Mana Regeneration

script 803 ENTER
{
 int C1, I1, C2, I2, RegenedMana, G2, ManaReDelay, ExtraManaRegen, G4, DoveManaTimer, G5, MaxRegenableMana, EquippedRegenCap, SkillLevelManaDelay, OverallDelay;

 if (FirstRun == 0)
 {
  FirstRun = 1;
  Thing_ChangeTID(0,1001);
 }

 // Mana Regen Delay
 if (GameSkill() == SKILL_VERY_EASY) SkillLevelManaDelay = 30;
 if (GameSkill() == SKILL_EASY) SkillLevelManaDelay = 33;
 if (GameSkill() == SKILL_NORMAL) SkillLevelManaDelay = 37;
 if (GameSkill() == SKILL_HARD) SkillLevelManaDelay = 42;
 if (GameSkill() == SKILL_VERY_HARD) SkillLevelManaDelay = 48;
 if (CharacterClass == 0) SkillLevelManaDelay += random(-3,5);
 if (CharacterClass == 1) SkillLevelManaDelay += random(-4,4);
 if (CharacterClass == 2) SkillLevelManaDelay += random(-5,3);

 if (CharacterClass == 0) ManaReDelay = PlayerLevel / 30; // Deggaris (up to 3/6)
 else if (CharacterClass == 1) ManaReDelay = PlayerLevel / 25; // Illucia (up to 4/8)
 else if (CharacterClass == 2) ManaReDelay = PlayerLevel / 20; // Flora (up to 5/10) 
 OverallDelay = SkillLevelManaDelay - ManaReDelay;

 // A combined total of 30 points of Sorcery/Theraphesuis are needed for a tic-point of faster regen time.
 ManaReDelay = (MiscellaneousVars[34] + MiscellaneousVars[36]) / 30;
 OverallDelay -= ManaReDelay;

 if (GameSkill() == SKILL_VERY_EASY) if (OverallDelay < 1) OverallDelay = 1;
 if (GameSkill() == SKILL_EASY) if (OverallDelay < 2) OverallDelay = 2;
 if (GameSkill() == SKILL_NORMAL) if (OverallDelay < 4) OverallDelay = 4;
 if (GameSkill() == SKILL_HARD) if (OverallDelay < 7) OverallDelay = 7;
 if (GameSkill() == SKILL_VERY_HARD) if (OverallDelay < 11) OverallDelay = 11;

 if (OverallDelay < 1) OverallDelay = 1;
 Delay(OverallDelay);


 if (CurrentMana < MaxMana)
 {
  C2 = GetActorProperty(1001,APROP_HEALTH);
  if (C2 > 0)
  {
   if (GameSkill() == SKILL_VERY_EASY) RegenedMana = 3;
   if (GameSkill() == SKILL_EASY) RegenedMana = 3;
   if (GameSkill() == SKILL_NORMAL) RegenedMana = 2;
   if (GameSkill() == SKILL_HARD) RegenedMana = 2;
   if (GameSkill() == SKILL_VERY_HARD) RegenedMana = 1;

   // A combined total of 10 points of Sorcery/Theraphesuis are needed for an extra point of MP regen.
   RegenedMana += ((MiscellaneousVars[34] + MiscellaneousVars[36]) / 10);

  }
  if (PowerupRunning[7] == 1) // Divine Avatar
  {
   ExtraManaRegen = PlayerLevel / 7;
   RegenedMana += ExtraManaRegen;
   if (random(0,100) < 26)
   {
    RegenedMana = RegenedMana * 5 / 4;
   }
   else
   {
    if (random(0,100) < 51)
    {
     RegenedMana = RegenedMana * 9 / 8;
    }
   }
  }
  else
  {
   ExtraManaRegen = PlayerLevel / 20;
   RegenedMana += ExtraManaRegen;
   if (random(0,100) < 26)
   {
    RegenedMana = RegenedMana * 17 / 16;
   }
   else
   {
    if (random(0,100) < 51)
    {
     RegenedMana = RegenedMana * 33 / 32;
    }
   }
  }

  // Character-Based regen factors
  if (CharacterClass == 0) RegenedMana = RegenedMana * random(13,15) / 16; // Deggaris (81.25%-93.75%)
  if (CharacterClass == 1) RegenedMana = RegenedMana * random(18,20) / 16; // Illucia (112.5%-125%)
  if (CharacterClass == 2) RegenedMana = RegenedMana * random(23,25) / 16; // Flora (143.75%-156.25%)

  // Sauron's Helmet
  if (CharacterClass == 0 && CheckInventory("SauronHelmet") > 0) RegenedMana = RegenedMana * 11 / 8; // Deggaris w/ Helmet (137.5%)
  if (CharacterClass == 1 && CheckInventory("SauronHelmet") > 0) RegenedMana = RegenedMana * 10 / 8; // Illucia w/ Helmet (125%)
  if (CharacterClass == 2 && CheckInventory("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
  // Sauron's Gauntlets
  if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) RegenedMana = RegenedMana * 5 / 4; // Deggaris w/ Gauntlets (125%)
  if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) RegenedMana = RegenedMana * 5 / 4; // Illucia w/ Gauntlets (125%)
  if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) RegenedMana = RegenedMana * 5 / 4; // Flora w/ Gauntlets (125%)
  // The One Ring
  if (CharacterClass == 0 && CheckInventory("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Deggaris w/ Ring (62.5%)
  if (CharacterClass == 1 && CheckInventory("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Illucia w/ Ring (75%)
  if (CharacterClass == 2 && CheckInventory("TheOneRing") > 0) RegenedMana = RegenedMana * 7 / 8; // Flora w/ Ring (87.5%)

  // Ruinous Shield - quarters MP regeneration
  if (CharacterClass == 2 && CheckInventory("RuinousShield") > 0) RegenedMana = RegenedMana * 1 / 4; // (25%)

  // Checks Mana Regen Rate Menu Option
  RegenedMana = RegenedMana * MiscellaneousVars[139] / 100;

  if (RegenedMana < 1) RegenedMana = 1;

  // New Addition = Caps Maximum Mana Regeneration to a certain amount based on Difficulty and armor-type items.
  MaxRegenableMana = MaxMana * 50 / 100;
  if (GameSkill() == SKILL_VERY_EASY) MaxRegenableMana = MaxMana * 61 / 100; 	// (61% of Max)
  if (GameSkill() == SKILL_EASY) MaxRegenableMana = MaxMana * 55 / 100; 		// (55% of Max)
  if (GameSkill() == SKILL_NORMAL) MaxRegenableMana = MaxMana * 50 / 100; 		// (50% of Max)
  if (GameSkill() == SKILL_HARD) MaxRegenableMana = MaxMana * 45 / 100; 		// (45% of Max)
  if (GameSkill() == SKILL_VERY_HARD) MaxRegenableMana = MaxMana * 39 / 100; 	// (39% of Max)

  EquippedRegenCap = 100; // in percent
  // All-Character Specfic Items
  if (CheckActorInventory(1001,"SauronHelmet") > 0) EquippedRegenCap -= 25;  // (-25% extension if Sauron's Helmet is equipped)
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
  if (CheckActorInventory(1001,"TheOneRing") > 0) EquippedRegenCap += 50;  // (+50% extension if The One Ring is equipped)

  // Marine Specfic Items (between -4% and -16%, since only one can be equipped at once
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) EquippedRegenCap -= 4; // (-4% for Green Armor)
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) EquippedRegenCap -= 8; // (-8% for Blue Armor)
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) EquippedRegenCap -= 10; // (-10% for Stone Armor 1)
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) EquippedRegenCap -= 14; // (-14% for Diamond Armor 1)
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) EquippedRegenCap -= 12; // (-12% for Stone Armor 2)
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) EquippedRegenCap -= 16; // (-16% for Diamond Armor 2)

  // Flora Specfic Items (up to +150%)
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) EquippedRegenCap += 25;  // (+25% extension if Evenstar Necklace is equipped)
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) EquippedRegenCap += 62;  // (+62% extension if Anubis Cufflinks are equipped)
  if (CheckActorInventory(1001,"KissaBra") > 0) EquippedRegenCap += 38; // (+38% extension if Kissa's Armor Brassiere is equipped)
  if (CheckActorInventory(1001,"BalrogRing") > 0) EquippedRegenCap += 25; // (+25% extension if Balrog's Ring is equipped)

  if (EquippedRegenCap < 20) EquippedRegenCap = 20;
  if (EquippedRegenCap > 640) EquippedRegenCap = 640;
  MaxRegenableMana = MaxRegenableMana * EquippedRegenCap / 100;

  // Caps Mana Regeneration to a certain % of the maximum based on difficulty level
  if (RegenedMana > MaxRegenableMana) RegenedMana = MaxRegenableMana;

  // Dove's Ribbon [Increases MP Regeneration]
  if (CharacterClass == 2)
  {
   if (CheckActorInventory(1001,"DoveRibbon") > 0)
   {
    RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (100% Chance of Extra 2-4 Mana)
    if (random(1,3) == 2) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (33.3% Chance of extra 2-4 Mana)
    if (random(1,9) == 5) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (11.1% Chance of extra 2-4 Mana)
    if (random(1,27) == 14) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (3.7037% Chance of extra 2-4 Mana)
    if (random(1,81) == 41) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (1.2345% Chance of extra 2-4 Mana)
    if (random(1,243) == 122) RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (0.0411% Chance of extra 2-4 Mana)
   }
  }

  // Prevents 0 MP regeneration periods
  if (RegenedMana < 1) RegenedMana = 1;

  // The actual Regeneration Part
  if (GetActorProperty(1001,APROP_HEALTH) > 0 && CurrentMana < MaxMana)
  {
   CurrentMana += RegenedMana;

   SetHudSize(640,480,0);
   HudMessage(s:"+",d:RegenedMana,s:" Mana";0,3419,cr_blue,51.0,42.0,0.75);
   SetHudSize(0,0,0);

   if (CurrentMana > MaxMana) CurrentMana = MaxMana;
  }
  if (CharacterClass == 2) // Flora can have up to 200% MP
  {
   MaxManaDouble = MaxMana * 2;
   if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
  }
  else if (CharacterClass == 1) // Illucia can have up to 166.7% MP
  {
   MaxManaDouble = MaxMana * 5 / 3;
   if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
  }
  else // Deggaris will only go up to 133.3% MP.
  { 
   MaxManaDouble = MaxMana * 4 / 3;
   if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
  }
 }

 // Gets Values for Accquired Kills & Secrets
 if (ModType == 0) // Clasic Doom 1/2
 {
  G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
  MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
  MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
  SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
  ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
  //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
 }
 if (ModType == 1) // Deus Vult 1 only
 {
  if (FinalBossActivated != 1)
  {
   G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
   if (G2 >= 1100 && G2 <= 1199)
   {
    MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
    ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
    //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
   }
  }
 }
 if (ModType == 2) // Deus Vult 2 only
 {
  G2 = GetLevelInfo(LEVELINFO_LEVELNUM);
  if (G2 >= 1200 && G2 <= 1299)
  {
   MonstersAlive[G2] = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) - GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
   MonstersKilled[G2] = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
   SecretsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
   ItemsFound[G2] = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
   //PrintBold(s:"MAP: ",d:G2,s:"\n Alive: ",d:MonstersAlive[G2],s:"\n Dead: ",d:MonstersKilled[G2],s:"\n Secrets: ",d:SecretsFound[G2],s:"\n Items: ",d:ItemsFound[G2]);
  }
 }
 Restart;
}

//---------------------------------------------
// FUNCTION: Get Experience for Each EXP Check
//---------------------------------------------
function int GetExperience (int RealExpGain, int ExpMultiFactor)
{
 RealExpGain = RealExpGain * ExpMultiFactor / 100; // Randomizes some of the experience gained
 RealExpGain = RealExpGain * (48 + MiscellaneousVars[40]) / 48; // Get # of Deftness state
 RealExpGain = RealExpGain * MiscellaneousVars[90] / 100; // EXP Multiplier Option
 if (GameSkill() == SKILL_VERY_EASY) RealExpGain = RealExpGain * 25 / 8; // 312.5%
 else if (GameSkill() == SKILL_EASY) RealExpGain = RealExpGain * 5 / 2; // 250%
 else if (GameSkill() == SKILL_NORMAL) RealExpGain = RealExpGain * 15 / 8; // 187.5%
 else if (GameSkill() == SKILL_HARD) RealExpGain = RealExpGain * 5 / 4; // 125%
 else if (GameSkill() == SKILL_VERY_HARD) RealExpGain = RealExpGain * 7 / 8; // 87.5%

 if (CharacterClass == 2) // Only Flora can Equip the Pearly Corset [+30% EXP Bonus (or a 5% chance for a +45% bonus)]
 {
  if (CheckActorInventory(1001,"PearlyCorset")) { if (random(1,100) < 6) { RealExpGain = RealExpGain * 145 / 100; } else { RealExpGain = RealExpGain * 130 / 100; } }
 }
 if (PowerupRunning[7] == 1) { if (random(1,100) > 67) { RealExpGain = RealExpGain * 4 / 3; } else { RealExpGain = RealExpGain * 7 / 6; } } // Divine Avatar [+16.67% EXP, (33% chance of +33.33% EXP instead]

 return RealExpGain;
}

// {-4-} Experience Adding [TODO: thing sorting needs to be sped up a lot >____>;]

script 804 ENTER
{
 int C1, I1, Exp1, Exp2, ExpMultiFactor, RealExpGain, SecretExpMulti;
 int MonIndChe1, MonIndChe2, MonIndChe3, MonIndChe4, MonIndChe5;
 int MonIndChe6, MonIndChe7, MonIndChe8, MonIndChe9, MonIndChe10;
 int MonIndChe11, MonIndChe12, MonIndChe13, MonIndChe14, MonIndChe15;
 int MonIndChe16;

 MiscellaneousVars[136] = GetCVar("dvds_expcheckruns");

 // C1 is the base entry being analyzed by the code for accumalating monsterIDs. It adds up to 16 additional indexes based from C1 + various amounts. The more used the more process power used. 4 is what I used here.
 for (C1 = 0; C1 < 92; C1 += 4) // for (C1 = 0; C1 < 22; C1 += 4)
 {
  if (MiscellaneousVars[136] >= 1) MonIndChe1 = ThingCountName(MonsterID[C1+0],0) - ThingCountName(MonsterID[C1+0],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 2) MonIndChe2 = ThingCountName(MonsterID[C1+1],0) - ThingCountName(MonsterID[C1+1],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 3) MonIndChe3 = ThingCountName(MonsterID[C1+2],0) - ThingCountName(MonsterID[C1+2],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 4) MonIndChe4 = ThingCountName(MonsterID[C1+3],0) - ThingCountName(MonsterID[C1+3],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 5) MonIndChe5 = ThingCountName(MonsterID[C1+4],0) - ThingCountName(MonsterID[C1+4],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 6) MonIndChe6 = ThingCountName(MonsterID[C1+5],0) - ThingCountName(MonsterID[C1+5],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 7) MonIndChe7 = ThingCountName(MonsterID[C1+6],0) - ThingCountName(MonsterID[C1+6],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 8) MonIndChe8 = ThingCountName(MonsterID[C1+7],0) - ThingCountName(MonsterID[C1+7],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 9) MonIndChe9 = ThingCountName(MonsterID[C1+8],0) - ThingCountName(MonsterID[C1+8],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 10) MonIndChe10 = ThingCountName(MonsterID[C1+9],0) - ThingCountName(MonsterID[C1+9],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 11) MonIndChe11 = ThingCountName(MonsterID[C1+10],0) - ThingCountName(MonsterID[C1+10],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 12) MonIndChe12 = ThingCountName(MonsterID[C1+11],0) - ThingCountName(MonsterID[C1+11],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 13) MonIndChe13 = ThingCountName(MonsterID[C1+12],0) - ThingCountName(MonsterID[C1+12],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 14) MonIndChe14 = ThingCountName(MonsterID[C1+13],0) - ThingCountName(MonsterID[C1+13],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 15) MonIndChe15 = ThingCountName(MonsterID[C1+14],0) - ThingCountName(MonsterID[C1+14],1000); // don't count friendlies
  if (MiscellaneousVars[136] >= 16) MonIndChe16 = ThingCountName(MonsterID[C1+15],0) - ThingCountName(MonsterID[C1+15],1000); // don't count friendlies

  // Gets the Experience Multiplication Factor [Part 1]
  ExpMultiFactor = (Random (90, 120));
  if (CharacterClass == 2) // Flora has more options due to her 200 Max Level cap [although slightly more spread out]
  {
   if (PlayerLevel < 40) ExpMultiFactor += PlayerLevel * 17 / 16; // +6.25%
   else
   {
    if (PlayerLevel < 80) ExpMultiFactor += PlayerLevel * 9 / 8; // +12.5%
    else
    {
     if (PlayerLevel < 120) ExpMultiFactor += PlayerLevel * 5 / 4; // +25%
     else
     {
      if (PlayerLevel < 160) ExpMultiFactor += PlayerLevel * 3 / 2; // +50%
      else ExpMultiFactor += PlayerLevel * 2; // +100%
     }
    }
   }
  }
  else // Deggaris and Illucia
  {
   if (PlayerLevel < 30) ExpMultiFactor += PlayerLevel * 17 / 16; // +6.25% 
   else
   {
    if (PlayerLevel < 60) ExpMultiFactor += PlayerLevel * 9 / 8; // +12.5%
    else
    {
     if (PlayerLevel < 90) ExpMultiFactor += PlayerLevel * 5 / 4; // +25%
     else ExpMultiFactor += PlayerLevel * 3 / 2; // +50%
    }
   }
  }

  // Gets the Experience Multiplication Factor [Part 2]
  Exp1 = GetLevelInfo(LEVELINFO_LEVELNUM);
  if (ModType == 0) // Classic Doom 1/2
  {
   if (ClassicDoomType == 1) // Classic Doom 1
   {
    if (Exp1 == 1000) Exp2 = 0; // E1M0 [Classic Doom 1]
    // Episode 1
    if (Exp1 == 1) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M1]
    if (Exp1 == 2) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M2]
    if (Exp1 == 3) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M3]
    if (Exp1 == 9) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M9]
    if (Exp1 == 4) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M4]
    if (Exp1 == 5) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M5]
    if (Exp1 == 6) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M6]
    if (Exp1 == 7) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M7]
    if (Exp1 == 8) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E1M8]
    // Episode 2
    if (Exp1 == 11) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M1]
    if (Exp1 == 12) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M2]
    if (Exp1 == 13) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M3]
    if (Exp1 == 14) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M4]
    if (Exp1 == 15) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M5]
    if (Exp1 == 16) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M6]
    if (Exp1 == 17) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M7]
    if (Exp1 == 18) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M8]
    if (Exp1 == 19) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E2M9]
    // Episode 3
    if (Exp1 == 21) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M1]
    if (Exp1 == 22) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M2]
    if (Exp1 == 23) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M3]
    if (Exp1 == 24) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M4]
    if (Exp1 == 25) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M5]
    if (Exp1 == 26) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M6]
    if (Exp1 == 27) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M7]
    if (Exp1 == 28) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M8]
    if (Exp1 == 29) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E3M9]
    // Episode 4
    if (Exp1 == 31) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M1]
    if (Exp1 == 32) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M2]
    if (Exp1 == 33) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M3]
    if (Exp1 == 34) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M4]
    if (Exp1 == 35) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M5]
    if (Exp1 == 36) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M6]
    if (Exp1 == 37) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M7]
    if (Exp1 == 38) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M8]
    if (Exp1 == 39) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [E4M9]

          if (Exp1 == 9) Exp2 = Exp2 * 15 / 4; // [375%]
    else if (Exp1 == 19) Exp2 = Exp2 * 5;      // [500%]
    else if (Exp1 == 29) Exp2 = Exp2 * 25 / 4; // [625%]
    else if (Exp1 == 39) Exp2 = Exp2 * 15 / 2; // [750%]
                    else Exp2 = Exp2 * 5 / 2;  // [250%]
   }
   else // Classic Doom 2
   {
    if (Exp1 == 1050) Exp2 = 0; // MAP00 [Classic Doom 2]
    // Main Game
    if (Exp1 == 1) Exp2 = Exp1 * 1000 / 1000; // Monster Bonus [100%] [MAP01]
    if (Exp1 == 2) Exp2 = Exp1 * 10125 / 10000; // Monster Bonus [101.25%] [MAP02]
    if (Exp1 == 3) Exp2 = Exp1 * 1025 / 1000; // Monster Bonus [102.5%] [MAP03]
    if (Exp1 == 4) Exp2 = Exp1 * 10375 / 10000; // Monster Bonus [103.75%] [MAP04]
    if (Exp1 == 5) Exp2 = Exp1 * 1050 / 1000; // Monster Bonus [105%] [MAP05]

    if (Exp1 == 6) Exp2 = Exp1 * 1069 / 1000; // Monster Bonus [106.9%] [MAP06]
    if (Exp1 == 7) Exp2 = Exp1 * 1088 / 1000; // Monster Bonus [108.8%] [MAP07]
    if (Exp1 == 8) Exp2 = Exp1 * 1107 / 1000; // Monster Bonus [110.7%] [MAP08]
    if (Exp1 == 9) Exp2 = Exp1 * 1125 / 1000; // Monster Bonus [112.5%] [MAP09]
    if (Exp1 == 10) Exp2 = Exp1 * 1144 / 1000; // Monster Bonus [114.4%] [MAP10]

    if (Exp1 == 11) Exp2 = Exp1 * 1169 / 1000; // Monster Bonus [116.9%] [MAP11]
    if (Exp1 == 12) Exp2 = Exp1 * 1194 / 1000; // Monster Bonus [119.4%] [MAP12]
    if (Exp1 == 13) Exp2 = Exp1 * 1219 / 1000; // Monster Bonus [121.9%] [MAP13]
    if (Exp1 == 14) Exp2 = Exp1 * 1244 / 1000; // Monster Bonus [124.4%] [MAP14]
    if (Exp1 == 15) Exp2 = Exp1 * 1269 / 1000; // Monster Bonus [126.9%] [MAP15]

    if (Exp1 == 31) Exp2 = Exp1 * 1519 / 1000; // Monster Bonus [151.9%] [MAP31]
    if (Exp1 == 32) Exp2 = Exp1 * 2019 / 1000; // Monster Bonus [201.9%] [MAP32]

    if (Exp1 == 16) Exp2 = Exp1 * 1300 / 1000; // Monster Bonus [130.0%] [MAP16]
    if (Exp1 == 17) Exp2 = Exp1 * 1331 / 1000; // Monster Bonus [133.1%] [MAP17]
    if (Exp1 == 18) Exp2 = Exp1 * 1363 / 1000; // Monster Bonus [136.3%] [MAP18]
    if (Exp1 == 19) Exp2 = Exp1 * 1394 / 1000; // Monster Bonus [139.4%] [MAP19]
    if (Exp1 == 20) Exp2 = Exp1 * 1425 / 1000; // Monster Bonus [142.5%] [MAP20]

    if (Exp1 == 21) Exp2 = Exp1 * 1475 / 1000; // Monster Bonus [147.5%] [MAP21]
    if (Exp1 == 22) Exp2 = Exp1 * 1525 / 1000; // Monster Bonus [152.5%] [MAP22]
    if (Exp1 == 23) Exp2 = Exp1 * 1575 / 1000; // Monster Bonus [157.5%] [MAP23]
    if (Exp1 == 24) Exp2 = Exp1 * 1625 / 1000; // Monster Bonus [162.5%] [MAP24]
    if (Exp1 == 25) Exp2 = Exp1 * 1675 / 1000; // Monster Bonus [167.5%] [MAP25]

    if (Exp1 == 26) Exp2 = Exp1 * 1743 / 1000; // Monster Bonus [174.3%] [MAP26]
    if (Exp1 == 27) Exp2 = Exp1 * 1819 / 1000; // Monster Bonus [181.9%] [MAP27]
    if (Exp1 == 28) Exp2 = Exp1 * 1900 / 1000; // Monster Bonus [190.0%] [MAP28]
    if (Exp1 == 29) Exp2 = Exp1 * 1998 / 1000; // Monster Bonus [189.0%] [MAP29]
    if (Exp1 == 30) Exp2 = Exp1 * 2688 / 1000; // Monster Bonus [268.8%] [MAP30]
    //PrintBold(d:Exp2);

         if (Exp1 == 31) Exp2 = Exp2 * 5; // [500%]
    else if (Exp1 == 32) Exp2 = Exp2 * 15 / 2; // [750%]
                    else Exp2 = Exp2 * 5 / 2; // [250%]
    //PrintBold(d:Exp2);
   }
  }
  else
  if (ModType == 1) // Deus Vult 1
  {
   if (Exp1 == 1100) Exp2 = (Exp1 - 1100) * 26 / 25; // +4% Exp Bonus // DV1M00
   if (Exp1 == 1101) Exp2 = (Exp1 - 1100) * 100 / 100; // Monster Bonus [100%]
   if (Exp1 == 1102) Exp2 = (Exp1 - 1100) * 110 / 100; // Monster Bonus [110%]
   if (Exp1 == 1103) Exp2 = (Exp1 - 1100) * 122 / 100; // Monster Bonus [122%]
   if (Exp1 == 1104) Exp2 = (Exp1 - 1100) * 146 / 100; // Monster Bonus [146%]

        if (Exp1 == 31) Exp2 = Exp2 * 5 / 2; // [250%]
   else if (Exp1 == 32) Exp2 = Exp2 * 15 / 4; // [375%]
                   else Exp2 = Exp2 * 5 / 4; // [125%]
  }
  else
  if (ModType == 2) // Deus Vult 2
  {
   // Zendaria Levels
   if (Exp1 == 1200) Exp2 = (Exp1 - 1200) * 26 / 25; // +4% Exp Bonus // Prolouge - The Mysterious Cave
   // Earth-type Levels
   if (Exp1 == 1201) Exp2 = (Exp1 - 1200) * 100 / 100; // Monster Bonus // MAP01 - Entryway Pass
   if (Exp1 == 1202) Exp2 = (Exp1 - 1200) * 103 / 100; // Monster Bonus // MAP02 - Mutagen
   if (Exp1 == 1203) Exp2 = (Exp1 - 1200) * 106 / 100; // Monster Bonus // MAP03 - Crouching Demon, Hidden Archvile
   if (Exp1 == 1204) Exp2 = (Exp1 - 1200) * 110 / 100; // Monster Bonus // MAP04 - Minas Morgul
   if (Exp1 == 1205) Exp2 = (Exp1 - 1200) * 113 / 100; // Monster Bonus // MAP05 - Eagle's Nest
   if (Exp1 == 1206) Exp2 = (Exp1 - 1200) * 117 / 100; // Monster Bonus // MAP05B - The Manliest Level Ever
   if (Exp1 == 1207) Exp2 = (Exp1 - 1200) * 121 / 100; // Monster Bonus // MAP06 - Stargate
   if (Exp1 == 1208) Exp2 = (Exp1 - 1200) * 125 / 100; // Monster Bonus // MAP07 - The Desert Temple
   // Hell Levels
   if (Exp1 == 1209) Exp2 = (Exp1 - 1200) * 139 / 100; // Monster Bonus // MAP08 - The Unholy Cathedral
   if (Exp1 == 1210) Exp2 = (Exp1 - 1200) * 155 / 100; // Monster Bonus // MAP09 - You Shall Not Pass!
   if (Exp1 == 1211) Exp2 = (Exp1 - 1200) * 174 / 100; // Monster Bonus // MAP10 - Hell's Vendetta
   if (Exp1 == 1212) Exp2 = (Exp1 - 1200) * 196 / 100; // Monster Bonus // MAP10B - attedneV s'lleH
   // Extra Levels
   if (Exp1 == 1213) Exp2 = 0; // NO Exp Bonus since it's Heaven, foo. :P // MAP11 - St. Peter's Gate
   if (Exp1 == 1214) Exp2 = (Exp1 - 1200) * 120 / 100; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
   if (Exp1 == 1215) Exp2 = (Exp1 - 1200) * 196 / 100; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
   // Ending Levels
   if (Exp1 == 1216) Exp2 = 0; // NO Exp Bonus in ending levels // MAP13 - The Return Home
   if (Exp1 == 1217) Exp2 = 0; // NO Exp Bonus in ending levels // ENDMAP - Credits and Cast


        if (Exp1 == 31) Exp2 = Exp2 * 5 / 2; // [250%]
   else if (Exp1 == 32) Exp2 = Exp2 * 15 / 4; // [375%]
                   else Exp2 = Exp2 * 5 / 4; // [125%]
  }

  ExpMultiFactor += Exp2;
  // PrintBold(s:"ModType: ",d:ModType,s:"\nExp1: ",d:Exp1,s:"\nExp2: ",d:Exp2,s:"\nExpMultiFactor: ",d:ExpMultiFactor);

  SetHudSize(640,480,0);
  if (PlayerLevel < LevelCap)
  {
   // Check #1
   if (MiscellaneousVars[136] >= 1 && MonIndChe1 < MonsterTable[C1+0])
   {
    RealExpGain = (MonsterXP[C1+0] * (MonsterTable[C1+0] - MonIndChe1));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+0] = MonIndChe1;
   }

   // Check #2
   if (MiscellaneousVars[136] >= 2 && MonIndChe2 < MonsterTable[C1+1])
   {
    RealExpGain = (MonsterXP[C1+1] * (MonsterTable[C1+1] - MonIndChe2));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+1] = MonIndChe2;
   }

   // Check #3
   if (MiscellaneousVars[136] >= 3 && MonIndChe3 < MonsterTable[C1+2])
   {
    RealExpGain = (MonsterXP[C1+2] * (MonsterTable[C1+2] - MonIndChe3));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+2] = MonIndChe3;
   }

   // Check #4
   if (MiscellaneousVars[136] >= 4 && MonIndChe4 < MonsterTable[C1+3])
   {
    RealExpGain = (MonsterXP[C1+3] * (MonsterTable[C1+3] - MonIndChe4));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+3] = MonIndChe4;
   }

   // Check #5
   if (MiscellaneousVars[136] >= 5 && MonIndChe5 < MonsterTable[C1+4])
   {
    RealExpGain = (MonsterXP[C1+4] * (MonsterTable[C1+4] - MonIndChe5));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+4] = MonIndChe5;
   }

   // Check #6
   if (MiscellaneousVars[136] >= 6 && MonIndChe6 < MonsterTable[C1+5])
   {
    RealExpGain = (MonsterXP[C1+5] * (MonsterTable[C1+5] - MonIndChe6));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+5] = MonIndChe6;
   }

   // Check #7
   if (MiscellaneousVars[136] >= 7 && MonIndChe7 < MonsterTable[C1+6])
   {
    RealExpGain = (MonsterXP[C1+6] * (MonsterTable[C1+6] - MonIndChe7));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+6] = MonIndChe7;
   }

   // Check #8
   if (MiscellaneousVars[136] >= 8 && MonIndChe8 < MonsterTable[C1+7])
   {
    RealExpGain = (MonsterXP[C1+7] * (MonsterTable[C1+7] - MonIndChe8));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+7] = MonIndChe8;
   }

   // Check #9
   if (MiscellaneousVars[136] >= 9 && MonIndChe9 < MonsterTable[C1+8])
   {
    RealExpGain = (MonsterXP[C1+8] * (MonsterTable[C1+8] - MonIndChe9));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+8] = MonIndChe9;
   }

   // Check #10
   if (MiscellaneousVars[136] >= 10 && MonIndChe10 < MonsterTable[C1+9])
   {
    RealExpGain = (MonsterXP[C1+9] * (MonsterTable[C1+9] - MonIndChe10));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+9] = MonIndChe10;
   }

   // Check #11
   if (MiscellaneousVars[136] >= 11 && MonIndChe11 < MonsterTable[C1+10])
   {
    RealExpGain = (MonsterXP[C1+10] * (MonsterTable[C1+10] - MonIndChe11));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+10] = MonIndChe11;
   }

   // Check #12
   if (MiscellaneousVars[136] >= 12 && MonIndChe12 < MonsterTable[C1+11])
   {
    RealExpGain = (MonsterXP[C1+11] * (MonsterTable[C1+11] - MonIndChe12));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+11] = MonIndChe12;
   }

   // Check #13
   if (MiscellaneousVars[136] >= 13 && MonIndChe13 < MonsterTable[C1+12])
   {
    RealExpGain = (MonsterXP[C1+12] * (MonsterTable[C1+12] - MonIndChe13));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+12] = MonIndChe13;
   }

   // Check #14
   if (MiscellaneousVars[136] >= 14 && MonIndChe14 < MonsterTable[C1+13])
   {
    RealExpGain = (MonsterXP[C1+13] * (MonsterTable[C1+13] - MonIndChe14));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+13] = MonIndChe14;
   }

   // Check #15
   if (MiscellaneousVars[136] >= 15 && MonIndChe15 < MonsterTable[C1+14])
   {
    RealExpGain = (MonsterXP[C1+14] * (MonsterTable[C1+14] - MonIndChe15));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+14] = MonIndChe15;
   }

   // Check #16
   if (MiscellaneousVars[136] >= 16 && MonIndChe16 < MonsterTable[C1+15])
   {
    RealExpGain = (MonsterXP[C1+15] * (MonsterTable[C1+15] - MonIndChe16));
    RealExpGain = GetExperience(RealExpGain,ExpMultiFactor);

    if (GetActorProperty(1001,APROP_HEALTH) > 0) { Experience += RealExpGain; HudMessage(s:"+",d:RealExpGain,s:" EXP";0,3418,cr_gold,51.0,11.0,1.5); }
    MonsterTable[C1+15] = MonIndChe16;
   }

  }
  SetHudSize(0,0,0);


  if (MiscellaneousVars[136] >= 1) { if (MonIndChe1 > MonsterTable[C1+0]) MonsterTable[C1+0] = MonIndChe1; }
  if (MiscellaneousVars[136] >= 2) { if (MonIndChe2 > MonsterTable[C1+1]) MonsterTable[C1+1] = MonIndChe2; }
  if (MiscellaneousVars[136] >= 3) { if (MonIndChe3 > MonsterTable[C1+2]) MonsterTable[C1+2] = MonIndChe3; }
  if (MiscellaneousVars[136] >= 4) { if (MonIndChe4 > MonsterTable[C1+3]) MonsterTable[C1+3] = MonIndChe4; }
  if (MiscellaneousVars[136] >= 5) { if (MonIndChe5 > MonsterTable[C1+4]) MonsterTable[C1+4] = MonIndChe5; }
  if (MiscellaneousVars[136] >= 6) { if (MonIndChe6 > MonsterTable[C1+5]) MonsterTable[C1+5] = MonIndChe6; }
  if (MiscellaneousVars[136] >= 7) { if (MonIndChe7 > MonsterTable[C1+6]) MonsterTable[C1+6] = MonIndChe7; }
  if (MiscellaneousVars[136] >= 8) { if (MonIndChe8 > MonsterTable[C1+7]) MonsterTable[C1+7] = MonIndChe8; }
  if (MiscellaneousVars[136] >= 9) { if (MonIndChe9 > MonsterTable[C1+8]) MonsterTable[C1+8] = MonIndChe9; }
  if (MiscellaneousVars[136] >= 10) { if (MonIndChe10 > MonsterTable[C1+9]) MonsterTable[C1+9] = MonIndChe10; }
  if (MiscellaneousVars[136] >= 11) { if (MonIndChe11 > MonsterTable[C1+10]) MonsterTable[C1+10] = MonIndChe11; }
  if (MiscellaneousVars[136] >= 12) { if (MonIndChe12 > MonsterTable[C1+11]) MonsterTable[C1+11] = MonIndChe12; }
  if (MiscellaneousVars[136] >= 13) { if (MonIndChe13 > MonsterTable[C1+12]) MonsterTable[C1+12] = MonIndChe13; }
  if (MiscellaneousVars[136] >= 14) { if (MonIndChe14 > MonsterTable[C1+13]) MonsterTable[C1+13] = MonIndChe14; }
  if (MiscellaneousVars[136] >= 15) { if (MonIndChe15 > MonsterTable[C1+14]) MonsterTable[C1+14] = MonIndChe15; }
  if (MiscellaneousVars[136] >= 16) { if (MonIndChe16 > MonsterTable[C1+15]) MonsterTable[C1+15] = MonIndChe16; }

  // Moved Exp Bonus Script to Script 884 [below]
  // Moved Levelup Script to Script 884 [below]
  Delay(1);
 }
 Restart;
}

// Seperated Levelup Code
script 884 ENTER // (void)
{
 int C1, I1, C2, I2, Z1, Z2, G1, G2, G3, Exp1, Exp2, ExpMultiFactor, RealExpGain, SecretExpMulti, HPBoost, MPBoost, MapCheck, RandomizedStatChance, RandomizedStatChance2;

  //*******************
  //** LEVEL UP CODE **
  //*******************
  ExperienceNeeded = ExpTable[PlayerLevel] - Experience;
  if (Experience >= ExpTable[PlayerLevel])
  {   
   if (PlayerLevel < LevelCap)
   { 
    PlayerLevel += 1;

    //*********************
    //*Aeon Point Increase*
    //*********************
    // MiscellaneousVars[25] = Aeon Points
    if (PlayerLevel != 0) G1 = PlayerLevel % 20;
    if (G1 == 0)
    {
     if (PlayerLevel > 100)
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 8; else MiscellaneousVars[25] += 5;
      if (random(1,100) < 26) MiscellaneousVars[25] += random(3,5);
     }
     else
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 5; else MiscellaneousVars[25] += 3;
      if (random(1,100) < 26) MiscellaneousVars[25] += random(1,3);
     }
    }
    else
    if (G1 == 4)
    {
     if (PlayerLevel > 100)
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(1,2);
     }
     else
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(0,1);
     }
    }
    else
    if (G1 == 8)
    {
     if (PlayerLevel > 100)
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(1,2);
     }
     else
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(0,1);
     }
    }
    else
    if (G1 == 12)
    {
     if (PlayerLevel > 100)
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(1,2);
     }
     else
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(0,1);
     }
    }
    else
    if (G1 == 16)
    {
     if (PlayerLevel > 100)
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(1,2);
     }
     else
     {
      if (random(1,100) < 16) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
      if (random(1,100) < 6) MiscellaneousVars[25] += random(0,1);
     }
    }
    else
    {
     if (PlayerLevel > 100)
     {
      if (random(1,3) != 3)
      {
       if (random(1,100) < 16) MiscellaneousVars[25] += 3; else MiscellaneousVars[25] += 2;
      }
     }
     else
     {
      if (random(1,3) == 1)
      {
       if (random(1,100) < 16) MiscellaneousVars[25] += 2; else MiscellaneousVars[25] += 1;
      }
     }
    }

    int LevelAddMaxMana = 0;
    //***************
    //*Mana Increase*
    //***************
    if (GameSkill() == SKILL_VERY_EASY)
    {    
     LevelAddMaxMana = Random(5,10);
     Z1 = PlayerLevel / 6;
    }
    else if (GameSkill() == SKILL_EASY)
    {
     LevelAddMaxMana = Random(4,8);
     Z1 = PlayerLevel / 7;
    }
    else if (GameSkill() == SKILL_NORMAL)
    {
     LevelAddMaxMana = Random(3,6);
     Z1 = PlayerLevel / 8;
    }
    else if (GameSkill() == SKILL_HARD)
    {
     LevelAddMaxMana = Random(2,4);
     Z1 = PlayerLevel / 9;
    }
    else if (GameSkill() == SKILL_VERY_HARD)
    {
     LevelAddMaxMana = Random(1,2);
     Z1 = PlayerLevel / 10;
    }
    LevelAddMaxMana += Z1;
    LevelAddMaxMana += random(6,9);

    if (CharacterClass == 0) // Deggaris [MP Gain / Level]
    {
     G3 = random(12,14); // 75%-87.5%
     LevelAddMaxMana = LevelAddMaxMana * G3 / 16;
    }
    if (CharacterClass == 1) // Illucia [MP Gain / Level]
    {
     G3 = random(18,20); // 112.5%-125%
     LevelAddMaxMana = LevelAddMaxMana * G3 / 16;
    }
    if (CharacterClass == 2) // Flora [MP Gain / Level]
    {
     G3 = random(22,28); // 137.5%-175%
     LevelAddMaxMana = LevelAddMaxMana * G3 / 16;
    }

    // Overall Modifier
    LevelAddMaxMana = LevelAddMaxMana * 75 / 100;

    if (LevelAddMaxMana < 1) LevelAddMaxMana = 1;

    MaxMana += LevelAddMaxMana;
    CurrentMana += LevelAddMaxMana;
    MaxManaDouble = MaxMana * 2;

    int LevelAddMaxHP = 0;
    //*************
    //*HP Increase*
    //*************
    Z2 = (Random(1,3));
    if (GameSkill() == SKILL_VERY_EASY) Z2 += 2;
    if (GameSkill() == SKILL_EASY) Z2 += 1;
    if (GameSkill() == SKILL_NORMAL) Z2 += 0;
    if (GameSkill() == SKILL_HARD) Z2 += -1;
    if (GameSkill() == SKILL_VERY_HARD) Z2 += -2;
    if (CharacterClass == 0) Z2 += random(3,4); // + 2-9 HP
    if (CharacterClass == 1) Z2 += random(2,3); // + 1-8 HP
    if (CharacterClass == 2) Z2 += random(1,2); // + 0-7 HP

    LevelAddMaxHP += Z2;

    if (GameSkill() == SKILL_VERY_EASY) Z1 = PlayerLevel * 7 / 20; 		// 35%
    else if (GameSkill() == SKILL_EASY) Z1 = PlayerLevel * 3 / 10; 		// 30%
    else if (GameSkill() == SKILL_NORMAL) Z1 = PlayerLevel / 4; 		// 25%
    else if (GameSkill() == SKILL_HARD) Z1 = PlayerLevel / 5; 		// 20%
    else if (GameSkill() == SKILL_VERY_HARD) Z1 = PlayerLevel * 3 / 20; 	// 15%
    if (PlayerLevel > 29) Z1 = Z1 * 21 / 20; 		// *105%
    if (PlayerLevel > 59) Z1 = Z1 * 109 / 100; 		// *109%
    if (PlayerLevel > 89) Z1 = Z1 * 113 / 100; 		// *113%
    if (PlayerLevel > 119) Z1 = Z1 * 117 / 100; 	// *117%
    if (PlayerLevel > 149) Z1 = Z1 * 121 / 100; 	// *121%
    if (PlayerLevel > 179) Z1 = Z1 * 5 / 4; 		// *125%

    LevelAddMaxHP += Z1;
    if (CharacterClass == 0) // Deggaris [HP Gain / Level]
    {
     // *112.5%-125%
     G3 = random(18,20);
     LevelAddMaxHP = LevelAddMaxHP * G3 / 16;
    }
    if (CharacterClass == 1) // Illucia [HP Gain / Level]
    {
     // *75%-87.5%
     G3 = random(12,14);
     LevelAddMaxHP = LevelAddMaxHP * G3 / 16;
    }
    if (CharacterClass == 2) // Flora [HP Gain / Level]
    {
     // *43.75%-68.75%
     G3 = random(7,11);
     LevelAddMaxHP = LevelAddMaxHP * G3 / 16;
    }

    // Overall Modifier
    LevelAddMaxHP = LevelAddMaxHP * 75 / 100; // *75%

    // Give The HP to the player
    if (LevelAddMaxHP < 1) LevelAddMaxHP = 1;
    I2 = GetActorProperty(1001,APROP_HEALTH);
    GiveInventory("UpgradeStamina", LevelAddMaxHP);
    SetActorProperty(1001,APROP_HEALTH,(I2+LevelAddMaxHP));
    MaxHealthTrue += LevelAddMaxHP;
    MaxHealthDoubleTrue = MaxHealthTrue * 2;
    SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);

    // 16:25 (1-100) [64] + 20:25 (101-200) [80] = [Max of 144 (or -75%)]
    RandomizedStatChance = 192;
    Z1 = 0;
    Z1 = PlayerLevel * 16 / 25;
    if (Z1 < 0) Z1 = 0; if (Z1 > 64) Z1 = 64;
    G3 = 0;
    if (PlayerLevel > 100)
    {
     G3 = (PlayerLevel - 100) * 20 / 25;
     if (G3 < 0) G3 = 0; if (G3 > 80) G3 = 80;
    }

    G2 = 0;
    G2 += Z1; // Adds [level 1-100] range value
    G2 += G3; // Adds [level 101-200] range value
    RandomizedStatChance -= G2;
    if (CheckInventory("TheOneRing") > 0) RandomizedStatChance = RandomizedStatChance * 3 / 4;
    if (RandomizedStatChance < 1) RandomizedStatChance = 1;

    RandomizedStatChance2 = 24;
    if (PlayerLevel > 25) RandomizedStatChance2 = 23;
    if (PlayerLevel > 50) RandomizedStatChance2 = 22;
    if (PlayerLevel > 75) RandomizedStatChance2 = 21;
    if (PlayerLevel > 100) RandomizedStatChance2 = 20;
    if (PlayerLevel > 125) RandomizedStatChance2 = 18;
    if (PlayerLevel > 150) RandomizedStatChance2 = 16;
    if (PlayerLevel > 175) RandomizedStatChance2 = 14;
    //********************************
    //*Random Levelups to Seed Values*
    //********************************

    if (CharacterClass == 0) // Deggaris (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 24) MiscellaneousVars[31] += Z2; // Agility
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 42) MiscellaneousVars[32] += Z2; // Defense
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[33] += Z2; // Deftness
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[34] += Z2; // Sorcery
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 36) MiscellaneousVars[35] += Z2; // Strength
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[36] += Z2; // Therapeusis
    }
    if (CharacterClass == 1) // Illucia (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[31] += Z2; // Agility
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[32] += Z2; // Defense
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 30) MiscellaneousVars[33] += Z2; // Deftness
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 36) MiscellaneousVars[34] += Z2; // Sorcery
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 24) MiscellaneousVars[35] += Z2; // Strength
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 42) MiscellaneousVars[36] += Z2; // Therapeusis
    }
    if (CharacterClass == 2) // Flora (192pts) (0 left)
    {
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 37) MiscellaneousVars[31] += Z2; // Agility
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 16) MiscellaneousVars[32] += Z2; // Defense
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 33) MiscellaneousVars[33] += Z2; // Deftness
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 45) MiscellaneousVars[34] += Z2; // Sorcery
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 23) MiscellaneousVars[35] += Z2; // Strength
     if (random(1,RandomizedStatChance2) == RandomizedStatChance2) { Z2 = 2; } else { Z2 = 1; } 
     if (random(1,RandomizedStatChance) <= 38) MiscellaneousVars[36] += Z2; // Therapeusis
    }

    if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
    if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
    if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
    if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
    if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
    if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;

    if (CharacterClass == 2) ActivatorSound("FloraLeveledUp",127); // Flora
    else if (CharacterClass == 1) ActivatorSound("IlluciaLeveledUp",127); // Illucia
    else if (CharacterClass == 0) ActivatorSound("DeggarisLeveledUp",127); // Deggaris
    else ActivatorSound("misc/spawn",127); 

    SetHudSize(640,480,0);  
    if (PlayerLevel < AeonPointStartLevel)
    {
     if (PlayerLevel < 32)
     {
      if (CharacterClass == 2 && PlayerLevel == 8)
      {
       HudMessage(s:"Reached Level ",d:PlayerLevel,s:"! Mana +",d:LevelAddMaxMana,s:" & HP +",d:LevelAddMaxHP,s:"\n\nNew Spells Have Been Learned!\n\nSpeed Increased!\nAttack Increased!\nDefense Increased!";
       HUDMSG_LOG,3432,cr_orange,320.0,240.0,2.25);
      }
      else
      {
       HudMessage(s:"Reached Level ",d:PlayerLevel,s:"! Mana +",d:LevelAddMaxMana,s:" & HP +",d:LevelAddMaxHP,s:"\n\nNew Spells Have Been Learned!\n\nSpeed Increased!\nAttack Increased!\nDefense Increased!";
       HUDMSG_LOG,3432,cr_orange,320.0,240.0,2.25);
      }
     }
     else
     {
      HudMessage(s:"Reached Level ",d:PlayerLevel,s:"! Mana +",d:LevelAddMaxMana,s:" & HP +",d:LevelAddMaxHP,s:"\n\nSpeed Increased!\nAttack Increased!\nDefense Increased!";
      HUDMSG_LOG,3432,cr_orange,320.0,240.0,2.25);
     }
    }
    else
    {
     if (PlayerLevel < 32)
     {
      HudMessage(s:"Reached Level ",d:PlayerLevel,s:"! Mana +",d:LevelAddMaxMana,s:" & HP +",d:LevelAddMaxHP,s:"\n\nNew Spells Have Been Learned!\n\nSpeed Increased!\nAttack Increased!\nDefense Increased!\n\nDon't forget to check if you gain any Aeon Points!\nRemember to allocate any Aeon Points you've attained!";
      HUDMSG_LOG,3432,cr_orange,320.0,240.0,2.25);
     }
     else
     {
      HudMessage(s:"Reached Level ",d:PlayerLevel,s:"! Mana +",d:LevelAddMaxMana,s:" & HP +",d:LevelAddMaxHP,s:"\n\nSpeed Increased!\nAttack Increased!\nDefense Increased!\n\nDon't forget to check if you gain any Aeon Points!\nRemember to allocate any Aeon Points you've attained!";
      HUDMSG_LOG,3432,cr_orange,320.0,240.0,2.25);
     }
    }
    FadeRange(0,0,255,0.3,0,0,255,0.0,1.0);
    SetHudSize(0,0,0);  

   }
  }

  Delay(1);
 Restart;
}


// {-5-} Spell Selection

script 805 (int Dir)
{
/*
 //**********************************
 //*** New Spell Selection System ***
 //**********************************
  // MiscellaneousVars[9] is for the category of spells you're using [for revised Spell Selecting]
  // MiscellaneousVars[10] is for the subspell within the current category of spells you're using [for revised Spell Selecting]
  // MiscellaneousVars[70] is storage for the Spell# under the "Offense" spell category [value storage]
  // MiscellaneousVars[71] is storage for the Spell# under the "Restorative" spell category [value storage]
  // MiscellaneousVars[72] is storage for the Spell# under the "Status" spell category [value storage]
  // MiscellaneousVars[73] is storage for the Spell# under the "Conjure" spell category [value storage]

  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   // Toggles the Current Spell Category
   if (Dir > 1 && Dir < 4)
   {
    if (Dir == 2) // Previous Spell Category
    {
     MiscellaneousVars[9] -= 1;
     if (MiscellaneousVars[9] < 0) MiscellaneousVars[9] = 3;
    }
    if (Dir == 3) // Next Spell Category
    {
     MiscellaneousVars[9] += 1;
     if (MiscellaneousVars[9] > 3) MiscellaneousVars[9] = 0;
    }
    if (MiscellaneousVars[9] == 0) MiscellaneousVars[10] = MiscellaneousVars[70]; // "Offense" [23]
    if (MiscellaneousVars[9] == 1) MiscellaneousVars[10] = MiscellaneousVars[71]; // "Restorative" [5]
    if (MiscellaneousVars[9] == 2) MiscellaneousVars[10] = MiscellaneousVars[72]; // "Status" [20]
    if (MiscellaneousVars[9] == 3) MiscellaneousVars[10] = MiscellaneousVars[73]; // "Conjure" [7]
   }
 
   // Allows Cycling Spells within a specfic Category
   if (Dir > -1 && Dir < 2)
   {
    if (Dir == 0) // Previous Spell
    {
     MiscellaneousVars[10] -= 1;
     if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 22;
     if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 4;
     if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 19;
     if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] < 0) MiscellaneousVars[10] = 6;
    }
    if (Dir == 1) // Next Spell
    {
     MiscellaneousVars[10] += 1;
     if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] > 22) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] > 4) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] > 19) MiscellaneousVars[10] = 0;
     if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] > 6) MiscellaneousVars[10] = 0;
    }
    if (MiscellaneousVars[9] == 0) MiscellaneousVars[70] = MiscellaneousVars[10]; // "Offense" [23]
    if (MiscellaneousVars[9] == 1) MiscellaneousVars[71] = MiscellaneousVars[10]; // "Restorative" [5]
    if (MiscellaneousVars[9] == 2) MiscellaneousVars[72] = MiscellaneousVars[10]; // "Status" [20]
    if (MiscellaneousVars[9] == 3) MiscellaneousVars[73] = MiscellaneousVars[10]; // "Conjure" [7]
   }

   // Aftermath: Determine which Spell ID to select based on above options.

   // Offense
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 0) SelectedSpell = 0; // Minor Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 1) SelectedSpell = 3; // Chill Touch
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 2) SelectedSpell = 6; // Minor Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 3) SelectedSpell = 7; // Minor Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 4) SelectedSpell = 9; // Minor Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 5) SelectedSpell = 11; // Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 6) SelectedSpell = 12; // Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 7) SelectedSpell = 13; // Explosive Glyph
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 8) SelectedSpell = 15; // Fireball Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 9) SelectedSpell = 19; // Acid Rain
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 10) SelectedSpell = 20; // Freezing Glyph
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 11) SelectedSpell = 23; // Major Magic Missile
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 12) SelectedSpell = 25; // Icy Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 13) SelectedSpell = 26; // Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 14) SelectedSpell = 27; // Minor Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 15) SelectedSpell = 31; // Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 16) SelectedSpell = 33; // Lightning Nova
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 17) SelectedSpell = 38; // Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 18) SelectedSpell = 41; // Major Fireball
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 19) SelectedSpell = 42; // Major Ice Blast
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 20) SelectedSpell = 43; // Major Poison Cloud
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 21) SelectedSpell = 44; // Major Lightning
   if (MiscellaneousVars[9] == 0 && MiscellaneousVars[10] == 22) SelectedSpell = 49; // Ultra Magic Missile
   // Restorative
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 0) SelectedSpell = 1; // Minor Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 1) SelectedSpell = 14; // Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 2) SelectedSpell = 28; // Stone Skin
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 3) SelectedSpell = 29; // Major Healing
   if (MiscellaneousVars[9] == 1 && MiscellaneousVars[10] == 4) SelectedSpell = 40; // Diamond Skin
   // Status
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 0) SelectedSpell = 2; // Minor Night-Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 1) SelectedSpell = 4; // Minor Invisibility
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 2) SelectedSpell = 5; // Minor Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 3) SelectedSpell = 8; // Enhanced Strength
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 4) SelectedSpell = 16; // Minor Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 5) SelectedSpell = 17; // Minor Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 6) SelectedSpell = 18; // Invisibility
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 7) SelectedSpell = 21; // Night Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 8) SelectedSpell = 22; // Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 9) SelectedSpell = 30; // Major Night Vision
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 10) SelectedSpell = 32; // Farsight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 11) SelectedSpell = 34; // Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 12) SelectedSpell = 35; // Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 13) SelectedSpell = 36; // Major Invisiblity
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 14) SelectedSpell = 37; // Major Flight
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 15) SelectedSpell = 45; // Major Invulnerability
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 16) SelectedSpell = 46; // Major Stealth
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 17) SelectedSpell = 50; // Time Freezer
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 18) SelectedSpell = 51; // Terrorization Aura
   if (MiscellaneousVars[9] == 2 && MiscellaneousVars[10] == 19) SelectedSpell = 53; // Divine Avatar
   // Conjure
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 0) SelectedSpell = 10; // Summon Weak Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 1) SelectedSpell = 24; // Summon Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 2) SelectedSpell = 39; // Summon Strong Monster
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 3) SelectedSpell = 47; // Raging Spirits
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 4) SelectedSpell = 48; // Summon Arch-Vile
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 5) SelectedSpell = 52; // Create Lotso Ammo
   if (MiscellaneousVars[9] == 3 && MiscellaneousVars[10] == 6) SelectedSpell = 54; // Summon Cyberdemon

   // PrintBold(s:"Category#: ",d:MiscellaneousVars[9],s:"\nSpell#: ",d:MiscellaneousVars[10],s:"\nCat1Spell#: ",d:MiscellaneousVars[70],s:"\nCat2Spell#: ",d:MiscellaneousVars[71],s:"\nCat3Spell#: ",d:MiscellaneousVars[72],s:"\nCat4Spell#: ",d:MiscellaneousVars[73]);
  }
*/

 //**********************************
 //*** Old Spell Selection System ***
 //**********************************
 if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
 {
  if (Dir == 1) // Next Spell
  {
   SelectedSpell += 1;

  // 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54 = Deggaris Cannot use these Spell IDs in final version
   if (CharacterClass == 0) // Deggaris
   {
    if (SelectedSpell == 15) SelectedSpell += 1;
    if (SelectedSpell == 20) SelectedSpell += 1;
    if (SelectedSpell == 23) SelectedSpell += 1;
    if (SelectedSpell == 29) SelectedSpell += 1;
    if (SelectedSpell == 30) SelectedSpell += 1;
    if (SelectedSpell == 33) SelectedSpell += 1;
    if (SelectedSpell == 34) SelectedSpell += 1;
    if (SelectedSpell == 36) SelectedSpell += 1;
    if (SelectedSpell == 37) SelectedSpell += 1;
    if (SelectedSpell == 41) SelectedSpell += 1; // Skip "Major Fireball"
    if (SelectedSpell == 42) SelectedSpell += 1; // Skip "Major Ice Blast"
    if (SelectedSpell == 44) SelectedSpell += 1; // Skip "Major Lightning"
    if (SelectedSpell == 45) SelectedSpell += 1; // Skip "Major Invulnerability"
    if (SelectedSpell == 46) SelectedSpell += 1; // Skip "Major Stealth"
    if (SelectedSpell == 48) SelectedSpell += 1; // Skip "Summon Arch-Vile"
    if (SelectedSpell == 49) SelectedSpell += 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 50) SelectedSpell += 1; // Skip "Time Freezer"
    if (SelectedSpell == 54) SelectedSpell += 1; // Skip "Summon Cyberdemon"
   }

   // 6, 25, 26, 43, 49, 51 = Illucia Cannot use these Spell IDs in final version
   if (CharacterClass == 1) // Illucia
   {
    if (SelectedSpell == 6) SelectedSpell += 1; // Skip "Minor Poison Cloud"
    if (SelectedSpell == 26) SelectedSpell += 1; // Skip "Poison Cloud"
    if (SelectedSpell == 43) SelectedSpell += 1; // Skip "Major Poison Cloud"
    if (SelectedSpell == 49) SelectedSpell += 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 51) SelectedSpell += 1; // Skip "Terrorization Aura"
   }

   // 28, 40, 52 = Flora Cannot use these Spell IDs in final version
   if (CharacterClass == 2) // Flora
   {
    if (SelectedSpell == 28) SelectedSpell += 1; // Skip "Stone Skin"
    if (SelectedSpell == 40) SelectedSpell += 1; // Skip "Diamond Skin"
    if (SelectedSpell == 52) SelectedSpell += 1; // Skip "Create Lotso Ammo"
   }

   if (PlayerLevel < 31)
   {
    if (SelectedSpell > SpellsLearned[PlayerLevel])
     SelectedSpell = 0;
   }
   if (SelectedSpell > SpellIDLimit)
    SelectedSpell = 0;
  }

  if (Dir == 0) // Previous Spell
  {
   SelectedSpell -= 1;

   if (PlayerLevel < 31)
   {
    if (SelectedSpell < 0)
     SelectedSpell = SpellsLearned[PlayerLevel];
   }
   if (SelectedSpell < 0)
    SelectedSpell = SpellIDLimit;

   // 15, 20, 23, 29, 30, 33, 34, 36, 37, 41, 42, 44, 45, 46, 48, 49, 50, 54 = Deggaris Cannot use these Spell IDs in final version
   if (CharacterClass == 0) // Deggaris
   {
    if (SelectedSpell == 54) SelectedSpell -= 1; // Skip "Summon Cyberdemon"
    if (SelectedSpell == 50) SelectedSpell -= 1; // Skip "Time Freezer"
    if (SelectedSpell == 49) SelectedSpell -= 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 48) SelectedSpell -= 1; // Skip "Summon Arch-Vile"
    if (SelectedSpell == 46) SelectedSpell -= 1; // Skip "Major Stealth"
    if (SelectedSpell == 45) SelectedSpell -= 1; // Skip "Major Invulnerability"
    if (SelectedSpell == 44) SelectedSpell -= 1; // Skip "Major Lightning"
    if (SelectedSpell == 42) SelectedSpell -= 1; // Skip "Major Ice Blast"
    if (SelectedSpell == 41) SelectedSpell -= 1; // Skip "Major Fireball"
    if (SelectedSpell == 37) SelectedSpell -= 1;
    if (SelectedSpell == 36) SelectedSpell -= 1;
    if (SelectedSpell == 34) SelectedSpell -= 1;
    if (SelectedSpell == 33) SelectedSpell -= 1;
    if (SelectedSpell == 30) SelectedSpell -= 1;
    if (SelectedSpell == 29) SelectedSpell -= 1;
    if (SelectedSpell == 23) SelectedSpell -= 1;
    if (SelectedSpell == 20) SelectedSpell -= 1;
    if (SelectedSpell == 15) SelectedSpell -= 1;
   }

   // 6, 25, 26, 43, 49, 51 = Illucia Cannot use these Spell IDs in final version
   if (CharacterClass == 1) // Illucia
   {
    if (SelectedSpell == 51) SelectedSpell -= 1; // Skip "Terrorization Aura"
    if (SelectedSpell == 49) SelectedSpell -= 1; // Skip "Ultimate Magic Missile"
    if (SelectedSpell == 43) SelectedSpell -= 1; // Skip "Major Poison Cloud"
    if (SelectedSpell == 26) SelectedSpell -= 1; // Skip "Poison Cloud"
    if (SelectedSpell == 6) SelectedSpell -= 1; // Skip "Minor Poison Cloud"
   }

   // 28, 40, 52 = Flora Cannot use these Spell IDs in final version
   if (CharacterClass == 2) // Flora
   {
    if (SelectedSpell == 52) SelectedSpell -= 1; // Skip "Create Lotso Ammo"
    if (SelectedSpell == 40) SelectedSpell -= 1; // Skip "Diamond Skin"
    if (SelectedSpell == 28) SelectedSpell -= 1; // Skip "Stone Skin"
   }

  }
 }


}

// {-6-} Spell Readying (For Five Slot system)

script 806 (int Type, int Slot)
{
 int C1, C2, C3, I1, I2, I3, G1, G2, G3, G4, Z1, Z2;
 
 if (Type == 0) // assign spell
 {
  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   for (C1 = 0; C1 < 5; C1++)
   {
    if (ReadiedSpells[C1] == 0) // Initialize unused slots
    {
     ReadiedSpells[C1] = 0;
    }
   }
   ReadiedSpells[Slot] = SelectedSpell + 1;
  }
 }
 if (Type == 1) // clear spell
 {
  if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
  {
   ReadiedSpells[Slot] = 0;
  }
 }
 if (Type == 2) // cast spell
 {
  if (ReadiedSpells[Slot] != 0)
  {
   // Function Ran
   G1 = SpellCostCheck(ReadiedSpells[Slot] - 1); // Function testing to come later :P
   // Function Ran

   if (GetActorProperty(1001,APROP_HEALTH) > 0) // Fix Oversight
   {
    if (CurrentMana >= G1)
    {
/*
     if (CharacterClass == 2) // Flora has a different spell list order from the other two characters
     {
  // TODO
     }
     else
     {
     }
*/
     if (ReadiedSpells[Slot] == 2) // Minor Healing [Deggaris/Illucia Only]
     {
      I2 = GetActorProperty(1001,APROP_HEALTH);
      if (I2 < MaxHealthTrue)
      {
       CurrentMana -= G1;
       ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 15) // Healing [Deggaris/Illucia Only]
     {
      I2 = GetActorProperty(1001,APROP_HEALTH);
      if (I2 < MaxHealthTrue)
      {
       CurrentMana -= G1;
       ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 29) // Stone Skin [Deggaris/Illucia Only]
     {
      if (PowerupRunning[7] == 1)
      {
       if (CheckInventory("Armor") < 1332)
       {
        CurrentMana -= G1;
        ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
      else
      {
       if (CheckInventory("Armor") < 333)
       {
        CurrentMana -= G1;
        ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
     }
     else if (ReadiedSpells[Slot] == 30) // Major Healing [Deggaris/Illucia Only]
     {
      I2 = GetActorProperty(1001,APROP_HEALTH);
      if (I2 < MaxHealthDoubleTrue)
      {
       CurrentMana -= G1;
       ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
      }
     }
     else if (ReadiedSpells[Slot] == 40) // Diamond Skin [Deggaris/Illucia Only]
     {
      if (PowerupRunning[7] == 1)
      {
       if (CheckInventory("Armor") < 3552)
       {
        CurrentMana -= G1;
        ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
      else
      {
       if (CheckInventory("Armor") < 888)
       {
        CurrentMana -= G1;
        ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
       }
      }
     }
     else // All Other Spells [Deggaris/Illucia Only]
     {
      CurrentMana -= G1;
      ACS_ExecuteAlways(863,0,SpellCastTypes[ReadiedSpells[Slot] - 1],SpellCastStrength[ReadiedSpells[Slot] - 1],0);
     }
    }
   }

  }
 }
}

// {-7-} Spell Casting

script 807 (void)
{
 int C1, C2, I1, I2, G1, G2, G3, G4, Z1, Z2;

 // Function Ran
 G1 = SpellCostCheck(SelectedSpell); // Function testing to come later :P
 // Function Ran

 if (GetActorProperty(1001,APROP_HEALTH) > 0)
 {
  if (CurrentMana >= G1)
  {
   // Spell ID - 1
/*
   if (CharacterClass == 2) // Flora has a different spell list order from the other two characters
   {
 // TODO
   }
*/
   if (SelectedSpell == 1) // Minor Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthTrue)
    {
     CurrentMana -= G1;
     ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 14) // Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthTrue)
    {
     CurrentMana -= G1;
     ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 28)
   {
    if (CheckInventory("Armor") < 333) // Stone Skin [Deggaris and Illucia Only]
    {
     CurrentMana -= G1;
     ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 29) // Major Healing [Deggaris and Illucia Only]
   {
    I2 = GetActorProperty(1001,APROP_HEALTH);
    if (I2 < MaxHealthDoubleTrue)
    {
     CurrentMana -= G1;
     ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else if (SelectedSpell == 39) // Diamond Skin [Deggaris and Illucia Only]
   {
    if (CheckInventory("Armor") < 888)
    {
     CurrentMana -= G1;
     ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
    }
   }
   else // All other spells [Deggaris and Illucia only]
   {
    CurrentMana -= G1;
    ACS_ExecuteAlways(863,0,SpellCastTypes[SelectedSpell],SpellCastStrength[SelectedSpell],0);
   }
  }
 }
}

// {-8-} Spell Effects

// TODO: FIX WHATEVER FREAKIN BUG IS MESSING WITH THIS SCRIPT # >______<
/*
Script 8 (void)
{
 int PX, PY, PZ, PA, PBA, PVA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 

 Print(d:PVA); 
}
*/

// Replacing Script 8 with Script 863 >____________________>;;; (I have no idea why GZDoom is giving fatal errors when whatever is in Script 8's position is ran)
script 863 (int Type, int Strength)
{
 int PX, PY, PZ, PA, PBA, PVA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 
 int speed, vspeed, angle, fireheight;
 int NovaRotations;

 PX = GetActorX(1001);
 PY = GetActorY(1001);
 PZ = GetActorZ(1001);
 PVA = -sin(GetActorPitch(1001)) * 64 >> 16;
 PBA = FixedMul(GetActorAngle(1001),255.0);
 fireheight = GetActorViewHeight(1001) * 780 / 1000;
 fireheight = FixedMul(fireheight,1.0);
 // PrintBold(s:"FireHeight: ",d:fireheight); 
 PA = FixedMul(GetActorAngle(1001),360.0);
 PVA = PVA * 3;

 angle = GetActorAngle(1001) >> 8;
 speed = cos(GetActorPitch(1001)) * 64 >> 16;
 vspeed = -sin(GetActorPitch(1001)) * 64 >> 16;
 // SpawnProjectile(1003,"MinorMagicMissile",angle,speed,vspeed,0,0);

 // PrintBold(s:"Angle: ",d:angle,s:" Speed: ",d:speed,s:" VSpeed: ",d:vspeed); 
 // Print(d:PVA); 
/*
    PrintBold(s:"PX: ",d:PX,
              s:"\nPY: ",d:PY,
              s:"\nPZ: ",d:PZ,
              s:"\nFireHeight: ",d:fireHeight,
              s:"\nPA: ",d:PA,
              s:"\nPBA: ",d:PBA,
              s:"\nPVA: ",d:PVA,
              s:"\nAngle: ",d:angle,
              s:"\nSpeed: ",d:speed,
              s:"\nVSpeed: ",d:vspeed); 
*/

 if ((PBA >= 0.0) && (PBA <= 64.0))
 {
  FWX = 1.0 - FixedMul(0.015625,PBA);
  FWY = 0.0 + FixedMul(0.015625,PBA);
 }
 if ((PBA > 64.0) && (PBA <= 128.0))
 {
  FWX = 0.0 - FixedMul(0.015625,PBA - 64.0);
  FWY = 1.0 - FixedMul(0.015625,PBA - 64.0);
 }
 if ((PBA > 128.0) && (PBA <= 192.0))
 {
  FWX = -1.0 + FixedMul(0.015625,PBA - 128.0);
  FWY = 0.0 - FixedMul(0.015625,PBA - 128.0);
 }
 if ((PBA > 192.0) && (PBA <= 255.0))
 {
  FWX = 0.0 + FixedMul(0.015625,PBA - 192.0);
  FWY = -1.0 + FixedMul(0.015625,PBA - 192.0);
 }
 
 FWX = FixedMul(FWX,32.0);
 FWY = FixedMul(FWY,32.0);

 int project_X = GetActorX(0);
 int project_Y = GetActorY(0);
 int project_Z = GetActorZ(0);
 int project_Pitch = GetActorPitch(0);
 int project_PitchSpread;
 int project_Angle = GetActorAngle(0);
 int project_AngleSpread;
 int project_XSpeed = FixedMul(cos(project_Angle), FixedMul(cos(project_Pitch), 16.0));
 int project_YSpeed = FixedMul(sin(project_Angle), FixedMul(cos(project_Pitch), 16.0));
 int project_ZSpeed = -FixedMul(sin(project_Pitch), 16.0);
 int project_XSpeedSpread;
 int project_YSpeedSpread;
 int project_ZSpeedSpread;
 int project_FireHeight = GetActorViewHeight(0) * 780 / 1000;
 int project_Offset = 8.0;

/*
    PrintBold(s:"X: ",d:project_X,
              s:"\nY: ",d:project_Y,
              s:"\nZ: ",d:project_Z,
              s:"\nPitch: ",d:project_Pitch,
              s:"\nAngle: ",d:project_Angle,
              s:"\nFireHeight: ",d:project_FireHeight,
              s:"\nXSpeed: ",d:project_XSpeed,
              s:"\nYSpeed: ",d:project_YSpeed,
              s:"\nZSpeed: ",d:project_ZSpeed,
              s:"\nOffset: ",d:project_Offset); 
*/

 if (Type == 0) // Straight Ahead Fireball Shooter
 {
/*
  SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1002,PBA);
  if (ThingCount(0,1002) < 1) // failed... try again
  {
   ACS_ExecuteAlways(863,0,Type,Strength,0);
  }
*/
  Switch(Strength)
  {
   Case 0:  // Minor Magic Missile
   {
    SpawnProjectile(0, "MinorMagicMissile", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 1:  // Chill Touch
   {
    SpawnProjectile(0, "ChillTouch", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 2:  // Minor Fireball
   {
    SpawnProjectile(0, "MinorFireBall", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 3:  // Minor Ice Blast
   {
    // Low Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MinorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Middle Row [3]
    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MinorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MinorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MinorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    // High Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MinorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 4:  // Magic Missile
   {
    SpawnProjectile(0, "MagicMissile", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 5:  // Fireball
   {
    SpawnProjectile(0, "NormalFireBall", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 6:  // Exploding Glyph
   {
    if (PowerupRunning[7] == 1) SpawnForced("ExplodingGlyphGA",PX+FWX,PY+FWY,PZ+32.0,0,PBA);
    else SpawnForced("ExplodingGlyph",PX+FWX,PY+FWY,PZ+32.0,0,PBA);
    Break;
   }
   Case 7:  // Acid Rain
   {
    SpawnProjectile(0, "AcidRain", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 8:  // Freezing Glyph
   {
    if (PowerupRunning[7] == 1) SpawnForced("FreezingGlyphGA",PX+FWX,PY+FWY,PZ+32.0,0,PBA);
    else SpawnForced("FreezingGlyph",PX+FWX,PY+FWY,PZ+32.0,0,PBA);
    Break;
   }
   Case 9:  // Major Magic Missile
   {
    SpawnProjectile(0, "MajorMagicMissile", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 10:  // Minor Lightning
   {
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 11:  // Ice Blast
   {
    // Lowest Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-364), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    // Lower Row [3]
    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    // Middle Row [5]
    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Higher Row [3]
    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Highest Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+364), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    Break;
   }
   Case 12:  // Lightning
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 13:  // Major Fireball
   {
    SpawnProjectile(0, "MajorFireBall", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 14:  // Major Ice Blast
   {
    // Lowest Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-546), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-546), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-546), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Lower Row [3]
    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch-364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch-364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch-364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch-364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    // Low Row [5]
    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch-182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch-182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch-182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Middle [7]
    project_XSpeedSpread = FixedMul(cos(project_Angle+546), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+546), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-546), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-546), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // High Row [5]
    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+182), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+182), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+182), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Higher Row [3]
    project_XSpeedSpread = FixedMul(cos(project_Angle+182), FixedMul(cos(project_Pitch+364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+182), FixedMul(cos(project_Pitch+364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-182), FixedMul(cos(project_Pitch+364), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-182), FixedMul(cos(project_Pitch+364), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+364), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    // Highest Row [1]
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+546), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+546), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+546), 16.0);
    SpawnProjectile(0, "MajorHexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 15:  // Major Lightning
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+728), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+728), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-728), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-728), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);


    project_XSpeedSpread = FixedMul(cos(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+0), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle+728), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle+728), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-728), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-728), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    project_XSpeedSpread = FixedMul(cos(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle-364), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
   Case 16:  // Raging Spirits
   {
    SpawnProjectile(1001,"RagingSpirit", (PBA >> 16), 100, PVA, 0, 2002);
    SpawnProjectile(1001,"RagingSpirit", (PBA >> 16), 100, PVA, 0, 2003);
    SpawnProjectile(1001,"RagingSpirit", (PBA >> 16), 100, PVA, 0, 2004);  
    SpawnProjectile(1001,"RagingSpirit", (PBA >> 16), 100, PVA, 0, 2005);  
    SpawnProjectile(1001,"RagingSpirit", (PBA >> 16), 100, PVA, 0, 2006);  
    SetActorPosition(2002,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2003,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2004,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2005,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    SetActorPosition(2006,GetActorX(1001),GetActorY(1001), GetActorZ(1001) + fireheight,0);
    Break;
   }
   Case 17:  // Ultra Magic Missile
   {
    SpawnProjectile(0, "UltraMagicMissile", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeed, project_YSpeed, project_ZSpeed, 0, 0);
    SetActorAngle(2001, project_Angle);
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);

    Break;
   }
  }
  Thing_Remove(1002);
 }
 if (Type == 1) // Healing
 {
  if (Strength < 10) // Not the Major Healing Spell [Deggaris and Illucia Only]
  {
   C1 = MaxHealthTrue;
   if (Strength < 3) // Minor Healing Spell [Deggaris and Illucia Only]
   {
    C2 = (Random (2, 4)); C2 += (PlayerLevel / 6);
    if (PlayerLevel > 29) C2 = C2 * 11 / 10;
    if (PlayerLevel > 59) C2 = C2 * 11 / 10;
    if (PlayerLevel > 89) C2 = C2 * 11 / 10;
    if (PlayerLevel > 119) C2 = C2 * 11 / 10;
    if (PlayerLevel > 149) C2 = C2 * 11 / 10;
    if (PlayerLevel > 179) C2 = C2 * 11 / 10;
    if (CheckInventory("SauronHelmet") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 0) if (CheckInventory("SauronGauntlets") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 1) if (CheckInventory("SauronGauntletsIllucia") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 2) if (CheckInventory("SauronGauntletsFlora") > 0) C2 = C2 * 9 / 8;
    if (CheckInventory("TheOneRing") > 0) C2 = C2 * 5 / 2;
    if (CharacterClass == 2) C2 = C2 * 3 / 2; // Flora in use [temporarily]
    if (PowerupRunning[7] == 1) C2 *= 4; // Divine Avatar

    // Healing Strength is increased based on Seed of Sorcery stat
    if (CharacterClass == 0) I4 = (MiscellaneousVars[34] * 100) / 300;
    if (CharacterClass == 1) I4 = (MiscellaneousVars[34] * 100) / 200;
    if (CharacterClass == 2) I4 = (MiscellaneousVars[34] * 100) / 150;
    I4 += 100;
    C2 = (C2 * I4) / 100;

    FadeRange(63,63,63,0.8,255,255,255,0.0,1.0);
    ActivatorSound("HealSpell1",127); 
   }
   else // Healing Spell [Deggaris and Illucia Only]
   {
    C2 = (Random (5, 9)); C2 += (PlayerLevel / 5);
    if (PlayerLevel > 29) C2 = C2 * 11 / 10;
    if (PlayerLevel > 59) C2 = C2 * 11 / 10;
    if (PlayerLevel > 89) C2 = C2 * 11 / 10;
    if (PlayerLevel > 119) C2 = C2 * 11 / 10;
    if (PlayerLevel > 149) C2 = C2 * 11 / 10;
    if (PlayerLevel > 179) C2 = C2 * 11 / 10;
    if (CheckInventory("SauronHelmet") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 0) if (CheckInventory("SauronGauntlets") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 1) if (CheckInventory("SauronGauntletsIllucia") > 0) C2 = C2 * 9 / 8;
    if (CharacterClass == 2) if (CheckInventory("SauronGauntletsFlora") > 0) C2 = C2 * 9 / 8;
    if (CheckInventory("TheOneRing") > 0) C2 = C2 * 5 / 2;
    if (CharacterClass == 2) C2 = C2 * 3 / 2; // Flora in use [temporarily]
    if (PowerupRunning[7] == 1) C2 *= 4; // Divine Avatar

    // Healing Strength is increased based on Seed of Sorcery stat
    if (CharacterClass == 0) I4 = (MiscellaneousVars[34] * 100) / 300;
    if (CharacterClass == 1) I4 = (MiscellaneousVars[34] * 100) / 200;
    if (CharacterClass == 2) I4 = (MiscellaneousVars[34] * 100) / 150;
    I4 += 100;
    C2 = (C2 * I4) / 100;

    FadeRange(127,127,127,0.8,255,255,255,0.0,1.0);
    ActivatorSound("HealSpell1",193); 
   }
  }
  else // Major Healing Spell [Deggaris and Illucia Only]
  {
   C1 = MaxHealthDoubleTrue;
   C2 = (Random (11, 19)); C2 += (PlayerLevel / 4);
   if (PlayerLevel > 29) C2 = C2 * 11 / 10;
   if (PlayerLevel > 59) C2 = C2 * 11 / 10;
   if (PlayerLevel > 89) C2 = C2 * 11 / 10;
   if (PlayerLevel > 119) C2 = C2 * 11 / 10;
   if (PlayerLevel > 149) C2 = C2 * 11 / 10;
   if (PlayerLevel > 179) C2 = C2 * 11 / 10;
   if (CheckInventory("SauronHelmet") > 0) C2 = C2 * 9 / 8;
   if (CharacterClass == 0) if (CheckInventory("SauronGauntlets") > 0) C2 = C2 * 9 / 8;
   if (CharacterClass == 1) if (CheckInventory("SauronGauntletsIllucia") > 0) C2 = C2 * 9 / 8;
   if (CharacterClass == 2) if (CheckInventory("SauronGauntletsFlora") > 0) C2 = C2 * 9 / 8;
   if (CheckInventory("TheOneRing") > 0) C2 = C2 * 5 / 2;
   if (CharacterClass == 2) C2 = C2 * 3 / 2; // Flora in use [temporarily]
   if (PowerupRunning[7] == 1) C2 *= 4; // Divine Avatar

   // Healing Strength is increased based on Seed of Sorcery stat
   if (CharacterClass == 0) I4 = (MiscellaneousVars[34] * 100) / 300;
   if (CharacterClass == 1) I4 = (MiscellaneousVars[34] * 100) / 200;
   if (CharacterClass == 2) I4 = (MiscellaneousVars[34] * 100) / 150;
   I4 += 100;
   C2 = (C2 * I4) / 100;

   FadeRange(193,193,193,0.8,255,255,255,0.0,1.0);
   ActivatorSound("HealSpell1",255); 
  }

  int healingcap;  
  int oldhealthvalue;
  int finalhealvalue;
  oldhealthvalue = GetActorProperty(1001,APROP_HEALTH);
  healingcap = C1;
  finalhealvalue = oldhealthvalue + C2;
  if (oldhealthvalue < healingcap)
  {
   if (finalhealvalue < 1) finalhealvalue = 1; // Prevents the gaming from killing you when trying to heal >__>;
   if (finalhealvalue > healingcap) finalhealvalue = healingcap;
   SetActorProperty(1001,APROP_HEALTH,finalhealvalue);
  }
 }

 if (Type == 2) // Light
 {
  ActivatorSound("CastLightRoom",127);
  PowerupTimer[0] += Strength;
  if (PowerupTimer[0] > 0) SetPlayerProperty(1,1,PROP_INFRARED);
 }
 if (Type == 3) // Invisibility
 {
  ActivatorSound("CastInvisiblity",127);
  PowerupTimer[1] += Strength;
  if (PowerupTimer[1] > 0) SetPlayerProperty(1,1,PROP_INVISIBILITY);
 }
 if (Type == 4) // Flight
 {
  ActivatorSound("CastFlight",127);
  PowerupTimer[2] += Strength;
  if (PowerupTimer[2] > 0) SetPlayerProperty(1,1,PROP_FLY);
 }
 if (Type == 5) // Berserk
 {
  SetPlayerProperty(1,1,PROP_STRENGTH);
/*
  if (CharacterClass == 2) // Flora cannot hold Berserk for an entire level.
  { 
   PowerupTimer[8] += Strength;
   if (PowerupTimer[8] > 0) SetPlayerProperty(1,1,PROP_STRENGTH);
  }
  else
  {
   SetPlayerProperty(1,1,PROP_STRENGTH);
  }
*/
 }
 if (Type == 6) // Summon Monster
 {
  C1 = 0;
  if (Random(0,100) < 25)
  {
   C1 = 1;
  }
  if (Strength == 0) // Weak Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    SpawnForced(FriendID[Random(0,5)],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     SpawnForced(FriendID[Random(0,5)],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 1) // Moderate Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    SpawnForced(FriendID[Random(6,9)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     SpawnForced(FriendID[Random(6,9)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 2) // Strong Monster
  {
   while(ThingCount(0,1002) < 1)
   {
    SpawnForced(FriendID[Random(10,13)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
   if (C1 == 1)
   {
    while(ThingCount(0,1002) < 1)
    {
     SpawnForced(FriendID[Random(10,13)],PX + (Random(-100,100) << 16),PY + (Random(-100,100) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
     I1 += 1;
     if (I1 == 10)
     {
      I1 = 0;
      Delay(1);
     }
    }
    Thing_ChangeTID(1002,1000);
   }
  }
  if (Strength == 3) // Arch-Vile
  {
   while(ThingCount(0,1002) < 1)
   {
    SpawnForced(FriendID[14],PX + (Random(-50,50) << 16),PY + (Random(-50,50) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
  }
  if (Strength == 4) // Cyberdemon
  {
   while(ThingCount(0,1002) < 1)
   {
    SpawnForced(FriendID[15],PX + (Random(-200,200) << 16),PY + (Random(-200,200) << 16),PZ + (Random(0,50) << 16),1002,PA >> 16);
    I1 += 1;
    if (I1 == 10)
    {
     I1 = 0;
     Delay(1);
    }
   }
   Thing_ChangeTID(1002,1000);
  }
 }
 if (Type == 7) // Novas
 {
  if (Strength == 0) // Fireball Nova
  {
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "NormalFireball", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - 2048 + (NovaRotations * 2048));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
   }
  }
  if (Strength == 1) // Ice Nova
  {
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenIceShard", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - 2048 + (NovaRotations * 2048));
    SetActorPosition(2001, project_X + 32, project_Y + 32, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
   }
  }
  if (Strength == 2) // Lightning Nova
  {
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningF", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - 2048 + (NovaRotations * 2048));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
   }
   for (NovaRotations = 0; NovaRotations < 32; NovaRotations++)
   {
    project_XSpeedSpread = FixedMul(cos(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_YSpeedSpread = FixedMul(sin(project_Angle - 2048 + (NovaRotations * 2048)), FixedMul(cos(project_Pitch+0), 16.0));
    project_ZSpeedSpread = -FixedMul(sin(project_Pitch+0), 16.0);
    SpawnProjectile(0, "HexenLightningC", 0, 0, 0, 0, 2001);
    SetActorVelocity(2001, project_XSpeedSpread, project_YSpeedSpread, project_ZSpeedSpread, 0, 0);
    SetActorAngle(2001, project_Angle - 2048 + (NovaRotations * 2048));
    SetActorPosition(2001, project_X, project_Y, project_Z + project_FireHeight + project_Offset, 0);
    Thing_ChangeTID(2001,4444);
   }
  }
 }
 if (Type == 8) // Stealth
 {
  ActivatorSound("CastStealth",127);
  PowerupTimer[3] += Strength;
  if (PowerupTimer[3] > 0) SetPlayerProperty(1,1,PROP_NOTARGET);
 }
 if (Type == 9) // Invulnerability
 {
  ActivatorSound("CastInvuln",127);
  PowerupTimer[4] += Strength;
  if (PowerupTimer[4] > 0) SetPlayerProperty(1,1,PROP_INVULNERABILITY);
 }
 if (Type == 10) // Poison Clouds
 {
  SpawnForced("MapSpot",PX+FWX,PY+FWY,PZ+32.0,1002,PBA);
  if (ThingCount(0,1002) < 1) // failed... try again
  {
   ACS_ExecuteAlways(863,0,Type,Strength,0);
  }
  if (Strength == 0)
  {
   Thing_Projectile2(1002,242,PBA >> 16,150,0,0,1003);
   delay(1);
   Thing_Remove(1002);
   Thing_ChangeTID(1003,1002);
   Delay(11);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002),GetActorZ(1002),0,0);
   Thing_Remove(1002);
  }
  if (Strength == 1)
  {
   Thing_Projectile2(1002,242,PBA >> 16,150,0,0,1003);
   Thing_Remove(1002);
   Thing_ChangeTID(1003,1002);
   Delay(12);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)-32.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)-32.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)+32.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)+32.0,GetActorZ(1002),0,0);
   Thing_Remove(1002);
  }
  if (Strength == 2)
  {
   Thing_Projectile2(1002,242,PBA >> 16,150,0,0,1003);
   Thing_Remove(1002);
   Thing_ChangeTID(1003,1002);
   Delay(12);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)-32.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)-32.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)+32.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)+32.0,GetActorZ(1002),0,0);
   
   SpawnForced("HexenPoisonCloud",GetActorX(1002)-64.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)-32.0,GetActorY(1002)-32.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)-64.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)+32.0,GetActorY(1002)-32.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)+64.0,GetActorY(1002),GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)+32.0,GetActorY(1002)+32.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002),GetActorY(1002)+64.0,GetActorZ(1002),0,0);
   SpawnForced("HexenPoisonCloud",GetActorX(1002)-32.0,GetActorY(1002)+32.0,GetActorZ(1002),0,0);
   Thing_Remove(1002);
  }
 }
 if (Type == 11) // Armor
 {
  if (Strength == 0) // Stone Skin [Deggaris/Illucia Only]
  {
   if (PowerupRunning[7] == 1)
   {
    if (CheckInventory("Armor") < 1332)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "StoneSkinGA", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 4);
    }
   }
   else
   {
    if (CheckInventory("Armor") < 333)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "StoneSkin", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 1);
    }
   }
  }
  else if (Strength == 1) // Diamond Skin [Deggaris/Illucia Only]
  {
   if (PowerupRunning[7] == 1)
   {
    if (CheckInventory("Armor") < 3552)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "DiamondSkinGA", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 4);
    }
   }
   else
   {
    if (CheckInventory("Armor") < 888)
    {
     if (CharacterClass != 2) GiveActorInventory(1001, "DiamondSkin", 1); else GiveActorInventory(1001, "MaxHealthBonusREAL", 1);
    }
   }
  }

/*
  else if (Strength == 2) // Spiritual Exoskin [Flora Only] [50% Protection, Max AP equal to 100% of Flora's Max HP]
  {
   C1 = MaxHealthTrue;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
  else if (Strength == 3) // Greater Spiritual Exoskin [Flora Only] [75% Protection, Max AP equal to 200% of Flora's Max HP]
  {
   C1 = MaxHealthDoubleTrue;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
  else if (Strength == 4) // Perfected Spiritual Exoskin [Flora Only] [100% Protection, Max AP equal to 400% of Flora's Max HP]
  {
   C1 = MaxHealthDoubleTrue;
   C1 = C1 * 2;
   if (CheckInventory("Armor") < C1)
   {
   }
  }
*/

 }

 if (Type == 12) // Computer Map
 {
  ActivatorSound("CastFarsight",127);
  GiveActorInventory(1001, "Allmap", 1); // SpawnForced("Allmap",PX,PY,PZ+10.0,0,0);
 }
 if (Type == 13) // Freeze Time
 {
  ActivatorSound("CastTimeFreeze",127);
  PowerupTimer[5] += Strength;
  if (PowerupTimer[5] > 0) GiveActorInventory(1001, "PowerTimeFreezer", 1);
 }
 if (Type == 14) // Terrorization Aura
 {
  ActivatorSound("CastTerrorAura",127);
  PowerupTimer[6] += Strength;
  if (PowerupTimer[6] > 0) GiveActorInventory(1001, "PowerFrightener", 1);
 }
 if (Type == 15) // Ammo Spawner
 {
  SpawnForced("ClipBox",PX+20,PY+20,PZ+10.0,0,0);
  SpawnForced("ShellBox",PX-20,PY+20,PZ+10.0,0,0);
  SpawnForced("RocketBox",PX+10,PY+10,PZ+10.0,0,0);


  SpawnForced("CellPack",PX-10,PY+10,PZ+10.0,0,0);
  if (random(0,800) < 200)
  {
   SpawnForced("ClipBox",PX+20,PY-20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY-20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY-10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY-10,PZ+10.0,0,0);
  }
  if (random(0,800) < 50)
  {
   SpawnForced("ClipBox",PX+20,PY+20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY+20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY+10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY+10,PZ+10.0,0,0);

   SpawnForced("ClipBox",PX+20,PY-20,PZ+10.0,0,0);
   SpawnForced("ShellBox",PX-20,PY-20,PZ+10.0,0,0);
   SpawnForced("RocketBox",PX+10,PY-10,PZ+10.0,0,0);
   SpawnForced("CellPack",PX-10,PY-10,PZ+10.0,0,0);
  }
 }
 if (Type == 16) // Divine Avatar
 {
  ActivatorSound("CastGodlyAvatar",127);
  PowerupTimer[7] += Strength;
  if (PowerupTimer[7] > 0)
  {
   GiveActorInventory(1001, "PowerDoubleDamage", 1);
   GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
   GiveActorInventory(1001, "PowerHalfDamage", 1);
   GiveActorInventory(1001, "PowerSpeed", 1);
   GiveActorInventory(1001, "PowerHighJump", 1);
  }
 }
}

script 809 OPEN
{
 CreateTranslation(1, 16:47=112:127); // Demon
 CreateTranslation(2, 64:79=112:127, 61:63=112:114); // Imp
 CreateTranslation(3, 128:151=112:127, 77:79=125:127, 1:2=126:127); // Pistol
 CreateTranslation(4, 96:111=112:125, 5:8=126:127); // Shotgun
 CreateTranslation(5, 31:47=112:127); // Chaingunner
 CreateTranslation(6, 32:47=117:127, 160:167=112:127, 213:223=112:127, 232:235=122:125, 175:191=112:127); // Lost Soul
 CreateTranslation(7, 16:47=112:127, 165:167=123:125, 169:191=112:127, 73:79=121:127); // Caco
 CreateTranslation(8, 193:207=112:127, 5:8=124:127, 104:111=120:127); // Arach
 CreateTranslation(9, 64:79=112:127, 149:151=123:125); // HK
 CreateTranslation(10, 55:79=112:127); // Baron
 CreateTranslation(11, 80:111=112:127); // Revenant
 CreateTranslation(12, 51:79=112:127, 236:239=124:127, 13:15=121:123, 1:2=126:127, 128:151=112:127); // Manc
 CreateTranslation(13, 192:207=112:122, 240:247=123:127); // Nazi
 CreateTranslation(14, 48:79=112:127, 13:15=120:122, 208:213=112:117, 128:151=112:127); // Arch-Vile
 CreateTranslation(15, 64:79=112:127, 48:63=127:112, 144:151=112:127); // Cyberdemon
 CreateTranslation(16, 64:79=88:103, 48:63=103:88, 144:151=88:103, 32:47=224:231, 168:191=224:231, 224:231=[255, 255, 255]:[128, 255, 128], 208:223=112:127); // Cyberdemon?

 CreateTranslation(17, 112:127=48:63); // No Armor
 CreateTranslation(18, 112:127=112:127); // Green Armor
 CreateTranslation(19, 112:127=240:246); // Blue Armor
 CreateTranslation(20, 112:127=96:111); // Stone Skin
 CreateTranslation(21, 112:127=88:103); // Diamond Skin

 CreateTranslation(22, 112:127=196:207); // Blue Armor (Armor Bonus)

 CreateTranslation(30, 80:111=112:127); // For Healing on the Damage Indicator
 CreateTranslation(31, 80:111=16:47); // For Damage on the Damage Indicator
}

// {-10-} Mana Recovery Items

script 810 ENTER
{
 int C1, I1, C2, I2, G1, G2, G3, G4;

 // Runs to Check for Mana Pickup Items
 if (CurrentMana >= MaxMana)
 {
  if (CurrentMana >= MaxManaDouble) CurrentMana = MaxManaDouble;
  SetAmmoCapacity("DoomSpellMana", 0);
 }
 else
 {
  SetAmmoCapacity("DoomSpellMana", 99999);
  G3 = CheckInventory("DoomSpellMana");
  TakeInventory("DoomSpellMana", G3);
  if (CheckInventory("SauronHelmet") > 0)
  {  
   G3 = G3 * 9 / 8;
  }
  if (CharacterClass == 0 && CheckInventory("SauronGauntlets") > 0) G3 = G3 * 5 / 4;
  if (CharacterClass == 1 && CheckInventory("SauronGauntletsIllucia") > 0) G3 = G3 * 5 / 4;
  if (CharacterClass == 2 && CheckInventory("SauronGauntletsFlora") > 0) G3 = G3 * 5 / 4;
  if (CheckInventory("TheOneRing") > 0)
  {  
   if (CharacterClass == 2) G3 = G3 * 5 / 4; else G3 = G3 / 2;
  }

  CurrentMana += G3;
  if (G3 > 0)
  {
   if (CurrentMana >= MaxMana) CurrentMana = MaxMana;
   HudMessage(s:"+",d:G3,s:" Mana";0,3419,cr_blue,0.036,0.081,0.75);
  }
  G3 = 0;


  if (CurrentMana >= MaxMana)
  {
   if (CurrentMana >= MaxManaDouble) CurrentMana = MaxManaDouble;
   SetAmmoCapacity("DoomSpellMana", 0);
  }
 }
 Delay(1);
 Restart;
}

// Defines the Buildup to Sauravatar's appearance [DVI-DS]
script 811 (void)
{
 int C1, C2, C3, C4;
 if (ModType != 0) // Deus Vult 1 or DVII
 {
  Delay(35);
  SetMusic("D_OUTBRE", 0); 
  AmbientSound("SauronAwakens",127);
  // 18.25 * 35 = 637
  Delay(637);
  ACS_Execute(812,0,0,0,0);
  Delay(1);
 }
 else
 {
  Delay(21);
  Exit_Normal(0);
  Delay(1);
 }
}

// Awakens the Stone Cyberdemon that becomes Sauravatar [DVI-DS]
script 812 (void)
{
 int PX, PY, PZ, PA, PBA, FWX, FWY, I1, C1, I2, C2, I3, C3, I4, C4; 

 PX = GetActorX(1001);
 PY = GetActorY(1001);
 PZ = GetActorZ(1001);
 PA = FixedMul(GetActorAngle(1001),360.0);
 PBA = FixedMul(GetActorAngle(1001),255.0);

 if (ModType != 0)
 {
  AmbientSound("SauronSight",127);
  Thing_Activate(999);
  Thing_ChangeTID(999,1124);
  FinalBossActivated = 1;
 }
}

// Killed MAP02 Eye [DVI-DS] / MAP12 First Eye [DVII-DS]
script 813 (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(1, SIDE_FRONT, TEXTURE_MIDDLE, "-"); //remove middle 
  SetLineTexture(1, SIDE_BACK, TEXTURE_MIDDLE, "-"); //remove middle 

 }
 if (ModType == 2)
 {
  ReplaceTextures("XE03_01","-",NOT_BOTTOM|NOT_TOP|NOT_FLOOR|NOT_CEILING);
 }
}

// Killed MAP04 Eye #1 [DVI-DS] / MAP12 Second Eye [DVII-DS]
script 814 (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(2, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(2, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(2, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
 }
}

// Killed MAP04 Eye #2 [DVI-DS] / MAP12 Third Eye [DVII-DS]
script 815 (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(3, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(3, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(3, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
 }
}

// Killed MAP04 Main Eye [DVI-DS] / MAP12 Fourth Eye [DVII-DS]
script 816 (void)
{
 int C1, C2, C3, G1, G2, G3;
 if (ModType == 1)
 {
  SetLineTexture(4, SIDE_FRONT, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_FRONT, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_FRONT, TEXTURE_BOTTOM, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_TOP, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_MIDDLE, "BLACK"); //remove middle 
  SetLineTexture(4, SIDE_BACK, TEXTURE_BOTTOM, "BLACK"); //remove middle 
  ChangeCeiling(13, "BLACK");
  ChangeFloor(13, "BLACK");
 }
}

// Sauravatar's Death [DVI-DS]
script 817 (void)
{
 int C1;
 SetMusic("*", 0); 
/*
 SetHudSize(0,0,0);
    HudMessage(s:"??????: Damn you to the core of the Eternal Hells!! \n\nYou might have stopped me for now, but this body is only an avatar. My true form\nForever will elude your simpleminded perspective of things! \nYou can not, and will not ever grasp the true power of Lord Sauron!!";0,241,cr_red,1.5,0.5,1.0);
*/
}

// New Soulsphere script :P
script 818 (void)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3, M1, M2, M3;
 G1 = GetActorProperty(1001,APROP_Health); 
 G2 = MaxHealthDoubleTrue;
 if (G1 < G2)
 {
  C1 = MaxHealthTrue;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 // Add 25% to Stamina Value [up to 500%]
 if (MiscellaneousVars[21] < 50000) MiscellaneousVars[21] += 2500; 
 if (MiscellaneousVars[21] > 50000) MiscellaneousVars[21] = 50000;

 // Add 50% MP/Mana to Deggaris/Illucia/Flora, up to 133.3%/166.7%/200% Max MP/Mana.
 if (CharacterClass == 0) MaxManaDouble = MaxMana * 4 / 3;
 if (CharacterClass == 1) MaxManaDouble = MaxMana * 5 / 3;
 if (CharacterClass == 2) MaxManaDouble = MaxMana * 2;
 if (CurrentMana < MaxManaDouble)
 {
  M1 = MaxMana / 2;
  CurrentMana += M1;
  if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
 }

 if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 2500; // 25.00% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel * 25;
   H1 += H2;

   H3 = random(-500,500);
   H1 += H3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }
}

// New Megasphere Script [for health half] :P
script 819 (void)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3;
 G1 = GetActorProperty(1001,APROP_Health); 
 G2 = MaxHealthDoubleTrue;
 if (G1 < G2)
 {
  C1 = MaxHealthDoubleTrue;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 7500; // 75.00% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel * 75;
   H1 += H2;

   H3 = random(-1500,1500);
   H1 += H3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }

 // Add 50% to Stamina Value [up to 200%]
 if (MiscellaneousVars[21] < 50000) MiscellaneousVars[21] += 5000; 
 if (MiscellaneousVars[21] > 50000) MiscellaneousVars[21] = 50000;

}

// New Health Bonus Script :P
script 820 (int C5)
{
 int C1, C2, C3, G1, G2, G3, H1, H2, H3;

 If (C5 <= 0) C5 = 1;

 G1 = GetActorProperty(1001,APROP_Health); 

 G2 = MaxHealthDoubleTrue;
 if (G1 < G2)
 {
  C1 = MaxHealthTrue / 100;
  if (C1 < 1) C1 = 1;

  C2 = PlayerLevel / 10;
  C1 += C2;
  C1 = C1 * C5;
  G1 += C1;
  if (G1 >= G2) G1 = G2;

  SetActorProperty(1001,APROP_Health,G1);
 }

 // Add 0.5% to Stamina Value [up to 500%]
 if (MiscellaneousVars[21] < 50000) MiscellaneousVars[21] += 50; 
 if (MiscellaneousVars[21] > 50000) MiscellaneousVars[21] = 50000;

 if (CharacterClass == 2) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
 {
  if (HellcoreOverheatLevel > 0)
  {
   H1 = 25; // 0.25% [100000 is 1000.00% (maximum)]

   H2 = PlayerLevel / 4;
   H1 += H2;

   H3 = random(-5,5);
   H1 += H3;

   if (H1 < 1) H1 = 1;
   if (H1 > 100000) H1 = 100000;

   HellcoreOverheatLevel -= H1;
   if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
  }
 }
}

// Used later to configure the full max health of the [Greater] Sauravatar and set it to its proper Health to start the fight [instead of its predefined DECORATE amount] [DVI-DS]
script 821 (void)
{
 int C1, C2, C3, C4, G1, G2, G3, G4;

  FinalBossMaxHealth = BaseFinalBossHealth;
//  PrintBold(s:"Phase1 - First Value: ",d:FinalBossMaxHealth);

  if (GameSkill() == SKILL_VERY_EASY) G4 = 30;
  else if (GameSkill() == SKILL_EASY) G4 = 35;
  else if (GameSkill() == SKILL_NORMAL) G4 = 40;
  else if (GameSkill() == SKILL_HARD) G4 = 45;
  else if (GameSkill() == SKILL_VERY_HARD) G4 = 50;

  C1 = FinalBossMaxHealth * G4 / 100;
  FinalBossMaxHealth += C1;
//  PrintBold(s:"Phase2 - Difficulty Add: ",d:FinalBossMaxHealth,s:"\nC1: ",d:C1);

  C4 = MonstersAlive[22] * 192;
  C4 += MonstersKilled[22] * 24;
  C4 += MonstersAlive[23] * 160;
  C4 += MonstersKilled[23] * 36;
  C4 += MonstersAlive[24] * 128;
  C4 += MonstersKilled[24] * 48;
  C4 += MonstersAlive[25] * 96;
  C4 += MonstersKilled[25] * 60;
  if (GameSkill() == SKILL_VERY_EASY) C3 = 70;
  else if (GameSkill() == SKILL_EASY) C3 = 88;
  else if (GameSkill() == SKILL_NORMAL) C3 = 100;
  else if (GameSkill() == SKILL_HARD) C3 = 112;
  else if (GameSkill() == SKILL_VERY_HARD) C3 = 130;

  C4 = C4 * C3 / 100;
  FinalBossMaxHealth += C4;
//  PrintBold(s:"Phase3 - Level Kills Add: ",d:FinalBossMaxHealth,s:"\nC4: ",d:C4,s:"\nC3: ",d:C3);

  C4 = SecretsFound[22];
  C4 -= SecretsFound[23];
  C4 -= SecretsFound[24];
  C4 -= SecretsFound[25];
  if (GameSkill() == SKILL_VERY_EASY) C4 = C4 * 3 / 2;
  else if (GameSkill() == SKILL_EASY) C4 = C4 * 5 / 4;
  else if (GameSkill() == SKILL_NORMAL) C4 = C4 / 2;
  else if (GameSkill() == SKILL_HARD) C4 = C4 / 3;
  else if (GameSkill() == SKILL_VERY_HARD) C4 = C4 / 4;

  C3 = 100;
  C3 -= C4;
  FinalBossMaxHealth = FinalBossMaxHealth * C3 / 100;
//  PrintBold(s:"Phase4 - SecretsFound Add: ",d:FinalBossMaxHealth,s:"\nC4: ",d:C4,s:"\nC3: ",d:C3);

  C3 = PlayerLevel / 4;
  C3 += 100;
  FinalBossMaxHealth = FinalBossMaxHealth * C3 / 100;
//  PrintBold(s:"Phase5 - PlayerLevel Add: ",d:FinalBossMaxHealth,s:"\nC3: ",d:C3);

  if (CheckActorInventory(1001,"SauronHelmet") > 0)
  {
   FinalBossMaxHealth = FinalBossMaxHealth * 5 / 4;
//   PrintBold(s:"Phase6 - SauronItems Add: Found Helmet ",d:FinalBossMaxHealth);
  }
  if (CheckActorInventory(1001,"SauronGauntlets") > 0)
  {
   FinalBossMaxHealth = FinalBossMaxHealth * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Deggaris] ",d:FinalBossMaxHealth);
  }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)
  {
   FinalBossMaxHealth = FinalBossMaxHealth * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Illucia] ",d:FinalBossMaxHealth);
  }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0)
  { 
   FinalBossMaxHealth = FinalBossMaxHealth * 5 / 4; 
//   PrintBold(s:"Phase6 - SauronItems Add: Found Gauntlets [Flora] ",d:FinalBossMaxHealth);
  }
  if (CheckActorInventory(1001,"TheOneRing") > 0)
  {
   FinalBossMaxHealth = FinalBossMaxHealth * 2;
//   PrintBold(s:"Phase6 - SauronItems Add: Found Ring ",d:FinalBossMaxHealth);
  }
//  PrintBold(s:"Phase6 - SauronItems Add: ",d:FinalBossMaxHealth);

  FinalBossModerateHealth = FinalBossMaxHealth * 2 / 3;
  FinalBossLowHealth = FinalBossMaxHealth * 1 / 3;

  SetActorProperty(1124,APROP_Health,FinalBossMaxHealth);
  SetActorProperty(1124,APROP_SpawnHealth,FinalBossMaxHealth);
  SetInventory("CurrentMaxHealth", FinalBossMaxHealth);
  SetUserVariable(1124,"user_MaxHP",FinalBossMaxHealth);

  Thing_Damage2(666,999999,"Massacre"); 
}

// Health Regeneration [only runs when Sauravatar walks around] [DVI-DS]
script 822 (int C5)
{
 int C1, C2, C3, G1, G2, G3, G4;

  if (GameSkill() == SKILL_VERY_EASY)
  {
   G4 = 6;
   if (C5 == 1) G4 += 24;
  }
  else
  if (GameSkill() == SKILL_EASY)
  {
   G4 = 7;
   if (C5 == 1) G4 += 28;
  }
  else
  if (GameSkill() == SKILL_NORMAL)
  {
   G4 = 8;
   if (C5 == 1) G4 += 32;
  }
  else
  if (GameSkill() == SKILL_HARD)
  {
   G4 = 9;
   if (C5 == 1) G4 += 36;
  }
  else
  if (GameSkill() == SKILL_VERY_HARD)
  {
   G4 = 10;
   if (C5 == 1) G4 += 40;
  }
  if (C2 <= FinalBossModerateHealth)
  {
   if (C2 <= FinalBossLowHealth) G4 = G4 * 11 / 8; else G4 = G4 * 9 / 8;
  }
  C1 = FinalBossMaxHealth * G4 / 131072;
  if (C2 <= FinalBossModerateHealth)
  {
   if (C2 <= FinalBossLowHealth)
   {
    C1 += random(-7,7);
   }
   else
   {
    C1 += random(-5,5);
   }
  }
  else
  {
   C1 += random(-4,4);
  }
  if (C1 < 1) C1 = 1;

  C2 = GetActorProperty(1124,APROP_Health);
  C2 += C1;
  if (C2 > FinalBossMaxHealth) C2 = FinalBossMaxHealth;

  SetActorProperty(1124,APROP_Health,C2);

  if (C2 <= FinalBossModerateHealth)
  {
   if (C2 <= FinalBossLowHealth)
   {
    SetThingSpecial(1124,0,2,0,0,0,0); // Set's args[0] to 2 in order to make the Sauravatar shoot his OmniBFG balls in threes [the white BFG balls]
   }
   else
   {
    SetThingSpecial(1124,0,1,0,0,0,0); // Set's args[0] to 1 in order to make the Sauravatar shoot his MegaBFG balls in twos [the yellow BFG balls]
   }
  }
  else
  {
   SetThingSpecial(1124,0,0,0,0,0,0); // Set's args[0] to 0 in order to make the Sauravatar shoot his SuperBFG balls [the red BFG balls]
  }
}

// Changes Music for Entering the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS]
script "DV1M04-Music1" (void)
{
 if (FinalBossActivated == 0) SetMusic("DDRAGON3", 13); 
}

// Changes Music back when exiting the Fishmouth Temple in MAP04 [DVI-DS] or MAP12 [DVII-DS]
script 24 (void)
{
 if (FinalBossActivated == 0) SetMusic("*", 0); 
}

// Changes Music for the battle with the main Eye of Sauron on MAP04 [DVI-DS] or MAP12 [DVII-DS]
script 25 (void)
{
 if (FinalBossActivated == 0) SetMusic("DDRAGON3", 15); 
}

// Max Health Bonus Script
script 826 (void)
{
 int I1, I2, Z1, Z2, HPError, C1, C2, BonusMaxHP, CurrentHP; 
 int ArmorHPBonus = 0;
 BonusMaxHP = MaxHealthTrue / 400;

 if (CharacterClass == 0) HPError = MaxHealthTrue / 1200; // Deggaris has one more HP to his Error for the least amount of HP each [1200]
 if (CharacterClass == 1) HPError = MaxHealthTrue / 1320; // Illucia has one more HP to her Error for the middle amount of HP each [1320]
 if (CharacterClass == 2) HPError = MaxHealthTrue / 1440; // Flora has one more HP to her Error for the most amount of HP each [1440]
 HPError += 1;

 BonusMaxHP = BonusMaxHP + random(-HPError,HPError);

 if (CharacterClass == 0) { C1 = random(18,21); } // Deggaris receives most HP from a bonus
 if (CharacterClass == 1) { C1 = random(15,17); } // Illucia receives less HP from a bonus than Deggaris, but more than Flora.
 if (CharacterClass == 2) { C1 = random(12,14); } // Flora receives the least HP from a bonus
 BonusMaxHP = BonusMaxHP * C1 / 16;

 // Flora's Armor Items [up to +45% Max HP gained from Max HP Bonuses]
 if (CharacterClass == 2 && CheckActorInventory(1001,"PearlyCorset")) ArmorHPBonus += 20; // +20%
 if (CharacterClass == 2 && CheckActorInventory(1001,"KissaBra")) ArmorHPBonus += 10; // +10%
 if (CharacterClass == 2 && CheckActorInventory(1001,"BalrogRing")) ArmorHPBonus += 15; // +25%
 ArmorHPBonus += 100;
 BonusMaxHP = BonusMaxHP * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset

 // Overall Modifier
 BonusMaxHP = BonusMaxHP * random(70,80) / 100;

 if (BonusMaxHP < 1) BonusMaxHP = 1;

 CurrentHP = GetActorProperty(1001,APROP_HEALTH);
 GiveInventory("UpgradeStamina", BonusMaxHP);
 SetActorProperty(1001,APROP_HEALTH,(CurrentHP + BonusMaxHP));
 MaxHealthTrue += BonusMaxHP;
 MaxHealthDoubleTrue = MaxHealthTrue * 2;
 SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);

 // Max HP Bonus also heals extra HP dependant on the character in use.
 CurrentHP = GetActorProperty(1001,APROP_HEALTH);
 if (CharacterClass == 0) CurrentHP += random(2,4); // Deggaris receives the Least Healed HP from a bonus
 if (CharacterClass == 1) CurrentHP += random(3,6); // Illucia receives a Median of Healed HP from a bonus
 if (CharacterClass == 2) CurrentHP += random(5,10); // Flora receives the Most Healed HP from a bonus

 C1 = MaxHealthTrue / 100;
 if (C1 < 1) C1 = 1;

 C2 = PlayerLevel / 10;
 C1 += C2;
 CurrentHP += C1;

 if (CurrentHP > MaxHealthDoubleTrue) CurrentHP = MaxHealthDoubleTrue;
 SetActorProperty(1001,APROP_HEALTH,CurrentHP);
}

// Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
script 827 (void)
{
 if (GetActorProperty(1001,APROP_HEALTH) < MaxHealthTrue)
 {
  SetThingSpecial(0,0,0,0,0,1,0); 
  // Print(s:"1");
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,0);
  // Print(s:"0");
 }
}

// Stimpacks/Medikits/Berserk Packs (All games)
script 828 (int HealItemType)
{
 int I1, I2, Z1, Z2, C1, C2, HealAmount, ExtraHeal, CurrentHP;
 CurrentHP = GetActorProperty(1001,APROP_HEALTH);

 if (HealItemType == 0) // Stimpack / Crystal Vial[?]
 {
  HealAmount = MaxHealthTrue * 10 / 100;
  if (MiscellaneousVars[21] < 10000)
  {
   MiscellaneousVars[21] += 500; 
   if (MiscellaneousVars[21] > 10000) MiscellaneousVars[21] = 10000;
  }
 }
 if (HealItemType == 1) // Medikit / Quartz Flask[?]
 {
  HealAmount = MaxHealthTrue * 25 / 100;
  if (MiscellaneousVars[21] < 10000)
  {
   MiscellaneousVars[21] += 1250; 
   if (MiscellaneousVars[21] > 10000) MiscellaneousVars[21] = 10000;
  }
 }
 if (HealItemType == 2) // Berserk Pack / Mystic Urn[?]
 {
  HealAmount = MaxHealthTrue;
 }
 if (HealItemType == 3)
 {
  if (MiscellaneousVars[21] < 50000) MiscellaneousVars[21] += 20000; 
  if (MiscellaneousVars[21] >= 50000) MiscellaneousVars[21] = 50000; 
 }
 // Berserk Pack (Stamina Effect)
 if (CurrentHP <= MaxHealthTrue)
 {
  CurrentHP += HealAmount;
  if (CurrentHP > MaxHealthTrue) CurrentHP = MaxHealthTrue;
  SetActorProperty(1001,APROP_HEALTH,CurrentHP);
 }
}

// Debugging for Printing Armor Amounts on Screen
script 829 (void)
{
 int I1, I2, Z1, Z2, C1, C2;

 Z1 = CheckInventory("Armor");
 Print(s:"BasicArmor: ",d:Z1);
 Z1 = CheckInventory("GreenArmor");
 Print(s:"GreenArmor: ",d:Z1);
 Z1 = CheckInventory("BlueArmor");
 Print(s:"BlueArmor: ",d:Z1);
 Z1 = CheckInventory("StoneSkin");
 Print(s:"StoneSkin: ",d:Z1);
 Z1 = CheckInventory("StoneSkinGA");
 Print(s:"StoneSkinGA: ",d:Z1);
 Z1 = CheckInventory("DiamondSkin");
 Print(s:"DiamondSkin: ",d:Z1);

 Z1 = CheckInventory("DiamondSkinGA");
 Print(s:"DiamondSkinGA: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDS");
 Print(s:"ArmorBonusDS: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSGreen");
 Print(s:"ArmorBonusDSGreen: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSBlue");
 Print(s:"ArmorBonusDSBlue: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSStone1");
 Print(s:"ArmorBonusDSStone1: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSStone2");
 Print(s:"ArmorBonusDSStone2: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSDiamond1");
 Print(s:"ArmorBonusDSDiamond1: ",d:Z1);
 Z1 = CheckInventory("ArmorBonusDSDiamond2");
 Print(s:"ArmorBonusDSDiamond2: ",d:Z1);

/*
 Z1 = CheckInventory("SpiritualExoskin");
 Print(s:"SpiritualExoskin: ",d:Z1);
 Z1 = CheckInventory("GreaterSpiritualExoskin");
 Print(s:"GreaterSpiritualExoskin: ",d:Z1);
 Z1 = CheckInventory("PerfectedSpiritualExoskin");
 Print(s:"PerfectedSpiritualExoskin: ",d:Z1);
*/
}

// Emulates Armor Bonuses for all four (six?) types of armor in DVI-DS. [Applies Only to Deggaris and Illucia]
script 830 (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;

 if (CharacterClass != 2) // Stops Flora from getting armor benefits and sets the item's Args[3] to 1 to make the item fail to pickup
 {
  If (C5 <= 0) C5 = 1;

  // Saves original raw Armor Value
  Z1 = CheckActorInventory(1001,"Armor");

  // Clears Armor Types
  Z2 = CheckActorInventory(1001,"Armor"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDS"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSGreen"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSBlue"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSStone1"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSStone2"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSDiamond1"); TakeActorInventory(1001,"Armor", Z2);
  Z2 = CheckActorInventory(1001,"ArmorBonusDSDiamond2"); TakeActorInventory(1001,"Armor", Z2);
  // Flora and her Spiritual Exoskin spell have no Armor Bonuses
  // Flora and her Greater Spiritual Exoskin spell have no Armor Bonuses
  // Flora and her Perfected Spiritual Exoskin spell have no Armor Bonuses

  if (Z1 == 0) // No Armor
  {
   C1 = 1; // Base Increase to Armor and make it Green class
   C1 = C1 * C5;
   Z1 += C1;
   GiveActorInventory(1001,"ArmorBonusDSGreen", Z1);
   CurrentArmorClass = 1;
   CurrentMaxArmor = 100;
   GiveActorInventory(1001,"DSGreenArmorClass", 1);
   TakeActorInventory(1001,"DSNoArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
  }
  else // Have some kind of existing Armor
  {
   C1 = CurrentArmorClass; // Base Increase to Armor and make it Green class
   C1 = C1 * C5;
   Z1 += C1;
   C2 = Z1 / 100;
   C2 = C2 * C5;
   Z1 += C2;
   C2 = PlayerLevel / 5;
   C2 = C2 * C5;
   Z1 += C2;
   if (Z1 < 101)
   {
    if (CurrentArmorClass < 1) CurrentArmorClass = 1;
   }
   else
   {
    if (Z1 < 201)
    {
     if (CurrentArmorClass < 2) CurrentArmorClass = 2;
    }
    else
    {
     if (Z1 < 334)
     {
      if (CurrentArmorClass < 3) CurrentArmorClass = 3;
     }
     else
     {
      if (Z1 < 889)
      {
       if (CurrentArmorClass < 4) CurrentArmorClass = 4;
      }
      else
      {
       if (Z1 < 1333)
       {
        if (CurrentArmorClass < 5) CurrentArmorClass = 5;
       }
       else
       {
        if (CurrentArmorClass < 6) CurrentArmorClass = 6;
       }
      }
     }
    }
   }
 
   if (CurrentArmorClass == 0)
   {
    CurrentMaxArmor = 0;
    GiveActorInventory(1001,"DSNoArmorClass", 1);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 1)
   {
    GiveActorInventory(1001,"ArmorBonusDSGreen", Z1);
    CurrentMaxArmor = 100;
    GiveActorInventory(1001,"DSGreenArmorClass", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 2)
   {
    GiveActorInventory(1001,"ArmorBonusDSBlue", Z1);
    CurrentMaxArmor = 200;
    GiveActorInventory(1001,"DSBlueArmorClass", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 3)
   {
    GiveActorInventory(1001,"ArmorBonusDSStone1", Z1);
    CurrentMaxArmor = 333;
    GiveActorInventory(1001,"DSStoneArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 4)
   {
    GiveActorInventory(1001,"ArmorBonusDSDiamond1", Z1);
    CurrentMaxArmor = 888;
    GiveActorInventory(1001,"DSDiamondArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass == 5)
   {
    GiveActorInventory(1001,"ArmorBonusDSStone2", Z1);
    CurrentMaxArmor = 1332;
    GiveActorInventory(1001,"DSStoneArmorClass2", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   }
   if (CurrentArmorClass >= 6)
   {
    GiveActorInventory(1001,"ArmorBonusDSDiamond2", Z1);
    CurrentMaxArmor = 3552;
    GiveActorInventory(1001,"DSDiamondArmorClass2", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   }
  }
 }

}

// Checks Whether a Full Armor Item can be picked up or not
script 831 (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;

 if (CharacterClass == 2) // Stops Flora from getting armor benefits and sets the item's Args[4] to 0 to make the item fail to pickup
 {
  SetThingSpecial(0,0,0,0,0,0,0);
 }
 else
 {
  Z1 = CheckInventory("Armor");
  if (C5 == 1)
  {
   if (CurrentArmorClass <= 1)
   {
    if (Z1 < 100)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 2)
  {
   if (CurrentArmorClass <= 2)
   {
    if (Z1 < 200)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 3)
  {
   if (CurrentArmorClass <= 3)
   {
    if (Z1 < 333)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 4)
  {
   if (CurrentArmorClass <= 4)
   {
    if (Z1 < 888)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 5)
  {
   if (CurrentArmorClass <= 5)
   {
    if (Z1 < 1332)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 
  if (C5 == 6)
  {
   if (CurrentArmorClass <= 6)
   {
    if (Z1 < 3552)
    {
     SetThingSpecial(0,0,0,0,0,1,0);
    }
    else
    {
     SetThingSpecial(0,0,0,0,0,0,0);
    }
   }
   else
   {
    SetThingSpecial(0,0,0,0,0,0,0);
   }
  }
 }

}

// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
script 832 (int C5)
{
 int I1, I2, Z1, Z2, C1, C2;
 
 // Saves original raw Armor Value
 Z1 = CheckInventory("Armor");

 // Clears Armor Types
 Z2 = CheckInventory("Armor"); TakeInventory("Armor", Z2);
 Z2 = CheckInventory("ArmorBonusDS"); TakeInventory("ArmorBonusDS", Z2);

 Z2 = CheckInventory("ArmorBonusDSGreen"); TakeInventory("ArmorBonusDSGreen", Z2);
 Z2 = CheckInventory("ArmorBonusDSBlue"); TakeInventory("ArmorBonusDSBlue", Z2);
 Z2 = CheckInventory("ArmorBonusDSStone1"); TakeInventory("ArmorBonusDSStone1", Z2);
 Z2 = CheckInventory("ArmorBonusDSStone2"); TakeInventory("ArmorBonusDSStone2", Z2);
 Z2 = CheckInventory("ArmorBonusDSDiamond1"); TakeInventory("ArmorBonusDSDiamond1", Z2);
 Z2 = CheckInventory("ArmorBonusDSDiamond2"); TakeInventory("ArmorBonusDSDiamond2", Z2);

 if (C5 == 1 && CurrentArmorClass <= 1) { CurrentArmorClass = 1; C2 = 100; }
 if (C5 == 2 && CurrentArmorClass <= 2) { CurrentArmorClass = 2; C2 = 200; }
 if (C5 == 3 && CurrentArmorClass <= 3) { CurrentArmorClass = 3; C2 = 333; }
 if (C5 == 4 && CurrentArmorClass <= 4) { CurrentArmorClass = 4; C2 = 888; }
 if (C5 == 5 && CurrentArmorClass <= 5) { CurrentArmorClass = 5; C2 = 1332; }
 if (C5 == 6 && CurrentArmorClass <= 6) { CurrentArmorClass = 6; C2 = 3552; }

 if (CurrentArmorClass == 1)
 {
  GiveInventory("ArmorBonusDSGreen", C2);
  GiveInventory("DSGreenArmorClass", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 100;
 }
 if (CurrentArmorClass == 2)
 {
  GiveInventory("ArmorBonusDSBlue", C2);
  GiveInventory("DSBlueArmorClass", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 200;
 }
 if (CurrentArmorClass == 3)
 {
  GiveInventory("ArmorBonusDSStone1", C2);
  GiveInventory("DSStoneArmorClass1", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 333;
 }
 if (CurrentArmorClass == 4)
 {
  GiveInventory("ArmorBonusDSDiamond1", C2);
  GiveInventory("DSDiamondArmorClass1", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 888;
 }
 if (CurrentArmorClass == 5)
 {
  GiveInventory("ArmorBonusDSStone2", C2);
  GiveInventory("DSStoneArmorClass2", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass2", 9999);
  CurrentMaxArmor = 1332;
 }
 if (CurrentArmorClass == 6)
 {
  GiveInventory("ArmorBonusDSDiamond2", C2);
  GiveInventory("DSDiamondArmorClass2", 1);
  TakeInventory("DSNoArmorClass", 9999);
  TakeInventory("DSGreenArmorClass", 9999);
  TakeInventory("DSBlueArmorClass", 9999);
  TakeInventory("DSStoneArmorClass1", 9999);
  TakeInventory("DSDiamondArmorClass1", 9999);
  TakeInventory("DSStoneArmorClass2", 9999);
  CurrentMaxArmor = 3552;
 }
}

// *******************************************************************************************
// ** Check Player Stuff [requires a "DoomSpellACS" actor to be present on the map to work] **
// *******************************************************************************************
script 833 ENTER
{
 int G1, G2, G3, C1, C2, C3, I1, I2, I3, H1;
 int Mas1;
 int BuddhaRNGVal, BuddhaCurrentVal, GodlyAvatarBuddhaAdd;
 int ArmorBits, Armor2Bits, Armor3Bits, LevelChecker, LevelChecker2, RuinousPtsNeeded, AmmoCheck, HellcoreCoolRatio, IronFeetChance, FearChance, HealthDiffRatio;
 int BaseSceptreEXP;
 int SceptreEXPRatio;
 int HealthRatio;
 int checkmeleeweapons;
 int staminaregenbase;
 int staminaregenfinal;
 int buttons;

 AeonPointStartLevel = GetCVAR("dvds_aeonstartlvl");

 MiscellaneousVars[86] = GetCVar("dvds_aeonpointmultiplier") + 1;
 MiscellaneousVars[87] = GetCVar("dvds_seedmultiplier") + 1;

 if (GetCVar("dvds_expmultiplier") > -1 && GetCVar("dvds_expmultiplier") < 20) MiscellaneousVars[90] = (GetCVar("dvds_expmultiplier") + 1) * 100;
 if (GetCVar("dvds_expmultiplier") > 19 && GetCVar("dvds_expmultiplier") < 39) MiscellaneousVars[90] = (GetCVar("dvds_expmultiplier") - 19) * 5;

 if (GetCVar("dvds_sceptreexpmultiplier") > -1 && GetCVar("dvds_sceptreexpmultiplier") < 20) MiscellaneousVars[88] = (GetCVar("dvds_sceptreexpmultiplier") + 1) * 100;
 if (GetCVar("dvds_sceptreexpmultiplier") > 19 && GetCVar("dvds_sceptreexpmultiplier") < 39) MiscellaneousVars[88] = (GetCVar("dvds_sceptreexpmultiplier") - 19) * 5;

 if (GetCVar("dvds_heatheatmultiplier") > -1 && GetCVar("dvds_heatheatmultiplier") < 20) MiscellaneousVars[130] = (GetCVar("dvds_heatheatmultiplier") + 1) * 100;
 if (GetCVar("dvds_heatheatmultiplier") > 19 && GetCVar("dvds_heatheatmultiplier") < 39) MiscellaneousVars[130] = (GetCVar("dvds_heatheatmultiplier") - 19) * 5;

 if (GetCVar("dvds_heatcoolmultiplier") > -1 && GetCVar("dvds_heatcoolmultiplier") < 20) MiscellaneousVars[131] = (GetCVar("dvds_heatcoolmultiplier") + 1) * 100;
 if (GetCVar("dvds_heatcoolmultiplier") > 19 && GetCVar("dvds_heatcoolmultiplier") < 39) MiscellaneousVars[131] = (GetCVar("dvds_heatcoolmultiplier") - 19) * 5;

 if (GetCVar("dvds_uncurserate") > -1 && GetCVar("dvds_uncurserate") < 20) MiscellaneousVars[89] = (GetCVar("dvds_uncurserate") + 1) * 100;
 if (GetCVar("dvds_uncurserate") > 19 && GetCVar("dvds_uncurserate") < 39) MiscellaneousVars[89] = (GetCVar("dvds_uncurserate") - 19) * 5;

 if (GetCVar("dvds_staminaregenmultiplier") > -1 && GetCVar("dvds_staminaregenmultiplier") < 20) MiscellaneousVars[137] = (GetCVar("dvds_staminaregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_staminaregenmultiplier") > 19 && GetCVar("dvds_staminaregenmultiplier") < 39) MiscellaneousVars[137] = (GetCVar("dvds_staminaregenmultiplier") - 19) * 5;

 if (GetCVar("dvds_healthregenmultiplier") > -1 && GetCVar("dvds_healthregenmultiplier") < 20) MiscellaneousVars[138] = (GetCVar("dvds_healthregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_healthregenmultiplier") > 19 && GetCVar("dvds_healthregenmultiplier") < 39) MiscellaneousVars[138] = (GetCVar("dvds_healthregenmultiplier") - 19) * 5;

 if (GetCVar("dvds_manaregenmultiplier") > -1 && GetCVar("dvds_manaregenmultiplier") < 20) MiscellaneousVars[139] = (GetCVar("dvds_manaregenmultiplier") + 1) * 100;
 if (GetCVar("dvds_manaregenmultiplier") > 19 && GetCVar("dvds_manaregenmultiplier") < 39) MiscellaneousVars[139] = (GetCVar("dvds_manaregenmultiplier") - 19) * 5;

 // Print(d:MiscellaneousVars[86],s:"\n",d:MiscellaneousVars[87],s:"\n",d:MiscellaneousVars[88],s:"\n",d:MiscellaneousVars[89],s:"\n",d:MiscellaneousVars[90],s:"\n",d:MiscellaneousVars[130],s:"\n",d:MiscellaneousVars[131],s:"\n",d:MiscellaneousVars[137],s:"\n",d:MiscellaneousVars[138],s:"\n",d:MiscellaneousVars[139]);

 if (ClassCheck == 1) // Will run the check only once at the beginning of a new game
 {
  // Checks inital HP value of the player in order to assess the right class #. If you want to try to define extra characters, give the character's SpawnHealth a value that doesn't match below.
  if(GetActorProperty(1001,APROP_Health) == 103) CharacterClass = 0; // 0 is Deggaris
  else if(GetActorProperty(1001,APROP_Health) == 81) CharacterClass = 1; // 1 is Illucia
  else if(GetActorProperty(1001,APROP_Health) == 73) CharacterClass = 2; // 2 is Flora
  else { CharacterClass = -1; I3 = 100; } // Unknown Error! :P

  if (CharacterClass == 0) // Deggaris
  {
   // HP Range
   I3 = 103 + random(-4,12) * random(90,110) / 100; // 90-126 HP [103 Base]

   // MP Range
   MaxMana = (20 + random(-18,8) * (random(100,116) / 100) + random(0,4)); // 2-36 MP [20 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Deggaris is the lowest ranking in Base Survivability)
   BaseSurvive = 32 + random(-16,16); // [1.6%-4.8%]

   // Seed Stat Randomization
   MiscellaneousVars[31] = random(1,3); // Agility
   MiscellaneousVars[32] = random(4,6); // Defense
   MiscellaneousVars[33] = random(2,4); // Deftness
   MiscellaneousVars[34] = random(1,3); // Sorcery
   MiscellaneousVars[35] = random(5,7); // Strength
   MiscellaneousVars[36] = random(2,4); // Therapeusis

   if (GameSkill() == SKILL_VERY_EASY) // 33-57
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 200);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_EASY) // 21-45
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 150);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_NORMAL) // 15-45
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis

    if (random(0,1) == 0)
    {
     GiveInventory("ArmorBonusDSBlue", 100);
     CurrentMaxArmor = 200;
     CurrentArmorClass = 2;
     GiveInventory("DSBlueArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     GiveInventory("ArmorBonusDSGreen", 100);
     CurrentMaxArmor = 100;
     CurrentArmorClass = 1;
     GiveInventory("DSGreenArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
   }
   if (GameSkill() == SKILL_HARD) // 15-39
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 50);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_VERY_HARD) // 9-33
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 25);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
  }
  else
  if (CharacterClass == 1) // Illucia
  {
   // HP Range
   I3 = 81 + random(-8,8) * random(90,110) / 100; // 66-97 HP [81 Base]

   // MP Range
   MaxMana = (26 + random(-13,13) * (random(116,132) / 100) + random(3,7)); // 18-58 MP [26 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Illucia is the highest ranking in Base Survivability)
   BaseSurvive = 46 + random(-16,16); // [3.0%-6.2%]

   // Seed Stat Ranomization
   MiscellaneousVars[31] = random(3,5); // Agility
   MiscellaneousVars[32] = random(2,4); // Defense
   MiscellaneousVars[33] = random(2,4); // Deftness
   MiscellaneousVars[34] = random(3,5); // Sorcery
   MiscellaneousVars[35] = random(3,5); // Strength
   MiscellaneousVars[36] = random(2,4); // Therapeusis

   if (GameSkill() == SKILL_VERY_EASY) // 33-57
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 200);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_EASY) // 21-45
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis

    GiveInventory("ArmorBonusDSBlue", 150);
    CurrentMaxArmor = 200;
    CurrentArmorClass = 2;
    GiveInventory("DSBlueArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_NORMAL) // 15-45
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis

    if (random(0,1) == 0)
    {
     GiveInventory("ArmorBonusDSBlue", 100);
     CurrentMaxArmor = 200;
     CurrentArmorClass = 2;
     GiveInventory("DSBlueArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     GiveInventory("ArmorBonusDSGreen", 100);
     CurrentMaxArmor = 100;
     CurrentArmorClass = 1;
     GiveInventory("DSGreenArmorClass", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSDiamondArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
   }
   if (GameSkill() == SKILL_HARD) // 15-39
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 50);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   if (GameSkill() == SKILL_VERY_HARD) // 9-33
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis

    GiveInventory("ArmorBonusDSGreen", 25);
    CurrentMaxArmor = 100;
    CurrentArmorClass = 1;
    GiveInventory("DSGreenArmorClass", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSStoneArmorClass2", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }

  }
  else
  if (CharacterClass == 2) // Flora
  {
   // HP Range
   I3 = 73 + random(-12,4) * random(90,110) / 100; // 55-84 HP [73 Base]

   // MP Range
   MaxMana = (35 + random(-8,18) * (random(132,164) / 100) + random(6,10)); // 35-79 MP [35 Base]

   // Mortal Hit Survivality Rate [x.x% format] (Flora is the middle ranking in Base Survivability)
   BaseSurvive = 39 + random(-16,16); // [2.3%-5.5%]

   // Seed Stat Ranomization
   MiscellaneousVars[31] = random(5,7); // Agility
   MiscellaneousVars[32] = random(1,3); // Defense
   MiscellaneousVars[33] = random(4,6); // Deftness
   MiscellaneousVars[34] = random(4,6); // Sorcery
   MiscellaneousVars[35] = random(1,3); // Strength
   MiscellaneousVars[36] = random(3,5); // Therapeusis
   BaseSceptreEXP = 312;

   if (GameSkill() == SKILL_VERY_EASY) // 37-60
   {
    MiscellaneousVars[31] += random(3,5); // Agility
    MiscellaneousVars[32] += random(3,5); // Defense
    MiscellaneousVars[33] += random(3,5); // Deftness
    MiscellaneousVars[34] += random(3,5); // Sorcery
    MiscellaneousVars[35] += random(3,5); // Strength
    MiscellaneousVars[36] += random(3,5); // Therapeusis
    BaseSceptreEXP = 240;
   }
   if (GameSkill() == SKILL_EASY) // 25-48
   {
    MiscellaneousVars[31] += random(1,3); // Agility
    MiscellaneousVars[32] += random(1,3); // Defense
    MiscellaneousVars[33] += random(1,3); // Deftness
    MiscellaneousVars[34] += random(1,3); // Sorcery
    MiscellaneousVars[35] += random(1,3); // Strength
    MiscellaneousVars[36] += random(1,3); // Therapeusis
    BaseSceptreEXP = 288;
   }
   if (GameSkill() == SKILL_NORMAL) // 19-48
   {
    MiscellaneousVars[31] += random(0,3); // Agility
    MiscellaneousVars[32] += random(0,3); // Defense
    MiscellaneousVars[33] += random(0,3); // Deftness
    MiscellaneousVars[34] += random(0,3); // Sorcery
    MiscellaneousVars[35] += random(0,3); // Strength
    MiscellaneousVars[36] += random(0,3); // Therapeusis
    BaseSceptreEXP = 312;
   }
   if (GameSkill() == SKILL_HARD) // 19-42
   {
    MiscellaneousVars[31] += random(0,2); // Agility
    MiscellaneousVars[32] += random(0,2); // Defense
    MiscellaneousVars[33] += random(0,2); // Deftness
    MiscellaneousVars[34] += random(0,2); // Sorcery
    MiscellaneousVars[35] += random(0,2); // Strength
    MiscellaneousVars[36] += random(0,2); // Therapeusis
    BaseSceptreEXP = 336;
   }
   if (GameSkill() == SKILL_VERY_HARD) // 13-36
   {
    MiscellaneousVars[31] += random(-1,1); // Agility
    MiscellaneousVars[32] += random(-1,1); // Defense
    MiscellaneousVars[33] += random(-1,1); // Deftness
    MiscellaneousVars[34] += random(-1,1); // Sorcery
    MiscellaneousVars[35] += random(-1,1); // Strength
    MiscellaneousVars[36] += random(-1,1); // Therapeusis
    BaseSceptreEXP = 384;
   }

   // Ensures Flora will not start off with armor. :P
   CurrentMaxArmor = 0;
   CurrentArmorClass = 0;
   TakeActorInventory(1001,"Armor", 999999);
   TakeActorInventory(1001,"BasicArmor", 999999);
   TakeActorInventory(1001,"HexenArmor", 999999);
   GiveActorInventory(1001,"DSNoArmorClass", 1);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);

   MiscellaneousVars[140] = GetCVar("dvds_sceptrestartlvl");
   while (MiscellaneousVars[140] > 0)
   {
    SceptreEXPRatio += MiscellaneousVars[140];
    MiscellaneousVars[140] -= 1;
   }   
   SceptreLevelEXP = BaseSceptreEXP * SceptreEXPRatio;
  }

  if (MaxMana < 1) MaxMana = 1;
  CurrentMana = MaxMana;
  MaxManaDouble = MaxMana * 2;

  if (CharacterClass == 2) // Deggaris and Illucia have an extra randomization to their HP, while Flora has a slightly more varied randomization which works more to her favor on easier skill levels.
  {
   // Flora: 55-84 HP
   if (GameSkill() == SKILL_VERY_EASY) I3 = I3 * random(120,140) / 100;	// 66-118 HP [spread of 52]
   if (GameSkill() == SKILL_EASY) I3 = I3 * random(110,130) / 100;		// 60-109 HP [spread of 49]
   if (GameSkill() == SKILL_NORMAL) I3 = I3 * random(100,120) / 100;	// 55-101 HP [spread of 46]
   if (GameSkill() == SKILL_HARD) I3 = I3 * random(90,110) / 100; 		// 49-92 HP [spread of 43]
   if (GameSkill() == SKILL_VERY_HARD) I3 = I3 * random(80,100) / 100;	// 44-84 HP [spread of 40]
  }
  else
  {
   // Deg: 90-126 HP
   // Illu: 66-97 HP
   if (GameSkill() == SKILL_VERY_EASY) I3 = I3 * random(100,120) / 100;	// Deg: 90-151 HP [spread of 61], Illu: 66-116 HP [spread of 50]
   if (GameSkill() == SKILL_EASY) I3 = I3 * random(95,115) / 100;		// Deg: 85-145 HP [spread of 60], Illu: 62-111 HP [spread of 49]
   if (GameSkill() == SKILL_NORMAL) I3 = I3 * random(90,110) / 100;		// Deg: 81-138 HP [spread of 57], Illu: 59-106 HP [spread of 47]
   if (GameSkill() == SKILL_HARD) I3 = I3 * random(85,105) / 100; 		// Deg: 76-132 HP [spread of 56], Illu: 56-102 HP [spread of 46]
   if (GameSkill() == SKILL_VERY_HARD) I3 = I3 * random(80,100) / 100; 	// Deg: 72-126 HP [spread of 54], Illu: 52-97 HP [spread of 45]
  }
  MaxHealthTrue = I3;
  MaxHealthDoubleTrue = MaxHealthTrue * 2;
  SetActorProperty(1001,APROP_Health,I3);
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
  LastHealthValue = I3;
 }
 if (ClassCheck == 5) // Will run the check only once at the beginning of a new game
 {
  LevelCap = 100; // Necessary to prevent the game from giving bogus EXP requirements at level 100-199
  LastHealthValue = GetActorProperty(1001,APROP_Health);
 }
 if (ClassCheck < 6)
 {
  if (MiscellaneousVars[31] < 0) MiscellaneousVars[31] = 0;
  if (MiscellaneousVars[32] < 0) MiscellaneousVars[32] = 0;
  if (MiscellaneousVars[33] < 0) MiscellaneousVars[33] = 0;
  if (MiscellaneousVars[34] < 0) MiscellaneousVars[34] = 0;
  if (MiscellaneousVars[35] < 0) MiscellaneousVars[35] = 0;
  if (MiscellaneousVars[36] < 0) MiscellaneousVars[36] = 0;
  ClassCheck += 1; // Class Check is done six times for randomization purposes.
 }

 int ArmorResistance, ArmRes1, ArmRes2, ArmRes3;
 if (ClassCheck > 2) // Attempting to Interpolate Health Values for the player to show damage values.
 {
  if (HealthDifferenceTimer > 0)
  {
   LastHealthValue = NewHealthValue;
   NewHealthValue = GetActorProperty(1001,APROP_Health);
   HealthDifference = NewHealthValue - LastHealthValue;
   HealthDiffRatio = HealthDifference * 100 / MaxHealthTrue;

   ArmorResistance = 0;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") > 0) ArmorResistance += 3; // Item 1
    if (CheckActorInventory(1001,"PearlyCorset") > 0) ArmorResistance += 7; // Item 2
    if (CheckActorInventory(1001,"WaterFlyingDress") > 0) ArmorResistance += 8; // Item 3
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) ArmorResistance += 2; // Item 4
    if (CheckActorInventory(1001,"CloakofEvasion") > 0) ArmorResistance += 4; // Item 5
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) ArmorResistance += 5; // Item 6
    if (CheckActorInventory(1001,"KissaBra") > 0) ArmorResistance += 6; // Item 7
    if (CheckActorInventory(1001,"DivineShield") > 0) ArmorResistance += 16; // Item 8
    if (CheckActorInventory(1001,"BalrogRing") > 0) ArmorResistance += 2; // Item 9
    if (CheckActorInventory(1001,"DoveRibbon") > 0) ArmorResistance += 9; // Item 10
    if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) ArmorResistance += 5; // Item 11
   }
   else
   {
    if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) ArmorResistance += 35;
    if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) ArmorResistance += 52;
    if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) ArmorResistance += 70;
    if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) ArmorResistance += 93;
    if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) ArmorResistance += 87;
    if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) ArmorResistance += 98;
   }

   SavePercent = ArmorResistance;
   ArmRes1 = 100 - ArmorResistance;
   ArmRes2 = FixedDiv(100,ArmRes1);
   ArmRes3 = FixedMul(HealthDifference,ArmRes2);

   if (HealthDifference != 0)
   {
    if (HealthDifference > 0) // Positive Value
    {
     SetHudSize(640,480,0);
     SetFont("SmallFont");
     HudMessageBold(s:"+",d:HealthDifference,s:" HP (+",d:HealthDiffRatio,s:"%)";0,1,cr_green,64.0,427.0,2.5);
    }
    else
    if (HealthDifference < 0) // Negative Value
    {
     SetHudSize(640,480,0);
     SetFont("SmallFont");
     HealthDifference *= -1;
     HealthDiffRatio *= -1;
     HudMessageBold(s:"-",d:HealthDifference,s:" HP (-",d:HealthDiffRatio,s:"%)";0,1,cr_red,64.0,427.0,2.5);
    }
        
    // PrintBold(d:HealthDifference);
   }
  }
  HealthDifferenceTimer += 1;
 }

 int InterPolLowestHealth, InterPolStrength;
 InterPolLowestHealth = MaxHealthTrue * -1;
 InterPolStrength = MaxHealthTrue / 35; // 8 is the average
 if (InterPolStrength < 4) InterPolStrength = 4;

 int SceptreJumpDmgMulti;
 SceptreJumpDmgMulti = GetActorVelZ(1001) / -6553;
 SceptreJumpDmgMulti += 100;
 if (SceptreJumpDmgMulti < 100) SceptreJumpDmgMulti = 100;
 // PrintBold(d:GetActorVelZ(1001),s:"\n",d:SceptreJumpDmgMulti,s:"%");

 //******************************************************************
 //*For interpolation of HP [like a Heretic or Hexen style counting]*
 //******************************************************************
 if (HPInterpolationDisplay != GetActorProperty(1001,APROP_Health))
 {
  if (HPInterpolationDisplay > GetActorProperty(1001,APROP_Health)) // Go down
  {
   HPInterpolationDisplay -= InterPolStrength;
   if (HPInterpolationDisplay < GetActorProperty(1001,APROP_Health)) HPInterpolationDisplay = GetActorProperty(1001,APROP_Health);
  }
  else
  if (HPInterpolationDisplay < GetActorProperty(1001,APROP_Health)) // Go up
  {
   HPInterpolationDisplay += InterPolStrength;
   if (HPInterpolationDisplay > GetActorProperty(1001,APROP_Health)) HPInterpolationDisplay = GetActorProperty(1001,APROP_Health);
  }

  if (HPInterpolationDisplay < InterPolLowestHealth) HPInterpolationDisplay = InterPolLowestHealth;
 }

/*
 //*****************************************
 //*Melee Weapons and Stamina 'Ammo' System*
 //*****************************************
 checkmeleeweapons = 0;
 SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
 if (CheckWeapon("Fist") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("FistInvisible") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("FistDeggaris") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("FistIllucia") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("FistFlora") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("SauronGauntlets") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("SauronGauntletsIllucia") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("SauronGauntletsFlora") == 1) checkmeleeweapons += 1;
 if (CheckWeapon("SceptreOfEmpyrea") == 1) checkmeleeweapons += 1;
 if (checkmeleeweapons > 0) GiveActorInventory(1001,"UsingMeleeWeapon", 1); else
 {
  if (MiscellaneousVars[21] < MiscellaneousVars[22]) GiveActorInventory(1001,"UsingMeleeWeapon", 1); else TakeActorInventory(1001,"UsingMeleeWeapon", 1);
 }
 SetActivator(0); // Set back to worldly activator at the end of weapon checking.
*/

 //********************
 //*Regenerate Stamina*
 //********************
 // [21] is current Stamina points
 // [22] is maximum Stamina points
 if (MiscellaneousVars[21] < MiscellaneousVars[22])
 {
  staminaregenfinal = 0;
  if (CharacterClass == 0) staminaregenbase = 15; // Deggaris (0.15%/tic = 5.25%/sec)
  if (CharacterClass == 1) staminaregenbase = 13; // Illucia (0.13%/tic = 4.55%/sec)
  if (CharacterClass == 2) staminaregenbase = 9; // Flora (0.09%/tic = 3.15%/sec)
  staminaregenfinal += staminaregenbase;

  if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 16); // +6-13
  if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 14); // +7-15
  if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 10); // +10-20
  staminaregenfinal += staminaregenbase;

  // Check Input for Bonus/Penalties
  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (buttons & BT_FORWARD) C3 = 76;
  else if (buttons & BT_BACK) C3 = 76;
  else if (buttons & BT_MOVELEFT) C3 = 76;
  else if (buttons & BT_MOVERIGHT) C3 = 76;
  else if (buttons & BT_MOVEUP) C3 = 84;
  else if (buttons & BT_MOVEDOWN) C3 = 84;
  else if (buttons & BT_JUMP) C3 = 76;
  else if (buttons & BT_CROUCH) C3 = 120;
  else C3 = 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;
 
  // Check Armor for Bonus/Penalties
  C3 = 1000;
  // Marine Specfic Armors
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	C3 += 12; 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)	C3 += 25; 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	C3 += 50; 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	C3 += 100;  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	C3 += 75;  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	C3 += 150; 
  // Sauron Stuff
  if (CheckActorInventory(1001,"SauronHelmet") > 0)	 	C3 -= 100; 
  if (CheckActorInventory(1001,"SauronGauntletsItem") > 0)	C3 -= 100; 
  // Flora's Stuff
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		C3 -= 375;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0)	 	C3 += 100;  
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0)		C3 += 25;  
  if (CheckActorInventory(1001,"KissaBra") > 0)	 		C3 += 75;  
  if (CheckActorInventory(1001,"DivineShield") > 0)		C3 += 125;  
  if (CheckActorInventory(1001,"DoveRibbon") > 0)	 	C3 += 50;  
  if (C3 < 125) C3 = 125;
  staminaregenfinal = staminaregenfinal * C3 / 1000;

  // Initia1 Stat Check = 16pts of Strength = +1% Stamina Regen Speed [max of +32% @ 512 Str]
  C3 = (MiscellaneousVars[35] / 16) + 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;

  // Secondary Stat Check = 16pts of [?] = +1% Stamina Regen Speed [max of +32% @ 512 [?]]
  if (CharacterClass == 0) C3 = (MiscellaneousVars[35] / 16) + 100; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
  if (CharacterClass == 1) C3 = (MiscellaneousVars[32] / 16) + 100; // Illucia's Secondary Stat is Defense. :P
  if (CharacterClass == 2) C3 = (MiscellaneousVars[31] / 16) + 100; // Flora's Secondary Stat is Agility. :P
  staminaregenfinal = staminaregenfinal * C3 / 100;

  // Divine Avatar = +75% Regen
  if (PowerupRunning[7] > 0) staminaregenfinal = staminaregenfinal * 2;

  // Checks Stamina Regen Rate Menu Option
  staminaregenfinal = staminaregenfinal * MiscellaneousVars[137] / 100;

  // Low Caps Regen to 1 tic minimum
  if (staminaregenfinal < 1) staminaregenfinal = 1;

  MiscellaneousVars[21] += staminaregenfinal;
  if (MiscellaneousVars[21] > MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
 }
 else
 {
  staminaregenfinal = 0;
  if (CharacterClass == 0) staminaregenbase = -4; // Deggaris (-0.04%/tic = -1.40%/sec)
  if (CharacterClass == 1) staminaregenbase = -6; // Illucia (-0.06%/tic = -2.10%/sec)
  if (CharacterClass == 2) staminaregenbase = -7; // Flora (-0.07%/tic = -2.45%/sec)
  staminaregenfinal += staminaregenbase;

  if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 64); // +1-3
  if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 56); // +1-3
  if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 40); // +2-5
  staminaregenfinal += staminaregenbase;

  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (buttons & BT_FORWARD) C3 = 112;
  else if (buttons & BT_BACK) C3 = 112;
  else if (buttons & BT_MOVELEFT) C3 = 112;
  else if (buttons & BT_MOVERIGHT) C3 = 112;
  else if (buttons & BT_MOVEUP) C3 = 108;
  else if (buttons & BT_MOVEDOWN) C3 = 108;
  else if (buttons & BT_JUMP) C3 = 112;
  else if (buttons & BT_CROUCH) C3 = 90;
  else C3 = 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;

  // Check Armor for Bonus/Penalties
  C3 = 1000;
  // Marine Specfic Armors
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	C3 -= 6; 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)	C3 -= 12; 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	C3 -= 25; 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	C3 -= 50;  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	C3 -= 37;  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	C3 -= 75; 
  // Sauron Stuff
  if (CheckActorInventory(1001,"SauronHelmet") > 0)	 	C3 += 50; 
  if (CheckActorInventory(1001,"SauronGauntletsItem") > 0)	C3 += 50; 
  // Flora's Stuff
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		C3 += 187;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0)	 	C3 -= 50;  
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0)		C3 -= 13;  
  if (CheckActorInventory(1001,"KissaBra") > 0)	 		C3 -= 37;  
  if (CheckActorInventory(1001,"DivineShield") > 0)		C3 -= 63;  
  if (CheckActorInventory(1001,"DoveRibbon") > 0)	 	C3 -= 25;  
  if (C3 < 1) C3 = 1;
  if (C3 > 2500) C3 = 2500;
  staminaregenfinal = staminaregenfinal * C3 / 1000;

  // 16pts of Strength = -1% Stamina Degen Speed [max of -32% @ 512 Str]
  C3 = ((MiscellaneousVars[35] / 16) * -1) + 100;
  staminaregenfinal = staminaregenfinal * C3 / 100;

  // Secondary Stat Check = 16pts of [?] = -1% Stamina Degen Speed [max of -32% @ 512 [?]]
  if (CharacterClass == 0) C3 = ((MiscellaneousVars[35] / 16) * -1) + 100; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
  if (CharacterClass == 1) C3 = ((MiscellaneousVars[32] / 16) * -1) + 100; // Illucia's Secondary Stat is Defense. :P
  if (CharacterClass == 2) C3 = ((MiscellaneousVars[31] / 16) * -1) + 100; // Flora's Secondary Stat is Agility. :P
  staminaregenfinal = staminaregenfinal * C3 / 100;

  // Divine Avatar = -50% Degen
  if (PowerupRunning[7] > 0) staminaregenfinal = staminaregenfinal / 2;

  // Low Caps Regen to 1 tic minimum
  if (staminaregenfinal > -1) staminaregenfinal = -1;

  MiscellaneousVars[21] += staminaregenfinal;
  if (MiscellaneousVars[21] < MiscellaneousVars[22]) MiscellaneousVars[21] = MiscellaneousVars[22];
 }

 //***************************
 //*Calculate Stamina for HUD*
 //***************************
 StaminaPercent = MiscellaneousVars[21] * 100 / MiscellaneousVars[22];

 //**********************************************************************************************************************
 //**From here on, script 833 will run the remaining code constantly in order to keep tabs on Survivability ratings, etc**
 //**********************************************************************************************************************

 if (CharacterClass == 0) GiveActorInventory(1001,"DeggarisInPlay", 1); else TakeActorInventory(1001,"DeggarisInPlay", 1); // Deggaris
 if (CharacterClass == 1) GiveActorInventory(1001,"IlluciaInPlay", 1); else TakeActorInventory(1001,"IlluciaInPlay", 1); // Illucia
 if (CharacterClass == 2) GiveActorInventory(1001,"FloraInPlay", 1); else TakeActorInventory(1001,"FloraInPlay", 1); // Flora

 if (CharacterClass == 2)
 {
  // Slot 1
  if (CheckActorInventory(1001,"Chainsaw") > 0) TakeActorInventory(1001,"Chainsaw", 1);
  if (CheckActorInventory(1001,"Chainsaw2") > 0) TakeActorInventory(1001,"Chainsaw2", 1);
  // Slot 2
  if (CheckActorInventory(1001,"FloraLearnedPistols") == 0)
  { 
   if (CheckActorInventory(1001,"Pistol") > 0) TakeActorInventory(1001,"Pistol", 1);
   if (CheckActorInventory(1001,"Pistol2") > 0) TakeActorInventory(1001,"Pistol2", 1);
  }
  // Slot 3
  if (CheckActorInventory(1001,"Shotgun") > 0) TakeActorInventory(1001,"Shotgun", 1);
  if (CheckActorInventory(1001,"Shotgun2") > 0) TakeActorInventory(1001,"Shotgun2", 1);
  // Slot 4
  if (CheckActorInventory(1001,"Chaingun") > 0) TakeActorInventory(1001,"Chaingun", 1);
  if (CheckActorInventory(1001,"Chaingun2") > 0) TakeActorInventory(1001,"Chaingun2", 1);
  // Slot 5
  if (CheckActorInventory(1001,"RocketLauncher") > 0) TakeActorInventory(1001,"RocketLauncher", 1);
  if (CheckActorInventory(1001,"RocketLauncher2") > 0) TakeActorInventory(1001,"RocketLauncher2", 1);
  // Slot 6
  if (CheckActorInventory(1001,"PlasmaRifle") > 0) TakeActorInventory(1001,"PlasmaRifle", 1);
  if (CheckActorInventory(1001,"PlasmaRifle2") > 0) TakeActorInventory(1001,"PlasmaRifle2", 1);
  if (CheckActorInventory(1001,"Repeater") > 0) TakeActorInventory(1001,"Repeater", 1);
  if (CheckActorInventory(1001,"Repeater2") > 0) TakeActorInventory(1001,"Repeater2", 1);
  if (CheckActorInventory(1001,"Karasawa") > 0) TakeActorInventory(1001,"Karasawa", 1);
  if (CheckActorInventory(1001,"Karasawa2") > 0) TakeActorInventory(1001,"Karasawa2", 1);
  // Slot 7
  if (CheckActorInventory(1001,"BFG9000") > 0) TakeActorInventory(1001,"BFG9000", 1);
  if (CheckActorInventory(1001,"BFG90002") > 0) TakeActorInventory(1001,"BFG90002", 1);
 }
 else
 {
  // Slot 1
  if (CheckActorInventory(1001,"SceptreOfEmpyrea") > 0) TakeActorInventory(1001,"SceptreOfEmpyrea", 1);
  // Slot 3
  if (CheckActorInventory(1001,"DiarisLongbow") > 0) TakeActorInventory(1001,"DiarisLongbow", 1);
  // Slot 4
  if (CheckActorInventory(1001,"ImpClaw") > 0) TakeActorInventory(1001,"ImpClaw", 1);
  if (CheckActorInventory(1001,"DarkImpClaw") > 0) TakeActorInventory(1001,"DarkImpClaw", 1);
  if (CheckActorInventory(1001,"CacodemonEye") > 0) TakeActorInventory(1001,"CacodemonEye", 1);
  if (CheckActorInventory(1001,"CacolanternEye") > 0) TakeActorInventory(1001,"CacolanternEye", 1);
  if (CheckActorInventory(1001,"AbaddonEye") > 0) TakeActorInventory(1001,"AbaddonEye", 1);
  // Slot 5
  if (CheckActorInventory(1001,"KnightFist") > 0) TakeActorInventory(1001,"KnightFist", 1);
  if (CheckActorInventory(1001,"BaronFist") > 0) TakeActorInventory(1001,"BaronFist", 1);
  if (CheckActorInventory(1001,"BelphegorFist") > 0) TakeActorInventory(1001,"BelphegorFist", 1);
  if (CheckActorInventory(1001,"BruiserFist") > 0) TakeActorInventory(1001,"BruiserFist", 1);
  if (CheckActorInventory(1001,"ArchonFist") > 0) TakeActorInventory(1001,"ArchonFist", 1);
  if (CheckActorInventory(1001,"PyroFist") > 0) TakeActorInventory(1001,"PyroFist", 1);
  // Slot 6
  if (CheckActorInventory(1001,"IncarnateSkull") > 0) TakeActorInventory(1001,"IncarnateSkull", 1);
  if (CheckActorInventory(1001,"ArchvileHand") > 0) TakeActorInventory(1001,"ArchvileHand", 1);
  if (CheckActorInventory(1001,"DiabloistHand") > 0) TakeActorInventory(1001,"DiabloistHand", 1);
  if (CheckActorInventory(1001,"BalrogFist") > 0) TakeActorInventory(1001,"BalrogFist", 1);
 }


 // Check the Character's Current Mass
 //-----------------------------------
 PlayerMass = 100; // Put at the start just in case some check fails to run so the player will always have at least 100 mass.

 if (CharacterClass == 0) // Deggaris
 {
  PlayerMass = 116; // Deggaris is pretty heavy! :P
  PlayerMass += (MiscellaneousVars[32] / 9); // Defense [Seeds]
  PlayerMass += (MiscellaneousVars[35] / 15); // Strength [Seeds]
  PlayerMass += (MiscellaneousVars[34] / 27); // Sorcery [Seeds]
  PlayerMass += (MiscellaneousVars[36] / 21); // Therapeusis [Seeds]

  // Check Deggaris's Armor Types
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	{ PlayerMass += 4;  PlayerMass = PlayerMass * 101 / 100; } 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)	{ PlayerMass += 8;  PlayerMass = PlayerMass * 102 / 100; } 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	{ PlayerMass += 12; PlayerMass = PlayerMass * 104 / 100; } 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	{ PlayerMass += 16; PlayerMass = PlayerMass * 108 / 100; }  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	{ PlayerMass += 12; PlayerMass = PlayerMass * 112 / 100; }  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	{ PlayerMass += 16; PlayerMass = PlayerMass * 124 / 100; } 

  // Add a point of mass for every 8 levels for Deggaris [max of 25]
  Mas1 = PlayerLevel / 8;

 }
 else
 if (CharacterClass == 1) // Illucia
 {
  PlayerMass = 92; // Illucia is a tad above average for her frame. :P
  PlayerMass += (MiscellaneousVars[32] / 12); // Defense [Seeds]
  PlayerMass += (MiscellaneousVars[35] / 18); // Strength [Seeds]
  PlayerMass += (MiscellaneousVars[34] / 21); // Sorcery [Seeds]
  PlayerMass += (MiscellaneousVars[36] / 15); // Therapeusis [Seeds]

  // Check Illucia's Armor Types
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0)	{ PlayerMass += 4;  PlayerMass = PlayerMass * 101 / 100; } 
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0)	{ PlayerMass += 8;  PlayerMass = PlayerMass * 102 / 100; } 
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0)	{ PlayerMass += 12; PlayerMass = PlayerMass * 104 / 100; } 
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0)	{ PlayerMass += 16; PlayerMass = PlayerMass * 108 / 100; }  
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0)	{ PlayerMass += 12; PlayerMass = PlayerMass * 112 / 100; }  
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0)	{ PlayerMass += 16; PlayerMass = PlayerMass * 124 / 100; } 

  // Add a point of mass for every 10 levels for Illucia [max of 20]
  Mas1 = PlayerLevel / 10;

 }
 else
 if (CharacterClass == 2) // Flora
 {
  PlayerMass = 68; // Flora almost blows over like a twig in the wind. :)
  PlayerMass += (MiscellaneousVars[32] / 15); // Defense [Seeds]
  PlayerMass += (MiscellaneousVars[35] / 21); // Strength [Seeds]
  PlayerMass += (MiscellaneousVars[34] / 15); // Sorcery [Seeds]
  PlayerMass += (MiscellaneousVars[36] / 9); // Therapeusis [Seeds]

  // Check for Flora's specfic armor items
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) 		PlayerMass += 1;
  if (CheckActorInventory(1001,"PearlyCorset") > 0) 		PlayerMass += 3;
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) 	PlayerMass += 4;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) 	PlayerMass += 1;
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) 		PlayerMass += 3;
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) 	PlayerMass += 2;
  if (CheckActorInventory(1001,"KissaBra") > 0) 		PlayerMass += 1;
  if (CheckActorInventory(1001,"BalrogRing") > 0) 		PlayerMass += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) 		PlayerMass += 2;
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) 	PlayerMass += 1;
  if (CheckActorInventory(1001,"DivineShield") > 0) 		{ PlayerMass += 10; PlayerMass *= 2; }
  if (CheckActorInventory(1001,"RuinousShield") > 0) 		{ PlayerMass -= 10; PlayerMass /= 2; }

  // Check Flora's Spiritual Exoskins
  if (CheckActorInventory(1001,"DSSpiritualExoskin1") > 0) 	{ PlayerMass += 4; PlayerMass = PlayerMass * 102 / 100; }
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) 	{ PlayerMass += 12; PlayerMass = PlayerMass * 106 / 100; }
  if (CheckActorInventory(1001,"DSSpiritualExoskin3") > 0) 	{ PlayerMass += 30; PlayerMass = PlayerMass * 115 / 100; }

  if (CheckActorInventory(1001,"ShieldDefense") > 0) 		PlayerMass = PlayerMass * 1250 / 1000;
  if (CheckActorInventory(1001,"ShieldDefense2") > 0)		PlayerMass = PlayerMass * 1500 / 1000;
  if (CheckActorInventory(1001,"ShieldDefense3") > 0)		PlayerMass = PlayerMass * 1875 / 1000;

  // Add a point of mass for every 12 levels for Flora [max of 16/17]
  Mas1 = PlayerLevel / 12;

 }
 PlayerMass += Mas1;
 if (PowerupRunning[7] > 0) PlayerMass *= 4; // 4x Mass when using Divine Avatar
 if (PowerupRunning[4] > 0) PlayerMass *= 128;


 int DegenMinimumHP;
 DegenMinimumHP = MaxHealthTrue / 10;
 if (GameSkill() == SKILL_VERY_EASY) DegenMinimumHP = MaxHealthTrue / 8;
 if (GameSkill() == SKILL_EASY) DegenMinimumHP = MaxHealthTrue / 9;
 if (GameSkill() == SKILL_HARD) DegenMinimumHP = MaxHealthTrue / 11;
 if (GameSkill() == SKILL_VERY_HARD) DegenMinimumHP = MaxHealthTrue / 12;

 int DegenMinimumMana;
 DegenMinimumMana = MaxMana / 80;
 if (GameSkill() == SKILL_VERY_EASY) DegenMinimumMana = MaxMana / 64;
 if (GameSkill() == SKILL_EASY) DegenMinimumMana = MaxMana / 72;
 if (GameSkill() == SKILL_HARD) DegenMinimumMana = MaxMana / 88;
 if (GameSkill() == SKILL_VERY_HARD) DegenMinimumMana = MaxMana / 96;

 int CursedShieldDegenInterval;
 int CursedShieldDegenTimer;

 // Cursed Shield Degeneration Effect [will NOT kill the player though]
 if (CheckActorInventory(1001,"RuinousShield") > 0 && GetActorProperty(1001,APROP_Health) > DegenMinimumHP)
 {
   buttons = GetPlayerInput(0, INPUT_BUTTONS); 
   if (buttons & BT_FORWARD) CursedShieldDegenInterval = 6;
   else if (buttons & BT_BACK) CursedShieldDegenInterval = 6;
   else if (buttons & BT_MOVELEFT) CursedShieldDegenInterval = 6;
   else if (buttons & BT_MOVERIGHT) CursedShieldDegenInterval = 6;
   else if (buttons & BT_ATTACK) CursedShieldDegenInterval = random(6,7);
   else if (buttons & BT_ALTATTACK) CursedShieldDegenInterval = random(6,7);
   else if (buttons & BT_MOVEUP) CursedShieldDegenInterval = 7;
   else if (buttons & BT_MOVEDOWN) CursedShieldDegenInterval = 7;
   else if (buttons & BT_JUMP) CursedShieldDegenInterval = 6;
   else if (buttons & BT_CROUCH) CursedShieldDegenInterval = 2;
   else CursedShieldDegenInterval = 5;

   if (random(1,16) == 1) CursedShieldDegenInterval *= 2;

   // Checks Armor Items and other types for Degen speed.
   C2 = 200;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 -= 20;
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 -= 10;
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 -= 15;
    if (CheckActorInventory(1001,"BalrogRing") > 0) C2 -= 25;
    // total of -34 = 66% speed with all four items
   }
   CursedShieldDegenInterval = CursedShieldDegenInterval * C2 / 200;

   MiscellaneousVars[15] += CursedShieldDegenInterval;
   if (MiscellaneousVars[15] >= CursedShieldDegenTimer)
   {
    // HP Degeneration
    C2 = random(1,8);

    switch(C2)
    {
     case 1: C3 = MaxHealthTrue / 33; break;
     case 2: case 3: C3 = MaxHealthTrue / 67; break;
     case 4: case 5: C3 = MaxHealthTrue / 100; break;
     case 6: case 7: C3 = MaxHealthTrue / 133; break;
     case 8: C3 = MaxHealthTrue / 167; break;
    }

    if (C3 < 1) C3 = 1;
    C1 = GetActorProperty(1001,APROP_Health);
    C1 -= C3;
    if (C1 < DegenMinimumHP) C1 = DegenMinimumHP;
    SetActorProperty(1001,APROP_HEALTH,C1);
    LastHealthValue = GetActorProperty(1001,APROP_Health);
    NewHealthValue = GetActorProperty(1001,APROP_Health);

    if (CurrentMana > DegenMinimumMana)
    {
     // MP Degeneration
     C2 = random(1,8);
     switch(C2)
     {
      case 1: C3 = MaxMana / 33; break;
      case 2: case 3: C3 = MaxMana / 67; break;
      case 4: case 5: C3 = MaxMana / 100; break;
      case 6: case 7: C3 = MaxMana / 133; break;
      case 8: C3 = MaxMana / 167; break;
     }

     if (C3 < 1) C3 = 1;
     C1 = CurrentMana;
     C1 -= C3;
     if (C1 < DegenMinimumMana) C1 = DegenMinimumMana;
     CurrentMana = C1;
    }

    MiscellaneousVars[15] = 0;
    CursedShieldDegenTimer = 175 + random(-10,10);
   }

//   PrintBold(s:"CurseDegen: [",d:I3,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[15],s:"/",d:CursedShieldDegenTimer,s:"]");
 }
 else
 {
  C1 = 0;
  C2 = 0;
  C3 = 0;
  MiscellaneousVars[15] = 0;
  CursedShieldDegenTimer = 175 + random(-10,10);

 }

 //***********************
 //**Health-Regen Checks**
 //***********************
  if (CharacterClass == 0) MiscellaneousVars[14] = 118; // Deggaris Regenerates the Fastest [3.54 seconds]
  if (CharacterClass == 1) MiscellaneousVars[14] = 140; // Illucia has an even speed of Regeneration [4 seconds]
  if (CharacterClass == 2) MiscellaneousVars[14] = 162; // Flora Regenerates the Slowest [4.46 seconds]

  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[14] -= 6;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[14] -= 2;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[14] += 2;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[14] += 6;
  C3 = MiscellaneousVars[32] / 12; // 12pts of Defense will decrease regen wait by 1 tic each
  MiscellaneousVars[14] -= C3; 
  C3 = PlayerLevel / 7; // up to -28
  MiscellaneousVars[14] -= C3; 
  MiscellaneousVars[14] *= 5;

  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (CharacterClass == 2) // Flora
  {
   if (CheckActorInventory(1001,"DoveRibbon") > 0) C1 = MaxHealthDoubleTrue; else C1 = MaxHealthTrue;
  }
  else C1 = MaxHealthTrue;

  I3 = GetActorProperty(1001,APROP_HEALTH);
  if (I3 < C1)
  {
   if (buttons & BT_FORWARD) C3 = 2;
   else if (buttons & BT_BACK) C3 = 2;
   else if (buttons & BT_MOVELEFT) C3 = 2;
   else if (buttons & BT_MOVERIGHT) C3 = 2;
   else if (buttons & BT_ATTACK) C3 = random(2,3);
   else if (buttons & BT_ALTATTACK) C3 = random(2,3);
   else if (buttons & BT_MOVEUP) C3 = 3;
   else if (buttons & BT_MOVEDOWN) C3 = 3;
   else if (buttons & BT_JUMP) C3 = 2;
   else if (buttons & BT_CROUCH) C3 = 9;
   else C3 = 5;

   // Checks Armor Items and other types for regen speed.
   C2 = 100;
   if (CharacterClass == 2)
   {
    if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 += 20;
    if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 += 10;
    if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 += 15;
    if (CheckActorInventory(1001,"BalrogRing") > 0) C2 += 25;
    // total of 70 = 170% speed with all four items
   }
   C3 = C3 * C2 / 100;

   // Divine Avatar = 150% Total Regeneration Speed
   if (PowerupRunning[7] > 0) C3 = C3 * 3 / 2;

   // Flora's Regeneration Speed is reduced by 3/4s [75%] when holding the Ruinous Shield [curse effect]
   if (CharacterClass == 2) if (CheckActorInventory(1001,"RuinousShield") > 0) C3 = C3 * 1 / 4;

   // Use Stamina Ratio to Determine Final Regeneration Speed
   C3 = C3 * MiscellaneousVars[21] / 10000;

   // Checks Health Regen Rate Menu Option
   C3 = C3 * MiscellaneousVars[138] / 100;

   // Low Cap to 1 Tics
   if (C3 < 1) C3 = 1;

   MiscellaneousVars[13] -= C3;
  }
  else MiscellaneousVars[13] = MiscellaneousVars[14] + random(-5,5);

  if (MiscellaneousVars[13] < 1)
  {
   // Base of 1 HP regen
   C3 = 1;

   // Every 50 Levels = +1 HP Regen
   C3 += (PlayerLevel / 50);

   // Every 15 Pts of Strength = +1 HP Regen
   C3 += (MiscellaneousVars[35] / 15);

   // Makes having the Dove Ribbon allow HP Regen up to 200% maximum
   if (CharacterClass == 2) // Flora
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0) C2 = MaxHealthDoubleTrue; else C2 = MaxHealthTrue;
   }
   else C2 = MaxHealthTrue;

   if (I3 > 0 && I3 < C2)
   {
    I3 += C3;
    if (I3 > C2) I3 = C2;
    SetActorProperty(1001,APROP_HEALTH,I3);
    LastHealthValue = GetActorProperty(1001,APROP_Health);
    NewHealthValue = GetActorProperty(1001,APROP_Health);
   }

   MiscellaneousVars[13] = MiscellaneousVars[14] + random(-5,5);
  }

 //***********************
 //**Health-Degen Checks**
 //***********************
  MiscellaneousVars[142] = GetCVar("dvds_healthdegenmode");
  if (MiscellaneousVars[142] == 1)
  {
   if (CharacterClass == 0) MiscellaneousVars[144] = 41; // Deggaris Degenerates the Slowest [1.17 seconds]
   if (CharacterClass == 1) MiscellaneousVars[144] = 35; // Illucia has an even speed of Degeneration [1 second]
   if (CharacterClass == 2) MiscellaneousVars[144] = 29; // Flora Degenerates the Fastest [0.83 seconds]

   if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[144] += 3;
   if (GameSkill() == SKILL_EASY) MiscellaneousVars[144] += 1;
   if (GameSkill() == SKILL_HARD) MiscellaneousVars[144] -= 1;
   if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[144] -= 3;
   C3 = MiscellaneousVars[32] / 24; // 24pts of Defense will increase degen wait by 1 tic each
   MiscellaneousVars[144] += C3; 
   C3 = PlayerLevel / 14; // up to +14
   MiscellaneousVars[144] += C3; 
   MiscellaneousVars[144] *= 5;

   buttons = GetPlayerInput(0, INPUT_BUTTONS); 
   if (CharacterClass == 2) // Flora
   {
    if (CheckActorInventory(1001,"DoveRibbon") > 0) C1 = MaxHealthDoubleTrue; else C1 = MaxHealthTrue;
   }
   else C1 = MaxHealthTrue;
 
   I3 = GetActorProperty(1001,APROP_HEALTH);
   if (I3 > C1)
   {
    if (buttons & BT_FORWARD) C3 = 6;
    else if (buttons & BT_BACK) C3 = 6;
    else if (buttons & BT_MOVELEFT) C3 = 6;
    else if (buttons & BT_MOVERIGHT) C3 = 6;
    else if (buttons & BT_ATTACK) C3 = random(6,7);
    else if (buttons & BT_ALTATTACK) C3 = random(6,7);
    else if (buttons & BT_MOVEUP) C3 = 6;
    else if (buttons & BT_MOVEDOWN) C3 = 6;
    else if (buttons & BT_JUMP) C3 = 7;
    else if (buttons & BT_CROUCH) C3 = 2;
    else C3 = 5;

    // Checks Armor Items and other types for Degen speed.
    C2 = 200;
    if (CharacterClass == 2)
    {
     if (CheckActorInventory(1001,"PearlyCorset") > 0) C2 -= 20;
     if (CheckActorInventory(1001,"EvenstarNecklace") > 0) C2 -= 10;
     if (CheckActorInventory(1001,"AnubisCufflinks") > 0) C2 -= 15;
     if (CheckActorInventory(1001,"BalrogRing") > 0) C2 -= 25;
     // total of -34 = 66% speed with all four items
    }
    C3 = C3 * C2 / 200;

    // Divine Avatar = 62.5% Total Degeneration Speed
    if (PowerupRunning[7] > 0) C3 = C3 * 5 / 8;

    // Flora's Degeneration Speed is multiplied by 4 when holding the Ruinous Shield [curse effect]
    if (CharacterClass == 2) if (CheckActorInventory(1001,"RuinousShield") > 0) C3 = C3 * 4;
 
    // Low Cap to 1 Tics
    if (C3 < 1) C3 = 1;
 
    MiscellaneousVars[143] -= C3;
   }
   else MiscellaneousVars[143] = MiscellaneousVars[144] + random(-5,5);

   if (MiscellaneousVars[143] < 1)
   {
    // Base of 1 HP degen
    C3 = 1;

    // Makes having the Dove Ribbon allow HP Regen up to 200% maximum
    if (CharacterClass == 2) // Flora
    {
     if (CheckActorInventory(1001,"DoveRibbon") > 0) C2 = MaxHealthDoubleTrue; else C2 = MaxHealthTrue;
    }
    else C2 = MaxHealthTrue;

    if (I3 > C2)
    {
     I3 -= C3;
     if (I3 < C2) I3 = C2;
     SetActorProperty(1001,APROP_HEALTH,I3);
     LastHealthValue = GetActorProperty(1001,APROP_Health);
     NewHealthValue = GetActorProperty(1001,APROP_Health);
    }

    MiscellaneousVars[143] = MiscellaneousVars[144] + random(-5,5);
   }
//   PrintBold(s:"Regen: [",d:I3,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[13],s:"/",d:MiscellaneousVars[14],s:"]\n",
//   s:"Degen: [",d:I3,s:"/",d:MaxHealthTrue,s:"] & ",d:buttons,s:"   [",d:MiscellaneousVars[143],s:"/",d:MiscellaneousVars[144],s:"]");
  }
 //************************
 //**Flora Specfic Checks**
 //************************

 if (ClassCheck > 5 && CharacterClass == 2) // Will run the check only once at the beginning of a new game
 {
  LevelCap = 100;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"PearlyCorset") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"KissaBra") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"BalrogRing") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"DivineShield") > 0) LevelCap += 9;
  if (CheckActorInventory(1001,"RuinousShield") > 0) LevelCap += 4;

  if (LevelCap == 199) LevelCap = 200;
  if (LevelCap > 200) LevelCap = 200;
 }

 // Checks to give her a Doomspell bonus for damage
 if (CharacterClass == 2 && CheckActorInventory(1001,"FloraDoomspellBonus") == 0) GiveActorInventory(1001,"FloraDoomspellBonus", 1);

 int UncurseInterval;
 UncurseInterval = 700; // 70 tics [up to -17 tics with all items]
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseInterval -= 50;
 if (CheckActorInventory(1001,"BalrogRing") > 0) UncurseInterval -= 40;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) UncurseInterval -= 30;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseInterval -= 20;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) UncurseInterval -= 20;
 if (CheckActorInventory(1001,"KissaBra") > 0) UncurseInterval -= 10;

 int UncurseIntervalChance;
 UncurseIntervalChance = 40;
 if (CheckActorInventory(1001,"SafeTeaShoes") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"PearlyCorset") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"CloakofEvasion") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseIntervalChance += 3;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"KissaBra") > 0) UncurseIntervalChance += 1;
 if (CheckActorInventory(1001,"BalrogRing") > 0) UncurseIntervalChance += 2;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) UncurseIntervalChance += 1;

 if (CheckActorInventory(1001,"SauronHelmet") > 0) UncurseIntervalChance -= 2;
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) UncurseIntervalChance -= 3;

 if (CheckActorInventory(1001,"TheOneRing") > 0) UncurseIntervalChance += 11;


 int UncurseIntervalChance2;
 UncurseIntervalChance2 = 8;
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) UncurseIntervalChance2 += 4;
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) UncurseIntervalChance2 += 6;
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) UncurseIntervalChance += 2;

 // Checks to determine how many points the Ruinous Shield has gathered towards becoming an uncursed Divine Shield
 if (CharacterClass == 2 && CheckActorInventory(1001,"RuinousShield") > 0) // Flora
 {
  // Amount of Points is determined by Difficulty level
  if (GameSkill() == SKILL_VERY_EASY) RuinousPtsNeeded = 192;
  if (GameSkill() == SKILL_EASY) RuinousPtsNeeded = 224;
  if (GameSkill() == SKILL_NORMAL) RuinousPtsNeeded = 288;
  if (GameSkill() == SKILL_HARD) RuinousPtsNeeded = 384;
  if (GameSkill() == SKILL_VERY_HARD) RuinousPtsNeeded = 512;

  RuinousShieldPercent = RuinousShieldPts * 100 / RuinousPtsNeeded;

  MiscellaneousVars[11] += 10 * (MiscellaneousVars[89] / 100);
  if (MiscellaneousVars[11] >= UncurseInterval)
  {
   MiscellaneousVars[11] -= UncurseInterval;
   if (random(1,100) <= UncurseIntervalChance) // 35-66% chance of increase
   {
    if (random(1,100) <= UncurseIntervalChance2)
    {
     RuinousShieldPts += 2;
     if (CheckActorInventory(1001,"PearlyCorset") > 0) RuinousShieldPts += 2;
     if (CheckActorInventory(1001,"DoveRibbon") > 0) RuinousShieldPts += 2;
    }
    else
    {
     RuinousShieldPts += 1;
     if (CheckActorInventory(1001,"PearlyCorset") > 0) RuinousShieldPts += 1;
     if (CheckActorInventory(1001,"DoveRibbon") > 0) RuinousShieldPts += 1;
    }
   }
  }

   // Once You Exceed the Amount, the Shield Automatically Uncurses!
  if (RuinousShieldPts > RuinousPtsNeeded)
  {
   GiveActorInventory(1001,"DivineShield", 1);
   if (CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1);
   PrintBold(s:"CONGRADULATIONS!!\n\nTHE RUINOUS SHIELD IS NO LONGER CURSED!\n\nYOU NOW POSSESS AND WIELD THE MIGHTY 'DIVINE SHIELD'!!");
   AmbientSound("Uncursed",127);
   MiscellaneousVars[11] = 0;
  }
 }

 // Checks to make sure you cannot hold the Ruinous Shield if you already have a Divine Shield (the latter is the uncursed version of the former).
 if (CharacterClass == 2 && CheckActorInventory(1001,"DivineShield") > 0 && CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1); // Flora

 int DY1 = MaxHealthTrue * -1;
 // [12] is for the death time counter, to fade the screen to blackish-red when the player dies.
 if (GetActorProperty(1001,APROP_Health) < 1)
 {
  MiscellaneousVars[12] += 1;
  // Fading Death Heart Beats, if not gibbed
  if (GetActorProperty(1001,APROP_Health) > DY1)
  {
   SetActivator(1001); // Set to Player's ID
   if (MiscellaneousVars[12] == 18) localambientsound("heartb2", 120); // +20
   if (MiscellaneousVars[12] == 20) localambientsound("heartb2", 120); // +20

   if (MiscellaneousVars[12] == 42) localambientsound("heartb2", 103); // +22
   if (MiscellaneousVars[12] == 44) localambientsound("heartb2", 103); // +22

   if (MiscellaneousVars[12] == 68) localambientsound("heartb2", 86); // +26
   if (MiscellaneousVars[12] == 70) localambientsound("heartb2", 86); // +26

   if (MiscellaneousVars[12] == 100) localambientsound("heartb2", 69); // +32
   if (MiscellaneousVars[12] == 102) localambientsound("heartb2", 69); // +32

   if (MiscellaneousVars[12] == 140) localambientsound("heartb2", 52); // +40
   if (MiscellaneousVars[12] == 142) localambientsound("heartb2", 52); // +40

   if (MiscellaneousVars[12] == 188) localambientsound("heartb2", 35); // +62
   if (MiscellaneousVars[12] == 190) localambientsound("heartb2", 35); // +50

   if (MiscellaneousVars[12] == 250) localambientsound("heartb2", 18); // +62
   if (MiscellaneousVars[12] == 252) localambientsound("heartb2", 18); // +62
   SetActivator(0); // Set back to worldly activator
  }
  if (GetActorProperty(1001,APROP_Health) > DY1)
  {
   if (MiscellaneousVars[12] == 115)
   {
    if (CheckActorInventory(1001,"PlayerDeathFadeOut") < 1) GiveActorInventory(1001,"PlayerDeathFadeOut", 1);
    SetActivator(1001); // Set to Player's ID
    FadeRange(16, 0, 0, 0.0, 16, 0, 0, 1.0, 4.0);
    SetActivator(0); // Set back to worldly activator
   }
   if (MiscellaneousVars[12] == 260) FadeRange(16, 0, 0, 1.0, 255, 0, 0, 1.0, 1.0); // Intended to show a "Game Over" Euqse Screen
  }
  else
  {
   if (MiscellaneousVars[12] == 4)
   {
    if (CheckActorInventory(1001,"PlayerDeathFadeOut") < 1) GiveActorInventory(1001,"PlayerDeathFadeOut", 1);
    SetActivator(1001); // Set to Player's ID
    FadeRange(0, 0, 0, 0.0, 255, 0, 0, 1.0, 0.8);
    SetActivator(0); // Set back to worldly activator
   }
  }
 }
 else
 {
  if (MiscellaneousVars[12] > 114)
  {
   SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
   FadeRange(0, 0, 0, 0.0, 0, 0, 0, 0.0, 0.0);
   SetActivator(0); // Set back to worldly activator at the end of weapon checking.
  }
  if (CheckActorInventory(1001,"PlayerDeathFadeOut") > 0) TakeActorInventory(1001,"PlayerDeathFadeOut", 1);
  MiscellaneousVars[12] = 0;
 }

 int SceptreEXPNeededLevel1, SceptreEXPNeededLevel2, SceptreEXPNeededLevel3, SceptreEXPNeededLevel4, SceptreEXPNeededLevel5, SceptreEXPNeededLevel6, SceptreEXPNeededLevel7, SceptreEXPNeededLevel8, SceptreEXPNeededLevel9, SceptreEXPNeededLevel10, SceptreEXPNeededLevel11, SceptreEXPNeededLevel12, SceptreEXPNeededLevel13, SceptreEXPNeededLevel14, SceptreEXPNeededLevel15, SceptreEXPNeededLevel16;
 // Checks Flora's EXP for using the Sceptre of Empyrea
 if (CharacterClass == 2) // Flora
 {
  BaseSceptreEXP = 312;
  if (GameSkill() == SKILL_VERY_EASY) BaseSceptreEXP = 240;
  if (GameSkill() == SKILL_EASY) BaseSceptreEXP = 288;
  if (GameSkill() == SKILL_NORMAL) BaseSceptreEXP = 312;
  if (GameSkill() == SKILL_HARD) BaseSceptreEXP = 336;
  if (GameSkill() == SKILL_VERY_HARD) BaseSceptreEXP = 384;

  SceptreEXPNeededLevel1 = BaseSceptreEXP * 1; // +1
  SceptreEXPNeededLevel2 = BaseSceptreEXP * 3; // +2
  SceptreEXPNeededLevel3 = BaseSceptreEXP * 6; // +3
  SceptreEXPNeededLevel4 = BaseSceptreEXP * 10; // +4
  SceptreEXPNeededLevel5 = BaseSceptreEXP * 15; // +5
  SceptreEXPNeededLevel6 = BaseSceptreEXP * 21; // +6
  SceptreEXPNeededLevel7 = BaseSceptreEXP * 28; // +7
  SceptreEXPNeededLevel8 = BaseSceptreEXP * 36; // +8
  SceptreEXPNeededLevel9 = BaseSceptreEXP * 45; // +9
  SceptreEXPNeededLevel10 = BaseSceptreEXP * 55; // +10
  SceptreEXPNeededLevel11 = BaseSceptreEXP * 66; // +11
  SceptreEXPNeededLevel12 = BaseSceptreEXP * 78; // +12
  SceptreEXPNeededLevel13 = BaseSceptreEXP * 91; // +13
  SceptreEXPNeededLevel14 = BaseSceptreEXP * 105; // +14
  SceptreEXPNeededLevel15 = BaseSceptreEXP * 120; // +15
  SceptreEXPNeededLevel16 = BaseSceptreEXP * 136; // +16

  if (SceptreLevelEXP >= SceptreEXPNeededLevel16) SceptreActualLevel = 16;
  if (SceptreLevelEXP < SceptreEXPNeededLevel16) SceptreActualLevel = 15;
  if (SceptreLevelEXP < SceptreEXPNeededLevel15) SceptreActualLevel = 14;
  if (SceptreLevelEXP < SceptreEXPNeededLevel14) SceptreActualLevel = 13;
  if (SceptreLevelEXP < SceptreEXPNeededLevel13) SceptreActualLevel = 12;
  if (SceptreLevelEXP < SceptreEXPNeededLevel12) SceptreActualLevel = 11;
  if (SceptreLevelEXP < SceptreEXPNeededLevel11) SceptreActualLevel = 10;
  if (SceptreLevelEXP < SceptreEXPNeededLevel10) SceptreActualLevel = 9;
  if (SceptreLevelEXP < SceptreEXPNeededLevel9) SceptreActualLevel = 8;
  if (SceptreLevelEXP < SceptreEXPNeededLevel8) SceptreActualLevel = 7;
  if (SceptreLevelEXP < SceptreEXPNeededLevel7) SceptreActualLevel = 6;
  if (SceptreLevelEXP < SceptreEXPNeededLevel6) SceptreActualLevel = 5;
  if (SceptreLevelEXP < SceptreEXPNeededLevel5) SceptreActualLevel = 4;
  if (SceptreLevelEXP < SceptreEXPNeededLevel4) SceptreActualLevel = 3;
  if (SceptreLevelEXP < SceptreEXPNeededLevel3) SceptreActualLevel = 2;
  if (SceptreLevelEXP < SceptreEXPNeededLevel2) SceptreActualLevel = 1;
  if (SceptreLevelEXP < SceptreEXPNeededLevel1) SceptreActualLevel = 0;

  int i = 0;
  str SceptreLevelItem;
  // REVISED: Changed If statements info a for block for the Sceptre-Level Bitfield (7/3/12)
  if (SceptreActualLevel != MiscellaneousVars[3]) // [3] is for checking Sceptre Levels so it doesn't have to run EVERY tic and lag the game too badly.
  {
   for (i = 1; i < 17; i++)
   {
    SceptreLevelItem = StrParam(s:"SceptreLevel", d:i);

    if (SceptreActualLevel == i)
    GiveActorInventory(1001, SceptreLevelItem, 1);
     else
    TakeActorInventory(1001, SceptreLevelItem, 1);
   }
   MiscellaneousVars[3] = SceptreActualLevel;
  }

 }

 //*********************************************************************
 //**General Modifiers that are universal between all three characters**
 //*********************************************************************
 if (CheckActorInventory(1001,"SauronHelmet") > 0) { PlayerMass += 17; PlayerMass = PlayerMass * 117 / 100; }
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) { PlayerMass += 5; PlayerMass = PlayerMass * 105 / 100; } // Deggaris
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { PlayerMass += 6; PlayerMass = PlayerMass * 106 / 100; } // Illucia
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { PlayerMass += 4; PlayerMass = PlayerMass * 104 / 100; } // Flora
 if (CheckActorInventory(1001,"TheOneRing") > 0) { PlayerMass += 10; PlayerMass = PlayerMass * 110 / 100; }
 SetActorProperty(1001,APROP_Mass,PlayerMass);


 // Check Buddha Mode (Works for Survivability Rate [like a "Last Chance Hit Point" when you'd otherwise die from an attack], like in various RPGs)
 //------------------
 BuddhaRNGVal = random (1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]

 // 0.1% for every 2 levels (max of 50 or 5.0% [max of 100 or 10.0% for Flora at Level 200])
 // BaseSurvive: Deggaris = 3.2%, Illucia = 4.6%, Flora = 3.9%
 BuddhaCurrentVal = (PlayerLevel / 2) + BaseSurvive;

 // Every 3/4/5 Points of Defenses = 0.1% increase to Survivability Rate
 if (GameSkill() < SKILL_NORMAL) BuddhaCurrentVal += MiscellaneousVars[32] / 3;
 if (GameSkill() == SKILL_NORMAL) BuddhaCurrentVal += MiscellaneousVars[32] / 4;
 if (GameSkill() > SKILL_NORMAL) BuddhaCurrentVal += MiscellaneousVars[32] / 5;

 // Abhorrent's Equipment Set
 if (CheckActorInventory(1001,"SauronHelmet") > 0) BuddhaCurrentVal += 175; // Helmet = 17.5%
 if (CheckActorInventory(1001,"SauronGauntlets") > 0) BuddhaCurrentVal += 50; // Gauntlets (Deggaris) = 5.0%
 if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) BuddhaCurrentVal += 60; // Gauntlets (Illucia) = 6.0%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) BuddhaCurrentVal += 40; // Gauntlets (Flora) = 4.0%
 if (CheckActorInventory(1001,"TheOneRing") > 0) BuddhaCurrentVal += 333; // The One Ring = 33.3%

 if (CharacterClass != 2) // Deggaris and Illucia take advantage of Doom-equse Armor, however Flora cannot.
 {
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) BuddhaCurrentVal += 5; // Green Armor = 0.5% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) BuddhaCurrentVal += 10; // Blue Armor = 1.0% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) BuddhaCurrentVal += 16; // Stone Skin [1] = 1.6% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) BuddhaCurrentVal += 44; // Diamond Skin [1] = 4.4% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) BuddhaCurrentVal += 66; // Stone Skin [2] = 6.6% [Deggaris and Illucia Only]
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) BuddhaCurrentVal += 176; // Diamond Skin [2] = 17.6% [Deggaris and Illucia Only]
 }
 if (CharacterClass == 2) // Items only Flora can make use of
 {
  if (CheckActorInventory(1001,"DSSpiritualExoskin1") > 0) BuddhaCurrentVal += 32; // Spiritual Exoskin = 3.2% [Flora Only]
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) BuddhaCurrentVal += 96; // Greater Spiritual Exoskin = 9.6% [Flora Only]
  if (CheckActorInventory(1001,"DSSpiritualExoskin2") > 0) BuddhaCurrentVal += 288; // Perfected Spiritual Exoskin = 28.8% [Flora Only]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) BuddhaCurrentVal += 100; // Anubis Cufflinks = 10.0% [Flora Only]
  if (CheckActorInventory(1001,"DoveRibbon") > 0) BuddhaCurrentVal += 150; // Dove Ribbon = 15.0% [Flora Only]
 }
 // Divine Avatar = (25.0% of remaining amount uncovered)
 if (PowerupRunning[7] > 0)
 {  
  GodlyAvatarBuddhaAdd = (1000 - BuddhaCurrentVal) / 4;
  BuddhaCurrentVal += GodlyAvatarBuddhaAdd;
 }

 // Kissa's Armored Brassiere = 25.0%
 if (CheckActorInventory(1001,"KissaBra") > 0)
 {  
  BuddhaCurrentVal += 250; 
  if (BuddhaCurrentVal > 938) BuddhaCurrentVal = 938;
 } 
 else
 {
  if (BuddhaCurrentVal > 875) BuddhaCurrentVal = 875;
 }

 if (CheckActorInventory(1001,"RuinousShield") > 0) BuddhaCurrentVal = BuddhaCurrentVal / 10; // Ruinous Shield divides Survival Rate by 10

 // For the Status Bar (Only shows an int value, not a floating point amount)
 SurvivalWhole = BuddhaCurrentVal / 10;

 if (BuddhaRNGVal <= BuddhaCurrentVal) SetPlayerProperty(1,1,PROP_BUDDHA); // Buddha Mode is basically perfect for emulating Survivability [this also means, you can't use the Buddha cheat directly though]
 else SetPlayerProperty(1,0,PROP_BUDDHA);

 // Dealing Critical Hits [intended to only affect physical weapons like melee, guns and the Diaris Bow, Hellcore weapons and magic will not be amplified]
 BuddhaCurrentVal = BuddhaCurrentVal / 4; // Base Critical Hit Rate is always 1/4 of your survival rate.
 BuddhaRNGVal = random (1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]
 if (BuddhaCurrentVal < 1) BuddhaCurrentVal = 1;
 if (BuddhaRNGVal <= BuddhaCurrentVal) GiveActorInventory(1001,"DealCriticalHit", 1);
 else TakeActorInventory(1001,"DealCriticalHit", 1);

 //**********************************************************
 //**********************************************************
 //**********************************************************
 //** Hellcore Cooldown Process [25 tics = 1% of cooldown] **
 //**********************************************************
 //**********************************************************
 //**********************************************************
 if (HellcoreOverheatLevel > 0 && GetActorProperty(1001,APROP_HEALTH) > 0)
 {
  HellcoreCoolRatio = 4; // 25 tics = 100 units [or 1% cooldown], so 1 tic = 4 units (or 0.04% cooldown)
  if (CheckActorInventory(1001,"DoveRibbon") > 0) HellcoreCoolRatio *= 3; // Dove Ribbon quickly cools down Hellcore meter.
  if (PowerupTimer[7] > 0) HellcoreCoolRatio = HellcoreCoolRatio * 3 / 2; // Divine Avatar speeds up cooldown by 50%

  // Check Hellcore Cooldown Multiplier in Options
  HellcoreCoolRatio = (HellcoreCoolRatio * MiscellaneousVars[131]) / 100;
  if (HellcoreCoolRatio < 1) HellcoreCoolRatio = 1;

  HellcoreOverheatLevel -= HellcoreCoolRatio;
 }
 if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

 // Converts Hellcore Timer to % format for HUD display
 HellcorePercentFull = HellcoreOverheatLevel / 100;
 if (HellcorePercentFull < 0) HellcorePercentFull = 0;
 if (HellcorePercentFull > 1000) HellcorePercentFull = 1000;

 H1 = 0;
 SetActivator(1001); // Set to Player's ID to check for weapons from this actor.
 if (CheckWeapon("ImpClaw") == 1) H1 += 1;
 if (CheckWeapon("DarkImpClaw") == 1) H1 += 1; 
 if (CheckWeapon("CacodemonEye") == 1) H1 += 1; 
 if (CheckWeapon("CacolanternEye") == 1) H1 += 1; 
 if (CheckWeapon("AbaddonEye") == 1) H1 += 1; 
 if (CheckWeapon("KnightFist") == 1) H1 += 1; 
 if (CheckWeapon("BaronFist") == 1) H1 += 1; 
 if (CheckWeapon("BelphegorFist") == 1) H1 += 1; 
 if (CheckWeapon("BruiserFist") == 1) H1 += 1; 
 if (CheckWeapon("ArchonFist") == 1) H1 += 1; 
 if (CheckWeapon("PyroFist") == 1) H1 += 1; 
 if (CheckWeapon("IncarnateSkull") == 1) H1 += 1; 
 if (CheckWeapon("ArchvileHand") == 1) H1 += 1; 
 if (CheckWeapon("DiabloistHand") == 1) H1 += 1; 
 if (CheckWeapon("BalrogFist") == 1) H1 += 1; 
 if (H1 > 0) { GiveActorInventory(1001,"FloraUsingHellcoreWeapon", 1); } else { TakeActorInventory(1001,"FloraUsingHellcoreWeapon", 1); }
 SetActivator(0); // Set back to worldly activator at the end of weapon checking.


 if (CharacterClass == 2) 
 {
  TakeActorInventory(1001,"FloraHellcoreNotOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore25PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore50PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore75PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore100PercentOverheated", 1);
  TakeActorInventory(1001,"FloraHellcore250PercentOverheated", 1);

  if (HellcoreOverheatLevel < 2500) GiveActorInventory(1001,"FloraHellcoreNotOverheated", 1);
  if (HellcoreOverheatLevel > 2499 && HellcoreOverheatLevel < 5000) GiveActorInventory(1001,"FloraHellcore25PercentOverheated", 1);
  if (HellcoreOverheatLevel > 4999 && HellcoreOverheatLevel < 7500) GiveActorInventory(1001,"FloraHellcore50PercentOverheated", 1);
  if (HellcoreOverheatLevel > 7499 && HellcoreOverheatLevel < 10000) GiveActorInventory(1001,"FloraHellcore75PercentOverheated", 1);
  if (HellcoreOverheatLevel > 9999 && HellcoreOverheatLevel < 25000) GiveActorInventory(1001,"FloraHellcore100PercentOverheated", 1);
  if (HellcoreOverheatLevel > 24999) GiveActorInventory(1001,"FloraHellcore250PercentOverheated", 1);
 }

 //*****************************
 //*****************************
 //** Aeon Point Distribution **
 //*****************************
 //*****************************

 // Kills
 MiscellaneousVars[63] = 0;
 for (i = 1; i < 37; i++) { MiscellaneousVars[63] += MonstersKilled[i]; }
 MiscellaneousVars[61] = MiscellaneousVars[63] / 384;

 if (MiscellaneousVars[62] < MiscellaneousVars[61])
 {
  MiscellaneousVars[25] += 1;
  MiscellaneousVars[62] += 1;

  if (PlayerLevel >= AeonPointStartLevel)
  {
   SetHudSize(0,0,0);
   HudMessage(s:"You have gained 1 Aeon Point for killing enough monsters!\n\nRemember to allocate your Aeon Points as soon as possible...";
   HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
  }
 }

 // Secrets
 MiscellaneousVars[64] = 0;
 for (i = 1; i < 37; i++) { MiscellaneousVars[64] += SecretsFound[i]; }
 MiscellaneousVars[59] = MiscellaneousVars[64] / 8;

 if (MiscellaneousVars[60] < MiscellaneousVars[59])
 {
  MiscellaneousVars[25] += 1;
  MiscellaneousVars[60] += 1;

  if (PlayerLevel >= AeonPointStartLevel)
  {
   SetHudSize(0,0,0);
   HudMessage(s:"You have gained 1 Aeon Point for finding enough secrets!\n\nRemember to allocate your Aeon Points as soon as possible...";
   HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
  }
 }

 // Items
 MiscellaneousVars[56] = 0;
 for (i = 1; i < 37; i++) { MiscellaneousVars[56] += ItemsFound[i]; }
 MiscellaneousVars[57] = MiscellaneousVars[56] / 256;

 if (MiscellaneousVars[58] < MiscellaneousVars[57])
 {
  MiscellaneousVars[25] += 1;
  MiscellaneousVars[58] += 1;

  if (PlayerLevel >= AeonPointStartLevel)
  {
   SetHudSize(0,0,0);
   HudMessage(s:"You have gained 1 Aeon Point for finding enough special items!\n\nRemember to allocate your Aeon Points as soon as possible...";
   HUDMSG_LOG,3432,cr_orange,1.5,0.5,2.75);
  }
 }

 if (MiscellaneousVars[25] < 1) MiscellaneousVars[24] = 0;
 if (MiscellaneousVars[31] > 511 && MiscellaneousVars[32] > 511 && MiscellaneousVars[33] > 511 && MiscellaneousVars[34] > 511 && MiscellaneousVars[35] > 511 && MiscellaneousVars[36] > 511) MiscellaneousVars[24] = 0;

 //***************************************************************************
 //***************************************************************************
 //************* Armor Stuff for DVII-DS's armor items :P ********************
 //** Note: ONLY FLORA [(CharacterClass == 2)] CAN USE THESE ITEMS LEGALLY. **
 //***************************************************************************
 //***************************************************************************
 ArmorBits = 0;
 FloraArmorClass = 0;
 if (CharacterClass == 2)
 {
  // These 11 items are all part of a bitfield
  // "FloraArmorClass" is mainly for a display purpose on the HUD than it having an actual affect on the damage taken.
  // The "PermenantArmorBits[#]" items in the section below are the actual mechanic that gives her resistances to damage].
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { ArmorBits += 1; FloraArmorClass += 3; } // Item 1
  if (CheckActorInventory(1001,"PearlyCorset") > 0) { ArmorBits += 2; FloraArmorClass += 7; } // Item 2
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { ArmorBits += 4; FloraArmorClass += 8; } // Item 3
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { ArmorBits += 8; FloraArmorClass += 2; } // Item 4
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) { ArmorBits += 16; FloraArmorClass += 4; } // Item 5
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { ArmorBits += 32; FloraArmorClass += 5; } // Item 6
  if (CheckActorInventory(1001,"KissaBra") > 0) { ArmorBits += 64; FloraArmorClass += 6; } // Item 7
  if (CheckActorInventory(1001,"DivineShield") > 0) { ArmorBits += 128; FloraArmorClass += 16; } // Item 8
  if (CheckActorInventory(1001,"BalrogRing") > 0) { ArmorBits += 256; FloraArmorClass += 2; } // Item 9
  if (CheckActorInventory(1001,"DoveRibbon") > 0) { ArmorBits += 512; FloraArmorClass += 9; } // Item 10
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { ArmorBits += 1024; FloraArmorClass += 5; } // Item 11

  // Ruinous Shield is Cursed, so it acts seperately. (do note the Cursed Shield gives penalties which are only called bonuses in a techincal sense)
  if (CheckActorInventory(1001,"RuinousShield") > 0) { GiveActorInventory(1001,"CursedShieldBonusATK", 1); FloraArmorClass = FloraArmorClass * 100 / 256; } else { TakeActorInventory(1001,"CursedShieldBonusATK", 1); } // Item 12
  if (CheckActorInventory(1001,"RuinousShield") > 0) { GiveActorInventory(1001,"CursedShieldBonusDEF", 1); FloraArmorClass = FloraArmorClass * 100 / 256; } else { TakeActorInventory(1001,"CursedShieldBonusDEF", 1); } // Item 12

  str ArmorBitsItem;
  // REVISED: Changed If statements info a for block for the Armor Bitfield (7/3/12)
  if (ArmorBits != MiscellaneousVars[1]) // [1] is for checking Flora's Armor Bitfield so it doesn't have to run EVERY tic and lag the game too badly.
  {
   for (i = 0; i < 2048; i++)
   {
    ArmorBitsItem = StrParam(s:"PermenantArmorBits", d:i);

    if (ArmorBits == i)
    GiveActorInventory(1001, ArmorBitsItem, 1);
     else
    TakeActorInventory(1001, ArmorBitsItem, 1);
   }
   MiscellaneousVars[1] = ArmorBits;
  }

  // Safe Tea Boots [25% chance of damagefloor/ironfeet guard during normal incursion of damage]
  // Cloak of Evasion [12.5% chance of damagefloor/ironfeet guard during normal incursion of damage]
  IronFeetChance = 0;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) IronFeetChance += 250;
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) IronFeetChance += 125;
  if (IronFeetChance > 1000) IronFeetChance = 1000;
  if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) TakeActorInventory(1001,"FloraArmorFloorGuard", 1);   
  if (random(1,1000) <= IronFeetChance && CheckActorInventory(1001,"FloraArmorFloorGuard") < 1) GiveActorInventory(1001,"FloraArmorFloorGuard", 1);

  FearChance = 200;
  if (CheckActorInventory(1001,"TheOneRing") > 0) FearChance = FearChance * 5 / 3;
  // Anubis Cufflinks [20% (33.3% with One Ring) chance of brief fear-effect on all hostile creatures with attacks]
  if (CheckActorInventory(1001,"AnubisCufflinksFear") > 0) TakeActorInventory(1001,"AnubisCufflinksFear", 1);   
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0 && random(1,1000) <= FearChance && CheckActorInventory(1001,"AnubisCufflinksFear") < 1) GiveActorInventory(1001,"AnubisCufflinksFear", 1);

  // Damage Boosts from DVII-DS Armors
  Armor2Bits = 0;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) Armor2Bits += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Armor2Bits += 2;

  if (Armor2Bits == 1) GiveActorInventory(1001,"EvenstarNecklaceBoost", 1); else TakeActorInventory(1001,"EvenstarNecklaceBoost", 1);
  if (Armor2Bits == 2) GiveActorInventory(1001,"DoveRibbonDamage", 1); else TakeActorInventory(1001,"DoveRibbonDamage", 1);
  if (Armor2Bits == 3) GiveActorInventory(1001,"EvenstarDoveDamage", 1); else TakeActorInventory(1001,"EvenstarDoveDamage", 1);

  // Speed Boosts from DVII-DS Armors
  Armor3Bits = 0;
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) Armor3Bits += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Armor3Bits += 2;
  if (Armor3Bits == 1) GiveActorInventory(1001,"CloakofEvasionBoost", 1); else TakeActorInventory(1001,"CloakofEvasionBoost", 1);
  if (Armor3Bits == 2) GiveActorInventory(1001,"DoveRibbonSpeed", 1); else TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (Armor3Bits == 3) GiveActorInventory(1001,"EvasionDoveSpeed", 1); else TakeActorInventory(1001,"EvasionDoveSpeed", 1);


  // Falcon Knife Earrings [+50% extra damage overall]
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0)
  {
   if (CheckActorInventory(1001,"FalconKnifeDamage") < 1) GiveActorInventory(1001,"FalconKnifeDamage", 1);
  }
  else
  {
   if (CheckActorInventory(1001,"FalconKnifeDamage") > 0) TakeActorInventory(1001,"FalconKnifeDamage", 1);   
  }

  int DivineShieldBlock, DivineShieldBits;
  // Gets the Divine Shield's blocking ability and occurance rate
  if (CheckActorInventory(1001,"DivineShield") > 0)
  {
   DivineShieldBlock = 13;
   DivineShieldBits = 1;
   if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"PearlyCorset") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"CloakofEvasion") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"KissaBra") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"BalrogRing") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"DoveRibbon") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }
   if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { DivineShieldBlock += 2; DivineShieldBits += 1; }

   if (random(1,100) <= DivineShieldBlock)
   {
    for (i = 0; i < 12; i++)
    {
     ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);

     if (DivineShieldBits == i)
      GiveActorInventory(1001, ArmorBitsItem, 1);
       else
      TakeActorInventory(1001, ArmorBitsItem, 1);
    }
   }
   else
   {
    for (i = 0; i < 12; i++)
    {
     ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);
     TakeActorInventory(1001, ArmorBitsItem, 1);
    }
   }
  }
 }
 else // If the items are detected on Deggaris or Illucia, take them away since they have no function on those two. :P
 {
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) TakeActorInventory(1001,"SafeTeaShoes", 1);
  if (CheckActorInventory(1001,"PearlyCorset") > 0) TakeActorInventory(1001,"PearlyCorset", 1);
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) TakeActorInventory(1001,"WaterFlyingDress", 1);
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) TakeActorInventory(1001,"EvenstarNecklace", 1);
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) TakeActorInventory(1001,"CloakofEvasion", 1);
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) TakeActorInventory(1001,"AnubisCufflinks", 1);
  if (CheckActorInventory(1001,"KissaBra") > 0) TakeActorInventory(1001,"KissaBra", 1);
  if (CheckActorInventory(1001,"DivineShield") > 0) TakeActorInventory(1001,"DivineShield", 1);
  if (CheckActorInventory(1001,"BalrogRing") > 0) TakeActorInventory(1001,"BalrogRing", 1);
  if (CheckActorInventory(1001,"DoveRibbon") > 0) TakeActorInventory(1001,"DoveRibbon", 1);
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) TakeActorInventory(1001,"FalconKnifeEarrings", 1);
  if (CheckActorInventory(1001,"RuinousShield") > 0) TakeActorInventory(1001,"RuinousShield", 1);
  if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) TakeActorInventory(1001,"FloraArmorFloorGuard", 1);   
  if (CheckActorInventory(1001,"AnubisCufflinksFear") > 0) TakeActorInventory(1001,"AnubisCufflinksFear", 1);   
  if (CheckActorInventory(1001,"EvenstarNecklaceBoost") > 0) TakeActorInventory(1001,"EvenstarNecklaceBoost", 1);
  if (CheckActorInventory(1001,"DoveRibbonSpeed") > 0) TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (CheckActorInventory(1001,"EvenstarDoveDamage") > 0) TakeActorInventory(1001,"EvenstarDoveDamage", 1);
  if (CheckActorInventory(1001,"CloakofEvasionBoost") > 0) TakeActorInventory(1001,"CloakofEvasionBoost", 1);
  if (CheckActorInventory(1001,"DoveRibbonSpeed") > 0) TakeActorInventory(1001,"DoveRibbonSpeed", 1);
  if (CheckActorInventory(1001,"EvasionDoveSpeed") > 0) TakeActorInventory(1001,"EvasionDoveSpeed", 1);
  if (CheckActorInventory(1001,"FalconKnifeDamage") > 0) TakeActorInventory(1001,"FalconKnifeDamage", 1);   
  for (i = 0; i < 12; i++)
  {
   ArmorBitsItem = StrParam(s:"ShieldBlockBonusLevel", d:i);
   if (CheckActorInventory(1001, ArmorBitsItem) > 0) TakeActorInventory(1001, ArmorBitsItem, 1);
  }
 }


 int AglEvadeCheck;
 int DftEvadeCheck;
 // Evasion Rate (it actually sets the character's damagefactor to 0.0% to null all damage and makes them all but invulnerable to simulate the effect)
 // [23] is a character's 'Evasion' chance [out of 100.00%]

 // Set's The Base increase from each point of Agility
 if (CharacterClass == 0) { AglEvadeCheck = 9; DftEvadeCheck = 0; } // Deggaris
 if (CharacterClass == 1) { AglEvadeCheck = 10; DftEvadeCheck = 0; } // Illucia
 if (CharacterClass == 2) { AglEvadeCheck = 11; DftEvadeCheck = 0; } // Flora
 if (CheckActorInventory(1001,"SauronHelmet") > 0) { AglEvadeCheck += 1; DftEvadeCheck += 1; }
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
 if (CheckActorInventory(1001,"TheOneRing") > 0) { AglEvadeCheck += 6; DftEvadeCheck += 6; }

 MiscellaneousVars[23] = MiscellaneousVars[31] * AglEvadeCheck;
 MiscellaneousVars[23] += MiscellaneousVars[33] * DftEvadeCheck;
 MiscellaneousVars[23] /= 2;
 if (PowerupRunning[7] == 1) MiscellaneousVars[23] = MiscellaneousVars[23] * 7 / 4; // Divine Avatar Check = 1.75x of the Agility/Deftness Stats

 // Checks Evasion Based on Level
 int LevelCheck;
 LevelCheck = PlayerLevel * 5;
 if (PowerupRunning[7] == 1) LevelCheck = LevelCheck * 7 / 5;
 MiscellaneousVars[23] += LevelCheck;

 if (CharacterClass == 2)
 {
  // Flora has Safe Tea Shoes? [+3.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) MiscellaneousVars[23] += 375;

  // Flora has Pearly Corset? [+0.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"PearlyCorset") > 0) MiscellaneousVars[23] += 75;

  // Flora has Water Flying Dress? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) MiscellaneousVars[23] += 125;

  // Flora has Evenstar Necklace? [+2.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) MiscellaneousVars[23] += 250;

  // Flora has Cloak of Evasion? [+12.50% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) MiscellaneousVars[23] += 1250;

  // Flora has Falcon Knife Earrings? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) MiscellaneousVars[23] += 125;

  // Flora has Anubis Cufflinks? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) MiscellaneousVars[23] += 50;

  // Flora has Kissa's Brasseire? [+1% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"KissaBra") > 0) MiscellaneousVars[23] += 100;

  // Flora has Balrog Ring? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"BalrogRing") > 0) MiscellaneousVars[23] += 50;

  // Flora has Dove Ribbon? [+1.75% Chance to totally "Evade" damage even from a direct hit.]
  if (CheckActorInventory(1001,"DoveRibbon") > 0) MiscellaneousVars[23] += 175;
 }

 // Someone has Sauron's Helmet [-1.56% Chance]
 if (CheckActorInventory(1001,"SauronHelmet") > 0) MiscellaneousVars[23] -= 156;

 // Someone has Sauron's Gauntlets [-1.56% Chance]
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) MiscellaneousVars[23] -= 156;
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) MiscellaneousVars[23] -= 156;
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) MiscellaneousVars[23] -= 156;

 // Someone has The One Ring [+6.25% Chance]
 if (CheckActorInventory(1001,"TheOneRing") > 0) MiscellaneousVars[23] += 625;

 // Haste Buff [150% Evade]
 if (CheckActorInventory(1001,"HasteBuff") > 0) MiscellaneousVars[23] = MiscellaneousVars[23] * 3 / 2;

 // Slow Ailment [66.7% Evade]
 if (CheckActorInventory(1001,"SlowAilment") > 0) MiscellaneousVars[23] = MiscellaneousVars[23] * 2 / 3;

 if (CharacterClass == 2)
 {
  // Ruinous Shield [Evade reduced by 3/4s]
  if (CheckActorInventory(1001,"RuinousShield") > 0) MiscellaneousVars[23] = MiscellaneousVars[23] / 4;

  // Divine Shield [Evade Increased by 1/4ths]
  if (CheckActorInventory(1001,"DivineShield") > 0) MiscellaneousVars[23] = MiscellaneousVars[23] * 5 / 4;
 }

 // Caps Evasion Chances out at 75% [unless you have the Dove's Ribbon, which it caps at 92.5%]
 if (CheckActorInventory(1001,"DoveRibbon") > 0)
 {
  if (MiscellaneousVars[23] < 175) MiscellaneousVars[23] = 175;
  if (MiscellaneousVars[23] > 9250) MiscellaneousVars[23] = 9250;
 }
 else
 {
  if (MiscellaneousVars[23] < 0) MiscellaneousVars[23] = 0;
  if (MiscellaneousVars[23] > 7500) MiscellaneousVars[23] = 7500;
 }

 // For the Status Bar (Only shows an int value, not a floating point amount)
 EvadeWhole = MiscellaneousVars[23] / 100;

 // Run Final RNG Check on Evasion
 if (random(1,10000) <= MiscellaneousVars[23])
 {
  if (CheckActorInventory(1001,"EvadeAnAttack") < 1) GiveActorInventory(1001,"EvadeAnAttack", 1); // "Dodge/Null" the damage.
 }
 else
 {
  if (CheckActorInventory(1001,"EvadeAnAttack") > 0) TakeActorInventory(1001,"EvadeAnAttack", 1); // Damage will occur as normal   
 }

 //*****************************
 //**End DVII-DS Armor Testing**
 //*****************************

 // Check Sauron Equipment Directly
 if (CheckActorInventory(1001,"SauronHelmet") > 0) GiveActorInventory(1001,"HelmetDMGReduction", 1); else TakeActorInventory(1001,"HelmetDMGReduction", 1);

 if (CharacterClass == 0) // Deggaris's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { TakeActorInventory(1001,"SauronGauntletsIllucia", 9999); GiveActorInventory(1001,"SauronGauntlets", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { TakeActorInventory(1001,"SauronGauntletsFlora", 9999); GiveActorInventory(1001,"SauronGauntlets", 1); }
  if (CheckActorInventory(1001,"SauronGauntlets") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 if (CharacterClass == 1) // Illucia's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) { TakeActorInventory(1001,"SauronGauntlets", 9999); GiveActorInventory(1001,"SauronGauntletsIllucia", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { TakeActorInventory(1001,"SauronGauntletsFlora", 9999); GiveActorInventory(1001,"SauronGauntletsIllucia", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 if (CharacterClass == 2) // Flora's Gauntlets
 {
  if (CheckActorInventory(1001,"SauronGauntlets") > 0) { TakeActorInventory(1001,"SauronGauntlets", 9999); GiveActorInventory(1001,"SauronGauntletsFlora", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { TakeActorInventory(1001,"SauronGauntletsIllucia", 9999); GiveActorInventory(1001,"SauronGauntletsFlora", 1); }
  if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0)
  {  
   GiveActorInventory(1001,"SauronGauntletsItem", 1);
   GiveActorInventory(1001,"GauntletDMGBonus", 1);
  }
  else
  {
   TakeActorInventory(1001,"SauronGauntletsItem", 1);
   TakeActorInventory(1001,"GauntletDMGBonus", 1);
  }
 }
 
 if (CheckActorInventory(1001,"TheOneRing") > 0)
 {  
  GiveActorInventory(1001,"RingSpeedBonus", 1); // All characters get a speed bonus with the Ring
  GiveActorInventory(1001,"RingDMGBonus", 1); // All characters get a damage bonus with the Ring
  GiveActorInventory(1001,"RingDMGReduction", 1); // All characters get a defense bonus with the Ring
  GiveActorInventory(1001,"RingFullMap", 1); // All characters get a full automap with the Ring
  GiveActorInventory(1001,"RingScanner", 1); // All characters get a map scanner with the Ring
  if (CharacterClass == 0) GiveActorInventory(1001,"RingGhost", 1); // Deggaris becomes Ghostly like with the Ring
  if (CharacterClass == 1) GiveActorInventory(1001,"RingShadow", 1); // Illucia becomes Shadow like with the Ring 

  if (CharacterClass != 2 && random(1,10) == 10) // Deggaris and Illucia have a 10% chance of not consuming ammo when wearing the ring
  {
   GiveActorInventory(1001,"RingRandomInfiniteAmmo", 1); 
  }
  else TakeActorInventory(1001,"RingRandomInfiniteAmmo", 1);

  if (CharacterClass == 2 && random(1,4) == 4) // Flora has a 25% chance of not consuming ammo when wearing the ring
  {
   GiveActorInventory(1001,"RingRandomInfiniteAmmo", 1);
  }
  else TakeActorInventory(1001,"RingRandomInfiniteAmmo", 1);

 }
 else
 {
  TakeActorInventory(1001,"RingSpeedBonus", 1);
  TakeActorInventory(1001,"RingDMGBonus", 1);
  TakeActorInventory(1001,"RingDMGReduction", 1);
  TakeActorInventory(1001,"RingFullMap", 1);
  TakeActorInventory(1001,"RingScanner", 1);
  TakeActorInventory(1001,"RingGhost", 1);
  TakeActorInventory(1001,"RingShadow", 1);
  //
  TakeActorInventory(1001,"RingRandomInfiniteAmmo", 1);
 }


 //********************
 //**Level Up Bonuses**
 //********************

 // REVISED: Changed If statements info a for block for the Level Items Bitfield (7/3/12)
 str LevelAttackItem;
 str LevelDefenseItem;
 str LevelSpeedItem;

 if (PlayerLevel != MiscellaneousVars[2]) // [2] is for checking Levels for level specfic boosts (so it doesn't have to run EVERY tic and lag the game too badly)
 {
   for (i = 0; i < 201; i++)
   {
    if (CharacterClass == 0)
    {
     LevelAttackItem = StrParam(s:"DeggarisAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"DeggarisDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"DeggarisSpeedLevel", d:i);
    }
    if (CharacterClass == 1)
    {
     LevelAttackItem = StrParam(s:"IlluciaAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"IlluciaDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"IlluciaSpeedLevel", d:i);
    }
    if (CharacterClass == 2)
    {
     LevelAttackItem = StrParam(s:"FloraAttackLevel", d:i);
     LevelDefenseItem = StrParam(s:"FloraDefenseLevel", d:i);
     LevelSpeedItem = StrParam(s:"FloraSpeedLevel", d:i);
    }

    if (PlayerLevel == i)
    {
     GiveActorInventory(1001, LevelAttackItem, 1);
     GiveActorInventory(1001, LevelDefenseItem, 1);
     GiveActorInventory(1001, LevelSpeedItem, 1);
    }
    else
    {
     TakeActorInventory(1001, LevelAttackItem, 1);
     TakeActorInventory(1001, LevelDefenseItem, 1);
     TakeActorInventory(1001, LevelSpeedItem, 1);
    }
   }
   MiscellaneousVars[2] = PlayerLevel;
 }

  // DQ-Style Seed System [DROPPED Versions only, naturally added Seeds/etc do not get despawned via this system]
  // "MiscellaneousVars[29]" is for the Seed limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[29] = 128;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[29] = 120;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[29] = 112;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[29] = 104;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[29] = 96;
  if (ModType == 0) MiscellaneousVars[29] = MiscellaneousVars[29] * 4; // 4x the usual limits on Classic Doom 1/2

  // "MiscellaneousVars[28]" is for the Seed of Skill limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[28] = 32;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[28] = 30;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[28] = 28;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[28] = 26;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[28] = 24;
  if (ModType == 0) MiscellaneousVars[29] = MiscellaneousVars[28] * 4; // 4x the usual limits on Classic Doom 1/2

  // "MiscellaneousVars[26]" is for the Fygg limit amount [to be used in more than one script]
  if (GameSkill() == SKILL_VERY_EASY) MiscellaneousVars[26] = 3;
  if (GameSkill() == SKILL_EASY) MiscellaneousVars[26] = 3;
  if (GameSkill() == SKILL_NORMAL) MiscellaneousVars[26] = 2;
  if (GameSkill() == SKILL_HARD) MiscellaneousVars[26] = 1;
  if (GameSkill() == SKILL_VERY_HARD) MiscellaneousVars[26] = 1;
  if (ModType == 0) MiscellaneousVars[29] = MiscellaneousVars[26] * 4; // 4x the usual limits on Classic Doom 1/2
   
  // REVISED: Changed If statements info a for block for the AGL Seed Bitfield (7/3/12)
  str AGLSeedItem;
  // "MiscellaneousVars[31]" is for the number of Seeds of Agility carried by your character [Speed]
  // "MiscellaneousVars[41]" is the previous number of seeds of Agility so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[31] != MiscellaneousVars[41])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) AGLSeedItem = StrParam(s:"DeggarisAGLSeedLVL", d:i);
    if (CharacterClass == 1) AGLSeedItem = StrParam(s:"IlluciaAGLSeedLVL", d:i);
    if (CharacterClass == 2) AGLSeedItem = StrParam(s:"FloraAGLSeedLVL", d:i);

    if (MiscellaneousVars[31] < 0) MiscellaneousVars[31] = 0;
    if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
    if (MiscellaneousVars[31] == i)
     GiveActorInventory(1001, AGLSeedItem, 1);
       else
     TakeActorInventory(1001, AGLSeedItem, 1);
   }
   MiscellaneousVars[41] = MiscellaneousVars[31];
  }

  // REVISED: Changed If statements info a for block for the DEF Seed Bitfield (7/3/12)
  str DEFSeedItem;
  // "MiscellaneousVars[32]" is for the number of Seeds of Defense carried by your character [Overall Defense]
  // "MiscellaneousVars[42]" is the previous number of seeds of Defense so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[32] != MiscellaneousVars[42])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) DEFSeedItem = StrParam(s:"DeggarisDEFSeedLVL", d:i);
    if (CharacterClass == 1) DEFSeedItem = StrParam(s:"IlluciaDEFSeedLVL", d:i);
    if (CharacterClass == 2) DEFSeedItem = StrParam(s:"FloraDEFSeedLVL", d:i);

    if (MiscellaneousVars[32] < 0) MiscellaneousVars[32] = 0;
    if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
    if (MiscellaneousVars[32] == i)
     GiveActorInventory(1001, DEFSeedItem, 1);
       else
     TakeActorInventory(1001, DEFSeedItem, 1);
   }
   MiscellaneousVars[42] = MiscellaneousVars[32];
  }

  // "MiscellaneousVars[33]" is for the number of Seeds of Deftness carried by your character [EXP Gain]
  // "MiscellaneousVars[43]" is the previous number of seeds of Deftness so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[33] != MiscellaneousVars[43])
  {
   MiscellaneousVars[40] = (MiscellaneousVars[33] * 1);
   if (MiscellaneousVars[33] < 0) MiscellaneousVars[33] = 0;
   if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
   MiscellaneousVars[43] = MiscellaneousVars[33];
  }

  // REVISED: Changed If statements info a for block for the SOR Seed Bitfield (7/3/12)
  str SORSeedItem;
  // "MiscellaneousVars[34]" is for the number of Seeds of Sorcery carried by your character [Magic Attack]
  // "MiscellaneousVars[44]" is the previous number of seeds of Sorcery so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[34] != MiscellaneousVars[44])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) SORSeedItem = StrParam(s:"DeggarisSORSeedLVL", d:i);
    if (CharacterClass == 1) SORSeedItem = StrParam(s:"IlluciaSORSeedLVL", d:i);
    if (CharacterClass == 2) SORSeedItem = StrParam(s:"FloraSORSeedLVL", d:i);

    if (MiscellaneousVars[34] < 0) MiscellaneousVars[34] = 0;
    if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
    if (MiscellaneousVars[34] == i)
     GiveActorInventory(1001, SORSeedItem, 1);
       else
     TakeActorInventory(1001, SORSeedItem, 1);
   }
   MiscellaneousVars[44] = MiscellaneousVars[34];
  }

  // REVISED: Changed If statements info a for block for the STR Seed Bitfield (7/3/12)
  str STRSeedItem;
  // "MiscellaneousVars[35]" is for the number of Seeds of Strength carried by your character [Overall Attack]
  // "MiscellaneousVars[45]" is the previous number of seeds of Strength so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[35] != MiscellaneousVars[45])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) STRSeedItem = StrParam(s:"DeggarisSTRSeedLVL", d:i);
    if (CharacterClass == 1) STRSeedItem = StrParam(s:"IlluciaSTRSeedLVL", d:i);
    if (CharacterClass == 2) STRSeedItem = StrParam(s:"FloraSTRSeedLVL", d:i);

    if (MiscellaneousVars[35] < 0) MiscellaneousVars[35] = 0;
    if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
    if (MiscellaneousVars[35] == i)
     GiveActorInventory(1001, STRSeedItem, 1);
       else
     TakeActorInventory(1001, STRSeedItem, 1);
   }
   MiscellaneousVars[45] = MiscellaneousVars[35];
  }

  // REVISED: Changed If statements info a for block for the THE Seed Bitfield (7/3/12)
  str THESeedItem;
  // "MiscellaneousVars[36]" is for the number of Seeds of Therapeusis carried by your character [Magic Defense]
  // "MiscellaneousVars[46]" is the previous number of seeds of Therapeusis so it doesn't have to run EVERY tic and lag the game too badly.
  if (MiscellaneousVars[36] != MiscellaneousVars[46])
  {
   for (i = 0; i < 513; i++)
   {
    if (CharacterClass == 0) THESeedItem = StrParam(s:"DeggarisTHESeedLVL", d:i);
    if (CharacterClass == 1) THESeedItem = StrParam(s:"IlluciaTHESeedLVL", d:i);
    if (CharacterClass == 2) THESeedItem = StrParam(s:"FloraTHESeedLVL", d:i);

    if (MiscellaneousVars[36] < 0) MiscellaneousVars[36] = 0;
    if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
    if (MiscellaneousVars[36] == i)
     GiveActorInventory(1001, THESeedItem, 1);
       else
     TakeActorInventory(1001, THESeedItem, 1);
   }
   MiscellaneousVars[46] = MiscellaneousVars[36];
  }
 // End of DQ-Style Seed System

 // Check Hellcore Weapon Levels
  str HellcoreItemName;

  // Imp's Claw
  // "MiscellaneousVars[96]" Current Imp Claw Level
  // "MiscellaneousVars[113]" Previous Imp Claw Level [prevents lag]
  if (MiscellaneousVars[96] != MiscellaneousVars[113])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ImpClawLVL", d:i);

    if (MiscellaneousVars[96] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[96] < 1) MiscellaneousVars[96] = 1;
   if (MiscellaneousVars[96] > 8) MiscellaneousVars[96] = 8;
   MiscellaneousVars[113] = MiscellaneousVars[96];
  }

  // Dark Imp's Claw
  // "MiscellaneousVars[97]" Current Dark Imp Claw Level
  // "MiscellaneousVars[114]" Previous Dark Imp Claw Level [prevents lag]
  if (MiscellaneousVars[97] != MiscellaneousVars[114])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"DarkImpClawLVL", d:i);

    if (MiscellaneousVars[97] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[97] < 1) MiscellaneousVars[97] = 1;
   if (MiscellaneousVars[97] > 8) MiscellaneousVars[97] = 8;
   MiscellaneousVars[114] = MiscellaneousVars[97];
  }

  // Cacodemon's Eye
  // "MiscellaneousVars[98]" Current Cacodemon Eye Level
  // "MiscellaneousVars[115]" Previous Cacodemon Eye Level [prevents lag]
  if (MiscellaneousVars[98] != MiscellaneousVars[115])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"CacodemonEyeLVL", d:i);

    if (MiscellaneousVars[98] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[98] < 1) MiscellaneousVars[98] = 1;
   if (MiscellaneousVars[98] > 8) MiscellaneousVars[98] = 8;
   MiscellaneousVars[115] = MiscellaneousVars[98];
  }

  // Cacolantern's Eye
  // "MiscellaneousVars[99]" Current Cacolantern Eye Level
  // "MiscellaneousVars[116]" Previous Cacolantern Eye Level [prevents lag]
  if (MiscellaneousVars[99] != MiscellaneousVars[116])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"CacolanternEyeLVL", d:i);

    if (MiscellaneousVars[99] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[99] < 1) MiscellaneousVars[99] = 1;
   if (MiscellaneousVars[99] > 8) MiscellaneousVars[99] = 8;
   MiscellaneousVars[116] = MiscellaneousVars[99];
  }

  // Abaddon's Eye
  // "MiscellaneousVars[100]" Current Abaddon Eye Level
  // "MiscellaneousVars[117]" Previous Abaddon Eye Level [prevents lag]
  if (MiscellaneousVars[100] != MiscellaneousVars[117])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"AbaddonEyeLVL", d:i);

    if (MiscellaneousVars[100] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[100] < 1) MiscellaneousVars[100] = 1;
   if (MiscellaneousVars[100] > 8) MiscellaneousVars[100] = 8;
   MiscellaneousVars[117] = MiscellaneousVars[100];
  }

  // Hell Knight's Fist
  // "MiscellaneousVars[101]" Current Hell Knight Fist Level
  // "MiscellaneousVars[118]" Previous Hell Knight Fist Level [prevents lag]
  if (MiscellaneousVars[101] != MiscellaneousVars[118])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"KnightFistLVL", d:i);


    if (MiscellaneousVars[101] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[101] < 1) MiscellaneousVars[101] = 1;
   if (MiscellaneousVars[101] > 8) MiscellaneousVars[101] = 8;
   MiscellaneousVars[118] = MiscellaneousVars[101];
  }

  // Baron of Hell's Fist
  // "MiscellaneousVars[102]" Current Baron of Hell Fist Level
  // "MiscellaneousVars[119]" Previous Baron of Hell Fist Level [prevents lag]
  if (MiscellaneousVars[102] != MiscellaneousVars[119])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BaronFistLVL", d:i);

    if (MiscellaneousVars[102] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[102] < 1) MiscellaneousVars[102] = 1;
   if (MiscellaneousVars[102] > 8) MiscellaneousVars[102] = 8;
   MiscellaneousVars[119] = MiscellaneousVars[102];
  }

  // Belphegor's Fist
  // "MiscellaneousVars[103]" Current Belphegor Fist Level
  // "MiscellaneousVars[120]" Previous Belphegor Fist Level [prevents lag]
  if (MiscellaneousVars[103] != MiscellaneousVars[120])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BelphegorFistLVL", d:i);

    if (MiscellaneousVars[103] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[103] < 1) MiscellaneousVars[103] = 1;
   if (MiscellaneousVars[103] > 8) MiscellaneousVars[103] = 8;
   MiscellaneousVars[120] = MiscellaneousVars[103];
  }

  // Bruiser Demon's Fist
  // "MiscellaneousVars[104]" Current Bruiser Demon Fist Level
  // "MiscellaneousVars[121]" Previous Bruiser Demon Fist Level [prevents lag]
  if (MiscellaneousVars[104] != MiscellaneousVars[121])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BruiserFistLVL", d:i);

    if (MiscellaneousVars[104] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[104] < 1) MiscellaneousVars[104] = 1;
   if (MiscellaneousVars[104] > 8) MiscellaneousVars[104] = 8;
   MiscellaneousVars[121] = MiscellaneousVars[104];
  }

  // Archon of Hell's Fist
  // "MiscellaneousVars[105]" Current Archon of Hell Fist Level
  // "MiscellaneousVars[122]" Previous Archon of Hell Fist Level [prevents lag]
  if (MiscellaneousVars[105] != MiscellaneousVars[122])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ArchonFistLVL", d:i);

    if (MiscellaneousVars[105] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[105] < 1) MiscellaneousVars[105] = 1;
   if (MiscellaneousVars[105] > 8) MiscellaneousVars[105] = 8;
   MiscellaneousVars[122] = MiscellaneousVars[105];
  }

  // Pyro Demon's Fist
  // "MiscellaneousVars[106]" Current Pyro Demon Fist Level
  // "MiscellaneousVars[123]" Previous Pyro Demon Fist Level [prevents lag]
  if (MiscellaneousVars[106] != MiscellaneousVars[123])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"PyroFistLVL", d:i);

    if (MiscellaneousVars[106] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[106] < 1) MiscellaneousVars[106] = 1;
   if (MiscellaneousVars[106] > 8) MiscellaneousVars[106] = 8;
   MiscellaneousVars[123] = MiscellaneousVars[106];
  }

  // Death Incarnate's Skull
  // "MiscellaneousVars[107]" Current Death Incarnate Skull Level
  // "MiscellaneousVars[124]" Previous Death Incarnate Skull Level [prevents lag]
  if (MiscellaneousVars[107] != MiscellaneousVars[124])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"IncarnateSkullLVL", d:i);

    if (MiscellaneousVars[107] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[107] < 1) MiscellaneousVars[107] = 1;
   if (MiscellaneousVars[107] > 8) MiscellaneousVars[107] = 8;
   MiscellaneousVars[124] = MiscellaneousVars[107];
  }

  // Archvile's Hand
  // "MiscellaneousVars[108]" Current Archvile Hand Level
  // "MiscellaneousVars[125]" Previous Archvile Hand Level [prevents lag]
  if (MiscellaneousVars[108] != MiscellaneousVars[125])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"ArchvileHandLVL", d:i);

    if (MiscellaneousVars[108] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[108] < 1) MiscellaneousVars[108] = 1;
   if (MiscellaneousVars[108] > 8) MiscellaneousVars[108] = 8;
   MiscellaneousVars[125] = MiscellaneousVars[108];
  }

  // Diabloist's Hand
  // "MiscellaneousVars[109]" Current Diabloist Hand Level
  // "MiscellaneousVars[126]" Previous Diabloist Hand Level [prevents lag]
  if (MiscellaneousVars[109] != MiscellaneousVars[126])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"DiabloistHandLVL", d:i);

    if (MiscellaneousVars[109] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[109] < 1) MiscellaneousVars[109] = 1;
   if (MiscellaneousVars[109] > 8) MiscellaneousVars[109] = 8;
   MiscellaneousVars[126] = MiscellaneousVars[109];
  }

  // Flying Balrog's Fist
  // "MiscellaneousVars[110]" Current Flying Balrog Fist Level
  // "MiscellaneousVars[127]" Previous Flying Balrog Fist Level [prevents lag]
  if (MiscellaneousVars[110] != MiscellaneousVars[127])
  {
   for (i = 1; i < 9; i++)
   {
    HellcoreItemName = StrParam(s:"BalrogFistLVL", d:i);

    if (MiscellaneousVars[110] == i)
     GiveActorInventory(1001, HellcoreItemName, 1);
       else
     TakeActorInventory(1001, HellcoreItemName, 1);
   }
   if (MiscellaneousVars[110] < 1) MiscellaneousVars[110] = 1;
   if (MiscellaneousVars[110] > 8) MiscellaneousVars[110] = 8;
   MiscellaneousVars[127] = MiscellaneousVars[110];
  }

  // Hades Elemental's Eye [?]
  // Hades Overlord's Eye [?]
 // End of Checking Hellcore Weapon Levels


 // Calculate Jumping Heights
 // "65" is the main storage value for a character's JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[65] = FixedMul(5.0, 1.5); // Deggaris (7.50)
 else if (CharacterClass == 1) MiscellaneousVars[65] = FixedMul(5.0, 1.7); // Illucia (8.50)
 else if (CharacterClass == 2) MiscellaneousVars[65] = FixedMul(5.0, 1.8); // Flora (9.00)
 else MiscellaneousVars[65] = FixedMul(5.0, 1.6); // Other (8.00)

 // "66" is storage for the level-based multiplier for JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00226) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 1) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00256) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 2) MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00276) + FixedMul(1.00, 1.00);
 else MiscellaneousVars[66] = FixedMul((PlayerLevel << 16), 0.00246) + FixedMul(1.00, 1.00);
 // PrintBold(f:MiscellaneousVars[66]);

 // "67" is storage for the AGLSeed-based multiplier for JumpZ height.
 if (CharacterClass == 0) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00076) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 1) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00086) + FixedMul(1.00, 1.00);
 else if (CharacterClass == 2) MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00093) + FixedMul(1.00, 1.00);
 else MiscellaneousVars[67] = FixedMul((MiscellaneousVars[31] << 16), 0.00083) + FixedMul(1.00, 1.00);
 // PrintBold(f:MiscellaneousVars[67]);

 // "68" is storage for bonuses/penalities from armor or other items for JumpZ height.
 MiscellaneousVars[68] = FixedMul(1.00, 1.00);
 if (CharacterClass == 2) 
 {
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.10); }		// +10%
  if (CheckActorInventory(1001,"PearlyCorset") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.005); }		// +0.5%
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.005); }	// +0.5%
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }	// +1.25%
  if (CheckActorInventory(1001,"CloakofEvasion") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.025); }		// +2.5%
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }	// +1.25%
  if (CheckActorInventory(1001,"KissaBra") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.025); }			// +2.5%
  if (CheckActorInventory(1001,"DivineShield") > 0) {MiscellaneousVars[68] =  MiscellaneousVars[68] + FixedMul(1.00, 0.00625); }		// +0.625%
  if (CheckActorInventory(1001,"BalrogRing") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0125); }		// +1.25%
  if (CheckActorInventory(1001,"DoveRibbon") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.05); }		// +5%
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.0375); }	// +3.75%
 }
 else
 {
  if (CheckActorInventory(1001,"DSGreenArmorClass") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.033); }	// -3.3%
  if (CheckActorInventory(1001,"DSBlueArmorClass") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }		// -5%
  if (CheckActorInventory(1001,"DSStoneArmorClass1") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.067); }	// -6.7%
  if (CheckActorInventory(1001,"DSDiamondArmorClass1") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.09); }	// -9%
  if (CheckActorInventory(1001,"DSStoneArmorClass2") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.083); }	// -8.3%
  if (CheckActorInventory(1001,"DSDiamondArmorClass2") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.095); }	// -9.5%
 }
 if (CheckActorInventory(1001,"SauronHelmet") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.10); }		// -10%
 if (CheckActorInventory(1001,"SauronGauntlets") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }		// -5%
 if (CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }	// -5%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] - FixedMul(1.00, 0.05); }	// -5%
 if (CheckActorInventory(1001,"TheOneRing") > 0) { MiscellaneousVars[68] = MiscellaneousVars[68] + FixedMul(1.00, 0.25); }			// +25%

 // "69" is storage for Sceptre for JumpZ height.
 MiscellaneousVars[69] = FixedMul(1.00, 1.00);
 if (CheckActorInventory(1001,"ShieldSlowdown") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.20); }		// -20%
 if (CheckActorInventory(1001,"ShieldSlowdown2") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.10); }		// -10%
 if (CheckActorInventory(1001,"ShieldSlowdown3") > 0) { MiscellaneousVars[69] = MiscellaneousVars[69] - FixedMul(1.00, 0.05); }		// -5%
 // PrintBold(f:MiscellaneousVars[69]);

 // Multiply all the jumpz properties
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[66]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[67]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[68]);
 MiscellaneousVars[65] = FixedMul(MiscellaneousVars[65],MiscellaneousVars[69]);

 SetActorProperty (1001, APROP_JumpZ, MiscellaneousVars[65]);
 // PrintBold(s:"Level X: ",f:MiscellaneousVars[66],s:"\nSeed X: ",f:MiscellaneousVars[67],s:"\nArmor X: ",f:MiscellaneousVars[68],s:"\nSceptreShield X: ",f:MiscellaneousVars[69],s:"\nTotal Jump: ",f:MiscellaneousVars[65]);

 // Convert JumpZ to PlayerJumpHeight
 PlayerJumpHeight = (FixedMul(MiscellaneousVars[65],MiscellaneousVars[65]) / 2);
 PlayerJumpHeight = PlayerJumpHeight >> 16;
 PlayerJumpHeight += 24;
 if (PowerupTimer[7] > 0) PlayerJumpHeight = PlayerJumpHeight * 4;

 //************************************************************************
 //***Determines Maximum Ammo Ammounts Based on Strength Seeds and Level***
 //************************************************************************
 // "80" is the number of backpacks grabbed.
 // "81" is storage for the current Clip maximum. // 1 STRSeed = 5 Bullets, 1 STRLevel = 10 Bullets [need backpacks to maximize use of this] [(Base) + 2560 + 2000 = 4560+]
 // "82" is storage for the current Shell maximum. // 1 STRSeed = 2 Shells, 1 STRLevel = 4 Shells [need backpacks to maximize use of this] [(Base) + 1024 + 800 = 1824+]
 // "83" is storage for the current Rocket maximum. // 1 STRSeed = 1 Rocket, 1 STRLevel = 2 Rockets [need backpacks to maximize use of this] [(Base) + 512 + 400 = 912+]
 // "84" is storage for the current Cell maximum. // 1 STRSeed = 20 Cells, 1 STRLevel = 40 Cells [need backpacks to maximize use of this] [(Base) + 10240 + 8000 = 18240+]
 // "85" is storage for the current DiarisArrow maximum. // 1 STRSeed = 3 Arrows, 1 STRLevel = 6 Arrows [need backpacks to maximize use of this] [(Base) + 1536 + 1200 = 2736+]

 // "91" is storage for the ultimate Clip maximum.
 // "92" is storage for the ultimate Shell maximum.
 // "93" is storage for the ultimate Rocket maximum.
 // "94" is storage for the ultimate Cell maximum.
 // "95" is storage for the ultimate DiarisArrow maximum.

 if (CharacterClass == 0) // Deggaris
 {
  MiscellaneousVars[91] = 500 + (MiscellaneousVars[35] * 5) + (PlayerLevel * 10); // Clip/Bullets
  MiscellaneousVars[92] = 140 + (MiscellaneousVars[35] * 2) + (PlayerLevel * 4); // Shells
  MiscellaneousVars[93] = 120 + (MiscellaneousVars[35] * 1) + (PlayerLevel * 2); // Rockets
  MiscellaneousVars[94] = 750 + (MiscellaneousVars[35] * 20) + (PlayerLevel * 40); // Cells
  MiscellaneousVars[95] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // DiarisArrows

  MiscellaneousVars[81] = 250 + (MiscellaneousVars[80] * 100);
  MiscellaneousVars[82] = 70 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[83] = 60 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[84] = 375 + (MiscellaneousVars[80] * 150);
  MiscellaneousVars[85] = 0 + (MiscellaneousVars[80] * 15);
 }

 if (CharacterClass == 1) // Illucia
 {
  MiscellaneousVars[91] = 300 + (MiscellaneousVars[35] * 15 / 4) + (PlayerLevel * 15 / 2); // Clip/Bullets
  MiscellaneousVars[92] = 90 + (MiscellaneousVars[35] * 3 / 2) + (PlayerLevel * 3); // Shells
  MiscellaneousVars[93] = 70 + (MiscellaneousVars[35] * 3 / 4) + (PlayerLevel * 3 / 2); // Rockets
  MiscellaneousVars[94] = 500 + (MiscellaneousVars[35] * 15) + (PlayerLevel * 30); // Cells
  MiscellaneousVars[95] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // DiarisArrows

  MiscellaneousVars[81] = 175 + (MiscellaneousVars[80] * 100);
  MiscellaneousVars[82] = 45 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[83] = 35 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[84] = 250 + (MiscellaneousVars[80] * 150);
  MiscellaneousVars[85] = 0 + (MiscellaneousVars[80] * 15);
 }

 if (CharacterClass == 2) // Flora
 {
  if (CheckActorInventory(1001,"FloraLearnedPistols") > 0)
  {
   MiscellaneousVars[91] = 200 + (MiscellaneousVars[35] * 5 / 2) + (PlayerLevel * 5); // Clip/Bullets
  }
  else
  {
   MiscellaneousVars[91] = 0; // Clip/Bullets
  }
  MiscellaneousVars[92] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Shells
  MiscellaneousVars[93] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Rockets
  MiscellaneousVars[94] = 0 + (MiscellaneousVars[35] * 0) + (PlayerLevel * 0); // Cells
  MiscellaneousVars[95] = 30 + (MiscellaneousVars[35] * 3) + (PlayerLevel * 6); // DiarisArrows

  MiscellaneousVars[81] = 100 + (MiscellaneousVars[80] * 100);
  MiscellaneousVars[82] = 0 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[83] = 0 + (MiscellaneousVars[80] * 25);
  MiscellaneousVars[84] = 0 + (MiscellaneousVars[80] * 150);
  MiscellaneousVars[85] = 15 + (MiscellaneousVars[80] * 15);
 }

 if (MiscellaneousVars[81] > MiscellaneousVars[91]) MiscellaneousVars[81] = MiscellaneousVars[91];
 if (MiscellaneousVars[82] > MiscellaneousVars[92]) MiscellaneousVars[82] = MiscellaneousVars[92];
 if (MiscellaneousVars[83] > MiscellaneousVars[93]) MiscellaneousVars[83] = MiscellaneousVars[93];
 if (MiscellaneousVars[84] > MiscellaneousVars[94]) MiscellaneousVars[84] = MiscellaneousVars[94];
 if (MiscellaneousVars[85] > MiscellaneousVars[95]) MiscellaneousVars[85] = MiscellaneousVars[95];

 SetActivator(1001); // Set to Player's ID
 SetAmmoCapacity("Clip", MiscellaneousVars[81]);
 SetAmmoCapacity("Shell", MiscellaneousVars[82]);
 SetAmmoCapacity("RocketAmmo", MiscellaneousVars[83]);
 SetAmmoCapacity("Cell", MiscellaneousVars[84]);
 SetAmmoCapacity("DiarisArrow", MiscellaneousVars[85]);
 SetActivator(0); // Set back to worldly activator

 if (CheckActorInventory(1001,"Clip") > MiscellaneousVars[81]) TakeActorInventory(1001,"Clip", (CheckActorInventory(1001,"Clip") - MiscellaneousVars[81]) ); 
 if (CheckActorInventory(1001,"Shell") > MiscellaneousVars[82]) TakeActorInventory(1001,"Shell", (CheckActorInventory(1001,"Shell") - MiscellaneousVars[82]) ); 
 if (CheckActorInventory(1001,"RocketAmmo") > MiscellaneousVars[83]) TakeActorInventory(1001,"RocketAmmo", (CheckActorInventory(1001,"RocketAmmo") - MiscellaneousVars[83]) ); 
 if (CheckActorInventory(1001,"Cell") > MiscellaneousVars[84]) TakeActorInventory(1001,"Cell", (CheckActorInventory(1001,"Cell") - MiscellaneousVars[84]) ); 
 if (CheckActorInventory(1001,"DiarisArrow") > MiscellaneousVars[85]) TakeActorInventory(1001,"DiarisArrow", (CheckActorInventory(1001,"DiarisArrow") - MiscellaneousVars[85]) ); 

 //***************************
 //***Check DVII Game Flags***
 //***************************

 int SpawnFixedX, SpawnFixedY, SpawnFixedZ, KilledMonsterFactor, Randomizer1;
 if (CharacterClass == 2 && ModType == 2)
 {
  if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) != 0) KilledMonsterFactor = GetLevelInfo(LEVELINFO_KILLED_MONSTERS) * 1000 / GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);

  // Checks for all secrets found in order to spawn Safe Tea Shoes in MAP01
  if (DVIIGameFlags[0] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1201 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1744 * 65536; SpawnFixedY = -724 * 65536; SpawnFixedZ = 16 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("SafeTeaShoes",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[0] = 1;
  }

  // Checks for all secrets found in order to spawn Pearly Corset in MAP02
  if (DVIIGameFlags[1] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1202 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1440 * 65536; SpawnFixedY = 160 * 65536; SpawnFixedZ = 112 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("PearlyCorset",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[1] = 1;
  }

  // Checks for all secrets found in order to spawn Water Flying Dress in MAP03
  if (DVIIGameFlags[2] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1203 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS)) 
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -6592 * 65536; SpawnFixedY = 4416 * 65536; SpawnFixedZ = 24 * 65536;
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("WaterFlyingDress",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[2] = 1;
  }

  // Checks for all secrets found in order to spawn Evenstar Necklace in MAP04
  if (DVIIGameFlags[3] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1204 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   Randomizer1 = random(1,4);
   if (Randomizer1 == 1) { SpawnFixedX = -2752 * 65536; SpawnFixedY = 3872 * 65536; SpawnFixedZ = 16 * 65536; } // -2752,3872,0 coords
   if (Randomizer1 == 2) { SpawnFixedX = -2560 * 65536; SpawnFixedY = 4064 * 65536; SpawnFixedZ = 16 * 65536; } // -2560,4064,0 coords
   if (Randomizer1 == 3) { SpawnFixedX = -2752 * 65536; SpawnFixedY = 4256 * 65536; SpawnFixedZ = 16 * 65536; } // -2752,4256,0 coords
   if (Randomizer1 == 4) { SpawnFixedX = -2944 * 65536; SpawnFixedY = 4064 * 65536; SpawnFixedZ = 16 * 65536; } // -2944,4064,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("EvenstarNecklace",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[3] = 1;
  }

  // Checks for all secrets found in order to spawn Cloak of Evasion in MAP05
  if (DVIIGameFlags[4] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1205 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 1216 * 65536; SpawnFixedY = -464 * 65536; SpawnFixedZ = 1416 * 65536; // 1216,-464,1400 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("CloakOfEvasion",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[4] = 1;
  }

  // Checks for all secrets found in order to spawn Falcon Knife Earrings in MAP05S
  if (DVIIGameFlags[5] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1206 && KilledMonsterFactor >= 950)
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -4160 * 65536; SpawnFixedY = -2396 * 65536; SpawnFixedZ = 16 * 65536; // -4160,-2396,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("FalconKnifeEarrings",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[5] = 1;
  }

  // Checks for all secrets found in order to spawn Anubis Cufflinks in MAP06
  if (DVIIGameFlags[6] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1207 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -128 * 65536; SpawnFixedY = -1312 * 65536; SpawnFixedZ = -48 * 65536; // -128,-1312,-64 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("AnubisCufflinks",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[6] = 1;
  }

  // Checks for all secrets found in order to spawn Kissa's Armored Brassiare in MAP07
  if (DVIIGameFlags[7] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1208 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -544 * 65536; SpawnFixedY = -224 * 65536; SpawnFixedZ = 272 * 65536; // -544,-224,256 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("KissaBra",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[7] = 1;
  }

  // Checks for all secrets found in order to spawn Ruinous/Divine Shield in MAP08
  if (DVIIGameFlags[8] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1209 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = -6784 * 65536; SpawnFixedY = 12320 * 65536; SpawnFixedZ = 16 * 65536; // -6784,12320,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else
   {
    if (random(1,256) < 5) { SpawnForced("DivineShield",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0); }
    else { SpawnForced("RuinousShield",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0); }
   }
   DVIIGameFlags[8] = 1;
  }

  // Checks for all secrets found in order to spawn Balrog's Ring in MAP09
  if (DVIIGameFlags[9] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1210 && ThingCountName("FlyingBalrog",0) < 1 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == GetLevelInfo(LEVELINFO_FOUND_SECRETS))
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 512 * 65536; SpawnFixedY = 2240 * 65536; SpawnFixedZ = 16 * 65536; // 512,2240,0 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("BalrogRing",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[9] = 1;
  }

  // Checks for all secrets found in order to spawn Dove's Ribbon in MAP10
  if (DVIIGameFlags[10] == 0 && GetLevelInfo(LEVELINFO_LEVELNUM) == 1211 && KilledMonsterFactor >= 750)
  {
   PrintBold(s:"A SPECIAL ITEM HAS SPAWNED SOMEWHERE IN THE AREA!");
   AmbientSound("foundhiddenitem",127); 
   SpawnFixedX = 8048 * 65536; SpawnFixedY = 2272 * 65536; SpawnFixedZ = 256 * 65536; // 8048,2272,240 coords
   if (GetCVAR("dvds_dviiarmorspawn") == 1) SpawnForced("FloraRandomArmor2",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   else SpawnForced("DoveRibbon",SpawnFixedX,SpawnFixedY,SpawnFixedZ,0,0);
   DVIIGameFlags[10] = 1;
  }

 }


 if (MaxHealthTrue > 0)
 {
  HealthRatio = GetActorProperty(1001,APROP_Health) * 1000 / MaxHealthTrue;
  if (HealthRatio < 0) HealthRatio = 0;
  if (HealthRatio > 2000) HealthRatio = 2000;
 }

 if (GetActorProperty(1001,APROP_Health) <= 0) { GiveActorInventory(1001,"PlayerIsDead", 1); }
 else
 {
  TakeActorInventory(1001,"PlayerIsDead", 1);

  if (HealthRatio != MiscellaneousVars[4]); // "4" is for saving health ratio for giving Low or Critical Health Inventory items [for Status Bar Displays and using "Nova" with Flora's Hellcore weapons]
  {
   TakeActorInventory(1001,"NormalHealth", 1);
   TakeActorInventory(1001,"LowHealth", 1);
   TakeActorInventory(1001,"CriticalHealth", 1);

   if (HealthRatio < 167)
   {
    if (HealthRatio < 21) GiveActorInventory(1001,"CriticalHealth", 1);
    else GiveActorInventory(1001,"LowHealth", 1);
   }
   else GiveActorInventory(1001,"NormalHealth", 1);

   MiscellaneousVars[4] = HealthRatio;
  }
 }

 if (CurrentArmorClass == 6)
 {
  GiveActorInventory(1001,"DSDiamondArmorClass2", 1);
  TakeActorInventory(1001,"DSNoArmorClass", 9999);
  TakeActorInventory(1001,"DSGreenArmorClass", 9999);
  TakeActorInventory(1001,"DSBlueArmorClass", 9999);
  TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
  TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
  TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
  if (CharacterClass != 2) Thing_SetTranslation(1001, 21); 
 }
 else
 {
  if (CurrentArmorClass == 5)
  {
   GiveActorInventory(1001,"DSStoneArmorClass2", 1);
   TakeActorInventory(1001,"DSNoArmorClass", 9999);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
   if (CharacterClass != 2) Thing_SetTranslation(1001, 20); 
  }
  else
  {
   if (CurrentArmorClass == 4)
   {
    GiveActorInventory(1001,"DSDiamondArmorClass1", 1);
    TakeActorInventory(1001,"DSNoArmorClass", 9999);
    TakeActorInventory(1001,"DSGreenArmorClass", 9999);
    TakeActorInventory(1001,"DSBlueArmorClass", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
    TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
    TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
    if (CharacterClass != 2) Thing_SetTranslation(1001, 21); 
   }
   else
   {
    if (CurrentArmorClass == 3)
    {
     GiveActorInventory(1001,"DSStoneArmorClass1", 1);
     TakeActorInventory(1001,"DSNoArmorClass", 9999);
     TakeActorInventory(1001,"DSGreenArmorClass", 9999);
     TakeActorInventory(1001,"DSBlueArmorClass", 9999);
     TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
     TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
     TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
     if (CharacterClass != 2) Thing_SetTranslation(1001, 20); 
    }
    else
    {
     if (CurrentArmorClass == 2)
     {
      GiveActorInventory(1001,"DSBlueArmorClass", 1);
      TakeActorInventory(1001,"DSNoArmorClass", 9999);
      TakeActorInventory(1001,"DSGreenArmorClass", 9999);
      TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
      TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
      TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
      TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
      if (CharacterClass != 2) Thing_SetTranslation(1001, 19); 
     }
     else
     {
      if (CurrentArmorClass == 1)
      {
       GiveActorInventory(1001,"DSGreenArmorClass", 1);
       TakeActorInventory(1001,"DSNoArmorClass", 9999);
       TakeActorInventory(1001,"DSBlueArmorClass", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
       if (CharacterClass != 2) Thing_SetTranslation(1001, 18); 
      }
      else
      {
       GiveActorInventory(1001,"DSNoArmorClass", 1);
       TakeActorInventory(1001,"DSGreenArmorClass", 9999);
       TakeActorInventory(1001,"DSBlueArmorClass", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
       TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
       TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
       if (CharacterClass != 2) Thing_SetTranslation(1001, 17); 
      }
     }
    }
   }
  }
 }

 if (CheckActorInventory(1001,"Armor") <= 0)
 {
  CurrentArmorClass = 0;
  CurrentMaxArmor = 0;
  if (CheckActorInventory(1001,"DSNoArmorClass") == 0)
  {
   GiveActorInventory(1001,"DSNoArmorClass", 1);
   TakeActorInventory(1001,"DSGreenArmorClass", 9999);
   TakeActorInventory(1001,"DSBlueArmorClass", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass1", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass1", 9999);
   TakeActorInventory(1001,"DSStoneArmorClass2", 9999);
   TakeActorInventory(1001,"DSDiamondArmorClass2", 9999);
  }
 }
 // PrintBold(d:CurrentArmorClass);

 //***************************************
 //**Scripted Events for Individual Maps**
 //***************************************

 if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1204) // MAP04 - Minas Morgul
  {
   // [1401] = MAP04, Damage inflicted by Helltoxins in Minas Morgul
   GameScriptEvents[1401] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1401] = random(15,17);
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1401] = random(16,20);
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1401] = random(17,23);
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1401] = random(18,26);
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1401] = random(21,31);

   // [1402] = MAP04, Max Damage timer for Helltoxins in Minas Morgul
   GameScriptEvents[1402] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1402] = 35;
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1402] = 32;
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1402] = 29;
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1402] = 26;
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1402] = 21;

   // [1403] = MAP04, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.
   GameScriptEvents[1403] = 0;
   if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerIronFeet") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerMask") > 0) GameScriptEvents[1403] += 1;   

   // [1404] = MAP04, Current HellToxen Interval [seperate timer]   
   GameScriptEvents[1404] += 1;
   if (GameScriptEvents[1404] >= GameScriptEvents[1402])
   {
    GameScriptEvents[1404] -= GameScriptEvents[1402];
    if (GameScriptEvents[1403] == 0)
    {
     G1 = random(1,100);
     if (CharacterClass == 2)
     {
      if (G1 < 15) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 86) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     if (CharacterClass == 1)
     {
      if (G1 < 11) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 90) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     else
     {
      if (G1 < 13) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 88) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     Thing_Damage(1001,GameScriptEvents[1401],13);
    }
   }

  }

  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1205) // MAP05 - Eagle's Nest
  {
   // [1401] = MAP05, Damage inflicted by Helltoxins in Eagle's Nest
   GameScriptEvents[1401] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1401] = random(2,4);
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1401] = random(3,5);
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1401] = random(4,6);
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1401] = random(5,7);
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1401] = random(6,8);

   // [1402] = MAP05, Max Damage timer for Helltoxins in Eagle's Nest
   GameScriptEvents[1402] = 42;
   if (GameSkill() == SKILL_VERY_EASY) GameScriptEvents[1402] = 35;
   if (GameSkill() == SKILL_EASY) GameScriptEvents[1402] = 32;
   if (GameSkill() == SKILL_NORMAL) GameScriptEvents[1402] = 29;
   if (GameSkill() == SKILL_HARD) GameScriptEvents[1402] = 26;
   if (GameSkill() == SKILL_VERY_HARD) GameScriptEvents[1402] = 21;

   // [1403] = MAP05, Checks for the player having Iron Feet powerup or Flora's Safe Passage spells in effect to determine exposure to Hell-Toxins.
   GameScriptEvents[1403] = 0;
   if (CheckActorInventory(1001,"FloraArmorFloorGuard") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerIronFeet") > 0) GameScriptEvents[1403] += 1;   
   if (CheckActorInventory(1001,"PowerMask") > 0) GameScriptEvents[1403] += 1;   

   SpawnFixedX = GetActorX(1001) >> 16;
   SpawnFixedY = GetActorY(1001) >> 16;
   SpawnFixedZ = GetActorZ(1001) >> 16;

   // [1404] = MAP05, Current HellToxen Interval [seperate timer]   
   GameScriptEvents[1404] += 1;
   if (GameScriptEvents[1404] >= GameScriptEvents[1402])
   {
    GameScriptEvents[1404] -= GameScriptEvents[1402];
    if (GameScriptEvents[1403] == 0)
    {
     G1 = random(1,100);
     if (CharacterClass == 2)

     {
      if (G1 < 15) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 86) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     if (CharacterClass == 1)
     {
      if (G1 < 11) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 90) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     else
     {
      if (G1 < 13) GameScriptEvents[1401] = GameScriptEvents[1401] * 14 / 8;
      if (G1 > 88) GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 8;
     }
     // Upper Left = -9216, 11776
     // Lower Right = 14336, -11776
     // Chasm Bottom = -5000

     if (SpawnFixedZ < 0) // Negative Z Vels
     {
      if (SpawnFixedZ > -1001) { G1 = 10; GameScriptEvents[1401] = GameScriptEvents[1401] * 4 / 3; }
      if (SpawnFixedZ > -2001 && SpawnFixedZ < -1000) { G1 = 16; GameScriptEvents[1401] = GameScriptEvents[1401] * 5 / 3; }
      if (SpawnFixedZ > -3001 && SpawnFixedZ < -2000) { G1 = 23; GameScriptEvents[1401] = GameScriptEvents[1401] * 6 / 3; }
      if (SpawnFixedZ > -4001 && SpawnFixedZ < -3000) { G1 = 31; GameScriptEvents[1401] = GameScriptEvents[1401] * 7 / 3; }
      if (SpawnFixedZ < -4000) { G1 = 40; GameScriptEvents[1401] = GameScriptEvents[1401] * 8 / 3; }
     }
     else // Positive Z Vels
     {
      if (SpawnFixedZ > -1 && SpawnFixedZ < 1000) { G1 = 5; }
      if (SpawnFixedZ > 999 && SpawnFixedZ < 2000) { G1 = 4; }
      if (SpawnFixedZ > 1999 && SpawnFixedZ < 3000) { G1 = 3; GameScriptEvents[1401] = GameScriptEvents[1401] * 2 / 3; }
      if (SpawnFixedZ > 2999 && SpawnFixedZ < 4000) { G1 = 2; GameScriptEvents[1401] = GameScriptEvents[1401] * 2 / 3; }
      if (SpawnFixedZ > 3999 && SpawnFixedZ < 5000) { G1 = 1; GameScriptEvents[1401] = GameScriptEvents[1401] * 1 / 3; }
      if (SpawnFixedZ > 4999) { G1 = 0; GameScriptEvents[1401] = GameScriptEvents[1401] * 0 / 3; }
     }

     if (SpawnFixedX > -9217 && SpawnFixedX < 14337 && SpawnFixedY > -11777 && SpawnFixedY < 11777 && random(1,100) <= G1) { Thing_Damage(1001,GameScriptEvents[1401],13); }
    }
   }
  }

  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1209) // MAP08 - Unholy Cathedrel
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
/*
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1210) // MAP09 - You Shall Not Pass!
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1211) // MAP10 - Hell's Vendetta
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1212) // MAP10B - attedneV s'lleH
  {
   if (GameScriptEvents[1801] == 0)
   {
    GameScriptEvents[1801] += 1;
   }
  }
*/
 }

 Delay(1);
 Restart;
}

// MegaSphere Armor [Deggaris & Illucia Only] or Mana [All Three Characters]
script 834 (void)
{
 int I1, I2, Z1, Z2, C1, C2;
 
 if (CharacterClass == 2) // Flora does not get armor from a Soul Sphere, but instead gets Mana up to 200% of her maximum
 {
  MaxManaDouble = MaxMana * 2;
  CurrentMana = MaxManaDouble;
 }
 else
 {
  // Gives Deggaris and Illucia full MP
  if (CharacterClass == 1) MaxManaDouble = MaxMana * 5 / 3;
  if (CharacterClass == 0) MaxManaDouble = MaxMana * 4 / 3;
  CurrentMana = MaxManaDouble;

  // Saves original raw Armor Value
  Z1 = CheckInventory("Armor");

  // Clears Armor Types
  Z2 = CheckInventory("Armor"); TakeInventory("Armor", Z2);
  Z2 = CheckInventory("ArmorBonusDS"); TakeInventory("ArmorBonusDS", Z2);
  Z2 = CheckInventory("ArmorBonusDSGreen"); TakeInventory("ArmorBonusDSGreen", Z2);
  Z2 = CheckInventory("ArmorBonusDSBlue"); TakeInventory("ArmorBonusDSBlue", Z2);
  Z2 = CheckInventory("ArmorBonusDSStone1"); TakeInventory("ArmorBonusDSStone1", Z2);
  Z2 = CheckInventory("ArmorBonusDSStone2"); TakeInventory("ArmorBonusDSStone2", Z2);
  Z2 = CheckInventory("ArmorBonusDSDiamond1"); TakeInventory("ArmorBonusDSDiamond1", Z2);
  Z2 = CheckInventory("ArmorBonusDSDiamond2"); TakeInventory("ArmorBonusDSDiamond2", Z2);
 
  // Reinitalizes the proper Armor Class after the previous code above clears it
  if (CurrentArmorClass <= 1) { CurrentArmorClass = 2; GiveInventory("ArmorBonusDSBlue", 200); }
  else if (CurrentArmorClass == 2) { CurrentArmorClass = 3; GiveInventory("ArmorBonusDSStone1", 333); }
  else if (CurrentArmorClass == 3) { CurrentArmorClass = 4; GiveInventory("ArmorBonusDSDiamond1", 888); }
  else if (CurrentArmorClass == 4) { CurrentArmorClass = 5; GiveInventory("ArmorBonusDSStone2", 1332); }
  else if (CurrentArmorClass == 5) { CurrentArmorClass = 6; GiveInventory("ArmorBonusDSDiamond2", 3552); }
  else if (CurrentArmorClass == 6) { GiveInventory("ArmorBonusDSDiamond2", 3552); }
 
  if (CurrentArmorClass == 6)
  {  
   CurrentMaxArmor = 3552;
   GiveInventory("DSDiamondArmorClass2", 1);
   TakeInventory("DSNoArmorClass", 9999);
   TakeInventory("DSGreenArmorClass", 9999);
   TakeInventory("DSBlueArmorClass", 9999);
   TakeInventory("DSStoneArmorClass1", 9999);
   TakeInventory("DSDiamondArmorClass1", 9999);
   TakeInventory("DSStoneArmorClass2", 9999);
  }
  else
  {
   if (CurrentArmorClass == 5)
   {
    CurrentMaxArmor = 1332;
    GiveInventory("DSStoneArmorClass2", 1);
    TakeInventory("DSNoArmorClass", 9999);
    TakeInventory("DSGreenArmorClass", 9999);
    TakeInventory("DSBlueArmorClass", 9999);
    TakeInventory("DSStoneArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass1", 9999);
    TakeInventory("DSDiamondArmorClass2", 9999);
   }
   else
   {
    if (CurrentArmorClass == 4)
    {
     CurrentMaxArmor = 888;
     GiveInventory("DSDiamondArmorClass1", 1);
     TakeInventory("DSNoArmorClass", 9999);
     TakeInventory("DSGreenArmorClass", 9999);
     TakeInventory("DSBlueArmorClass", 9999);
     TakeInventory("DSStoneArmorClass1", 9999);
     TakeInventory("DSStoneArmorClass2", 9999);
     TakeInventory("DSDiamondArmorClass2", 9999);
    }
    else
    {
     if (CurrentArmorClass == 3)
     {
      CurrentMaxArmor = 333;
      GiveInventory("DSStoneArmorClass1", 1);
      TakeInventory("DSNoArmorClass", 9999);
      TakeInventory("DSGreenArmorClass", 9999);
      TakeInventory("DSBlueArmorClass", 9999);
      TakeInventory("DSDiamondArmorClass1", 9999);
      TakeInventory("DSStoneArmorClass2", 9999);
      TakeInventory("DSDiamondArmorClass2", 9999);
     }
     else
     {
      if (CurrentArmorClass == 2)
      {
       CurrentMaxArmor = 200;
       GiveInventory("DSBlueArmorClass", 1);
       TakeInventory("DSNoArmorClass", 9999);
       TakeInventory("DSGreenArmorClass", 9999);
       TakeInventory("DSStoneArmorClass1", 9999);
       TakeInventory("DSDiamondArmorClass1", 9999);
       TakeInventory("DSStoneArmorClass2", 9999);
       TakeInventory("DSDiamondArmorClass2", 9999);
      }
      else
      {
       if (CurrentArmorClass == 1)
       {
        CurrentMaxArmor = 100;
        GiveInventory("DSGreenArmorClass", 1);
        TakeInventory("DSNoArmorClass", 9999);
        TakeInventory("DSBlueArmorClass", 9999);
        TakeInventory("DSStoneArmorClass1", 9999);
        TakeInventory("DSDiamondArmorClass1", 9999);
        TakeInventory("DSStoneArmorClass2", 9999);
        TakeInventory("DSDiamondArmorClass2", 9999);
       }
       else
       {
        CurrentMaxArmor = 0;
        GiveInventory("DSNoArmorClass", 1);
        TakeInventory("DSGreenArmorClass", 9999);
        TakeInventory("DSBlueArmorClass", 9999);
        TakeInventory("DSStoneArmorClass1", 9999);
        TakeInventory("DSDiamondArmorClass1", 9999);
        TakeInventory("DSStoneArmorClass2", 9999);
        TakeInventory("DSDiamondArmorClass2", 9999);
       }
      }
     }
    }
   }
  }
 }

}

// DEBUG SCRIPT: Sets Mana to the Current Amount
script 835 (int C5)
{
 CurrentMana = C5;
 if (CurrentMana < 1) CurrentMana = 0;
 if (CharacterClass == 2) // Flora can have 200% Mana/MP
 {
  if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
 }
 else
 {
  if (CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
 }
}

// Checks the Player's level to determine how much drawing the Diaris Longbow will slow you down while aiming
script 836 (int isbowdrawn)
{
 int i = 0;
 int bowlevel;
 int strforbowdraw;
 int aglforbowdraw;
 str BowLevelItem;

 bowlevel = PlayerLevel / 25;
 strforbowdraw = MiscellaneousVars[35] / 16;
 aglforbowdraw = MiscellaneousVars[31] / 10;
 bowlevel += strforbowdraw;
 bowlevel += aglforbowdraw;
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) bowlevel = bowlevel * 4 / 3;

 if (bowlevel < 0) bowlevel = 0; // Min of 0
 if (bowlevel > 50) bowlevel = 50; // Max of 50
 if (isbowdrawn == 1)
 {
  if (bowlevel != MiscellaneousVars[8]) // [8] is for bow profiency
  {
   for (i = 0; i < 51; i++)
   {
    BowLevelItem = StrParam(s:"BowDrawnSlowdown", d:i);

    if (bowlevel == i)
    GiveActorInventory(1001, BowLevelItem, 1);
     else
    TakeActorInventory(1001, BowLevelItem, 1);
   }
   MiscellaneousVars[8] = bowlevel;
  }
 }
 else
 {
  MiscellaneousVars[8] = -1;
  for (i = 0; i < 51; i++)
  {
   BowLevelItem = StrParam(s:"BowDrawnSlowdown", d:i);

   TakeActorInventory(1001, BowLevelItem, 1);
  }
 }
}

// Checks Sauron's Gauntlets to see if the item is removed from the map or not.
script 837 (void)
{
 if (CharacterClass == 0 && CheckActorInventory(1001,"SauronGauntlets") > 0) SetThingSpecial(0,0,0,0,0,1,2); else SetThingSpecial(0,0,0,0,0,0,2);
 if (CharacterClass == 1 && CheckActorInventory(1001,"SauronGauntletsIllucia") > 0) SetThingSpecial(0,0,0,0,0,1,1); else SetThingSpecial(0,0,0,0,0,0,1);
 if (CharacterClass == 2 && CheckActorInventory(1001,"SauronGauntletsFlora") > 0) SetThingSpecial(0,0,0,0,0,1,3); else SetThingSpecial(0,0,0,0,0,0,3);
}

// Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color based on the current Armor Class of Deggaris or Illucia [does not apply to Flora as she can't use Armor Bonuses and they aren't supposed to "appear" when she is in play]
script 838 (void)
{
 if (CharacterClass != 2)
 {
  if (CurrentArmorClass == 0) { SetThingSpecial(0,0,0,0,0,1,0); Thing_SetTranslation(1281,18); } // If you have no Armor Class
  if (CurrentArmorClass == 1) { SetThingSpecial(0,0,0,0,0,1,0); Thing_SetTranslation(1281,18); } // If you have Green Armor Class
  if (CurrentArmorClass == 2) { SetThingSpecial(0,0,0,0,0,2,0); Thing_SetTranslation(1281,22); } // If you have Blue Armor Class
  if (CurrentArmorClass == 3) { SetThingSpecial(0,0,0,0,0,3,0); Thing_SetTranslation(1281,20); } // If you have Stone Armor [1] Class
  if (CurrentArmorClass == 4) { SetThingSpecial(0,0,0,0,0,4,0); Thing_SetTranslation(1281,21); } // If you have Diamond Armor [1] Class
  if (CurrentArmorClass == 5) { SetThingSpecial(0,0,0,0,0,3,0); Thing_SetTranslation(1281,20); } // If you have Stone Armor [2] Class
  if (CurrentArmorClass == 6) { SetThingSpecial(0,0,0,0,0,6,0); Thing_SetTranslation(1281,21); } // If you have Diamond Armor [2] Class
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
}

// Runs when you grab a backpack
script 839 (void)
{
 int ClipMax, ShellMax, RocketMax, CellMax, DiarisArrowMax;

 MiscellaneousVars[80] += 1; 
 if (MiscellaneousVars[80] > 128) MiscellaneousVars[80] = 128;

 if (CharacterClass != 2) // Deggaris & Illucia
 {
  GiveActorInventory(1001,"Clip", 20); 
  GiveActorInventory(1001,"Shell", 8); 
  GiveActorInventory(1001,"RocketAmmo", 2); 
  GiveActorInventory(1001,"Cell", 80); 
 }
 if (CharacterClass == 2) // Flora
 {
  if (CheckActorInventory(1001,"FloraLearnedPistols") > 0) GiveActorInventory(1001,"Clip", 20);
  GiveActorInventory(1001,"DiarisArrow", 6); 
 }
}

// Debug. Prints whatever it specified. :P
script 840 (void)
{
 int test;
 test += 1;
 Print(d:test);
// Print(s:"?");
}

// Checks to see if you already possess the Ring so it cannot appear more than once.
script 841 (void)

{
 if (CheckActorInventory(1001,"TheOneRing") > 0) SetThingSpecial(0,0,0,0,0,1,0); else SetThingSpecial(0,0,0,0,0,0,0);
}

// Checks to see if you already possess the Helmet so it cannot appear more than once.
script 842 (void)
{
 if (CheckActorInventory(1001,"SauronHelmet") > 0) SetThingSpecial(0,0,0,0,0,1,0); else SetThingSpecial(0,0,0,0,0,0,0);
}

// script 843 = Prints out damage on screen for a projectile attached to this script
script 843 (void)
{
 int C1;
 C1 = GetActorProperty(0,APROP_Damage); 
 PrintBold(d:C1);
}

// script 844 = Set Levelcap Manually
script 844 (int C5)
{
 int C1;
 if (C5 > 99)
 {
  if (C5 < 201)
  {
   LevelCap = C5;
  }
  else
  {
   LevelCap = 200;
  }
 }
 else
 {
  LevelCap = 100;
 }
}

// script 845 = Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
script 845 (int Arg1)
{
 int ManaDrainTimer;
 if (Arg1 == 0) { TwirlTimer = 0; } // 0 resets the timer to 0
 else // Arg1's value is the speed of the twirling
 {
  if (Arg1 > 16) Arg1 = 16;
  if (Arg1 < 1) Arg1 = 1;
  TwirlTimer += Arg1;

  if (TwirlTimer < 1) TwirlTimer += 32; // Prevents Timer Underflow
  if (TwirlTimer > 32) TwirlTimer -= 32; // Prevents Timer Overflow
 }

 int i;
 str TwirlFrame;
 for (i = 1; i < 33; i++)
 {
  TwirlFrame = StrParam(s:"SceptreTwirlTimer", d:i);

  if (TwirlTimer == i)
   GiveActorInventory(1001, TwirlFrame, 1);
    else
   TakeActorInventory(1001, TwirlFrame, 1);
 }
}

// script 846 = Set Thing Special on the ShieldSpawner object for the twirling of the Sceptre.
script 846 (void)
{
 if (TwirlTimer == 1) SetThingSpecial(0,0,1);
 if (TwirlTimer == 2) SetThingSpecial(0,0,2);
 if (TwirlTimer == 3) SetThingSpecial(0,0,3);
 if (TwirlTimer == 4) SetThingSpecial(0,0,4);
 if (TwirlTimer == 5) SetThingSpecial(0,0,5);
 if (TwirlTimer == 6) SetThingSpecial(0,0,6);
 if (TwirlTimer == 7) SetThingSpecial(0,0,7);
 if (TwirlTimer == 8) SetThingSpecial(0,0,8);
 if (TwirlTimer == 9) SetThingSpecial(0,0,9);
 if (TwirlTimer == 10) SetThingSpecial(0,0,10);
 if (TwirlTimer == 11) SetThingSpecial(0,0,11);
 if (TwirlTimer == 12) SetThingSpecial(0,0,12);
 if (TwirlTimer == 13) SetThingSpecial(0,0,13);
 if (TwirlTimer == 14) SetThingSpecial(0,0,14);
 if (TwirlTimer == 15) SetThingSpecial(0,0,15);
 if (TwirlTimer == 16) SetThingSpecial(0,0,16);
 if (TwirlTimer == 17) SetThingSpecial(0,0,17);
 if (TwirlTimer == 18) SetThingSpecial(0,0,18);
 if (TwirlTimer == 19) SetThingSpecial(0,0,19);
 if (TwirlTimer == 20) SetThingSpecial(0,0,20);
 if (TwirlTimer == 21) SetThingSpecial(0,0,21);
 if (TwirlTimer == 22) SetThingSpecial(0,0,22);
 if (TwirlTimer == 23) SetThingSpecial(0,0,23);
 if (TwirlTimer == 24) SetThingSpecial(0,0,24);
 if (TwirlTimer == 25) SetThingSpecial(0,0,25);
 if (TwirlTimer == 26) SetThingSpecial(0,0,26);
 if (TwirlTimer == 27) SetThingSpecial(0,0,27);
 if (TwirlTimer == 28) SetThingSpecial(0,0,28);
 if (TwirlTimer == 29) SetThingSpecial(0,0,29);
 if (TwirlTimer == 30) SetThingSpecial(0,0,30);
 if (TwirlTimer == 31) SetThingSpecial(0,0,31);
 if (TwirlTimer == 32) SetThingSpecial(0,0,32);
 PrintBold(d:TwirlTimer);
}

// script 847 = Increases the number of points towards uncursing a Ruinous Shield into a Divine Shield
script 847 (int Arg1)
{
 int C1;

 if (CheckActorInventory(1001,"PearlyCorset") > 0) Arg1 += Arg1;
 if (CheckActorInventory(1001,"DoveRibbon") > 0) Arg1 += Arg1;

 if (CharacterClass == 2)
 {
  if (CheckActorInventory(1001,"RuinousShield") > 0)
  {
   C1 = random(1,100);
   if (C1 == 1) Arg1 = Arg1 * 16;
   if (C1 == 2) Arg1 = Arg1 * 8;
   if (C1 == 3) Arg1 = Arg1 * 8;
   if (C1 == 4) Arg1 = Arg1 * 4;
   if (C1 == 5) Arg1 = Arg1 * 4;
   if (C1 == 6) Arg1 = Arg1 * 4;
   if (C1 == 7) Arg1 = Arg1 * 4;
   if (C1 == 8) Arg1 = Arg1 * 2;
   if (C1 == 9) Arg1 = Arg1 * 2;
   if (C1 == 10) Arg1 = Arg1 * 2;
   if (C1 == 11) Arg1 = Arg1 * 2;
   if (C1 == 12) Arg1 = Arg1 * 2;
   if (C1 == 13) Arg1 = Arg1 * 2;
   if (C1 == 14) Arg1 = Arg1 * 2;
   if (C1 == 15) Arg1 = Arg1 * 2;
   if (Arg1 < 1) Arg1 = 1;
   if (Arg1 > 512) Arg1 = 512;
   RuinousShieldPts += Arg1;
   // PrintBold(s:"+",d:Arg1,s:" (",d:RuinousShieldPts,s:")");
  }
 }
}
// script 848 = Checks for DivineShield in inventory for the Ruinous Shield PICKUP.
script 848 (void)
{
 if (CheckActorInventory(1001,"DivineShield") > 0)
 {
  SetThingSpecial(0,0,0,0,0,0,1); // Sets Args[4] to 1 so the item can know to make the shield vanish
 }
 else
 {
  SetThingSpecial(0,0,0,0,0,0,0); // Sets Args[4] to 0 so the item can know to NOT make the shield vanish
 }
}

// Gauntlet Flash Effect
script 849 (void)
{
 if (GauntletEffectFlash > 0)
 {
  FadeRange(224,224,224,0.33,224,224,224,0,0.5);
  GauntletEffectFlash = 0;
 }
}

// Sauron's Gauntlets Effect
script 850 (int Amount, int HitType)
{
 int C1, C2, C3, Z1, Z2, Z3, I1, I2, I3, G1, G2, G3;
 if (HitType <= 0) HitType = 1;
 if (HitType >= 3) HitType = 2;

 if (HitType == 1) // Give some life when hurting a monster [1+(HP/500)]
 {
  G1 = GetUserVariable(0,"user_MaxHP");
  G1 = G1 / 500;
  G1 = G1 + 1;
 }
 else
 if (HitType == 2) // Give some life when killing a monster [3+(HP/100)]
 {
  G1 = GetUserVariable(0,"user_MaxHP");
  G1 = G1 / 100;
  G1 = G1 + 3;
 }
 Amount = G1;
 If (Amount <= 0) Amount = 1;

 GauntletEffectFlash = 1; // Screen Flash
 ACS_ExecuteAlways(820,0,Amount,0,0); // Restore Health
 if (CharacterClass != 2) ACS_ExecuteAlways(830,0,Amount,0,0);  // Restore Armor [Flora Cannot Gain Armor from it though]

 // Restore Mana
 C1 = PlayerLevel * 4;
 C1 += 100;
 C2 = Amount;
 C2 = C2 * C1 / 100;
 if (CharacterClass == 2) C2 = C2 * 3 / 2; // Flora will gain Extra Mana from a Gauntlet punch to make up for not being able to get armor.
 CurrentMana += C2;
 SetHudSize(640,480,0);
 SetFont("SmallFont");
 HudMessage(s:"+",d:C2,s:" Mana";0,3419,cr_blue,0.036,0.081,0.75);
}

// Makes Monsters in MAP04 [DVI-DS] or MAP12 [DVII-DS] have a TID of 666 
script 851 (void)
{
 if (ModType == 1) // DVI
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1104)
  {
   Thing_ChangeTID (0, 666);
  }
 }
 else
 if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1214)
  {
   Thing_ChangeTID (0, 666);
  }
 }
}

// Unknown Filler script 8>.>
script 852 (int C5)
{
 int C1, C2, C3, I1, I2, I3;
}

// "Gravity" style Spell (used for fixed % damage based on CURRENT/REMAINING HP or CURRENT/REMAINING Invulnerability Timer)
script 853 (int C5)
{
 int C1, C2, C3;

 if (GetActorProperty(1001,APROP_Health) < 1) terminate;

 if (PowerupRunning[4] == 1) // If the character is Invulnerable, diminish their Invulnerability Timer
 {
  if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
  if (GameSkill() == SKILL_EASY) C5 = 125;  
  if (GameSkill() == SKILL_NORMAL) C5 = 250;  
  if (GameSkill() == SKILL_HARD) C5 = 375;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
  if (random(1,16) == 16) C5 = C5 * 2;
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0)
  {
   C3 = 300 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 300;
  }
  if (CharacterClass == 1)
  {
   C3 = 200 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 200;
  }
  if (CharacterClass == 2)
  {
   C3 = 150 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 150;
  }
  C2 = 1000 - C5;

  if (C5 < 0) C5 = 0;
  if (C5 > 0)
  {
   C1 = PowerupTimer[4];
   C1 = C1 * C2 / 1000;

   if (C1 < 1) C1 = 1;
   PowerupTimer[4] = C1;
   SetActorState(1001,"InvulnFlashGravity");
  }
 }
 else // Otherwise affect their HP as per usual
 {
  if (GameSkill() == SKILL_VERY_EASY) C5 = 125;  
  if (GameSkill() == SKILL_EASY) C5 = 250;  
  if (GameSkill() == SKILL_NORMAL) C5 = 500;  
  if (GameSkill() == SKILL_HARD) C5 = 750;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 875;  
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0)
  {
   C3 = 300 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 300;
  }
  if (CharacterClass == 1)
  {
   C3 = 200 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 200;
  }
  if (CharacterClass == 2)
  {
   C3 = 150 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 150;
  }
  C2 = 1000 - C5;

  if (C5 < 0) C5 = 0;
  if (C5 > 0)
  {
   C1 = GetActorProperty(1001,APROP_Health);
   C1 = C1 * C2 / 1000;

   if (C1 < 1) C1 = 1;
   SetActorProperty(1001,APROP_Health,C1);
   SetActorState(1001,"HPFlashGravity");
  }
 }
}

// "Gravity" style Spell (used for fixed % damage based on CURRENT/REMAINING MANA or CURRENT/REMAINING Invulnerability Timer)
script 854 (int C5)
{
 int C1, C2, C3;

 if (GetActorProperty(1001,APROP_Health) < 1) terminate;

 if (PowerupRunning[4] == 1) // If the character is Invulnerable, diminish their Invulnerability Timer
 {
  if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
  if (GameSkill() == SKILL_EASY) C5 = 125;  
  if (GameSkill() == SKILL_NORMAL) C5 = 250;  
  if (GameSkill() == SKILL_HARD) C5 = 375;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
  if (random(1,16) == 16) C5 = C5 * 2;
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0)
  {
   C3 = 300 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 300;
  }
  if (CharacterClass == 1)
  {
   C3 = 200 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 200;
  }
  if (CharacterClass == 2)
  {
   C3 = 150 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 150;
  }
  C2 = 1000;
  C2 = C2 - C5;

  // PrintBold(d:C2);

  if (C5 < 0) C5 = 0;
  if (C5 > 0)
  {
   C1 = PowerupTimer[4];
   C1 = C1 * C2 / 1000;

   if (C1 < 1) C1 = 1;

   PowerupTimer[4] = C1;
   SetActorState(1001,"InvulnFlashGravity");
  }
 }
 else // Otherwise affect their MP as per usual
 {
  if (GameSkill() == SKILL_VERY_EASY) C5 = 63;  
  if (GameSkill() == SKILL_EASY) C5 = 125;  
  if (GameSkill() == SKILL_NORMAL) C5 = 250;  
  if (GameSkill() == SKILL_HARD) C5 = 375;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 437;  
  if (random(1,16) == 16) C5 = C5 * 2;
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0)
  {
   C3 = 300 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 300;
  }
  if (CharacterClass == 1)
  {
   C3 = 200 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 200;
  }
  if (CharacterClass == 2)
  {
   C3 = 150 - MiscellaneousVars[36];
   if (C3 < 0) C3 = 0;
   C5 = C5 * C3 / 150;
  }
  C2 = 1000;
  C2 = C2 - C5;

  // PrintBold(d:C2);

  if (C5 < 0) C5 = 0;
  if (C5 > 0)
  {
   C1 = CurrentMana;
   C1 = C1 * C2 / 1000;

   if (C1 < 0) C1 = 0;

   CurrentMana = C1;
   SetActorState(1001,"ManaFlashGravity");
  }
 }
}

// Redone Buff Checker (allows additive buff timers from spells and powerup items) [must use the "DoomSpellACS" actor on a map to make this work!]
script 855 ENTER
{
 int G1, G2, G3, C1, C2, C3, I1, I2, I3, D1;

 // Light/Infared
 SetHudSize(640,480,0);
 if (PowerupTimer[0] > 0)
 {
  PowerupRunning[0] = 1;
  SetPlayerProperty(1,1,PROP_INFRARED);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Light: ",d:PowerupTimer[0];0,3433,cr_white,0.1,210.0,1.1);
  PowerupTimer[0] -= 1;
 }
 else
 {
  PowerupRunning[0] = 0;
  SetPlayerProperty(1,0,PROP_INFRARED);
 }

 // Invisibility
 if (PowerupTimer[1] > 0)
 {
  PowerupRunning[1] = 1;
  SetPlayerProperty(1,1,PROP_INVISIBILITY);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Invisibility: ",d:PowerupTimer[1];0,3434,cr_white,0.1,220.0,1.1);
  PowerupTimer[1] -= 1;
 }
 else
 {
  PowerupRunning[1] = 0;
  SetPlayerProperty(1,0,PROP_INVISIBILITY);
 }

 // Flight
 if (PowerupTimer[2] > 0)
 {
  PowerupRunning[2] = 1;
  SetPlayerProperty(1,1,PROP_FLY);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Flight: ",d:PowerupTimer[2];0,3435,cr_white,0.1,230.0,1.1);
  PowerupTimer[2] -= 1;
 }
 else
 {
  PowerupRunning[2] = 0;
  SetPlayerProperty(1,0,PROP_FLY);
 }

 // Stealth
 if (PowerupTimer[3] > 0)
 {
  PowerupRunning[3] = 1;
  SetPlayerProperty(1,1,PROP_NOTARGET);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Stealth: ",d:PowerupTimer[3];0,3436,cr_white,0.1,240.0,1.1);
  PowerupTimer[3] -= 1;
 }
 else
 {
  PowerupRunning[3] = 0;
  SetPlayerProperty(1,0,PROP_NOTARGET);
 }

 // Invulnerability
 if (PowerupTimer[4] > 0)
 {
  PowerupRunning[4] = 1;
  SetPlayerProperty(1,1,PROP_INVULNERABILITY);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Invulnerability: ",d:PowerupTimer[4];0,3437,cr_white,0.1,250.0,1.1);
  PowerupTimer[4] -= 1;
 }
 else
 {
  PowerupRunning[4] = 0;
  SetPlayerProperty(1,0,PROP_INVULNERABILITY);
 }

 // Time Stop
 if (PowerupTimer[5] > 0)
 {
  PowerupRunning[5] = 1;
  GiveActorInventory(1001, "PowerTimeFreezer", 1);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Time Freeze: ",d:PowerupTimer[5];0,3438,cr_white,0.1,260.0,1.1);
  PowerupTimer[5] -= 1;
 }
 else
 {
  PowerupRunning[5] = 0;
  PowerupTimer[5] = 0;
  TakeActorInventory(1001, "PowerTimeFreezer", 9999);
 }

 // Fear Aura Effects
 if (PowerupTimer[6] > 0)
 {
  PowerupRunning[6] = 1;
  GiveActorInventory(1001, "PowerFrightener", 1);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Fear Aura: ",d:PowerupTimer[6];0,3439,cr_white,0.1,270.0,1.1);
  PowerupTimer[6] -= 1;
 }
 else
 {
  PowerupRunning[6] = 0;
  PowerupTimer[6] = 0;
  TakeActorInventory(1001, "PowerFrightener", 9999);
 }

 // Divine Avatar Effects
 if (PowerupTimer[7] > 0)
 {
  PowerupRunning[7] = 1;

  GiveActorInventory(1001, "PowerDoubleDamage", 1);
  GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
  GiveActorInventory(1001, "PowerHalfDamage", 1);
  GiveActorInventory(1001, "PowerSpeed", 1);
  GiveActorInventory(1001, "PowerHighJump", 1);

  C3 = MaxHealthDoubleTrue / random(67,100);
  if (CharacterClass == 0 && CheckActorInventory(1001, "SauronGauntlets") > 0) C3 = C3 * 17 / 16;
  if (CharacterClass == 1 && CheckActorInventory(1001, "SauronGauntletsIllucia") > 0) C3 = C3 * 17 / 16;
  if (CheckActorInventory(1001, "TheOneRing") > 0) C3 = C3 * 9 / 8;
  I3 = GetActorProperty(1001,APROP_HEALTH);
  if (I3 > 0 && I3 < MaxHealthDoubleTrue)
  {
   I3 += C3;
   if (I3 >= MaxHealthDoubleTrue) I3 = MaxHealthDoubleTrue;
   SetActorProperty(1001,APROP_HEALTH,I3);
  }
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Divine Avatar: ",d:PowerupTimer[7];0,3440,cr_white,0.1,280.0,1.1);
    
  PowerupTimer[7] -= 1;
 }
 else
 {
  PowerupRunning[7] = 0;
  PowerupTimer[7] = 0;
  TakeActorInventory(1001, "PowerDoubleDamage", 9999);
  TakeActorInventory(1001, "PowerDoubleFiringSpeed", 9999);
  TakeActorInventory(1001, "PowerHalfDamage", 9999);
  TakeActorInventory(1001, "PowerSpeed", 9999);
  TakeActorInventory(1001, "PowerHighJump", 9999);
 }

/*
 // Speader Aura Effects
 if (PowerupTimer[8] > 0)
 {
  PowerupRunning[8] = 1;
  GiveActorInventory(1001, "SpreaderAura1", 1);
  if (GetActorProperty(1001,APROP_Health) > 0) HudMessageBold(s:"Spreader Aura: ",d:PowerupTimer[8];0,3441,cr_white,0.1,290.0,1.1);
  PowerupTimer[8] -= 1;
 }
 else
 {
  PowerupRunning[8] = 0;
  PowerupTimer[8] = 0;
  TakeActorInventory(1001, "SpreaderAura1", 9999);
 }
*/

 // GoE?? Effects
 if (PowerupTimer[129] > 0)
 {
  PowerupRunning[129] = 1;
  GiveActorInventory(1001, "GoEDamageBonus", 1);
  GiveActorInventory(1001, "GoEDefenseBonus", 1);
  // (GoE is intended as a "permenant buff" once activated. To disable this and make it time elasped, uncomment the line below)
  // PowerupTimer[129] -= 1;
 }
 else
 {
  PowerupRunning[129] = 0;
  PowerupTimer[129] = 0;
  TakeActorInventory(1001, "GoEDamageBonus", 9999);
  TakeActorInventory(1001, "GoEDefenseBonus", 9999);
 }
 SetHudSize(0,0,0);

 if (CharacterClass == 2 && CheckActorInventory(1001,"DoveRibbon") > 0) // Flora
 {
  C3 = PlayerLevel / 50 + 1;
  I3 = GetActorProperty(1001,APROP_HEALTH);
  if (I3 > 0 && I3 < MaxHealthDoubleTrue)
  {
   I3 += C3;
   if (I3 >= MaxHealthDoubleTrue) I3 = MaxHealthDoubleTrue;
   SetActorProperty(1001,APROP_HEALTH,I3);
  }
 }
 Delay(35);
 Restart;
}


// Enforces Giving or Removing Buffs when certain powerup timers are on/off
script 856 (int C5, int C6)
{
 // C5 = Powerup Type
 // C6 = Powerup Timer Additive
 int G1, G2, G3, C1, C2, C3, I1, I2, I3;

 if (C5 == 0) // Light/Infared
 {
  PowerupTimer[0] += C6;
  if (PowerupTimer[0] > 0) SetPlayerProperty(1,1,PROP_INFRARED);
 }
 if (C5 == 1) // Invisibility
 {
  PowerupTimer[1] += C6;
  if (PowerupTimer[1] > 0) SetPlayerProperty(1,1,PROP_INVISIBILITY);
 }
 if (C5 == 2) // Flight
 {
  PowerupTimer[2] += C6;
  if (PowerupTimer[2] > 0) SetPlayerProperty(1,1,PROP_FLY);
 }
 if (C5 == 3) // Stealth
 {
  PowerupTimer[3] += C6;
  if (PowerupTimer[3] > 0) SetPlayerProperty(1,1,PROP_NOTARGET);
 }
 if (C5 == 4) // Invulnerability
 {
  PowerupTimer[4] += C6;
  if (PowerupTimer[4] > 0) SetPlayerProperty(1,1,PROP_INVULNERABILITY);
 }
 if (C5 == 5) // Time Freeze
 {
  PowerupTimer[5] += C6;
  if (PowerupTimer[5] > 0) GiveActorInventory(1001, "PowerTimeFreezer", 1);
 }
 if (C5 == 6) // Fear Aura
 {
  PowerupTimer[6] += C6;
  if (PowerupTimer[6] > 0) GiveActorInventory(1001, "PowerFrightener", 1);
 }
 if (C5 == 7) // Divine Avatar
 {
  PowerupTimer[7] += C6;
  if (PowerupTimer[7] > 0)
  {
   GiveActorInventory(1001, "PowerDoubleDamage", 1);
   GiveActorInventory(1001, "PowerDoubleFiringSpeed", 1);
   GiveActorInventory(1001, "PowerHalfDamage", 1);
   GiveActorInventory(1001, "PowerSpeed", 1);
   GiveActorInventory(1001, "PowerHighJump", 1);
  }
 }
 if (C5 == 129) // GoE??
 {
  PowerupTimer[129] += C6;
  if (PowerupTimer[129] > 0)
  {
   GiveActorInventory(1001, "GoEDamageBonus", 1);
   GiveActorInventory(1001, "GoEDefenseBonus", 1);
  }
 }
}

// ?
script 857 (void)
{
 int C1;
 C1 = GetActorProperty(0,APROP_Damage);
 SetResultValue(C1);
 Print(d:C1);
}

// Screen Flash for Diabloist's Gravity Attack
script 858 (int C5)
{ 
 if (C5 == 0) FadeRange(192,0,0,1.25,192,0,0,0,1.125);
 if (C5 == 1) FadeRange(0,0,192,1.25,0,0,192,0,1.125);
 if (C5 == 2) FadeRange(192,192,192,1.25,192,192,192,0,1.125);
 if (C5 == 3) FadeRange(192,0,192,1.25,192,0,192,0,1.125);
}

// "Gravity" style Spell (used for fixed % damage based on CURRENT/REMAINING HP & MANA or CURRENT/REMAINING Invulnerability Timer)
script 859 (void)
{
 int basedmgratio;
 int AffectedStat, MultFactor, THEEffect;

 if (GetActorProperty(1001,APROP_Health) < 1) terminate;

 if (PowerupRunning[4] == 1) // If the character is Invulnerable, diminish their Invulnerability Timer
 {
  if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 125; // 12.5% Base Damage
  if (GameSkill() == SKILL_EASY) basedmgratio = 250; // 25.0% Base Damage
  if (GameSkill() == SKILL_NORMAL) basedmgratio = 500; // 50.0% Base Damage
  if (GameSkill() == SKILL_HARD) basedmgratio = 750; // 75.0% Base Damage
  if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 875; // 87.5% Base Damage
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
  if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
  if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
  if (THEEffect < 0) THEEffect = 0;
  if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
  if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
  if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
  MultFactor = 1000 - basedmgratio;

  if (basedmgratio < 0) basedmgratio = 0;
  if (basedmgratio > 0)
  {
   AffectedStat = PowerupTimer[4] * MultFactor / 1000;
   if (AffectedStat < 1) AffectedStat = 1;

   PowerupTimer[4] = AffectedStat;
   SetActorState(1001,"InvulnFlashGravity");
  }
 }
 else // Otherwise affect their HP & MP as per usual
 {
  if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 125; // 12.5% Base Damage
  if (GameSkill() == SKILL_EASY) basedmgratio = 250; // 25.0% Base Damage
  if (GameSkill() == SKILL_NORMAL) basedmgratio = 500; // 50.0% Base Damage
  if (GameSkill() == SKILL_HARD) basedmgratio = 750; // 75.0% Base Damage
  if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 875; // 87.5% Base Damage
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
  if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
  if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
  if (THEEffect < 0) THEEffect = 0;
  if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
  if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
  if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
  MultFactor = 1000 - basedmgratio;

  if (basedmgratio < 0) basedmgratio = 0;
  if (basedmgratio > 0)
  {
   AffectedStat = GetActorProperty(1001,APROP_Health) * MultFactor / 1000;
   if (AffectedStat < 1) AffectedStat = 1;

   SetActorProperty(1001,APROP_Health,AffectedStat);
  }

  if (GameSkill() == SKILL_VERY_EASY) basedmgratio = 63; // 6.3%
  if (GameSkill() == SKILL_EASY) basedmgratio = 125; // 12.5%
  if (GameSkill() == SKILL_NORMAL) basedmgratio = 250; // 25.0%
  if (GameSkill() == SKILL_HARD) basedmgratio = 375; // 37.5%
  if (GameSkill() == SKILL_VERY_HARD) basedmgratio = 437; // 43.7%
  if (random(1,16) == 16) basedmgratio = basedmgratio * 2;
  // SeedTHE Levels
  // Deggaris = 300 Needed to max out
  // Illucia = 200 Needed to max out
  // Flora = 150 Needed to max out
  if (CharacterClass == 0) THEEffect = 300 - MiscellaneousVars[36];
  if (CharacterClass == 1) THEEffect = 200 - MiscellaneousVars[36];
  if (CharacterClass == 2) THEEffect = 150 - MiscellaneousVars[36];
  if (THEEffect < 0) THEEffect = 0;
  if (CharacterClass == 0) basedmgratio = basedmgratio * THEEffect / 250;
  if (CharacterClass == 1) basedmgratio = basedmgratio * THEEffect / 200;
  if (CharacterClass == 2) basedmgratio = basedmgratio * THEEffect / 150;
  MultFactor = 1000 - basedmgratio;

  if (basedmgratio < 0) basedmgratio = 0;
  if (basedmgratio > 0)
  {
   AffectedStat = CurrentMana * MultFactor / 1000;

   if (AffectedStat < 0) AffectedStat = 0;

   CurrentMana = AffectedStat;

   SetActorState(1001,"HPManaFlashGravity");
  }
 }
}


// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
script "ClassicDoom2ArmorCheck" (void)
{
 if (ModType == 0) // Classic Doom 1/2
 {
  if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,3);
  if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,4);
  if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,5); // Sets Args[4] to 5 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
 else
 {
  if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,0);
  if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,1);
  if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
 }
}

// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items
script 860 (void)
{
 if (CharacterClass == 0) SetThingSpecial(0,0,0,0,0,0,0);
 if (CharacterClass == 1) SetThingSpecial(0,0,0,0,0,0,1);
 if (CharacterClass == 2) SetThingSpecial(0,0,0,0,0,0,2); // Sets Args[4] to 2 so the item can know to transform into another set of items if Flora is detected as the current character.
}

// Keeps Diabloist Locked on players as targets.
script 861 (void)
{
 Thing_Hate(0,1001,0);
}

// Accmulate EXP for Sceptre
script "AddSceptreEXP" (int Arg1, int Arg2)
{
 int C1, C2;
 int EXPBonus1;

 if (CharacterClass != 2) terminate;
 if (CharacterClass == 2)
 {
  if (Arg2 > 0)
  {
   C2 = 16 - SceptreActualLevel;
   if (C2 < 1) C2 += 16;
   if (C2 > 16) C2 -= 16;

   EXPBonus1 = 1000;
   // Pearly Corset [+30% EXP Bonus]
   if (CharacterClass == 2) // Only Flora can Equip the Pearly Corset
   {
    if (CheckActorInventory(1001,"PearlyCorset")) 
    {
     if (random(1,100) <= 5) EXPBonus1 += 450; // 5% Chance of +45% EXP Bonus
     else EXPBonus1 += 300; // Else +30% EXP Bonus
    }
   }
   // Divine Avatar {+25% EXP Bonus]
   if (PowerupRunning[7] == 1)
   {
    if (random(1,100) <= 20) EXPBonus1 += 500; // 20% Chance of +50% EXP Bonus
    else EXPBonus1 += 250; // 20% Else +25% EXP Bonus
   }
   C2 = C2 * EXPBonus1 / 1000;
   C2 = C2 * (48 + MiscellaneousVars[40]) / 48;
   C2 = C2 * MiscellaneousVars[88] / 100;

   if (ModType == 0) C2 = C2 * 4 / 3; // Classic Doom 1/2
   SceptreEXPFragment += C2;


   // PrintBold(d:C2);
   while (SceptreEXPFragment > 15) // if (SceptreEXPFragment > 15)
   {
    SceptreEXPFragment -= 16;
    SceptreLevelEXP += 1;
   }
  }
  else
  {
   Arg1 = GetUserVariable(0,"user_MaxHP");
   if (ModType == 0) Arg1 = Arg1 * 4 / 3; // Classic Doom 1/2
   Arg1 = Arg1 / 300;
   Arg1 = Arg1 + 1;

   C1 = random(1,256);
   if (C1 == 1) Arg1 = Arg1 * 8;
   if (C1 == 2) Arg1 = Arg1 * 4;
   if (C1 == 3) Arg1 = Arg1 * 4;
   if (C1 == 4) Arg1 = Arg1 * 2;
   if (C1 == 5) Arg1 = Arg1 * 2;
   if (C1 == 6) Arg1 = Arg1 * 2;
   if (C1 == 7) Arg1 = Arg1 * 2;

   // Higher Levels = slightly less chances to get all EXP
   if (SceptreActualLevel > 15 && C1 == 241) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 14 && C1 == 242) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 13 && C1 == 243) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 12 && C1 == 244) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 11 && C1 == 245) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 10 && C1 == 246) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 9 && C1 == 247) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 8 && C1 == 248) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 7 && C1 == 249) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 6 && C1 == 250) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 5 && C1 == 251) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 4 && C1 == 252) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 3 && C1 == 253) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 2 && C1 == 254) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 1 && C1 == 255) Arg1 = Arg1 / 2;
   if (SceptreActualLevel > 0 && C1 == 256) Arg1 = Arg1 / 2;

   EXPBonus1 = 1000;
   // Pearly Corset [+30%/+45% EXP Bonus]
   if (CharacterClass == 2) // Only Flora can Equip the Pearly Corset
   {
    if (CheckActorInventory(1001,"PearlyCorset")) 
    {
     if (random(1,100) <= 5) EXPBonus1 += 450; // 5% Chance of +45% EXP Bonus
     else EXPBonus1 += 300; // Else +30% EXP Bonus
    }
   }
   if (PowerupRunning[7] == 1) // Divine Avatar
   {
    if (random(1,100) <= 20) EXPBonus1 += 500; // 20% Chance of +50% EXP Bonus
    else EXPBonus1 += 250; // Else +25% EXP Bonus
   }
   Arg1 = Arg1 * EXPBonus1 / 1000;
   Arg1 = Arg1 * (48 + MiscellaneousVars[40]) / 48;
   Arg1 = Arg1 * MiscellaneousVars[88] / 100;

   SceptreLevelEXP += Arg1;
   // PrintBold(d:Arg1);
  }  
 }
}

// 864 - Calculates the occurance rate of Sauron's Gauntlets and Sauron's Helmet Dropping when a spawner item for them is spawned from a dying monster and gets the character's ID number to determine the right version of the Gauntlets to drop.
script 864 (void)
{
 if (random(1,4) == 1)
 {
  if (CharacterClass == 0) SetResultValue(1);
  if (CharacterClass == 1) SetResultValue(2);
  if (CharacterClass == 2) SetResultValue(3);
 }
 else
 {
  SetResultValue(0);
 }
}

// script 865: Red Tunnel Vision/Heartbeat Effect when badly injured
script 865 ENTER
{
 int LowHealth, CriticalHealth;
 CriticalHealth = MaxHealthTrue / 10;

  if (GetActorProperty(0, APROP_HEALTH) > 0)
  {
   if (GetActorProperty(0, APROP_HEALTH) <= CriticalHealth && GetActorProperty(0, APROP_HEALTH) > 0)
   {
    SetHudSize(640, 480, 0);
    Setfont("M_INJ");
    Hudmessage(s:"A"; HUDMSG_FADEINOUT, 3, CR_WHITE, 320.0, 240.0, 0.0, 0.5, 0.5);
    localambientsound("heartb2", 116);
    delay(15);
    localambientsound("heartb2", 116);
   }
   delay(25);
   restart;
  }
  else
  {
   delay(1);
   restart;
  }
}

// script 866
script 866 ENTER
{
  if (GetActorProperty(0, APROP_HEALTH) <= 0)
  {
   SetHudSize(640, 480, 0);
   Setfont("M_INJ2");
   Hudmessage(s:"A"; HUDMSG_FADEINOUT, 2, CR_WHITE, 320.0, 240.0, 0.0, 1.0, 1.0);
   Hudmessage(s:"A"; HUDMSG_PLAIN, 3, CR_WHITE, 320.0, 240.0, 0.0, 1.0, 1.0);
   delay(65);
   restart;
  }
  else
  {
   delay(1);
   restart;
  }
}

// script 867

// script for Hellcore Energy and Heating usage [and also controls dealing Flora direct damage when using a Hellcore weapon when heating is 100% or higher]
script 868 (int percent, int trydamageuser)
{
 int C1, C2, C3, C4, C5, OldHealth, NewHealth, HealthDiff, DamageFactor, DamageDealt, DamageRatio, ObitTimes;

 // Any damage from overheating is inflicted BEFORE increasing the heating counter (so going from below 100% to above 100% with a single attack doesn't harm you, only being above 100% at the moment of pulling the trigger will harm you)
 if (HellcoreOverheatLevel > 10000) // Translates to 100% or higher when you first fire your attack, which means you'll deal yourself damage upon use of this attack if above 100% at this point and the "trydamageuser" argument is set to something other than 0.
 {
  if (trydamageuser != 0)
  {
   DamageFactor = HellcoreOverheatLevel;
   DamageFactor -= 10000;
   // Dove's Ribbon cuts Hellcore Overheating Damage in half
   if (CheckActorInventory(1001,"DoveRibbon") > 0) DamageFactor = DamageFactor * 1 / 5; else DamageFactor = DamageFactor * 2 / 5;

   DamageDealt = DamageFactor * MaxHealthTrue / 10000;
   
   if (DamageDealt < 1) DamageDealt = 1;
   if (DamageDealt > MaxHealthDoubleTrue) DamageDealt = MaxHealthDoubleTrue;
   
   // PrintBold(d:DamageDealt);
   // Deal the Actual Damage
   OldHealth = GetActorProperty(1001,APROP_Health);

   Thing_Damage2(1001,DamageDealt,"HellcoreDrain");
   NewHealth = GetActorProperty(1001,APROP_Health);

   HealthDiff = OldHealth - NewHealth;

   // Get's the damage % for a fade screen
   DamageRatio = HealthDiff; // DamageDealt;
   DamageRatio = DamageRatio * 10000;
   DamageRatio = DamageRatio / MaxHealthTrue;

   if (GetActorProperty(1001,APROP_Health) <= 0 && MiscellaneousVars[19] == 0)
   {
    if (CharacterClass == 0) log(s:"\cgDeggaris incinerated his own soul on the power of Hellcore Magic.");
    if (CharacterClass == 1) log(s:"\cgIllucia incinerated her own soul on the power of Hellcore Magic.");
    if (CharacterClass == 2) log(s:"\cgFlora incinerated her own soul on the power of Hellcore Magic.");    
    MiscellaneousVars[19]++;
   }

   if (GetActorProperty(1001,APROP_Health) > 0)
   {
    if (NewHealth < OldHealth)
    {
     if (DamageRatio > 0 && DamageRatio < 1001) FadeRange(192,0,64,0.15,192,0,64,0,0.625);
     if (DamageRatio > 1000 && DamageRatio < 2001) FadeRange(192,0,64,0.3,192,0,64,0,0.625);
     if (DamageRatio > 2000 && DamageRatio < 3001) FadeRange(192,0,64,0.45,192,0,64,0,0.625);
     if (DamageRatio > 3000 && DamageRatio < 4001) FadeRange(192,0,64,0.6,192,0,64,0,0.625);
     if (DamageRatio > 4000 && DamageRatio < 5001) FadeRange(192,0,64,0.75,192,0,64,0,0.625);
     if (DamageRatio > 5000 && DamageRatio < 6001) FadeRange(192,0,64,0.9,192,0,64,0,0.625);
     if (DamageRatio > 6000 && DamageRatio < 7001) FadeRange(192,0,64,1.05,192,0,64,0,0.625);
     if (DamageRatio > 7000 && DamageRatio < 8001) FadeRange(192,0,64,1.2,192,0,64,0,0.625);
     if (DamageRatio > 8000 && DamageRatio < 9001) FadeRange(192,0,64,1.35,192,0,64,0,0.625);
     if (DamageRatio > 9000 && DamageRatio < 10001) FadeRange(192,0,64,1.5,192,0,64,0,0.625);
     if (DamageRatio > 10000) FadeRange(192,0,64,1.65,192,0,64,0,0.625);
    }
   }
  }
 }

 int ArmorHellCoreRate = 200;
 // Armor Based items [Sauron-class or Flora's specfic] can alter the rate of how fast Hellcore heats up.
 if (CheckActorInventory(1001,"RuinousShield") > 0) percent = percent * 3; 					// 300%
 if (CheckActorInventory(1001,"SauronHelmet") > 0) percent = percent * 134 / 100; 			// 134%
 if (CheckActorInventory(1001,"SauronGauntletsFlora") > 0) percent = percent * 134 / 100; 	// 134%
 if (CheckActorInventory(1001,"TheOneRing") > 0) percent = percent * 75 / 100; 				// 75%

 if (CheckActorInventory(1001,"SafeTeaShoes") > 0) ArmorHellCoreRate -= 1; 			// -0.5% (1)
 if (CheckActorInventory(1001,"PearlyCorset") > 0) ArmorHellCoreRate -= 5; 			// -2.5% (5)
 if (CheckActorInventory(1001,"WaterFlyingDress") > 0) ArmorHellCoreRate -= 15; 	// -7.5% (15)
 if (CheckActorInventory(1001,"EvenstarNecklace") > 0) ArmorHellCoreRate -= 27; 	// -13.5% (27)
 if (CheckActorInventory(1001,"CloakofEvasion") > 0) ArmorHellCoreRate -= 3; 		// -1.5% (3)
 if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) ArmorHellCoreRate -= 9; 	// -4.5% (9)
 if (CheckActorInventory(1001,"AnubisCufflinks") > 0) ArmorHellCoreRate -= 7; 		// -3.5% (7)
 if (CheckActorInventory(1001,"KissaBra") > 0) ArmorHellCoreRate -= 13; 			// -6.5% (13)
 if (CheckActorInventory(1001,"DivineShield") > 0) ArmorHellCoreRate -= 25; 		// -12.5% (25)
 if (CheckActorInventory(1001,"BalrogRing") > 0) ArmorHellCoreRate -= 17; 			// -8.5% (17)
 if (CheckActorInventory(1001,"DoveRibbon") > 0) ArmorHellCoreRate -= 11; 			// -5.5% (11)
																					// Total: -66.5% (133)
 percent = percent * ArmorHellCoreRate / 200;

 C2 = PlayerLevel / 10;
 C2 = C2 * -1;
 C2 += 200;
 percent = percent * C2 / 200;

 // Check Hellcore Multiplier in Options
 percent = (percent * MiscellaneousVars[130]) / 100;

 if (percent < 1) percent = 1;

 HellcoreOverheatLevel += percent;
 if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
 if (HellcoreOverheatLevel > 100000) HellcoreOverheatLevel = 100000;

}

// Spawn a Randomized Armor Item for Flora in "DVI" mode [used with "FloraRandomArmor" thing]
script 869 (int type, int OldRand0, int DVIIMode)
{
 int Rand0, Rand1, Rand2, PX, PY, PZ, DVIIRandVal, spawnedaitem;

 if (ActivatorTID() == 0) Thing_ChangeTID(0,1535);

 DVIIRandVal = 1 + (MiscellaneousVars[33] / 32); // Default value for randomizer
 // Do not run script if Flora is not the character in play
 if (CharacterClass != 2) { Thing_Remove(1535); terminate; }
 else
 {
  // Do not run script if the game is Deus Vult II
  if (ModType == 2)
  {
   if (DVIIMode == 0) { Thing_Remove(1535); terminate; }
   else DVIIRandVal = 1024; // Randomizer will ALWAYS roll positive in DVII-AltMode
  }
 }

 // Spawn Occurance Rate
 if (type == 3) // Doom2-Armor Bonuses
 {
  Rand0 = random(1,3072);
  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,2208);
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,2496);
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,2784);
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,3072);
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,3648);
 }
 else
 if (type == 2) // Doom2-Armors
 {
  Rand0 = random(1,128);
  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,92);
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,104);
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,116);
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,128);
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,152);
 }
 else
 if (type == 1)
 {
  Rand0 = OldRand0;
 }
 else
 {
  if (ModType == 1) // DVI has 4 levels
  {
   Rand0 = random(1,256);
   if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,184);
   if (GameSkill() == SKILL_EASY) Rand0 = random(1,208);
   if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,232);
   if (GameSkill() == SKILL_HARD) Rand0 = random(1,256);
   if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,304);
  }
  else // Classic has 32 levels [1/4th the spawn rate of DVI mode]
  {
   Rand0 = random(1,768);
   if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,552);
   if (GameSkill() == SKILL_EASY) Rand0 = random(1,624);
   if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,696);
   if (GameSkill() == SKILL_HARD) Rand0 = random(1,768);
   if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,912);
  }
 }
 if (Rand0 <= DVIIRandVal)
 {
  Rand1 = 0;
  if (CheckActorInventory(1001,"SafeTeaShoes") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"PearlyCorset") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"WaterFlyingDress") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"EvenstarNecklace") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"CloakOfEvasion") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"KissaBra") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"RuinousShield") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"DivineShield") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"BalrogRing") > 0) Rand1 += 1;
  if (CheckActorInventory(1001,"DoveRibbon") > 0) Rand1 += 1;
  if (Rand1 > 10) { Thing_Remove(1535); terminate; } // If all at least 11 items or more are detected on Flora, this script will not run past this point.
 
  while (spawnedaitem == 0)
  {
   PX = GetActorX(1535);
   PY = GetActorY(1535);
   PZ = GetActorZ(1535);
   Rand2 = random(1,100);
   // PrintBold(d:Rand2,s:" / (",d:Rand0,s:") / [",d:Rand1,s:"]\n\n X",d:PX,s:" Y",d:PY,s:" Z",d:PZ);
 
   if (Rand2 > 0 && Rand2 < 10)
   {
    if (CheckActorInventory(1001,"SafeTeaShoes") == 0)
    {
     SpawnForced("SafeTeaShoes",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 9 && Rand2 < 19)
   {
    if (CheckActorInventory(1001,"PearlyCorset") == 0)
    {
     SpawnForced("PearlyCorset",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 18 && Rand2 < 28)
   {
    if (CheckActorInventory(1001,"WaterFlyingDress") == 0)
    {
     SpawnForced("WaterFlyingDress",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 27 && Rand2 < 37)
   {
    if (CheckActorInventory(1001,"EvenstarNecklace") == 0)
    {
     SpawnForced("EvenstarNecklace",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 36 && Rand2 < 46)
   {
    if (CheckActorInventory(1001,"CloakOfEvasion") == 0)
    {
     SpawnForced("CloakOfEvasion",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 45 && Rand2 < 55)
   {
    if (CheckActorInventory(1001,"FalconKnifeEarrings") == 0)
    {
     SpawnForced("FalconKnifeEarrings",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 54 && Rand2 < 64)
   {
    if (CheckActorInventory(1001,"AnubisCufflinks") == 0)
    {
     SpawnForced("AnubisCufflinks",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 63 && Rand2 < 73)
   {
    if (CheckActorInventory(1001,"KissaBra") == 0)
    {
     SpawnForced("KissaBra",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 72 && Rand2 < 82)
   {
    if (CheckActorInventory(1001,"DivineShield") == 0)
    {
     if (CheckActorInventory(1001,"RuinousShield") == 0)
     {
      SpawnForced("RuinousShield",PX,PY,PZ,0,0);
      spawnedaitem++;
      Thing_Remove(1535);
     }
    }
   }
   if (Rand2 > 81 && Rand2 < 91)
   {
    if (CheckActorInventory(1001,"BalrogRing") == 0)
    {
     SpawnForced("BalrogRing",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 90 && Rand2 < 100)
   {
    if (CheckActorInventory(1001,"DoveRibbon") == 0)
    {
     SpawnForced("DoveRibbon",PX,PY,PZ,0,0);
     spawnedaitem++;
     Thing_Remove(1535);
    }
   }
   if (Rand2 > 99)
   {
    if (CheckActorInventory(1001,"RuinousShield") == 0)
    {
     if (CheckActorInventory(1001,"DivineShield") == 0)
     {
      SpawnForced("DivineShield",PX,PY,PZ,0,0);
      spawnedaitem++;
      Thing_Remove(1535);
     }
    }
   }
  }

 }
 else // No spawn
 {
  Thing_Remove(1535);
 }
}

// Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
script 870 (int Armortype)
{

 if (Armortype == 1 && CheckActorInventory(1001,"SafeTeaShoes") > 0 && ActivatorTID() == 0) // SafeTeaShoes
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 2 && CheckActorInventory(1001,"PearlyCorset") > 0 && ActivatorTID() == 0) // PearlyCorset
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 3 && CheckActorInventory(1001,"WaterFlyingDress") > 0 && ActivatorTID() == 0) // WaterFlyingDress
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 4 && CheckActorInventory(1001,"EvenstarNecklace") > 0 && ActivatorTID() == 0) // EvenstarNecklace
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 5 && CheckActorInventory(1001,"CloakOfEvasion") > 0 && ActivatorTID() == 0) // CloakOfEvasion
 {
    Thing_ChangeTID(0,1534);
    Thing_Remove(1534);
 }

 if (Armortype == 6 && CheckActorInventory(1001,"AnubisCufflinks") > 0 && ActivatorTID() == 0) // AnubisCufflinks
 {
    Thing_ChangeTID(0,1534);
    Thing_Remove(1534);
 }

 if (Armortype == 7 && CheckActorInventory(1001,"KissaBra") > 0 && ActivatorTID() == 0) // KissaBra
 {
    Thing_ChangeTID(0,1534);
    Thing_Remove(1534);
 }

 if (Armortype == 8) 
 {
  if (CheckActorInventory(1001,"DivineShield") > 0 && ActivatorTID() == 0) // RuinousShield
  {
   Thing_ChangeTID(0,1534);
   Thing_Remove(1534);
  }
  else
  {
   if (CheckActorInventory(1001,"RuinousShield") > 0 && ActivatorTID() == 0)
   {
    Thing_ChangeTID(0,1534);
    Thing_Remove(1534);
   }
  }
 }

 if (Armortype == 9 && CheckActorInventory(1001,"DivineShield") > 0 && ActivatorTID() == 0) // DivineShield 
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 10 && CheckActorInventory(1001,"BalrogRing") > 0 && ActivatorTID() == 0) // BalrogRing
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 11 && CheckActorInventory(1001,"DoveRibbon") > 0 && ActivatorTID() == 0) // DoveRibbon
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

 if (Armortype == 12 && CheckActorInventory(1001,"FalconKnifeEarrings") > 0 && ActivatorTID() == 0) // FalconKnifeEarrings
 {
  Thing_ChangeTID(0,1534);
  Thing_Remove(1534);
 }

}

// HP Gravity Attack via Diabloist's Hand [[against monsters]]
script 871 (int type)
{
 int C1, C2, C3, C4, C5, PrinterOld, PrinterNew;

  PrinterOld = GetActorProperty(0,APROP_Health);
  if (GameSkill() == SKILL_VERY_EASY) C5 = 875;  
  if (GameSkill() == SKILL_EASY) C5 = 750;  
  if (GameSkill() == SKILL_NORMAL) C5 = 500;  
  if (GameSkill() == SKILL_HARD) C5 = 250;  
  if (GameSkill() == SKILL_VERY_HARD) C5 = 125;  

  C5 = 750;  

  C2 = 1000;
  C2 = C2 - C5;

  C1 = GetActorProperty(0,APROP_Health);
  C1 = C1 * C2 / 1000;
  if (C1 < 1) C1 = 1;

  SetActorProperty(0,APROP_Health,C1);
  PrinterNew = GetActorProperty(0,APROP_Health);
  // PrintBold(d:PrinterOld,s:"  ",d:PrinterNew);
  // SetActorState(0,"HPFlashGravity");
}

// Determines Attack/Defense/Speed Bonuses for Monsters [depending on difficulty level and maps and game mode]
script "MonsterStatsHP_ATK_DEF_SPD" (int type)
{
 int CurrHP, MaxHP, Temp, RangeVar;
 if (type == 0)
 {
  if (CheckInventory("MonsterHasBuffs") != 0) terminate;

  MaxHP = GetActorProperty(0,APROP_Health);
  if (GameSkill() == SKILL_VERY_EASY)
  {
   GiveInventory("MonsterAttack-VeryEasy", 1);
   GiveInventory("MonsterDefense-VeryEasy", 1);
   GiveInventory("MonsterSpeed-VeryEasy", 1);
   MaxHP = MaxHP * 85 / 100;
  }
  else
  if (GameSkill() == SKILL_EASY)
  {
   GiveInventory("MonsterAttack-Easy", 1);
   GiveInventory("MonsterDefense-Easy", 1);
   GiveInventory("MonsterSpeed-Easy", 1);
   MaxHP = MaxHP * 95 / 100;
  }
  else
  if (GameSkill() == SKILL_NORMAL)
  {
   GiveInventory("MonsterAttack-Normal", 1);
   GiveInventory("MonsterDefense-Normal", 1);
   GiveInventory("MonsterSpeed-Normal", 1);
   MaxHP = MaxHP * 100 / 100;
  }
  else
  if (GameSkill() == SKILL_HARD)
  {
   GiveInventory("MonsterAttack-Hard", 1);
   GiveInventory("MonsterDefense-Hard", 1);
   GiveInventory("MonsterSpeed-Hard", 1);
   MaxHP = MaxHP * 105 / 100;
  }
  else
  if (GameSkill() == SKILL_VERY_HARD)
  {
   GiveInventory("MonsterAttack-VeryHard", 1);
   GiveInventory("MonsterDefense-VeryHard", 1);
   GiveInventory("MonsterSpeed-VeryHard", 1);
   MaxHP = MaxHP * 115 / 100;
  }
  else
  if (GameSkill() == 5)
  {
   GiveInventory("MonsterAttack-ExtremelyHard", 1);
   GiveInventory("MonsterDefense-ExtremelyHard", 1);
   GiveInventory("MonsterSpeed-ExtremelyHard", 1);
   MaxHP = MaxHP * 130 / 100;
  }

  if (ModType == 0) // Classic Doom 1/2
  {
   if (ClassicDoomType == 1) // Doom 1
   {
    // Episode 1
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1) // E1M1
    {
     GiveInventory("MonsterAttack-Classic-E1M1", 1);
     GiveInventory("MonsterDefense-Classic-E1M1", 1);
     GiveInventory("MonsterSpeed-Classic-E1M1", 1);
     MaxHP = MaxHP * 1 / 1;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 2) // E1M2
    {
     GiveInventory("MonsterAttack-Classic-E1M2", 1);
     GiveInventory("MonsterDefense-Classic-E1M2", 1);
     GiveInventory("MonsterSpeed-Classic-E1M2", 1);
     MaxHP = MaxHP * 102 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 3) // E1M3
    {
     GiveInventory("MonsterAttack-Classic-E1M3", 1);
     GiveInventory("MonsterDefense-Classic-E1M3", 1);
     GiveInventory("MonsterSpeed-Classic-E1M3", 1);
     MaxHP = MaxHP * 1041 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 9) // E1M9
    {
     GiveInventory("MonsterAttack-Classic-E1M9", 1);
     GiveInventory("MonsterDefense-Classic-E1M9", 1);
     GiveInventory("MonsterSpeed-Classic-E1M9", 1);
     MaxHP = MaxHP * 1063 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 4) // E1M4
    {
     GiveInventory("MonsterAttack-Classic-E1M4", 1);
     GiveInventory("MonsterDefense-Classic-E1M4", 1);
     GiveInventory("MonsterSpeed-Classic-E1M4", 1);
     MaxHP = MaxHP * 1086 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 5) // E1M5
    {
     GiveInventory("MonsterAttack-Classic-E1M5", 1);
     GiveInventory("MonsterDefense-Classic-E1M5", 1);
     GiveInventory("MonsterSpeed-Classic-E1M5", 1);
     MaxHP = MaxHP * 111 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 6) // E1M6
    {
     GiveInventory("MonsterAttack-Classic-E1M6", 1);
     GiveInventory("MonsterDefense-Classic-E1M6", 1);
     GiveInventory("MonsterSpeed-Classic-E1M6", 1);
     MaxHP = MaxHP * 1135 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 7) // E1M7
    {
     GiveInventory("MonsterAttack-Classic-E1M7", 1);
     GiveInventory("MonsterDefense-Classic-E1M7", 1);
     GiveInventory("MonsterSpeed-Classic-E1M7", 1);
     MaxHP = MaxHP * 1161 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 8) // E1M8
    {
     GiveInventory("MonsterAttack-Classic-E1M8", 1);
     GiveInventory("MonsterDefense-Classic-E1M8", 1);
     GiveInventory("MonsterSpeed-Classic-E1M8", 1);
     MaxHP = MaxHP * 1188 / 1000;
    }
    // Episode 2
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 11) // E2M1
    {
     GiveInventory("MonsterAttack-Classic-E2M1", 1);
     GiveInventory("MonsterDefense-Classic-E2M1", 1);
     GiveInventory("MonsterSpeed-Classic-E2M1", 1);
     MaxHP = MaxHP * 1224 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 12) // E2M2
    {
     GiveInventory("MonsterAttack-Classic-E2M2", 1);
     GiveInventory("MonsterDefense-Classic-E2M2", 1);
     GiveInventory("MonsterSpeed-Classic-E2M2", 1);
     MaxHP = MaxHP * 1262 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 13) // E2M3
    {
     GiveInventory("MonsterAttack-Classic-E2M3", 1);
     GiveInventory("MonsterDefense-Classic-E2M3", 1);
     GiveInventory("MonsterSpeed-Classic-E2M3", 1);
     MaxHP = MaxHP * 1302 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 14) // E2M4
    {
     GiveInventory("MonsterAttack-Classic-E2M4", 1);
     GiveInventory("MonsterDefense-Classic-E2M4", 1);
     GiveInventory("MonsterSpeed-Classic-E2M4", 1);
     MaxHP = MaxHP * 1344 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 15) // E2M5
    {
     GiveInventory("MonsterAttack-Classic-E2M5", 1);
     GiveInventory("MonsterDefense-Classic-E2M5", 1);
     GiveInventory("MonsterSpeed-Classic-E2M5", 1);
     MaxHP = MaxHP * 1388 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 19) // E2M9
    {
     GiveInventory("MonsterAttack-Classic-E2M9", 1);
     GiveInventory("MonsterDefense-Classic-E2M9", 1);
     GiveInventory("MonsterSpeed-Classic-E2M9", 1);
     MaxHP = MaxHP * 1434 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 16) // E2M6
    {
     GiveInventory("MonsterAttack-Classic-E2M6", 1);
     GiveInventory("MonsterDefense-Classic-E2M6", 1);
     GiveInventory("MonsterSpeed-Classic-E2M6", 1);
     MaxHP = MaxHP * 1482 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 17) // E2M7
    {
     GiveInventory("MonsterAttack-Classic-E2M7", 1);
     GiveInventory("MonsterDefense-Classic-E2M7", 1);
     GiveInventory("MonsterSpeed-Classic-E2M7", 1);
     MaxHP = MaxHP * 1532 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 18) // E2M8
    {
     GiveInventory("MonsterAttack-Classic-E2M8", 1);
     GiveInventory("MonsterDefense-Classic-E2M8", 1);
     GiveInventory("MonsterSpeed-Classic-E2M8", 1);
     MaxHP = MaxHP * 1584 / 1000;
    }
    // Episode 3
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 21) // E3M1
    {
     GiveInventory("MonsterAttack-Classic-E3M1", 1);
     GiveInventory("MonsterDefense-Classic-E3M1", 1);
     GiveInventory("MonsterSpeed-Classic-E3M1", 1);
     MaxHP = MaxHP * 1648 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 22) // E3M2
    {
     GiveInventory("MonsterAttack-Classic-E3M2", 1);
     GiveInventory("MonsterDefense-Classic-E3M2", 1);
     GiveInventory("MonsterSpeed-Classic-E3M2", 1);
     MaxHP = MaxHP * 1716 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 23) // E3M3
    {
     GiveInventory("MonsterAttack-Classic-E3M3", 1);
     GiveInventory("MonsterDefense-Classic-E3M3", 1);
     GiveInventory("MonsterSpeed-Classic-E3M3", 1);
     MaxHP = MaxHP * 1789 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 24) // E3M4
    {
     GiveInventory("MonsterAttack-Classic-E3M4", 1);
     GiveInventory("MonsterDefense-Classic-E3M4", 1);
     GiveInventory("MonsterSpeed-Classic-E3M4", 1);
     MaxHP = MaxHP * 1868 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 25) // E3M5
    {
     GiveInventory("MonsterAttack-Classic-E3M5", 1);
     GiveInventory("MonsterDefense-Classic-E3M5", 1);
     GiveInventory("MonsterSpeed-Classic-E3M5", 1);
     MaxHP = MaxHP * 1954 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 26) // E3M6
    {
     GiveInventory("MonsterAttack-Classic-E3M6", 1);
     GiveInventory("MonsterDefense-Classic-E3M6", 1);
     GiveInventory("MonsterSpeed-Classic-E3M6", 1);
     MaxHP = MaxHP * 2048 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29) // E3M9
    {
     GiveInventory("MonsterAttack-Classic-E3M9", 1);
     GiveInventory("MonsterDefense-Classic-E3M9", 1);
     GiveInventory("MonsterSpeed-Classic-E3M9", 1);
     MaxHP = MaxHP * 2151 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 27) // E3M7
    {
     GiveInventory("MonsterAttack-Classic-E3M7", 1);
     GiveInventory("MonsterDefense-Classic-E3M7", 1);
     GiveInventory("MonsterSpeed-Classic-E3M7", 1);
     MaxHP = MaxHP * 2264 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) // E3M8
    {
     GiveInventory("MonsterAttack-Classic-E3M8", 1);
     GiveInventory("MonsterDefense-Classic-E3M8", 1);
     GiveInventory("MonsterSpeed-Classic-E3M8", 1);
     MaxHP = MaxHP * 2388 / 1000;
    }
    // Episode 4
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) // E4M1
    {
     GiveInventory("MonsterAttack-Classic-E4M1", 1);
     GiveInventory("MonsterDefense-Classic-E4M1", 1);
     GiveInventory("MonsterSpeed-Classic-E4M1", 1);
     MaxHP = MaxHP * 2536 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) // E4M2
    {
     GiveInventory("MonsterAttack-Classic-E4M2", 1);
     GiveInventory("MonsterDefense-Classic-E4M2", 1);
     GiveInventory("MonsterSpeed-Classic-E4M2", 1);
     MaxHP = MaxHP * 2696 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 39) // E4M9
    {
     GiveInventory("MonsterAttack-Classic-E4M9", 1);
     GiveInventory("MonsterDefense-Classic-E4M9", 1);
     GiveInventory("MonsterSpeed-Classic-E4M9", 1);
     MaxHP = MaxHP * 287 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 33) // E4M3
    {
     GiveInventory("MonsterAttack-Classic-E4M3", 1);
     GiveInventory("MonsterDefense-Classic-E4M3", 1);
     GiveInventory("MonsterSpeed-Classic-E4M3", 1);
     MaxHP = MaxHP * 306 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 34) // E4M4
    {
     GiveInventory("MonsterAttack-Classic-E4M4", 1);
     GiveInventory("MonsterDefense-Classic-E4M4", 1);
     GiveInventory("MonsterSpeed-Classic-E4M4", 1);
     MaxHP = MaxHP * 3268 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 35) // E4M5
    {
     GiveInventory("MonsterAttack-Classic-E4M5", 1);
     GiveInventory("MonsterDefense-Classic-E4M5", 1);
     GiveInventory("MonsterSpeed-Classic-E4M5", 1);
     MaxHP = MaxHP * 3496 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 36) // E4M6
    {
     GiveInventory("MonsterAttack-Classic-E4M6", 1);
     GiveInventory("MonsterDefense-Classic-E4M6", 1);
     GiveInventory("MonsterSpeed-Classic-E4M6", 1);
     MaxHP = MaxHP * 3746 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 37) // E4M7
    {
     GiveInventory("MonsterAttack-Classic-E4M7", 1);
     GiveInventory("MonsterDefense-Classic-E4M7", 1);
     GiveInventory("MonsterSpeed-Classic-E4M7", 1);
     MaxHP = MaxHP * 402 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 38) // E4M8
    {
     GiveInventory("MonsterAttack-Classic-E4M8", 1);
     GiveInventory("MonsterDefense-Classic-E4M8", 1);
     GiveInventory("MonsterSpeed-Classic-E4M8", 1);
     MaxHP = MaxHP * 432 / 100;
    }
   }
   else // Doom 2
   {
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1) // MAP01
    {
     GiveInventory("MonsterAttack-Classic-MAP01", 1);
     GiveInventory("MonsterDefense-Classic-MAP01", 1);
     GiveInventory("MonsterSpeed-Classic-MAP01", 1);
     MaxHP = MaxHP * 1 / 1;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 2) // MAP02
    {
     GiveInventory("MonsterAttack-Classic-MAP02", 1);
     GiveInventory("MonsterDefense-Classic-MAP02", 1);
     GiveInventory("MonsterSpeed-Classic-MAP02", 1);
     MaxHP = MaxHP * 1025 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 3) // MAP03
    {
     GiveInventory("MonsterAttack-Classic-MAP03", 1);
     GiveInventory("MonsterDefense-Classic-MAP03", 1);
     GiveInventory("MonsterSpeed-Classic-MAP03", 1);
     MaxHP = MaxHP * 105 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 4) // MAP04
    {
     GiveInventory("MonsterAttack-Classic-MAP04", 1);
     GiveInventory("MonsterDefense-Classic-MAP04", 1);
     GiveInventory("MonsterSpeed-Classic-MAP04", 1);
     MaxHP = MaxHP * 1075 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 5) // MAP05
    {
     GiveInventory("MonsterAttack-Classic-MAP05", 1);
     GiveInventory("MonsterDefense-Classic-MAP05", 1);
     GiveInventory("MonsterSpeed-Classic-MAP05", 1);
     MaxHP = MaxHP * 11 / 10;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 6) // MAP06
    {
     GiveInventory("MonsterAttack-Classic-MAP06", 1);
     GiveInventory("MonsterDefense-Classic-MAP06", 1);
     GiveInventory("MonsterSpeed-Classic-MAP06", 1);
     MaxHP = MaxHP * 11375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 7) // MAP07
    {
     GiveInventory("MonsterAttack-Classic-MAP07", 1);
     GiveInventory("MonsterDefense-Classic-MAP07", 1);
     GiveInventory("MonsterSpeed-Classic-MAP07", 1);
     MaxHP = MaxHP * 1175 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 8) // MAP08
    {
     GiveInventory("MonsterAttack-Classic-MAP08", 1);
     GiveInventory("MonsterDefense-Classic-MAP08", 1);
     GiveInventory("MonsterSpeed-Classic-MAP08", 1);
     MaxHP = MaxHP * 12125 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 9) // MAP09
    {
     GiveInventory("MonsterAttack-Classic-MAP09", 1);
     GiveInventory("MonsterDefense-Classic-MAP09", 1);
     GiveInventory("MonsterSpeed-Classic-MAP09", 1);
     MaxHP = MaxHP * 125 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 10) // MAP10
    {
     GiveInventory("MonsterAttack-Classic-MAP10", 1);
     GiveInventory("MonsterDefense-Classic-MAP10", 1);
     GiveInventory("MonsterSpeed-Classic-MAP10", 1);
     MaxHP = MaxHP * 12875 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 11) // MAP11
    {
     GiveInventory("MonsterAttack-Classic-MAP11", 1);
     GiveInventory("MonsterDefense-Classic-MAP11", 1);
     GiveInventory("MonsterSpeed-Classic-MAP11", 1);
     MaxHP = MaxHP * 13375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 12) // MAP12
    {
     GiveInventory("MonsterAttack-Classic-MAP12", 1);
     GiveInventory("MonsterDefense-Classic-MAP12", 1);
     GiveInventory("MonsterSpeed-Classic-MAP12", 1);
     MaxHP = MaxHP * 13875 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 13) // MAP13
    {
     GiveInventory("MonsterAttack-Classic-MAP13", 1);
     GiveInventory("MonsterDefense-Classic-MAP13", 1);
     GiveInventory("MonsterSpeed-Classic-MAP13", 1);
     MaxHP = MaxHP * 14375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 14) // MAP14
    {
     GiveInventory("MonsterAttack-Classic-MAP14", 1);
     GiveInventory("MonsterDefense-Classic-MAP14", 1);
     GiveInventory("MonsterSpeed-Classic-MAP14", 1);
     MaxHP = MaxHP * 14875 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 15) // MAP15
    {
     GiveInventory("MonsterAttack-Classic-MAP15", 1);
     GiveInventory("MonsterDefense-Classic-MAP15", 1);
     GiveInventory("MonsterSpeed-Classic-MAP15", 1);
     MaxHP = MaxHP * 15375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) // MAP31 [SECRET LEVEL 1]
    {
     GiveInventory("MonsterAttack-Classic-MAP31", 1);
     GiveInventory("MonsterDefense-Classic-MAP31", 1);
     GiveInventory("MonsterSpeed-Classic-MAP31", 1);
     MaxHP = MaxHP * 20375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) // MAP32 [SECRET LEVEL 2]
    {
     GiveInventory("MonsterAttack-Classic-MAP32", 1);
     GiveInventory("MonsterDefense-Classic-MAP32", 1);
     GiveInventory("MonsterSpeed-Classic-MAP32", 1);
     MaxHP = MaxHP * 30375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 16) // MAP16
    {
     GiveInventory("MonsterAttack-Classic-MAP16", 1);
     GiveInventory("MonsterDefense-Classic-MAP16", 1);
     GiveInventory("MonsterSpeed-Classic-MAP16", 1);
     MaxHP = MaxHP * 16 / 10;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 17) // MAP17
    {
     GiveInventory("MonsterAttack-Classic-MAP17", 1);
     GiveInventory("MonsterDefense-Classic-MAP17", 1);
     GiveInventory("MonsterSpeed-Classic-MAP17", 1);
     MaxHP = MaxHP * 16625 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 18) // MAP18
    {
     GiveInventory("MonsterAttack-Classic-MAP18", 1);
     GiveInventory("MonsterDefense-Classic-MAP18", 1);
     GiveInventory("MonsterSpeed-Classic-MAP18", 1);
     MaxHP = MaxHP * 1725 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 19) // MAP19
    {
     GiveInventory("MonsterAttack-Classic-MAP19", 1);
     GiveInventory("MonsterDefense-Classic-MAP19", 1);
     GiveInventory("MonsterSpeed-Classic-MAP19", 1);
     MaxHP = MaxHP * 17875 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 20) // MAP20
    {
     GiveInventory("MonsterAttack-Classic-MAP20", 1);
     GiveInventory("MonsterDefense-Classic-MAP20", 1);
     GiveInventory("MonsterSpeed-Classic-MAP20", 1);
     MaxHP = MaxHP * 185 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 21) // MAP21
    {
     GiveInventory("MonsterAttack-Classic-MAP21", 1);
     GiveInventory("MonsterDefense-Classic-MAP21", 1);
     GiveInventory("MonsterSpeed-Classic-MAP21", 1);
     MaxHP = MaxHP * 195 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 22) // MAP22
    {
     GiveInventory("MonsterAttack-Classic-MAP22", 1);
     GiveInventory("MonsterDefense-Classic-MAP22", 1);
     GiveInventory("MonsterSpeed-Classic-MAP22", 1);
     MaxHP = MaxHP * 205 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 23) // MAP23
    {
     GiveInventory("MonsterAttack-Classic-MAP23", 1);
     GiveInventory("MonsterDefense-Classic-MAP23", 1);
     GiveInventory("MonsterSpeed-Classic-MAP23", 1);
     MaxHP = MaxHP * 215 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 24) // MAP24
    {
     GiveInventory("MonsterAttack-Classic-MAP24", 1);
     GiveInventory("MonsterDefense-Classic-MAP24", 1);
     GiveInventory("MonsterSpeed-Classic-MAP24", 1);
     MaxHP = MaxHP * 225 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 25) // MAP25
    {
     GiveInventory("MonsterAttack-Classic-MAP25", 1);
     GiveInventory("MonsterDefense-Classic-MAP25", 1);
     GiveInventory("MonsterSpeed-Classic-MAP25", 1);
     MaxHP = MaxHP * 235 / 100;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 26) // MAP26
    {
     GiveInventory("MonsterAttack-Classic-MAP26", 1);
     GiveInventory("MonsterDefense-Classic-MAP26", 1);
     GiveInventory("MonsterSpeed-Classic-MAP26", 1);
     MaxHP = MaxHP * 24875 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 27) // MAP27
    {
     GiveInventory("MonsterAttack-Classic-MAP27", 1);
     GiveInventory("MonsterDefense-Classic-MAP27", 1);
     GiveInventory("MonsterSpeed-Classic-MAP27", 1);
     MaxHP = MaxHP * 26375 / 10000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) // MAP28
    {
     GiveInventory("MonsterAttack-Classic-MAP28", 1);
     GiveInventory("MonsterDefense-Classic-MAP28", 1);
     GiveInventory("MonsterSpeed-Classic-MAP28", 1);
     MaxHP = MaxHP * 28 / 10;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29) // MAP29
    {
     GiveInventory("MonsterAttack-Classic-MAP29", 1);
     GiveInventory("MonsterDefense-Classic-MAP29", 1);
     GiveInventory("MonsterSpeed-Classic-MAP29", 1);
     MaxHP = MaxHP * 2975 / 1000;
    }
    if (GetLevelInfo(LEVELINFO_LEVELNUM) == 30) // MAP30
    {
     GiveInventory("MonsterAttack-Classic-MAP30", 1);
     GiveInventory("MonsterDefense-Classic-MAP30", 1);
     GiveInventory("MonsterSpeed-Classic-MAP30", 1);
     MaxHP = MaxHP * 3375 / 1000;
    }
   }
  }

  if (ModType == 1) // Deus Vult 1
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1101) // MAP01 - Insurgents
   {
    GiveInventory("MonsterAttack-DVI-MAP01", 1);
    GiveInventory("MonsterDefense-DVI-MAP01", 1);
    GiveInventory("MonsterSpeed-DVI-MAP01", 1);
    MaxHP = MaxHP * 100 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1102) // MAP02 - Torture Chamber
   {
    GiveInventory("MonsterAttack-DVI-MAP02", 1);
    GiveInventory("MonsterDefense-DVI-MAP02", 1);
    GiveInventory("MonsterSpeed-DVI-MAP02", 1);
    MaxHP = MaxHP * 112 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1103) // MAP03 - Cathedral
   {
    GiveInventory("MonsterAttack-DVI-MAP03", 1);
    GiveInventory("MonsterDefense-DVI-MAP03", 1);
    GiveInventory("MonsterSpeed-DVI-MAP03", 1);
    MaxHP = MaxHP * 125 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1104) // MAP04 - End Of Days
   {
    GiveInventory("MonsterAttack-DVI-MAP04", 1);
    GiveInventory("MonsterDefense-DVI-MAP04", 1);
    GiveInventory("MonsterSpeed-DVI-MAP04", 1);
    MaxHP = MaxHP * 141 / 100;
   }
  }
  else
  if (ModType == 2) // Deus Vult 2
  {
   // Earth-type Levels
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1201) // MAP01 - Entryway Pass
   {
    GiveInventory("MonsterAttack-DVII-MAP01", 1);
    GiveInventory("MonsterDefense-DVII-MAP01", 1);
    GiveInventory("MonsterSpeed-DVII-MAP01", 1);
    MaxHP = MaxHP * 100 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1202) // MAP02 - Mutagen
   {
    GiveInventory("MonsterAttack-DVII-MAP02", 1);
    GiveInventory("MonsterDefense-DVII-MAP02", 1);
    GiveInventory("MonsterSpeed-DVII-MAP02", 1);
    MaxHP = MaxHP * 106 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1203) // MAP03 - Crouching Demon, Hidden Archvile
   {
    GiveInventory("MonsterAttack-DVII-MAP03", 1);
    GiveInventory("MonsterDefense-DVII-MAP03", 1);
    GiveInventory("MonsterSpeed-DVII-MAP03", 1);
    MaxHP = MaxHP * 112 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1204) // MAP04 - Minas Morgul
   {
    GiveInventory("MonsterAttack-DVII-MAP04", 1);
    GiveInventory("MonsterDefense-DVII-MAP04", 1);
    GiveInventory("MonsterSpeed-DVII-MAP04", 1);
    MaxHP = MaxHP * 119 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1205) // MAP05 - Eagle's Nest
   {
    GiveInventory("MonsterAttack-DVII-MAP05", 1);
    GiveInventory("MonsterDefense-DVII-MAP05", 1);
    GiveInventory("MonsterSpeed-DVII-MAP05", 1);
    MaxHP = MaxHP * 126 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1206) // MAP05B - The Manliest Level Ever
   {
    GiveInventory("MonsterAttack-DVII-MAP05S", 1);
    GiveInventory("MonsterDefense-DVII-MAP05S", 1);
    GiveInventory("MonsterSpeed-DVII-MAP05S", 1);
    MaxHP = MaxHP * 134 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1207) // MAP06 - Stargate
   {
    GiveInventory("MonsterAttack-DVII-MAP06", 1);
    GiveInventory("MonsterDefense-DVII-MAP06", 1);
    GiveInventory("MonsterSpeed-DVII-MAP06", 1);
    MaxHP = MaxHP * 142 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1208) // MAP07 - The Desert Temple
   {
    GiveInventory("MonsterAttack-DVII-MAP07", 1);
    GiveInventory("MonsterDefense-DVII-MAP07", 1);
    GiveInventory("MonsterSpeed-DVII-MAP07", 1);
    MaxHP = MaxHP * 150 / 100;
   }
   else
   // Hell Levels
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1209) // MAP08 - The Unholy Cathedral
   {
    GiveInventory("MonsterAttack-DVII-MAP08", 1);
    GiveInventory("MonsterDefense-DVII-MAP08", 1);
    GiveInventory("MonsterSpeed-DVII-MAP08", 1);
    MaxHP = MaxHP * 177 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1210) // MAP09 - You Shall Not Pass!
   {
    GiveInventory("MonsterAttack-DVII-MAP09", 1);
    GiveInventory("MonsterDefense-DVII-MAP09", 1);
    GiveInventory("MonsterSpeed-DVII-MAP09", 1);
    MaxHP = MaxHP * 209 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1211) // MAP10 - Hell's Vendetta
   {
    GiveInventory("MonsterAttack-DVII-MAP10", 1);
    GiveInventory("MonsterDefense-DVII-MAP10", 1);
    GiveInventory("MonsterSpeed-DVII-MAP10", 1);
    MaxHP = MaxHP * 248 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1212) // MAP10B - attedneV s'lleH
   {
    GiveInventory("MonsterAttack-DVII-MAP10B", 1);
    GiveInventory("MonsterDefense-DVII-MAP10B", 1);
    GiveInventory("MonsterSpeed-DVII-MAP10B", 1);
    MaxHP = MaxHP * 292 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1214) // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
   {
    GiveInventory("MonsterAttack-DVII-MAP12", 1);
    GiveInventory("MonsterDefense-DVII-MAP12", 1);
    GiveInventory("MonsterSpeed-DVII-MAP12", 1);
    MaxHP = MaxHP * 141 / 100;
   }
   else
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1215) // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
   {
    GiveInventory("MonsterAttack-DVII-MAP10B", 1);
    GiveInventory("MonsterDefense-DVII-MAP10B", 1);
    GiveInventory("MonsterSpeed-DVII-MAP10B", 1);
    MaxHP = MaxHP * 292 / 100;
   }
  }

/*
  // Level-Based HP gains
  int MonsterLevel = PlayerLevel;
  MonsterLevel = MonsterLevel * random(95,105);
  if (GameSkill() == SKILL_VERY_EASY) MonsterLevel = MonsterLevel * random(71,79);
  if (GameSkill() == SKILL_EASY) MonsterLevel = MonsterLevel * random(85,95);
  if (GameSkill() == SKILL_HARD) MonsterLevel = MonsterLevel * random(104,116);
  if (GameSkill() == SKILL_VERY_HARD) MonsterLevel = MonsterLevel * random(117,133);
  MonsterLevel = MonsterLevel / 100;
*/

  // HP Error
  int MaxHPErrorRange = MaxHP / 10;
  MaxHP = MaxHP + (random(-MaxHPErrorRange,MaxHPErrorRange));

  SetActorProperty(0,APROP_Health,MaxHP);
  SetActorProperty(0,APROP_SpawnHealth,MaxHP);

  if (GetActorClass(0) != "Sauravatar") { SetInventory("CurrentMaxHealth", MaxHP); SetUserVariable(0,"user_MaxHP",MaxHP); }

  // Sets the monster's "Desperation Buff" level. The level it must fall below in order to gain it's unique buffs
  RangeVar = 375;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 250; // 25.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 313; // 31.3%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 375; // 37.5%
  if (GameSkill() == SKILL_HARD) RangeVar = 437; // 43.7%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 500; // 50.0%
  if (GameSkill() == 5) RangeVar = 625; // 62.5%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPBuffRange",Temp);
  // PrintBold(d:Temp);

  // Sets the monster's "Low Range" of HP, meaning there is a 25% chance it will execute a "nova" or "shock" attack
  RangeVar = 160;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 80; // 8.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 120; // 12.0%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 160; // 16.0%
  if (GameSkill() == SKILL_HARD) RangeVar = 200; // 20.0%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 240; // 24.0%
  if (GameSkill() == 5) RangeVar = 320; // 32.0%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPLowRange",Temp);
  // PrintBold(d:Temp);

  // Sets the monster's "Critical Range" of HP, meaning there is a 100% chance it will execute a "nova" or "shock" attack
  RangeVar = 20;
  if (GameSkill() == SKILL_VERY_EASY) RangeVar = 10; // 1.0%
  if (GameSkill() == SKILL_EASY) RangeVar = 15; // 1.5%
  if (GameSkill() == SKILL_NORMAL) RangeVar = 20; // 2.0%
  if (GameSkill() == SKILL_HARD) RangeVar = 25; // 2.5%
  if (GameSkill() == SKILL_VERY_HARD) RangeVar = 30; // 3.0%
  if (GameSkill() == 5) RangeVar = 40; // 4.0%
  Temp = MaxHP * RangeVar / 1000;
  Temp = Temp + 1;
  if (Temp < 2) Temp = 2;
  SetUserVariable(0,"user_HPCritRange",Temp);
  // PrintBold(d:Temp);

  // Sets the monster's "Extreme Death" range of HP, determining how much it takes to gib most monsters (or permenantly kill a Death Incarnate)
  Temp = MaxHP * -1; // -100.0%
  if (Temp > 0) Temp = 0;
  SetUserVariable(0,"user_HPXDeathRange",Temp);
  // PrintBold(d:Temp);

  ACS_ExecuteAlways(900,0,0,0,0);

  GiveInventory("MonsterHasBuffs", 1);
 }
 else // Usually if dying
 {
  TakeInventory("MonsterHasBuffs", 1);
 }
}

// Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
script 873 (int Weapontype)
{
 int IsWeaponLevelMaxed;
 if (CharacterClass == 2)
 {
  IsWeaponLevelMaxed = 0;
  if (Weapontype == 0 && MiscellaneousVars[96] >= 8) IsWeaponLevelMaxed = 1; // Imp Claw [4]
  if (Weapontype == 1 && MiscellaneousVars[97] >= 8) IsWeaponLevelMaxed = 1; // Dark Imp Claw [4]
  if (Weapontype == 2 && MiscellaneousVars[98] >= 8) IsWeaponLevelMaxed = 1; // CacoDemon Eye [4]
  if (Weapontype == 3 && MiscellaneousVars[99] >= 8) IsWeaponLevelMaxed = 1; // Cacolantern Eye [4]
  if (Weapontype == 4 && MiscellaneousVars[100] >= 8) IsWeaponLevelMaxed = 1; // Abaddon Eye [4]
  if (Weapontype == 5 && MiscellaneousVars[101] >= 8) IsWeaponLevelMaxed = 1; // Knight Fist [5]
  if (Weapontype == 6 && MiscellaneousVars[102] >= 8) IsWeaponLevelMaxed = 1; // Baron Fist [5]
  if (Weapontype == 7 && MiscellaneousVars[103] >= 8) IsWeaponLevelMaxed = 1; // Belphegor Fist [5]
  if (Weapontype == 8 && MiscellaneousVars[104] >= 8) IsWeaponLevelMaxed = 1; // Bruiser Fist [5]
  if (Weapontype == 9 && MiscellaneousVars[105] >= 8) IsWeaponLevelMaxed = 1; // Archon Fist [5]
  if (Weapontype == 10 && MiscellaneousVars[106] >= 8) IsWeaponLevelMaxed = 1; // Pyro Fist [5]
  if (Weapontype == 11 && MiscellaneousVars[107] >= 8) IsWeaponLevelMaxed = 1; // Incarnate Skull [6]
  if (Weapontype == 12 && MiscellaneousVars[108] >= 8) IsWeaponLevelMaxed = 1; // Archvile Hand [6]
  if (Weapontype == 13 && MiscellaneousVars[109] >= 8) IsWeaponLevelMaxed = 1; // Diabloist Hand  [6]
  if (Weapontype == 14 && MiscellaneousVars[110] >= 8) IsWeaponLevelMaxed = 1; // Balrog Fist [6]
  if (Weapontype == 15 && MiscellaneousVars[111] >= 8) IsWeaponLevelMaxed = 1; // Elemental's Eye [6]
  if (Weapontype == 16 && MiscellaneousVars[112] >= 8) IsWeaponLevelMaxed = 1; // Overlord's Eye [6]
  if (IsWeaponLevelMaxed != 0) { Thing_ChangeTID(0,1534); Thing_Remove(1534); }
 }
 else { Thing_ChangeTID(0,1534); Thing_Remove(1534); }
}

// Checks the mapnumber and gametype for Monster Spawners (main number)
script 876 (void)
{
 int SpawnChance, G1;

 if(GetCVar("dvds_dviirndmonsters") == 0) SpawnChance = 0;
 else SpawnChance = GetCVar("dvds_monsterevolchance");

 SpawnChance = SpawnChance + (SceptreActualLevel * 2 / 10) + (PlayerLevel / 15);

 if (CharacterClass == 0) SpawnChance = SpawnChance * 900 / 1000;
 else if (CharacterClass == 1) SpawnChance = SpawnChance * 975 / 1000;
 else if (CharacterClass == 2) SpawnChance = SpawnChance * 1050 / 1000;
 else SpawnChance = SpawnChance * 1000 / 1000;

 if (GameSkill() == SKILL_VERY_EASY) SpawnChance = SpawnChance * 80 / 100;
 else if (GameSkill() == SKILL_EASY) SpawnChance = SpawnChance * 90 / 100;
 else if (GameSkill() == SKILL_NORMAL) SpawnChance = SpawnChance * 100 / 100;
 else if (GameSkill() == SKILL_HARD) SpawnChance = SpawnChance * 110 / 100;
 else if (GameSkill() == SKILL_VERY_HARD) SpawnChance = SpawnChance * 125 / 100;
 else SpawnChance = SpawnChance * 100 / 100;

 if (CheckActorInventory(1001,"SauronHelmet") > 0) SpawnChance = SpawnChance * 110 / 100; // Elevates Spawn Chances by 10%
 if (CheckActorInventory(1001,"SauronGauntletsItem") > 0) SpawnChance = SpawnChance * 110 / 100; // Elevates Spawn Chances by 10%

 if (ModType == 0) // Classic Doom 1/2
 {
  if (ClassicDoomType == 1)
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 1 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 9) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 30);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 11 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 19) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 35);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 21 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 29) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 40);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 42);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 44);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 39) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 47);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 33) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 50);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 34) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 54);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 35) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 58);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 36) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 63);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 37) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 68);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 38) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 75);
  }
  else
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 1 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 5) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 30);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 6 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 10) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 35);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 11 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 15) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 40);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 16 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 20) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 45);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 21 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 25) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 55);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 26) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 56);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 27) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 58);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 61);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 65);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 30) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 70);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 45);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 55);
  }
  G1 += 1000;
  SpawnChance = SpawnChance * G1 / 1000;
 }
 else if (ModType == 1) // DVI
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1101) SpawnChance = SpawnChance * 1000 / 1000; // MAP01 - Insurgents
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1102) SpawnChance = SpawnChance * 1116 / 1000; // MAP02 - Torture Chamber
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1103) SpawnChance = SpawnChance * 1256 / 1000; // MAP03 - Cathedral
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1104) SpawnChance = SpawnChance * 1418 / 1000; // MAP04 - End Of Days
  else SpawnChance = SpawnChance * 1000 / 1000; // Any other Map
 }
 else if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1201) SpawnChance = SpawnChance * 1000 / 1000; // MAP01 - Entryway Pass
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1202) SpawnChance = SpawnChance * 1070 / 1000; // MAP02 - Mutagen
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1203) SpawnChance = SpawnChance * 1140 / 1000; // MAP03 - Crouching Demon, Hidden Archvile
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1204) SpawnChance = SpawnChance * 1209 / 1000; // MAP04 - Minas Morgul
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1205) SpawnChance = SpawnChance * 1302 / 1000; // MAP05 - Eagle's Nest
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1206) SpawnChance = SpawnChance * 1395 / 1000; // MAP05B - The Manliest Level Ever
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1207) SpawnChance = SpawnChance * 1488 / 1000; // MAP06 - Stargate
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1208) SpawnChance = SpawnChance * 1605 / 1000; // MAP07 - The Desert Temple
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1209) SpawnChance = SpawnChance * 1953 / 1000; // MAP08 - The Unholy Cathedral
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1210) SpawnChance = SpawnChance * 2372 / 1000; // MAP09 - You Shall Not Pass!
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1211) SpawnChance = SpawnChance * 2884 / 1000; // MAP10 - Hell's Vendetta
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1212) SpawnChance = SpawnChance * 3488 / 1000; // MAP10B - attedneV s'lleH
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1214) SpawnChance = SpawnChance * 1465 / 1000; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1215) SpawnChance = SpawnChance * 3488 / 1000; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
  else SpawnChance = SpawnChance * 1000 / 1000; // All other Maps
 }
 else SpawnChance = SpawnChance * 1000 / 1000;

 // PrintBold(d:SpawnChance);
 SetResultValue(SpawnChance);
}

// Checks the mapnumber and gametype for Monster Spawners (stealth number)
script 877 (void)
{
 int StealthChance, G1;

 if(GetCVar("dvds_dviirndstealthmonsters") == 0) StealthChance = 0;
 else StealthChance = GetCVar("dvds_monsterstealthchance");

 StealthChance = StealthChance + (SceptreActualLevel * 2 / 50) + (PlayerLevel / 75);

 if (CharacterClass == 0) StealthChance = StealthChance * 1050 / 1000;
 else if (CharacterClass == 1) StealthChance = StealthChance * 975 / 1000;
 else if (CharacterClass == 2) StealthChance = StealthChance * 900 / 1000;
 else StealthChance = StealthChance * 1000 / 1000;

 if (GameSkill() == SKILL_VERY_EASY) StealthChance = StealthChance * 80 / 100;
 else if (GameSkill() == SKILL_EASY) StealthChance = StealthChance * 90 / 100;
 else if (GameSkill() == SKILL_NORMAL) StealthChance = StealthChance * 100 / 100;
 else if (GameSkill() == SKILL_HARD) StealthChance = StealthChance * 110 / 100;
 else if (GameSkill() == SKILL_VERY_HARD) StealthChance = StealthChance * 125 / 100;
 else StealthChance = StealthChance * 100 / 100;

 if (CheckActorInventory(1001,"TheOneRing") > 0) StealthChance = StealthChance * 63 / 1000; // The Ring will HEAVILY cut down on how many enemies can be in stealth mode.

 if (ModType == 0) // Classic Doom 1/2
 {
  if (ClassicDoomType == 1)
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 1 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 9) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 30);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 11 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 19) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 35);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 21 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 29) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 40);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 42);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 44);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 39) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 47);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 33) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 50);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 34) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 54);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 35) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 58);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 36) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 63);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 37) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 68);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 38) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 75);
  }
  else
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 1 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 5) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 30);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 6 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 10) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 35);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 11 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 15) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 40);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 16 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 20) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 45);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) >= 21 && GetLevelInfo(LEVELINFO_LEVELNUM) <= 25) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 55);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 26) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 56);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 27) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 58);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 61);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 65);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 30) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 70);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 31) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 45);
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 32) G1 = (GetLevelInfo(LEVELINFO_LEVELNUM) * 55);
  }
  G1 += 1000;
  StealthChance = StealthChance * G1 / 1000;
  StealthChance = StealthChance * 5 / 8;
 }
 else if (ModType == 1) // DVI
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1101) StealthChance = StealthChance * 1000 / 1000; // MAP01 - Insurgents
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1102) StealthChance = StealthChance * 1116 / 1000; // MAP02 - Torture Chamber
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1103) StealthChance = StealthChance * 1256 / 1000; // MAP03 - Cathedral
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1104) StealthChance = StealthChance * 1418 / 1000; // MAP04 - End Of Days
  else StealthChance = StealthChance * 1000 / 1000; // Any other map
 }
 else
 if (ModType == 2) // DVII
 {
  if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1201) StealthChance = StealthChance * 1000 / 1000; // MAP01 - Entryway Pass
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1202) StealthChance = StealthChance * 1070 / 1000; // MAP02 - Mutagen
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1203) StealthChance = StealthChance * 1140 / 1000; // MAP03 - Crouching Demon, Hidden Archvile
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1204) StealthChance = StealthChance * 1209 / 1000; // MAP04 - Minas Morgul
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1205) StealthChance = StealthChance * 1302 / 1000; // MAP05 - Eagle's Nest
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1206) StealthChance = StealthChance * 1395 / 1000; // MAP05B - The Manliest Level Ever
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1207) StealthChance = StealthChance * 1488 / 1000; // MAP06 - Stargate
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1208) StealthChance = StealthChance * 1605 / 1000; // MAP07 - The Desert Temple
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1209) StealthChance = StealthChance * 1953 / 1000; // MAP08 - The Unholy Cathedral
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1210) StealthChance = StealthChance * 2372 / 1000; // MAP09 - You Shall Not Pass!
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1211) StealthChance = StealthChance * 2884 / 1000; // MAP10 - Hell's Vendetta
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1212) StealthChance = StealthChance * 3488 / 1000; // MAP10B - attedneV s'lleH
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1214) StealthChance = StealthChance * 1465 / 1000; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
  else if (GetLevelInfo(LEVELINFO_LEVELNUM) == 1215) StealthChance = StealthChance * 3488 / 1000; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
  else StealthChance = StealthChance * 1000 / 1000; // All other Maps
 }
 else StealthChance = StealthChance * 1000 / 1000;

 // PrintBold(d:StealthChance,s:" - ",s:GetActorClass(0));
 SetResultValue( StealthChance );
}

// Checks the gametype for monster spawns to allow or deny specfic enemy evolutions from appearing
script 878 (void)
{
 //PrintBold(d:ModType);
 SetResultValue( ModType );
}

// Runs the "Grabbed a Seed of Life/Magic" script
script 879 (int SeedType, int SeedAmount, int SeedLimitTypeIncrease)
{
 int SkillSeedRuns, SkillSeedRND, OldHP, NewHP, OldMP, NewMP, StatGain1, StatGain2, ArmorHPBonus;
 if (SeedAmount < 1) SeedAmount = 1;

 if (SeedType < 1) SeedAmount = 1;
 if (SeedType > 2) SeedAmount = 2;

 OldHP = MaxHealthTrue;
 OldMP = MaxMana;

 if (SeedType == 1) // Seed of Life
 {
  StatGain1 = MaxHealthTrue / 80;
  if (CharacterClass == 0) StatGain1 += 4;
  if (CharacterClass == 1) StatGain1 += 2;
  if (CharacterClass == 2) StatGain1 += 1;

  SkillSeedRND = random(1,13);

  if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
  if (SkillSeedRND == 2) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 3) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 4) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 5) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 6) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 7) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 8) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 9) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 10) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 11) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 12) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;

  StatGain1 = StatGain1 * SeedAmount;
  StatGain1 = StatGain1 * MiscellaneousVars[87];

  // Flora's Armor Items [up to +45% Max HP gained from Max HP Bonuses]
  if (CharacterClass == 2 && CheckActorInventory(1001,"PearlyCorset")) ArmorHPBonus += 20; // +20%
  if (CharacterClass == 2 && CheckActorInventory(1001,"KissaBra")) ArmorHPBonus += 10; // +10%
  if (CharacterClass == 2 && CheckActorInventory(1001,"BalrogRing")) ArmorHPBonus += 15; // +25%
  ArmorHPBonus += 100;
  StatGain1 = StatGain1 * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset

  if (StatGain1 < 1) StatGain1 = 1;

  StatGain2 = GetActorProperty(1001,APROP_HEALTH);
  GiveInventory("UpgradeStamina", StatGain1);
  SetActorProperty(1001,APROP_HEALTH,(StatGain2+StatGain1));
  MaxHealthTrue += StatGain1;
  MaxHealthDoubleTrue = MaxHealthTrue * 2;
  SetActorProperty(1001,APROP_SPAWNHEALTH,MaxHealthTrue);
 }

 if (SeedType == 2) // Seed of Magic
 {
  StatGain1 = MaxMana / 80;
  if (CharacterClass == 0) StatGain1 += 1;
  if (CharacterClass == 1) StatGain1 += 2;
  if (CharacterClass == 2) StatGain1 += 4;

  SkillSeedRND = random(1,13);

  if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
  if (SkillSeedRND == 2) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 3) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 4) StatGain1 = StatGain1 * 3 / 2;
  if (SkillSeedRND == 5) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 6) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 7) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 8) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 9) StatGain1 = StatGain1 * 2;
  if (SkillSeedRND == 10) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 11) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 12) StatGain1 = StatGain1 * 5 / 2;
  if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;

  StatGain1 = StatGain1 * SeedAmount;
  StatGain1 = StatGain1 * MiscellaneousVars[87];

  if (StatGain1 < 1) StatGain1 = 1;

  MaxMana += StatGain1;
  MaxManaDouble = MaxManaDouble * 2;
  CurrentMana += StatGain1;
 }

 NewHP = MaxHealthTrue;
 NewMP = MaxMana;

 if (SeedType == 1) 
 {
  PrintBold
  (
   s:"You've Found a Seed of Life!\n\n",
   s:"HP/Health: ",d:OldHP,s:" --> ",d:NewHP
  );
 }

 if (SeedType == 2) 
 {
  PrintBold
  (
   s:"You've Found a Seed of Magic!\n\n",
   s:"MP/Mana: ",d:OldMP,s:" --> ",d:NewMP
  );
 }

}

// Runs the "Grabbed a Seed of [Bleh]" script
script 880 (int SeedType, int SeedAmount, int SeedLimitTypeIncrease)
{
 int SkillSeedRuns, MaxSkillSeedRuns, SkillSeedRND, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE;
 if (SeedAmount < 1) SeedAmount = 1;

 // "0" is for non-dropped or map-placed seeds as to not impose a limit on those
 if (SeedLimitTypeIncrease == 1) MiscellaneousVars[30] += 1; // "1" is Normal Seeds
 if (SeedLimitTypeIncrease == 2) MiscellaneousVars[37] += 1; // "2" is Skill Seeds
 if (SeedLimitTypeIncrease == 3) MiscellaneousVars[27] += 1; // "3" is Fyggs


 if (SeedType < 0) SeedAmount = 0;
 if (SeedType > 7) SeedAmount = 0;

 OldAGL = MiscellaneousVars[31];
 OldDEF = MiscellaneousVars[32];
 OldDFT = MiscellaneousVars[33];
 OldSOR = MiscellaneousVars[34];
 OldSTR = MiscellaneousVars[35];
 OldTHE = MiscellaneousVars[36];

 if (SeedType == 0) // Seed of Skill [special seed, 4+ non HP/MP stats boosted randomly (can even be one boosted four times)]
 {
  MaxSkillSeedRuns = MiscellaneousVars[87] * 4;

  SkillSeedRuns = 0;
  for (SkillSeedRuns = 0; SkillSeedRuns < MaxSkillSeedRuns; SkillSeedRuns++)
  {
   SkillSeedRND = random(1,6);
   if (SkillSeedRND == 1 && MiscellaneousVars[31] < 256) MiscellaneousVars[31] += SeedAmount;
   if (SkillSeedRND == 2 && MiscellaneousVars[32] < 256) MiscellaneousVars[32] += SeedAmount;
   if (SkillSeedRND == 3 && MiscellaneousVars[33] < 256) MiscellaneousVars[33] += SeedAmount;
   if (SkillSeedRND == 4 && MiscellaneousVars[34] < 256) MiscellaneousVars[34] += SeedAmount;
   if (SkillSeedRND == 5 && MiscellaneousVars[35] < 256) MiscellaneousVars[35] += SeedAmount;
   if (SkillSeedRND == 6 && MiscellaneousVars[36] < 256) MiscellaneousVars[36] += SeedAmount;
  }  
 }

 if (SeedType == 1) // Seed of Agility [Speed/Movement]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[31] < 512) MiscellaneousVars[31] += SeedAmount;
 }

 if (SeedType == 2) // Seed of Defense [Overall Resistance]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[32] < 512) MiscellaneousVars[32] += SeedAmount;
 }

 if (SeedType == 3) // Seed of Deftness [EXP Gain %]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[33] < 512) MiscellaneousVars[33] += SeedAmount;
 }

 if (SeedType == 4) // Seed of Sorcery [Magical Attack]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[34] < 512) MiscellaneousVars[34] += SeedAmount;
 }

 if (SeedType == 5) // Seed of Strength [Overall Attack]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[35] < 512) MiscellaneousVars[35] += SeedAmount;
 }

 if (SeedType == 6) // Seed of Therapeusis [Magical Resistance]
 {
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[36] < 512) MiscellaneousVars[36] += SeedAmount;
 }

 if (SeedType == 7) // Fygg (extremely rare) [all stats +16]
 {
  SeedAmount = SeedAmount * 16;
  SeedAmount = SeedAmount * MiscellaneousVars[87];
  if (MiscellaneousVars[31] < 512) MiscellaneousVars[31] += SeedAmount;
  if (MiscellaneousVars[32] < 512) MiscellaneousVars[32] += SeedAmount;
  if (MiscellaneousVars[33] < 512) MiscellaneousVars[33] += SeedAmount;
  if (MiscellaneousVars[34] < 512) MiscellaneousVars[34] += SeedAmount;
  if (MiscellaneousVars[35] < 512) MiscellaneousVars[35] += SeedAmount;
  if (MiscellaneousVars[36] < 512) MiscellaneousVars[36] += SeedAmount;
 }

 if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
 if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
 if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
 if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
 if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
 if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
 NewAGL = MiscellaneousVars[31];
 NewDEF = MiscellaneousVars[32];
 NewDFT = MiscellaneousVars[33];
 NewSOR = MiscellaneousVars[34];
 NewSTR = MiscellaneousVars[35];
 NewTHE = MiscellaneousVars[36];

 if (SeedType == 0) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Skill!\n\n",
   s:"Agility: ",d:OldAGL,s:" --> ",d:NewAGL,
   s:"\nDefense: ",d:OldDEF,s:" --> ",d:NewDEF,
   s:"\nDeftness: ",d:OldDFT,s:" --> ",d:NewDFT,
   s:"\nSorcery: ",d:OldSOR,s:" --> ",d:NewSOR,
   s:"\nStrength: ",d:OldSTR,s:" --> ",d:NewSTR,
   s:"\nTherapeusis: ",d:OldTHE,s:" --> ",d:NewTHE
  );
 }

 if (SeedType == 1) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Agility!\n\n",
   s:"Agility: ",d:OldAGL,s:" --> ",d:NewAGL
  );
 }

 if (SeedType == 2) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Defense!\n\n",
   s:"Defense: ",d:OldDEF,s:" --> ",d:NewDEF
  );
 }

 if (SeedType == 3) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Deftness!\n\n",
   s:"Deftness: ",d:OldDFT,s:" --> ",d:NewDFT
  );
 }

 if (SeedType == 4) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Sorcery!\n\n",
   s:"Sorcery: ",d:OldSOR,s:" --> ",d:NewSOR
  );
 }

 if (SeedType == 5) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Strength!\n\n",
   s:"Strength: ",d:OldSTR,s:" --> ",d:NewSTR
  );
 }

 if (SeedType == 6) 
 {
  PrintBold
  (
   s:"You've Ate a Seed of Therapeusis!\n\n",
   s:"Therapeusis: ",d:OldTHE,s:" --> ",d:NewTHE
  );
 }

 if (SeedType == 7) 
 {
  PrintBold
  (
   s:"ZOMG You've Ate a Fygg!!!!\n\n",
   s:"Agility: ",d:OldAGL,s:" --> ",d:NewAGL,
   s:"\nDefense: ",d:OldDEF,s:" --> ",d:NewDEF,
   s:"\nDeftness: ",d:OldDFT,s:" --> ",d:NewDFT,
   s:"\nSorcery: ",d:OldSOR,s:" --> ",d:NewSOR,
   s:"\nStrength: ",d:OldSTR,s:" --> ",d:NewSTR,
   s:"\nTherapeusis: ",d:OldTHE,s:" --> ",d:NewTHE
  );
 }

}

//
script 883 (void)
{
 int value;

 value = -1*((GetActorPitch(1001)) / 136);
 // if (value > 64) value = 64;
 // if (value < -63) value = -63;
 // value = -1*((GetActorPitch(1001)) >> 8);
 // value = -1*((GetActorPitch(1001)) * 64 >> 16);
 Print(d:value); 
 SetResultValue(value);
}

// Checks to Remove Seeds on the Map if too many have been picked up already.
script 882 (int SeedType)
{
 if (SeedType == 0 && MiscellaneousVars[37] >= MiscellaneousVars[28]) Thing_Remove(0); // Seed of Skill
 if (SeedType == 1 && MiscellaneousVars[30] >= MiscellaneousVars[29]) Thing_Remove(0); // Seed of Agility/Defense/Deftness/Sorcery/Strength/Therapeusis
 if (SeedType == 2 && MiscellaneousVars[27] >= MiscellaneousVars[26]) Thing_Remove(0); // Fygg Fruit
}

// Checks Seed amounts and will randomize dropped seeds.
script 881 (int type, int OldRand0, int Forced)
{
 int Rand0, Rand1, Rand2, PX, PY, PZ, FullOnSkill, FullOnSeeds, spawnedaitem, SeedDropChance;

 if (ActivatorTID() == 0) Thing_ChangeTID(0,1537);
 PX = GetActorX(1537);
 PY = GetActorY(1537);
 PZ = GetActorZ(1537);
 
 if (Forced == 0)
 {
  if (MiscellaneousVars[37] >= MiscellaneousVars[28]) FullOnSkill = 1;
  if (MiscellaneousVars[30] >= MiscellaneousVars[29]) FullOnSeeds = 1;
 }

 // Spawn Occurance Rate
 if (type == 1)
 {
  Rand0 = OldRand0;
 }
 else
 {
  if (MiscellaneousVars[27] < MiscellaneousVars[26])
  {
   // "MiscellaneousVars[6]" is a randomly picked ID number that DV-DS will pick at VeryFirstRun, from (1 to "MiscellaneousVars[7]")
   if (random(1,MiscellaneousVars[7]) == MiscellaneousVars[6])
   {
    if (Forced == 1) SpawnForced("FyggForced",PX,PY,PZ,0,0); else SpawnForced("Fygg",PX,PY,PZ,0,0); 
    Thing_Remove(1537);
    terminate;
   }
  }

  if (GameSkill() == SKILL_VERY_EASY) Rand0 = random(1,72); // 92
  if (GameSkill() == SKILL_EASY) Rand0 = random(1,81); // 104
  if (GameSkill() == SKILL_NORMAL) Rand0 = random(1,91); // 116
  if (GameSkill() == SKILL_HARD) Rand0 = random(1,100); // 128
  if (GameSkill() == SKILL_VERY_HARD) Rand0 = random(1,119); // 152
 }

 SeedDropChance = 1 + (MiscellaneousVars[33] / 32);

 while (spawnedaitem == 0)
 {
  if (Rand0 <= SeedDropChance)
  {
   if (FullOnSkill == 1)
   {
    if (FullOnSeeds == 1) Rand1 = random(31,40);
    else Rand1 = random(1,40);
   }
   else
   {
    if (FullOnSeeds == 1) Rand1 = random(31,41);
    else Rand1 = random(1,41);
   }

   if (Rand1 > 0 && Rand1 < 6) // Seed of Agility
   {
    if (Forced == 1) SpawnForced("SeedOfAgilityForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfAgility",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 5 && Rand1 < 11) // Seed of Defense
   {
    if (Forced == 1) SpawnForced("SeedOfDefenseForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfDefense",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 10 && Rand1 < 16) // Seed of Deftness
   {
    if (Forced == 1) SpawnForced("SeedOfDeftnessForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfDeftness",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 15 && Rand1 < 21) // Seed of Sorcery
   {
    if (Forced == 1) SpawnForced("SeedOfSorceryForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfSorcery",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 20 && Rand1 < 26)// Seed of Strength
   {
    if (Forced == 1) SpawnForced("SeedOfStrengthForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfStrength",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 25 && Rand1 < 31) // Seed of Therapeusis
   {
    if (Forced == 1) SpawnForced("SeedOfTherapeusisForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfTherapeusis",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 30 && Rand1 < 36) // Seed of Life
   {
    SpawnForced("SeedOfLife",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 > 35 && Rand1 < 41) // Seed of Magic
   {
    SpawnForced("SeedOfMagic",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
   if (Rand1 == 41) // Seed of Skill
   {
    if (Forced == 1) SpawnForced("SeedOfSkillForced",PX,PY,PZ,0,0); else SpawnForced("SeedOfSkill",PX,PY,PZ,0,0);
    spawnedaitem++;
    Thing_Remove(1537);
    terminate;
   }
 
  }
  else // No spawn
  {
   Thing_Remove(1537);
   terminate;
  }
 }

}

// Overall Aeon Point Handling 
script 891 (int type) 
{
 int AeonIncrease = 1;
 if (MiscellaneousVars[31] > 511 && MiscellaneousVars[32] > 511 && MiscellaneousVars[33] > 511 && MiscellaneousVars[34] > 511 && MiscellaneousVars[35] > 511 && MiscellaneousVars[36] > 511) terminate;

 // Move Aeon Point Cursor DOWN
 if (type == 0)
 {
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= AeonPointStartLevel)
  {
   MiscellaneousVars[24] += 1;
   if (MiscellaneousVars[24] > 6) MiscellaneousVars[24] = 1;
  }
  else
  {
   if (MiscellaneousVars[24] != 0) MiscellaneousVars[24] = 0;
  }
 }

 // Move Aeon Point Cursor UP
 if (type == 1)
 {
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= AeonPointStartLevel)
  {
   MiscellaneousVars[24] -= 1;
   if (MiscellaneousVars[24] < 1) MiscellaneousVars[24] = 6;
  }
  else
  {
   if (MiscellaneousVars[24] != 0) MiscellaneousVars[24] = 0;
  }
 }

 // Use an Aeon Point
 if (type == 2)
 {
  AeonIncrease *= MiscellaneousVars[86];
 
  if (MiscellaneousVars[25] > 0 && PlayerLevel >= AeonPointStartLevel)
  {
   if (MiscellaneousVars[24] == 1) { if (MiscellaneousVars[31] < 512) { MiscellaneousVars[31] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Agility
   if (MiscellaneousVars[24] == 2) { if (MiscellaneousVars[32] < 512) { MiscellaneousVars[32] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Defense
   if (MiscellaneousVars[24] == 3) { if (MiscellaneousVars[33] < 512) { MiscellaneousVars[33] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Deftness
   if (MiscellaneousVars[24] == 4) { if (MiscellaneousVars[34] < 512) { MiscellaneousVars[34] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Sorcery
   if (MiscellaneousVars[24] == 5) { if (MiscellaneousVars[35] < 512) { MiscellaneousVars[35] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Strength
   if (MiscellaneousVars[24] == 6) { if (MiscellaneousVars[36] < 512) { MiscellaneousVars[36] += AeonIncrease; MiscellaneousVars[25] -= 1; } else MiscellaneousVars[24] = 0; } // Therapeusis
 
   if (PlayerLevel < AeonPointStartLevel) MiscellaneousVars[24] = 0;
   if (MiscellaneousVars[25] < 1) MiscellaneousVars[24] = 0;
  }
 }
}

// Sceptre Twirl Mana/MP Check [to "balance" sceptre alt-fire cheapness >.>]
script 894 (int attacktype) 
{
 int C1, C2, C3;
 // "16" is the sceptre timer for mana consumption
 // "17" is the sceptre timer limit for mana consumption
 MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 0) MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 1) MiscellaneousVars[17] = 10;
 if (SceptreActualLevel == 2) MiscellaneousVars[17] = 11;
 if (SceptreActualLevel == 3) MiscellaneousVars[17] = 11;
 if (SceptreActualLevel == 4) MiscellaneousVars[17] = 12;
 if (SceptreActualLevel == 5) MiscellaneousVars[17] = 12;
 if (SceptreActualLevel == 6) MiscellaneousVars[17] = 13;
 if (SceptreActualLevel == 7) MiscellaneousVars[17] = 14;
 if (SceptreActualLevel == 8) MiscellaneousVars[17] = 14;
 if (SceptreActualLevel == 9) MiscellaneousVars[17] = 15;
 if (SceptreActualLevel == 10) MiscellaneousVars[17] = 16;
 if (SceptreActualLevel == 11) MiscellaneousVars[17] = 16;
 if (SceptreActualLevel == 12) MiscellaneousVars[17] = 17;
 if (SceptreActualLevel == 13) MiscellaneousVars[17] = 18;
 if (SceptreActualLevel == 14) MiscellaneousVars[17] = 19;
 if (SceptreActualLevel == 15) MiscellaneousVars[17] = 20;
 if (SceptreActualLevel == 16) MiscellaneousVars[17] = 22;

 //Print(d:attacktype);
 if (attacktype == 1)
 {
  if (SceptreActualLevel <= 4 && CurrentMana >= 5) { CurrentMana -= 5; C2++; }
  if (SceptreActualLevel > 4 && SceptreActualLevel <= 8 && CurrentMana >= 4 ) { CurrentMana -= 4; C2++; }
  if (SceptreActualLevel > 8 && SceptreActualLevel <= 12 && CurrentMana >= 3 ) { CurrentMana -= 3; C2++; }
  if (SceptreActualLevel > 12 && SceptreActualLevel <= 16 && CurrentMana >= 2 ) { CurrentMana -= 2; C2++; }
  if (SceptreActualLevel == 16 && CurrentMana >= 1) { CurrentMana -= 1; C2++; }
  if (CurrentMana < 0) CurrentMana = 0;
 }
 else
 {
  if (CurrentMana > 0) C2++;
  if (random(1,16) == 1) MiscellaneousVars[16] += 2; else MiscellaneousVars[16] += 1;
  //Print(d:MiscellaneousVars[16]);
  if (MiscellaneousVars[16] >= MiscellaneousVars[17])
  {
   C3 = random(1,2);
   if (SceptreActualLevel < 8 ) CurrentMana -= 2;
   if (SceptreActualLevel > 8 && SceptreActualLevel < 16) CurrentMana -= C3; C2++;
   if (SceptreActualLevel == 16) CurrentMana -= 1; C2++;
   if (CurrentMana < 0) CurrentMana = 0;
   MiscellaneousVars[16] -= MiscellaneousVars[17];
  }
 }

 //Print(d:C2);
 if (C2 > 0)
 {
  SetResultValue(1);
 }
 else 
 {
  MiscellaneousVars[16] = 0;
  SetResultValue(0); 
 }
}

// For Increasing the Strength Level of a Hellcore-type weapon when picking it up
script 896 (int HellcoreWeapon)
{
 if (HellcoreWeapon == 1) MiscellaneousVars[96] += 1;
 if (HellcoreWeapon == 2) MiscellaneousVars[97] += 1;
 if (HellcoreWeapon == 3) MiscellaneousVars[98] += 1;
 if (HellcoreWeapon == 4) MiscellaneousVars[99] += 1;
 if (HellcoreWeapon == 5) MiscellaneousVars[100] += 1;
 if (HellcoreWeapon == 6) MiscellaneousVars[101] += 1;
 if (HellcoreWeapon == 7) MiscellaneousVars[102] += 1;
 if (HellcoreWeapon == 8) MiscellaneousVars[103] += 1;
 if (HellcoreWeapon == 9) MiscellaneousVars[104] += 1;
 if (HellcoreWeapon == 10) MiscellaneousVars[105] += 1;
 if (HellcoreWeapon == 11) MiscellaneousVars[106] += 1;
 if (HellcoreWeapon == 12) MiscellaneousVars[107] += 1;
 if (HellcoreWeapon == 13) MiscellaneousVars[108] += 1;
 if (HellcoreWeapon == 14) MiscellaneousVars[109] += 1;
 if (HellcoreWeapon == 15) MiscellaneousVars[110] += 1;
 if (HellcoreWeapon == 16) MiscellaneousVars[111] += 1;
 if (HellcoreWeapon == 17) MiscellaneousVars[112] += 1;

 if (MiscellaneousVars[96] > 8) MiscellaneousVars[96] = 8;
 if (MiscellaneousVars[97] > 8) MiscellaneousVars[97] = 8;
 if (MiscellaneousVars[98] > 8) MiscellaneousVars[98] = 8;
 if (MiscellaneousVars[99] > 8) MiscellaneousVars[99] = 8;
 if (MiscellaneousVars[100] > 8) MiscellaneousVars[100] = 8;
 if (MiscellaneousVars[101] > 8) MiscellaneousVars[101] = 8;
 if (MiscellaneousVars[102] > 8) MiscellaneousVars[102] = 8;
 if (MiscellaneousVars[103] > 8) MiscellaneousVars[103] = 8;
 if (MiscellaneousVars[104] > 8) MiscellaneousVars[104] = 8;
 if (MiscellaneousVars[105] > 8) MiscellaneousVars[105] = 8;
 if (MiscellaneousVars[106] > 8) MiscellaneousVars[106] = 8;
 if (MiscellaneousVars[107] > 8) MiscellaneousVars[107] = 8;
 if (MiscellaneousVars[108] > 8) MiscellaneousVars[108] = 8;
 if (MiscellaneousVars[109] > 8) MiscellaneousVars[109] = 8;
 if (MiscellaneousVars[110] > 8) MiscellaneousVars[110] = 8;
 if (MiscellaneousVars[111] > 8) MiscellaneousVars[111] = 8;
 if (MiscellaneousVars[112] > 8) MiscellaneousVars[112] = 8;
}

// Check if to perform Sceptre's downswing alternate attack while falling or it's spinning alternate while grounded.
script 897 (void)
{
 int buttons = GetPlayerInput(0, INPUT_BUTTONS);

 if (GetActorVelZ(1001) < -4096)
 {
  if (buttons & BT_JUMP && PlayerLevel >= 13 && SceptreActualLevel >= 4)
  {
   SetResultValue(1);
  }
  else
  {
   if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && PlayerLevel >= 8 && SceptreActualLevel >= 2)
   {
    SetResultValue(2);
   }
   else
   {
    SetResultValue(0);
   }
  }
 }
 else
 {
  if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && PlayerLevel >= 8 && SceptreActualLevel >= 2)
  {
   SetResultValue(2);
  }
  else
  {
   SetResultValue(0);
  }
 }
}


// Returns Sceptre Damage [including w/ berserk/other amplication items]
script 898 (int attacktype, int attacklevel)
{
 int damage;
 int strengthcounter;
 int sceptrestrmin;
 int sceptrestrmax;

 if (SceptreActualLevel <= 0) damage = random(275,325); // Base Damage Range
 if (SceptreActualLevel == 1) damage = random(280,330); // +5 Damage Range
 if (SceptreActualLevel == 2) damage = random(290,340); // +10 Damage Range
 if (SceptreActualLevel == 3) damage = random(320,370); // +30 Damage Range
 if (SceptreActualLevel == 4) damage = random(340,390); // +20 Damage Range
 if (SceptreActualLevel == 5) damage = random(365,415); // +25 Damage Range
 if (SceptreActualLevel == 6) damage = random(425,475); // +60 Damage Range
 if (SceptreActualLevel == 7) damage = random(425,475); // +0 Damage Range
 if (SceptreActualLevel == 8) damage = random(545,595); // +120 Damage Range
 if (SceptreActualLevel == 9) damage = random(590,640); // +45 Damage Range
 if (SceptreActualLevel == 10) damage = random(640,690); // +50 Damage Range
 if (SceptreActualLevel == 11) damage = random(750,800); // +110 Damage Range
 if (SceptreActualLevel == 12) damage = random(810,860); // +60 Damage Range
 if (SceptreActualLevel == 13) damage = random(875,925); // +65 Damage Range
 if (SceptreActualLevel == 14) damage = random(1015,1065); // +140 Damage Range
 if (SceptreActualLevel == 15) damage = random(1015,1065); // +0 Damage Range
 if (SceptreActualLevel >= 16) damage = random(1255,1305); // +240 Damage Range

 // Strength Stat Check
 for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
 {
  sceptrestrmin = ((SceptreActualLevel * (4 + (MiscellaneousVars[35] / 32))) + (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64))))) - (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64))));
  sceptrestrmax = ((SceptreActualLevel * (4 + (MiscellaneousVars[35] / 32))) + (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64))))) + (16 + (SceptreActualLevel * (2 + (MiscellaneousVars[35] / 64))));

  damage += random(sceptrestrmin,sceptrestrmax);
 }

 if (attacktype == 1) damage = damage * 5 / 2; // If performing the Aireal Attack
 if (attacktype == 2)
 {
  if (attacklevel == 0) damage = damage / 2; // If performing the Spinning Attack
  if (attacklevel == 1) damage = damage * 3 / 4; // If performing the Spinning Attack
  if (attacklevel == 2) damage = damage * 7 / 8; // If performing the Spinning Attack
  if (attacklevel == 3) damage = damage * 15 / 16; // If performing the Spinning Attack
 }
 // Berserk Check
 if (CheckInventory("PowerStrength") > 0) damage = damage * 10;

 // Print(d:damage);
 SetResultValue(damage);
}

// Fist/Punch Damage Checker
script 899 (int altfire)
{
 int damage;
 str weapon = GetWeapon();
 int strengthcounter;

 // Character Check [base damage]
 if (CharacterClass == 0) damage = random(18,24);
 if (CharacterClass == 1) damage = random(10,16);
 if (CharacterClass == 2) damage = random(6,12);

 // Gauntlet Check #1 [base damage]
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  if (CharacterClass == 0) damage += random(14,18);
  if (CharacterClass == 1) damage += random(10,14);
  if (CharacterClass == 2) damage += random(8,12);
 }
 
 // Strength Stat Check [7 pts = roughly double the character's base punch damage]
 //PrintBold(d:damage);
 for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
 {
  if (CharacterClass == 0) damage += random(1,3);
  if (CharacterClass == 1) damage += random(1,2);
  if (CharacterClass == 2) damage += random(0,2);
 }

 // Gauntlet Check #2 [strength stat check] [7 pts = roughly double the character's base gauntlet punch damage]
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  for (strengthcounter = 0; strengthcounter < MiscellaneousVars[35]; strengthcounter++)
  {
   if (CharacterClass == 0) damage += random(2,3);
   if (CharacterClass == 1) damage += random(1,3);
   if (CharacterClass == 2) damage += random(1,2);
  } 
 }

 // Berserk Check
 //PrintBold(d:damage);
 if (CheckInventory("PowerStrength") > 0) damage = damage * 10;

 // Flora Armor Checks
 //PrintBold(d:damage);
 if (CharacterClass == 2) 
 {
  if (CheckActorInventory(1001,"FalconKnifeEarrings") > 0) Damage = Damage * 4 / 3; // +33.3~% Punch Damage
  if (CheckActorInventory(1001,"AnubisCufflinks") > 0) Damage = Damage * 7 / 4; // +75% Punch Damage
 }

 // Gauntlet Check #3
 If(StrIcmp(weapon, "SauronGauntlets") == 0 || StrIcmp(weapon, "SauronGauntletsIllucia") == 0 || StrIcmp(weapon, "SauronGauntletsFlora") == 0)
 {
  //PrintBold(d:damage);
  if (altfire == 0) damage *= 10;
  if (altfire == 1) damage *= 25;
 }

 //PrintBold(d:damage);
 SetResultValue(damage);
}

// Damage Indicators
function int pow (int x, int n)
{
 int y = 1;
 while (n-- > 0) y *= x;
 return y;
}

function int GetDigit(int Num, int Digit) 
{
 return (Num / pow(10, Digit)) % 10 ;
}

// For Monsters/Non-Players
script 900 (void)
{
 while (GetCVar("dvds_dmgindicator") == 1)
 {
  int ActorHeight = GetActorProperty(0,APROP_Height);
  int PreviousHealth = GetActorProperty(0,APROP_Health);

  int DelayRateLag = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) / 160;
  int TickDelay = GetCVAR("dvds_dmgind_delay");
  delay((1 + DelayRateLag) * TickDelay); // 1
  If (GetActorProperty(0,APROP_Health) != PreviousHealth)
  {
     int DmgIndDisplayValue = PreviousHealth - GetActorProperty(0,APROP_Health);
     int DmgIndDisplayType;

     DmgIndDisplayType = 0; // 0 = Damage, 1 = Healing.
     If (DmgIndDisplayValue < 0)
     {
      DmgIndDisplayValue *= -1;
      DmgIndDisplayType = 1;
     }

     if (DmgIndDisplayValue > 9999999) DmgIndDisplayValue = 9999999;

     If (DmgIndDisplayValue > 0)
     {
      int Digit1 = GetDigit(DmgIndDisplayValue, 0);
      int Digit2 = GetDigit(DmgIndDisplayValue, 1);
      int Digit3 = GetDigit(DmgIndDisplayValue, 2);
      int Digit4 = GetDigit(DmgIndDisplayValue, 3);
      int Digit5 = GetDigit(DmgIndDisplayValue, 4);
      int Digit6 = GetDigit(DmgIndDisplayValue, 5);
      int Digit7 = GetDigit(DmgIndDisplayValue, 6);

      int x = GetActorX(0);
      int y = GetActorY(0);
      int z;
      If (ActorHeight > 0) 
          z = GetActorZ(0) + Random(ActorHeight, (ActorHeight)+6);
      else
          z = GetActorZ(0) + GetActorProperty(0, APROP_HEIGHT) + Random(0.0, 6.0);

      int NumberID = Random(7000, 8000);

      str DigitSpawn = StrParam(s:"Digit1Num", d:Digit1);
      if (DmgIndDisplayValue >= 0) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit2Num", d:Digit2);
      if (DmgIndDisplayValue >= 10) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit3Num", d:Digit3);
      if (DmgIndDisplayValue >= 100) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit4Num", d:Digit4);
      if (DmgIndDisplayValue >= 1000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit5Num", d:Digit5);
      if (DmgIndDisplayValue >= 10000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit6Num", d:Digit6);
      if (DmgIndDisplayValue >= 100000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      DigitSpawn = StrParam(s:"Digit7Num", d:Digit7);
      if (DmgIndDisplayValue >= 1000000) Spawn(DigitSpawn, x, y, z, NumberID, 0);

      If (DmgIndDisplayType == 1) Thing_SetTranslation(NumberID, 30); // Healing
      else Thing_SetTranslation(NumberID, 31);
      
      SetActorVelocity(NumberID, random((-1.0),(1.0)), random((-1.0),(1.0)), 0.5, 0, 0);
     }
  }
 }
}

// Used for testing SetHudSize customization in-game.
script 910 (int screenX, int screenY, int usehud)
{
 MiscellaneousVars[76] = screenX;
 MiscellaneousVars[77] = screenY;
 MiscellaneousVars[78] = usehud;
}

// Used for testing coordinate/alignments on specfic "HudMessage" usages in-game.
script 911 (int X, int Y, int X2, int Y2)
{
 X *= 1.0;
 Y *= 1.0;
 X2 *= 0.1;
 Y2 *= 0.1;
 MiscellaneousVars[74] = X + X2;
 MiscellaneousVars[75] = Y + Y2;
 Print(f:X,s:" ",f:Y,s:" ",f:X2,s:" ",f:Y2);
}

// Test Script for Toggling pages for armor display lists
script 912 (int Page)
{
 MiscellaneousVars[55] += Page;
}

/*
   3101		-	Main List for Armor Display Menu
   3102		-	Top Line for Armor Display Menu
   3103		-	Armor Icon
   3104		-	Background Tint for Menus/Armor-Display
*/
// Show Armor Stats
script 913 ENTER
{
 int misc1, misc2, misc3, misc4, misc5;
 str ArmorString1, ArmorString2, ArmorString3, ArmorString4, ArmorString5, ArmorString6, ArmorString7, ArmorString8, ArmorString9, ArmorString10, ArmorString11, ArmorString12, ArmorString13, ArmorString14, ArmorString15, ArmorString16, ArmorString17, ArmorString18, ArmorString19, ArmorString20;

 // [55] is the Armor Page to display
 if (MiscellaneousVars[55] != 0)
 {
  // Dims the screen without using Fade-based commands that'll interfere with other flashes/etc
  SetHudSize(320,240,0);
  SetFont("BLACKBAR");
  HudMessage(s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, 3104, 0, 160.0, 120.0, 0.03, 0.667);
  SetFont("SmallFont");

  SetHudSize(512,384,0); // SetHudSize(MiscellaneousVars[76],MiscellaneousVars[77],MiscellaneousVars[78]);
  // Checks the Armor Info/Durability of the Marine's armor only.
  if (MiscellaneousVars[55] == 1) // Current Armor [Deggaris and Illucia only]
  {
   if (CharacterClass == 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CurrentArmorClass == 0) MiscellaneousVars[55] += 1;
    if (CurrentArmorClass == 1)
    {
     SetFont("ARM1A1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 210.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Green Armor"; HUDMSG_PLAIN, 3102, CR_WHITE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+33.3% Normal Damage Protection\n",
                s:"\cd+2.5% Unbreakable Damage Protection\n",
                s:"\cd+35% Total Damage Protection\n",
                s:"100 Durability Points\n",
                s:"\cg-4% Maximum Mana Regeneration Rate\n",
                s:"\cd+1.2% Stamina Regeneration\n",
                s:"\cd+(4 + 1%) Balance\n",
                s:"\cd+0.5% Survival Chance\n",
                s:"\cg-3.3% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 2)
    {
     SetFont("ARM2A1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 214.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Blue Armor"; HUDMSG_PLAIN, 3102, CR_WHITE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+50% Normal Damage Protection\n",
                s:"\cd+5% Unbreakable Damage Protection\n",
                s:"\cd+52.5% Total Damage Protection\n",
                s:"200 Durability Points\n",
                s:"\cg-8% Maximum Mana Regeneration Rate\n",
                s:"\cd+2.5% Stamina Regeneration\n",
                s:"\cd+(8 + 2%) Balance\n",
                s:"\cd+1% Survival Chance\n",
                s:"\cg-5% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 3)
    {
     SetFont("ARM3A1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 195.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Stone Skin Armor"; HUDMSG_PLAIN, 3102, CR_BRICK, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+66.67% Normal Damage Protection\n",
                s:"\cd+12.5% Unbreakable Damage Protection\n",
                s:"\cd+70.84% Total Damage Protection\n",
                s:"333 Durability Points\n",
                s:"\cg-10% Maximum Mana Regeneration Rate\n",
                s:"\cd+5% Stamina Regeneration\n",
                s:"\cd+(12 + 4%) Balance\n",
                s:"\cd+1.6% Survival Chance\n",
                s:"\cg-6.7% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 4)
    {
     SetFont("ARM4A1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 190.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Diamond Skin Armor"; HUDMSG_PLAIN, 3102, CR_BRICK, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+90% Damage Protection\n",
                s:"\cd+37.5% Unbreakable Damage Protection\n",
                s:"\cd+93.75% Total Damage Protection\n",
                s:"888 Durability Points\n",
                s:"\cg-14% Maximum Mana Regeneration Rate\n",
                s:"\cd+10% Stamina Regeneration\n",
                s:"\cd+(16 + 8%) Balance\n",
                s:"\cd+4.4% Survival Chance\n",
                s:"\cg-9% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 5)
    {
     SetFont("ARM3B1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 174.0, 50.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Godly Stone Skin Armor"; HUDMSG_PLAIN, 3102, CR_GOLD, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+83.3334% Normal Damage Protection\n",
                s:"\cd+25% Unbreakable Damage Protection\n",
                s:"\cd+87.5% Total Damage Protection\n",
                s:"1332 Durability Points\n",
                s:"\cg-12% Maximum Mana Regeneration Rate\n",
                s:"\cd+7.5% Stamina Regeneration\n",
                s:"\cd+(12 + 12%) Balance\n",
                s:"\cd+6.6% Survival Chance\n",
                s:"\cg-8.3% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }

    if (CurrentArmorClass == 6)
    {
     SetFont("ARM4B1");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 167.0, 55.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Godly Diamond Skin Armor"; HUDMSG_PLAIN, 3102, CR_GOLD, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+95% Normal Damage Protection\n",
                s:"\cd+75% Unbreakable Damage Protection\n",
                s:"\cd+98.75% Total Damage Protection\n",
                s:"3552 Durability Points\n",
                s:"\cg-16% Maximum Mana Regeneration Rate\n",
                s:"\cd+15% Stamina Regeneration\n",
                s:"\cd+(16 + 24%) Balance\n",
                s:"\cd+17.6% Survival Chance\n",
                s:"\cg-9.5% Jump Strength\n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
   }
  }

  // Checks the Armor Info of Sauron's Helmet. [all characters]
  if (MiscellaneousVars[55] == 2)
  {   
   if (CheckInventory("SauronHelmet") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cd+12.5% Mana Regeneration Rate\n";
    if (CharacterClass == 1) ArmorString1 = "\cd+25% Mana Regeneration Rate\n";
    if (CharacterClass == 2) ArmorString1 = "\cd+37.5% Mana Regeneration Rate\n";

    ArmorString2 = " \n";
    if (CharacterClass == 2) ArmorString2 = "\cg+34% Hellcore Heating Speed\n";

    SetFont("SHEMC0");
    HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 190.0, 25.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"Sauron's Helmet"; HUDMSG_PLAIN, 3102, CR_DARKGRAY, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd-25% Damage Received\n",
                s:"\cd+12.5% Healing Spell Effect\n",
                s:ArmorString1,
                s:"\cg-25% Maximum Mana Regeneration Rate\n",
                s:"\cg-10% Stamina Regeneration\n",
                s:"\cd+12.5% Mana Gain from Items\n",
                s:"\cd+(17 + 17%) Balance\n",
                s:"\cd+17.5% Survival Chance\n",
                s:"\cg-10% Jump Strength\n",
                s:"\cg-1.56% Chance to Completely Evade an Attack\n",
                s:"\cdMarginally Increases Evasion Based on Agility & Deftness\n",
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of Sauron's Gauntlets. [all characters]
  if (MiscellaneousVars[55] == 3)
  {   
   if (CheckInventory("SauronGauntletsItem") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cd+(5 + 5%) Balance\n";
    if (CharacterClass == 1) ArmorString1 = "\cd+(6 + 6%) Balance\n";
    if (CharacterClass == 2) ArmorString1 = "\cd+(4 + 4%) Balance\n";

    if (CharacterClass == 0) ArmorString2 = "\cd+5% Survival Chance\n";
    if (CharacterClass == 1) ArmorString2 = "\cd+6% Survival Chance\n";
    if (CharacterClass == 2) ArmorString2 = "\cd+4% Survival Chance\n";

    ArmorString3 = " \n";
    if (CharacterClass == 2) ArmorString3 = "\cg+34% Hellcore Heating Speed\n";

    SetFont("WGNTC0");
    HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 170.0, 30.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"Sauron's Gauntlets"; HUDMSG_PLAIN, 3102, CR_DARKGRAY, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+12.5% Healing Spell Effect\n",
                s:"\cd+25% Mana Regeneration Rate\n",
                s:"\cg-10% Maximum Mana Regeneration Rate\n",
                s:"\cg-10% Stamina Regeneration\n",
                s:"\cd+25% Mana Gain from Items\n",
                s:"\cg-1.56% Chance to Completely Evade an Attack\n",
                s:"\cdMarginally Increases Evasion Based on Agility & Deftness\n",
                s:ArmorString1,
                s:ArmorString2,
                s:"\cg-5% Jump Strength\n",
                s:"Recovers some health/mana with each hit [up too 200% maximum of each]\n",
                s:"Alt-Fire will throw a stronger, slower blow\n",
                s:ArmorString3,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of The One Ring [all characters]
  if (MiscellaneousVars[55] == 4)
  {   
   if (CheckInventory("TheOneRing") > 0)
   {
    if (CharacterClass == 0) ArmorString1 = "\cg+25% Mana Cost\n";
    if (CharacterClass == 1) ArmorString1 = "\cg+25% Mana Cost\n";
    if (CharacterClass == 2) ArmorString1 = "\cd-18.75% Mana Cost\n";

    if (CharacterClass == 0) ArmorString2 = "\cg-37.5% Mana Regeneration Rate\n";
    if (CharacterClass == 1) ArmorString2 = "\cg-25% Mana Regeneration Rate\n";
    if (CharacterClass == 2) ArmorString2 = "\cg-12.5% Mana Regeneration Rate\n";

    if (CharacterClass == 0) ArmorString3 = "\cg-50% Mana Gain from Items\n";
    if (CharacterClass == 1) ArmorString3 = "\cg-50% Mana Gain from Items\n";
    if (CharacterClass == 2) ArmorString3 = "\cd+25% Mana Gain from Items\n";

    if (CharacterClass == 2)
    {
     if (CheckInventory("AnubisCufflinks") > 0) ArmorString4 = "\cqIncrease Fear Effect Chance from '\cnAnubis Cufflinks\cq' to 33.3%\n";
                                           else ArmorString4 = "\ck(?)\n";
    }
    else
    {
     if (CharacterClass == 0) ArmorString4 = "\cdYou Become Ghostly, Making Attacks Sometimes Pass Through You\n";
     if (CharacterClass == 1) ArmorString4 = "\cdYou Appear as a Shadow, Throwing Attacks off Course\n";
    }

    if (CharacterClass == 0) ArmorString5 = "\cd10% Chance of Not Consuming Ammo\n";
    if (CharacterClass == 1) ArmorString5 = "\cd10% Chance of Not Consuming Ammo\n";
    if (CharacterClass == 2) ArmorString5 = "\cd25% Chance of Not Consuming Ammo\n";

    SetFont("RINGD0");
    HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 195.0, 30.0, 0.03);
    SetFont("SmallFont");
    HudMessage(s:"The One Ring"; HUDMSG_PLAIN, 3102, CR_ORANGE, 256.0, 31.0, 0.03);

     HudMessage(s:ArmorString1,
                s:"\cd+150% Healing Spell Effect\n",
                s:ArmorString2,
                s:"\cd+50% Maximum Mana Regeneration Rate\n",
                s:"\cd+25% Extra Chance of a Gain to Each Stat on Level Up\n",
                s:ArmorString3,
                s:"\cd+10% Balance\n",
                s:"\cd+33.3% Survival Chance\n",
                s:"\cd+50% Movement Speed\n",
                s:"\cd+150% Damage Inflicted by All Attacks\n",
                s:"\cd-60% Damage Received\n",
                s:"\cd+6.25% Chance to Completely Evade an Attack\n",
                s:"\cdSlightly Increases Evasion Based on Agility & Deftness\n",
                s:"\cdAllows You to See The Entire Map\n",
                s:"\cdAllows You to See All Creatures and Items on The Map\n",
                s:ArmorString5,
                s:ArmorString4,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

   }
   else MiscellaneousVars[55] += 1;
  }

  // Checks the Armor Info of the Safe Tea Boots [Flora only]
  if (MiscellaneousVars[55] == 5)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("SafeTeaShoes") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMA0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 188.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Safe Tea Shoes"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+3% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+10% Stamina Regeneration\n",
                s:"\cd+1 Balance\n",
                s:"\cd+1.25% Magic Resistance\n",
                s:"\cd+25% Chance to Not Incur Slime/etc Damage\n",
                s:"\cd-0.5% Hellcore Heating Speed\n",
                s:"\cd+3.75% Chance to Completely Evade an Attack\n",
                s:"\cd+10% Jump Strength\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Pearly Corset [Flora only]
  if (MiscellaneousVars[55] == 6)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("PearlyCorset") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMB0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 190.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Pearly Corset"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+7% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+3 Balance\n",
                s:"\cd+2.5% Magic Resistance\n",
                s:"\cd+2% Fire-Elemental Resistance\n",
                s:"\cd+2% Ice-Elemental Resistance\n",
                s:"\cd-2.5% Hellcore Heating Speed\n",
                s:"\cd+0.5% Jump Strength\n",
                s:"\cd+20% HP Regen Speed\n",
                s:"\cd-10% HP Degen Speed (only if above 100% Maximum HP)\n",
                s:"\cd+30%-45% Extra EXP Gained\n",
                s:"\cd+30%-45% Extra Sceptre EXP Gained\n",
                s:"\cd+20% Max HP Gained From Max HP Bonuses/Seeds of Life\n",
                s:"\cd+0.75% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Water Flying Dress [Flora only]
  if (MiscellaneousVars[55] == 7)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("WaterFlyingDress") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMC0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 173.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Water Flying Dress"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+8% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+4 Balance\n",
                s:"\cd+25% Magic Resistance\n",
                s:"\cd+30% Fire-Elemental Resistance\n",
                s:"\cd-7.5% Hellcore Heating Speed\n",
                s:"\cd+0.5% Jump Strength\n",
                s:"\cd+1.25% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Evenstar Necklace [Flora only]
  if (MiscellaneousVars[55] == 8)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("EvenstarNecklace") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMD0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 174.0, 28.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Evenstar Necklace"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+2% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+1 Balance\n",
                s:"\cd-(10 + 10%) Mana Cost\n",
                s:"\cd+20% Magic Resistance\n",
                s:"\cd+20% Fire-Elemental Resistance\n",
                s:"\cd+20% Ice-Elemental Resistance\n",
                s:"\cd+20% Thunder-Elemental Resistance\n",
                s:"\cd+20% Magic Damage\n",
                s:"\cd+20% Fire-Elemental Damage\n",
                s:"\cd+20% Ice-Elemental Damage\n",
                s:"\cd+20% Thunder-Elemental Damage\n",
                s:"\cd+20% Holy-Elemental Damage\n",
                s:"\cd+10% HP Regen Speed\n",
                s:"\cd-5% HP Degen Speed (only if above 100% Maximum HP)\n",
                s:"\cd-13.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Jump Strength\n",
                s:"\cd+25% Maximum Mana Regeneration Rate\n",
                s:"\cd+33% Movement Speed While Drawing '\cfDiaris Bow\cd'\n",
                s:"\cd+2.5% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Cloak Of Evasion [Flora only]
  if (MiscellaneousVars[55] == 9)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("CloakOfEvasion") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMME0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 180.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Cloak Of Evasion"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+4% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+3 Balance\n",
                s:"\cd+5% Ice-Elemental Resistance\n",
                s:"\cd+2.5% Thunder-Elemental Resistance\n",
                s:"\cd+12.5% Chance to Not Incur Slime/etc Damage\n",
                s:"\cd+10% Movement Speed\n",
                s:"\cd+12.5% Chance to Completely Evade an Attack\n",
                s:"\cd+2.5% Jump Strength\n",
                s:"\cd-1.5% Hellcore Heating Speed\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Falcon Knife Earrings [Flora only]
  if (MiscellaneousVars[55] == 10)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("FalconKnifeEarrings") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";

     if (CheckInventory("SauronGauntletsItem") > 0) ArmorString3 = "\cd+33.3% Damage Done By Punches and Gauntlet Punches\n";
                                               else ArmorString3 = "\cd+33.3% Damage Done By Punches\n";
     
     SetFont("ARMMK0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 167.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Falcon Knife Earrings"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+5% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+1 Balance\n",
                s:"\cd+100% Damage Inflicted by All Attacks\n",
                s:"\cd+3.75% Jump Strength\n",
                s:"\cd-4.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Chance to Completely Evade an Attack\n",
                s:ArmorString3,
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Anubis Cufflinks [Flora only]
  if (MiscellaneousVars[55] == 11)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("AnubisCufflinks") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     if (CheckInventory("SauronGauntletsItem") > 0) ArmorString3 = "\cd+75% Damage Done By Punches and Gauntlet Punches\n";
                                               else ArmorString3 = "\cd+75% Damage Done By Punches\n";
     
     if (CheckInventory("TheOneRing") > 0) ArmorString4 = "\cd+33.3% Chance to Induce Fear On Enemies and Make Them Hesitate\n";
                                      else ArmorString4 = "\cd+20% Chance to Induce Fear On Enemies and Make Them Hesitate\n";
     
     SetFont("ARMMF0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 181.0, 32.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Anubis Cufflinks"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+5% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+2.5% Stamina Regeneration\n",
                s:"\cd+2 Balance\n",
                s:"\cd-(2 + 2%) Mana Cost\n",
                s:ArmorString4,
                s:"\cd+6.25% Thunder-Elemental Resistance\n",
                s:"\cd+10% Survival Chance\n",
                s:"\cd+15% HP Regen Speed\n",
                s:"\cd-7.5% HP Degen Speed (only if above 100% Maximum HP)\n",
                s:"\cd+1.25% Jump Strength\n",
                s:"\cd-3.5% Hellcore Heating Speed\n",
                s:"\cd+62% Maximum Mana Regeneration Rate\n",
                s:"\cd+0.5% Chance to Completely Evade an Attack\n",
                s:ArmorString3,
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Kissa's Armored Brassiere [Flora only]
  if (MiscellaneousVars[55] == 12)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("KissaBra") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMG0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 151.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Kissa's Armored Brassiere"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+6% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+7.5% Stamina Regeneration\n",
                s:"\cd+1 Balance\n",
                s:"\cd+10% Max HP Gained From Max HP Bonuses/Seeds of Life\n",
                s:"\cd+25% Survival Chance\n",
                s:"\cqMaximum Survival Chance increases from 87.5% to 93.8%\n",
                s:"\cd+38% Maximum Mana Regeneration Rate\n",
                s:"\cd+2.5% Jump Strength\n",
                s:"\cd-6.5% Hellcore Heating Speed\n",
                s:"\cd+1% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Ruinous Shield [Flora only]
  if (MiscellaneousVars[55] == 13)
  {

   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("RuinousShield") > 0)
    {
     if (GameSkill() == SKILL_VERY_EASY) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 12.5% of Maximum\n";
     if (GameSkill() == SKILL_EASY) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 11.11~% of Maximum\n";
     if (GameSkill() == SKILL_NORMAL) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 10% of Maximum\n";
     if (GameSkill() == SKILL_HARD) ArmorString1 =" \cg-0.6% to -3.1% HP Degeneration Every Second Down to 9.09~% of Maximum\n";
     if (GameSkill() == SKILL_VERY_HARD) ArmorString1 = "\cg-0.6% to -3.1% HP Degeneration Every Second Down to 8.33~% of Maximum\n";

     if (GameSkill() == SKILL_VERY_EASY) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.56~% of Maximum\n";
     if (GameSkill() == SKILL_EASY) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.38~% of Maximum\n";
     if (GameSkill() == SKILL_NORMAL) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.25% of Maximum\n";
     if (GameSkill() == SKILL_HARD) ArmorString2 =" \cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.13~% of Maximum\n";
     if (GameSkill() == SKILL_VERY_HARD) ArmorString2 = "\cg-0.6% to -3.1% Mana Degeneration Every Second Down to 1.04~% of Maximum\n";

     SetFont("ARMML0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 192.0, 31.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Ruinous Shield"; HUDMSG_PLAIN, 3102, CR_DARKRED, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+4 Max Level Cap\n",
                s:"\cg-37.5% Stamina Regeneration\n",
                s:"\cg-(10 + 50%) Balance\n",
                s:"\cgSurvival Chance is cut by 9/10ths it's usual value\n",
                s:"\cg-61% Damage Inflicted\n",
                s:"\cg-61% Damage Resistance\n",
                s:"\cg+200% Hellcore Heating Speed\n",
                s:"\cg+34% Mana Cost\n",
                s:"\cg-75% HP Regen Speed\n",
                s:"\cg-75% Mana Regeneration Rate\n",
                s:"\cgEvasion Chance reduced by 3/4ths it's usual value\n",
                s:"Taking Damage Will Help Progress the Shield's Uncursing Process\n",
                s:"Shield Will Also Slowly Uncurse Itself Over Time On It's Own\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Divine Shield [Flora only]
  if (MiscellaneousVars[55] == 14)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("DivineShield") > 0)
    {
     misc1 = 0;
     if (CheckInventory("SafeTeaShoes") > 0) misc1 += 1;
     if (CheckInventory("PearlyCorset") > 0) misc1 += 1;
     if (CheckInventory("WaterFlyingDress") > 0) misc1 += 1;
     if (CheckInventory("EvenstarNecklace") > 0) misc1 += 1;
     if (CheckInventory("CloakOfEvasion") > 0) misc1 += 1;
     if (CheckInventory("FalconKnifeEarrings") > 0) misc1 += 1;
     if (CheckInventory("AnubisCufflinks") > 0) misc1 += 1;
     if (CheckInventory("KissaBra") > 0) misc1 += 1;
     if (CheckInventory("BalrogRing") > 0) misc1 += 1;
     if (CheckInventory("DoveRibbon") > 0) misc1 += 1;

     misc2 = 15 + (misc1 * 2);
     misc3 = 7 + (misc1 * 7);

     ArmorString1 = "% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
     ArmorString2 = "% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";

     SetFont("ARMMH0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 194.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Divine Shield"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+16% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+12.5% Stamina Regeneration\n",
                s:"\cd+(10 + 10%) Balance\n",
                s:"\cd+30% Magic Resistance\n",
                s:"\cd+20% Fire-Elemental Resistance\n",
                s:"\cd+20% Ice-Elemental Resistance\n",
                s:"\cd+20% Thunder-Elemental Resistance\n",
                s:"\cd-12.5% Hellcore Heating Speed\n",
                s:"\cd+0.625% Jump Strength\n",
                s:"\cdEvasion Chance increased by 11/10ths it's usual value\n",
                s:"\cq",d:misc2,s:ArmorString1,
                s:"\cq+",d:misc3,s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Balrog's Ring [Flora only]
  if (MiscellaneousVars[55] == 15)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("BalrogRing") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     SetFont("ARMMI0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 199.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Balrog's Ring"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+2% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+1 Balance\n",
                s:"\cd-(5 + 5%) Mana Cost\n",
                s:"\cd+15% Max HP Gained From Max HP Bonuses/Seeds of Life\n",
                s:"\cd+15% Fire-Elemental Resistance\n",
                s:"\cd+22.5% Ice-Elemental Resistance\n",
                s:"\cd+25% Area-Of-Effect Resistance\n",
                s:"\cd+25% HP Regen Speed\n",
                s:"\cd-12.5% HP Degen Speed (only if above 100% Maximum HP)\n",
                s:"\cd+25% Maximum Mana Regeneration Rate\n",
                s:"\cd-8.5% Hellcore Heating Speed\n",
                s:"\cd+1.25% Jump Strength\n",
                s:"\cd+0.5% Chance to Completely Evade an Attack\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  // Checks the Armor Info of the Dove's Ribbon [Flora only]
  if (MiscellaneousVars[55] == 16)
  {
   if (CharacterClass != 2) MiscellaneousVars[55] += 1;
   else
   {
    if (CheckInventory("DoveRibbon") > 0)
    {
     if (CheckInventory("DivineShield") > 0) ArmorString1 = "\cq+7% Damage Reduced by '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability.\n";
                                        else ArmorString1 = "\ck(?)\n";

     if (CheckInventory("DivineShield") > 0) ArmorString2 = "\cq+2% Chance for '\cnDivine Shield's\cq' '\cuOmniblock\cq' ability to activate.\n";
                                        else ArmorString2 = "\ck(?)\n";
     
     misc4 = (PlayerLevel / 50) + 1;

     SetFont("ARMMJ0");
     HudMessage(s:"A"; HUDMSG_PLAIN, 3103, 0, 192.0, 30.0, 0.03);
     SetFont("SmallFont");
     HudMessage(s:"Dove's Ribbon"; HUDMSG_PLAIN, 3102, CR_LIGHTBLUE, 256.0, 31.0, 0.03);

     HudMessage(s:"\cd+9% Armor Class\n",
                s:"\cd+9 Max Level Cap\n",
                s:"\cd+5% Stamina Regeneration\n",
                s:"\cd+2 Balance\n",
                s:"\cd+15% Survival Chance\n",
                s:"\cd+6.25% Magic Resistance\n",
                s:"\cd+1.25% Fire-Elemental Resistance\n",
                s:"\cd+6.25% Ice-Elemental Resistance\n",
                s:"\cd+15% Thunder-Elemental Resistance\n",
                s:"\cd+15% Movement Speed\n",
                s:"\cd+20% Magic Damage\n",
                s:"\cd+2 to 4 Mana Regeneration Rate\n",
                s:"\cd+",d:misc4,s:" HP Regeneration per Second, Up to 200% Maximum HP\n",
                s:"\cdHP will no longer Degenerate when above 100% Maximum HP\n",
                s:"\cd-5.5% Hellcore Heating Speed\n",
                s:"\cd+5% Jump Strength\n",
                s:"\cd+1.75% Chance to Completely Evade an Attack\n",
                s:"\cqDamage Suffered from Hellcore-Overheat Cut by 50%\n",
                s:"\cdIncreases Maximum Evasion Chance from 75% to 92.5%\n",
                s:ArmorString1,
                s:ArmorString2,
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n",
                s:" \n";
                HUDMSG_PLAIN, 3101, CR_WHITE, 256.4, 212.0, 0.03);

    }
    else MiscellaneousVars[55] += 1;
   }
  }

  if (MiscellaneousVars[55] > 16) MiscellaneousVars[55] = 0; // Void Page
 }

 Delay(1);
 Restart;
}

script 988 Enter
{
 If(GetCVar("dvds_actorlifebars") == 1) ACS_ExecuteAlways (986, 0, 0, 0, 0);
}

str dvds_monsternames[94][2] =
{
  // Zombieman Family [10]
  {"DSZombieman", "Zombieman"},
  {"DSStealthZombieman", "Zombieman?"},
  {"PlasmaGuy", "Plasma Dude"},
  {"StealthPlasmaGuy", "Plasma Dude?"},
  {"RepeaterZombie", "Repeater Guy"},
  {"StealthRepeaterZombie", "Repeater Guy?"},
  {"KarasawaGuy", "'Sawa Man"},
  {"StealthKarasawaGuy", "'Sawa Man?"},
  {"RocketLauncherGuy", "Rocketeer Zombie"},
  {"StealthRocketLauncherGuy", "Rocketeer Zombie?"},

  // Shotgun Guy Family [4]
  {"DSShotgunGuy", "Shotgun Guy"},
  {"DSStealthShotgunGuy", "Shotgun Guy?"},
  {"SuperShotgunGuy", "SuperShotgun Guy"},
  {"StealthSuperShotgunGuy", "SuperShotgun Guy?"},

  // Chaingun Guy Family [4]
  {"DSChaingunGuy", "Chaingun Guy"},
  {"DSStealthChaingunGuy", "Chaingun Guy?"},
  {"BFGGuy", "BFG Commando"},
  {"StealthBFGGuy", "BFG Commando?"},

  // Imp Family [4]
  {"DSDoomImp", "Imp"},
  {"DSStealthDoomImp", "Imp?"},
  {"DarkImp", "Dark Imp"},
  {"StealthDarkImp", "Dark Imp?"},

  // Pinky Family [6]
  {"DSDemon", "Pinky Demon"},
  {"DSSpectre", "Pinky Spectre"},
  {"DSStealthDemon", "Pinky Demon?"},
  {"BloodDemon", "Blood Pinky"},
  {"BloodSpectre", "Blood Spectre"},
  {"StealthBloodDemon", "Blood Pinky?"},

  // Wolf SS [1]
  {"DSWolfensteinSS", "SS Nazi"},

  // Lost Soul [1]
  {"DSLostSoul", "Lost Soul"},

  // Pain Elemental [1]
  {"DSPainElemental", "Pain Elemental"},

  // Cacodemons [6]
  {"DSCacoDemon", "Cacodemon"},
  {"DSStealthCacoDemon", "Cacodemon?"},
  {"Cacolantern", "Cacolantern"},
  {"StealthCacolantern", "Cacolantern?"},
  {"Abaddon", "Abaddon"},
  {"StealthAbaddon", "Abaddon?"},

  // Hell Nobles [12]
  {"DSHellKnight", "Hell Knight"},
  {"DSStealthHellKnight", "Hell Knight?"},
  {"DSBaronofHell", "Baron of Hell"},
  {"DSStealthBaron", "Baron of Hell?"}, 
  {"Belphegor", "Belphegor"},
  {"StealthBelphegor", "Belphegor?"},
  {"BruiserDemon", "Bruiser Demon"},
  {"StealthBruiserDemon", "Bruiser Demon?"},
  {"ArchonofHell", "Archon of Hell"},
  {"StealthArchonofHell", "Archon of Hell?"},
  {"PyroDemon", "Pyro Demon"},
  {"StealthPyroDemon", "Pyro Demon?"},

  // Revenants [4]
  {"DSRevenant", "Revenant"},
  {"DSStealthRevenant", "Revenant?"},
  {"DeathIncarnate", "Death Incarnate"},
  {"StealthDeathIncarnate", "Death Incarnate?"},

  // Mancubi [4]
  {"DSFatso", "Mancubus"},
  {"DSStealthFatso", "Mancubus?"},
  {"Hectebus", "Hectebus"},
  {"StealthHectebus", "Hectebus?"},

  // Arachnotrons [6]
  {"DSArachnotron", "Arachnotron"},
  {"DSStealthArachnotron", "Arachnotron?"}, 
  {"DSRailArachnotron", "Arachnotron"},
  {"StealthRailArachnotron", "Arachnotron?"},
  {"FusionArachnotron", "Fusion Arachnotron"},
  {"StealthFusionArachnotron", "Fusion Arachnotron?"},

  // Archviles [4]
  {"DSArchvile", "Arch Vile"},
  {"DSStealthArchvile", "Arch Vile?"},
  {"Diabloist", "Diabloist"},
  {"StealthDiabloist", "Diabloist?"},

  // SpiderDemons [4]
  {"DSSpiderMastermind", "Spider Mastermind"},
  {"DSStealthSpiderMastermind", "Spider Mastermind?"},
  {"Demolisher", "Spider-Demolisher"},
  {"StealthDemolisher", "Spider-Demolisher?"},

  // Cyberdemons [4]
  {"DSCyberdemon", "Cyber Demon"},
  {"DSStealthCyberdemon", "Cyber Demon?"},
  {"Annihilator", "Cyber-Annhilator"},
  {"StealthAnnihilator", "Cyber-Annhilator?"},

  // Ally Marine [1]
  {"DSScriptedMarine", "UAC Marine Buddy"},

  // Sauron's Eyes [4]
  {"SauronEyeWeak", "Lesser Sauron Eye"},
  {"SauronEyeStrong1", "Greater Sauron Eye"},
  {"SauronEyeStrong2", "Greater Sauron Eye"},
  {"SauronEyeMain", "Sauron's Mightiest Eye"},

  // Sauravatar [1]
  {"Sauravatar", "Greater Sauravatar"},

  // Hades Spheres [4]
  {"HadesSphere", "Hades Sphere"},
  {"StealthHadesSphere", "Hades Sphere?"},
  {"HSOverlord", "Hades Sphere"},
  {"StealthHSOverlord", "Hades Sphere?"},

  // Flying Balrog [3]
  {"WeakenedFlyingBalrog", "Flying Balrog"},
  {"FlyingBalrog", "Flying Balrog"},
  {"StealthFlyingBalrog", "Flying Balrog?"},

  // Hell Cleric [2]
  {"HellCleric", "Hell Cleric"},
  {"StealthHellCleric", "Hell Cleric?"},

  // Hades Elemental [2]
  {"HadesElemental", "Hades Elemental"},
  {"StealthHadesElemental", "Hades Elemental?"},

  // Hades Overlord [2]
  {"HadesOverlord", "Hades Overlord"},
  {"StealthHadesOverlord", "Hades Overlord?"},

};

Script 986 (void) CLIENTSIDE
{
 While(GetCVar("dvds_actorlifebars") == 1 && GetActorProperty(1001,APROP_Health) > 0)
 {
  int activator;
  activator = ActivatorTid();
  SetActivatorToTarget(0);
  Delay(1);

  int class_index;

  for (int i=0; i<94; i++)
  {
   if (CheckActorClass(0, dvds_monsternames[i][0])) class_index = i;
  }

  int hpcritlevel = 2;
  if (GameSkill() == SKILL_VERY_EASY) hpcritlevel = 1; // 1.0%
  if (GameSkill() == SKILL_EASY) hpcritlevel = 1; // 1.5%
  if (GameSkill() == SKILL_NORMAL) hpcritlevel = 2; // 2.0%
  if (GameSkill() == SKILL_HARD) hpcritlevel = 2; // 2.5%
  if (GameSkill() == SKILL_VERY_HARD) hpcritlevel = 3; // 3.0%
  if (GameSkill() == 5) hpcritlevel = 4; // 4.0%

  int hplowlevel = 16;
  if (GameSkill() == SKILL_VERY_EASY) hplowlevel = 8; // 8.0%
  if (GameSkill() == SKILL_EASY) hplowlevel = 12; // 12.0%
  if (GameSkill() == SKILL_NORMAL) hplowlevel = 16; // 16.0%
  if (GameSkill() == SKILL_HARD) hplowlevel = 20; // 20.0%
  if (GameSkill() == SKILL_VERY_HARD) hplowlevel = 24; // 24.0%
  if (GameSkill() == 5) hplowlevel = 32; // 32.0%

  int actormaxhp = GetUserVariable(0, "user_MaxHP");
  int actorcurrhp = GetActorProperty(0, APROP_Health);
  int hppercentdisp;
  If(ActivatorTID() != Activator)
  {
   SetActivator(Activator);

   If (actormaxhp > 0)
   {
    hppercentdisp = (actorcurrhp * 100 / actormaxhp);

    int acounter;
    int bcounter;
    SetActivatorToTarget(0);
    If(ActivatorTID() != Activator)
    {
     If (CheckActorProperty(0, APROP_Friendly, 0)) SetFont ("MNRHPBAR");
     else If (CheckActorProperty(0, APROP_Friendly, 1)) SetFont ("MNGHPBAR");

     SetActivator(Activator);
     SetHudSize (800,600,0);
     HudMessage (s:"a"; 0, 4001, CR_GREEN, 400.0, 100.0, 0.05);
     SetFont ("SMALLFONT");
     SetHudSize (800,600,0);
     if (GetCVar("dvds_actorlifebarstats") == 1) HudMessage (i:actorcurrhp, s:"/", i:actormaxhp; 0, 3999, CR_WHITE, 400.0, 100.0, 0.05);
     if (GetCVar("dvds_actorlifebarnames") == 1) HudMessage (s:dvds_monsternames[class_index][1]; 0, 3998, CR_WHITE, 400.0, 115.0, 0.05);

     for (acounter = 0; acounter <= hppercentdisp; acounter++)
     {
      bcounter = bcounter + 2.0;
      SetActivatorToTarget(0);

      if (hppercentdisp > 50) SetFont ("FILLNORM");
      else if (hppercentdisp > hplowlevel && hppercentdisp <= 50 ) SetFont ("FILLCAUT");
      else if (hppercentdisp > hpcritlevel && hppercentdisp <= hplowlevel ) SetFont ("FILLDANG");
      else if (hppercentdisp <= hpcritlevel ) SetFont ("FILLCRIT");

      SetActivator(Activator);
      SetHudSize (800,600,0);

      If(actorcurrhp > 0) hudmessage(s:"a"; 0, acounter+4002, CR_GREEN, 303.0 + bcounter, 100.0, 0.05);
     }
     bcounter = 0;
     acounter = 0;
     Restart;
    }
   }
  }
 }
 If(GetCVar("dvds_actorlifebars") == 1 && GetActorProperty(0,APROP_Health) > 0) Restart;
}

// Scripts for Footsteps

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// The credits go to Ryan Cordell for posting this as a resource <3
// He also credits
// "Credit goes to SolarSnowfall for the base, HotWax for optimization 
// on the script, Isle for further optimization, Kate for even further 
// optimization"
//------------------------------------------------------------------------

// #library "FOOTSTEP"
// #include "zcommon.acs"

#define V_OFFSET	20

// global int 44:stepping;

int feet[8];		//footsteps on or off?
int v[8];			//velocity per player
int x;
int y;
int z;

FUNCTION int GetVelocity (void)
{
   int len;
   x = GetActorVelX(0);
   y = GetActorVelY(0);
//   z = GetActorVelZ(0);

   int ang = vectorangle(x,y);
   if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
   else len = fixeddiv(x, cos(ang));

/*
   ang = vectorangle(len, z);
   if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
   else len = fixeddiv(len, cos(ang));
*/

   return len;
}

SCRIPT 614 ENTER
{
   feet[PlayerNumber ()] = ON;
   ACS_ExecuteAlways (610, 0);
   ACS_ExecuteAlways (616, 0);
   ACS_ExecuteAlways (617, 0);
}

SCRIPT 615 RESPAWN
{
   feet[PlayerNumber ()] = ON;
   ACS_ExecuteAlways (610, 0);
   ACS_ExecuteAlways (616, 0);
   ACS_ExecuteAlways (617, 0);
}

//This is the script that tracks the player's velocity.

SCRIPT 616 (VOID)
{
   int p_num = PlayerNumber ();
   stepping = 1;

   while (feet[p_num])
   {
      delay(1);

      v[p_num] = GetVelocity ()>>16;
   }
}

//=====================
// Do the floor maths.
//=====================

#DEFINE NUMFLOORTYPES 16

str FloorSound[NUMFLOORTYPES][250];

SCRIPT 617 (VOID)
{
   int i, counter;
   int delay_time = 2;
   int volume;
   stepping = 1;

   while (feet[PlayerNumber ()])
   {
      delay_time = V_OFFSET -(3) - v[PlayerNumber ()]/2;
	if(delay_time<=0)
		delay_time=1;
      volume = (v[PlayerNumber ()] * 7);

      if (GetActorZ (0) == GetActorFloorZ (0))
      {
         // Loop through the different floor types
         for (i=0; i<NUMFLOORTYPES; i++) 
         {
            counter = 1;

            // Check through all the listed textures for this floor type
            while (counter < 250 && FloorSound[i][counter] != -1) {
               if (CheckActorFloorTexture(0, FloorSound[i][counter]))
               {
                  ActivatorSound (FloorSound[i][0], volume);

                  // No reason to keep looking
                  counter = 250;
               }
               counter++;
            }
         }
      }
      delay(delay_time+1);
   }
}

SCRIPT 610 OPEN
{
   // Initialize the array of floor sounds

   FloorSound[0][0] = "floor/tile";
   FloorSound[0][1] = "CEIL1_3";
   FloorSound[0][2] = "CEIL3_3";
   FloorSound[0][3] = "CEIL3_4";
   FloorSound[0][4] = "CONS1_1";
   FloorSound[0][5] = "CONS1_5";
   FloorSound[0][6] = "CONS1_7";
   FloorSound[0][7] = "COMP01";
   FloorSound[0][8] = "FLAT2";
   FloorSound[0][9] = "FLAT3";
   FloorSound[0][10] = "FLAT8";
   FloorSound[0][11] = "FLAT9";
   FloorSound[0][12] = "FLAT17";
   FloorSound[0][13] = "FLAT18";
   FloorSound[0][14] = "FLAT19";
   FloorSound[0][15] = "FLOOR0_5";
   FloorSound[0][16] = "FLOOR0_6";
   FloorSound[0][17] = "FLOOR0_7";
   FloorSound[0][18] = "FLOOR3_3";
   FloorSound[0][19] = "FLOOR4_1";
   FloorSound[0][20] = "FLOOR4_5";
   FloorSound[0][21] = "TLITE6_1";
   FloorSound[0][22] = "TLITE6_4";
   FloorSound[0][23] = "TLITE6_5";
   FloorSound[0][24] = "FLOOR5_1";
   FloorSound[0][25] = "FLOOR5_2";
   FloorSound[0][26] = "FLOOR5_3";
   FloorSound[0][27] = "FLOOR7_2";
   FloorSound[0][28] = "ADEL_F08"; //Check
   FloorSound[0][29] = "ADEL_F14"; //Check
   FloorSound[0][30] = "ADEL_F31"; //Check
   FloorSound[0][31] = "ADEL_F49"; //Check
   FloorSound[0][32] = "ADEL_F55"; //Check
   FloorSound[0][33] = "ADEL_F56"; //Check
   FloorSound[0][34] = "ADEL_F63"; //Check
   FloorSound[0][35] = "ADEL_J06"; //Check
   FloorSound[0][36] = "ADEL_J07"; //Check
   FloorSound[0][37] = "ADEL_J12"; //Check
   FloorSound[0][38] = "ADEL_J15"; //Check
   FloorSound[0][39] = "CFLOOR2"; //Check
   FloorSound[0][40] = "CFLOOR3"; //Check
   FloorSound[0][41] = "CFLOOR4"; //Check
   FloorSound[0][42] = "CITYF01"; //Check
   FloorSound[0][43] = "CITYF02"; //Check
   FloorSound[0][44] = "CITYF03"; //Check
   FloorSound[0][45] = "CITYF04"; //Check
   FloorSound[0][46] = "CITYF05"; //Check
   FloorSound[0][47] = "CITYF06"; //Check
   FloorSound[0][48] = "CITYF07"; //Check
   FloorSound[0][49] = "CITYF08"; //Check
   FloorSound[0][50] = "CITYF09"; //Check
   FloorSound[0][51] = "CITYF10"; //Check
   FloorSound[0][52] = "CITYF13"; //Check
   FloorSound[0][53] = "CITYF14"; //Check
   FloorSound[0][54] = "CITYF15"; //Check
   FloorSound[0][55] = "CITYF16"; //Check
   FloorSound[0][56] = "CITYF17"; //Check
   FloorSound[0][57] = "CITYF18"; //Check
   FloorSound[0][58] = "IKTCR05B"; //Check
   FloorSound[0][59] = "IKTCR05C"; //Check
   FloorSound[0][60] = "IKTKP11C"; //Check
   FloorSound[0][61] = "IKTKP18A"; //Check
   FloorSound[0][62] = "IKTKP18B"; //Check
   FloorSound[0][63] = "IKTKWL2B"; //Check
   FloorSound[0][64] = "NICK_A01"; //Check
   FloorSound[0][65] = "NICK_A07"; //Check
   FloorSound[0][66] = "NICK_A10"; //Check
   FloorSound[0][67] = "QFLAT02"; //Check
   FloorSound[0][68] = "QFLAT03"; //Check
   FloorSound[0][69] = "QFLAT04"; //Check
   FloorSound[0][70] = "QFLAT05"; //Check
   FloorSound[0][71] = "QFLAT06"; //Check
   FloorSound[0][72] = "QFLAT07"; //Check
   FloorSound[0][73] = "WALLF1"; //Check
   FloorSound[0][74] = "WALLF2"; //Check
   FloorSound[0][75] = "WALLF3"; //Check
   FloorSound[0][76] = "CONS1_3"; //Check
   FloorSound[0][77] = "GRNLITE1"; //Check
   FloorSound[0][78] = "NFBRGN01"; //Check
   FloorSound[0][79] = "NFBRKA03"; //Check
   FloorSound[0][80] = "NFCL31GN"; //Check
   FloorSound[0][81] = "NFCL31GR"; //Check
   FloorSound[0][82] = "NFCL32GN"; //Check
   FloorSound[0][83] = "NFCL32GR"; //Check
   FloorSound[0][84] = "NFCL33GN"; //Check
   FloorSound[0][85] = "NFCL33GR"; //Check
   FloorSound[0][86] = "NFCL41GN"; //Check
   FloorSound[0][87] = "NFCL41RD"; //Check
   FloorSound[0][88] = "NFCL42GN"; //Check
   FloorSound[0][89] = "NFCL42GR"; //Check
   FloorSound[0][90] = "NFCL42RD"; //Check
   FloorSound[0][91] = "NFCL43GN"; //Check
   FloorSound[0][92] = "NFCL43GR"; //Check
   FloorSound[0][93] = "NFCL52GN"; //Check
   FloorSound[0][94] = "NFCL52GR"; //Check
   FloorSound[0][95] = "NFCNS1_3"; //Check
   FloorSound[0][96] = "NFCSPN01"; //Check
   FloorSound[0][97] = "NFCSPN02"; //Check
   FloorSound[0][98] = "NFCSPN04"; //Check
   FloorSound[0][99] = "NFDM15BR"; //Check
   FloorSound[0][100] = "NFDM15GR"; //Check
   FloorSound[0][101] = "NFDM16BR"; //Check
   FloorSound[0][102] = "NFFL03GN"; //Check
   FloorSound[0][103] = "NFFL06BR"; //Check
   FloorSound[0][104] = "NFFL06GN"; //Check
   FloorSound[0][105] = "NFFL33GR"; //Check
   FloorSound[0][106] = "NFFL41GN"; //Check
   FloorSound[0][107] = "NFFL41GR"; //Check
   FloorSound[0][108] = "NFFL45GN"; //Check
   FloorSound[0][109] = "NFFL45GR"; //Check
   FloorSound[0][110] = "NFFL46GN"; //Check
   FloorSound[0][111] = "NFFL46GR"; //Check
   FloorSound[0][112] = "NFFL48B"; //Check
   FloorSound[0][113] = "NFFL52B"; //Check
   FloorSound[0][114] = "NFFL53B"; //Check
   FloorSound[0][115] = "NFFL54GN"; //Check
   FloorSound[0][116] = "NFFL54GR"; //Check
   FloorSound[0][117] = "NFFL54H"; //Check
   FloorSound[0][118] = "NFFL72GR"; //Check
   FloorSound[0][119] = "NFFT1BR"; //Check
   FloorSound[0][120] = "NFFT1GN"; //Check
   FloorSound[0][121] = "NFFT5GN"; //Check
   FloorSound[0][122] = "NFFT5GR"; //Check
   FloorSound[0][123] = "NFFT11GR"; //Check
   FloorSound[0][124] = "NFFT13GN"; //Check
   FloorSound[0][125] = "NFFT13GR"; //Check
   FloorSound[0][126] = "NFFT20BR"; //Check
   FloorSound[0][127] = "NFFT20GN"; //Check
   FloorSound[0][128] = "NFFT55GN"; //Check
   FloorSound[0][129] = "NFFT72BR"; //Check
   FloorSound[0][130] = "NFFT72GR"; //Check
   FloorSound[0][131] = "NFFT72RD"; //Check
   FloorSound[0][132] = "NFGCN1_1"; //Check
   FloorSound[0][133] = "NFGCN1_3"; //Check
   FloorSound[0][134] = "NFRR09GN"; //Check
   FloorSound[0][135] = "NFRR09GR"; //Check
   FloorSound[0][136] = "NFRR10GN"; //Check
   FloorSound[0][137] = "NFRR10GR"; //Check
   FloorSound[0][138] = "NFRR13BR"; //Check
   FloorSound[0][139] = "NFRR16GR"; //Check
   FloorSound[0][140] = "NFSL14GN"; //Check
   FloorSound[0][141] = "NFSL15GN"; //Check
   FloorSound[0][142] = "NFSPHT01"; //Check
   FloorSound[0][143] = "NFSTBN12"; //Check
   FloorSound[0][144] = "NFSTEP03"; //Check
   FloorSound[0][145] = "NFSTGN12"; //Check
   FloorSound[0][146] = "NFSTGY12"; //Check
   FloorSound[0][147] = "NFSTSK02"; //Check
   FloorSound[0][148] = "NFSTTN12"; //Check
   FloorSound[0][149] = "SLIME14"; //Check
   FloorSound[0][150] = "SLIME15"; //Check
   FloorSound[0][151] = "SLIME16"; //Check
   FloorSound[0][152] = "FLOOR0_1"; //Check - Doom (Pre-D2)
   FloorSound[0][153] = "FLOOR0_3"; //Check - Doom (Pre-D2)
   FloorSound[0][154] = "FLOOR0_6"; //Check - Doom (Pre-D2)
   FloorSound[0][155] = "FLOOR1_1"; //Check - Doom (Pre-D2)
   FloorSound[0][156] = "FLOOR1_7"; //Check - Doom (Pre-D2)
   FloorSound[0][157] = "FLOOR4_6"; //Check - Doom (Pre-D2)
   FloorSound[0][158] = "FLOOR4_8"; //Check - Doom (Pre-D2)
   FloorSound[0][159] = "RROCK25"; //Check - DVI Tile
   FloorSound[0][160] = "RROCK26"; //Check - DVI Tile
   FloorSound[0][161] = "RROCK28"; //Check - DVI Tile
   FloorSound[0][162] = "RROCK30"; //Check - DVI Tile
   FloorSound[0][163] = "RROCK31"; //Check - DVI Tile
   FloorSound[0][164] = "RROCK32"; //Check - DVI Tile
   FloorSound[0][165] = "RROCK33"; //Check - DVI Tile
   FloorSound[0][166] = "RROCK36"; //Check - DVI Tile
   FloorSound[0][167] = "AVFLAT10"; //Check - DVI Tile
   FloorSound[0][168] = "AVFLAT25"; //Check - DVI Tile
   FloorSound[0][169] = "AVFLAT26"; //Check - DVI Tile
   FloorSound[0][170] = "AVFLAT33"; //Check - DVI Tile
   FloorSound[0][171] = "R_01"; //Check - DVII Tile
   FloorSound[0][172] = "R_01A"; //Check - DVII Tile
   FloorSound[0][173] = "R_01D"; //Check - DVII Tile
   FloorSound[0][174] = "R_01G"; //Check - DVII Tile
   FloorSound[0][175] = "TILE_00"; //Check - DVII Tile
   FloorSound[0][176] = "TILE_01"; //Check - DVII Tile
   FloorSound[0][177] = "TILE_01B"; //Check - DVII Tile
   FloorSound[0][178] = "TILE_02"; //Check - DVII Tile
   FloorSound[0][179] = "TILE_03"; //Check - DVII Tile
   FloorSound[0][180] = "TILE_04"; //Check - DVII Tile
   FloorSound[0][181] = "TILE_05"; //Check - DVII Tile
   FloorSound[0][182] = "TILE_06"; //Check - DVII Tile
   FloorSound[0][183] = "TILE_07"; //Check - DVII Tile
   FloorSound[0][184] = "TILE_08"; //Check - DVII Tile
   FloorSound[0][185] = "TILE_09"; //Check - DVII Tile
   FloorSound[0][186] = "TILE_10"; //Check - DVII Tile
   FloorSound[0][187] = "TILE_11"; //Check - DVII Tile
   FloorSound[0][188] = "TILE_12"; //Check - DVII Tile
   FloorSound[0][189] = "TILE_12A"; //Check - DVII Tile
   FloorSound[0][190] = "TILE_13"; //Check - DVII Tile
   FloorSound[0][191] = "TILE_14"; //Check - DVII Tile
   FloorSound[0][192] = "TILE_15"; //Check - DVII Tile
   FloorSound[0][193] = "TILE_15B"; //Check - DVII Tile
   FloorSound[0][194] = "TILE_18"; //Check - DVII Tile
   FloorSound[0][195] = "TILE_19"; //Check - DVII Tile
   FloorSound[0][195] = "BRK_19"; //Check - DVII Tile
   FloorSound[0][196] = "BRK_21"; //Check - DVII Tile
   FloorSound[0][197] = "BRK_22"; //Check - DVII Tile
   FloorSound[0][198] = "GREEN_C1"; //Check - DVII Tile
   FloorSound[0][199] = "GREEN_C2"; //Check - DVII Tile
   FloorSound[0][200] = "RY_05"; //Check - DVII Tile
   FloorSound[0][201] = "HEXTILE1"; //Check - DVII Tile
   FloorSound[0][202] = "X14TUA1"; //Check - DVII Tile
   FloorSound[0][203] = "X14TUA2"; //Check - DVII Tile
   FloorSound[0][204] = "X14TUB2"; //Check - DVII Tile
   FloorSound[0][205] = "X14TUC1"; //Check - DVII Tile
   FloorSound[0][206] = "X14WA1"; //Check - DVII Tile
   FloorSound[0][207] = "X14WA2"; //Check - DVII Tile
   FloorSound[0][208] = "X14WB1"; //Check - DVII Tile
   FloorSound[0][209] = "X14WB2"; //Check - DVII Tile
   FloorSound[0][210] = "X14XA1"; //Check - DVII Tile
   FloorSound[0][211] = "X14XA2"; //Check - DVII Tile
   FloorSound[0][212] = "X14XB1"; //Check - DVII Tile
   FloorSound[0][213] = "X14XB2"; //Check - DVII Tile
   FloorSound[0][214] = "X14WA1"; //Check - DVII Tile
   FloorSound[0][215] = "X14WA2"; //Check - DVII Tile
   FloorSound[0][216] = "X14WB1"; //Check - DVII Tile
   FloorSound[0][217] = "X25T1A"; //Check - DVII Tile
   FloorSound[0][218] = "X25T1B"; //Check - DVII Tile
   FloorSound[0][219] = "X25T1C"; //Check - DVII Tile
   FloorSound[0][220] = "X25T2A"; //Check - DVII Tile
   FloorSound[0][221] = "X25T2B"; //Check - DVII Tile
   FloorSound[0][222] = "X25T2C"; //Check - DVII Tile
   FloorSound[0][223] = "TF_01"; //Check - DVII Tile
   FloorSound[0][224] = "TF_02"; //Check - DVII Tile
   FloorSound[0][225] = -1;

   FloorSound[1][0] = "floor/tile2";
   FloorSound[1][1] = "DEM1_1";
   FloorSound[1][2] = "DEM1_2";
   FloorSound[1][3] = "DEM1_3";
   FloorSound[1][4] = "DEM1_4";
   FloorSound[1][5] = "DEM1_5";
   FloorSound[1][6] = "DEM1_6";
   FloorSound[1][7] = "FLOOR4_6";
   FloorSound[1][8] = "FLOOR4_8";
   FloorSound[1][9] = "ADEL_F65"; //Check
   FloorSound[1][10] = "ADEL_F66"; //Check
   FloorSound[1][11] = "ADEL_F84"; //Check
   FloorSound[1][12] = "ADEL_J08"; //Check
   FloorSound[1][13] = "ADEL_J09"; //Check
   FloorSound[1][14] = "ADEL_J10"; //Check
   FloorSound[1][15] = "ADEL_J11"; //Check
   FloorSound[1][16] = "CFLOOR1"; //Check
   FloorSound[1][17] = "COLMF3"; //Check
   FloorSound[1][18] = "Q2FLAT05"; //Check
   FloorSound[1][19] = "Q2FLAT06"; //Check
   FloorSound[1][20] = "Q2FLAT07"; //Check
   FloorSound[1][21] = "Q2FLAT08"; //Check
   FloorSound[1][22] = "LITE7"; //Check
   FloorSound[1][23] = "NFLTB04H"; //Check
   FloorSound[1][24] = "NFLTB04V"; //Check
   FloorSound[1][25] = "NFLTW03H"; //Check
   FloorSound[1][26] = "NFLTW03V"; //Check
   FloorSound[1][27] = "NFLTW05H"; //Check
   FloorSound[1][28] = "NFLTW05V"; //Check
   FloorSound[1][29] = "MISC_01"; //Check
   FloorSound[1][30] = -1;

   FloorSound[2][0] = "floor/wood";
   FloorSound[2][1] = "CEIL1_1";
   FloorSound[2][2] = "CRATOP1";
   FloorSound[2][3] = "CRATOP2";
   FloorSound[2][4] = "FLAT5_1";
   FloorSound[2][5] = "FLAT5_2";
   FloorSound[2][6] = "ADEL_F12"; //Check
   FloorSound[2][7] = "ADEL_F13"; //Check
   FloorSound[2][8] = "ADEL_F54"; //Check
   FloorSound[2][9] = "ADEL_F67"; //Check
   FloorSound[2][10] = "ADEL_F68"; //Check
   FloorSound[2][11] = "ADEL_F71"; //Check
   FloorSound[2][12] = "ADEL_F72"; //Check
   FloorSound[2][13] = "ADEL_J18"; //Check
   FloorSound[2][14] = "ADEL_J19"; //Check
   FloorSound[2][15] = "DUNGF1"; //Check
   FloorSound[2][16] = "DUNGF2"; //Check
   FloorSound[2][17] = "DUNGF3"; //Check
   FloorSound[2][18] = "DUNGF4"; //Check
   FloorSound[2][19] = "FTUB1"; //Check
   FloorSound[2][20] = "FTUB2"; //Check
   FloorSound[2][21] = "FTUB3"; //Check
   FloorSound[2][22] = "NFWOOD"; //Check
   FloorSound[2][23] = "NICK_A02"; //Check
   FloorSound[2][24] = "NICK_A03"; //Check
   FloorSound[2][25] = "NICK_A06"; //Check
   FloorSound[2][26] = "NICK_A08"; //Check
   FloorSound[2][27] = "NICK_A09"; //Check
   FloorSound[2][28] = "OLA_F_01"; //Check
   FloorSound[2][29] = "OLA_F_02"; //Check
   FloorSound[2][30] = "SWITCH1"; //Check
   FloorSound[2][31] = "SWITCH2"; //Check
   FloorSound[2][32] = "SWITCH3"; //Check
   FloorSound[2][32] = "SWITCH4"; //Check
   FloorSound[2][34] = "WOODF1"; //Check
   FloorSound[2][35] = "WOODF2"; //Check
   FloorSound[2][36] = "WOODF3"; //Check
   FloorSound[2][37] = "WOODF4"; //Check
   FloorSound[2][38] = "WOODF5"; //Check
   FloorSound[2][39] = "WOODF6"; //Check
   FloorSound[2][40] = "WOODF7"; //Check
   FloorSound[2][41] = "WOODF8"; //Check
   FloorSound[2][42] = "NFPANL01"; //Check
   FloorSound[2][43] = "FLAT6"; //Check - DVI Texture
   FloorSound[2][44] = "FLAT7"; //Check - DVI Texture
   FloorSound[2][45] = "AVFLAT22"; //Check - DVI Tile
   FloorSound[2][46] = "AVFLAT37"; //Check - DVI Tile
   FloorSound[2][47] = "AVFLAT38"; //Check - DVI Tile
   FloorSound[2][48] = "WD_00A"; //Check - DVII Tile
   FloorSound[2][49] = "WD_00D"; //Check - DVII Tile
   FloorSound[2][50] = "WD_00F"; //Check - DVII Tile
   FloorSound[2][51] = "WD_00H"; //Check - DVII Tile
   FloorSound[2][52] = "WD_01"; //Check - DVII Tile
   FloorSound[2][53] = "WD_02"; //Check - DVII Tile
   FloorSound[2][54] = "WD_03"; //Check - DVII Tile
   FloorSound[2][55] = "WD_04"; //Check - DVII Tile
   FloorSound[2][56] = "WD_05"; //Check - DVII Tile
   FloorSound[2][57] = "WD_06"; //Check - DVII Tile
   FloorSound[2][58] = "WD_08"; //Check - DVII Tile
   FloorSound[2][59] = "WD_09"; //Check - DVII Tile
   FloorSound[2][60] = "WD_10"; //Check - DVII Tile
   FloorSound[2][61] = "WD_11"; //Check - DVII Tile
   FloorSound[2][62] = "WD_12"; //Check - DVII Tile
   FloorSound[2][63] = "WD_13"; //Check - DVII Tile
   FloorSound[2][64] = "WD_13J"; //Check - DVII Tile
   FloorSound[2][65] = "WD_13L"; //Check - DVII Tile
   FloorSound[2][66] = "WD_13P"; //Check - DVII Tile
   FloorSound[2][67] = "WD_13T"; //Check - DVII Tile
   FloorSound[2][68] = "WD_14"; //Check - DVII Tile
   FloorSound[2][69] = "WD_15"; //Check - DVII Tile
   FloorSound[2][70] = "WD_16"; //Check - DVII Tile
   FloorSound[2][71] = "WD_17"; //Check - DVII Tile
   FloorSound[2][72] = "WD_18"; //Check - DVII Tile
   FloorSound[2][73] = "WD_19"; //Check - DVII Tile
   FloorSound[2][74] = "WD_20"; //Check - DVII Tile
   FloorSound[2][75] = "WD_21"; //Check - DVII Tile
   FloorSound[2][76] = "CRT_01"; //Check
   FloorSound[2][77] = "CRT_01C"; //Check
   FloorSound[2][78] = "CRATOP3"; //Check
   FloorSound[2][79] = "WD01A"; //Check - DVII Tile
   FloorSound[2][80] = "WD01B"; //Check - DVII Tile
   FloorSound[2][81] = "WD01C"; //Check - DVII Tile

   FloorSound[2][82] = "WD01D"; //Check - DVII Tile
   FloorSound[2][83] = "WD02A"; //Check - DVII Tile
   FloorSound[2][84] = "WD02B"; //Check - DVII Tile
   FloorSound[2][85] = "WD02C"; //Check - DVII Tile
   FloorSound[2][86] = "WD02D"; //Check - DVII Tile
   FloorSound[2][87] = "WD03A"; //Check - DVII Tile
   FloorSound[2][88] = "WD03B"; //Check - DVII Tile
   FloorSound[2][89] = "WD04A"; //Check - DVII Tile
   FloorSound[2][90] = "WD04B"; //Check - DVII Tile
   FloorSound[2][91] = "WD05A"; //Check - DVII Tile
   FloorSound[2][92] = "WD06A"; //Check - DVII Tile
   FloorSound[2][93] = -1;

   // Hard Floors, First Section ---FULL, NO MORE ADDING TO THIS---
   FloorSound[3][0] = "floor/hard";
   FloorSound[3][1] = "CEIL3_1";
   FloorSound[3][2] = "CEIL3_2";
   FloorSound[3][3] = "CEIL3_5";
   FloorSound[3][4] = "CEIL3_6";
   FloorSound[3][5] = "CEIL5_1";
   FloorSound[3][6] = "CEIL5_2";
   FloorSound[3][7] = "FLAT5";
   FloorSound[3][8] = "FLOOR0_1";
   FloorSound[3][9] = "FLOOR0_2";
   FloorSound[3][10] = "FLOOR0_3";
   FloorSound[3][11] = "FLOOR1_6";
   FloorSound[3][12] = "FLOOR1_7";
   FloorSound[3][13] = "FLOOR7_1";
   FloorSound[3][14] = "GRNLITE1";
   FloorSound[3][15] = "MFLR8_1";
   FloorSound[3][16] = "ADEL_F62"; //Check
   FloorSound[3][17] = "ALTARF1"; //Check
   FloorSound[3][18] = "ALTARF2"; //Check
   FloorSound[3][19] = "M5"; //Check
   FloorSound[3][20] = "QFLAT01"; //Check
   FloorSound[3][21] = "NFGSTN01"; //Check
   FloorSound[3][22] = "NFPANL02"; //Check
   FloorSound[3][23] = "RROCK34"; //Check - DVI Tile
   FloorSound[3][24] = "AVFLAT01"; //Check - DVI Tile
   FloorSound[3][25] = "AVFLAT02"; //Check - DVI Tile
   FloorSound[3][26] = "AVFLAT04"; //Check - DVI Tile
   FloorSound[3][27] = "AVFLAT05"; //Check - DVI Tile
   FloorSound[3][28] = "AVFLAT07"; //Check - DVI Tile
   FloorSound[3][29] = "AVFLAT08"; //Check - DVI Tile
   FloorSound[3][30] = "AVFLAT09"; //Check - DVI Tile
   FloorSound[3][31] = "AVFLAT13"; //Check - DVI Tile
   FloorSound[3][32] = "AVFLAT14"; //Check - DVI Tile
   FloorSound[3][33] = "AVFLAT15"; //Check - DVI Tile
   FloorSound[3][34] = "AVFLAT17"; //Check - DVI Tile
   FloorSound[3][35] = "AVFLAT18"; //Check - DVI Tile
   FloorSound[3][36] = "AVFLAT19"; //Check - DVI Tile
   FloorSound[3][37] = "AVFLAT27"; //Check - DVI Tile
   FloorSound[3][38] = "AVFLAT29"; //Check - DVI Tile
   FloorSound[3][39] = "AVFLAT31"; //Check - DVI Tile
   FloorSound[3][40] = "AVFLAT32"; //Check - DVI Tile
   FloorSound[3][41] = "AVFLAT34"; //Check - DVI Tile
   FloorSound[3][42] = "BLU"; //Check - DVI Tile
   FloorSound[3][43] = "BLU_01"; //Check - DVII Tile
   FloorSound[3][44] = "BLU_02"; //Check - DVII Tile
   FloorSound[3][45] = "BLU_03"; //Check - DVII Tile
   FloorSound[3][46] = "BLU_05"; //Check - DVII Tile
   FloorSound[3][47] = "BLU_06"; //Check - DVII Tile
   FloorSound[3][48] = "BRK_01"; //Check - DVII Tile
   FloorSound[3][49] = "BRK_02"; //Check - DVII Tile
   FloorSound[3][50] = "BRK_04"; //Check - DVII Tile
   FloorSound[3][51] = "BRK_05"; //Check - DVII Tile
   FloorSound[3][52] = "BRK_5B"; //Check - DVII Tile
   FloorSound[3][53] = "BRK_06"; //Check - DVII Tile
   FloorSound[3][54] = "BRK_07"; //Check - DVII Tile
   FloorSound[3][55] = "BRK_7B"; //Check - DVII Tile
   FloorSound[3][56] = "BRK_08"; //Check - DVII Tile
   FloorSound[3][57] = "BRK_09"; //Check - DVII Tile
   FloorSound[3][58] = "BRK_10"; //Check - DVII Tile
   FloorSound[3][59] = "BRK_10B"; //Check - DVII Tile
   FloorSound[3][60] = "BRK_12"; //Check - DVII Tile
   FloorSound[3][61] = "BRK_12B"; //Check - DVII Tile
   FloorSound[3][62] = "BRK_13"; //Check - DVII Tile
   FloorSound[3][63] = "BRK_13B"; //Check - DVII Tile
   FloorSound[3][64] = "BRK_14"; //Check - DVII Tile
   FloorSound[3][65] = "BRK_14B"; //Check - DVII Tile
   FloorSound[3][66] = "BRK_15"; //Check - DVII Tile
   FloorSound[3][67] = "BRK_15B"; //Check - DVII Tile
   FloorSound[3][68] = "BRK_16"; //Check - DVII Tile
   FloorSound[3][69] = "BRK_16B"; //Check - DVII Tile
   FloorSound[3][70] = "BRK_16E"; //Check - DVII Tile
   FloorSound[3][71] = "BRK_16F"; //Check - DVII Tile
   FloorSound[3][72] = "PINK_02"; //Check - DVII Tile
   FloorSound[3][73] = "PINK_03"; //Check - DVII Tile
   FloorSound[3][74] = "R_03"; //Check - DVII Tile
   FloorSound[3][75] = "R_05"; //Check - DVII Tile
   FloorSound[3][76] = "R_06"; //Check - DVII Tile
   FloorSound[3][77] = "BRK_17"; //Check - DVII Tile
   FloorSound[3][78] = "CEMENT0"; //Check - DVII Tile
   FloorSound[3][79] = "CRK_02"; //Check - DVII Tile
   FloorSound[3][80] = "BLU_09"; //Check - DVII Tile
   FloorSound[3][81] = "R_09"; //Check - DVII Tile
   FloorSound[3][82] = "R_10"; //Check - DVII Tile
   FloorSound[3][83] = "R_15"; //Check - DVII Tile
   FloorSound[3][84] = "R_11"; //Check - DVII Tile
   FloorSound[3][85] = "R_13"; //Check - DVII Tile
   FloorSound[3][86] = "R_22"; //Check - DVII Tile
   FloorSound[3][87] = "R_04"; //Check - DVII Tile
   FloorSound[3][88] = "R_28"; //Check - DVII Tile
   FloorSound[3][89] = "R_25"; //Check - DVII Tile
   FloorSound[3][90] = "R_26"; //Check - DVII Tile
   FloorSound[3][91] = "R_27"; //Check - DVII Tile
   FloorSound[3][92] = "R_22A"; //Check - DVII Tile
   FloorSound[3][93] = "R_09A"; //Check - DVII Tile
   FloorSound[3][94] = "R_13A"; //Check - DVII Tile
   FloorSound[3][95] = "R_03A"; //Check - DVII Tile
   FloorSound[3][96] = "R_05A"; //Check - DVII Tile
   FloorSound[3][97] = "R_16"; //Check - DVII Tile
   FloorSound[3][98] = "R_02"; //Check - DVII Tile
   FloorSound[3][99] = "R_19J"; //Check - DVII Tile
   FloorSound[3][100] = "R_29"; //Check - DVII Tile
   FloorSound[3][101] = "R_30"; //Check - DVII Tile
   FloorSound[3][102] = "R_28J"; //Check - DVII Tile
   FloorSound[3][103] = "R_28L"; //Check - DVII Tile
   FloorSound[3][104] = "R_28N"; //Check - DVII Tile
   FloorSound[3][105] = "R_28O"; //Check - DVII Tile
   FloorSound[3][106] = "R_20"; //Check - DVII Tile
   FloorSound[3][107] = "PUZZ_2A"; //Check - DVII Tile
   FloorSound[3][108] = "PUZZ_4A"; //Check - DVII Tile
   FloorSound[3][109] = "BLU_04"; //Check - DVII Tile
   FloorSound[3][110] = "BLU_08"; //Check - DVII Tile
   FloorSound[3][111] = "BLU_09C"; //Check - DVII Tile
   FloorSound[3][112] = "BLU_11"; //Check - DVII Tile
   FloorSound[3][113] = "BLU_12"; //Check - DVII Tile
   FloorSound[3][114] = "BLU_12B"; //Check - DVII Tile
   FloorSound[3][115] = "BLU_13"; //Check - DVII Tile
   FloorSound[3][116] = "BLU_15"; //Check - DVII Tile
   FloorSound[3][117] = "BLU_19"; //Check - DVII Tile
   FloorSound[3][118] = "BLU_20"; //Check - DVII Tile
   FloorSound[3][119] = "BLU_21"; //Check - DVII Tile
   FloorSound[3][120] = "BLU_22"; //Check - DVII Tile
   FloorSound[3][121] = "BLU_22J"; //Check - DVII Tile
   FloorSound[3][122] = "BLU_23"; //Check - DVII Tile
   FloorSound[3][123] = "BLU_24"; //Check - DVII Tile
   FloorSound[3][124] = "BLU_24J"; //Check - DVII Tile
   FloorSound[3][125] = "BLU_24L"; //Check - DVII Tile
   FloorSound[3][126] = "BLU_24N"; //Check - DVII Tile
   FloorSound[3][127] = "BLU_24O"; //Check - DVII Tile
   FloorSound[3][128] = "BLU_25"; //Check - DVII Tile
   FloorSound[3][129] = "BLU_26"; //Check - DVII Tile
   FloorSound[3][130] = "PANEL_01"; //Check - DVII Tile
   FloorSound[3][131] = "PANEL_02"; //Check - DVII Tile
   FloorSound[3][132] = "PANEL_3"; //Check - DVII Tile
   FloorSound[3][133] = "CRK_07"; //Check - DVII Texture
   FloorSound[3][134] = "CRK_08"; //Check - DVII Texture
   FloorSound[3][135] = "CRK_09"; //Check - DVII Texture
   FloorSound[3][136] = "CRK_11"; //Check - DVII Texture
   FloorSound[3][137] = "CRK_13"; //Check - DVII Texture
   FloorSound[3][138] = "CRK_14"; //Check - DVII Texture
   FloorSound[3][139] = "TLITE6_A"; //Check - DVII Texture
   FloorSound[3][140] = "TLITE7_1"; //Check - DVII Texture
   FloorSound[3][141] = "TLITE7_2"; //Check - DVII Texture
   FloorSound[3][142] = "TLITE7_3"; //Check - DVII Texture
   FloorSound[3][143] = "TLITE7_4"; //Check - DVII Texture
   FloorSound[3][144] = "TLITE9_1"; //Check - DVII Texture
   FloorSound[3][145] = "TLITE9_2"; //Check - DVII Texture
   FloorSound[3][146] = "TLITE9_3"; //Check - DVII Texture
   FloorSound[3][147] = "TLITE9_4"; //Check - DVII Texture
   FloorSound[3][148] = "TLITE9_5"; //Check - DVII Texture
   FloorSound[3][149] = "TLITE9_6"; //Check - DVII Texture
   FloorSound[3][150] = "TLITEA_1"; //Check - DVII Texture
   FloorSound[3][151] = "TLITEA_2"; //Check - DVII Texture
   FloorSound[3][152] = "TLITEA_3"; //Check - DVII Texture
   FloorSound[3][153] = "TLITEA_4"; //Check - DVII Texture
   FloorSound[3][154] = "TLITE_B1"; //Check - DVII Texture
   FloorSound[3][155] = "TLITE_B3"; //Check - DVII Texture
   FloorSound[3][156] = "TLITE_B5"; //Check - DVII Texture
   FloorSound[3][157] = "TLITE_B7"; //Check - DVII Texture
   FloorSound[3][158] = "TLITE_B9"; //Check - DVII Texture
   FloorSound[3][159] = "TLITE_BB"; //Check - DVII Texture
   FloorSound[3][160] = "TLITE_G1"; //Check - DVII Texture
   FloorSound[3][161] = "TLITE_G3"; //Check - DVII Texture
   FloorSound[3][162] = "TLITE_G5"; //Check - DVII Texture
   FloorSound[3][163] = "TLITE_G7"; //Check - DVII Texture
   FloorSound[3][164] = "TLITE_G9"; //Check - DVII Texture
   FloorSound[3][165] = "TLITE_GB"; //Check - DVII Texture
   FloorSound[3][166] = "TLITE_R1"; //Check - DVII Texture
   FloorSound[3][167] = "TLITE_R3"; //Check - DVII Texture
   FloorSound[3][168] = "TLITE_R5"; //Check - DVII Texture
   FloorSound[3][169] = "TLITE_R7"; //Check - DVII Texture
   FloorSound[3][170] = "TLITE_R9"; //Check - DVII Texture
   FloorSound[3][171] = "TLITE_RB"; //Check - DVII Texture
   FloorSound[3][172] = "TLITE_W1"; //Check - DVII Texture
   FloorSound[3][173] = "TLITE_W3"; //Check - DVII Texture
   FloorSound[3][174] = "TLITE_W5"; //Check - DVII Texture
   FloorSound[3][175] = "TLITE_W7"; //Check - DVII Texture
   FloorSound[3][176] = "TLITE_W9"; //Check - DVII Texture
   FloorSound[3][177] = "TLITE_WB"; //Check - DVII Texture
   FloorSound[3][178] = "TLITE_Y1"; //Check - DVII Texture
   FloorSound[3][179] = "TLITE_Y3"; //Check - DVII Texture
   FloorSound[3][180] = "TLITE_Y5"; //Check - DVII Texture
   FloorSound[3][181] = "TLITE_Y7"; //Check - DVII Texture
   FloorSound[3][182] = "TLITE_Y9"; //Check - DVII Texture
   FloorSound[3][183] = "TLITE_YB"; //Check - DVII Texture
   FloorSound[3][184] = "TLITE_BW"; //Check - DVII Texture
   FloorSound[3][185] = "TLITE_BX"; //Check - DVII Texture
   FloorSound[3][186] = "TLITE_BZ"; //Check - DVII Texture
   FloorSound[3][187] = "TLITE_GW"; //Check - DVII Texture
   FloorSound[3][188] = "TLITE_GX"; //Check - DVII Texture
   FloorSound[3][189] = "TLITE_GZ"; //Check - DVII Texture
   FloorSound[3][190] = "TLITE_RW"; //Check - DVII Texture
   FloorSound[3][191] = "TLITE_RX"; //Check - DVII Texture
   FloorSound[3][192] = "TLITE_RZ"; //Check - DVII Texture
   FloorSound[3][193] = "TLITE_YW"; //Check - DVII Texture
   FloorSound[3][194] = "TLITE_YX"; //Check - DVII Texture
   FloorSound[3][195] = "TLITE_YZ"; //Check - DVII Texture
   FloorSound[3][196] = "CEMENT_2"; //Check - DVII Texture
   FloorSound[3][197] = "CEMENT_3"; //Check - DVII Texture
   FloorSound[3][198] = "CEMENT_4"; //Check - DVII Texture
   FloorSound[3][199] = "CEMENT_5"; //Check - DVII Texture
   FloorSound[3][200] = "CEMENT_6"; //Check - DVII Texture
   FloorSound[3][201] = "CEMENT_7"; //Check - DVII Texture
   FloorSound[3][202] = "CEMENT_8"; //Check - DVII Texture
   FloorSound[3][203] = "CEMENT_9"; //Check - DVII Texture
   FloorSound[3][204] = "CEMENT_A"; //Check - DVII Texture
   FloorSound[3][205] = "CEMENT_B"; //Check - DVII Texture
   FloorSound[3][206] = "CEMENT_C"; //Check - DVII Texture
   FloorSound[3][207] = "CEMENT_D"; //Check - DVII Texture
   FloorSound[3][208] = "CEMENT_E"; //Check - DVII Texture
   FloorSound[3][209] = "CEMENT_F"; //Check - DVII Texture
   FloorSound[3][210] = "CEMENT_G"; //Check - DVII Texture
   FloorSound[3][211] = "CEMENT_H"; //Check - DVII Texture
   FloorSound[3][212] = "CEMENT_I"; //Check - DVII Texture
   FloorSound[3][213] = "CEMENT_J"; //Check - DVII Texture
   FloorSound[3][214] = "CEMENT_K"; //Check - DVII Texture
   FloorSound[3][215] = "CEMENT_L"; //Check - DVII Texture
   FloorSound[3][216] = "CEMENT_M"; //Check - DVII Texture
   FloorSound[3][217] = "CEMENT_N"; //Check - DVII Texture
   FloorSound[3][218] = "CEMENT_O"; //Check - DVII Texture
   FloorSound[3][219] = "CEMENT_P"; //Check - DVII Texture
   FloorSound[3][220] = "BRIK_26"; //Check - DVII Texture
   FloorSound[3][221] = "BRK_09C"; //Check - DVII Texture
   FloorSound[3][222] = "BRK_09D"; //Check - DVII Texture
   FloorSound[3][223] = "BRK_09E"; //Check - DVII Texture
   FloorSound[3][224] = "BRK_16D"; //Check - DVII Texture
   FloorSound[3][225] = "BRK_18"; //Check - DVII Texture
   FloorSound[3][226] = "BRK_20"; //Check - DVII Texture
   FloorSound[3][227] = "BRK_23"; //Check - DVII Texture
   FloorSound[3][228] = "BRK_24"; //Check - DVII Texture
   FloorSound[3][229] = "BRK_25"; //Check - DVII Texture
   FloorSound[3][230] = "BRK_26"; //Check - DVII Texture
   FloorSound[3][231] = "BRK_27"; //Check - DVII Texture
   FloorSound[3][232] = "BRK_28"; //Check - DVII Texture
   FloorSound[3][233] = "BRK_28B"; //Check - DVII Texture
   FloorSound[3][234] = "BRK_30"; //Check - DVII Texture
   FloorSound[3][235] = "BRK_30B"; //Check - DVII Texture
   FloorSound[3][236] = "BRK_31"; //Check - DVII Texture
   FloorSound[3][237] = "BRK_31B"; //Check - DVII Texture
   FloorSound[3][238] = "BRK_31E"; //Check - DVII Texture
   FloorSound[3][239] = "BRK_31F"; //Check - DVII Texture
   FloorSound[3][240] = "BRK_32"; //Check - DVII Texture
   FloorSound[3][241] = "BRK_32B"; //Check - DVII Texture
   FloorSound[3][242] = "BRK_32E"; //Check - DVII Texture
   FloorSound[3][243] = "BRK_32F"; //Check - DVII Texture
   FloorSound[3][244] = "GREEN_05"; //Check - DVII Texture
   FloorSound[3][245] = "GREEN_08"; //Check - DVII Texture
   FloorSound[3][246] = "GREEN_11"; //Check - DVII Texture
   FloorSound[3][247] = "GREEN_12"; //Check - DVII Texture
   FloorSound[3][248] = "GREEN_16"; //Check - DVII Texture
   FloorSound[3][249] = -1;

   FloorSound[4][0] = "floor/carpet";
   FloorSound[4][1] = "CEIL4_1";
   FloorSound[4][2] = "CEIL4_2";
   FloorSound[4][3] = "CEIL4_3";
   FloorSound[4][4] = "FLAT5_3";
   FloorSound[4][5] = "FLAT5_4";
   FloorSound[4][6] = "FLAT5_5";
   FloorSound[4][7] = "FLAT14";
   FloorSound[4][8] = "FLOOR1_1";
   FloorSound[4][9] = "CRATEF1"; //Check
   FloorSound[4][10] = "CRATEF2"; //Check
   FloorSound[4][12] = "IKFLAT02"; //Check
   FloorSound[4][13] = "IKFLAT2"; //Check
   FloorSound[4][14] = "IKFLAT4"; //Check
   FloorSound[4][15] = "TRAV_F01"; //Check
   FloorSound[4][16] = "TRAV_F02"; //Check
   FloorSound[4][17] = "TRAV_F04"; //Check
   FloorSound[4][18] = "N5FL14RD"; //Check
   FloorSound[4][19] = "NFBRLT01"; //Check
   FloorSound[4][20] = "NFBRWN01"; //Check
   FloorSound[4][21] = "NFBRWN02"; //Check
   FloorSound[4][22] = "NFCTOP03"; //Check
   FloorSound[4][23] = "NFFT14RD"; //Check
   FloorSound[4][24] = "NFFT19BR"; //Check
   FloorSound[4][25] = "NFFT19GN"; //Check
   FloorSound[4][26] = "NFGNL1H"; //Check
   FloorSound[4][27] = "NFGRLT01"; //Check
   FloorSound[4][28] = "NFRDLT01"; //Check
   FloorSound[4][29] = "CARP_01"; //Check - DVII Texture
   FloorSound[4][30] = "CARP_02"; //Check - DVII Texture
   FloorSound[4][31] = "CARP_03"; //Check - DVII Texture
   FloorSound[4][32] = "CARP_04A"; //Check - DVII Texture
   FloorSound[4][33] = "CARP_04C"; //Check - DVII Texture
   FloorSound[4][34] = "CARP_05"; //Check - DVII Texture
   FloorSound[4][35] = "CARP_06"; //Check - DVII Texture
   FloorSound[4][36] = "CARP_07"; //Check - DVII Texture
   FloorSound[4][37] = "CARP_08"; //Check - DVII Texture
   FloorSound[4][38] = "CARP_09"; //Check - DVII Texture
   FloorSound[4][39] = "CARP_10"; //Check - DVII Texture
   FloorSound[4][40] = "CARP_11"; //Check - DVII Texture
   FloorSound[4][41] = "CARP_11C"; //Check - DVII Texture
   FloorSound[4][42] = "CARP_12"; //Check - DVII Texture
   FloorSound[4][43] = "CARP_12C"; //Check - DVII Texture
   FloorSound[4][44] = "CARP_13"; //Check - DVII Texture
   FloorSound[4][45] = "X25C01"; //Check - DVII Tile
   FloorSound[4][46] = "X25C02"; //Check - DVII Tile
   FloorSound[4][47] = "X25C03"; //Check - DVII Tile
   FloorSound[4][48] = "X25C04"; //Check - DVII Tile
   FloorSound[4][49] = -1;

   // Rock Floors, First Section
   FloorSound[5][0] = "floor/rock";
   FloorSound[5][1] = "FLAT1_1";
   FloorSound[5][2] = "FLAT1_2";
   FloorSound[5][3] = "FLAT5_6";
   FloorSound[5][4] = "FLAT5_7";
   FloorSound[5][5] = "FLAT5_8";
   FloorSound[5][6] = "FLOOR5_4";
   FloorSound[5][7] = "GRNROCK";
   FloorSound[5][8] = "RROCK03";
   FloorSound[5][9] = "RROCK04";
   FloorSound[5][10] = "RROCK09";
   FloorSound[5][11] = "RROCK10";
   FloorSound[5][12] = "RROCK11";
   FloorSound[5][13] = "RROCK12";
   FloorSound[5][14] = "RROCK13";
   FloorSound[5][15] = "RROCK14";
   FloorSound[5][16] = "RROCK15";
   FloorSound[5][17] = "SLIME13";
   FloorSound[5][18] = "ADEL_F47"; //Check
   FloorSound[5][19] = "ADEL_F48"; //Check
   FloorSound[5][20] = "CITYF20"; //Check
   FloorSound[5][21] = "ROCKF1"; //Check
   FloorSound[5][22] = "ROCKF2"; //Check
   FloorSound[5][23] = "ROCKF3"; //Check
   FloorSound[5][24] = "ROCKF4"; //Check
   FloorSound[5][25] = "ROCKF5"; //Check
   FloorSound[5][26] = "ROCKF6"; //Check
   FloorSound[5][27] = "ROCKF7"; //Check
   FloorSound[5][28] = "ROCKF8"; //Check
   FloorSound[5][29] = "STONEF"; //Check
   FloorSound[5][30] = "NFRR01GR"; //Check
   FloorSound[5][31] = "RROCK01"; //Check
   FloorSound[5][32] = "RROCK16"; //Check
   FloorSound[5][33] = "RROCK17"; //Check
   FloorSound[5][34] = "RROCK18"; //Check
   FloorSound[5][35] = "RROCK19"; //Check
   FloorSound[5][36] = "AVFLAT05"; //Check - DV1 Texture
   FloorSound[5][37] = "ROSA04"; //Check - DV1 Texture
   FloorSound[5][38] = "RROCK21"; //Check - DV1 Texture
   FloorSound[5][39] = "RROCK22"; //Check - DV1 Texture
   FloorSound[5][40] = "RROCK23"; //Check - DV1 Texture
   FloorSound[5][41] = "RROCK24"; //Check - DV1 Texture
   FloorSound[5][42] = "RROCK27"; //Check - DV1 Texture
   FloorSound[5][43] = "RROCKB"; //Check - DV1 Texture
   FloorSound[5][44] = "RROCKG"; //Check - DV1 Texture
   FloorSound[5][45] = "MUTX01"; //Check - DV1 Texture
   FloorSound[5][46] = "MUTX02"; //Check - DV1 Texture
   FloorSound[5][47] = "MUTX03"; //Check - DV1 Texture
   FloorSound[5][48] = "MUTX04"; //Check - DV1 Texture
   FloorSound[5][49] = "RROCK35"; //Check - DVI Tile
   FloorSound[5][50] = "AVFLAT03"; //Check - DVI Tile
   FloorSound[5][51] = "AVFLAT16"; //Check - DVI Tile
   FloorSound[5][52] = "AVFLAT23"; //Check - DVI Tile
   FloorSound[5][53] = "AVFLAT24"; //Check - DVI Tile
   FloorSound[5][54] = "AVFLAT36"; //Check - DVI Tile
   FloorSound[5][55] = "GREEN_04"; //Check - DVII Texture
   FloorSound[5][56] = "MISC_02"; //Check - DVII Texture
   FloorSound[5][57] = "MFLR8_5"; //Check - DVII Texture
   FloorSound[5][58] = "SOIL_01"; //Check - DVII Texture
   FloorSound[5][59] = "R_19"; //Check - DVII Texture
   FloorSound[5][60] = "R_19A"; //Check - DVII Texture
   FloorSound[5][61] = "R_17"; //Check - DVII Texture
   FloorSound[5][62] = "R_23"; //Check - DVII Texture
   FloorSound[5][63] = "R_19B"; //Check - DVII Texture
   FloorSound[5][64] = "R_19O"; //Check - DVII Texture
   FloorSound[5][65] = "R_22E"; //Check - DVII Texture
   FloorSound[5][66] = "BLU_17"; //Check - DVII Texture
   FloorSound[5][67] = "RK_02"; //Check - DVII Texture
   FloorSound[5][68] = "RK_03"; //Check - DVII Texture
   FloorSound[5][69] = "RK_04"; //Check - DVII Texture
   FloorSound[5][70] = "RK_05"; //Check - DVII Texture
   FloorSound[5][71] = "RK_06"; //Check - DVII Texture
   FloorSound[5][72] = "RK_07"; //Check - DVII Texture
   FloorSound[5][73] = "RK_08"; //Check - DVII Texture
   FloorSound[5][74] = "RK_09"; //Check - DVII Texture
   FloorSound[5][75] = "RK_10"; //Check - DVII Texture
   FloorSound[5][76] = "RK_11"; //Check - DVII Texture
   FloorSound[5][77] = "RK_11J"; //Check - DVII Texture
   FloorSound[5][78] = "RK_11O"; //Check - DVII Texture
   FloorSound[5][79] = "CRK_04"; //Check - DVII Texture
   FloorSound[5][80] = "CRK_05"; //Check - DVII Texture
   FloorSound[5][81] = "CRK_06"; //Check - DVII Texture
   FloorSound[5][82] = "CRK_10"; //Check - DVII Texture
   FloorSound[5][83] = "RROCK01A"; //Check
   FloorSound[5][84] = "RROCK02B"; //Check
   FloorSound[5][85] = "RROCK04A"; //Check
   FloorSound[5][86] = "RROCK13B"; //Check
   FloorSound[5][87] = "GREEN_14"; //Check
   FloorSound[5][88] = -1;

   // Metal 1, First Section ---FULL, NO MORE ADDING TO THIS---
   FloorSound[6][0] = "floor/metal";
   FloorSound[6][1] = "CEIL1_2";
   FloorSound[6][2] = "FLAT1_3";
   FloorSound[6][3] = "FLAT4";
   FloorSound[6][4] = "FLAT20";
   FloorSound[6][5] = "FLAT22";
   FloorSound[6][6] = "FLAT23";
   FloorSound[6][7] = "GATE1";
   FloorSound[6][8] = "GATE2";
   FloorSound[6][9] = "GATE3";
   FloorSound[6][10] = "GATE4";
   FloorSound[6][11] = "STEP1";
   FloorSound[6][12] = "STEP2";
   FloorSound[6][13] = "MFLR8_2";
   FloorSound[6][14] = "16X16"; //Check
   FloorSound[6][15] = "T_FL01"; //Check
   FloorSound[6][16] = "T_FL02"; //Check
   FloorSound[6][17] = "16X16LT"; //Check
   FloorSound[6][18] = "A-DAN1"; //Check
   FloorSound[6][19] = "A-DAN2"; //Check
   FloorSound[6][20] = "A-DAN3"; //Check
   FloorSound[6][21] = "A-DAN4"; //Check
   FloorSound[6][22] = "A-DAN5"; //Check
   FloorSound[6][23] = "ADEL_F09"; //Check
   FloorSound[6][24] = "ADEL_F16"; //Check
   FloorSound[6][25] = "ADEL_F33"; //Check
   FloorSound[6][26] = "ADEL_F34"; //Check
   FloorSound[6][27] = "ADEL_F36"; //Check
   FloorSound[6][28] = "ADEL_F50"; //Check
   FloorSound[6][29] = "ADEL_F51"; //Check
   FloorSound[6][30] = "ADEL_F52"; //Check
   FloorSound[6][31] = "ADEL_F53"; //Check
   FloorSound[6][32] = "ADEL_F57"; //Check
   FloorSound[6][33] = "ADEL_F58"; //Check
   FloorSound[6][34] = "ADEL_F59"; //Check
   FloorSound[6][35] = "ADEL_F60"; //Check
   FloorSound[6][36] = "ADEL_F61"; //Check
   FloorSound[6][37] = "ADEL_F64"; //Check
   FloorSound[6][38] = "ADEL_F73"; //Check
   FloorSound[6][39] = "ADEL_F74"; //Check
   FloorSound[6][40] = "ADEL_F80"; //Check
   FloorSound[6][41] = "ADEL_F81"; //Check
   FloorSound[6][42] = "ADEL_F82"; //Check
   FloorSound[6][43] = "ADEL_F83"; //Check
   FloorSound[6][44] = "ADEL_J03"; //Check
   FloorSound[6][45] = "ADEL_J13"; //Check
   FloorSound[6][46] = "ADEL_J16"; //Check
   FloorSound[6][47] = "BRFLR1"; //Check
   FloorSound[6][48] = "BRFLR2"; //Check
   FloorSound[6][49] = "BRFLR2B"; //Check
   FloorSound[6][50] = "BRFLR3"; //Check
   FloorSound[6][51] = "BRFLR3B"; //Check
   FloorSound[6][52] = "BRFLR4"; //Check
   FloorSound[6][53] = "BRFLR4B"; //Check
   FloorSound[6][54] = "BRFLR4B"; //Check
   FloorSound[6][55] = "COPF01"; //Check
   FloorSound[6][56] = "COPF02"; //Check
   FloorSound[6][57] = "COPF03"; //Check
   FloorSound[6][58] = "COPF04"; //Check
   FloorSound[6][59] = "COPF05"; //Check
   FloorSound[6][60] = "COPF06"; //Check
   FloorSound[6][61] = "COPF07"; //Check
   FloorSound[6][62] = "COPF08"; //Check
   FloorSound[6][63] = "COPF09"; //Check
   FloorSound[6][64] = "COPF10"; //Check
   FloorSound[6][65] = "COPF11"; //Check
   FloorSound[6][66] = "COPF12"; //Check
   FloorSound[6][67] = "ECOPF1"; //Check
   FloorSound[6][68] = "ECOPF2"; //Check
   FloorSound[6][69] = "ECOPF3"; //Check
   FloorSound[6][70] = "ECOPF4"; //Check
   FloorSound[6][71] = "ECOPF5"; //Check
   FloorSound[6][72] = "FLOOR1"; //Check
   FloorSound[6][73] = "FLOOR2"; //Check
   FloorSound[6][74] = "FLOOR3"; //Check
   FloorSound[6][75] = "FLOOR4"; //Check
   FloorSound[6][76] = "GRIDR"; //Check
   FloorSound[6][77] = "IKLITE2"; //Check
   FloorSound[6][78] = "IKLITE3"; //Check
   FloorSound[6][79] = "IKLITF01"; //Check
   FloorSound[6][80] = "IKLITF07"; //Check
   FloorSound[6][81] = "IKMTWL02"; //Check
   FloorSound[6][82] = "IKMTWL04"; //Check
   FloorSound[6][83] = "IKTKPN2"; //Check
   FloorSound[6][84] = "IKTKPN3"; //Check
   FloorSound[6][85] = "IKTKPN4"; //Check
   FloorSound[6][86] = "IKTPN02B"; //Check
   FloorSound[6][87] = "IKTPW06A"; //Check
   FloorSound[6][88] = "IKTPW06B"; //Check
   FloorSound[6][89] = "IKTPW06C"; //Check
   FloorSound[6][90] = "LITEF01"; //Check
   FloorSound[6][91] = "LITEF02"; //Check
   FloorSound[6][92] = "LITEF03"; //Check
   FloorSound[6][93] = "LITEF04"; //Check
   FloorSound[6][94] = "LITEF05"; //Check
   FloorSound[6][95] = "LITEF06"; //Check
   FloorSound[6][96] = "LITEF07"; //Check
   FloorSound[6][97] = "LITEF08"; //Check
   FloorSound[6][98] = "LITEF09"; //Check
   FloorSound[6][99] = "LITEF10"; //Check
   FloorSound[6][100] = "LITEF11"; //Check
   FloorSound[6][101] = "LITEF12"; //Check
   FloorSound[6][102] = "LITEF13"; //Check
   FloorSound[6][103] = "LITEF14"; //Check
   FloorSound[6][104] = "LITEF15"; //Check
   FloorSound[6][105] = "METALF01"; //Check
   FloorSound[6][106] = "METALF02"; //Check
   FloorSound[6][107] = "METALF03"; //Check
   FloorSound[6][108] = "METALF04"; //Check
   FloorSound[6][109] = "METALF05"; //Check
   FloorSound[6][110] = "METALF06"; //Check
   FloorSound[6][111] = "METALF07"; //Check
   FloorSound[6][112] = "METALF08"; //Check
   FloorSound[6][113] = "METALF09"; //Check
   FloorSound[6][114] = "METALF10"; //Check
   FloorSound[6][115] = "METALF11"; //Check
   FloorSound[6][116] = "METALF12"; //Check
   FloorSound[6][117] = "METALF13"; //Check
   FloorSound[6][118] = "METALF14"; //Check
   FloorSound[6][119] = "METALF15"; //Check
   FloorSound[6][120] = "METALF16"; //Check
   FloorSound[6][121] = "METALF17"; //Check
   FloorSound[6][122] = "METALF18"; //Check
   FloorSound[6][123] = "METALF19"; //Check
   FloorSound[6][124] = "METALF20"; //Check
   FloorSound[6][125] = "METALF21"; //Check
   FloorSound[6][126] = "METALF22"; //Check
   FloorSound[6][127] = "METALF23"; //Check
   FloorSound[6][128] = "METALF24"; //Check
   FloorSound[6][129] = "NMTRC1"; //Check
   FloorSound[6][130] = "NMTRC2"; //Check
   FloorSound[6][131] = "NMTRC5"; //Check
   FloorSound[6][132] = "PLATF1"; //Check
   FloorSound[6][133] = "PLATF2"; //Check
   FloorSound[6][134] = "QFLAT09"; //Check
   FloorSound[6][135] = "QFLAT10"; //Check
   FloorSound[6][136] = "QSLIP1"; //Check
   FloorSound[6][137] = "QSLIP2"; //Check
   FloorSound[6][138] = "QSLIP3"; //Check
   FloorSound[6][139] = "QSLIP4"; //Check
   FloorSound[6][140] = "QSLIP5"; //Check
   FloorSound[6][141] = "QSLIP6"; //Check
   FloorSound[6][142] = "QSLIP7"; //Check
   FloorSound[6][143] = "SFLOOR1"; //Check
   FloorSound[6][144] = "SFLOOR2"; //Check
   FloorSound[6][145] = "SFLOOR3"; //Check
   FloorSound[6][146] = "SFLOOR4"; //Check
   FloorSound[6][147] = "SFLOOR5"; //Check
   FloorSound[6][148] = "SFLOOR6"; //Check
   FloorSound[6][149] = "SLIPBOT"; //Check
   FloorSound[6][150] = "SLIPTOP"; //Check
   FloorSound[6][151] = "TECHBR1D"; //Check
   FloorSound[6][152] = "TECHBR1E"; //Check
   FloorSound[6][153] = "TECHBR2C"; //Check
   FloorSound[6][154] = "TECHBR2D"; //Check
   FloorSound[6][155] = "TECHF1"; //Check
   FloorSound[6][156] = "TECHF2"; //Check
   FloorSound[6][157] = "TECHF3"; //Check
   FloorSound[6][158] = "TECHF4"; //Check
   FloorSound[6][159] = "TECHF5"; //Check
   FloorSound[6][160] = "TECHFL2"; //Check
   FloorSound[6][161] = "TECHG"; //Check
   FloorSound[6][162] = "TELETOP"; //Check
   FloorSound[6][163] = "NFFL48W"; //Check
   FloorSound[6][164] = "NFFT22GN"; //Check
   FloorSound[6][165] = "NFFT22GR"; //Check
   FloorSound[6][166] = "NFFT22OR"; //Check
   FloorSound[6][167] = "NFFT22RD"; //Check
   FloorSound[6][168] = "NFGF22GN"; //Check
   FloorSound[6][169] = "NFGF22RD"; //Check
   FloorSound[6][170] = "NFGF23"; //Check
   FloorSound[6][171] = "NFMETA03"; //Check
   FloorSound[6][172] = "NFMETA05"; //Check
   FloorSound[6][173] = "NFMETA06"; //Check
   FloorSound[6][174] = "NFMETA45"; //Check
   FloorSound[6][175] = "NFMTPN04"; //Check
   FloorSound[6][176] = "NFMTPN05"; //Check
   FloorSound[6][177] = "NFMTPN06"; //Check
   FloorSound[6][178] = "NFMTSH00"; //Check
   FloorSound[6][179] = "NFMTSV00"; //Check
   FloorSound[6][180] = "NFMTTK01"; //Check
   FloorSound[6][181] = "NFMTTK12"; //Check
   FloorSound[6][182] = "NFMTTK13"; //Check
   FloorSound[6][183] = "NFMTTK14"; //Check
   FloorSound[6][184] = "NFMTTK15"; //Check
   FloorSound[6][185] = "NFMTWL01"; //Check
   FloorSound[6][186] = "NFMTWL02"; //Check
   FloorSound[6][187] = "NFMTWL03"; //Check
   FloorSound[6][188] = "NFSILV3A"; //Check
   FloorSound[6][189] = "NFSVPP01"; //Check
   FloorSound[6][190] = "NFSVPP02"; //Check
   FloorSound[6][191] = "NFSVPP04"; //Check
   FloorSound[6][192] = "NFTKGN00"; //Check
   FloorSound[6][193] = "NFTKGN01"; //Check
   FloorSound[6][194] = "NFTL65BL"; //Check
   FloorSound[6][195] = "NFTL65GN"; //Check
   FloorSound[6][196] = "NFTL65OR"; //Check
   FloorSound[6][197] = "NFTL65WT"; //Check
   FloorSound[6][198] = "NFTL65YL"; //Check
   FloorSound[6][199] = "NFTLTE01"; //Check
   FloorSound[6][200] = "NFTLTE02"; //Check
   FloorSound[6][201] = "VADFLR1"; //Check
   FloorSound[6][202] = "VADFLR2"; //Check
   FloorSound[6][203] = "AVFLAT06"; //Check - DVI Tile
   FloorSound[6][204] = "MT_01"; //Check - DVI Tile
   FloorSound[6][205] = "R_07"; //Check - DVI Tile
   FloorSound[6][206] = "R_08"; //Check - DVI Tile
   FloorSound[6][207] = "IRON_01"; //Check - DVI Tile
   FloorSound[6][208] = "IRON_02"; //Check - DVI Tile
   FloorSound[6][209] = "IRON_03"; //Check - DVI Tile
   FloorSound[6][210] = "IRON_03A"; //Check - DVI Tile
   FloorSound[6][211] = "IRON_04"; //Check - DVI Tile
   FloorSound[6][212] = "IRON_05"; //Check - DVI Tile
   FloorSound[6][213] = "IRON_05B"; //Check - DVI Tile
   FloorSound[6][214] = "IRON_05C"; //Check - DVI Tile
   FloorSound[6][215] = "IRON_05D"; //Check - DVI Tile
   FloorSound[6][216] = "IRON_05F"; //Check - DVI Tile
   FloorSound[6][217] = "IRON_05H"; //Check - DVI Tile
   FloorSound[6][218] = "IRON_05J"; //Check - DVI Tile
   FloorSound[6][219] = "IRON_05L"; //Check - DVI Tile
   FloorSound[6][220] = "IRON_05N"; //Check - DVI Tile
   FloorSound[6][221] = "IRON_06"; //Check - DVI Tile
   FloorSound[6][222] = "IRON_06B"; //Check - DVI Tile
   FloorSound[6][223] = "IRON_08"; //Check - DVI Tile
   FloorSound[6][224] = "IRON_09"; //Check - DVI Tile
   FloorSound[6][225] = "IRON_10"; //Check - DVI Tile
   FloorSound[6][226] = "IRON_11"; //Check - DVI Tile
   FloorSound[6][227] = "IRON_11D"; //Check - DVI Tile
   FloorSound[6][228] = "IRON_12"; //Check - DVI Tile
   FloorSound[6][229] = "IRON_13"; //Check - DVI Tile
   FloorSound[6][230] = "IRON_14"; //Check - DVI Tile
   FloorSound[6][231] = "IRON_14J"; //Check - DVI Tile
   FloorSound[6][232] = "IRON_14O"; //Check - DVI Tile
   FloorSound[6][233] = "IRON_15"; //Check - DVI Tile
   FloorSound[6][234] = "IRON_15J"; //Check - DVI Tile
   FloorSound[6][235] = "IRON_16"; //Check - DVI Tile
   FloorSound[6][236] = "IRON_16J"; //Check - DVI Tile
   FloorSound[6][237] = "IRON_17A"; //Check - DVI Tile
   FloorSound[6][238] = "IRON_17B"; //Check - DVI Tile
   FloorSound[6][239] = "IRON_17E"; //Check - DVI Tile
   FloorSound[6][240] = "IRON_17F"; //Check - DVI Tile
   FloorSound[6][241] = "IRON_17O"; //Check - DVI Tile
   FloorSound[6][242] = "IRON_17Q"; //Check - DVI Tile
   FloorSound[6][243] = "IRON_17S"; //Check - DVI Tile
   FloorSound[6][244] = "IRON_17V"; //Check - DVI Tile
   FloorSound[6][245] = "IRON_17W"; //Check - DVI Tile
   FloorSound[6][246] = "IRON_17X"; //Check - DVI Tile
   FloorSound[6][247] = "IRON_17Y"; //Check - DVI Tile
   FloorSound[6][248] = "IRON_17Z"; //Check - DVI Tile
   FloorSound[6][249] = -1;

   FloorSound[7][0] = "floor/dirt";
   FloorSound[7][1] = "FLAT10";
   FloorSound[7][2] = "GRASS1";
   FloorSound[7][3] = "GRASS2";
   FloorSound[7][4] = "RROCK16";
   FloorSound[7][5] = "RROCK17";
   FloorSound[7][6] = "RROCK18";
   FloorSound[7][7] = "RROCK19";
   FloorSound[7][8] = "RROCK20";
   FloorSound[7][9] = "MFLR8_4";
   FloorSound[7][10] = "ADEL_J02"; //Check
   FloorSound[7][11] = "ADEL_J04"; //Check
   FloorSound[7][12] = "ADEL_J05"; //Check
   FloorSound[7][13] = "NICK_A04"; //Check
   FloorSound[7][14] = "QGRASS"; //Check
   FloorSound[7][15] = "RROCK29"; //Check - DVI Texture
   FloorSound[7][16] = "DIRT_01"; //Check - DVII Texture
   FloorSound[7][17] = "DIRT_1C"; //Check - DVII Texture
   FloorSound[7][18] = "DIRT_02"; //Check - DVII Texture
   FloorSound[7][19] = "DIRT_03"; //Check - DVII Texture
   FloorSound[7][20] = "DIRT_04"; //Check - DVII Texture
   FloorSound[7][21] = "DIRT_05"; //Check - DVII Texture
   FloorSound[7][22] = "DIRT_05J"; //Check - DVII Texture
   FloorSound[7][23] = "DIRT_06"; //Check - DVII Texture
   FloorSound[7][24] = "DIRT_07"; //Check - DVII Texture
   FloorSound[7][25] = "DIRT_08"; //Check - DVII Texture
   FloorSound[7][26] = "DIRT_09"; //Check - DVII Texture
   FloorSound[7][27] = "DIRT_10"; //Check - DVII Texture
   FloorSound[7][28] = "DIRT_11"; //Check - DVII Texture
   FloorSound[7][29] = "DIRT_12"; //Check - DVII Texture
   FloorSound[7][30] = "DIRT_12C"; //Check - DVII Texture
   FloorSound[7][31] = "DIRT_12J"; //Check - DVII Texture
   FloorSound[7][32] = "DIRT_12L"; //Check - DVII Texture
   FloorSound[7][33] = "DIRT_13"; //Check - DVII Texture
   FloorSound[7][34] = "DIRT_13C"; //Check - DVII Texture
   FloorSound[7][35] = "DIRT_13F"; //Check - DVII Texture
   FloorSound[7][36] = "DIRT_13J"; //Check - DVII Texture
   FloorSound[7][37] = "DIRT_14"; //Check - DVII Texture
   FloorSound[7][38] = "DIRT_16"; //Check - DVII Texture
   FloorSound[7][39] = "DIRT_17"; //Check - DVII Texture
   FloorSound[7][40] = "DIRT_17C"; //Check - DVII Texture
   FloorSound[7][41] = "DIRT_17J"; //Check - DVII Texture
   FloorSound[7][42] = "DIRT_18"; //Check - DVII Texture
   FloorSound[7][43] = "DIRT_19"; //Check - DVII Texture
   FloorSound[7][44] = "DIRT_20"; //Check - DVII Texture
   FloorSound[7][45] = "DIRT_21"; //Check - DVII Texture
   FloorSound[7][46] = "DIRT_22"; //Check - DVII Texture
   FloorSound[7][47] = "DIRT_23"; //Check - DVII Texture
   FloorSound[7][48] = "DIRT_24"; //Check - DVII Texture
   FloorSound[7][49] = "DIRT_25"; //Check - DVII Texture
   FloorSound[7][50] = "DIRT_26"; //Check - DVII Texture
   FloorSound[7][51] = "DIRT_27"; //Check - DVII Texture
   FloorSound[7][52] = "DIRT_28"; //Check - DVII Texture
   FloorSound[7][53] = "PUZZ_3A"; //Check - DVII Texture
   FloorSound[7][54] = "PUZZ_3B"; //Check - DVII Texture
   FloorSound[7][55] = "PUZZ_3C"; //Check - DVII Texture
   FloorSound[7][56] = "PUZZ_3D"; //Check - DVII Texture
   FloorSound[7][57] = "SAND_01"; //Check - DVII Texture
   FloorSound[7][58] = -1;

   FloorSound[8][0] = "floor/gravel";
   FloorSound[8][1] = "FLOOR6_1";
   FloorSound[8][2] = "FLOOR6_2";
   FloorSound[8][3] = "MFLR8_3";
   FloorSound[8][4] = "ADEL_F04"; //Check
   FloorSound[8][5] = "ADEL_F75"; //Check
   FloorSound[8][6] = "ADEL_F76"; //Check
   FloorSound[8][7] = "ADEL_J01"; //Check
   FloorSound[8][8] = "ADEL_J17"; //Check
   FloorSound[8][9] = "CITYF11"; //Check
   FloorSound[8][10] = "CITYF12"; //Check
   FloorSound[8][11] = "CITYF19"; //Check
   FloorSound[8][12] = "CITYF21"; //Check
   FloorSound[8][13] = "COLMF1"; //Check
   FloorSound[8][14] = "COLMF2"; //Check
   FloorSound[8][15] = "COLMF4"; //Check
   FloorSound[8][16] = "GRAVE01"; //Check
   FloorSound[8][17] = "GRAVE02"; //Check
   FloorSound[8][18] = "GRAVE03"; //Check
   FloorSound[8][19] = "GRAVE04"; //Check
   FloorSound[8][20] = "GRAVE05"; //Check
   FloorSound[8][21] = "GRAVE06"; //Check
   FloorSound[8][22] = "GRAVE07"; //Check
   FloorSound[8][23] = "GRAVE08"; //Check
   FloorSound[8][24] = "GRAVE09"; //Check
   FloorSound[8][25] = "GRAVE10"; //Check
   FloorSound[8][26] = "GRAVE11"; //Check
   FloorSound[8][27] = "GRAVE12"; //Check
   FloorSound[8][28] = "GROUND1"; //Check
   FloorSound[8][29] = "GROUND2"; //Check
   FloorSound[8][30] = "GROUND3"; //Check
   FloorSound[8][31] = "GROUND4"; //Check
   FloorSound[8][32] = "NFMF82BR"; //Check
   FloorSound[8][33] = "NFMF82GN"; //Check
   FloorSound[8][34] = "NFMF82GR"; //Check
   FloorSound[8][35] = "FLOOR6G"; //Check - DVI Texture
   FloorSound[8][36] = "FLOOR6B"; //Check - DVI Texture
   FloorSound[8][37] = "MUTX05"; //Check - DVI Texture
   FloorSound[8][38] = "GREEN_02"; //Check - DVII Texture
   FloorSound[8][39] = "PINK_01"; //Check - DVII Tile
   FloorSound[8][40] = "RK_01"; //Check - DVII Tile
   FloorSound[8][41] = "CRK_03"; //Check - DVII Tile
   FloorSound[8][42] = "R_18"; //Check - DVII Texture
   FloorSound[8][43] = "CRK_12"; //Check - DVII Texture
   FloorSound[8][44] = -1;

   FloorSound[9][0] = "floor/met2";
   FloorSound[9][1] = "SLIME14";
   FloorSound[9][2] = "SLIME15";
   FloorSound[9][3] = "SLIME16";
   FloorSound[9][4] = "ADEL_F70"; //Check
   FloorSound[9][5] = "PUZZ_1A"; //Check - DVII Texture
   FloorSound[9][6] = "PUZZ_1B"; //Check - DVII Texture
   FloorSound[9][7] = "PUZZ_1C"; //Check - DVII Texture
   FloorSound[9][8] = "PUZZ_1D"; //Check - DVII Texture
   FloorSound[9][9] = "BLU_10A"; //Check - DVII Texture
   FloorSound[9][10] = "D64_01"; //Check - DVII Texture
   FloorSound[9][11] = "D64_02"; //Check - DVII Texture
   FloorSound[9][12] = "D64_03"; //Check - DVII Texture
   FloorSound[9][13] = "D64_04"; //Check - DVII Texture
   FloorSound[9][14] = "D64_05"; //Check - DVII Texture
   FloorSound[9][15] = "D64_06"; //Check - DVII Texture
   FloorSound[9][16] = "D64_07"; //Check - DVII Texture
   FloorSound[9][17] = "D64_08"; //Check - DVII Texture
   FloorSound[9][18] = "STEP0"; //Check - DVII Texture
   FloorSound[9][19] = "STEP00"; //Check - DVII Texture
   FloorSound[9][20] = "STEP000"; //Check - DVII Texture
   FloorSound[9][21] = "STEP0000"; //Check - DVII Texture
   FloorSound[9][22] = "GATE3A"; //Check - DVII Texture
   FloorSound[9][23] = "GATE4"; //Check - DVII Texture
   FloorSound[9][24] = "GATE4A"; //Check - DVII Texture
   FloorSound[9][25] = "GATE5"; //Check - DVII Texture
   FloorSound[9][26] = "GATE5A"; //Check - DVII Texture
   FloorSound[9][27] = "GATE6"; //Check - DVII Texture
   FloorSound[9][28] = "GATE6A"; //Check - DVII Texture
   FloorSound[9][29] = "GATE7"; //Check - DVII Texture
   FloorSound[9][30] = "GATE7A"; //Check - DVII Texture
   FloorSound[9][31] = "GATE8"; //Check - DVII Texture
   FloorSound[9][32] = "GATE8A"; //Check - DVII Texture
   FloorSound[9][33] = "GATE9"; //Check - DVII Texture
   FloorSound[9][34] = "GATE9A"; //Check - DVII Texture
   FloorSound[9][35] = -1;

   // Slimey/Fleshy Surfaces
   FloorSound[10][0] = "floor/slimy";
   FloorSound[10][1] = "BLOOD1";
   FloorSound[10][2] = "BLOOD2";
   FloorSound[10][3] = "BLOOD3";
   FloorSound[10][4] = "SLIME01";
   FloorSound[10][5] = "SLIME02";
   FloorSound[10][6] = "SLIME03";
   FloorSound[10][7] = "SLIME04";
   FloorSound[10][8] = "SLIME05";
   FloorSound[10][9] = "SLIME06";
   FloorSound[10][10] = "SLIME07";
   FloorSound[10][11] = "SLIME08";
   FloorSound[10][12] = "AQUAFLAT"; //Check
   FloorSound[10][13] = "NICK_A05"; //Check
   FloorSound[10][14] = "ORG11B"; //Check
   FloorSound[10][15] = "ORG9"; //Check
   FloorSound[10][16] = "QSLIME1"; //Check
   FloorSound[10][17] = "QSLIME9"; //Check
   FloorSound[10][18] = "SLIME05B"; //Check
   FloorSound[10][19] = "W3SNAKE"; //Check
   FloorSound[10][20] = "WBLOOD"; //Check
   FloorSound[10][21] = "SFLR6_1"; //Check
   FloorSound[10][22] = "SFLR6_4"; //Check
   FloorSound[10][23] = "SFLR7_1"; //Check
   FloorSound[10][24] = "SFLR7_4"; //Check
   FloorSound[10][25] = "SNAK7_1"; //Check
   FloorSound[10][26] = "SNAK8_1"; //Check
   FloorSound[10][27] = "HELL5_1"; //Check
   FloorSound[10][28] = "HELL5_2"; //Check
   FloorSound[10][29] = "HELL6_2"; //Check
   FloorSound[10][30] = "HELL6_3"; //Check
   FloorSound[10][31] = "HELL8_1"; //Check
   FloorSound[10][32] = "HELL8_2"; //Check
   FloorSound[10][33] = "HELL8_4"; //Check
   FloorSound[10][34] = "SPINE3_1"; //Check
   FloorSound[10][35] = "SPINE3_2"; //Check
   FloorSound[10][36] = "SPINE4_1"; //Check
   FloorSound[10][37] = "BFALL1"; //Check
   FloorSound[10][38] = "BFALL2"; //Check
   FloorSound[10][39] = "BFALL3"; //Check
   FloorSound[10][40] = "RW47_3"; //Check
   FloorSound[10][41] = "RW47_4"; //Check
   FloorSound[10][42] = "RW48_1"; //Check
   FloorSound[10][43] = "RW48_2"; //Check
   FloorSound[10][44] = "RW48_3"; //Check
   FloorSound[10][45] = "RW48_4"; //Check
   FloorSound[10][46] = "AVFLAT28"; //Check - DVI Texture
   FloorSound[10][47] = "MISC_03"; //Check - DVI Texture
   FloorSound[10][48] = "BRAIN_01"; //Check - DVI Texture
   FloorSound[10][49] = "SKINN1"; //Check - DVI Texture
   FloorSound[10][50] = "SKINN2"; //Check - DVI Texture
   FloorSound[10][51] = "PNK_BD"; //Check - DVI Texture
   FloorSound[10][52] = "SKT1A"; //Check - DVI Texture
   FloorSound[10][53] = "SKT1B"; //Check - DVI Texture
   FloorSound[10][54] = "SKT2A"; //Check - DVI Texture
   FloorSound[10][55] = "SKT2B"; //Check - DVI Texture
   FloorSound[10][56] = -1;

   // Water Floors
   FloorSound[11][0] = "floor/water";
   FloorSound[11][1] = "FWATER1";
   FloorSound[11][2] = "FWATER2";
   FloorSound[11][3] = "FWATER3";
   FloorSound[11][4] = "FWATER4";
   FloorSound[11][5] = "NUKAGE1";
   FloorSound[11][6] = "NUKAGE2";
   FloorSound[11][7] = "NUKAGE3";
   FloorSound[11][8] = "LAVA1";
   FloorSound[11][9] = "LAVA2";
   FloorSound[11][10] = "LAVA3";
   FloorSound[11][11] = "LAVA4";
   FloorSound[11][12] = "ADEL_J14"; //Check
   FloorSound[11][13] = "QFWAT"; //Check
   FloorSound[11][14] = "QLAVA"; //Check
   FloorSound[11][15] = "QLAVA2"; //Check
   FloorSound[11][16] = "QLAVA7"; //Check
   FloorSound[11][17] = "QWATER1"; //Check
   FloorSound[11][18] = "QWATER2"; //Check
   FloorSound[11][19] = "QWATER3"; //Check
   FloorSound[11][20] = "QWATER3A"; //Check
   FloorSound[11][21] = "QWATERT6"; //Check
   FloorSound[11][22] = "SB_FLAT3"; //Check
   FloorSound[11][23] = "SB_FLAT4"; //Check
   FloorSound[11][24] = "W3LAVA"; //Check
   FloorSound[11][25] = "WLAVA"; //Check
   FloorSound[11][26] = "WNUKAGE"; //Check
   FloorSound[11][27] = "WSLIME2"; //Check
   FloorSound[11][28] = "WSLIME"; //Check
   FloorSound[11][29] = "WWATER"; //Check
   FloorSound[11][30] = "ZB3_01"; //Check
   FloorSound[11][31] = "ZB3_02"; //Check
   FloorSound[11][32] = "ZB3_03"; //Check
   FloorSound[11][33] = "ZB3_99"; //Check
   FloorSound[11][34] = "ZB4_01"; //Check
   FloorSound[11][35] = "ZB4_02"; //Check
   FloorSound[11][36] = "ZB4_03"; //Check
   FloorSound[11][37] = "ZB4_99"; //Check
   FloorSound[11][38] = "ZB5_01"; //Check
   FloorSound[11][39] = "ZB5_02"; //Check
   FloorSound[11][40] = "ZB5_03"; //Check
   FloorSound[11][41] = "ZB5_99"; //Check
   FloorSound[11][42] = "ZB6_01"; //Check
   FloorSound[11][43] = "ZB6_02"; //Check
   FloorSound[11][44] = "ZB6_99"; //Check
   FloorSound[11][45] = "ZG3_01"; //Check
   FloorSound[11][46] = "ZG3_02"; //Check
   FloorSound[11][47] = "ZG3_03"; //Check
   FloorSound[11][48] = "ZG3_99"; //Check
   FloorSound[11][49] = "ZG4_01"; //Check
   FloorSound[11][50] = "ZG4_02"; //Check
   FloorSound[11][51] = "ZG4_03"; //Check
   FloorSound[11][52] = "ZG4_99"; //Check
   FloorSound[11][53] = "ZG5_01"; //Check
   FloorSound[11][54] = "ZG5_02"; //Check
   FloorSound[11][55] = "ZG5_03"; //Check
   FloorSound[11][56] = "ZG5_99"; //Check
   FloorSound[11][57] = "ZG6_01"; //Check
   FloorSound[11][58] = "ZG6_02"; //Check
   FloorSound[11][59] = "ZG6_99"; //Check
   FloorSound[11][60] = "ZM1_01"; //Check
   FloorSound[11][61] = "ZM1_02"; //Check
   FloorSound[11][62] = "ZM1_03"; //Check
   FloorSound[11][63] = "ZM1_99"; //Check
   FloorSound[11][64] = "ZM2_01"; //Check
   FloorSound[11][65] = "ZM2_02"; //Check
   FloorSound[11][66] = "ZM2_99"; //Check
   FloorSound[11][67] = "ZM3_01"; //Check
   FloorSound[11][68] = "ZM3_02"; //Check
   FloorSound[11][69] = "ZM3_03"; //Check
   FloorSound[11][70] = "ZM3_99"; //Check
   FloorSound[11][71] = "ZM4_01"; //Check
   FloorSound[11][72] = "ZM4_02"; //Check
   FloorSound[11][73] = "ZM4_03"; //Check
   FloorSound[11][74] = "ZM4_04"; //Check
   FloorSound[11][75] = "ZM4_05"; //Check
   FloorSound[11][76] = "ZM4_06"; //Check
   FloorSound[11][77] = "ZM4_99"; //Check
   FloorSound[11][78] = "ZM5_01"; //Check
   FloorSound[11][79] = "ZM5_02"; //Check
   FloorSound[11][80] = "ZM5_03"; //Check
   FloorSound[11][81] = "ZM5_99"; //Check
   FloorSound[11][82] = "ZR3_01"; //Check
   FloorSound[11][83] = "ZR3_02"; //Check
   FloorSound[11][84] = "ZR3_03"; //Check
   FloorSound[11][85] = "ZR3_99"; //Check
   FloorSound[11][86] = "ZR4_01"; //Check
   FloorSound[11][87] = "ZR4_02"; //Check
   FloorSound[11][88] = "ZR4_03"; //Check
   FloorSound[11][89] = "ZR4_99"; //Check
   FloorSound[11][90] = "ZR5_01"; //Check
   FloorSound[11][91] = "ZR5_02"; //Check
   FloorSound[11][92] = "ZR5_03"; //Check
   FloorSound[11][93] = "ZR5_99"; //Check
   FloorSound[11][94] = "ZR6_01"; //Check
   FloorSound[11][95] = "ZR6_02"; //Check
   FloorSound[11][96] = "ZR6_99"; //Check
   FloorSound[11][97] = "ZY3_01"; //Check
   FloorSound[11][98] = "ZY3_02"; //Check
   FloorSound[11][99] = "ZY3_03"; //Check
   FloorSound[11][100] = "ZY3_99"; //Check
   FloorSound[11][101] = "ZY5_01"; //Check
   FloorSound[11][102] = "ZY5_02"; //Check
   FloorSound[11][103] = "ZY5_03"; //Check
   FloorSound[11][104] = "ZY5_99"; //Check
   FloorSound[11][105] = "ZY6_01"; //Check
   FloorSound[11][106] = "ZY6_02"; //Check
   FloorSound[11][107] = "ZY6_99"; //Check
   FloorSound[11][108] = "ZO1_01"; //Check
   FloorSound[11][109] = "ZO1_02"; //Check
   FloorSound[11][110] = "ZO1_03"; //Check
   FloorSound[11][111] = "ZO1_99"; //Check
   FloorSound[11][112] = "ZO2_01"; //Check
   FloorSound[11][113] = "ZO2_02"; //Check
   FloorSound[11][114] = "ZO2_03"; //Check
   FloorSound[11][115] = "ZO2_99"; //Check
   FloorSound[11][116] = "ZO3_01"; //Check
   FloorSound[11][117] = "ZO3_02"; //Check
   FloorSound[11][118] = "ZO3_03"; //Check
   FloorSound[11][119] = "ZO3_99"; //Check
   FloorSound[11][120] = "ZO4_01"; //Check
   FloorSound[11][121] = "ZO4_02"; //Check
   FloorSound[11][122] = "ZO4_03"; //Check
   FloorSound[11][123] = "ZO4_04"; //Check
   FloorSound[11][124] = "ZO4_05"; //Check
   FloorSound[11][125] = "ZO4_06"; //Check
   FloorSound[11][126] = "ZO4_07"; //Check
   FloorSound[11][127] = "ZO4_08"; //Check
   FloorSound[11][128] = "ZO4_09"; //Check
   FloorSound[11][129] = "ZO4_99"; //Check
   FloorSound[11][130] = -1;

   // Snow Floors, First Section
   FloorSound[12][0] = "floor/snow";
   FloorSound[12][1] = "SNOW";
   FloorSound[12][2] = "SNOW3";
   FloorSound[12][3] = "SB_FLAT5";
   FloorSound[12][4] = "ICE";
   FloorSound[12][5] = "ICE2";
   FloorSound[12][6] = "ICE3";
   FloorSound[12][7] = "ICE4";
   FloorSound[12][8] = "ICE5";
   FloorSound[12][9] = "ICRETE5";
   FloorSound[12][10] = -1;

   // Metal 1, Second Section ---ADD TO THIS ONE---
   FloorSound[13][0] = "floor/metal"; //Check - DVII Tile
   FloorSound[13][1] = "IRON_19"; //Check - DVII Tile
   FloorSound[13][2] = "IRON_20"; //Check - DVII Tile
   FloorSound[13][3] = "IRON_20B"; //Check - DVII Tile
   FloorSound[13][4] = "IRON_21"; //Check - DVII Tile
   FloorSound[13][5] = "IRON_21B"; //Check - DVII Tile
   FloorSound[13][6] = "IRON_21C"; //Check - DVII Tile
   FloorSound[13][7] = "IRON_24"; //Check - DVII Tile
   FloorSound[13][8] = "IRON_24J"; //Check - DVII Tile
   FloorSound[13][9] = "IRON_24M"; //Check - DVII Tile
   FloorSound[13][10] = "IRON_24O"; //Check - DVII Tile
   FloorSound[13][11] = "IRON_25"; //Check - DVII Tile
   FloorSound[13][12] = "IRON_25J"; //Check - DVII Tile
   FloorSound[13][13] = "IRON_25M"; //Check - DVII Tile
   FloorSound[13][14] = "IRON_25O"; //Check - DVII Tile
   FloorSound[13][15] = "R_12"; //Check - DVII Tile
   FloorSound[13][16] = "R_31"; //Check - DVII Tile
   FloorSound[13][17] = "R_32"; //Check - DVII Tile
   FloorSound[13][18] = "R_33"; //Check - DVII Tile
   FloorSound[13][19] = "R_34"; //Check - DVII Tile
   FloorSound[13][20] = "R_35"; //Check - DVII Tile
   FloorSound[13][21] = "R_36"; //Check - DVII Tile
   FloorSound[13][22] = "R_37"; //Check - DVII Tile
   FloorSound[13][23] = "R_38"; //Check - DVII Tile
   FloorSound[13][24] = "R_39"; //Check - DVII Tile
   FloorSound[13][25] = "R_40"; //Check - DVII Tile
   FloorSound[13][26] = "R_41"; //Check - DVII Tile
   FloorSound[13][27] = "R_42"; //Check - DVII Tile
   FloorSound[13][28] = "R_43"; //Check - DVII Tile
   FloorSound[13][29] = "R_44"; //Check - DVII Tile
   FloorSound[13][31] = "IRON_18"; //Check - DVII Tile
   FloorSound[13][32] = "BLU_10"; //Check - DVII Tile
   FloorSound[13][33] = "BLU_27"; //Check - DVII Tile
   FloorSound[13][34] = "BLU_28"; //Check - DVII Tile
   FloorSound[13][35] = "BLU_29"; //Check - DVII Tile
   FloorSound[13][36] = "BLU_30"; //Check - DVII Tile
   FloorSound[13][37] = "BLU_31"; //Check - DVII Tile
   FloorSound[13][38] = "BLU_32"; //Check - DVII Tile
   FloorSound[13][39] = "BLU_33"; //Check - DVII Tile
   FloorSound[13][40] = "BLU_34"; //Check - DVII Tile
   FloorSound[13][41] = "BLU_35"; //Check - DVII Tile
   FloorSound[13][42] = "BLU_36"; //Check - DVII Tile
   FloorSound[13][43] = "BLU_37"; //Check - DVII Tile
   FloorSound[13][44] = "BLU_38"; //Check - DVII Tile
   FloorSound[13][45] = "BLU_39"; //Check - DVII Tile
   FloorSound[13][46] = "BLU_40"; //Check - DVII Tile
   FloorSound[13][47] = "MISC_06"; //Check - DVII Tile
   FloorSound[13][48] = "MISC_08"; //Check - DVII Tile
   FloorSound[13][49] = "MISC_08J"; //Check - DVII Tile
   FloorSound[13][50] = "MISC_08N"; //Check - DVII Tile
   FloorSound[13][51] = "MISC_08O"; //Check - DVII Tile
   FloorSound[13][52] = "MISC_08R"; //Check - DVII Tile
   FloorSound[13][53] = "MISC_08S"; //Check - DVII Tile
   FloorSound[13][54] = "MISC_08T"; //Check - DVII Tile
   FloorSound[13][55] = "MISC_08U"; //Check - DVII Tile
   FloorSound[13][56] = "MISC_08W"; //Check - DVII Tile
   FloorSound[13][57] = "MISC_08Y"; //Check - DVII Tile
   FloorSound[13][58] = "MISC_09"; //Check - DVII Tile
   FloorSound[13][59] = "MISC_10"; //Check - DVII Tile
   FloorSound[13][60] = "MISC_11"; //Check - DVII Tile
   FloorSound[13][61] = "MISC_14"; //Check - DVII Tile
   FloorSound[13][62] = "MISC_15"; //Check - DVII Tile
   FloorSound[13][63] = "MISC_15J"; //Check - DVII Tile
   FloorSound[13][64] = "MISC_15O"; //Check - DVII Tile
   FloorSound[13][65] = "MISC_16"; //Check - DVII Tile
   FloorSound[13][66] = "MISC_16J"; //Check - DVII Tile
   FloorSound[13][67] = "MISC_17"; //Check - DVII Tile
   FloorSound[13][68] = "MISC_18"; //Check - DVII Tile
   FloorSound[13][69] = "MISC_19A"; //Check - DVII Tile
   FloorSound[13][70] = "MISC_19B"; //Check - DVII Tile
   FloorSound[13][71] = "MISC_19C"; //Check - DVII Tile
   FloorSound[13][72] = "MISC_19D"; //Check - DVII Tile
   FloorSound[13][73] = "MISC_19E"; //Check - DVII Tile
   FloorSound[13][74] = "MISC_19F"; //Check - DVII Tile
   FloorSound[13][75] = "MISC_19G"; //Check - DVII Tile
   FloorSound[13][76] = "MISC_19H"; //Check - DVII Tile
   FloorSound[13][77] = "MISC_20A"; //Check - DVII Tile
   FloorSound[13][78] = "MISC_20B"; //Check - DVII Tile
   FloorSound[13][79] = "MISC_20C"; //Check - DVII Tile
   FloorSound[13][80] = "MISC_20D"; //Check - DVII Tile
   FloorSound[13][81] = "MISC_20E"; //Check - DVII Tile
   FloorSound[13][82] = "MISC_20F"; //Check - DVII Tile
   FloorSound[13][83] = "MISC_20G"; //Check - DVII Tile
   FloorSound[13][84] = "MISC_20H"; //Check - DVII Tile
   FloorSound[13][85] = "MT_02"; //Check - DVII Tile
   FloorSound[13][86] = "MT_03"; //Check - DVII Tile
   FloorSound[13][87] = "MT_04"; //Check - DVII Tile
   FloorSound[13][88] = "MT_05"; //Check - DVII Tile
   FloorSound[13][89] = "MT_06"; //Check - DVII Tile
   FloorSound[13][90] = "MT_06E"; //Check - DVII Tile
   FloorSound[13][91] = "MT_07"; //Check - DVII Tile
   FloorSound[13][92] = "MT_08"; //Check - DVII Tile
   FloorSound[13][93] = "MT_09"; //Check - DVII Tile
   FloorSound[13][94] = "MT_10"; //Check - DVII Tile
   FloorSound[13][95] = "MT_11"; //Check - DVII Tile
   FloorSound[13][96] = "MT_12"; //Check - DVII Tile
   FloorSound[13][97] = "MT_13"; //Check - DVII Tile
   FloorSound[13][98] = "MT_14"; //Check - DVII Tile
   FloorSound[13][99] = "MT_15"; //Check - DVII Tile
   FloorSound[13][100] = "MT_16"; //Check - DVII Tile
   FloorSound[13][101] = "MT_17"; //Check - DVII Tile
   FloorSound[13][102] = "MT_18"; //Check - DVII Tile
   FloorSound[13][103] = "MT_19"; //Check - DVII Tile
   FloorSound[13][104] = "MT_20"; //Check - DVII Tile
   FloorSound[13][105] = "MT_20C"; //Check - DVII Tile
   FloorSound[13][106] = "MT_21"; //Check - DVII Tile
   FloorSound[13][107] = "MT_21C"; //Check - DVII Tile
   FloorSound[13][108] = "MT_22"; //Check - DVII Tile
   FloorSound[13][109] = "MT_22C"; //Check - DVII Tile
   FloorSound[13][110] = "MT_22E"; //Check - DVII Tile
   FloorSound[13][111] = "MT_22G"; //Check - DVII Tile
   FloorSound[13][112] = "MT_23"; //Check - DVII Tile
   FloorSound[13][113] = "MT_23C"; //Check - DVII Tile
   FloorSound[13][114] = "MT_23E"; //Check - DVII Tile
   FloorSound[13][115] = "MT_23G"; //Check - DVII Tile
   FloorSound[13][116] = "GREEN_06"; //Check - DVII Tile
   FloorSound[13][117] = "GREEN_E1"; //Check - DVII Tile
   FloorSound[13][118] = "GREEN_E3"; //Check - DVII Tile
   FloorSound[13][119] = "GREEN_E5"; //Check - DVII Tile
   FloorSound[13][120] = "GREEN_E7"; //Check - DVII Tile
   FloorSound[13][121] = "GREEN_E9"; //Check - DVII Tile
   FloorSound[13][122] = "GREEN_EA"; //Check - DVII Tile
   FloorSound[13][123] = "GREEN_EC"; //Check - DVII Tile
   FloorSound[13][124] = "GREEN_EE"; //Check - DVII Tile
   FloorSound[13][125] = "GREEN_EG"; //Check - DVII Tile
   FloorSound[13][126] = "GREEN_EI"; //Check - DVII Tile
   FloorSound[13][127] = "GREEN_EK"; //Check - DVII Tile
   FloorSound[13][128] = "GREEN_EM"; //Check - DVII Tile
   FloorSound[13][129] = "GREEN_EO"; //Check - DVII Tile
   FloorSound[13][130] = "GREEN_EQ"; //Check - DVII Tile
   FloorSound[13][131] = "GREEN_G1"; //Check - DVII Tile
   FloorSound[13][132] = "GREEN_J1"; //Check - DVII Tile
   FloorSound[13][133] = "GREEN_J2"; //Check - DVII Tile
   FloorSound[13][134] = "TKEYB_1A"; //Check - DVII Tile
   FloorSound[13][135] = "TKEYB_1B"; //Check - DVII Tile
   FloorSound[13][136] = "TKEYB_1C"; //Check - DVII Tile
   FloorSound[13][137] = "TKEYB_1D"; //Check - DVII Tile
   FloorSound[13][138] = "TKEYB_2A"; //Check - DVII Tile
   FloorSound[13][139] = "TKEYB_2B"; //Check - DVII Tile
   FloorSound[13][140] = "TKEYB_2C"; //Check - DVII Tile
   FloorSound[13][141] = "TKEYB_2D"; //Check - DVII Tile
   FloorSound[13][142] = "TKEYR_1A"; //Check - DVII Tile
   FloorSound[13][143] = "TKEYR_1B"; //Check - DVII Tile
   FloorSound[13][144] = "TKEYR_1C"; //Check - DVII Tile
   FloorSound[13][145] = "TKEYR_1D"; //Check - DVII Tile
   FloorSound[13][146] = "TKEYR_2A"; //Check - DVII Tile
   FloorSound[13][147] = "TKEYR_2B"; //Check - DVII Tile
   FloorSound[13][148] = "TKEYR_2C"; //Check - DVII Tile
   FloorSound[13][149] = "TKEYR_2D"; //Check - DVII Tile
   FloorSound[13][150] = "TKEYY_1A"; //Check - DVII Tile
   FloorSound[13][151] = "TKEYY_1B"; //Check - DVII Tile
   FloorSound[13][152] = "TKEYY_1C"; //Check - DVII Tile
   FloorSound[13][153] = "TKEYY_1D"; //Check - DVII Tile
   FloorSound[13][154] = "TKEYY_2A"; //Check - DVII Tile
   FloorSound[13][155] = "TKEYY_2B"; //Check - DVII Tile
   FloorSound[13][156] = "TKEYY_2C"; //Check - DVII Tile
   FloorSound[13][157] = "TKEYY_2D"; //Check - DVII Tile
   FloorSound[13][158] = "STES1"; //Check - DVII Tile
   FloorSound[13][159] = "STES2"; //Check - DVII Tile
   FloorSound[13][160] = "CONS2_1"; //Check - DVII Tile
   FloorSound[13][161] = "CONS2_2"; //Check - DVII Tile
   FloorSound[13][162] = "CONS2_3"; //Check - DVII Tile
   FloorSound[13][163] = "CONS2_4"; //Check - DVII Tile
   FloorSound[13][164] = "RY_12"; //Check - DVII Tile
   FloorSound[13][165] = "TLRA1"; //Check - DVII Tile
   FloorSound[13][166] = "TLRA2"; //Check - DVII Tile
   FloorSound[13][167] = "TLRA3"; //Check - DVII Tile
   FloorSound[13][168] = "TLRA4"; //Check - DVII Tile
   FloorSound[13][169] = "TLRB1"; //Check - DVII Tile
   FloorSound[13][170] = "TLRB2"; //Check - DVII Tile
   FloorSound[13][171] = "TLRB3"; //Check - DVII Tile
   FloorSound[13][172] = "TLRB4"; //Check - DVII Tile
   FloorSound[13][173] = "STET1"; //Check - DVII Tile
   FloorSound[13][174] = "STET2"; //Check - DVII Tile
   FloorSound[13][175] = "TFH_01"; //Check - DVII Tile
   FloorSound[13][176] = "ZB1_01"; //Check - DVII Tile
   FloorSound[13][177] = "ZB1_02"; //Check - DVII Tile
   FloorSound[13][178] = "ZB1_03"; //Check - DVII Tile
   FloorSound[13][179] = "ZB1_04"; //Check - DVII Tile
   FloorSound[13][180] = "ZB1_05"; //Check - DVII Tile
   FloorSound[13][181] = "ZB1_99"; //Check - DVII Tile
   FloorSound[13][182] = "ZB2_01"; //Check - DVII Tile
   FloorSound[13][183] = "ZB2_02"; //Check - DVII Tile
   FloorSound[13][184] = "ZB2_03"; //Check - DVII Tile
   FloorSound[13][185] = "ZB2_04"; //Check - DVII Tile
   FloorSound[13][186] = "ZB2_05"; //Check - DVII Tile
   FloorSound[13][187] = "ZB2_99"; //Check - DVII Tile
   FloorSound[13][188] = "ZR1_01"; //Check - DVII Tile
   FloorSound[13][189] = "ZR1_02"; //Check - DVII Tile
   FloorSound[13][190] = "ZR1_03"; //Check - DVII Tile
   FloorSound[13][191] = "ZR1_04"; //Check - DVII Tile
   FloorSound[13][192] = "ZR1_05"; //Check - DVII Tile
   FloorSound[13][193] = "ZR1_99"; //Check - DVII Tile
   FloorSound[13][194] = "ZR2_01"; //Check - DVII Tile
   FloorSound[13][195] = "ZR2_02"; //Check - DVII Tile
   FloorSound[13][196] = "ZR2_03"; //Check - DVII Tile
   FloorSound[13][197] = "ZR2_04"; //Check - DVII Tile
   FloorSound[13][198] = "ZR2_05"; //Check - DVII Tile
   FloorSound[13][199] = "ZR2_99"; //Check - DVII Tile
   FloorSound[13][200] = "ZY1_01"; //Check - DVII Tile
   FloorSound[13][201] = "ZY1_02"; //Check - DVII Tile
   FloorSound[13][202] = "ZY1_03"; //Check - DVII Tile
   FloorSound[13][203] = "ZY1_04"; //Check - DVII Tile
   FloorSound[13][204] = "ZY1_05"; //Check - DVII Tile
   FloorSound[13][205] = "ZY1_99"; //Check - DVII Tile
   FloorSound[13][206] = "ZY2_01"; //Check - DVII Tile
   FloorSound[13][207] = "ZY2_02"; //Check - DVII Tile
   FloorSound[13][208] = "ZY2_03"; //Check - DVII Tile
   FloorSound[13][209] = "ZY2_04"; //Check - DVII Tile
   FloorSound[13][210] = "ZY2_05"; //Check - DVII Tile
   FloorSound[13][211] = "ZY2_99"; //Check - DVII Tile
   FloorSound[13][212] = "ZG1_01"; //Check - DVII Tile
   FloorSound[13][213] = "ZG1_02"; //Check - DVII Tile
   FloorSound[13][214] = "ZG1_03"; //Check - DVII Tile
   FloorSound[13][215] = "ZG1_04"; //Check - DVII Tile
   FloorSound[13][216] = "ZG1_05"; //Check - DVII Tile
   FloorSound[13][217] = "ZG1_99"; //Check - DVII Tile
   FloorSound[13][218] = "ZG2_01"; //Check - DVII Tile
   FloorSound[13][219] = "ZG2_02"; //Check - DVII Tile
   FloorSound[13][220] = "ZG2_03"; //Check - DVII Tile
   FloorSound[13][221] = "ZG2_04"; //Check - DVII Tile
   FloorSound[13][222] = "ZG2_05"; //Check - DVII Tile
   FloorSound[13][223] = "ZG2_99"; //Check - DVII Tile
   FloorSound[13][224] = "U25P01"; //Check - DVII Tile
   FloorSound[13][225] = -1;

   // Hard Floors, Second Section ---ADD TO THIS ONE---
   FloorSound[14][0] = "floor/hard";
   FloorSound[14][1] = "GREEN_17"; //Check - DVII Tile
   FloorSound[14][2] = "GREEN_18"; //Check - DVII Tile
   FloorSound[14][3] = "GREEN_19"; //Check - DVII Tile
   FloorSound[14][4] = "GREEN_24"; //Check - DVII Tile
   FloorSound[14][5] = "GREEN_26"; //Check - DVII Tile
   FloorSound[14][6] = "GREEN_27"; //Check - DVII Tile
   FloorSound[14][7] = "GREEN_A1"; //Check - DVII Tile
   FloorSound[14][8] = "GREEN_A2"; //Check - DVII Tile
   FloorSound[14][9] = "GREEN_B1"; //Check - DVII Tile
   FloorSound[14][10] = "GREEN_B2"; //Check - DVII Tile
   FloorSound[14][11] = "GREEN_A1"; //Check - DVII Tile
   FloorSound[14][12] = "GREEN_C5"; //Check - DVII Tile
   FloorSound[14][13] = "GREEN_D1"; //Check - DVII Tile
   FloorSound[14][14] = "GREEN_D3"; //Check - DVII Tile
   FloorSound[14][15] = "CEMENS0"; //Check - DVII Tile
   FloorSound[14][16] = "CEMENS0J"; //Check - DVII Tile
   FloorSound[14][17] = "CEMENS0M"; //Check - DVII Tile
   FloorSound[14][18] = "CEMENS1"; //Check - DVII Tile
   FloorSound[14][19] = "CEMENS2"; //Check - DVII Tile
   FloorSound[14][20] = "CEMENS2B"; //Check - DVII Tile
   FloorSound[14][21] = "C01"; //Check - DVII Tile
   FloorSound[14][22] = "C02"; //Check - DVII Tile
   FloorSound[14][23] = "C03"; //Check - DVII Tile
   FloorSound[14][24] = "C04"; //Check - DVII Tile
   FloorSound[14][25] = "AZTC_01"; //Check - DVII Tile
   FloorSound[14][26] = "AZTC_02"; //Check - DVII Tile
   FloorSound[14][27] = "AZTC_03"; //Check - DVII Tile
   FloorSound[14][28] = "AZTC_04"; //Check - DVII Tile
   FloorSound[14][29] = "DEM1_7"; //Check - DVII Tile
   FloorSound[14][30] = "DEM2_1"; //Check - DVII Tile
   FloorSound[14][31] = "DEM2_2"; //Check - DVII Tile
   FloorSound[14][32] = "DEM2_3"; //Check - DVII Tile
   FloorSound[14][33] = "DEM2_4"; //Check - DVII Tile
   FloorSound[14][34] = "ROCK21"; //Check - DVII Tile
   FloorSound[14][35] = "RY_04"; //Check - DVII Tile
   FloorSound[14][36] = "RY_06"; //Check - DVII Tile
   FloorSound[14][37] = "RY_13"; //Check - DVII Tile
   FloorSound[14][38] = "RY_15"; //Check - DVII Tile
   FloorSound[14][39] = "RY_19"; //Check - DVII Tile
   FloorSound[14][40] = "RY_20"; //Check - DVII Tile
   FloorSound[14][41] = "RY_21"; //Check - DVII Tile
   FloorSound[14][42] = "RY_22"; //Check - DVII Tile
   FloorSound[14][43] = "EH01A"; //Check - DVII Tile
   FloorSound[14][44] = "EH01B"; //Check - DVII Tile
   FloorSound[14][45] = "EH01C"; //Check - DVII Tile
   FloorSound[14][46] = "EH01D"; //Check - DVII Tile
   FloorSound[14][47] = "EH02A"; //Check - DVII Tile
   FloorSound[14][48] = "EH02B"; //Check - DVII Tile
   FloorSound[14][49] = "EH02C"; //Check - DVII Tile
   FloorSound[14][50] = "EH02D"; //Check - DVII Tile
   FloorSound[14][51] = "EH03A"; //Check - DVII Tile
   FloorSound[14][52] = "EH03B"; //Check - DVII Tile
   FloorSound[14][53] = "EH04A"; //Check - DVII Tile
   FloorSound[14][54] = "EH04B"; //Check - DVII Tile
   FloorSound[14][55] = "EH05A"; //Check - DVII Tile
   FloorSound[14][56] = "EH06A"; //Check - DVII Tile
   FloorSound[14][57] = "EH07A"; //Check - DVII Tile
   FloorSound[14][58] = "EH07B"; //Check - DVII Tile
   FloorSound[14][59] = "EH07C"; //Check - DVII Tile
   FloorSound[14][60] = "EH07D"; //Check - DVII Tile
   FloorSound[14][61] = "EH07E"; //Check - DVII Tile
   FloorSound[14][62] = "EH07F"; //Check - DVII Tile
   FloorSound[14][63] = "EH07G"; //Check - DVII Tile
   FloorSound[14][64] = "EH07H"; //Check - DVII Tile
   FloorSound[14][65] = "EH08A"; //Check - DVII Tile
   FloorSound[14][66] = "EH08B"; //Check - DVII Tile
   FloorSound[14][67] = "EH08C"; //Check - DVII Tile
   FloorSound[14][68] = "EH08D"; //Check - DVII Tile
   FloorSound[14][69] = "EH08E"; //Check - DVII Tile
   FloorSound[14][70] = "EH08F"; //Check - DVII Tile
   FloorSound[14][71] = "EH08G"; //Check - DVII Tile
   FloorSound[14][72] = "EH08H"; //Check - DVII Tile
   FloorSound[14][73] = "EG01A"; //Check - DVII Tile
   FloorSound[14][74] = "EG01B"; //Check - DVII Tile
   FloorSound[14][75] = "EG01C"; //Check - DVII Tile
   FloorSound[14][76] = "EG01D"; //Check - DVII Tile
   FloorSound[14][77] = "EG02A"; //Check - DVII Tile
   FloorSound[14][78] = "EG02B"; //Check - DVII Tile
   FloorSound[14][79] = "EG02C"; //Check - DVII Tile
   FloorSound[14][80] = "EG02D"; //Check - DVII Tile
   FloorSound[14][81] = "EG03A"; //Check - DVII Tile
   FloorSound[14][82] = "EG03B"; //Check - DVII Tile
   FloorSound[14][83] = "EG04A"; //Check - DVII Tile
   FloorSound[14][84] = "EG04B"; //Check - DVII Tile
   FloorSound[14][85] = "EG05A"; //Check - DVII Tile
   FloorSound[14][86] = "EG06A"; //Check - DVII Tile
   FloorSound[14][87] = "EG07A"; //Check - DVII Tile
   FloorSound[14][88] = "EG07B"; //Check - DVII Tile
   FloorSound[14][89] = "EG07C"; //Check - DVII Tile
   FloorSound[14][90] = "EG07D"; //Check - DVII Tile
   FloorSound[14][91] = "EG07E"; //Check - DVII Tile
   FloorSound[14][92] = "EG07F"; //Check - DVII Tile
   FloorSound[14][93] = "EG07G"; //Check - DVII Tile
   FloorSound[14][94] = "EG07H"; //Check - DVII Tile
   FloorSound[14][95] = "EG08A"; //Check - DVII Tile
   FloorSound[14][96] = "EG08B"; //Check - DVII Tile
   FloorSound[14][97] = "EG08C"; //Check - DVII Tile
   FloorSound[14][98] = "EG08D"; //Check - DVII Tile
   FloorSound[14][99] = "EG08E"; //Check - DVII Tile
   FloorSound[14][100] = "EG08F"; //Check - DVII Tile
   FloorSound[14][101] = "EG08G"; //Check - DVII Tile
   FloorSound[14][102] = "EG08H"; //Check - DVII Tile
   FloorSound[14][103] = "EG11A"; //Check - DVII Tile
   FloorSound[13][104] = "EG11B"; //Check - DVII Tile
   FloorSound[14][105] = "EG12A"; //Check - DVII Tile
   FloorSound[14][106] = "EG12B"; //Check - DVII Tile
   FloorSound[14][107] = "X14TA1"; //Check - DVII Tile
   FloorSound[14][108] = "X14TA2"; //Check - DVII Tile
   FloorSound[14][109] = "X14TB1"; //Check - DVII Tile
   FloorSound[14][110] = "X14TB2"; //Check - DVII Tile
   FloorSound[14][111] = "X22M01A"; //Check - DVII Tile
   FloorSound[14][112] = "X22M01B"; //Check - DVII Tile
   FloorSound[14][113] = "X22M01C"; //Check - DVII Tile
   FloorSound[14][114] = "X22M01D"; //Check - DVII Tile
   FloorSound[14][115] = "X22M02A"; //Check - DVII Tile
   FloorSound[14][116] = "X22M02B"; //Check - DVII Tile
   FloorSound[14][117] = "X22M02C"; //Check - DVII Tile
   FloorSound[14][118] = "X22M02D"; //Check - DVII Tile
   FloorSound[14][119] = "X22M03A"; //Check - DVII Tile
   FloorSound[14][120] = "X22M03B"; //Check - DVII Tile
   FloorSound[14][121] = "X22M03C"; //Check - DVII Tile
   FloorSound[14][122] = "X22M03D"; //Check - DVII Tile
   FloorSound[14][123] = "O_CRETE"; //Check - DVII Tile
   FloorSound[14][124] = "TANF01"; //Check - DVII Tile
   FloorSound[14][125] = "TANF02"; //Check - DVII Tile
   FloorSound[14][126] = "ZB7_01"; //Check - DVII Tile
   FloorSound[14][127] = "ZB7_02"; //Check - DVII Tile
   FloorSound[14][128] = "ZB7_03"; //Check - DVII Tile
   FloorSound[14][129] = "ZB7_04"; //Check - DVII Tile
   FloorSound[14][130] = "ZB7_05"; //Check - DVII Tile
   FloorSound[14][131] = "ZB7_99"; //Check - DVII Tile
   FloorSound[14][132] = "ZG7_01"; //Check - DVII Tile
   FloorSound[14][133] = "ZG7_02"; //Check - DVII Tile
   FloorSound[14][134] = "ZG7_03"; //Check - DVII Tile
   FloorSound[14][135] = "ZG7_04"; //Check - DVII Tile
   FloorSound[14][136] = "ZG7_05"; //Check - DVII Tile
   FloorSound[14][137] = "ZG7_99"; //Check - DVII Tile
   FloorSound[14][138] = "ZR7_01"; //Check - DVII Tile
   FloorSound[14][139] = "ZR7_02"; //Check - DVII Tile
   FloorSound[14][140] = "ZR7_03"; //Check - DVII Tile
   FloorSound[14][141] = "ZR7_04"; //Check - DVII Tile
   FloorSound[14][142] = "ZR7_05"; //Check - DVII Tile
   FloorSound[14][143] = "ZR7_99"; //Check - DVII Tile
   FloorSound[14][144] = "ZP1_01"; //Check - DVII Tile
   FloorSound[14][145] = "ZP1_02"; //Check - DVII Tile
   FloorSound[14][146] = "ZP1_03"; //Check - DVII Tile
   FloorSound[14][147] = "ZP1_04"; //Check - DVII Tile
   FloorSound[14][148] = "ZP1_05"; //Check - DVII Tile
   FloorSound[14][149] = "ZP1_99"; //Check - DVII Tile
   FloorSound[14][150] = "ZP2_01"; //Check - DVII Tile
   FloorSound[14][151] = "ZP2_02"; //Check - DVII Tile
   FloorSound[14][152] = "ZP2_03"; //Check - DVII Tile
   FloorSound[14][153] = "ZP2_04"; //Check - DVII Tile
   FloorSound[14][154] = "ZP2_05"; //Check - DVII Tile
   FloorSound[14][155] = "ZP2_99"; //Check - DVII Tile
   FloorSound[14][156] = "ZP3_01"; //Check - DVII Tile
   FloorSound[14][157] = "ZP3_02"; //Check - DVII Tile
   FloorSound[14][158] = "ZP3_03"; //Check - DVII Tile
   FloorSound[14][159] = "ZP3_04"; //Check - DVII Tile
   FloorSound[14][160] = "ZP3_05"; //Check - DVII Tile
   FloorSound[14][161] = "ZP3_99"; //Check - DVII Tile
   FloorSound[14][162] = -1;

}

SCRIPT 618 DEATH
{
   feet[PlayerNumber ()] = OFF;
}

//*******************
//***Named Scripts***
//*******************

// Emulates the various special scripts in Doom 1/2 mode [E1M8, MAP07, etc]
script "DoomMonsterDeathEmulation" OPEN
{
 int LevelTime, TotalCount1, TotalCount2, TotalCount3, Script1Done, Script1Delay, Script2Done, Script2Delay, Script3Done, Script3Delay, CheckAllScripts;

 LevelTime = Timer();
 if (ModType == 0) // Classic Doom 1/2
 {
  if (ClassicDoomType == 1) // Doom 1
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 8) // E1M8 [Barons (tag666)]
   {
    TotalCount1 = ThingCountName("HellKnight", 0);
    TotalCount1 += ThingCountName("DSHellKnight", 0);
    TotalCount1 += ThingCountName("StealthHellKnight", 0);
    TotalCount1 += ThingCountName("DSStealthHellKnight", 0);
    TotalCount1 += ThingCountName("BaronofHell", 0);
    TotalCount1 += ThingCountName("StealthBaron", 0);
    TotalCount1 += ThingCountName("DSBaronofHell", 0);
    TotalCount1 += ThingCountName("DSStealthBaron", 0);
    TotalCount1 += ThingCountName("Belphegor", 0);
    TotalCount1 += ThingCountName("StealthBelphegor", 0);
    TotalCount1 += ThingCountName("BruiserDemon", 0);
    TotalCount1 += ThingCountName("StealthBruiserDemon", 0);
    TotalCount1 += ThingCountName("ArchonOfHell", 0);
    TotalCount1 += ThingCountName("StealthArchonOfHell", 0);
    TotalCount1 += ThingCountName("PyroDemon", 0);
    TotalCount1 += ThingCountName("StealthPyroDemon", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToLowest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 18) // E2M8 [Cyberdemons (endlevel)]
   {
    TotalCount1 = ThingCountName("Cyberdemon", 0);
    TotalCount1 += ThingCountName("DSCyberdemon", 0);
    TotalCount1 += ThingCountName("StealthCyberdemon", 0);
    TotalCount1 += ThingCountName("DSStealthCyberdemon", 0);
    TotalCount1 += ThingCountName("Annihilator", 0);
    TotalCount1 += ThingCountName("StealthAnnihilator", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 139) { Exit_Normal(0); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28) // E3M8 [Spider Masterminds (endlevel)]
   {
    TotalCount1 = ThingCountName("SpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSSpiderMastermind", 0);
    TotalCount1 += ThingCountName("StealthSpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSStealthSpiderMastermind", 0);
    TotalCount1 += ThingCountName("Demolisher", 0);
    TotalCount1 += ThingCountName("StealthDemolisher", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 139) { Exit_Normal(0); Script1Done++; }
    }
    // PrintBold(d:LevelTime,s:" ",d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" ",d:Script2Done,s:" ",d:Script2Done,s:" ",d:Script3Done,s:" ",d:Script3Done);
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 36) // E4M6 [Cyberdemons (tag666)]
   {
    TotalCount1 = ThingCountName("Cyberdemon", 0);
    TotalCount1 += ThingCountName("DSCyberdemon", 0);
    TotalCount1 += ThingCountName("StealthCyberdemon", 0);
    TotalCount1 += ThingCountName("DSStealthCyberdemon", 0);
    TotalCount1 += ThingCountName("Annihilator", 0);
    TotalCount1 += ThingCountName("StealthAnnihilator", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Ceiling_RaiseToNearest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 38) // E4M8 [Spider Masterminds (tag666)]
   {
    TotalCount1 = ThingCountName("SpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSSpiderMastermind", 0);
    TotalCount1 += ThingCountName("StealthSpiderMastermind", 0);
    TotalCount1 += ThingCountName("DSStealthSpiderMastermind", 0);
    TotalCount1 += ThingCountName("Demolisher", 0);
    TotalCount1 += ThingCountName("StealthDemolisher", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToLowest(666, 10); Script1Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
  }
  else if (ClassicDoomType == 0) // Doom 2
  {
   if (GetLevelInfo(LEVELINFO_LEVELNUM) == 7) // MAP07 [Mancubi (tag666) and Arachnotrons (tag667)]
   {
    // Mancubi (tag666)
    TotalCount1 = ThingCountName("Fatso", 0);
    TotalCount1 += ThingCountName("DSFatso", 0);
    TotalCount1 += ThingCountName("StealthFatso", 0);
    TotalCount1 += ThingCountName("DSStealthFatso", 0);
    TotalCount1 += ThingCountName("Hectebus", 0);
    TotalCount1 += ThingCountName("StealthHectebus", 0);
    if (LevelTime > 2 && TotalCount1 <= 0 && Script1Done == 0) 
    { 
     Script1Delay++;
     if (Script1Delay > 34) { Floor_LowerToNearest(666, 10); Script1Done++; }
    }

    // Arachnotrons (tag667)
    TotalCount2 = ThingCountName("Arachnotron", 0);
    TotalCount2 += ThingCountName("DSArachnotron", 0);
    TotalCount2 += ThingCountName("StealthArachnotron", 0);
    TotalCount2 += ThingCountName("DSStealthArachnotron", 0);
    TotalCount2 += ThingCountName("FusionArachnotron", 0);
    TotalCount2 += ThingCountName("StealthFusionArachnotron", 0);
    TotalCount2 += ThingCountName("DSRailArachnotron", 0);
    TotalCount2 += ThingCountName("StealthRailArachnotron", 0);
    if (LevelTime > 2 && TotalCount2 <= 0 && Script2Done == 0) 
    { 
     Script2Delay++;
     if (Script2Delay > 34) { Floor_RaiseByTexture(667, 10); Script2Done++; }
    }
/*
    PrintBold(d:LevelTime,s:" \n",
              d:TotalCount1,s:" ",d:Script1Done,s:" ",d:Script1Delay,s:" \n",
              d:TotalCount2,s:" ",d:Script2Done,s:" ",d:Script2Delay,s:" \n",
              d:TotalCount3,s:" ",d:Script3Done,s:" ",d:Script3Delay);
*/
   }
  }
 }

 Delay(1);
 Restart;
}

// For the Sceptre's Spin Attack
script "WeaponAngleLoop" (int type, int cap, int setangle, int addangle)
{
 int result;
 if (type == 0) // check
 {
  if (MiscellaneousVars[20] >= cap) { SetResultValue(1); MiscellaneousVars[20] = 0; }
  else SetResultValue(0);
 }
 else // increment
 {
  MiscellaneousVars[20] += type;
  if (setangle > 0) result = MiscellaneousVars[20];
  if (addangle != 0) result += addangle;

  // Print(d:addangle);
  SetResultValue(result);
 }

 // Print(d:MiscellaneousVars[20],s:"/",d:cap);
}

// DEBUG SCRIPT: Cheat to set stats (pukename "GiveStats" [type] [value])
// [TYPE]
// 0 = Add Aeon Points
// 1 = Add Agility Value
// 2 = Add Defense Value
// 3 = Add Deftness Value
// 4 = Add Sorcery Value
// 5 = Add Strength Value
// 6 = Add Therapeusis Value
// 7-9 = Add Random Value

// 10 = Set Aeon Points
// 11 = Set Agility Value
// 12 = Set Defense Value
// 13 = Set Deftness Value
// 14 = Set Sorcery Value
// 15 = Set Strength Value
// 16 = Set Therapeusis Value
// 17-19 = Set Random Value

script "GiveStats" (int type, int value)
{
 if (type == 0) MiscellaneousVars[25] += value; // Add Aeon Points
 if (type == 1) MiscellaneousVars[31] += value; // Add Agility
 if (type == 2) MiscellaneousVars[32] += value; // Add Defense
 if (type == 3) MiscellaneousVars[33] += value; // Add Deftness
 if (type == 4) MiscellaneousVars[34] += value; // Add Sorcery
 if (type == 5) MiscellaneousVars[35] += value; // Add Strength
 if (type == 6) MiscellaneousVars[36] += value; // Add Therapeusis
 if (type > 6 && type < 10)
 {
  if (random(0,6) == 0) MiscellaneousVars[25] += value; // Add Aeon Points
  if (random(0,6) == 1) MiscellaneousVars[31] += value; // Add Agility
  if (random(0,6) == 2) MiscellaneousVars[32] += value; // Add Defense
  if (random(0,6) == 3) MiscellaneousVars[33] += value; // Add Deftness
  if (random(0,6) == 4) MiscellaneousVars[34] += value; // Add Sorcery
  if (random(0,6) == 5) MiscellaneousVars[35] += value; // Add Strength
  if (random(0,6) == 6) MiscellaneousVars[36] += value; // Add Therapeusis
 }
 if (type == 10) MiscellaneousVars[25] = value; // Set Aeon Points
 if (type == 11) MiscellaneousVars[31] = value; // Set Agility
 if (type == 12) MiscellaneousVars[32] = value; // Set Defense
 if (type == 13) MiscellaneousVars[33] = value; // Set Deftness
 if (type == 14) MiscellaneousVars[34] = value; // Set Sorcery
 if (type == 15) MiscellaneousVars[35] = value; // Set Strength
 if (type == 16) MiscellaneousVars[36] = value; // Set Therapeusis
 if (type > 16 && type < 20)
 {
  if (random(0,6) == 0) MiscellaneousVars[25] = value; // Set Aeon Points
  if (random(0,6) == 1) MiscellaneousVars[31] = value; // Set Agility
  if (random(0,6) == 2) MiscellaneousVars[32] = value; // Set Defense
  if (random(0,6) == 3) MiscellaneousVars[33] = value; // Set Deftness
  if (random(0,6) == 4) MiscellaneousVars[34] = value; // Set Sorcery
  if (random(0,6) == 5) MiscellaneousVars[35] = value; // Set Strength
  if (random(0,6) == 6) MiscellaneousVars[36] = value; // Set Therapeusis
 }

 // Lower End Limits
 if (MiscellaneousVars[25] < 0) MiscellaneousVars[25] = 0;
 if (MiscellaneousVars[31] < 1) MiscellaneousVars[31] = 1;
 if (MiscellaneousVars[32] < 1) MiscellaneousVars[32] = 1;
 if (MiscellaneousVars[33] < 1) MiscellaneousVars[33] = 1;
 if (MiscellaneousVars[34] < 1) MiscellaneousVars[34] = 1;
 if (MiscellaneousVars[35] < 1) MiscellaneousVars[35] = 1;
 if (MiscellaneousVars[36] < 1) MiscellaneousVars[36] = 1;

 // Higher End Limits
 if (MiscellaneousVars[25] > 3072) MiscellaneousVars[25] = 3072;
 if (MiscellaneousVars[31] > 512) MiscellaneousVars[31] = 512;
 if (MiscellaneousVars[32] > 512) MiscellaneousVars[32] = 512;
 if (MiscellaneousVars[33] > 512) MiscellaneousVars[33] = 512;
 if (MiscellaneousVars[34] > 512) MiscellaneousVars[34] = 512;
 if (MiscellaneousVars[35] > 512) MiscellaneousVars[35] = 512;
 if (MiscellaneousVars[36] > 512) MiscellaneousVars[36] = 512;
}

// DEBUG SCRIPT: "Pukename ExpCheat [number of experience to add/subtract/set to] [EXP type] [EXP Increment Type]"
script "ExpCheat" (int EXPAmount, int EXPType, int EXPIncType)
{
 // EXPType = 0 is Normal EXP, 1 is Sceptre EXP, 2 is Both Types
 // EXPIncType = 0 is to add, 1 is to subtract, 2 is to set
 if (EXPType == 0)
 {
  if (EXPIncType == 0) Experience += EXPAmount;
  if (EXPIncType == 1) Experience -= EXPAmount;
  if (EXPIncType == 2) Experience = EXPAmount;
  if (Experience < 0) Experience = 0;
 }
 if (EXPType == 1)
 {
  if (EXPIncType == 0) SceptreLevelEXP += EXPAmount;
  if (EXPIncType == 1) SceptreLevelEXP -= EXPAmount;
  if (EXPIncType == 2) SceptreLevelEXP = EXPAmount;
  if (SceptreLevelEXP < 0) SceptreLevelEXP = 0;
 }
 if (EXPType == 2)
 {
  if (EXPIncType == 0) Experience += EXPAmount;
  if (EXPIncType == 1) Experience -= EXPAmount;
  if (EXPIncType == 2) Experience = EXPAmount;
  if (Experience < 0) Experience = 0;
  if (EXPIncType == 0) SceptreLevelEXP += EXPAmount;
  if (EXPIncType == 1) SceptreLevelEXP -= EXPAmount;
  if (EXPIncType == 2) SceptreLevelEXP = EXPAmount;
  if (SceptreLevelEXP < 0) SceptreLevelEXP = 0;
 }
}

script "HellcoreFireMode" (int Check, int WeaponID)
{
 // Print(d:Check,s:" ",d:WeaponID);
 if (Check > 0)
 {
  if (WeaponID == 0) SetResultValue(MiscellaneousVars[132]); // Bruiser Fist
  if (WeaponID == 1) SetResultValue(MiscellaneousVars[133]); // Archon Fist
  if (WeaponID == 2) SetResultValue(MiscellaneousVars[134]); // Pyro Fist
  if (WeaponID == 3) SetResultValue(MiscellaneousVars[135]); // Diabloist Hand
 }
 else
 {
  if (WeaponID == 0) // Bruiser Fist
  {
   MiscellaneousVars[132]++;
   if (MiscellaneousVars[132] > 2) MiscellaneousVars[132] = 0;
   if (MiscellaneousVars[132] == 0) Print(s:"'Spread Wave' Selected.");
   if (MiscellaneousVars[132] == 1) Print(s:"'Bruiser Blast' Selected.");
   if (MiscellaneousVars[132] == 2) Print(s:"'Ground Wave' Selected.");
  }
  if (WeaponID == 1) // Archon Fist
  {
   MiscellaneousVars[133]++;
   if (MiscellaneousVars[133] > 2) MiscellaneousVars[133] = 0;
   if (MiscellaneousVars[133] == 0) Print(s:"'Tri-Plasma' Selected.");
   if (MiscellaneousVars[133] == 1) Print(s:"'Plasma Wave' Selected.");
   if (MiscellaneousVars[133] == 2) Print(s:"'Comet Attack' Selected.");
  }
  if (WeaponID == 2) // Pyro Fist
  {
   MiscellaneousVars[134]++;
   if (MiscellaneousVars[134] > 3) MiscellaneousVars[134] = 0;
   if (MiscellaneousVars[134] == 0) Print(s:"'Pyromatic Shot' Selected.");
   if (MiscellaneousVars[134] == 1) Print(s:"'Pyroball' Selected.");
   if (MiscellaneousVars[134] == 2) Print(s:"'Pyromatic Firebomb' Selected.");
   if (MiscellaneousVars[134] == 3) Print(s:"'Pyroportation' Selected.");
  }
  if (WeaponID == 3) // Diabloist Hand
  {
   MiscellaneousVars[135]++;
   if (MiscellaneousVars[135] > 4) MiscellaneousVars[135] = 0;
   if (MiscellaneousVars[135] == 0) Print(s:"'Gravitaton Glare' Selected.");
   if (MiscellaneousVars[135] == 1) Print(s:"'Diabloic Immolation' Selected.");
   if (MiscellaneousVars[135] == 2) Print(s:"'Fire Thrower' Selected.");
   if (MiscellaneousVars[135] == 3) Print(s:"'Fire Blast' Selected.");
   if (MiscellaneousVars[135] == 4) Print(s:"'Snakes of Fire' Selected.");
  }
 }
}

script "BowAntics" (int type)
{
  int buttons;
  buttons = GetPlayerInput(0, INPUT_BUTTONS); 
  if (buttons & BT_ALTATTACK) SetResultValue(1);
  else if (buttons & BT_ATTACK) SetResultValue(2);
  else SetResultValue(0);
}

script "UseStaminaAttack" (int amount, int check)
{
 if (check > 0)
 {
  if (MiscellaneousVars[21] >= amount) 
  {
   if (check > 1)
   {
    MiscellaneousVars[21] -= amount;
    if (MiscellaneousVars[21] < 1) MiscellaneousVars[21] = 0;
   }
   SetResultValue(1); 
  }
  else SetResultValue(0);
 }
 else
 {
  MiscellaneousVars[21] -= amount;
  if (MiscellaneousVars[21] < 1) MiscellaneousVars[21] = 0;
 }
}

script "MaxHPDropChance" (void)
{
 int Chance, roll;

 if (GameSkill() == SKILL_VERY_EASY) Chance = 144; // 9 out of 16
 else if (GameSkill() == SKILL_EASY) Chance = 128; // 8 out of 16
 else if (GameSkill() == SKILL_NORMAL) Chance = 112; // 7 out of 16
 else if (GameSkill() == SKILL_HARD) Chance = 96; // 6 out of 16
 else if (GameSkill() == SKILL_VERY_HARD) Chance = 64; // 4 out of 16
 else Chance = 112;

 roll = random(1,256);
 // PrintBold(d:roll,s:"/",d:Chance);
 SetResultValue(0);
 if (roll <= Chance) SetResultValue(1);
}