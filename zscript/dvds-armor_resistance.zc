class PlayerStatItem : Inventory 
{
	int previoushealth;
	int currenthealth;
	int outputdamage;
	
	float HPRegenTimer, HPDelayInterval;
	float HPDegenTimer, HPDelayInterval2;
	float MPRegenTimer, MPDelayInterval;
	float RuinousShieldDegenTimer, CursedShieldDegenTimer;
	float DivineRegenTimer, DivineRegenInterval;
	float DoveRegenTimer, DoveRegenInterval;
	float PoisonTimer, PoisonMaxInterval;
	int landdmgbonus;
	int heldtime;
	int PrevHealthRatio;
	int PoisonHits;

	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4;
	
	override void DoEffect()
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (!playeractor) { owner.A_TakeInventory("PlayerStatItem",9999); super.DoEffect(); } // Removes itself if given to a non-Aetherius Player Class

		String nm, nn, no, np;
		let weapon = owner.player.ReadyWeapon;
		int cheatcheck = owner.player.cheats;
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		double PlayerVelX = owner.vel.x;
		double PlayerVelY = owner.vel.y;
		double PlayerVelZ = owner.vel.z;
		int buttons = owner.GetPlayerInput(INPUT_BUTTONS);

		int FreezePlayer;
		int debugsurvival = dvdsdebug_showsurvivalstuff;
		int debugcrithits = dvdsdebug_showcriticalhitstuff;
		int debugevasion = dvdsdebug_showevadestuff;
		int debugstaminaregen = dvdsdebug_showstaminaregenstuff;
		int debugregenmana = dvdsdebug_showmanaregenstuff;
		int debuguncurse = dvdsdebug_shielduncursedisplay;
		int debugregenhealth = dvdsdebug_showhpregenstuff;
		int debugatkinfo = dvdsdebug_showplayeratkinformation;
		int debugpoisoninfo = dvdsdebug_poisonailmentdisplays;

		int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int PlayerLevel = CallACS("StatCheck",0);
		int PlayerMaxHP = CallACS("StatCheck",1);
		int MaxHealthLimit = PlayerMaxHP * 2;
		int PlayerMaxMP = CallACS("StatCheck",2);
		int PlayerAGL = CallACS("StatCheck",3);
		int PlayerDEF = CallACS("StatCheck",4);
		int PlayerDFT = CallACS("StatCheck",5);
		int PlayerSOR = CallACS("StatCheck",6);
		int PlayerSTR = CallACS("StatCheck",7);
		int PlayerTHE = CallACS("StatCheck",8);
		int PlayerJUMP = CallACS("StatCheck",9);
		int PlayerMASS = CallACS("StatCheck",10);
		int PlayerAeonPts = CallACS("StatCheck",11);
		int PlayerCurrentStamina = CallACS("StatCheck",12);
		int PlayerMaxStamina = CallACS("StatCheck",13);
		int PlayerCurrentMP = CallACS("StatCheck",14);
		int PlayerCurrentHealth = owner.health;
		int CharacterClass = CallACS("CheckCharacterClass");
		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);
		int FocusTimer = CallACS("MiscVarCheckDECORATE",231);
		int FocusHumTimer;

		int EvasionRate; // Based on 0.1% to 100.0% [though the displays only show full %]
		int AglEvadeCheck, DftEvadeCheck;
		int WeapEvadeAdd;
		int BasePerkFactor = 0;
		int PerkFactor = 0;
		int TotalMass = 100;
		int delaycount;
		int HealthRatio;

		//******************
		//*Get Health Ratio*
		//******************
		if (playeractor && PlayerMaxHP > 0)
		{
			HealthRatio = (PlayerCurrentHealth * 1000) / PlayerMaxHP;
			if (HealthRatio < 0) HealthRatio = 0;
			if (HealthRatio > 2000) HealthRatio = 2000;
		}
		
		
		
		
		
		//*********************
		//*Health Level Checks*
		//*********************
		if (playeractor)
		{
			if (PlayerCurrentHealth <= 0) { Owner.A_GiveInventory("PlayerIsDead", 1); }
			else
			{
				Owner.A_TakeInventory("PlayerIsDead", 1);
				if (HealthRatio != PrevHealthRatio)
				{
					if (HealthRatio < 167)
					{
						if (HealthRatio < 21)
						{
							Owner.A_GiveInventory("CriticalHealth", 1);
							Owner.A_TakeInventory("LowHealth", 9999);
						}
						else 
						{
							Owner.A_GiveInventory("LowHealth", 1);
							Owner.A_TakeInventory("CriticalHealth", 9999);
						}
						Owner.A_TakeInventory("NormalHealth", 9999);
					}
					else 
					{
						Owner.A_GiveInventory("NormalHealth", 1);
						Owner.A_TakeInventory("LowHealth", 9999);
						Owner.A_TakeInventory("CriticalHealth", 9999);
					}
					if (PlayerCurrentHealth >= PlayerMaxHP) Owner.A_GiveInventory("FullHealth", 1); else Owner.A_TakeInventory("FullHealth", 1);
					
					PrevHealthRatio = HealthRatio;
				}
			}
		}
		
		
		
		
		
		//********************
		//*Skill Level Checks*
		//********************
		if (playeractor)
		{
			if (Skill <= 0)
			{
				if (Owner.CountInv("IsSkill1") == 0) Owner.A_GiveInventory("IsSkill1", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_GiveInventory("IsEasySkill", 1);
			}
			if (Skill == 1)
			{
				if (Owner.CountInv("IsSkill2") == 0) Owner.A_GiveInventory("IsSkill2", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_GiveInventory("IsEasySkill", 1);
			}
			if (Skill == 2)
			{
				if (Owner.CountInv("IsSkill3") == 0) Owner.A_GiveInventory("IsSkill3", 1);
			}
			if (Skill == 3)
			{
				if (Owner.CountInv("IsSkill4") == 0) Owner.A_GiveInventory("IsSkill4", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
			if (Skill == 4)
			{
				if (Owner.CountInv("IsSkill5") == 0) Owner.A_GiveInventory("IsSkill5", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
			if (Skill >= 5)
			{
				if (Owner.CountInv("IsSkill6") == 0) Owner.A_GiveInventory("IsSkill6", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
		}
		
		
		
		
		
		//**********************
		//**RadiusDamageFactor**
		//**********************
		if (playeractor)
		{
			currenthealth = owner.health;
			double TotalRDFactor = 1.00;

			double EWShieldRDFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldRDFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldRDFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldRDFactor *= 0.0268;
			}

			double PlayerFistBlockRDFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) PlayerFistBlockRDFactor *= 0.5;
			if (Owner.CountInv("FistPlayerBlock2") > 0) PlayerFistBlockRDFactor *= 0.375;
			if (Owner.CountInv("FistPlayerBlock3") > 0) PlayerFistBlockRDFactor *= 0.25;
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) PlayerFistBlockRDFactor *= 0.1;
			
			double MarineArmorRDFactor = 1.00;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) MarineArmorRDFactor -= 0.01;
				if (Owner.CountInv("DSBlueArmorClass") > 0) MarineArmorRDFactor -= 0.04;
				if (Owner.CountInv("DSStoneArmorClass1") > 0) MarineArmorRDFactor -= 0.15;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) MarineArmorRDFactor -= 0.075;
				if (Owner.CountInv("DSStoneArmorClass2") > 0) MarineArmorRDFactor -= 0.30;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) MarineArmorRDFactor -= 0.35;
			}

			double FloraArmorRDFactor = 1.00;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) FloraArmorRDFactor -= 0.20;
				if (Owner.CountInv("BalrogRing") > 0) FloraArmorRDFactor -= 0.25;
			}

			// "Demolition Expert" Perk
			double DemoExpertRDFactor = 1.00;
			DemoExpertRDFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) + (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
			if (DemoExpertRDFactor < 0.025) DemoExpertRDFactor = 0.025;

			// Death Rage [Invulnerablity?]
			double DeathRageRDFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageRDFactor = 0.0;
			
			// DQ Buffs
			double DQBuffRDFactor = 1.00;
			if (CallACS("GetBuffTimer",11) > 0) DQBuffRDFactor *= 0.50; // Buff
			if (CallACS("GetBuffTimer",14) > 0) DQBuffRDFactor *= 2.00; // Sap
			if (CallACS("GetBuffTimer",20) > 0) // Sleep
			{
				if (random(1,16) == 1) DQBuffRDFactor *= 5.0; else DQBuffRDFactor *= 1.25;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseRDFactor = 1.0;
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseRDFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseRDFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseRDFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseRDFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseRDFactor *= 0.06125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseRDFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseRDFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseRDFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseRDFactor *= 0.5;

			TotalRDFactor = 1.00
										* EWShieldRDFactor
										* PlayerFistBlockRDFactor
										* MarineArmorRDFactor
										* FloraArmorRDFactor
										* DemoExpertRDFactor
										* DeathRageRDFactor
										* DQBuffRDFactor
										* SceptreDefenseRDFactor;

			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor && playeractor.PlayerDefenseIgnoreFactor > 0.00)
			{
				BaseIgnoreFactor = (1.0 - TotalRDFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				TotalRDFactor += DefenseIgnoreFactor;
			}
			owner.RadiusDamageFactor = TotalRDFactor;

			int predmg = 0;
			if (playeractor && playeractor.mobjdmg > 0) 
			{
				predmg = playeractor.mobjdmg;
				playeractor.mobjdmg = 0;
			}
			if (dvdsdebug_playerdmgdisplays > 0 && predmg > 0) 
			{
				Console.Printf("    \czRADIUSDAMAGE\c-: \cxTotalRDFactor = %8f\c-, EWShieldRDFactor = %8f, PlayerFistBlockRDFactor = %8f, MarineArmorRDFactor = %8f, FloraArmorRDFactor = %8f, DemoExpertRDFactor = %8f, DeathRageRDFactor = %8f, DQBuffRDFactor = %8f, SceptreDefenseRDFactor = %8f", 
				TotalRDFactor, 
				EWShieldRDFactor, PlayerFistBlockRDFactor, 
				MarineArmorRDFactor, FloraArmorRDFactor, 
				DemoExpertRDFactor, DeathRageRDFactor, 
				DQBuffRDFactor, SceptreDefenseRDFactor);
			}
		}
		
		
		
		
		
		//********
		//**Mass**
		//********
		TotalMass = 100;
		if (playeractor)
		{
			if (CharacterClass == 0) // Deggaris
			{
				TotalMass = 116;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 27);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 8 levels for Deggaris [max of 25]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			if (CharacterClass == 1) // Illucia
			{
				TotalMass = 96;
				TotalMass += (PlayerDEF / 12);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 18);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 15);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 10 levels for Illucia [max of 20]
				TotalMass = TotalMass + (PlayerLevel / 10);
			}
			if (CharacterClass == 2) // Flora
			{
				TotalMass = 68;
				TotalMass += (PlayerDEF / 15);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 15);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 9);		// Therapeusis [Seeds]

				if (Owner.CountInv("SafeTeaShoes") > 0)						TotalMass += 1;
				if (Owner.CountInv("PearlyCorset") > 0)						TotalMass += 3;
				if (Owner.CountInv("WaterFlyingDress") > 0)				TotalMass += 4;
				if (Owner.CountInv("EvenstarNecklace") > 0)				TotalMass += 1;
				if (Owner.CountInv("CloakofEvasion") > 0)					TotalMass += 3;
				if (Owner.CountInv("AnubisCufflinks") > 0)				TotalMass += 2;
				if (Owner.CountInv("KissaBra") > 0)								TotalMass += 1;
				if (Owner.CountInv("BalrogRing") > 0)							TotalMass += 1;
				if (Owner.CountInv("DoveRibbon") > 0)							TotalMass += 2;
				if (Owner.CountInv("DivineShield") > 0)					{ TotalMass += 10; TotalMass *= 2; }
				if (Owner.CountInv("RuinousShield") > 0)				{ TotalMass -= 10; TotalMass /= 2; }

				if (Owner.CountInv("DSSpiritualExoskin1") > 0)	{ TotalMass += 4; TotalMass = TotalMass * 102 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin2") > 0)	{ TotalMass += 12; TotalMass = TotalMass * 106 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin3") > 0)	{ TotalMass += 30; TotalMass = TotalMass * 115 / 100;}

				if (Owner.CountInv("ShieldDefense") > 0)				{ TotalMass = TotalMass * 5 / 4; }
				if (Owner.CountInv("ShieldDefense2") > 0)				{ TotalMass = TotalMass * 3 / 2; }
				if (Owner.CountInv("ShieldDefense3") > 0)				{ TotalMass = TotalMass * 15 / 8; }
				
				// Add a point of mass for every 12 levels for Flora [max of 16/17]
				TotalMass = TotalMass + (PlayerLevel / 12);
			}
			if (CharacterClass == 8) // Ailish
			{
				TotalMass = 66;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]

				// Add a point of mass for every 13 levels for Ailish [max of 15]
				TotalMass = TotalMass + (PlayerLevel / 13);
			}
			if (CharacterClass == 9) // Petra
			{
				TotalMass = 70;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 23);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 13);		// Therapeusis [Seeds]

				// Add a point of mass for every 8 levels for Petra [max of 22]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			
			// Buff Timers
			if (CallACS("GetBuffTimer",4) > 0) TotalMass *= 128;	// 128x Mass when Invulnerable
			if (CallACS("GetBuffTimer",7) > 0) TotalMass *= 4;		// 4x Mass when using Divine Avatar
			if (CallACS("GetBuffTimer",11) > 0) TotalMass *= 2;		// 2x Mass when using Buff

			// Sauron Items
			if (Owner.CountInv("SauronHelmet") > 0)						{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	{ TotalMass += 6;  TotalMass = TotalMass * 106 / 100; }
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 104 / 100; }
			if (Owner.CountInv("SauronGauntlets") > 0)				{ TotalMass += 5;  TotalMass = TotalMass * 105 / 100; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 3;  TotalMass = TotalMass * 103 / 100; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 7;  TotalMass = TotalMass * 107 / 100; }
			if (Owner.CountInv("TheOneRing") > 0)							{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			
			// Fist Blocks
			if (Owner.CountInv("FistPlayerBlock") > 0)					TotalMass = TotalMass * 2;
			if (Owner.CountInv("FistPlayerBlock2") > 0)					TotalMass = TotalMass * 8 / 3;
			if (Owner.CountInv("FistPlayerBlock3") > 0)					TotalMass = TotalMass * 4;

			// Final Calculations
			owner.mass = TotalMass;
			CallACS("SetMiscellaneousVar",201,TotalMass); // Set to the Total Mass
			//Console.Printf("    Calculated Mass: %d [Real Mass: %d]", TotalMass, owner.mass);
		}
		
		
		
		
		
		//*********
		//**JumpZ**
		//*********
		if (playeractor)
		{
			double CharacterJumpZ = 8.0;
			if (CharacterClass == 0) CharacterJumpZ = 7.5;
			if (CharacterClass == 1) CharacterJumpZ = 8.5;
			if (CharacterClass == 2) CharacterJumpZ = 9.0;
			if (CharacterClass == 8) CharacterJumpZ = 7.0;
			if (CharacterClass == 9) CharacterJumpZ = 9.5;

			// Level
			double LevelJumpZ = 1.00;
			if (CharacterClass == 0) LevelJumpZ += (PlayerLevel * 0.00226);
			if (CharacterClass == 1) LevelJumpZ += (PlayerLevel * 0.00256);
			if (CharacterClass == 2) LevelJumpZ += (PlayerLevel * 0.00276);
			if (CharacterClass == 8) LevelJumpZ += (PlayerLevel * 0.00216);
			if (CharacterClass == 9) LevelJumpZ += (PlayerLevel * 0.00296);

			// AGL
			double AGLJumpZ = 1.00;
			if (CharacterClass == 0) AGLJumpZ += (PlayerAGL * 0.00076);
			if (CharacterClass == 1) AGLJumpZ += (PlayerAGL * 0.00086);
			if (CharacterClass == 2) AGLJumpZ += (PlayerAGL * 0.00093);
			if (CharacterClass == 8) AGLJumpZ += (PlayerAGL * 0.00070);
			if (CharacterClass == 9) AGLJumpZ += (PlayerAGL * 0.00100);

			// Armor
			double ArmorJumpZ = 1.00;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("SafeTeaShoes") > 0) 				ArmorJumpZ += 0.10;
				if (Owner.CountInv("PearlyCorset") > 0) 				ArmorJumpZ += 0.005;
				if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorJumpZ += 0.005;
				if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("CloakofEvasion") > 0)				ArmorJumpZ += 0.025;
				if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("KissaBra") > 0)							ArmorJumpZ += 0.025;
				if (Owner.CountInv("DivineShield") > 0)					ArmorJumpZ += 0.00625;
				if (Owner.CountInv("BalrogRing") > 0)						ArmorJumpZ += 0.0125;
				if (Owner.CountInv("DoveRibbon") > 0)						ArmorJumpZ += 0.05;
				if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorJumpZ += 0.0375;
			}
			else
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0)		ArmorJumpZ += 0.0334;
				if (Owner.CountInv("DSBlueArmorClass") > 0)			ArmorJumpZ += 0.05;
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		ArmorJumpZ += 0.0667;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	ArmorJumpZ += 0.09;
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		ArmorJumpZ += 0.0833;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	ArmorJumpZ += 0.095;
			}
			
			double SauronArmorJumpZ = 1.00;
			if (Owner.CountInv("SauronHelmet") > 0)						SauronArmorJumpZ -= 0.10;
			if (Owner.CountInv("SauronGauntlets") > 0)				SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("TheOneRing") > 0)							SauronArmorJumpZ += 0.25;

			double BuffJumpZ = 1.00;
			if (CallACS("GetBuffTimer",12) > 0) BuffJumpZ += 0.25;
			if (CallACS("GetBuffTimer",15) > 0) BuffJumpZ -= 0.25;

			double SceptreJumpZ = 1.00;
			if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreJumpZ -= 0.20;
			if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreJumpZ -= 0.10;
			if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreJumpZ -= 0.05;

			double DivineAvatarJumpZ = 1.00;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarJumpZ *= 2.00;

			double PerkFactorJumpZ = 1.0;
			PerkFactorJumpZ += ((CallACS("MiscVarCheckDECORATE",10009) * 0.05) + (CallACS("MiscVarCheckDECORATE",10010) * 0.125));

			double StaminaJumpZ = 1.0;
			int StaminaLevel;
			int StaminaMax = 10000;
			if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
			StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;
			if (dvds_staminaaffectsspeed > 0)
			{
				if (StaminaLevel < 157) StaminaJumpZ = 0.6625;
				if (StaminaLevel > 156 && StaminaLevel < 626) StaminaJumpZ = 0.7375;
				if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaJumpZ = 0.805;
				if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaJumpZ = 0.865;
				if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaJumpZ = 0.9175;
				if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaJumpZ = 0.9625;
				if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaJumpZ = 1.00;
				if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaJumpZ = 1.0375;
				if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaJumpZ = 1.0825;
				if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaJumpZ = 1.135;
				if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaJumpZ = 1.195;
				if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaJumpZ = 1.2625;
				if (StaminaLevel > 48750) StaminaJumpZ = 1.3375;
			}

			double FistBlockJumpZ = 1.00;
			if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockJumpZ = 0.75;
			if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockJumpZ = 0.825;
			if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockJumpZ = 0.90;
			
			double TotalJumpZ = CharacterJumpZ
												* LevelJumpZ
												* AGLJumpZ
												* ArmorJumpZ
												* SauronArmorJumpZ
												* BuffJumpZ
												* SceptreJumpZ
												* PerkFactorJumpZ
												* StaminaJumpZ
												* FistBlockJumpZ
												* DivineAvatarJumpZ;

			int TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			CallACS("SetMiscellaneousVar",200,TrueJumpHeight); // Set to the True Jump Height
			if (dvdsdebug_showmoveinformation > 0)
			{
				Console.Printf("    \cwTotalJumpZ:\c- \cw%8f\c- [\cxTrueJumpHeight:\c- \cx%d\c-], CharacterJumpZ: %8f, LevelJumpZ: %8f, AGLJumpZ: %8f, ArmorJumpZ: %8f, SauronArmorJumpZ: %8f, BuffJumpZ: %8f, SceptreJumpZ: %8f, PerkFactorJumpZ: %8f, StaminaJumpZ: %8f, FistBlockJumpZ: %8f, DivineAvatarJumpZ: %8f", 
														TotalJumpZ, TrueJumpHeight,
														CharacterJumpZ, LevelJumpZ, 
														AGLJumpZ, ArmorJumpZ, 
														SauronArmorJumpZ, BuffJumpZ, 
														SceptreJumpZ, PerkFactorJumpZ, 
														StaminaJumpZ, FistBlockJumpZ, 
														DivineAvatarJumpZ);
			}
		}
		
		
		
		
		
		//*****************
		//**Survival Rate**
		//*****************
		int SurvivalRate = CallACS("MiscVarCheckDECORATE",0);
		int SkillFactor;
		if (playeractor)
		{
			// 0.1% for every 2 levels (max of 50 or 5.0% [max of 100 or 10.0% for Flora at Level 200])
			SurvivalRate += (PlayerLevel / 2);
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 1 - Base]: %d\c-", SurvivalRate);

			SkillFactor = 0;
			// Every 3/4/5 Points of Defenses = 0.1% increase to Survivability Rate
			if (TrueGameSkill <= 0) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == 1) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == 2) SkillFactor = PlayerDEF / 4;
			if (TrueGameSkill == 3) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == 4) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == 5) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == 6) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == 7) SkillFactor = PlayerDEF / 7;
			if (TrueGameSkill >= 8) SkillFactor = PlayerDEF / 8;
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 2 - DefStat Check]: %d,\c- Added: %d, Difficulty Level", SurvivalRate, SkillFactor, TrueGameSkill);

			SkillFactor = 0;
			// Abhorrent's Equipment Set
			if (Owner.CountInv("SauronHelmet") > 0) SkillFactor += 175; // Helmet = 17.5%
			if (Owner.CountInv("SauronGauntlets") > 0) SkillFactor += 50; // Gauntlets (Deggaris) = 5.0%
			if (Owner.CountInv("SauronGauntletsIllucia") > 0) SkillFactor += 60; // Gauntlets (Illucia) = 6.0%
			if (Owner.CountInv("SauronGauntletsFlora") > 0) SkillFactor += 40; // Gauntlets (Flora) = 4.0%
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 80; // Gauntlets (Ailish) = 8.0%
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 70; // Gauntlets (Petra) = 7.0%
			if (Owner.CountInv("TheOneRing") > 0) SkillFactor += 333; // The One Ring = 33.3%
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 3 - Abhorrent's Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			SkillFactor = 0;
			if (CharacterClass != 2) // Deggaris and Illucia take advantage of Doom-equse Armor, however Flora, Ailish, and Petra cannot.
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 5; // Green Armor = 0.5% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 10; // Blue Armor = 1.0% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 16; // Stone Skin [1] = 1.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 44; // Diamond Skin [1] = 4.4% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 66; // Stone Skin [2] = 6.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 176; // Diamond Skin [2] = 17.6% [Deggaris and Illucia Only]
			}
			if (CharacterClass == 2) // Items only Flora can make use of
			{
				if (Owner.CountInv("DSSpiritualExoskin1") > 0) SkillFactor += 32; // Spiritual Exoskin = 3.2% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 96; // Greater Spiritual Exoskin = 9.6% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 288; // Perfected Spiritual Exoskin = 28.8% [Flora Only]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 100; // Anubis Cufflinks = 10.0% [Flora Only]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 150; // Dove Ribbon = 15.0% [Flora Only]
			}
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 4 - Armor Item Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			SkillFactor = 0;
			// Divine Avatar = (25.0% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",7) > 0)
			{
				SkillFactor = (1000 - SurvivalRate) / 4;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (CallACS("MiscVarCheckDECORATE",317) > 0)
			{
				SkillFactor = CallACS("MiscVarCheckDECORATE",317) * 11;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = 0;
			// Buff = (10.0% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",11) > 0)
			{
				SkillFactor = (1000 - SurvivalRate) / 10;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 7a - Buff Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			SkillFactor = 0;
			// Sap = (-10.0% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",14) > 0)
			{
				SkillFactor = (1000 - SurvivalRate) / 10;
				SurvivalRate -= SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 7b - Sap Check]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}
		
			SkillFactor = 0;
			// Life Up Perks = total of +6% Survival
			if (CallACS("MiscVarCheckDECORATE",10001) > 0 || CallACS("MiscVarCheckDECORATE",10002) > 0)
			{
				SkillFactor = ((CallACS("MiscVarCheckDECORATE",10001) * 6) + (CallACS("MiscVarCheckDECORATE",10002) * 15));
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 8 - LifeUp Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Kissa's Armored Brassiere = 25.0%
			if (Owner.CountInv("KissaBra") > 0)
			{
				SkillFactor += 250; 
				SurvivalRate += SkillFactor;
				if (SurvivalRate > 938) SurvivalRate = 938;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (Yes)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			else
			{
				if (SurvivalRate > 875) SurvivalRate = 875;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (No)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Ruinous Shield
			if (Owner.CountInv("RuinousShield") > 0)
			{
				SkillFactor = SurvivalRate - (SurvivalRate / 5); // Ruinous Shield divides Survival Rate by 5
				SurvivalRate /= 5;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 10 - Ruinous Shield]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			int survivecalcfactor = dvds_survivecalcfactor;
			if (survivecalcfactor < 10) survivecalcfactor = 10;
			if (survivecalcfactor > 1000) survivecalcfactor = 1000;
			SurvivalRate = SurvivalRate * survivecalcfactor / 100;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 11 - Survive-Factor Calc]: %d,\c- Previous: %d, SurvivalCalcFactor: %d", SurvivalRate, SkillFactor, survivecalcfactor);

			SkillFactor = SurvivalRate;
			// Invulnerability
			if (CallACS("GetBuffTimer",4) > 0)
			{
				SurvivalRate = 1000;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 12 - Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			// Death Rage's Invulnerability
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) 
			{
				SurvivalRate = 1000;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 12 - Death Rage Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}
			int SurviveRNGVal = random(1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",213,SurviveRNGVal);
			CallACS("MiscVarSetDECORATE",232,SurvivalRate);
			
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;
			
			if (debugsurvival > 0)
			{
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, [%d]", SurviveRNGVal, SurvivalRate, cheatcheck);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, [%d]", SurviveRNGVal, SurvivalRate, cheatcheck);
			}
		}
		
		
		
		
		
		//*******************
		//*RUINOUS SHIELD D:*
		//*******************
		// To be transplanted from ACS :V
		
		
		
		
		
		//******************************************************
		//*Hellcore Cooldown Process [25 tics = 1% of cooldown]*
		//******************************************************
		// To be transplanted from ACS :V
		
		
		
		
		//*****************
		//**Critical Hits**
		//*****************
		int CriticalHitRate = CallACS("MiscVarCheckDECORATE",0);
		if (playeractor)
		{
			SkillFactor = 0;
			if (TrueGameSkill <= 0) CriticalHitRate /= 3;
			if (TrueGameSkill == 1) CriticalHitRate /= 4;
			if (TrueGameSkill == 2) CriticalHitRate /= 5; 
			if (TrueGameSkill == 3) CriticalHitRate /= 6; 
			if (TrueGameSkill == 4) CriticalHitRate /= 7;
			if (TrueGameSkill == 5) CriticalHitRate /= 7;
			if (TrueGameSkill == 6) CriticalHitRate /= 8;
			if (TrueGameSkill == 7) CriticalHitRate /= 8;
			if (TrueGameSkill >= 8) CriticalHitRate /= 9;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 1 - Base]: %d\c-, Difficulty Level", CriticalHitRate, TrueGameSkill);

			// Level + Stat Calculations
			SkillFactor = (PlayerLevel * 5) / 8; // Each level is +0.0625% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2a - Stats: Level]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerAGL * 3) / 8; // 1 pt of Agility is +0.0375% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2b - Stats: Agility]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDEF * 3) / 16; // 1 pt of Defense is +0.01875% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2c - Stats: Defense]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDFT * 7) / 8; // 1 pt of Deftness is +0.0875% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2d - Stats: Deftness]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSOR * 1) / 16; // 1 pt of Sorcery is +0.00625% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2e - Stats: Sorcery]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSTR * 1) / 4; // 1 pt of Strength is +0.025% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2f - Stats: Strength]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerTHE * 1) / 16; // 1 pt of Therapeusis is +0.00625% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2g - Stats: Therapeusis]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);

			// Oomph/Blunt
			SkillFactor = 0;
			// Oomph = (6.25% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",10) > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 16;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 3a - Oomph Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Blunt = (-6.25% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",13) > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 16;
				CriticalHitRate -= SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 3b - Blunt Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			// Acceleratle/Deceleratle
			SkillFactor = 0;
			// Acceleratle (12.5% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",12) > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 8;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 4a - Acceleratle Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Deceleratle (-12.5% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",15) > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 8;
				CriticalHitRate -= SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 4b - Deceleratle Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Divine Avatar (12.5% of remaining amount uncovered)
			if (CallACS("GetBuffTimer",7) > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 8;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades [up to 6.25% more Crit]
			if (CallACS("MiscVarCheckDECORATE",317) > 0)
			{
				SkillFactor = (CallACS("MiscVarCheckDECORATE",317) * 25) / 4;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Accuracy Upgrades [up to 3.75% more Crit]
			if (CallACS("MiscVarCheckDECORATE",318) > 0)
			{
				SkillFactor = (CallACS("MiscVarCheckDECORATE",318) * 15) / 4;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Accuracy Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			// Uppercut Bonuses
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus1") > 0) // up to +5% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 20;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus2") > 0) // up to +10% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 10;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			// Kick Bonus
			SkillFactor = 0;
			if (Owner.CountInv("KickCritBonus1") > 0) // up to +4% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 25;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			if (Owner.CountInv("KickCritBonus2") > 0) // up to +10% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 10;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			int MeleeWeaponCritCheck = 0;
			nm = "FistAilish"; APPackCheck = nm;
			nn = "FistPetra"; APPackCheck2 = nn;
			no = "SauronGauntletsAilish"; APPackCheck3 = no;
			np = "SauronGauntletsPetra"; APPackCheck4 = np;
			If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2 ||
					weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4 ||
					weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw" || 
					weapon is "SceptreOfEmpyrea") MeleeWeaponCritCheck = 1;

			// Dashing
			SkillFactor = 0;
			if (Owner.CountInv("PlayerDashing") > 0) // +4% more Crit [with most melee weapons], +1% with other weapons
			{
				If (MeleeWeaponCritCheck == 1) SkillFactor = (1000 - CriticalHitRate) / 25;
																	else SkillFactor = (1000 - CriticalHitRate) / 100;

				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) 
				{
					If (MeleeWeaponCritCheck == 1) Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
																		else Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (NON-Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			// Berserker Fit = total of +2% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10051) > 0)
			{
				If (MeleeWeaponCritCheck == 1)
				{
					SkillFactor = (CallACS("MiscVarCheckDECORATE",10051) * 20) + (CallACS("MiscVarCheckDECORATE",10052) * 50);
					CriticalHitRate += SkillFactor;
					if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 10 - Berserker Fit Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			// Stam Up Perks = total of +8% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10005) > 0)
			{
				SkillFactor = (CallACS("MiscVarCheckDECORATE",10005) * 8) + (CallACS("MiscVarCheckDECORATE",10006) * 20);
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 11 - Stam Up Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			SkillFactor = CriticalHitRate;
			int criticalcalcfactor = dvds_criticalcalcfactor;
			if (criticalcalcfactor < 10) criticalcalcfactor = 10;
			if (criticalcalcfactor > 1000) criticalcalcfactor = 1000;
			CriticalHitRate = CriticalHitRate * criticalcalcfactor / 100;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 12 - Factor Check]: %d,\c- Previous: %d, Factor: %d", CriticalHitRate, SkillFactor, criticalcalcfactor);

			// High-Cap Crit at 100.0%, Low-Cap it at 0.1%
			if (CriticalHitRate < 1) CriticalHitRate = 1;
			if (CriticalHitRate > 1000) CriticalHitRate = 1000;

			// Cheat for ALWAYS-CRIT
			if (Owner.CountInv("CheatCrit") > 0) 
			{
				CriticalHitRate = 2000;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 13 - CRIT CHEAT IS ON]: %d", CriticalHitRate);
			}

			int CritRNGVal = random(1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (CritRNGVal <= CriticalHitRate) { if (owner.CountInv("DealCriticalHit") <= 0) owner.A_GiveInventory("DealCriticalHit",1); }
																		else { if (owner.CountInv("DealCriticalHit") >= 1) owner.A_TakeInventory("DealCriticalHit",9999); }

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",235,CriticalHitRate);

			if (debugcrithits > 0)
			{
				if (CritRNGVal <= CriticalHitRate) Console.Printf("    \cdCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
																			else Console.Printf("    \cgCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
			}
		}
		
		
		
		
		
		//*************************************
		//*Inventory Items Check [death-exits]*
		//*************************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//*****************************
		//*Weapons Check [death-exits]*
		//*****************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//***************************
		//*Armor Check [death-exits]*
		//***************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//************* Armor Stuff for DVII-DS's armor items :P ********************
		//** Note: ONLY FLORA [(CharacterClass == 2)] CAN USE THESE ITEMS LEGALLY. **
		//***************************************************************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//*********************************
		//*Check Sauron Equipment Directly*
		//*********************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//***********************
		//*Infinite Ammo Chances*
		//***********************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//****************************************
		//**IronFeet/Mask Implementation Effects**
		//****************************************
		if (playeractor)
		{
			if (Owner.CountInv("PowerIronFeet") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_GiveInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_TakeInventory("MaskNoFire",0x7FFFFFFF);
			}
			else if (Owner.CountInv("PowerMask") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_GiveInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") == 0) Owner.A_GiveInventory("MaskNoFire",1);
			}
			else
			{
				if (Owner.CountInv("IronFeetNoPoison") > 0) Owner.A_TakeInventory("IronFeetNoPoison",0x7FFFFFFF);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_TakeInventory("MaskNoFire",0x7FFFFFFF);
			}
		}
		
		
		
		
		
		//***********
		//**Evasion**
		//***********
		if (playeractor)
		{
			// Set's The Base increase from each point of Agility
			if (CharacterClass == 0) { AglEvadeCheck = 9;  DftEvadeCheck = 0; } // Deggaris
			if (CharacterClass == 1) { AglEvadeCheck = 10; DftEvadeCheck = 0; } // Illucia
			if (CharacterClass == 2) { AglEvadeCheck = 11; DftEvadeCheck = 0; } // Flora
			if (CharacterClass == 8) { AglEvadeCheck = 8;  DftEvadeCheck = 0; } // Ailish
			if (CharacterClass == 9) { AglEvadeCheck = 22; DftEvadeCheck = 0; } // Petra (Has double of Flora's)

			if (Owner.CountInv("SauronHelmet") > 0) { AglEvadeCheck += 1; DftEvadeCheck += 1; }
			if (CharacterClass == 0 && Owner.CountInv("SauronGauntlets") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 1 && Owner.CountInv("SauronGauntletsIllucia") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 2 && Owner.CountInv("SauronGauntletsFlora") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (CharacterClass == 8 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (CharacterClass == 9 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (Owner.CountInv("TheOneRing") > 0) { AglEvadeCheck += 6; DftEvadeCheck += 6; }
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 0 - Agl/Def Evade Check]: %d / %d\c-", AglEvadeCheck, DftEvadeCheck);

			SkillFactor = 0;
			SkillFactor = ((PlayerAGL * AglEvadeCheck) + (PlayerDFT * DftEvadeCheck)) / 2;
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 1 - Base (Agl/Evade)]: %d\c-", EvasionRate);

			// Divine Avatar
			SkillFactor = 0;
			if (CallACS("GetBuffTimer",7) > 0)
			{
				SkillFactor = EvasionRate * 3 / 4;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 2 - Divine Avatar]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// DodgeMore perks
			if (CallACS("MiscVarCheckDECORATE",10007) > 0 || CallACS("MiscVarCheckDECORATE",10008) > 0)
			{
				SkillFactor = ((CallACS("MiscVarCheckDECORATE",10007) * 250) + (CallACS("MiscVarCheckDECORATE",10008) * 625));
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 3 - DodgeMore Perks]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (CallACS("MiscVarCheckDECORATE",317) > 0)
			{
				SkillFactor = CallACS("MiscVarCheckDECORATE",317) * 111;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 4 - Strife-Stamina Perk]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Checks Evasion Based on Level
			SkillFactor = PlayerLevel * 5;
			if (CallACS("GetBuffTimer",7) > 0) SkillFactor = SkillFactor * 7 / 5;
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 5a - Level Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Flora Armor Checks
			if (CharacterClass == 2)
			{
				// Flora has Safe Tea Shoes? [+3.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("SafeTeaShoes") > 0) SkillFactor += 375;
				
				// Flora has Pearly Corset? [+0.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("PearlyCorset") > 0) SkillFactor += 75;
				
				// Flora has Water Flying Dress? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("WaterFlyingDress") > 0) SkillFactor += 125;
				
				// Flora has Evenstar Necklace? [+2.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 250;
				
				// Flora has Cloak of Evasion? [+12.50% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("CloakOfEvasion") > 0) SkillFactor += 1250;
				
				// Flora has Falcon Knife Earrings? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 125;
				
				// Flora has Anubis Cufflinks? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 50;
				
				// Flora has Kissa's Brasseire? [+1% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("KissaBra") > 0) SkillFactor += 100;
				
				// Flora has Balrog Ring? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 50;
				
				// Flora has Dove Ribbon? [+1.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 175;
			}
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 6 - Flora Armor Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Someone has Sauron's Helmet [-1.56% Chance]
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SkillFactor = 156;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 7a - Sauron Helm Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Someone has The One Ring [+6.25% Chance]
			if (Owner.CountInv("TheOneRing") > 0) 
			{
				SkillFactor = 625;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 7b - One Ring Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			// Haste Buff [150% Evade]
			if (Owner.CountInv("HasteBuff") > 0)
			{
				SkillFactor = EvasionRate / 2;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 8a - Haste Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Slow Ailment [66.7% Evade]
			if (Owner.CountInv("SlowAilment") > 0)
			{
				SkillFactor = EvasionRate * 1 / 3;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 8b - Slow Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			if (CharacterClass == 2)
			{
				// Ruinous Shield [Evade reduced by 5/8ths]
				if (Owner.CountInv("RuinousShield") > 0)
				{
					SkillFactor = EvasionRate * 5 / 8;
					EvasionRate -= SkillFactor;
					if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 9 - Ruinous Shield Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
				}
				
				// Divine Shield [Evade Increased by 1/4ths]
				if (Owner.CountInv("DivineShield") > 0)
				{
					SkillFactor = EvasionRate * 1 / 4;
					EvasionRate += SkillFactor;
					if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 9 - Divine Shield Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
				}
			}
			
			SkillFactor = 0;
			// On The Move Perk
			int IsMoving = 0;
			if (PlayerVelX < -3.814697266 || PlayerVelX > 3.814697266) IsMoving++;
			if (PlayerVelY < -3.814697266 || PlayerVelY > 3.814697266) IsMoving++;
			if (PlayerVelZ < -1.907348633 || PlayerVelZ > 1.907348633) IsMoving++;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP ? - Vel Checks]: IsMoving?: %d, x%8f / y%8f / z%8f", IsMoving, PlayerVelX, PlayerVelY, PlayerVelZ);
			if (CallACS("MiscVarCheckDECORATE",10045) > 0 && IsMoving > 0) // "On The Move" Perk
			{
				if (CallACS("MiscVarCheckDECORATE",10045) == 1) { SkillFactor = 250 + ((PlayerAGL * 100) / 40); }
				if (CallACS("MiscVarCheckDECORATE",10045) == 2) { SkillFactor = 400 + ((PlayerAGL * 100) / 32); }
				if (CallACS("MiscVarCheckDECORATE",10045) == 3) { SkillFactor = 550 + ((PlayerAGL * 100) / 24); }
				if (CallACS("MiscVarCheckDECORATE",10045) == 4) { SkillFactor = 700 + ((PlayerAGL * 100) / 16); }
				if (CallACS("MiscVarCheckDECORATE",10045) >= 5) { SkillFactor = 850 + ((PlayerAGL * 100) / 8); }
		
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 10 - On The Move]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			// Caps Evasion Chances out at 75% [unless you have the Dove's Ribbon, which it caps at 92.5%]
			int EvasionMin;
			int EvasionMax;
			if (Owner.CountInv("DoveRibbon") > 0)
			{
				EvasionMin = 175;
				EvasionMax = 9250;
				EvasionMin += ((CallACS("MiscVarCheckDECORATE",10007) * 25) + (CallACS("MiscVarCheckDECORATE",10008) * 63) + (CallACS("MiscVarCheckDECORATE",10045) * 16) + (CallACS("MiscVarCheckDECORATE",10046) * 42));
				EvasionMax += ((CallACS("MiscVarCheckDECORATE",10007) * 50) + (CallACS("MiscVarCheckDECORATE",10008) * 125) + (CallACS("MiscVarCheckDECORATE",10045) * 33) + (CallACS("MiscVarCheckDECORATE",10046) * 84));
			}
			else
			{
				EvasionMin = 0;
				EvasionMax = 7500;
				EvasionMin += ((CallACS("MiscVarCheckDECORATE",10007) * 20) + (CallACS("MiscVarCheckDECORATE",10008) * 50) + (CallACS("MiscVarCheckDECORATE",10045) * 13) + (CallACS("MiscVarCheckDECORATE",10046) * 33));
				EvasionMax += ((CallACS("MiscVarCheckDECORATE",10007) * 30) + (CallACS("MiscVarCheckDECORATE",10008) * 75) + (CallACS("MiscVarCheckDECORATE",10045) * 20) + (CallACS("MiscVarCheckDECORATE",10046) * 50));
			}
			if (EvasionRate < EvasionMin) EvasionRate = EvasionMin;
			if (EvasionRate > EvasionMax) EvasionRate = EvasionMax;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 11 - Dove Ribbon Check]: %d,\c- EvadeMin: %d, EvadeMax: %d", EvasionRate, EvasionMin, EvasionMax);
			
			
			// Check for Equipped Weapon
			If (weapon is "BFG90002") BasePerkFactor = -625;
			If (weapon is "RocketLauncher2") BasePerkFactor = -313;
			If (weapon is "Railgun2" || weapon is "Karasawa2" ||
					weapon is "Repeater2" || weapon is "PlasmaRifle2")
			{
				BasePerkFactor = -156;
			}

			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2)
			{
				BasePerkFactor = -156;
			}

			no = "FistAilish"; APPackCheck3 = no;
			np = "FistPetra"; APPackCheck4 = np;
			If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw") BasePerkFactor = -78;
			If (weapon is "Minigun") BasePerkFactor = -78;
			If (weapon is "EvilWarriorShield") BasePerkFactor = -63;
			If (weapon is "Chaingun2") BasePerkFactor = -39;
			If (weapon is "FistDeggaris" || 
					weapon is "FistIllucia" || 
					weapon is "FistFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4)
			{
				BasePerkFactor = 625;
			}
			If (weapon is "SceptreOfEmpyrea") BasePerkFactor = 1250;
			
			If (weapon is "Shotgun2") BasePerkFactor = 63;
			If (weapon is "Pistol2") BasePerkFactor = 125;
			If (weapon is "DualPistols") BasePerkFactor = (125 * 3) / 2;
			
			// Hellcore Weapons
			int EvadeCurrHellcoreLevel = 0;
			If (weapon is "ImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",96); }
			If (weapon is "DarkImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",97); }
			If (weapon is "CacodemonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",98); }
			If (weapon is "CacolanternEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",99); }
			If (weapon is "AbaddonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",100); }
			If (weapon is "KnightFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",101); }
			If (weapon is "BaronFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",102); }
			If (weapon is "BelphegorFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",103); }
			If (weapon is "BruiserFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",104); }
			If (weapon is "ArchonFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",105); }
			If (weapon is "PyroFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",106); }
			If (weapon is "IncarnateSkull") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",107); }
			If (weapon is "ArchvileHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",108); }
			If (weapon is "DiabloistHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",109); }
			If (weapon is "BalrogFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",110); }
			if (EvadeCurrHellcoreLevel > 0) BasePerkFactor = (1250 * EvadeCurrHellcoreLevel) / 8;
			
			If (weapon is "SapphireWandNew") BasePerkFactor = 125;
			If (weapon is "DualSapphireWandsNew") BasePerkFactor = (125 * 3) / 2;
			nm = "GoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualGoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "CrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "DualCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (325 * 3) / 2;
			nm = "SuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 468;
			nm = "DualSuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (468 * 3) / 2;
			nm = "DragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualDragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "HellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualHellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "PhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualPhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "FiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 125;
			nm = "DualFiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (125 * 3) / 2;
			nm = "StrifeCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "StrifeCrossbow2New"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;

			if (BasePerkFactor != 0)
			{
				PerkFactor = BasePerkFactor;
				PerkFactor += ((CallACS("MiscVarCheckDECORATE",10007) * (BasePerkFactor / 20)) + (CallACS("MiscVarCheckDECORATE",10008) * (BasePerkFactor / 8)));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 12 - Weapon Check]: %d,\c- Change: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			
			SkillFactor = 0;
			// Acceleratle = +1/5 of remaining % Evasion added (done after caps are normally calculated)
			if (CallACS("GetBuffTimer",12) > 0)
			{
				PerkFactor = 2000;
				PerkFactor += ((CallACS("MiscVarCheckDECORATE",10007) * 200) + (CallACS("MiscVarCheckDECORATE",10008) * 500));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 13a - Acceleratle Check]: %d,\c- Add: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			// Deceleratle = -1/5 of remaining % Current Evasion removed (done after caps are normally calculated)
			if (CallACS("GetBuffTimer",15) > 0)
			{
				PerkFactor = 2000;
				PerkFactor -= ((CallACS("MiscVarCheckDECORATE",10007) * 100) + (CallACS("MiscVarCheckDECORATE",10008) * 250));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 13b - Deceleratle Check]: %d,\c- Subtracted: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = 0;
			// BlurSphere = +1/3 of remaining % Evasion added (done after caps are normally calculated) [in other words, make the Blur Sphere & Invisibility Spells actually USEFUL >__>;]
			if (Owner.CountInv("PowerInvisibility") > 0 || Owner.CountInv("InvisiblitySpell") > 0)
			{
				PerkFactor = 3334;
				PerkFactor += ((CallACS("MiscVarCheckDECORATE",10007) * 125) + (CallACS("MiscVarCheckDECORATE",10008) * 313));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 14 - Invisibility Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = EvasionRate;
			int evadecalcfactor = dvds_evadecalcfactor;
			if (evadecalcfactor < 10) evadecalcfactor = 10;
			if (evadecalcfactor > 1000) evadecalcfactor = 1000;
			EvasionRate = EvasionRate * evadecalcfactor / 100;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 15 - Factor Check]: %d,\c- Previous: %d, Factor: %d", EvasionRate, SkillFactor, evadecalcfactor);
			
			int ultmaxevasionrate = 9875;
			if (EvasionRate < 0) EvasionRate = 0;
			if (EvasionRate > ultmaxevasionrate) EvasionRate = ultmaxevasionrate;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 16 - Final Check]: %d / %d\c-", EvasionRate, ultmaxevasionrate);
			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",23,EvasionRate);

			int EvasionRNGVal = random(1,10000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (EvasionRNGVal <= EvasionRate) 
			{
				if (owner.CountInv("EvadeAnAttack") <= 0) owner.A_GiveInventory("EvadeAnAttack",1); 
				if (debugevasion > 0) Console.Printf("    \cdEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
			else 
			{ 
				if (owner.CountInv("EvadeAnAttack") >= 1) owner.A_TakeInventory("EvadeAnAttack",9999); 
				if (debugevasion > 0) Console.Printf("    \cgEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
		}
		
		
		
		
		
		//*********************************
		//*Check Sauron Equipment Directly*
		//*********************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//**************************
		//*Character Checks Misc #1*
		//**************************
		// To possibly be transplanted from ACS :V
		
		
		
		
		
		//************************************************************************
		//**Ruinous Shield Degeneration Effect [will NOT kill the player though]**
		//************************************************************************
		int DegenMinimumHPFactor = 10; 
		int DegenMinimumManaFactor = 80;
		int DegenMinimumHP;
		int DegenMinimumMana;
		int CursedShieldDegenInterval;
		int DegenValue, CurseEffectRand;
		if (playeractor)
		{
			// Determines how low HP/MP can degenerate to when the Ruinous Shield is equipped. [used as Divisors]
			if (TrueGameSkill <= 0) { DegenMinimumHPFactor = 8; DegenMinimumManaFactor = 64; }
			if (TrueGameSkill == 1) { DegenMinimumHPFactor = 9; DegenMinimumManaFactor = 72; }
			if (TrueGameSkill == 2) { DegenMinimumHPFactor = 10; DegenMinimumManaFactor = 80; }
			if (TrueGameSkill == 3) { DegenMinimumHPFactor = 11; DegenMinimumManaFactor = 88; }
			if (TrueGameSkill == 4) { DegenMinimumHPFactor = 12; DegenMinimumManaFactor = 96; }
			if (TrueGameSkill == 5) { DegenMinimumHPFactor = 13; DegenMinimumManaFactor = 104; }
			if (TrueGameSkill == 6) { DegenMinimumHPFactor = 14; DegenMinimumManaFactor = 112; }
			if (TrueGameSkill == 7) { DegenMinimumHPFactor = 15; DegenMinimumManaFactor = 120; }
			if (TrueGameSkill >= 8) { DegenMinimumHPFactor = 16; DegenMinimumManaFactor = 128; }
			DegenMinimumHPFactor = DegenMinimumHPFactor * 3 / 4;
			DegenMinimumManaFactor = DegenMinimumManaFactor * 3 / 4;
			DegenMinimumHP = PlayerMaxHP / DegenMinimumHPFactor;
			DegenMinimumMana = PlayerMaxMP / DegenMinimumManaFactor;
			if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 1 - Base Divisors]: HP %d, MP: %d\c-, LowHP: %d, LowMP: %d", DegenMinimumHPFactor, DegenMinimumManaFactor, DegenMinimumHP, DegenMinimumMana);
			
			if (Owner.CountInv("RuinousShield") > 0)
			{
				// Set Curse Degeneration Intervals
				CursedShieldDegenInterval = 5;
				FreezePlayer = 0;
				if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1;
				if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) CursedShieldDegenInterval = CursedShieldDegenInterval * random(6,7) / 5;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) CursedShieldDegenInterval = CursedShieldDegenInterval * 7 / 5;
					if (buttons & BT_JUMP) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_CROUCH) CursedShieldDegenInterval = CursedShieldDegenInterval * 2 / 5;
				}
				if (random(1,16) == 1) CursedShieldDegenInterval *= 2;
				if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 2 - Base Degen Intervals (\cyInput: %d\cn)]: Interval: %d, Frozen?: %d", buttons, CursedShieldDegenInterval, FreezePlayer);
				
				// Checks Armor Items and other types for Degen speed.
				SkillFactor = 200;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor -= 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor -= 15;
					if (Owner.CountInv("BalrogRing") > 0) SkillFactor -= 25;
					// total of -34 = 66% speed with all four items
				}
				CursedShieldDegenInterval = CursedShieldDegenInterval * SkillFactor / 200;
				if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 3 - Degen Intervals (Post-Armor)]: %d, Factor: %d / 200", CursedShieldDegenInterval, SkillFactor);
				
				// Final Degen Interval
				if (CallACS("MenuVarCheckDECORATE",0) != 0) CursedShieldDegenInterval = 0;
				if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 4 - Degen Intervals (MenuCheck)]: %d", CursedShieldDegenInterval);

				RuinousShieldDegenTimer += CursedShieldDegenInterval;
				// Curse Effect Execution
				if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 5 - Degen Intervals Timer]: %d / %d", RuinousShieldDegenTimer, CursedShieldDegenTimer);
				if (RuinousShieldDegenTimer >= CursedShieldDegenTimer)
				{
					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth > DegenMinimumHP)
					{
						// HP Degeneration
						PlayerMaxHP = CallACS("StatCheck",1);
						CurseEffectRand = random(1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxHP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxHP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxHP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxHP / 266; break;
							case 8: DegenValue = PlayerMaxHP / 334; break;
						}
				
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentHealth -= DegenValue;
						if (PlayerCurrentHealth < DegenMinimumHP) PlayerCurrentHealth = DegenMinimumHP;

						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 6a - HP Degen]: %d", DegenValue);
					}
				
					PlayerCurrentMP = CallACS("StatCheck",14);
					if (PlayerCurrentMP > DegenMinimumMana)
					{
						// MP Degeneration
						PlayerMaxMP = CallACS("StatCheck",2);
						CurseEffectRand = random(1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxMP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxMP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxMP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxMP / 266; break;
							case 8: DegenValue = PlayerMaxMP / 334; break;
						}
					
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentMP -= DegenValue;
						if (PlayerCurrentMP < DegenMinimumMana) PlayerCurrentMP = DegenMinimumMana;

						CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP);
						if (debuguncurse) Console.Printf("    \cnCurse Degeneration [Step 6b - MP Degen]: %d", DegenValue);
					}
				
					RuinousShieldDegenTimer = 0;
					CursedShieldDegenTimer = 175 + random(-10,10);
				}
			}
			else
			{
				CurseEffectRand = 0;
				DegenValue = 0;
				RuinousShieldDegenTimer = 0;
				CursedShieldDegenTimer = 175 + random(-10,10);
			}
		}
		
		
		
		
		
		//***************************
		//** Divine Avatar HP Regen**
		//***************************
		int previousdelaycount = 0;
		int DivineRegenAmount;
		if (playeractor)
		{
			if (PlayerCurrentHealth > 0 && CallACS("GetBuffTimer",7) > 0)
			{
				delaycount = 20;
				if (debugregenhealth) Console.Printf("    \caDivineAvatar HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);

				DivineRegenTimer += delaycount;
				if (debugregenhealth) Console.Printf("    \caDivineAvatar HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DivineRegenTimer, DivineRegenInterval, delaycount);

				if (PlayerCurrentHealth > 0 && DivineRegenTimer >= DivineRegenInterval)
				{
					DivineRegenAmount = MaxHealthLimit / random(67,100);
					if (debugregenhealth) Console.Printf("    \caDivineAvatar HP Regen [Step R1 - Base Regen Amount]: %d\c-", DivineRegenAmount);

					previousdelaycount = DivineRegenAmount;
					if (CharacterClass == 0 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 1 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 2 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 8 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 9 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (debugregenhealth) Console.Printf("    \caDivineAvatar HP Regen [Step R2 - Regen Amount (Gauntlets)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

					previousdelaycount = DivineRegenAmount;
					if (Owner.CountInv("TheOneRing") > 0) DivineRegenAmount = DivineRegenAmount * 9 / 8;
					if (debugregenhealth) Console.Printf("    \caDivineAvatar HP Regen [Step R3 - Regen Amount (The One Ring)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth < MaxHealthLimit)
					{
						PlayerCurrentHealth += DivineRegenAmount;
						if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					}
					DivineRegenTimer = 0;
					DivineRegenInterval = random(30,35) * 20;
				}
			}
			else
			{
				DivineRegenTimer = 0;
				DivineRegenInterval = random(30,35) * 20;
			}
		}
		
		
		
		
		
		//***************************
		//** Dove's Ribbon HP Regen**
		//***************************
		int DoveRegenAmount;
		// To be Transplanted From ACS :V
		if (playeractor)
		{
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) // Flora
			{
				delaycount = 20;
				if (debugregenhealth) Console.Printf("    \caDoveRibbon HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);
	
				DoveRegenTimer += delaycount;
				if (debugregenhealth) Console.Printf("    \caDoveRibbon HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DoveRegenTimer, DivineRegenInterval, delaycount);
	
				if (DoveRegenTimer >= DoveRegenInterval)
				{
					DoveRegenAmount = PlayerLevel / 50 + 1;
					if (debugregenhealth) Console.Printf("    \caDoveRibbon HP Regen [Step R1 - Base Regen Amount]: %d\c-", DoveRegenAmount);

					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth < MaxHealthLimit)
					{
						PlayerCurrentHealth += DoveRegenAmount;
						if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					}
					DoveRegenTimer = 0;
					DoveRegenInterval = random(27,32) * 20;
				}
			}
			else
			{
				DoveRegenTimer = 0;
				DoveRegenInterval = random(27,32) * 20;
			}
		}
		
		
		
		
		//****************
		//**Health Regen**
		//****************
		int RegenMaxHealth;
		int StamUpgradeDelay;
		int StaminaInputFactor;
		int HPRegenAmount;
		int HPDegenAmount;
		HPDelayInterval = 140;
		if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
		if (playeractor)
		{
			// Base Character Interval Max
			if (CharacterClass == 0) HPDelayInterval = 118; // Deggaris Regenerates the second Fastest [3.54 seconds]
			if (CharacterClass == 1) HPDelayInterval = 140; // Illucia has an even speed of Regeneration [4 seconds]
			if (CharacterClass == 2) HPDelayInterval = 162; // Flora Regenerates slower than Illucia [4.46 seconds]
			if (CharacterClass == 8) HPDelayInterval = 175; // Ailish Regenerates the slowest [5 seconds]
			if (CharacterClass == 9) HPDelayInterval = 81; // Petra Regenerates the fastest [2.314285714 seconds]
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 1 - Base Interval Delay]: %d\c-", HPDelayInterval);
			
			// Level Check [Interval Delay]
			previousdelaycount = HPDelayInterval;
			if (TrueGameSkill <= 0) HPDelayInterval -= 6;
			if (TrueGameSkill == 1) HPDelayInterval -= 2;
			if (TrueGameSkill == 2) HPDelayInterval += 0;
			if (TrueGameSkill == 3) HPDelayInterval += 2;
			if (TrueGameSkill == 4) HPDelayInterval += 6;
			if (TrueGameSkill == 5) HPDelayInterval += 8;
			if (TrueGameSkill == 6) HPDelayInterval += 12;
			if (TrueGameSkill == 7) HPDelayInterval += 14;
			if (TrueGameSkill >= 8) HPDelayInterval += 16;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 2 - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval -= (PlayerLevel / 7); 
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 3 - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval *= 20;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 4 - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			PlayerCurrentHealth = owner.health;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 5 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);
			
			// Base Delay Count
			SkillFactor = 0;
			delaycount = 20;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 6 - Get Base RegenTimer Increment]: %d\c-", delaycount);
			
			// Character Delay Count
			SkillFactor = 0;
			if (CharacterClass == 0) SkillFactor = (PlayerDEF / 8); // 8pts of Defense will decrease regen wait by 1 tic each [Deggaris]
			if (CharacterClass == 1) SkillFactor = (PlayerDEF / 10); // 10pts of Defense will decrease regen wait by 1 tic each [Illucia]
			if (CharacterClass == 2) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Flora]
			if (CharacterClass == 8) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Ailish]
			if (CharacterClass == 9) SkillFactor = (PlayerDEF / 6); // 6pts of Defense will decrease regen wait by 1 tic each [Petra]
			delaycount += SkillFactor;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 7 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Stamina Upgrades [Strife]
			SkillFactor = (CallACS("MiscVarCheckDECORATE",317) * 4) / 3;
			delaycount += SkillFactor;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 8 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Accelerates HP Regen when Tension is Boosted
			SkillFactor = 20;
			if (TensionLevel >= 1) SkillFactor += 1; // "5" = +1 [+5%]
			if (TensionLevel >= 2) SkillFactor += 1; // "20" = +2 [+10%]
			if (TensionLevel >= 3) SkillFactor += 2; // "50" = +4 [+20%]
			if (TensionLevel >= 4) SkillFactor += 2; // "100" = +6 [+30%]
			if (TensionLevel >= 5) SkillFactor += 3; // "250" = +9 [+45%]
			if (TensionLevel >= 6) SkillFactor += 4; // "500" = +13 [+65%]
			if (TensionLevel >= 7) SkillFactor += 5; // "500" = +18 [+90%]
			delaycount = (delaycount * SkillFactor) / 20;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 9 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
			
			// Focusing will slightly accelerate HP regeneration on Strife Mode
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",212) > 0 && CallACS("MiscVarCheckDECORATE",317) > 0)
			{
				if (FocusTimer >= 105 && CallACS("MiscVarCheckDECORATE",317) >= 1) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 1) / 5;
				if (FocusTimer >= 210 && CallACS("MiscVarCheckDECORATE",317) >= 1) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 1) / 5;
				if (FocusTimer >= 315 && CallACS("MiscVarCheckDECORATE",317) >= 2) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 2) / 5;
				if (FocusTimer >= 420 && CallACS("MiscVarCheckDECORATE",317) >= 2) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 2) / 5;
				if (FocusTimer >= 525 && CallACS("MiscVarCheckDECORATE",317) >= 3) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 3) / 5;
				if (FocusTimer >= 630 && CallACS("MiscVarCheckDECORATE",317) >= 3) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 3) / 5;
				if (FocusTimer >= 735 && CallACS("MiscVarCheckDECORATE",317) >= 4) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 4) / 5;
				if (FocusTimer >= 840 && CallACS("MiscVarCheckDECORATE",317) >= 4) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 4) / 5;
				if (FocusTimer >= 945 && CallACS("MiscVarCheckDECORATE",317) >= 5) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 5) / 5;
				if (FocusTimer >= 1050 && CallACS("MiscVarCheckDECORATE",317) >= 5) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 5) / 5;
				if (FocusTimer >= 1155 && CallACS("MiscVarCheckDECORATE",317) >= 6) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 6) / 5;
				if (FocusTimer >= 1260 && CallACS("MiscVarCheckDECORATE",317) >= 6) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 6) / 5;
				if (FocusTimer >= 1365 && CallACS("MiscVarCheckDECORATE",317) >= 7) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 7) / 5;
				if (FocusTimer >= 1470 && CallACS("MiscVarCheckDECORATE",317) >= 7) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 7) / 5;
				if (FocusTimer >= 1575 && CallACS("MiscVarCheckDECORATE",317) >= 8) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 8) / 5;
				if (FocusTimer >= 1680 && CallACS("MiscVarCheckDECORATE",317) >= 8) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 8) / 5;
				if (FocusTimer >= 1785 && CallACS("MiscVarCheckDECORATE",317) >= 9) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 9) / 5;
				if (FocusTimer >= 1890 && CallACS("MiscVarCheckDECORATE",317) >= 9) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 9) / 5;
				if (FocusTimer >= 1995 && CallACS("MiscVarCheckDECORATE",317) >= 10) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 10) / 5;
				if (FocusTimer >= 2100 && CallACS("MiscVarCheckDECORATE",317) >= 10) SkillFactor += (CallACS("MiscVarCheckDECORATE",317) * 10) / 5;
			}
			delaycount += SkillFactor;
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 10 - Get Focus/StrifeStam RegenTimer Inc]: %d\c-, Added: %d, FocusTimer: %d", delaycount, SkillFactor, FocusTimer);
			
			// Check Musou Power Trip Mode
			SkillFactor = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 5) / 2; // 250%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount * 5; // 500%
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 11 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

			// Check Movement Inputs
			SkillFactor = delaycount;
			StaminaInputFactor = 100;
			if (PlayerCurrentHealth < RegenMaxHealth)
			{
				FreezePlayer = 0;
				if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1;
				if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 40 / 100;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 50 / 100;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 60 / 100;
					if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 40 / 100;
					if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 180 / 100;
				}
				delaycount = (delaycount * StaminaInputFactor) / 100;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 12 - Regen Intervals (\cyInput: %d\cn)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
				
				// Checks Armor Items and other types for regen speed.
				SkillFactor = delaycount;
				int ArmorFactor = 100;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor += 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor += 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor += 15;
					if (Owner.CountInv("BalrogRing") > 0) ArmorFactor += 25;
					// total of 70 = 170% speed with all four items
				}
				delaycount = (delaycount * ArmorFactor) / 100;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 13 - Regen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 100", delaycount, SkillFactor, ArmorFactor);
				
				// Divine Avatar = 150% Total Regeneration Speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",7) > 0) delaycount = delaycount * 3 / 2;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 14 - Regen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",12) > 0) delaycount = delaycount * 6 / 5; // Acceleratle = 120% regen speed
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 15a - Regen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",15) > 0) delaycount = delaycount * 4 / 5; // Deceleratle = 80% regen speed
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 15b - Regen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Poison = random 0.25/0.375.0.5/0.625/0.75x regen speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",16) > 0) delaycount = (delaycount * random(2,6)) / 8;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 16 - Regen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Fatigue = 0.2x regen speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",18) > 0) delaycount = delaycount / 5;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 17 - Regen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Sleep = x5 regen speed
				SkillFactor = delaycount;
				PerkFactor = 10000;
				if (CallACS("GetBuffTimer",20) > 0)
				{
					delaycount *= 5;
					PerkFactor = ((CallACS("MiscVarCheckDECORATE",10013) * 2000) + (CallACS("MiscVarCheckDECORATE",10014) * 5000)) + 10000;
					delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 18 - Regen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
				
				// Flora's Regeneration Speed is reduced by 5/8s [62.5%] when holding the Ruinous Shield [curse effect]
				SkillFactor = delaycount;
				if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount = delaycount * 3 / 8;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 19 - Regen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// RegenHPFast perks
				SkillFactor = delaycount;
				PerkFactor = 10;
				if (CallACS("MiscVarCheckDECORATE",10013) > 0)
				{
					PerkFactor = ((CallACS("MiscVarCheckDECORATE",10013) * 2) + (CallACS("MiscVarCheckDECORATE",10014) * 5)) + 10;
					delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 20 - Regen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
				
				// "Cleared of Mind" Perks
				SkillFactor = delaycount;
				PerkFactor = 80;
				if (CallACS("MiscVarCheckDECORATE",10055) > 0)
				{
					perkfactor = ((CallACS("MiscVarCheckDECORATE",10055) * 2) + (CallACS("MiscVarCheckDECORATE",10056) * 5)) + 80;
					delaycount = delaycount * perkfactor / 80;
				}
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 21 - Regen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Fists
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = random(28,32);
				delaycount = (delaycount * PerkFactor) / 20;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 22 - Regen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: %d / 20", delaycount, SkillFactor, PerkFactor);
				
				// Checks Health Regen Rate Menu Option
				SkillFactor = delaycount;
				delaycount = delaycount * dvds_healthregenmultiplier / 100;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 23 - Regen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthregenmultiplier);
				
				// Low Cap to 1 Tics
				SkillFactor = delaycount;
				if (delaycount < 1) delaycount = 1;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 24 - Regen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				if (CallACS("MenuVarCheckDECORATE",0) != 0) delaycount = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					HPRegenTimer += delaycount;
				}
			}
			else 
			{
				// Reset the Timer
				HPRegenTimer = 0 - random(-20,20); // HPDelayInterval + random(-20,20);
			}
			if (debugregenhealth) Console.Printf("    \caHP Regen [Step 25 - Regen Intervals (Timers)]: HPRegenTimer %d / %d", HPRegenTimer, HPDelayInterval);

			if (HPRegenTimer >= HPDelayInterval)
			{
				// Base of 1 HP regen
				HPRegenAmount = 1;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step R1 - Regen Amount (Base)]: %d", HPRegenAmount);

				// Every 50 Levels = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerLevel / 50);
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step R2 - Regen Amount (PlayerLevel)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Every 15 Pts of Strength = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerSTR / 15);
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step R3 - Regen Amount (PlayerSTR)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step R4 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Set Health [uptick]
				if (PlayerCurrentHealth > 0)
				{
					PlayerCurrentHealth += HPRegenAmount;
					if (PlayerCurrentHealth > RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
					owner.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					if (debugregenhealth) Console.Printf("    \caHP Regen [Step R5 - Increment HP]: %d, Current Health: %d / %d", HPRegenAmount, PlayerCurrentHealth, PlayerMaxHP);
				}

				// Reset the Timer
				HPRegenTimer = 0 - random(-20,20); // HPDelayInterval + random(-20,20);
			}
		}
		//****************
		//**Health Degen**
		//****************
		if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
		if (playeractor && dvds_healthdegenmode == 1)
		{
			// Base Character Interval Max
			if (CharacterClass == 0) HPDelayInterval2 = 41; // Deggaris Degenerates the Slowest [1.17 seconds]
			if (CharacterClass == 1) HPDelayInterval2 = 35; // Illucia has an even speed of Degeneration [1 second]
			if (CharacterClass == 2) HPDelayInterval2 = 29; // Flora Degenerates the second fastest [0.83 seconds]
			if (CharacterClass == 8) HPDelayInterval2 = 25; // Ailish Degenerates the fastest
			if (CharacterClass == 9) HPDelayInterval2 = 52; // Petra Degenerates even slower than Deggaris
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 1 - Base Interval Delay]: %d\c-", HPDelayInterval2);
			
			// Level Check [Interval Delay]
			previousdelaycount = HPDelayInterval2;
			if (TrueGameSkill <= 0) HPDelayInterval2 += 3;
			if (TrueGameSkill == 1) HPDelayInterval2 += 1;
			if (TrueGameSkill == 2) HPDelayInterval2 += 0;
			if (TrueGameSkill == 3) HPDelayInterval2 -= 1;
			if (TrueGameSkill == 4) HPDelayInterval2 -= 3;
			if (TrueGameSkill == 5) HPDelayInterval2 -= 4;
			if (TrueGameSkill == 6) HPDelayInterval2 -= 6;
			if (TrueGameSkill == 7) HPDelayInterval2 -= 7;
			if (TrueGameSkill >= 8) HPDelayInterval2 -= 8;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 2 - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);
			
			// Level
			previousdelaycount = HPDelayInterval2;
			SkillFactor = (PlayerLevel / 14); // up to +14
			HPDelayInterval2 += SkillFactor; 
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 3 - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

			// Final Interval Calc
			previousdelaycount = HPDelayInterval2;
			HPDelayInterval2 *= 20;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 4 - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

			// Dove Ribbon Health Limit Check
			PlayerCurrentHealth = owner.health;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 5 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

			// Base Delay Count
			SkillFactor = 0;
			delaycount = 20;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 6 - Get Base RegenTimer Increment]: %d\c-", delaycount);
			
			// Character Delay Count
			SkillFactor = 0;
			if (CharacterClass == 0) SkillFactor = (PlayerDEF / 16); // 16pts of Defense will increase degen wait by 1 tic each [Deggaris]
			if (CharacterClass == 1) SkillFactor = (PlayerDEF / 20); // 20pts of Defense will increase degen wait by 1 tic each [Illucia]
			if (CharacterClass == 2) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Flora]
			if (CharacterClass == 8) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Ailish]
			if (CharacterClass == 9) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will increase degen wait by 1 tic each [Petra]
			delaycount -= SkillFactor;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 7 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Stamina Upgrades [Strife]
			SkillFactor = (CallACS("MiscVarCheckDECORATE",317) * 3) / 4;
			delaycount += SkillFactor;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 8 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);

			// Accelerates HP Regen when Tension is Boosted
			SkillFactor = 20;
			if (TensionLevel >= 1) SkillFactor -= 0; // "5" = -0 [-0%]
			if (TensionLevel >= 2) SkillFactor -= 1; // "20" = -1 [-5%]
			if (TensionLevel >= 3) SkillFactor -= 1; // "50" = -2 [-10%]
			if (TensionLevel >= 4) SkillFactor -= 1; // "100" = -3 [-15%]
			if (TensionLevel >= 5) SkillFactor -= 1; // "250" = -4 [-20%]
			if (TensionLevel >= 6) SkillFactor -= 2; // "500" = -6 [-30%]
			if (TensionLevel >= 7) SkillFactor -= 3; // "500" = -9 [-45%]
			delaycount = (delaycount * SkillFactor) / 20;
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 9 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
			
			// Check Musou Power Trip Mode
			SkillFactor = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 2) / 5; // 40%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount / 5; // 20%
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 10 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

			// Check Movement Inputs
			SkillFactor = delaycount;
			StaminaInputFactor = 100;
			if (PlayerCurrentHealth > RegenMaxHealth)
			{
				FreezePlayer = 0;
				if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1;
				if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 100 / 40;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 100 / 50;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 100 / 60;
					if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 100 / 40;
					if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 100 / 180;
				}
				delaycount = (delaycount * StaminaInputFactor) / 100;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 11 - Degen Intervals (\cyInput: %d\ca)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
				
				// Checks Armor Items and other types for regen speed.
				SkillFactor = delaycount;
				int ArmorFactor = 200;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor -= 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor -= 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor -= 15;
					if (Owner.CountInv("BalrogRing") > 0) ArmorFactor -= 25;
					// total of 70 = 170% speed with all four items
				}
				delaycount = (delaycount * ArmorFactor) / 200;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 12 - Degen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 200", delaycount, SkillFactor, ArmorFactor);
				
				// Divine Avatar = 62.5% Total Degeneration Speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",7) > 0) delaycount = delaycount * 5 / 8;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 13 - Degen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",12) > 0) delaycount = delaycount * 6 / 5; // Acceleratle = 120% degen speed
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 14a - Degen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",15) > 0) delaycount = delaycount * 4 / 5; // Deceleratle = 80% degen speed
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 14b - Degen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Poison = random 4.0/2.666~/2/1.6/1.333~x degen speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",16) > 0) delaycount = (delaycount * 8) / random(2,6);
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 15 - Degen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Fatigue = 0.2x regen speed
				SkillFactor = delaycount;
				if (CallACS("GetBuffTimer",18) > 0) delaycount = delaycount * 5;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 16 - Degen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Sleep = x0.2 degen speed
				SkillFactor = delaycount;
				PerkFactor = 10000;
				if (CallACS("GetBuffTimer",20) > 0)
				{
					delaycount /= 5;
					PerkFactor = 10000 - ((CallACS("MiscVarCheckDECORATE",10013) * 2000) + (CallACS("MiscVarCheckDECORATE",10014) * 5000));
					delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 17 - Degen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
				
				// Flora's Degeneration Speed is multiplied by 2.667 when holding the Ruinous Shield [curse effect]
				SkillFactor = delaycount;
				if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount = delaycount * 8 / 3;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 18 - Degen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// RegenHPFast perks
				SkillFactor = delaycount;
				PerkFactor = 10;
				if (CallACS("MiscVarCheckDECORATE",10013) > 0)
				{
					PerkFactor = 10 - ((CallACS("MiscVarCheckDECORATE",10013) * 2) + (CallACS("MiscVarCheckDECORATE",10014) * 5));
					delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step 19 - Degen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
				
				// "Cleared of Mind" Perks
				SkillFactor = delaycount;
				PerkFactor = 80;
				if (CallACS("MiscVarCheckDECORATE",10055) > 0)
				{
					perkfactor = 80 - ((CallACS("MiscVarCheckDECORATE",10055) * 2) + (CallACS("MiscVarCheckDECORATE",10056) * 5));
					delaycount = delaycount * perkfactor / 80;
				}
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 20 - Degen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Fists
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = random(28,32);
				delaycount = (delaycount * 20) / PerkFactor;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 21 - Degen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: 20 / %d", delaycount, SkillFactor, PerkFactor);
				
				// Checks Health Regen Rate Menu Option
				SkillFactor = delaycount;
				delaycount = delaycount * dvds_healthdegenmultiplier / 100;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 22 - Degen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthdegenmultiplier);
				
				// Low Cap to 1 Tics
				SkillFactor = delaycount;
				if (delaycount < 1) delaycount = 1;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step 23 - Degen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				if (CallACS("MenuVarCheckDECORATE",0) != 0) delaycount = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					HPDegenTimer += delaycount;
				}
			}
			else 
			{
				// Reset the Timer
				HPDegenTimer = 0 - random(-20,20); // HPDelayInterval2 + random(-20,20);
			}
			if (debugregenhealth) Console.Printf("    \caHP Degen [Step 24 - Degen Intervals (Timers)]: HPDegenTimer %d / %d", HPDegenTimer, HPDelayInterval2);

			if (HPDegenTimer >= HPDelayInterval2)
			{
				// Base of 1 HP Degen
				HPDegenAmount = 1;
				if (debugregenhealth) Console.Printf("    \caHP Regen [Step D1 - Degen Amount (Base)]: %d", HPDegenAmount);

				// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (debugregenhealth) Console.Printf("    \caHP Degen [Step D2 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Set Health [uptick]
				if (PlayerCurrentHealth > 0)
				{
					PlayerCurrentHealth -= HPDegenAmount;
					if (PlayerCurrentHealth < RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
					owner.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					if (debugregenhealth) Console.Printf("    \caHP Degen [Step D3 - Decrement HP]: %d, Current Health: %d / %d", HPDegenAmount, PlayerCurrentHealth, PlayerMaxHP);
				}

				// Reset the Timer
				HPDegenTimer = 0 - random(-20,20); // HPDelayInterval2 + random(-20,20);
			}
		}
		
		
		
		
		
		//****************
		//*POISON AILMENT*
		//****************
		int PoisonIncrement;
		int PoisonHealth;
		int PoisonHealthThreshold;
		int PoisonDmg;
		int PoisonFlashColor;

		// Base Max Increment
		PoisonMaxInterval = 12;
		PoisonMaxInterval += (PlayerDEF / 8);
		PoisonMaxInterval += (PlayerSTR / 16);
		PoisonMaxInterval *= 20;
		if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 1 - Max Interval Base]: %d\c-, DEF: %d, STR: %d", PoisonMaxInterval, PlayerDEF, PlayerSTR);

		// Difficulty Level
		previousdelaycount = PoisonMaxInterval;
		if (TrueGameSkill <= 0) PoisonMaxInterval = PoisonMaxInterval * 22 / 20;
		if (TrueGameSkill == 1) PoisonMaxInterval = PoisonMaxInterval * 21 / 20;
		if (TrueGameSkill == 2) PoisonMaxInterval = PoisonMaxInterval * 20 / 20;
		if (TrueGameSkill == 3) PoisonMaxInterval = PoisonMaxInterval * 19 / 20;
		if (TrueGameSkill == 4) PoisonMaxInterval = PoisonMaxInterval * 18 / 20;
		if (TrueGameSkill == 5) PoisonMaxInterval = PoisonMaxInterval * 17 / 20;
		if (TrueGameSkill == 6) PoisonMaxInterval = PoisonMaxInterval * 16 / 20;
		if (TrueGameSkill == 7) PoisonMaxInterval = PoisonMaxInterval * 15 / 20;
		if (TrueGameSkill >= 8) PoisonMaxInterval = PoisonMaxInterval * 14 / 20;
		if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 2 - Max Interval (Difficulty)]: %d\c-, Previous: %d", PoisonMaxInterval, previousdelaycount);

		// Check for Poison [-Invuln]
		if (CallACS("GetBuffTimer",16) > 0 && CallACS("GetBuffTimer",4) == 0) // Being invulnerable will prevent poison damage from occuring.
		{
			// Base Increment
			PoisonIncrement = 20;
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 3 - Count Interval Base]: %d\c-", PoisonIncrement);
	
			// Input Alterations
			previousdelaycount = PoisonIncrement;
			SkillFactor = 100;
			if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1;
			if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1;
			if (FreezePlayer == 0)
			{
				if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) SkillFactor = SkillFactor * 125 / 100;
				if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) SkillFactor = SkillFactor * random(112,113) / 100;
				if (buttons & BT_JUMP) SkillFactor = SkillFactor * 125 / 100;
				if (buttons & BT_CROUCH) SkillFactor = SkillFactor * 75 / 100;
				PoisonIncrement = PoisonIncrement * SkillFactor / 100;
			}
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (\cyInput: %d\cu)]: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, PoisonIncrement, previousdelaycount, SkillFactor, FreezePlayer);
	
			// Check Characters & Armor
			previousdelaycount = PoisonIncrement;
			if (CharacterClass == 2)
			{
				SkillFactor = 1000;
				if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 83;
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor -= 334;
				if (Owner.CountInv("DivineShield") > 0) SkillFactor -= 83;
				PoisonIncrement = PoisonIncrement * SkillFactor / 1000;
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Flora)]: %d\c-, Previous: %d, InputFactor: %d / 1000", PoisonIncrement, previousdelaycount, SkillFactor);
			}
			else
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				SkillFactor = 100;
				if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor -= 2; // (-2% for Green Armor)
				if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor -= 4; // (-4% for Blue Armor)
				if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor -= 5; // (-5% for Stone Armor 1)
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor -= 7; // (-7% for Diamond Armor 1)
				if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor -= 6; // (-6% for Stone Armor 2)
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor -= 8; // (-8% for Diamond Armor 2)
				PoisonIncrement = PoisonIncrement * SkillFactor / 100;
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Marines)]: %d\c-, Previous: %d, InputFactor: %d / 100", PoisonIncrement, previousdelaycount, SkillFactor);
			}
			
			// Buffs
			previousdelaycount = PoisonIncrement;
			if (CallACS("GetBuffTimer",12) > 0) PoisonIncrement = PoisonIncrement * 6 / 5; // Acceleratle = 120% Speed
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 5a - Count Interval (Acceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

			previousdelaycount = PoisonIncrement;
			if (CallACS("GetBuffTimer",15) > 0) PoisonIncrement = PoisonIncrement * 4 / 5; // Deceleratle = 80% Speed
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 5b - Count Interval (Deceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

			previousdelaycount = PoisonIncrement;
			if (CallACS("GetBuffTimer",18) > 0) PoisonIncrement = PoisonIncrement * 9 / 5; // Fatigue = 180% Speed
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 6 - Count Interval (Fatigue)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);
			
			previousdelaycount = PoisonIncrement;
			if (CallACS("GetBuffTimer",20) > 0) PoisonIncrement = PoisonIncrement * 1 / 5; // Sleep = 20% Speed
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 7 - Count Interval (Sleep)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

			PoisonTimer += PoisonIncrement;
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 8 - Timer]: %d / %d\c-, Increment: %d", PoisonTimer, PoisonMaxInterval, PoisonIncrement);

			// Poison Damage
			if (PoisonTimer >= PoisonMaxInterval)
			{
				PoisonTimer = 0;

				PoisonHealth = PlayerCurrentHealth;
				PoisonHealthThreshold = PlayerMaxHP / 50;
				if (PoisonHealthThreshold < 2) PoisonHealthThreshold = 2;
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 9 - Get Poison LowCap]: %d\c-, Health: %d", PoisonHealthThreshold, PoisonHealth);
				if (PoisonHealth > PoisonHealthThreshold)
				{
					PoisonDmg = PlayerMaxHP / 200;
					if (PoisonDmg < 1) PoisonDmg = 1;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 10 - Base Poison Dmg]: %d\c-", PoisonDmg);

					previousdelaycount = PoisonDmg;
					if (random(1,8) == 8)
					{
						if (random(1,8) == 8) PoisonDmg *= 3; else PoisonDmg *= 2;
					}
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 11 - Random 2/3x Multi]: %d\c-, Previous: %d", PoisonDmg, previousdelaycount);
					
					// Flash Screen and Deal damage
					int PoisonFlash = random(1,5);
					string PoisonFlashClr = "00 DF 00";
					if (PoisonFlash == 1) PoisonFlashClr = "00 BF 00";
					if (PoisonFlash == 2) PoisonFlashClr = "00 CF 00";
					if (PoisonFlash == 3) PoisonFlashClr = "00 DF 00";
					if (PoisonFlash == 4) PoisonFlashClr = "00 EF 00";
					if (PoisonFlash == 5) PoisonFlashClr = "00 FF 00";
					owner.A_SetBlend(PoisonFlashClr,0.125,17);
					PoisonHealth -= PoisonDmg;
					if (PoisonHealth < PoisonHealthThreshold) PoisonHealth = PoisonHealthThreshold;
					owner.health = PoisonHealth; PlayerCurrentHealth = owner.health;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 12 - Deal Damage]: Health %d\c-, Damage Dealt: %d", PoisonHealth, PoisonDmg);
					
					// Pain Sounds
					PoisonHits++;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 13 - Hit Count], Hits: %d", PoisonHits);
					if (PoisonHits >= 3)
					{
						PoisonHits = 0;
						if (random(1,16) == 16)
						{
							if (debugpoisoninfo) Console.Printf("    \cyPoison Damage [Step 14 - Play Voice]", PoisonHits);
							owner.A_StopSound(CHAN_VOICE);
							if (CharacterClass == 9)
							{
								if (HealthRatio >= 667) owner.A_PlaySound("PetraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
								if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("PetraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
								if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("PetraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
							}
							else
							if (CharacterClass == 8)
							{
								if (HealthRatio >= 667) owner.A_PlaySound("AilishPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
								if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("AilishPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
								if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("AilishPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
							}
							else
							if (CharacterClass == 2)
							{
								if (HealthRatio >= 667) owner.A_PlaySound("FloraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
								if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("FloraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
								if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("FloraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
							}
							else
							if (CharacterClass == 1)
							{
								if (PoisonHealth > 0) owner.A_PlaySound("illucia/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
							}
							else
							if (CharacterClass == 0)
							{
								if (PoisonHealth > 0) owner.A_PlaySound("deggaris/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
							}
						}
					}
					
				}
			}
		}
		else
		{
			PoisonDmg = 0;
			PoisonTimer = 0;
			PoisonHits = 0;
		}
		// To be Transplanted From ACS :V
		
		
		
		
		
		//*********************
		//**Magic Regen/Degen**
		//*********************
		int SkillLevelManaDelay, ManaReDelay;
		int RegenedMana, regenedmanabasereq;
		int MaxRegenableMana, EquippedRegenCap;
		int MaxManaLimit;
		if (playeractor)
		{
			// Base Delay Count
			delaycount = 20;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 1 - Base Count]: %d\c-", delaycount);

			// Stamina Upgrades [Strife]
			previousdelaycount = delaycount;
			SkillFactor = (CallACS("MiscVarCheckDECORATE",317) * 2) / 3;
			delaycount += SkillFactor;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 2 - Strife - Stamina Upgrade]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Accelerates MP Regen when Tension is Boosted
			previousdelaycount = delaycount;
			if (TensionLevel >= 1) delaycount += 1; // "5" = +1 [+5%]
			if (TensionLevel >= 2) delaycount += 1; // "20" = +2 [+10%]
			if (TensionLevel >= 3) delaycount += 2; // "50" = +4 [+20%]
			if (TensionLevel >= 4) delaycount += 2; // "100" = +6 [+30%]
			if (TensionLevel >= 5) delaycount += 3; // "250" = +9 [+45%]
			if (TensionLevel >= 6) delaycount += 4; // "500" = +13 [+65%]
			if (TensionLevel >= 7) delaycount += 5; // "1000" = +18 [+90%]
			if (TensionLevel >= 5 && CallACS("MiscVarCheckDECORATE",184) == 0) delaycount = delaycount * random(40,50) / 40; // +~25%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 3 - Tension]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// PowerTrip Mode
			previousdelaycount = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 5) / 2; // 250%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount * 5; // 500%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 4 - Musou/Power Trip Mode]: %d\c-, Previous: %d", delaycount, previousdelaycount);
			
			previousdelaycount = delaycount;
			if (CallACS("GetBuffTimer",12) > 0) delaycount = delaycount * 6 / 5; // Acceleratle = 1.2x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 5a - Acceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (CallACS("GetBuffTimer",15) > 0) delaycount = delaycount * 4 / 5; // Deceleratle = 0.8x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 5b - Deceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (CallACS("GetBuffTimer",18) > 0) delaycount = delaycount * 1 / 5; // Fatigue = 0.2x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 6 - Fatigue]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (CallACS("GetBuffTimer",20) > 0)
			{
				delaycount *= 5; // Sleep = 5x regen speed
				PerkFactor = ((CallACS("MiscVarCheckDECORATE",10015) * 2000) + (CallACS("MiscVarCheckDECORATE",10016) * 5000)) + 10000;
				delaycount = delaycount * PerkFactor / 10000; // "RegenMPFast" and "RegenMPFast EX" perks.
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 7 - Sleep]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Ruinous Shield - greatly reduces MP regeneration speed
			previousdelaycount = delaycount;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount = delaycount * 3 / 8; // 37.5%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 8 - Ruinous Shield]: %d\c-, Previous: %d", delaycount, previousdelaycount);
		
			// RegenMPFast perks
			previousdelaycount = delaycount;
			perkfactor = 10;
			if (CallACS("MiscVarCheckDECORATE",10015) > 0)
			{
				PerkFactor = 10 + ((CallACS("MiscVarCheckDECORATE",10015) * 2) + (CallACS("MiscVarCheckDECORATE",10016) * 5));
				delaycount = delaycount * PerkFactor / 10; // "RegenMPFast" and "RegenMPFast EX" perks.
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 9 - Regen MP Fast]: %d\c-, Previous: %d, Factor: %d / 10", delaycount, previousdelaycount, PerkFactor);
		
			// "Cleared of Mind" Perks
			previousdelaycount = delaycount;
			perkfactor = 80;
			if (CallACS("MiscVarCheckDECORATE",10055) > 0)
			{
				perkfactor = 80 + ((CallACS("MiscVarCheckDECORATE",10055) * 2) + (CallACS("MiscVarCheckDECORATE",10056) * 5));
				delaycount = delaycount * perkfactor / 80;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 10 - Cleared of Mind]: %d\c-, Previous: %d, Factor: %d / 80", delaycount, previousdelaycount, PerkFactor);
			
			// Checks Mana Regen Rate Menu Option
			previousdelaycount = delaycount;
			delaycount = delaycount * dvds_manaregenratemultiplier / 100;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 11 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", delaycount, previousdelaycount, dvds_manaregenratemultiplier);
			
			// Focusing
			previousdelaycount = delaycount;
			if (CallACS("MiscVarCheckDECORATE",212) > 0)
			{
				// Slowly increases the speed of regen as focus lasts longer
				if (FocusTimer >= 140) delaycount += 1; // [4 seconds]
				if (FocusTimer >= 245) delaycount += 1; // [7 seconds]
				if (FocusTimer >= 350) delaycount += 2; // [10 seconds]
				if (FocusTimer >= 490) delaycount += 2; // [14 seconds]
				if (FocusTimer >= 630) delaycount += 3; // [18 seconds]
				if (FocusTimer >= 770) delaycount += 3; // [22 seconds]
				if (FocusTimer >= 980) delaycount += 4; // [28 seconds]
				if (FocusTimer >= 1190) delaycount += 4; // [34 seconds]
				if (FocusTimer >= 1470) delaycount += 5; // [42 seconds]
				if (FocusTimer >= 1750) delaycount += 5; // [50 seconds]
				if (FocusTimer >= 2100) delaycount += 6; // [60 seconds]
				if (FocusTimer >= 2450) delaycount += 6; // [70 seconds]
				if (FocusTimer >= 2870) delaycount += 7; // [82 seconds]
				if (FocusTimer >= 3290) delaycount += 7; // [94 seconds]
				if (FocusTimer >= 3780) delaycount += 8; // [108 seconds]
				if (FocusTimer >= 4270) delaycount += 8; // [122 seconds]
				if (FocusTimer >= 2100) delaycount = (delaycount * 3) / 2; // [60 seconds]
				if (FocusTimer >= 4200) delaycount = (delaycount * 3) / 2; // [60 seconds]
		
				if (CallACS("MiscVarCheckDECORATE",317) > 0)
				{
					if (FocusTimer >= 350) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 4;
					if (FocusTimer >= 700 && CallACS("MiscVarCheckDECORATE",317) >= 2) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 4;
					if (FocusTimer >= 1050 && CallACS("MiscVarCheckDECORATE",317) >= 4) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 3;
					if (FocusTimer >= 1400 && CallACS("MiscVarCheckDECORATE",317) >= 6) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 3;
					if (FocusTimer >= 1750 && CallACS("MiscVarCheckDECORATE",317) >= 8) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 2;
					if (FocusTimer >= 2100 && CallACS("MiscVarCheckDECORATE",317) >= 10) delaycount += (CallACS("MiscVarCheckDECORATE",317) * 1) / 2;
				}
		
				if (random(1,25) == 1) delaycount *= 8; else delaycount *= 4;
		
				FocusHumTimer = FocusTimer % 25;
				if (FocusTimer >= 140) FocusHumTimer = FocusTimer % 24;
				if (FocusTimer >= 245) FocusHumTimer = FocusTimer % 23;
				if (FocusTimer >= 315) FocusHumTimer = FocusTimer % 22;
				if (FocusTimer >= 350) FocusHumTimer = FocusTimer % 21;
				if (FocusTimer >= 490) FocusHumTimer = FocusTimer % 19;
				if (FocusTimer >= 630) FocusHumTimer = FocusTimer % 17;
				if (FocusTimer >= 910) FocusHumTimer = FocusTimer % 15;
				if (FocusTimer >= 2100) FocusHumTimer = FocusTimer % 12;

				if (FocusHumTimer == 1) owner.A_PlaySound("focushum",7,1.125);
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 12 - Focusing]: %d\c-, Previous: %d, FocusHumTimer: %d, FocusTimer: %d", delaycount, previousdelaycount, FocusHumTimer, FocusTimer);
		
			// Weapons
			previousdelaycount = delaycount;
			If (weapon is "SapphireWandNew")
			{
				if (CallACS("MiscVarCheckDECORATE",10053) == 1) delaycount = delaycount * 21 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 2) delaycount = delaycount * 23 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 3) delaycount = delaycount * 26 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 4) delaycount = delaycount * 30 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 5) delaycount = delaycount * 35 / 20;
			}
			If (weapon is "DualSapphireWandsNew")
			{
				if (CallACS("MiscVarCheckDECORATE",10053) == 1) delaycount = delaycount * 22 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 2) delaycount = delaycount * 26 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 3) delaycount = delaycount * 32 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 4) delaycount = delaycount * 40 / 20;
				if (CallACS("MiscVarCheckDECORATE",10053) == 5) delaycount = delaycount * 50 / 20;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 13 - Weapon Checking]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Final Checks
			if (delaycount < 1) delaycount = 1;

			if (CallACS("MenuVarCheckDECORATE",0) != 0) delaycount = 0; // If using In-Game Menus
			if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0 && PlayerCurrentMP < PlayerMaxMP) 
			{
				// If Player is "Conscious" and Mana is below Max
				 MPRegenTimer += delaycount;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 14 - Timer Check]: %d / %d\c-, delaycount: %d", MPRegenTimer, MPDelayInterval, delaycount);
			
			RegenedMana = 0;
			if (MPRegenTimer >= MPDelayInterval)
			{
				if (PlayerCurrentMP < PlayerMaxMP && PlayerCurrentHealth > 0)
				{
					// A combined total of 12-20 points of Sorcery/Theraphesuis are needed for an extra point of MP regen.
					if (TrueGameSkill <= 0)
					{
						RegenedMana = 3;
						regenedmanabasereq = 12;
					}
					if (TrueGameSkill == 1) 
					{
						RegenedMana = random(2,3);
						regenedmanabasereq = 14;
					}
					if (TrueGameSkill == 2)
					{
						RegenedMana = 2;
						regenedmanabasereq = 16;
					}
					if (TrueGameSkill == 3) 
					{
						RegenedMana = random(1,2);
						regenedmanabasereq = 18;
					}
					if (TrueGameSkill == 4) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 20;
					}
					if (TrueGameSkill == 5) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 22;
					}
					if (TrueGameSkill == 6) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 24;
					}
					if (TrueGameSkill == 7) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 26;
					}
					if (TrueGameSkill == 8) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 28;
					}
					RegenedMana += ((PlayerSOR + PlayerTHE) / regenedmanabasereq);
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x1 - Base Regen Amount]: %d\c-, Required (SOR+THE) Pts: %d", RegenedMana, regenedmanabasereq);

				previousdelaycount = RegenedMana;
				if (CallACS("GetBuffTimer",7) > 0) // Divine Avatar
				{
					SkillFactor = PlayerLevel / 10;
					RegenedMana += SkillFactor;
					if (random(0,100) < 26)
					{
						RegenedMana = RegenedMana * 5 / 4;
					}
					else
					{
						if (random(0,100) < 51)
						{
							RegenedMana = RegenedMana * 9 / 8;
						}
					}
				}
				else
				{
					SkillFactor = PlayerLevel / 25;
					RegenedMana += SkillFactor;
					if (random(0,100) < 26)
					{
						RegenedMana = RegenedMana * 17 / 16;
					}
					else
					{
						if (random(0,100) < 51)
						{
							RegenedMana = RegenedMana * 33 / 32;
						}
					}
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x2 - Divine Avatar Check]: %d\c-, Previous: %d, Added: %d", RegenedMana, previousdelaycount, SkillFactor);
	
				// Character-Based regen factors
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0) RegenedMana = RegenedMana * random(15,17) / 16; // Deggaris (93.75% - 106.25%)
				if (CharacterClass == 1) RegenedMana = RegenedMana * random(19,21) / 16; // Illucia (118.75% - 131.25%)
				if (CharacterClass == 2) RegenedMana = RegenedMana * random(23,25) / 16; // Flora (143.75% - 156.25%)
				if (CharacterClass == 8) RegenedMana = RegenedMana * random(23,25) / 16; // Ailish (143.75% - 156.25%)
				if (CharacterClass == 9) RegenedMana = RegenedMana * random(17,19) / 16; // Petra (106.25% - 118.75%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x3 - Character Check]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// Sauron's Helmet
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 11 / 8; // Deggaris w/ Helmet (137.5%)
				if (CharacterClass == 1 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 10 / 8; // Illucia w/ Helmet (125%)
				if (CharacterClass == 2 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 8 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 9 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 12 / 8; // Petra w/ Helmet (150%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4a - Sauron's Helmet]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Sauron's Gauntlets
				previousdelaycount = RegenedMana;
				if (Owner.CountInv("SauronGauntletsItem") > 0)
				{
					if (CharacterClass == 0) RegenedMana = RegenedMana * 5 / 4; // Deggaris w/ Gauntlets (125%)
					if (CharacterClass == 1) RegenedMana = RegenedMana * 5 / 4; // Illucia w/ Gauntlets (125%)
					if (CharacterClass == 2) RegenedMana = RegenedMana * 5 / 4; // Flora w/ Gauntlets (125%)
					if (CharacterClass == 8) RegenedMana = RegenedMana * 5 / 4; // Ailish w/ Gauntlets (125%)
					if (CharacterClass == 9) RegenedMana = RegenedMana * 5 / 4; // Petra w/ Gauntlets (125%)
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4b - Sauron's Gauntlets]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// The One Ring
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Deggaris w/ Ring (62.5%)
				if (CharacterClass == 1 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Illucia w/ Ring (75%)
				if (CharacterClass == 2 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 7 / 8; // Flora w/ Ring (87.5%)
				if (CharacterClass == 8 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Ailish w/ Ring (87.5%)
				if (CharacterClass == 9 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Petra w/ Ring (62.5%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4c - The One Ring]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				previousdelaycount = RegenedMana;
				if (CallACS("GetBuffTimer",12) > 0) RegenedMana = RegenedMana * 6 / 5; // Acceleratle = +20% Regen
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x5a - Acceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
				previousdelaycount = RegenedMana;
				if (CallACS("GetBuffTimer",15) > 0) RegenedMana = RegenedMana * 4 / 5; // Deceleratle = -20% Regen
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x5b - Deceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Poison = +8.334% Regen
				previousdelaycount = RegenedMana;
				if (CallACS("GetBuffTimer",16) > 0 && CallACS("GetBuffTimer",4) == 0) RegenedMana = RegenedMana * 13 / 12;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x6 - Poison]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Checks Mana Regen Rate Menu Option
				previousdelaycount = RegenedMana;
				RegenedMana = RegenedMana * dvds_manaregenmultiplier / 100;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x7 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", RegenedMana, previousdelaycount, dvds_manaregenmultiplier);
					
				// Weapons
				previousdelaycount = RegenedMana;
				If (weapon is "SapphireWandNew")
				{
					if (CallACS("MiscVarCheckDECORATE",10053) == 1) RegenedMana = RegenedMana * 41 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 2) RegenedMana = RegenedMana * 43 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 3) RegenedMana = RegenedMana * 45 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 4) RegenedMana = RegenedMana * 48 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 5) RegenedMana = RegenedMana * 51 / 40;
				}
				If (weapon is "DualSapphireWandsNew")
				{
					if (CallACS("MiscVarCheckDECORATE",10053) == 1) RegenedMana = RegenedMana * 42 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 2) RegenedMana = RegenedMana * 46 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 3) RegenedMana = RegenedMana * 50 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 4) RegenedMana = RegenedMana * 56 / 40;
					if (CallACS("MiscVarCheckDECORATE",10053) == 5) RegenedMana = RegenedMana * 62 / 40;
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x8 - Weapon Checking]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x9 - LOWCap 1]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// New Addition = Caps Maximum Mana Regeneration to a certain amount based on Difficulty and armor-type items.
				MaxRegenableMana = PlayerMaxMP * 50 / 100;
				if (TrueGameSkill <= 0) MaxRegenableMana = PlayerMaxMP * 61 / 100; 	// (61% of Max)
				if (TrueGameSkill == 1) MaxRegenableMana = PlayerMaxMP * 55 / 100; 				// (55% of Max)
				if (TrueGameSkill == 2) MaxRegenableMana = PlayerMaxMP * 50 / 100; 			// (50% of Max)
				if (TrueGameSkill == 3) MaxRegenableMana = PlayerMaxMP * 45 / 100; 				// (45% of Max)
				if (TrueGameSkill == 4) MaxRegenableMana = PlayerMaxMP * 39 / 100; 	// (39% of Max)
				if (TrueGameSkill == 5) MaxRegenableMana = PlayerMaxMP * 36 / 100; 		// (36% of Max)
				if (TrueGameSkill == 6) MaxRegenableMana = PlayerMaxMP * 33 / 100; 		// (33% of Max)
				if (TrueGameSkill == 7) MaxRegenableMana = PlayerMaxMP * 30 / 100; 	// (30% of Max)
				if (TrueGameSkill >= 8) MaxRegenableMana = PlayerMaxMP * 27 / 100; 			// (27% of Max)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x10 - Get Max Regen]: %d\c-, MaxRegen: %d", RegenedMana, MaxRegenableMana);
	
				EquippedRegenCap = 100; // in percent
				// All-Character Specfic Items
				if (Owner.CountInv("SauronHelmet") > 0) EquippedRegenCap -= 25;  // (-25% extension if Sauron's Helmet is equipped)
				if (Owner.CountInv("SauronGauntlets") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsFlora") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsAilish"; APPackCheck = nm; 
				if (Owner.CountInv(APPackCheck) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsPetra"; APPackCheck2 = nm; 
				if (Owner.CountInv(APPackCheck2) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("TheOneRing") > 0) EquippedRegenCap += 50;  // (+50% extension if The One Ring is equipped)
				// Marine Specfic Items (between -4% and -16%, since only one can be equipped at once
				if (Owner.CountInv("DSGreenArmorClass") > 0) EquippedRegenCap -= 4; // (-4% for Green Armor)
				if (Owner.CountInv("DSBlueArmorClass") > 0) EquippedRegenCap -= 8; // (-8% for Blue Armor)
				if (Owner.CountInv("DSStoneArmorClass1") > 0) EquippedRegenCap -= 10; // (-10% for Stone Armor 1)
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) EquippedRegenCap -= 14; // (-14% for Diamond Armor 1)
				if (Owner.CountInv("DSStoneArmorClass2") > 0) EquippedRegenCap -= 12; // (-12% for Stone Armor 2)
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) EquippedRegenCap -= 16; // (-16% for Diamond Armor 2)
				// Flora Specfic Items (up to +150%)
				if (Owner.CountInv("EvenstarNecklace") > 0) EquippedRegenCap += 25;  // (+25% extension if Evenstar Necklace is equipped)
				if (Owner.CountInv("AnubisCufflinks") > 0) EquippedRegenCap += 62;  // (+62% extension if Anubis Cufflinks are equipped)
				if (Owner.CountInv("KissaBra") > 0) EquippedRegenCap += 38; // (+38% extension if Kissa's Armor Brassiere is equipped)
				if (Owner.CountInv("BalrogRing") > 0) EquippedRegenCap += 25; // (+25% extension if Balrog's Ring is equipped)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x11 - Get Equip Regen Cap]: %d\c-, EquipRegenCap: %d", RegenedMana, EquippedRegenCap);
	
				if (EquippedRegenCap < 20) EquippedRegenCap = 20;
				if (EquippedRegenCap > 640) EquippedRegenCap = 640;
				MaxRegenableMana = MaxRegenableMana * EquippedRegenCap / 100;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x12 - Misc]: %d\c-, EquipRegenCap: %d, MaxRegenableMana: %d", RegenedMana, EquippedRegenCap, MaxRegenableMana);

				// Caps Mana Regeneration to a certain % of the maximum based on difficulty level
				previousdelaycount = RegenedMana;
				if (RegenedMana > MaxRegenableMana) RegenedMana = MaxRegenableMana;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x13 - HighCap 1]: %d\c-, Previous: %d, MaxRegenableMana: %d%", RegenedMana, previousdelaycount, MaxRegenableMana);
	
				// Dove's Ribbon [Increases MP Regeneration]
				previousdelaycount = RegenedMana;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("DoveRibbon") > 0)
					{
						RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (100% Chance of Extra 2-4 Mana)
						if (random(1,4) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (25% Chance of extra 1-2 Mana)
						if (random(1,16) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (6.25% Chance of extra 1-2 Mana)
						if (random(1,64) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (1.5625% Chance of extra 1-2 Mana)
					}
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x14 - Dove's Ribbon]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				SkillFactor = 36;
				// Focus = 12.5% more mana per interval
				if (CallACS("MiscVarCheckDECORATE",212) > 0)
				{
					if (CharacterClass == 2)
					{
						if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 2;
						if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 2;
						if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 2;
					}
					else
					{
						if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 1;
						if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 2;
						if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 3;
						if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 4;
						if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 5;
						if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 6;
					}
					RegenedMana = RegenedMana * SkillFactor / 20;
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x15 - Focusing]: %d\c-, Previous: %d, Factor: %d / 20", RegenedMana, previousdelaycount, SkillFactor);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x16 - LOWCap 2]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// The actual Regeneration Part
				PlayerCurrentMP += RegenedMana;
				if (PlayerCurrentMP > PlayerMaxMP) PlayerCurrentMP = PlayerMaxMP;

				MaxManaLimit = PlayerMaxMP * 2;
	
				if (PlayerCurrentMP > MaxManaLimit) PlayerCurrentMP = MaxManaLimit;
				CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP); // Sets MaxMana in ACS
				CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP); // Sets "LastManaValue" in ACS
				CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP); // Sets "NewManaValue" in ACS

				// Reset Regen Delay
				if (TrueGameSkill <= 0) SkillLevelManaDelay = 600; // 30 tics
				if (TrueGameSkill == 1) SkillLevelManaDelay = 660; // 33 tics
				if (TrueGameSkill == 2) SkillLevelManaDelay = 740; // 37 tics
				if (TrueGameSkill == 3) SkillLevelManaDelay = 840; // 42 tics
				if (TrueGameSkill == 4) SkillLevelManaDelay = 960; // 48 tics
				if (TrueGameSkill == 5) SkillLevelManaDelay = 1020; // 51 tics
				if (TrueGameSkill == 6) SkillLevelManaDelay = 1080; // 54 tics
				if (TrueGameSkill == 7) SkillLevelManaDelay = 1140; // 57 tics
				if (TrueGameSkill >= 8) SkillLevelManaDelay = 1260; // 63 tics

				if (CharacterClass == 0) SkillLevelManaDelay += (20 * random(-3,5)); 
				if (CharacterClass == 1) SkillLevelManaDelay += (20 * random(-4,4));
				if (CharacterClass == 2) SkillLevelManaDelay += (20 * random(-5,3));
				if (CharacterClass == 8) SkillLevelManaDelay += (20 * random(-5,3));
				if (CharacterClass == 9) SkillLevelManaDelay += (20 * random(-4,4));

				if (CharacterClass == 0) ManaReDelay = PlayerLevel / 30; // Deggaris (up to 3/6)
				if (CharacterClass == 1) ManaReDelay = PlayerLevel / 25; // Illucia (up to 4/8)
				if (CharacterClass == 2) ManaReDelay = PlayerLevel / 20; // Flora (up to 5/10) 
				if (CharacterClass == 8) ManaReDelay = PlayerLevel / 21; // Ailish 
				if (CharacterClass == 9) ManaReDelay = PlayerLevel / 25; // Petra (up to 4/8)
				MPDelayInterval = SkillLevelManaDelay - ManaReDelay;

				// A combined total of 15 points of Sorcery/Theraphesuis are needed for a tic-point of faster regen time.
				ManaReDelay = (PlayerSOR + PlayerTHE) / 300;
				MPDelayInterval -= ManaReDelay;

				if (TrueGameSkill <= 0) if (MPDelayInterval < 20) MPDelayInterval = 20;
				if (TrueGameSkill == 1) if (MPDelayInterval < 40) MPDelayInterval = 40;
				if (TrueGameSkill == 2) if (MPDelayInterval < 80) MPDelayInterval = 80;
				if (TrueGameSkill == 3) if (MPDelayInterval < 140) MPDelayInterval = 140;
				if (TrueGameSkill == 4) if (MPDelayInterval < 220) MPDelayInterval = 220;
				if (TrueGameSkill == 5) if (MPDelayInterval < 240) MPDelayInterval = 240;
				if (TrueGameSkill == 6) if (MPDelayInterval < 260) MPDelayInterval = 260;
				if (TrueGameSkill == 7) if (MPDelayInterval < 280) MPDelayInterval = 280;
				if (TrueGameSkill >= 8) if (MPDelayInterval < 300) MPDelayInterval = 300;

				MPRegenTimer = 0;
			}
		}
		
		
		
		
		
		//****************
		//**Stamina Calc**
		//****************
		int MaximumStamina = 10000;
		int PreviousStaminaMax = MaximumStamina;
		if (playeractor)
		{
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) MaximumStamina += 1000; // +10.00%
				if (Owner.CountInv("FalconKnifeEarrings") > 0) MaximumStamina += 1750; // +17.50%
				if (Owner.CountInv("DivineShield") > 0) MaximumStamina += 500; // +5.00%
				if (Owner.CountInv("BalrogRing") > 0) MaximumStamina += 1250; // +12.50%
				// Total = 45.00%
			}
			else
			{
				// Armor
				if (Owner.CountInv("DSGreenArmorClass") > 0) MaximumStamina += 125; // +1.25%
				if (Owner.CountInv("DSBlueArmorClass") > 0) MaximumStamina += 250; // +2.5%
				if (Owner.CountInv("DSStoneArmorClass1") > 0) MaximumStamina += 500; // +5%
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) MaximumStamina += 1000; // +10%
				if (Owner.CountInv("DSStoneArmorClass2") > 0) MaximumStamina += 1250; // +12.5%
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) MaximumStamina += 2500; // +25%
				// Other
				// To Be Added [maybe]
			}
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 1 - Armor Check]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			// Stats
			int staminastatfactor = 0;
			SkillFactor = 0;
			// Agility
			if (CharacterClass == 0) SkillFactor = PlayerAGL * 6;
			if (CharacterClass == 1) SkillFactor = PlayerAGL * 8;
			if (CharacterClass == 2) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 8) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 9) SkillFactor = PlayerAGL * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2a - Stam - Stat Gain (AGL)]: %d, AGLAdd: %d", staminastatfactor, SkillFactor);

			// Defense
			if (CharacterClass == 0) SkillFactor = PlayerDEF * 10;
			if (CharacterClass == 1) SkillFactor = PlayerDEF * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDEF * 6;
			if (CharacterClass == 8) SkillFactor = PlayerDEF * 5;
			if (CharacterClass == 9) SkillFactor = PlayerDEF * 10;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2b - Stam - Stat Gain (DEF)]: %d, DEFAdd: %d", staminastatfactor, SkillFactor);

			// Deftness
			if (CharacterClass == 0) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 1) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 8) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 9) SkillFactor = PlayerDFT * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2c - Stam - Stat Gain (DFT)]: %d, DFTAdd: %d", staminastatfactor, SkillFactor);
			
			// Sorcery
			if (CharacterClass == 0) SkillFactor = PlayerSOR * 6;
			if (CharacterClass == 1) SkillFactor = PlayerSOR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSOR * 10;
			if (CharacterClass == 8) SkillFactor = PlayerSOR * 9;
			if (CharacterClass == 9) SkillFactor = PlayerSOR * 7;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2d - Stam - Stat Gain (SOR)]: %d, SORAdd: %d", staminastatfactor, SkillFactor);
			
			// Strength
			if (CharacterClass == 0) SkillFactor = PlayerSTR * 10;
			if (CharacterClass == 1) SkillFactor = PlayerSTR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSTR * 6;
			if (CharacterClass == 8) SkillFactor = PlayerSTR * 4;
			if (CharacterClass == 9) SkillFactor = PlayerSTR * 6;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2e - Stam - Stat Gain (STR)]: %d, STRAdd: %d", staminastatfactor, SkillFactor);
			
			// Therapeusis
			if (CharacterClass == 0) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 1) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 2) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 8) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 9) SkillFactor = PlayerTHE * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2f - Stam - Stat Gain (THE)]: %d, THEAdd: %d", staminastatfactor, SkillFactor);

			SkillFactor = 0;
			PreviousStaminaMax = MaximumStamina;
			// Final Calc
			if (TrueGameSkill <= 0) SkillFactor = 10000;
			if (TrueGameSkill == 1) SkillFactor = 11250;
			if (TrueGameSkill == 2) SkillFactor = 12500;
			if (TrueGameSkill == 3) SkillFactor = 15000;
			if (TrueGameSkill == 4) SkillFactor = 20000;
			if (TrueGameSkill == 5) SkillFactor = 21250;
			if (TrueGameSkill == 6) SkillFactor = 22500;
			if (TrueGameSkill == 7) SkillFactor = 23750;
			if (TrueGameSkill >= 8) SkillFactor = 25000;
			staminastatfactor += SkillFactor;
			MaximumStamina = MaximumStamina * staminastatfactor / SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2X - Stam - Stat Gain]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			PreviousStaminaMax = MaximumStamina;
			SkillFactor = ((CallACS("MiscVarCheckDECORATE",10005) * 500) + (CallACS("MiscVarCheckDECORATE",10006) * 1250)) + 10000;
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // "StamUp" and "StamUp EX" perks.
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 3 - Stam Up Perk]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			PreviousStaminaMax = MaximumStamina;
			SkillFactor = 10000 + (CallACS("MiscVarCheckDECORATE",317) * 1250);
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 4 - STRIFE - Stamina]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			int MegaMaxStamina = MaximumStamina * 5;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum: %d (5x: %d)", MaximumStamina, MegaMaxStamina);
			CallACS("MiscVarSetDECORATE",22,MaximumStamina);
			CallACS("MiscVarSetDECORATE",164,MegaMaxStamina);
		}
		
		
		
		
		
		//***********************
		//**Stamina Regen/Degen**
		//***********************
		int staminaregenbase, staminaregenfinal;
		PlayerCurrentStamina = CallACS("StatCheck",12);
		if (playeractor)
		{
			if (PlayerCurrentStamina < MaximumStamina)
			{
				staminaregenfinal = 0;
				// Base
				if (CharacterClass == 0) staminaregenbase = 15; // Deggaris (0.15%/tic = 5.25%/sec)
				if (CharacterClass == 1) staminaregenbase = 13; // Illucia (0.13%/tic = 4.55%/sec)
				if (CharacterClass == 2) staminaregenbase = 9; // Flora (0.09%/tic = 3.15%/sec)
				if (CharacterClass == 8) staminaregenbase = 8; // Ailish (0.08%/tic = 3.15%/sec)
				if (CharacterClass == 9) staminaregenbase = 15; // Petra (0.15%/tic = 5.25%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 1: Character Base]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 14); // +7-15
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 2: Level Addition]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Stamina Bonuses [Strife]
				staminaregenbase = ((CallACS("MiscVarCheckDECORATE",317) * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);

				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1; // Menus are on
				if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 84 / 100;
					if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
					if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 120 / 100;
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase += 12; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase += 25; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase += 50; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase += 100;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase += 75;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase += 150; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase -= 100; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase -= 100; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase -= 625;
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase += 100;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase += 25;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase += 75;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase += 125;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase += 50;  
				if (staminaregenbase < 125) staminaregenbase = 125;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 8;
				// Initia1 Stat Check = 8pts of Strength = +1% Stamina Regen Speed
				// Secondary Stat Check = 8pts of [?] = +1% Stamina Regen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal = staminaregenfinal * 1025 / 1000;
				if (TensionLevel == 2) staminaregenfinal = staminaregenfinal * 105 / 100;
				if (TensionLevel == 3) staminaregenfinal = staminaregenfinal * 110 / 100;
				if (TensionLevel == 4) staminaregenfinal = staminaregenfinal * 125 / 100;
				if (TensionLevel == 5) staminaregenfinal = staminaregenfinal * 150 / 100;
				if (TensionLevel == 6) staminaregenfinal = staminaregenfinal * 250 / 100;
				if (TensionLevel == 7) staminaregenfinal = staminaregenfinal * 500 / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
			
				// Divine Avatar = +100% Regen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",7) > 0) staminaregenfinal = staminaregenfinal * 2;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
		
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",12) > 0) staminaregenfinal = staminaregenfinal * 6 / 5; // Acceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",15) > 0) staminaregenfinal = staminaregenfinal * 4 / 5; // Deceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Poison = -25% Regen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",16) > 0 && CallACS("GetBuffTimer",4) == 0) staminaregenfinal = staminaregenfinal * 3 / 4;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = -80% Regen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",18) > 0) staminaregenfinal /= 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
			
				// Sleeping = +400% Regen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",20) > 0)
				{
					staminaregenfinal *= 5;
					PerkFactor = ((CallACS("MiscVarCheckDECORATE",10017) * 2000) + (CallACS("MiscVarCheckDECORATE",10018) * 5000)) + 10000;
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = +25% Regen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",23) > 0) staminaregenfinal = staminaregenfinal * 5 / 4;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * dvds_staminaregenmultiplier / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: %d / 100", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 10;
				if (CallACS("MiscVarCheckDECORATE",10017) > 0)
				{
					PerkFactor = 10 + ((CallACS("MiscVarCheckDECORATE",10017) * 2) + (CallACS("MiscVarCheckDECORATE",10018) * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If(weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					 weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 3 / 4;
				}
				If(weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 7 / 8;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 9 / 10;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 21 / 20;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) staminaregenfinal = staminaregenfinal * random(28,32) / 20;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 17: Weapons]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (CallACS("MiscVarCheckDECORATE",10055) > 0)
				{
					perkfactor = (80 + (CallACS("MiscVarCheckDECORATE",10055) * 2) + (CallACS("MiscVarCheckDECORATE",10056) * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
			
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal = staminaregenfinal * 5 / 2; // 250%
				if (dvds_musou_powertripmode == 2) staminaregenfinal = staminaregenfinal * 5; // 500%
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal < 1) staminaregenfinal = 1;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				if (CallACS("MenuVarCheckDECORATE",0) != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina > MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration: %d / %d\c-, Gain: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
			else if (PlayerCurrentStamina == MaximumStamina) 
			{
				staminaregenfinal = 0;
				if (debugstaminaregen) Console.Printf("    \cjStamina Neutral: %d / %d", PlayerCurrentStamina, MaximumStamina);
			}
			else
			{
				// Base
				staminaregenfinal = 0;
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = -4; // Deggaris (-0.04%/tic = -1.40%/sec)
				if (CharacterClass == 1) staminaregenbase = -6; // Illucia (-0.06%/tic = -2.10%/sec)
				if (CharacterClass == 2) staminaregenbase = -7; // Flora (-0.07%/tic = -2.45%/sec)
				if (CharacterClass == 8) staminaregenbase = -8; // Ailish (-0.08%/tic = -2.45%/sec)
				if (CharacterClass == 9) staminaregenbase = -4; // Petra (-0.04%/tic = -1.40%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 1: Character Base]: %d\c-, Decrease: %d", staminaregenfinal, staminaregenbase);

				// Level
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 40); // +2-5
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 30); // +2-5
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 56); // +1-3
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 2: Level Subtraction]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				staminaregenbase = 0;
				// Stamina Bonuses [Strife]
				staminaregenbase = ((CallACS("MiscVarCheckDECORATE",317) * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (CallACS("MiscVarCheckDECORATE",2500) > 0) FreezePlayer += 1; // Menus are on
				if (CallACS("GetBuffTimer",20) > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 100 / 84;
					if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
					if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 100 / 120;
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase -= 6; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase -= 12; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase -= 25; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase -= 50;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase -= 37;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase -= 75; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase += 50; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase += 50; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase += random(312,313);
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase -= 50;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase -= 13;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase -= 37;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase -= 63;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase -= 25;  
				if (staminaregenbase < 1) staminaregenbase = 1;
				if (staminaregenbase > 2500) staminaregenbase = 2500;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 16;
				// 16pts of Strength = -1% Stamina Degen Speed
				// Secondary Stat Check = 16pts of [?] = -1% Stamina Degen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase *= -1;
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal = staminaregenfinal * 990 / 1000;
				if (TensionLevel == 2) staminaregenfinal = staminaregenfinal * 975 / 1000;
				if (TensionLevel == 3) staminaregenfinal = staminaregenfinal * 950 / 1000;
				if (TensionLevel == 4) staminaregenfinal = staminaregenfinal * 900 / 1000;
				if (TensionLevel == 5) staminaregenfinal = staminaregenfinal * 750 / 1000;
				if (TensionLevel == 6) staminaregenfinal = staminaregenfinal * 500 / 1000;
				if (TensionLevel == 7) staminaregenfinal = staminaregenfinal * 200 / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
				
				// Divine Avatar = -50% Degen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",7) > 0) staminaregenfinal = staminaregenfinal / 2;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",12) > 0) staminaregenfinal = staminaregenfinal * 6 / 5; // Acceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",15) > 0) staminaregenfinal = staminaregenfinal * 4 / 5; // Deceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				// Poison = +20% Degen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",16) > 0 && CallACS("GetBuffTimer",4) == 0) staminaregenfinal = staminaregenfinal * 6 / 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = +400% Degen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",18) > 0) staminaregenfinal = staminaregenfinal * 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Sleep = -80% Degen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",20) > 0)
				{
					staminaregenfinal /= 5;
					PerkFactor = 10000 - ((CallACS("MiscVarCheckDECORATE",10017) * 2000) + (CallACS("MiscVarCheckDECORATE",10018) * 5000));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = -20% Degen
				staminaregenbase = staminaregenfinal;
				if (CallACS("GetBuffTimer",23) > 0) staminaregenfinal = staminaregenfinal * 4 / 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * 100 / dvds_staminaregenmultiplier;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: 100 / %d", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				if (CallACS("MiscVarCheckDECORATE",10017) > 0)
				{
					PerkFactor = 10 - ((CallACS("MiscVarCheckDECORATE",10017) * 2) + (CallACS("MiscVarCheckDECORATE",10018) * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If(weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					 weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 4 / 3;
				}
				If(weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 8 / 7;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 10 / 9;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 20 / 21;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) staminaregenfinal = staminaregenfinal * random(28,32) / 20;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 17: Weapons]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (CallACS("MiscVarCheckDECORATE",10055) > 0)
				{
					perkfactor = 80 - ((CallACS("MiscVarCheckDECORATE",10055) * 2) + (CallACS("MiscVarCheckDECORATE",10056) * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal = (staminaregenfinal * 2) / 5; // 40%
				if (dvds_musou_powertripmode == 2) staminaregenfinal = staminaregenfinal / 5; // 20%
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal > -1) staminaregenfinal = -1;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				// To possibly be transplanted from ACS. :V
				if (CallACS("MenuVarCheckDECORATE",0) != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina < MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstaminaregen) Console.Printf("    \cgStamina Degeneration: %d / %d\c-, Loss: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
			
		}
		
		
		
		
		
		//*********************
		//*Check Aerial Damage*
		//*********************
		if (playeractor)
		{
			landdmgbonus = 0;
			if (CallACS("GetBuffTimer",2) < 1) // && buttons & BT_JUMP) // [not Flight]
			{
				if (PlayerVelZ < -128.0)
				{
					landdmgbonus = 4;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]: ZVel: %8f", PlayerVelZ);
					
				}
				else
				if (PlayerVelZ < -32.0)
				{
					landdmgbonus = 3;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
				else
				if (PlayerVelZ < -8.0)
				{
					landdmgbonus = 2;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
				else
				if (PlayerVelZ < -0.0625)
				{
					landdmgbonus = 1;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
			}

			float SceptreJumpDmgMulti;
			SceptreJumpDmgMulti = PlayerVelZ / -0.1;
			SceptreJumpDmgMulti += 100;
			if (SceptreJumpDmgMulti < 100) SceptreJumpDmgMulti = 100;
			if (debugatkinfo == 1) Console.Printf("    \ceSceptre Landing Dmg Multiplier: ZVel: %8f%", SceptreJumpDmgMulti);
		}
		
		
		
		
		
		//************************************************************************
		//***Determines Maximum Ammo Ammounts Based on Strength Seeds and Level***
		//************************************************************************
		// To be Transplanted From ACS :V
		
		
		
		
		
		previoushealth = owner.health;
		if (!playeractor) owner.A_TakeInventory("PlayerStatItem",9999); // Removes itself if given to a non-Aetherius Player Class
		super.DoEffect();
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int InvisiblityLevel = 0;
		double InvisFactor = 1.0;
		double InvisBaseAmt = 1.0;
		if (Owner.CountInv("InvisiblitySpell") > 0)
		{
			if (random(1,100) <= 35)
			{
				InvisiblityLevel++;
				if (random(1,100) <= 25)
				{
					InvisiblityLevel++;
					if (random(1,100) <= 20)
					{
						InvisiblityLevel++;
						if (random(1,100) <= 10)
						{
							InvisiblityLevel++;
						}
					}
				}
			}
		}
		int InvisIgnored = random(1,3);

		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (dvdsdebug_actordmgdisplays > 0) Console.Printf("    (\czPlayerStatItem input [STEP 5 (\cwsuper.DamageMobj\cz)]\c-: \cydmg = %d\c-)", damage);

			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 10.00;
			if (CharacterClass == 0) LVLFactor = 1.00 + (PlayerLevel * .00117);				// Deggaris	(1 LVL = +0.117% Damage Dealt)
			if (CharacterClass == 1) LVLFactor = 1.00 + (PlayerLevel * .000863);			// Illucia	(1 LVL = +0.0863% Damage Dealt)
			if (CharacterClass == 2) LVLFactor = 1.00 + (PlayerLevel * .0011577);			// Flora		(1 LVL = +0.11577% Damage Dealt)
			if (CharacterClass == 8) LVLFactor = 1.00 + (PlayerLevel * .000825);			// Ailish		(1 LVL = +0.0825% Damage Dealt)
			if (CharacterClass == 9) LVLFactor = 1.00 + (PlayerLevel * .001075);			// Petra		(1 LVL = +0.1075% Damage Dealt)
			if (LVLfactor > LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Strength
			int PlayerSTR = CallACS("StatCheck",7);
			double STRfactor = 1.0; double STRfactorclamp = 10.00;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) STRfactor = 1.00 + (PlayerSTR * .006667);			// Deggaris	(1 STR = +0.6667~% Damage Dealt)
				if (CharacterClass == 1) STRfactor = 1.00 + (PlayerSTR * .005);					// Illucia	(1 STR = +0.5% Damage Dealt)
				if (CharacterClass == 2) STRfactor = 1.00 + (PlayerSTR * .003334);			// Flora		(1 STR = +0.3334~% Damage Dealt)
				if (CharacterClass == 8) STRfactor = 1.00 + (PlayerSTR * .003);					// Ailish		(1 STR = +0.3% Damage Dealt)
				if (CharacterClass == 9) STRfactor = 1.00 + (PlayerSTR * .00625);				// Petra		(1 STR = +0.625% Damage Dealt)
			}
			if (STRfactor > STRfactorclamp) STRfactor = STRfactorclamp;

			// Check Sorcery
			int PlayerSOR = CallACS("StatCheck",6);
			double SORfactor = 1.0; double SORfactorclamp = 10.00;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) SORfactor = 1.00 + (PlayerSOR * .003334);			// Deggaris	(1 SOR = +0.3334~% Damage Dealt)
				if (CharacterClass == 1) SORfactor = 1.00 + (PlayerSOR * .005);					// Illucia	(1 SOR = +0.5% Damage Dealt)
				if (CharacterClass == 2) SORfactor = 1.00 + (PlayerSOR * .006667);			// Flora		(1 SOR = +0.6667~% Damage Dealt)
				if (CharacterClass == 8) SORfactor = 1.00 + (PlayerSOR * .00625);				// Ailish		(1 SOR = +0.625% Damage Dealt)
				if (CharacterClass == 9) SORfactor = 1.00 + (PlayerSOR * .003);					// Petra		(1 SOR = +0.3% Damage Dealt)
			}
			if (SORfactor > SORfactorclamp) SORfactor = SORfactorclamp;

			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 5.0;
			if (dvds_musou_powertripmode == 2) MusouFactor = 10.0;

			// Hellcore Level Checker
			double HellcoreLevelFactor = 1.0;
			int HellcoreType = 0; 
			int HellcoreLevel = 0;
			// Slot 4 Hellcore Weapons
			if (damageType == 'ImpClaw') HellcoreType = 96;
			if (damageType == 'DarkImpClaw') HellcoreType = 97;
			if (damageType == 'CacodemonEye') HellcoreType = 98;
			if (damageType == 'CacolanternEye') HellcoreType = 99;
			if (damageType == 'AbaddonEye') HellcoreType = 100;
			// Slot 5 Hellcore Weapons
			if (damageType == 'KnightFist') HellcoreType = 101;
			if (damageType == 'BaronFist') HellcoreType = 102;
			if (damageType == 'BelphegorFist') HellcoreType = 103;
			if (damageType == 'BruiserFist') HellcoreType = 104;
			if (damageType == 'ArchonFist') HellcoreType = 105;
			if (damageType == 'PyroFist') HellcoreType = 106;
			// Slot 6 Hellcore Weapons
			if (damageType == 'IncarnateSkull') HellcoreType = 107;
			if (damageType == 'ArchvileHand') HellcoreType = 108;
			if (damageType == 'DiabloistHand') HellcoreType = 109;
			if (damageType == 'BalrogFist') HellcoreType = 110;
			if (damageType == 'ElementalEye') HellcoreType = 111;
			if (damageType == 'OverlordEye') HellcoreType = 112;
			if (HellcoreType != 0)
			{
				HellcoreLevel = CallACS("MiscVarCheckDECORATE",HellcoreType);
				if (HellcoreLevel > 0)
				{
					double HellcoreBaseMulti = 1.5;
					if (HellcoreLevel >= 1) HellcoreLevelFactor = HellcoreBaseMulti;
					if (HellcoreLevel >= 2) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 3) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 4) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 5) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 6) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 7) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 8) HellcoreLevelFactor *= HellcoreBaseMulti;
				}
				//Console.Printf("    (input: HellcoreLevelFactor [%d, LVL %d] = %10f)", HellcoreType, HellcoreLevel, HellcoreLevelFactor);
			}

			// "Soul Mastery" Perk [Hellcore damage ONLY]
			double SoulMasteryFactor = 1.0;
			if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
			    damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
			    damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
			{
				SoulMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10033) * .10) + (CallACS("MiscVarCheckDECORATE",10034) * .25));
			}
			
			// Sauron's Gauntlets
			double SauronGauntletsFactor = 1.0;
			if (Owner.CountInv("SauronGauntletsItem") > 0) SauronGauntletsFactor = 1.25;

			// Cursed Shield
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 0.390625;
				if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
						damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
						damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
				{
					CursedShieldFactor *= 2.56;
				}
			}
			
			// "MagiUp" and "Wand/Staff Mastery" Perks [Magic ONLY]
			double MagiUpATKFactor = 1.0;
			double WandStaffMasteryFactor = 1.0;
			if (damageType == 'Magic')
			{
				MagiUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10003) * .075) + (CallACS("MiscVarCheckDECORATE",10004) * .1875)); 
				WandStaffMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10053) * .0625) + (CallACS("MiscVarCheckDECORATE",10054) * .15625)); 
			}
			
			// Clearer of Mind "Perk"
			double ClearOfMindFactor = 1.0;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				ClearOfMindFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10055) * .0375) + (CallACS("MiscVarCheckDECORATE",10056) * .09375)); 
			}
			
			// "StamUp" Perk [Melee Oriented Attacks]
			double StamUpATKFactor = 1.0;
			if (damageType == 'Melee' || 
					damageType == 'Trample' || 
					damageType == 'Stomp' || 
					damageType == 'Sceptre' || 
					damageType == 'Gauntlets' || 
					damageType == 'Fist' || 
					damageType == 'Kick' || 
					damageType == 'Chainsaw' )
			{
				StamUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10005) * .075) + (CallACS("MiscVarCheckDECORATE",10006) * .1875)); 
			}
			
			// Death Rage
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0)
			{
				if (CallACS("MiscVarCheckDECORATE",10043) == 1) DeathRageFactor = 2.5;
				if (CallACS("MiscVarCheckDECORATE",10043) == 2) DeathRageFactor = 3.75;
				if (CallACS("MiscVarCheckDECORATE",10043) == 3) DeathRageFactor = 5.0;
			}
			
			// Strife's "Accuracy" Upgrades
			double StrifeAccuracyFactor = 1.0;
			StrifeAccuracyFactor = 1.00 + (CallACS("MiscVarCheckDECORATE",318) * .005);
			
			// Doomspell Bonuses
			double DoomSpellFactor = 1.0;
			if (CharacterClass == 0) // Deggaris
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.5;
				if (damageType == 'Ice') DoomSpellFactor = 1.0;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.0;
				if (damageType == 'Acid') DoomSpellFactor = 3.2;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 3.2;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CharacterClass == 1) // Illucia
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.333;
				if (damageType == 'Fire') DoomSpellFactor = 1.0;
				if (damageType == 'Holy') DoomSpellFactor = 0.75;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 3.2;
				if (damageType == 'Acid') DoomSpellFactor = 2.1;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 2.1;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CharacterClass == 2) // Flora
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 4.0;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CharacterClass == 8) // Ailish
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 3.25;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CharacterClass == 9) // Petra
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 3.75;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			
			// Invisibility [OFFENSIVE]
			double InvisFactor = 1.0;
			double InvisBaseAmt = 1.25;
			if (InvisiblityLevel >= 1)
			{
				InvisFactor *= InvisBaseAmt;
				if (InvisiblityLevel >= 2)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 3)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 4)
						{
							InvisFactor *= InvisBaseAmt;
						}
					}
				}
			}
			
			// Dashing Bonus
			double DashingFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",166) > 0)
			{
				if (damageType == 'Sceptre') DashingFactor = 1.75;
				if (damageType == 'Gauntlets') DashingFactor = 1.625;
				if (damageType == 'Fist' || damageType == 'Kick') DashingFactor = 1.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Chainsaw') DashingFactor = 1.25;
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (damageType == 'Fist' || damageType == 'Gauntlets')
			{
				if (Owner.CountInv("UppercutATKBonus1") > 0) UppercutFactor = 1.25;
				if (Owner.CountInv("UppercutATKBonus2") > 0) UppercutFactor = 1.625;
			}

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Sceptre' || damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw')
			{
				if (landdmgbonus == 1) LandingFactor = 2.0;
				if (landdmgbonus == 2) LandingFactor = 3.5;
				if (landdmgbonus == 3) LandingFactor = 6.5625;
				if (landdmgbonus == 4) LandingFactor = 13.9453125;
			}

			// Tension Level [OFFENSIVE]
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 1.7;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 3;			// "20" Tension
				if (TensionLevel == 3) TensionFactor = 5;			// "50" Tension
				if (TensionLevel == 4) TensionFactor = 7.5;		// "100" Tension
				if (TensionLevel == 5) TensionFactor = 11.25;	// "250" Tension
				if (TensionLevel == 6) TensionFactor = 17.5;	// "500" Tension
				if (TensionLevel == 7) TensionFactor = 25;		// "1000" Tension
			}
			
			// Flora Armor
			double FloraArmorFactor = 1.0;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("EvenstarNecklace") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
					if (damageType == 'Fire') FloraArmorFactor += 0.5;
					if (damageType == 'Ice') FloraArmorFactor += 0.5;
					if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') FloraArmorFactor += 0.5;
					if (damageType == 'Holy') FloraArmorFactor += 0.5;
				}
				if (Owner.CountInv("DoveRibbon") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
				}
				if (Owner.CountInv("FalconKnifeEarrings") > 0)
				{
					FloraArmorFactor *= 2.0;
					if (damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick') FloraArmorFactor *= 1.3333;
				}
			}
			
			// The One Ring [OFFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 2.5;

			// DQ Buffs [OFFENSIVE]
			double DQBuffFactor = 1.0;
			if (CallACS("GetBuffTimer",10) > 0) DQBuffFactor *= 2.0; // Oomph
			if (CallACS("GetBuffTimer",13) > 0) DQBuffFactor *= 0.5; // Blunt
			if (CallACS("GetBuffTimer",19) > 0) // Blind
			{
				if (random(1,16) == 1) DQBuffFactor *= 0.2; else DQBuffFactor *= 0.8; 
			}

			// Divine Avatar [OFFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 4.0;

			// GoE? [OFFENSIVE]
			double GoEFactor = 1.0;
			if (CallACS("GetBuffTimer",129) > 0) GoEFactor = 10.0;

			double TOTALFactor = LVLfactor 
													* STRfactor 
													* SORfactor 
													* MusouFactor 
													* MagiUpATKFactor 
													* WandStaffMasteryFactor 
													* StamUpATKFactor 
													* DeathRageFactor 
													* StrifeAccuracyFactor 
													* ClearOfMindFactor 
													* HellcoreLevelFactor
													* SoulMasteryFactor
													* SauronGauntletsFactor
													* CursedShieldFactor
													* DoomSpellFactor
													* InvisFactor
													* DashingFactor
													* UppercutFactor
													* LandingFactor
													* TensionFactor
													* FloraArmorFactor
													* RingFactor
													* DQBuffFactor
													* DivineAvatarFactor
													* GoEFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));

			if (playeractor) playeractor.playoutputdmg = newdamage;
			if (dvdsdebug_actordmgdisplays > 0 && newdamage > 0) 
			{
				Console.Printf("    (\czPlayerStatItem Input [STEP 6 - Alter Player's Dmg]\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, STRfactor [%d] = %8f, SORfactor [%d] = %8f, MusouFactor = %8f, StamUpATKFactor = %8f, MagiUpATKFactor = %8f, WandStaffMasteryFactor = %8f, DeathRageFactor = %8f, StrifeAccuracyFactor = %8f, ClearOfMindFactor = %8f, HellcoreLevelFactor = %8f, SoulMasteryFactor = %8f, SauronGauntletsFactor = %8f, CursedShieldFactor = %8f, DoomSpellFactor = %8f, InvisFactor = %8f, DashingFactor = %8f, UppercutFactor = %8f, LandingFactor = %8f, TensionFactor = %8f, FloraArmorFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, damage, newdamage, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerSTR, STRfactor, PlayerSOR, SORfactor, 
				MusouFactor, StamUpATKFactor, MagiUpATKFactor, 
				WandStaffMasteryFactor, DeathRageFactor, StrifeAccuracyFactor, 
				ClearOfMindFactor, HellcoreLevelFactor, SoulMasteryFactor, 
				SauronGauntletsFactor, CursedShieldFactor, DoomSpellFactor, 
				InvisFactor, DashingFactor, UppercutFactor, 
				LandingFactor, TensionFactor, FloraArmorFactor, 
				RingFactor, DQBuffFactor, DivineAvatarFactor, GoEFactor);
			}
		}

		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int predmg = damage;
			if (playeractor) predmg = playeractor.mobjdmg;
			double factorchange = 1.00;
			if (predmg > 0) factorchange = 1.0 * damage / predmg;
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 5 (\cwsuper.DamageMobj\cz)] player-StatItem input\c-: \cypredmg\c- / \cydamage\c- = \cy%d\c- /  \cy%d\c-, \cafactorchange\c- = \ca%8f\c-)", predmg, damage, factorchange);

			// ****************************************
			// *DEFENSE THAT CAN BE IGNORED GOES FIRST*
			// ****************************************
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 0.05;
			if (CharacterClass == 0) LVLFactor = 1.00 - (PlayerLevel * .00117);				// Deggaris	(1 LVL = -0.117% Damage Taken)
			if (CharacterClass == 1) LVLFactor = 1.00 - (PlayerLevel * .0009707);			// Illucia	(1 LVL = -0.09707% Damage Taken)
			if (CharacterClass == 2) LVLFactor = 1.00 - (PlayerLevel * .0007633);			// Flora		(1 LVL = -0.07633% Damage Taken)
			if (CharacterClass == 8) LVLFactor = 1.00 - (PlayerLevel * .000800);			// Ailish		(1 LVL = -0.0800% Damage Taken)
			if (CharacterClass == 9) LVLFactor = 1.00 - (PlayerLevel * .0010875);			// Petra		(1 LVL = -0.10875% Damage Taken)
			if (LVLfactor < LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Defense
			int PlayerDEF = CallACS("StatCheck",4);
			double DEFfactor = 1.0; double DEFfactorclamp = 0.05;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) DEFfactor = 1.00 - (PlayerDEF * .006667);			// Deggaris	(1 DEF = -0.6667~% Physical Damage)
				if (CharacterClass == 1) DEFfactor = 1.00 - (PlayerDEF * .005);					// Illucia	(1 DEF = -0.5000% Physical Damage)
				if (CharacterClass == 2) DEFfactor = 1.00 - (PlayerDEF * .003334);			// Flora		(1 DEF = -0.3334~% Physical Damage)
				if (CharacterClass == 8) DEFfactor = 1.00 - (PlayerDEF * .003);					// Ailish		(1 DEF = -0.3000% Physical Damage)
				if (CharacterClass == 9) DEFfactor = 1.00 - (PlayerDEF * .00725);				// Petra		(1 DEF = -0.7250% Physical Damage)
			}
			if (DEFfactor < DEFfactorclamp) DEFfactor = DEFfactorclamp;

			// Check Therapeusis
			int PlayerTHE = CallACS("StatCheck",8);
			double THEfactor = 1.0; double THEfactorclamp = 0.05;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) THEfactor = 1.00 - (PlayerTHE * .003334);			// Deggaris	(1 THE = -0.3334~% Magic Damage)
				if (CharacterClass == 1) THEfactor = 1.00 - (PlayerTHE * .005);					// Illucia	(1 THE = -0.5000% Magic Damage)
				if (CharacterClass == 2) THEfactor = 1.00 - (PlayerTHE * .006667);			// Flora		(1 THE = -0.6667~% Magic Damage)
				if (CharacterClass == 8) THEfactor = 1.00 - (PlayerTHE * .00725);				// Ailish		(1 THE = -0.7250% Magic Damage)
				if (CharacterClass == 9) THEfactor = 1.00 - (PlayerTHE * .003);					// Petra		(1 THE = -0.3000% Magic Damage)
			}
			if (THEfactor < THEfactorclamp) THEfactor = THEfactorclamp;
			
			// "LifeUp" Perk
			double LifeUpDEFFactor = 1.0;
			LifeUpDefFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10001) * .075) + (CallACS("MiscVarCheckDECORATE",10002) * .1875)); 

			// "Demolition Expert" Perk
			double DemoExpertFactor = 1.00;
			if (damageType == 'Explosive')
			{
				DemoExpertFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) - (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
				if (DemoExpertFactor < 0.025) DemoExpertFactor = 0.025;
			}

			// Strife's "Stamina" Upgrades
			double StrifeStaminaFactor = 1.0;
			StrifeStaminaFactor = 1.00 - (CallACS("MiscVarCheckDECORATE",317) * .005);
			
			// Invisibility [DEFENSIVE] [if ignored] (33% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored == 3)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) UppercutFactor = 0.80;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) UppercutFactor = 0.615;

			// Kicking Bonus
			double KickingFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) KickingFactor = 0.75;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) KickingFactor = 0.5625;

			// Kicking Bonus
			double MartArtFactor = 1.0;
			if (Owner.CountInv("MartArtsMaster1") > 0)
			{
				MartArtFactor *= 0.80;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.90;
			}
			if (Owner.CountInv("MartArtsMaster2") > 0)
			{
				MartArtFactor *= 0.50;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.75;
			}

			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldFactor *= 0.0268;
			}

			double PlayerFistBlockFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) 
			{
				PlayerFistBlockFactor *= 0.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.5;
			}
			if (Owner.CountInv("FistPlayerBlock2") > 0) 
			{
				PlayerFistBlockFactor *= 0.375;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.375;
			}
			if (Owner.CountInv("FistPlayerBlock3") > 0) 
			{
				PlayerFistBlockFactor *= 0.25;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.25;
			}
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.1;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseFactor = 1.0;
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseFactor *= 0.125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseFactor *= 0.5;

			// Sauron Equipment [DEFENSIVE]
			double SauronEquipFactor = 1.0;
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SauronEquipFactor *= 0.75; // General Reduction
				if (damageType == 'Bullet') SauronEquipFactor *= 0.833334;
			}

			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 0.4;

			// DQ Buffs [DEFENSIVE]
			double DQBuffFactor = 1.0;
			if (CallACS("GetBuffTimer",11) > 0) DQBuffFactor *= 0.50; // Buff
			if (CallACS("GetBuffTimer",14) > 0) DQBuffFactor *= 2.00; // Sap
			if (CallACS("GetBuffTimer",20) > 0) // Sleep
			{
				if(random(1,16) == 1) DQBuffFactor *= 5.0; else DQBuffFactor *= 1.25;
			}

			//********************************************************************
			// TOTALFactor is for defenses that can be ignored by various attacks
			//********************************************************************
			double TOTALFactor = 1.0
													* LVLfactor 
													* DEFfactor 
													* THEfactor 
													* LifeUpDEFFactor 
													* DemoExpertFactor 
													* StrifeStaminaFactor
													* InvisFactor
													* UppercutFactor
													* KickingFactor
													* MartArtFactor
													* EWShieldFactor
													* PlayerFistBlockFactor
													* SceptreDefenseFactor
													* SauronEquipFactor
													* RingFactor
													* DQBuffFactor;
													
			// The following allows TOTALFactor to be affected by varying types of (Partial)Defense-Ignoring attacks.
			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor.PlayerDefenseIgnoreFactor > 0.00 && TOTALFactor <= 1.00)
			{
				BaseIgnoreFactor = (1.0 - TOTALFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\cz[STEP 6] PlayerStatItem input\c-: \caDmgIgnFctr\c- = \ca%8f\c- / \cy%8f\c-, \cwPlyrDmgIgnFctr\c- = \cw%8f\c-, \cydmg = %d\c- (StatItem Actor))", 
					DefenseIgnoreFactor, BaseIgnoreFactor, playeractor.PlayerDefenseIgnoreFactor, damage);
				}
				TOTALFactor += DefenseIgnoreFactor;
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\cz[STEP 6] PlayerStatItem input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", DefenseIgnoreFactor, damage);
				}
			}

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			int postdef1dmg = newdamage;
			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) 
			{
				Console.Printf("    (\cz[STEP 7] StatItem input ([Ignorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, DEFfactor [%d] = %8f, THEfactor [%d] = %8f, LifeUpDEFFactor = %8f, DemoExpertFactor = %8f, StrifeStaminaFactor = %8f, InvisFactor = %8f, EWShieldFactor = %8f, PlayerFistBlockFactor = %8f, SceptreDefenseFactor = %8f, UppercutFactor = %8f, KickingFactor = %8f, MartArtFactor = %8f, SauronEquipFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f)", 
				damageType, damage, postdef1dmg, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerDEF, DEFfactor, PlayerTHE, THEfactor, 
				LifeUpDEFFactor, DemoExpertFactor, StrifeStaminaFactor, 
				InvisFactor, EWShieldFactor,
				PlayerFistBlockFactor, SceptreDefenseFactor, UppercutFactor, 
				KickingFactor, MartArtFactor, SauronEquipFactor, 
				RingFactor, DQBuffFactor);
			}


			// ******************************************
			// *DEFENSE THAT CANNOT BE IGNORED GOES LAST*
			// ******************************************
			// "Power Trip" Mode ===Unignorable===
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 0.2;
			if (dvds_musou_powertripmode == 2) MusouFactor = 0.1;

			// Death Rage [Invulnerablity?] ===Unignorable===
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageFactor = 0.0;
			
			// Focusing ===Unignorable===
			double FocusFactor = 1.00;
			if (CallACS("MiscVarCheckDECORATE",212) > 0) FocusFactor = 4.00;

			// Invisibility [DEFENSIVE] [if NOT ignored] (67% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored <= 2)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Cursed Shield [DEFENSIVE] ===Unignorable===
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 2.56;
				if (damageType == 'Dark' || damageType == 'IncarnateGlare')
				{
					CursedShieldFactor *= 0.390625;
				}
			}
			
			// Tension Level [DEFENSIVE] ===Unignorable===
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 0.975;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 0.925;		// "20" Tension
				if (TensionLevel == 3) TensionFactor = 0.825;		// "50" Tension
				if (TensionLevel == 4) TensionFactor = 0.7;			// "100" Tension
				if (TensionLevel == 5) TensionFactor = 0.55;		// "250" Tension
				if (TensionLevel == 6) TensionFactor = 0.35;		// "500" Tension
				if (TensionLevel == 7) TensionFactor = 0.1;			// "1000" Tension
			}

			// Divine Avatar [DEFENSIVE] ===Unignorable===
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 0.25;

			// GoE? [DEFENSIVE] ===Unignorable===
			double GoEFactor = 1.0;
			if (CallACS("GetBuffTimer",129) > 0) GoEFactor = 0.1;

			//************************************************************************
			// TOTALFactor2 is for defenses that CANNOT be ignored by various attacks
			//************************************************************************
			double TOTALFactor2 = 1.0
													* MusouFactor
													* DeathRageFactor
													* FocusFactor
													* InvisFactor
													* CursedShieldFactor
													* TensionFactor
													* DivineAvatarFactor
													* GoEFactor;

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, postdef1dmg, postdef1dmg * TOTALFactor2));
			if (dvdsdebug_playerdmgdisplays > 0 && postdef1dmg > 0) 
			{
				Console.Printf("    (\cz[STEP 8] StatItem input ([UNIgnorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor2\c- = \ca%8f\c-, MusouFactor = %8f, DeathRageFactor = %8f, FocusFactor = %8f, InvisFactor = %8f, CursedShieldFactor = %8f, TensionFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, postdef1dmg, newdamage, TOTALFactor2, 
				MusouFactor, DeathRageFactor, FocusFactor,
				InvisFactor, CursedShieldFactor,
				TensionFactor, DivineAvatarFactor, GoEFactor);
			}
		}
	}

	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		double CVarAdjustSpeed = 1.00;
		CVarAdjustSpeed = dvds_speedmult;

		double StaminaSpeed = 1.00;
		int StamRatio = CallACS("MiscVarCheckDECORATE",41);
		if (dvds_staminaaffectsspeed > 0)
		{
			if (StamRatio < 157) StaminaSpeed = 0.325;
			if (StamRatio > 156 && StamRatio < 626) StaminaSpeed = 0.475;
			if (StamRatio > 625 && StamRatio < 1251) StaminaSpeed = 0.61;
			if (StamRatio > 1250 && StamRatio < 2501) StaminaSpeed = 0.73;
			if (StamRatio > 2500 && StamRatio < 5001) StaminaSpeed = 0.835;
			if (StamRatio > 5000 && StamRatio < 7501) StaminaSpeed = 0.925;
			if (StamRatio > 7500 && StamRatio < 12501) StaminaSpeed = 1.00;
			if (StamRatio > 12500 && StamRatio < 20001) StaminaSpeed = 1.075;
			if (StamRatio > 20000 && StamRatio < 27501) StaminaSpeed = 1.165;
			if (StamRatio > 27500 && StamRatio < 35001) StaminaSpeed = 1.27;
			if (StamRatio > 35000 && StamRatio < 42501) StaminaSpeed = 1.39;
			if (StamRatio > 42500 && StamRatio < 48751) StaminaSpeed = 1.525;
			if (StamRatio > 48750) StaminaSpeed = 1.675;
		}

		double DodgeMoreSpeed = 1.00;
		DodgeMoreSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10007) * 0.01) + (CallACS("MiscVarCheckDECORATE",10008) * 0.025));

		double JumpMoreSpeed = 1.00;
		JumpMoreSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10009) * 0.01) + (CallACS("MiscVarCheckDECORATE",10010) * 0.025));

		double OnTheMoveSpeed = 1.00;
		OnTheMoveSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10045) * 0.02) + (CallACS("MiscVarCheckDECORATE",10046) * 0.05));

		double ArmorSpeed = 1.00;
		if (Owner.CountInv("CloakofEvasion") > 0) ArmorSpeed += 0.10;
		if (Owner.CountInv("DoveRibbon") > 0) ArmorSpeed += 0.15;

		double OneRingSpeed = 1.00;
		if (Owner.CountInv("TheOneRing") > 0) OneRingSpeed = 1.50;

		double LVLSpeed = 1.00;
		int PlayerLevel = CallACS("StatCheck",0);
		if (dvds_levelaffectsspeed)
		{
			if (CharacterClass == 0) LVLSpeed = 1.0 + (PlayerLevel * 0.000669);
			if (CharacterClass == 1) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
			if (CharacterClass == 2) LVLSpeed = 1.0 + (PlayerLevel * 0.001389);
			if (CharacterClass == 8) LVLSpeed = 1.0 + (PlayerLevel * 0.00128255555555);
			if (CharacterClass == 9) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
		}

		double AGLSpeed = 1.00;
		int PlayerAGL = CallACS("StatCheck",3);
		if (CharacterClass == 0) AGLSpeed = 1.0 + (PlayerAGL * 0.00111113333333);
		if (CharacterClass == 1) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 
		if (CharacterClass == 2) AGLSpeed = 1.0 + (PlayerAGL * 0.00222223333333);
		if (CharacterClass == 8) AGLSpeed = 1.0 + (PlayerAGL * 0.00188888888889); 
		if (CharacterClass == 9) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 

		double HWShieldSpeed = 1.00;
		If (weapon is "EvilWarriorShield") 
		{
			if (Owner.CountInv("HWShieldBlockHold") > 0) HWShieldSpeed = 0.81; else HWShieldSpeed = 0.9;
		}

		double MinigunFiringSpeed = 1.00;
		If (weapon is "Minigun")
		{
			if (Owner.CountInv("MinigunSlowdownWhenFiring") > 0) 
			{
				MinigunFiringSpeed = 0.2 + (CallACS("MiscVarCheckDECORATE",10019) * 0.05) + (CallACS("MiscVarCheckDECORATE",10020) * 0.125);
				
			}
		}

		double FistBlockSpeed = 1.00;
		if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockSpeed = 0.75;
		if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockSpeed = 0.825;
		if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockSpeed = 0.90;

		double LongbowSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",398) == 1)
		{
			LongbowSpeed = CallACS("MiscVarCheckDECORATE",8) * 0.01;
			if (LongbowSpeed > 1.0) LongbowSpeed = 1.00;
		}
		double SceptreShieldSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreShieldSpeed = 0.25;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreShieldSpeed = 0.5;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreShieldSpeed = 0.875;

		double BuffSpeed = 1.00;
		if (CallACS("GetBuffTimer",12) > 0) BuffSpeed *= 1.3334; 
		if (CallACS("GetBuffTimer",15) > 0) BuffSpeed *= 0.6667; 

		double TensionSpeed = 1.00;
		int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int CanUseTension = dvds_allowtension;
		if (CanUseTension > 0)
		{
			if (TensionLevel == 1) TensionSpeed = 1.035;
			if (TensionLevel == 2) TensionSpeed = 1.15;
			if (TensionLevel == 3) TensionSpeed = 1.25;
			if (TensionLevel == 4) TensionSpeed = 1.375;
			if (TensionLevel == 5) TensionSpeed = 1.5625;
			if (TensionLevel == 6) TensionSpeed = 1.875;
			if (TensionLevel == 7) TensionSpeed = 2.25;
		}

		double FocusSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",212) > 0) FocusSpeed = 0.25;

		double DivineAvatarSpeed = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarSpeed = 1.5;

		Speed = 1.00
					* CVarAdjustSpeed
					* StaminaSpeed 
					* DodgeMoreSpeed
					* JumpMoreSpeed
					* OnTheMoveSpeed
					* FocusSpeed
					* LVLSpeed
					* AGLSpeed
					* ArmorSpeed
					* OneRingSpeed
					* HWShieldSpeed
					* MinigunFiringSpeed
					* FistBlockSpeed
					* LongbowSpeed
					* SceptreShieldSpeed
					* BuffSpeed
					* TensionSpeed
					* DivineAvatarSpeed;
		if (dvdsdebug_showmoveinformation > 0) Console.Printf("    (\czSpeed Input\c-: \cyTotalSpeed\c- = \cy%8f\c-, CVarAdjustSpeed = %8f, StaminaSpeed [%d] = %8f, DodgeMoreSpeed = %8f, JumpMoreSpeed = %8f, OnTheMoveSpeed = %8f, FocusSpeed = %8f, LVLSpeed = %8f, AGLSpeed = %8f, ArmorSpeed = %8f, OneRingSpeed = %8f, HWShieldSpeed = %8f, MinigunFiringSpeed = %8f, FistBlockSpeed = %8f, LongbowSpeed = %8f, SceptreShieldSpeed = %8f, BuffSpeed = %8f, TensionSpeed = %8f, DivineAvatarSpeed = %8f)", Speed, CVarAdjustSpeed, StamRatio, StaminaSpeed, DodgeMoreSpeed, JumpMoreSpeed, OnTheMoveSpeed, FocusSpeed, LVLSpeed, AGLSpeed, ArmorSpeed, OneRingSpeed, HWShieldSpeed, MinigunFiringSpeed, FistBlockSpeed, LongbowSpeed, SceptreShieldSpeed, BuffSpeed, TensionSpeed, DivineAvatarSpeed);
		return Speed; 
	}

}

// Resistance code [w/ some help from argv :V]
class Resistances : Inventory 
{
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage) 
	{
		let playeractor = AetheriusPlayerPawn(owner);
		double BaseIgnoreFactor, ArmorIgnoreFactor, ArmorIgnoreFactor2, ArmorIgnoreFactor3;
		double resist = 0;
		double resistN = 0;
		int ArmorItemsAmt = 0;
		if (Owner.CountInv("SafeTeaShoes") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("PearlyCorset") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("CloakofEvasion") > 0)				ArmorItemsAmt++;
		if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("KissaBra") > 0)							ArmorItemsAmt++;
		if (Owner.CountInv("DivineShield") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("BalrogRing") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("DoveRibbon") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorItemsAmt++;

		// Calculates any non-normal damage type in a separate factor
		for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
		{
			if (inv is "ResistanceGrantingItem") resist += ResistanceGrantingItem(inv).GetResistForDamageType(damageType);
		}
		if (playeractor.PlayerArmorIgnoreFactor > 0.00)
		{
			ArmorIgnoreFactor = resist * playeractor.PlayerArmorIgnoreFactor;
			resist -= ArmorIgnoreFactor;
		}
		newdamage = damage * (1.0 - resist);

		// "Normal" Damage Type is counted separately from other resistances
		int newdmg1 = newdamage;
		if (damageType != 'Drowning')
		{
			for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
			{
				if (inv is "ResistanceGrantingItem") resistN += ResistanceGrantingItem(inv).ResistNormal;
			}
		}
		if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
		{
			ArmorIgnoreFactor2 = resistN * playeractor.PlayerArmorIgnoreFactorGeneral;
			resistN -= ArmorIgnoreFactor2;
		}
		newdamage = newdmg1 * (1.0 - resistN);
		int tempdamage = newdamage;

		// The "Omniblock" Bonus from the Divine Shield is Armor based defense, so it gets placed here now 
		// instead of PlayerStatItem [which also prevents standard def-ignoring attacks from bypassing it]
		int shieldblockdmg1 = newdamage;
		int ShieldBonusOn = 0;
		double DivineShieldBlockChance = 0.0;
		double DivShldBonus = 0.0;
		if (Owner.CountInv("DivineShield") > 0)
		{
			DivineShieldBlockChance += 7.8; // 13.0
			DivShldBonus += 0.042; // 0.07
			if (Owner.CountInv("SafeTeaShoes") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("PearlyCorset") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("WaterFlyingDress") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("EvenstarNecklace") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("CloakofEvasion") > 0)				{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("AnubisCufflinks") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("KissaBra") > 0)							{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("BalrogRing") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("DoveRibbon") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("FalconKnifeEarrings") > 0)	{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
			{
				ArmorIgnoreFactor3 = DivShldBonus * playeractor.PlayerArmorIgnoreFactorGeneral;
				DivShldBonus -= ArmorIgnoreFactor3;
			}

			if (frandom(0.001,100.000) <= DivineShieldBlockChance) 
			{ 
				ShieldBonusOn = 1;
				newdamage = shieldblockdmg1 * (1.0 - DivShldBonus);
				A_Playsound("SceptreEmpyrea/Reflect");
				A_Playsound("SceptreEmpyrea/Reflect");
			}
		}
		int tempdamage2 = newdamage;

		if (dvdsdebug_playerdmgdisplays > 0)
		{
			if (ArmorItemsAmt > 0) Console.Printf("    (\cz[STEP 9] Flora Armor input\c-: \cwDmgType\c- = \cw%s\c-, \cydmg\c- = \cy%d\c-, \cares\c- = \ca%.4f\c-, \cynewdmg1\c- = \cy%d\c-, \caresN\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cxArmorIgnoreFactor\c- = \cx%8f\c-, \cwArmorIgnoreFactor2\c- = \cw%8f\c-)", damageType, damage, resist, newdmg1, resistN, tempdamage, ArmorIgnoreFactor, ArmorIgnoreFactor2);
												else Console.Printf("    (\cz[STEP 9] Flora Armor input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", newdmg1);

			if (ShieldBonusOn > 0) Console.Printf("    (\cz[STEP 10] Flora Omniblock Input\c-: \cwDmgType\c- = \cw%s\c-, \cyshieldblockdmg1\c- = \cy%d\c-, \caDivShldBonus\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cwArmorIgnoreFactor3\c- = \cw%8f\c-)", damageType, shieldblockdmg1, DivShldBonus, tempdamage2, ArmorIgnoreFactor3);
												else Console.Printf("    (\cz[STEP 10] Flora Omniblock Input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", shieldblockdmg1);
		}
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ResistanceGrantingItem : CustomInventory 
{
	double ResistNormal, ResistPhysical, ResistMelee, ResistBullet, ResistMagic;
	double ResistFire, ResistIce, ResistThunder, ResistHoly, ResistDark, ResistWind, ResistEarth;
	double ResistSlime, ResistMagma, ResistCrush, ResistDrowning, ResistFalling, ResistExplosive;
	double ResistSceptre, ResistFist, ResistKick, ResistGauntlets, ResistChainsaw;
	double ResistAcid, ResistPoison;

	property ResistNormal: ResistNormal;
	property ResistPhysical: ResistPhysical;
	property ResistMelee: ResistMelee;
	property ResistBullet: ResistBullet;
	property ResistMagic: ResistMagic;

	property ResistFire: ResistFire;
	property ResistIce: ResistIce;
	property ResistThunder: ResistThunder;
	property ResistHoly: ResistHoly;
	property ResistDark: ResistDark;
	property ResistWind: ResistWind;
	property ResistEarth: ResistEarth;

	property ResistSlime: ResistSlime;
	property ResistMagma: ResistMagma;
	property ResistCrush: ResistCrush;
	property ResistDrowning: ResistDrowning;
	property ResistFalling: ResistFalling;
	property ResistExplosive: ResistExplosive;

	property ResistSceptre: ResistSceptre;
	property ResistFist: ResistFist;
	property ResistKick: ResistKick;
	property ResistGauntlets: ResistGauntlets;
	property ResistChainsaw: ResistChainsaw;

	property ResistAcid: ResistAcid;
	property ResistPoison: ResistPoison;
    
	double GetResistForDamageType(Name damageType) 
	{
		if (damageType == 'Physical')
				return ResistPhysical;
		else if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' || damageType == 'Gauntlets')
				return ResistMelee;
		else if (damageType == 'Bullet' || damageType == 'Railgun')
				return ResistBullet;
		else if (damageType == 'Magic')
				return ResistMagic;
		else if (damageType == 'Fire' || damageType == 'Lava')
				return ResistFire;
		else if (damageType == 'Ice')
				return ResistIce;
		else if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Shock')
				return ResistThunder;
		else if (damageType == 'Holy')
				return ResistHoly;
		else if (damageType == 'Dark')
				return ResistDark;
		else if (damageType == 'Wind')
				return ResistWind;
		else if (damageType == 'Earth')
				return ResistEarth;
		else if (damageType == 'Slime')
				return ResistSlime;
		else if (damageType == 'Magma')
				return ResistMagma;
		else if (damageType == 'Crush')
				return ResistCrush;
		else if (damageType == 'Drowning')
				return ResistDrowning;
		else if (damageType == 'Falling')
				return ResistFalling;
		else if (damageType == 'Explosive' || damagetype == 'MOD_ROCKET' || damagetype == 'MOD_R_SPLASH' || damagetype == 'MOD_BARREL')
				return ResistExplosive;
		else if (damageType == 'Sceptre')
				return ResistSceptre;
		else if (damageType == 'Fist;')
				return ResistFist;
		else if (damageType == 'Kick')
				return ResistKick;
		else if (damageType == 'Gauntlets')
				return ResistGauntlets;
		else if (damageType == 'Chainsaw')
				return ResistChainsaw;
		else if (damageType == 'Acid')
				return ResistAcid;
		else if (damageType == 'Poison' || damageType == 'PoisonElemental')
				return ResistPoison;
		else
				return 0;
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItemZSC : ResistanceGrantingItem
{
	int loopernum, armorhumtimer;
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1 RenderStyle Add
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}
	property loopernum: loopernum;

	override void PostBeginPlay()
	{
		if (CountInv("PlayingDoom64",AAPTR_PLAYER1)) { scale.x * 1.2; scale.y * 1.2; }
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick() 
	{
		int gfxeffectlvl = dvds_gfxeffectlevel;
		if (Owner == null)
		{
			ACS_NamedExecuteAlways("CheckFloraArmorCopies",0,loopernum,0,0);
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			armorhumtimer++;
			if (armorhumtimer >= 42)
			{
				A_Stopsound(CHAN_ITEM);
				A_Playsound("FloraArmor/Hum",CHAN_ITEM);
				armorhumtimer = 0;
			}
		}
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_PlaySound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

// Item 1
class SafeTeaShoes : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRA0"
		inventory.icon "FAMRA0";
		Inventory.PickupMessage "Got the \chSafe Tea Shoes\c-!!";
		ResistanceGrantingItem.ResistSlime 0.275;
		ResistanceGrantingItem.ResistMagma 0.275;
		ResistanceGrantingItem.ResistNormal 0.03;
		ResistanceGrantingItem.ResistMagic 0.0125;
		ResistanceGrantingItem.ResistFalling 0.75;
		BaseFloraArmorItemZSC.loopernum 1;
	}

	override void DoEffect() 
	{
		ResistSlime = 0.25 + (0.005 * random[safeteashoes](0,10));
		//if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\czFloraArmorAbsorb\c-: ResistSlime = %8f)", ResistSlime);
		Super.DoEffect(); 
	}

	States
	{
		Spawn:
			FAMR A 1 bright NoDelay;
			loop;
	}
}

// Item 2
class PearlyCorset : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRB0"
		inventory.icon "FAMRB0";
		Inventory.PickupMessage "Got the \chPearly Corset\c-!!";
		ResistanceGrantingItem.ResistNormal 0.07;
		ResistanceGrantingItem.ResistFire 0.02;
		ResistanceGrantingItem.ResistMagma 0.02;
		ResistanceGrantingItem.ResistIce 0.02;
		ResistanceGrantingItem.ResistThunder 0.02;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.025;
		ResistanceGrantingItem.ResistBullet 0.25;
		BaseFloraArmorItemZSC.loopernum 2;
	}

	States
	{
		Spawn:
			FAMR B 1 bright NoDelay;
			loop;
	}
}

// Item 3
class WaterFlyingDress : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRC0"
		inventory.icon "FAMRC0";
		Inventory.PickupMessage "Got the \chWater Flying Dress\c-!!";
		ResistanceGrantingItem.ResistNormal 0.08;
		ResistanceGrantingItem.ResistFire 0.3;
		ResistanceGrantingItem.ResistMagma 0.3;
		ResistanceGrantingItem.ResistMagic 0.25;
		ResistanceGrantingItem.ResistBullet 0.15;
		ResistanceGrantingItem.ResistExplosive 0.20;
		BaseFloraArmorItemZSC.loopernum 3;
	}

	States
	{
		Spawn:
			FAMR C 1 bright NoDelay;
			loop;
	}
}

// Item 4
class EvenstarNecklace : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRD0"
		inventory.icon "FAMRD0";
		Inventory.PickupMessage "Got the \chEvenstar Necklace\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.2;
		ResistanceGrantingItem.ResistMagma 0.2;
		ResistanceGrantingItem.ResistIce 0.2;
		ResistanceGrantingItem.ResistThunder 0.2;
		ResistanceGrantingItem.ResistDark 0.2;
		ResistanceGrantingItem.ResistMagic 0.2;
		BaseFloraArmorItemZSC.loopernum 4;
	}

	States
	{
		Spawn:
			FAMR D 1 bright NoDelay;
			loop;
	}
}

// Item 5
class CloakOfEvasion : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRE0"
		inventory.icon "FAMRE0";
		Inventory.PickupMessage "Got the \chCloak of Evasion\c-!!";
		ResistanceGrantingItem.ResistNormal 0.04;
		ResistanceGrantingItem.ResistIce 0.05;
		ResistanceGrantingItem.ResistThunder 0.025;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 5;
	}

	States
	{
		Spawn:
			FAMR E 1 bright NoDelay;
			loop;
	}
}

// Item 6
class AnubisCufflinks : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRF0"
		inventory.icon "FAMRF0";
		Inventory.PickupMessage "Got the \chAnubis Cufflinks\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		ResistanceGrantingItem.ResistThunder 0.0625;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 6;
	}

	States
	{
		Spawn:
			FAMR F 1 bright NoDelay;
			loop;
	}
}

// Item 7
class KissaBra : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRG0"
		inventory.icon "FAMRG0";
		Inventory.PickupMessage "Got \chKissa's Armored Brasseire\c-!!";
		ResistanceGrantingItem.ResistNormal 0.06;
		ResistanceGrantingItem.ResistBullet 0.2;
		BaseFloraArmorItemZSC.loopernum 7;
	}

	States
	{
	Spawn:
		FAMR G 1 bright NoDelay;
		loop;
	}
}

// Item 8
class DivineShield : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRH0"
		inventory.icon "FAMRH0";
		Inventory.PickupMessage "Got the \chDivine Shield\c-!!";
		ResistanceGrantingItem.ResistNormal 0.16;
		ResistanceGrantingItem.ResistFire 0.25;
		ResistanceGrantingItem.ResistMagma 0.25;
		ResistanceGrantingItem.ResistIce 0.25;
		ResistanceGrantingItem.ResistThunder 0.25;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.3;
		BaseFloraArmorItemZSC.loopernum 9;
	}

	States
	{
		Spawn:
			FAMR H 1 bright NoDelay;
			loop;
	}
}

// Item 9
class BalrogRing : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRI0"
		inventory.icon "FAMRI0";
		Inventory.PickupMessage "Got the \chBalrog's Ring\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.15;
		ResistanceGrantingItem.ResistMagma 0.15;
		ResistanceGrantingItem.ResistIce 0.225;
		ResistanceGrantingItem.ResistExplosive 0.25;
		BaseFloraArmorItemZSC.loopernum 10;
	}

	States
	{
		Spawn:
			FAMR I 1 bright NoDelay;
			loop;
	}
}

// Item 10
class DoveRibbon : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRJ0"
		inventory.icon "FAMRJ0";
		Inventory.PickupMessage "Got the \chDove's Ribbon\c-!!";
		ResistanceGrantingItem.ResistNormal 0.09;
		ResistanceGrantingItem.ResistFire 0.0125;
		ResistanceGrantingItem.ResistMagma 0.0125;
		ResistanceGrantingItem.ResistIce 0.0625;
		ResistanceGrantingItem.ResistThunder 0.15;
		ResistanceGrantingItem.ResistDark 0.125;
		ResistanceGrantingItem.ResistMagic 0.0625;
		ResistanceGrantingItem.ResistBullet 0.05;
		BaseFloraArmorItemZSC.loopernum 11;
	}

	States
	{
		Spawn:
			FAMR J 1 bright NoDelay;
			loop;
	}
}

// Item 11
class FalconKnifeEarrings : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRK0"
		inventory.icon "FAMRK0";
		Inventory.PickupMessage "Got the \chFalcon Knife Earrings\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		BaseFloraArmorItemZSC.loopernum 12;
	}

	States
	{
		Spawn:
			FAMR K 1 bright NoDelay;
			loop;
	}
}