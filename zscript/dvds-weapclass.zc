class AetheriusBaseWeaponZSC : Weapon 
{
	// Misc 
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	//******************************************************************************************************************
	//******************************************************************************************************************
	//******************************************************************************************************************
	//***IMPORTANT NOTE TO SELF: DO NOT USE GLOBAL VARS/STRINGS/CLASS DEFINITIONS IN WEAPONS, ELSE IT CAN FLAP AROUND***
	//***WITH THE PLAYER'S PROPERTIES [LEADING TO FUN STUFF LIKE NOT BEING ABLE TO USE WALLS, WEAPONS STOP BOBBING,  ***
	//***OR GETTING ATTACHED TO THE DAMN CEILING]. CONSTS SEEM FINE THOUGH TO USE...                                 ***
	//***DON'T BE A DINGUS ABOUT THIS AGAIN MISFIT >:U                                                               ***
	//******************************************************************************************************************
	//******************************************************************************************************************
	//******************************************************************************************************************
	
	action void A_DVDSLower (double movespeed = 6.0)
	{
		double basespeed = movespeed;

		if (CallACS("GetBuffTimer",12) > 0) movespeed *= 1.5; // Acceleratle
		if (CallACS("GetBuffTimer",15) > 0) movespeed *= 0.667; // Deceleratle
		
		if (CallACS("MiscVarCheckDECORATE",10055) == 1) movespeed *= 1.04;
		if (CallACS("MiscVarCheckDECORATE",10055) == 2) movespeed *= 1.09;
		if (CallACS("MiscVarCheckDECORATE",10055) == 3) movespeed *= 1.15;
		if (CallACS("MiscVarCheckDECORATE",10055) == 4) movespeed *= 1.22;
		if (CallACS("MiscVarCheckDECORATE",10055) >= 5) movespeed *= 1.30;
		if (CallACS("MiscVarCheckDECORATE",10056) == 1) movespeed *= 1.10;
		if (CallACS("MiscVarCheckDECORATE",10056) >= 2) movespeed *= 1.225;

		movespeed = (movespeed * dvds_raiselowermultiplier) / 100;

		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		movespeed += ((movespeed * CallACS("MiscVarCheckDECORATE",31)) / 512);

		if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSLower\c- - movespeed: %8f (%8f) \cx(%s)\c- \cw[Multi: %d%]\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier);

		if (basespeed >= 1.0 && movespeed <= 0.999) movespeed = 1.0;
		A_Lower(movespeed);
	}
	
	action void A_DVDSRaise (double movespeed = 6.0)
	{
		double basespeed = movespeed;

		if (CallACS("GetBuffTimer",12) > 0) movespeed *= 1.5; // Acceleratle
		if (CallACS("GetBuffTimer",15) > 0) movespeed *= 0.667; // Deceleratle
		
		if (CallACS("MiscVarCheckDECORATE",10055) == 1) movespeed *= 1.04;
		if (CallACS("MiscVarCheckDECORATE",10055) == 2) movespeed *= 1.09;
		if (CallACS("MiscVarCheckDECORATE",10055) == 3) movespeed *= 1.15;
		if (CallACS("MiscVarCheckDECORATE",10055) == 4) movespeed *= 1.22;
		if (CallACS("MiscVarCheckDECORATE",10055) >= 5) movespeed *= 1.30;
		if (CallACS("MiscVarCheckDECORATE",10056) == 1) movespeed *= 1.10;
		if (CallACS("MiscVarCheckDECORATE",10056) >= 2) movespeed *= 1.225;
		
		movespeed = (movespeed * dvds_raiselowermultiplier) / 100;

		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		movespeed += ((movespeed * CallACS("MiscVarCheckDECORATE",31)) / 512);

		if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSRaise\c- - movespeed: %8f (%8f) \cx(%s)\c- \cw[Multi: %d%]\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier);

		if (basespeed >= 1.0 && movespeed <= 0.999) movespeed = 1.0;
		A_Raise(movespeed);
	}
	
	// Sceptre EXP Increase [Weapon
	void A_AddSceptreEXP_W (int SExPts = 1, int DivAmount = 1, int type = 0)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int ExpPiecesToAdd;
		double EXPBonus1;
		int DeftnessExpBase = dvds_deftnessexpbase;
		int SceptreExpMultiplier = dvds_sceptreexpmultiplier;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		double sceptbasemulti = 1.00;
		int higherlearning = CallACS("MiscVarCheckDECORATE",11001);
		
		if (ModType == 0 && dvds_noscexpgains != 0) return;
		
		if (DivAmount <= 1) DivAmount = 1;
		
		if (CharacterClass == 2)
		{
			sceptbasemulti = frandompick(0.67,0.67,0.67,0.67,1.00,1.00,1.34);
			ExpPiecesToAdd += (16 + (SceptreActualLevel * sceptbasemulti));
			if (clearofmind >= 1) ExpPiecesToAdd += 4;
			if (clearofmind >= 2) ExpPiecesToAdd += 5;
			if (clearofmind >= 3) ExpPiecesToAdd += 6;
			if (clearofmind >= 4) ExpPiecesToAdd += 7;
			if (clearofmind >= 5) ExpPiecesToAdd += 8;
			if (clearofmindex >= 1) ExpPiecesToAdd += 15;
			if (clearofmindex >= 2) ExpPiecesToAdd += 15;
			if (higherlearning == 1) ExpPiecesToAdd += 15; // [115%]
			if (higherlearning >= 2) ExpPiecesToAdd += 30; // [130%]
			if (ExpPiecesToAdd < 1) ExpPiecesToAdd = 1;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 1 - Base [%3f]): %d / 16", sceptbasemulti, ExpPiecesToAdd);
			
			int Randomizer = random(1,256);
			if (Randomizer == 1) ExpPiecesToAdd *= 8;
			if (Randomizer == 2) ExpPiecesToAdd *= 4;
			if (Randomizer == 3) ExpPiecesToAdd *= 4;
			if (Randomizer == 4) ExpPiecesToAdd *= 2;
			if (Randomizer == 5) ExpPiecesToAdd *= 2;
			if (Randomizer == 6) ExpPiecesToAdd *= 2;
			if (Randomizer == 7) ExpPiecesToAdd *= 2;
		
			// Higher Levels = slightly less chances to get all EXP
			if (SceptreActualLevel > 15 && Randomizer == 241) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 14 && Randomizer == 242) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 13 && Randomizer == 243) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 12 && Randomizer == 244) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 11 && Randomizer == 245) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 10 && Randomizer == 246) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 9 && Randomizer == 247) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 8 && Randomizer == 248) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 7 && Randomizer == 249) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 6 && Randomizer == 250) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 5 && Randomizer == 251) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 4 && Randomizer == 252) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 3 && Randomizer == 253) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 2 && Randomizer == 254) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 1 && Randomizer == 255) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 0 && Randomizer == 256) ExpPiecesToAdd /= 2;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 2 - Randomizer Check [%d]): %d / 16", Randomizer, ExpPiecesToAdd);

			EXPBonus1 = 1.000;
			// Safe Tea Shoes [+2.5/5% EXP Bonus]
			if (CountInv("SafeTeaShoes", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			// Pearly Corset [+20/30% EXP Bonus]
			if (CountInv("PearlyCorset", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.300; // 5% Chance of +30% EXP Bonus
				else EXPBonus1 += 0.200; // Else +20% EXP Bonus
			}
			// Dove's [+2.5/5% EXP Bonus]
			if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			ExpPiecesToAdd *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 3 - Armor Check [%8f]): %d / 16", EXPBonus1, ExpPiecesToAdd);
			
			
			EXPBonus1 = 1.000;
			// Divine Avatar {+25% EXP Bonus]
			if (CallACS("GetBuffTimer",7) > 0)
			{
				if (random(1,100) <= 20) EXPBonus1 += 0.500; // 20% Chance of +50% EXP Bonus
				else EXPBonus1 += 0.250; // 20% Else +25% EXP Bonus
			}
			ExpPiecesToAdd *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 4 - Buff Check [%8f]): %d / 16", EXPBonus1, ExpPiecesToAdd);
			ExpPiecesToAdd = ExpPiecesToAdd * (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)) / DeftnessExpBase;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 5 - Deftness Check): %d / 16 [DeftExpBase: %d / %d]", ExpPiecesToAdd, (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)), DeftnessExpBase);
			ExpPiecesToAdd = ExpPiecesToAdd * SceptreExpMultiplier / 100;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 6 - Option Checker [%d%]): %d / 16", SceptreExpMultiplier, ExpPiecesToAdd);
			
			// "Cleared of Mind" Perk
			double perkfactor = 1.00;
			if (clearofmind > 0)
			{
				if (clearofmind >= 1) perkfactor += 0.04;
				if (clearofmind >= 2) perkfactor += 0.05;
				if (clearofmind >= 3) perkfactor += 0.06;
				if (clearofmind >= 4) perkfactor += 0.07;
				if (clearofmind >= 5) perkfactor += 0.08;
				if (clearofmindex >= 1) perkfactor += 0.15;
				if (clearofmindex >= 2) perkfactor += 0.15;
				ExpPiecesToAdd *= perkfactor;
			}
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 7 - Cleared of Mind [%3f]): %d / 16", perkfactor, ExpPiecesToAdd);

			// "Higher Learning" Grand Mastery Perk
			if (higherlearning == 1) ExpPiecesToAdd *= 1.15; // [115%]
			if (higherlearning >= 2) ExpPiecesToAdd *= 1.30; // [130%]
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 8 - Higher Learning): %d / 16", ExpPiecesToAdd);
		
			if (ModType == 0) ExpPiecesToAdd *= 1.334; // Classic Doom 1/2 / Heretic / Hexen / Strife
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 9 - ModType Checker): %d / 16", ExpPiecesToAdd);

			ExpPiecesToAdd = ExpPiecesToAdd * 1.25;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 10 - ?): %d / 16", ExpPiecesToAdd);
			CallACS("MiscVarSetDECORATE",203,ExpPiecesToAdd,1); 
			
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (pre-while): %d / 16", ExpPiecesToAdd);
			while (CallACS("MiscVarCheckDECORATE",203) > 15) // if (MiscellaneousVars[203] > 15)
			{
				CallACS("MiscVarSetDECORATE",203,-16,1); 
				CallACS("OtherVarSetDECORATE",10,1,1);
				if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (while): %d / 16", ExpPiecesToAdd);
			}
		}
	}

	int A_GetPlayerAttackDamage(int type = 0, int puff = 0)
	{
		int debugplayeratkinfo = dvdsdebug_showplayeratkinformation;
		int flagchecktype = 0;
		int baserand1, baserand2;
		int damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6, finaldmg;
		int rand1, rand2;
		double perkfactor = 1.00;
		double chargefactor = 1.00;
		int playershot = 0;
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
		int PlayerDEF = CallACS("MiscVarCheckDECORATE",32);
		int PlayerDFT = CallACS("MiscVarCheckDECORATE",33);
		int PlayerSOR = CallACS("MiscVarCheckDECORATE",34);
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int PlayerTHE = CallACS("MiscVarCheckDECORATE",36);
		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ismagicalatk;
		int isfirearmatk;
		int ishybridatk;

		perkfactor = 1.00;
		// Bullet
		if (type == 1 ||
				type == 2 ||
				type == 5 ||
				type == 6 ||
				type == 60)
				perkfactor += ((BulletAccuracyPerkLevel * 0.02) + (BulletAccuracyEXPerkLevel * 0.10));
		// Pellet
		if (type == 3 || 
				type == 4 ||
				type == 60)
				perkfactor += ((PelletAccuracyPerkLevel * 0.02) + (PelletAccuracyEXPerkLevel * 0.10));
		// Plasma
		if (type == 7 || 
				type == 10 || 
				type == 11 || 
				type == 12 || 
				type == 13 ||
				type == 48 ||
				type == 49 ||
				(type >= 53 && type <= 56) ||
				type == 58)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.02) + (PlasmaAccuracyEXPerkLevel * 0.10));
		// Demolition
		if (type == 8 || 
				type == 9)
				perkfactor += ((DemolitionsExpertPerkLevel * frandom(0.07,0.14)) + (DemolitionsExpertEXPerkLevel * frandom(0.07,0.14)));
		// Karasawa
		if (type == 16 || 
				type == 17)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.02) + (PlasmaAccuracyEXPerkLevel * 0.10));
				perkfactor += ((KarasawaAttunementPerkLevel * 0.5) + (KarasawaAttunementEXPerkLevel * 0.75));
		// BFG
		if (type == 12 || 
				type == 13 || 
				type == 14 || 
				type == 15)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.02) + (PlasmaAccuracyEXPerkLevel * 0.10));
				perkfactor += ((BFGAttunementPerkLevel * 0.025) + (BFGAttunementEXPerkLevel * 0.125));
		// Diaris Arrows
		if (type >= 18 && type <= 20)
				perkfactor += ((ArcheryMasteryPerkLevel * frandom(0.09,0.15)) + (BFGAttunementEXPerkLevel * frandom(0.36,0.60)));
		// Ethereal Crossbow
		if (type == 21 || 
				type == 22 || 
				type == 23)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.06) + (BFGAttunementEXPerkLevel * 0.24));
		// Strife Crossbow
		if (type == 25 || 
				type == 26)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.06) + (BFGAttunementEXPerkLevel * 0.24));
		// Heretic Magic Weapons
		if (type == 24 || 
				(type >= 27 && type <= 43))
				perkfactor += ((WandMasteryPerkLevel * 0.10) + (WandMasteryEXPerkLevel * 0.40));
		// Sapphire Wand(s) [Flora] & Serpent Staff(ves) [Ailish]
		if (type == 44 || 
				type == 45 ||
				type == 57)
				perkfactor += ((WandMasteryPerkLevel * 0.125) + (WandMasteryEXPerkLevel * 0.50));
		// Hubble Bubbles
		if (type == 46 || 
				type == 47)
				perkfactor += ((WandMasteryPerkLevel * 0.15) + (WandMasteryEXPerkLevel * 0.60));
		// Unmaker Lasers
		if (type == 50 || type == 51)
		{
				perkfactor += ((MagiUpPerkLevel * 0.075) + (MagiUpEXPerkLevel * 0.1875));
				perkfactor += ((SoulMasteryPerkLevel * 0.025) + (SoulMasteryEXPerkLevel * 0.125));
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.25));
		}
		// Hell Warrior Shield Fireballs
		if (type == 52)
		{
				perkfactor += ((MagiUpPerkLevel * 0.075) + (MagiUpEXPerkLevel * 0.1875)); // MagiUp
				perkfactor += ((SoulMasteryPerkLevel * 0.05) + (SoulMasteryEXPerkLevel * 0.125)); // Soul Mastery
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125)); // Wand/Staff Mastery
		}
		
		
		// Main Definitions
		if (type == 1) // Pistol [Single]
		{
			damage = random(1,4) * random(5,7); // 5 to 28
			extradmg1 = PlayerAGL * 1.50; // 150% of Agility
			extradmg2 = PlayerSTR * 0.35; // 35% of Strength
		}
		if (type == 2) // Pistol [Dual]
		{
			damage = random(2,4) * random(6,7); // 12 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength
		}
		if (type == 3) // Shotgun
		{
			damage = random(2,3) * 5; // 10 to 15
			extradmg1 = PlayerAGL * 2.00; // 200% of Agility
			extradmg2 = PlayerSTR * 0.175; // 17.5% of Strength
		}
		if (type == 4) // Super Shotgun
		{
			damage = random(2,3) * random(5,6); // 10 to 18
			extradmg1 = PlayerAGL * 2.50; // 175% of Agility
			extradmg2 = PlayerSTR * 0.25; // 25% of Strength
		}
		if (type == 5) // Chaingun
		{
			damage = random(2,4) * random(5,7); // 10 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength 
		}
		if (type == 6) // Minigun
		{
			damage = random(3,4) * random(6,7); // 18 to 28
			extradmg1 = PlayerAGL * 2.00; // 175% of Agility
			extradmg2 = PlayerSTR * 0.50; // 40% of Strength 
		}
		if (type == 7) // Repeater
		{
			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 0.50);
			baserand2 = 3 + PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 1.50);
			
			damage = random(baserand1,baserand2) * 6; // 6 to 18
			extradmg1 = PlayerAGL * 3.00; // 300% of Agility
			extradmg2 = PlayerSTR * 0.75; // 75% of Strength 
		}
		if (type == 8) // Rocket/Grenade [main hit]
		{
			baserand1 = 1 + DemolitionsExpertPerkLevel;
			baserand2 = 8 + (DemolitionsExpertPerkLevel * 0.50) + (DemolitionsExpertEXPerkLevel * 1.25);
			
			damage = random(baserand1,baserand2) * 20; // 20 to 160
			extradmg1 = PlayerAGL * 2.50; // 250% of Agility
			extradmg2 = PlayerSTR * 1.125; // 112.5% of Strength 
		}
		if (type == 9) // Rocket/Grenade [explosion]
		{
			damage = 128 + (DemolitionsExpertPerkLevel * 12) + (DemolitionsExpertEXPerkLevel * 30);
			extradmg1 = PlayerAGL * 2.50; // 250% of Agility
			extradmg2 = PlayerSTR * 1.125; // 112.5% of Strength 
		}
		if (type == 10) // Repeater [explosion]
		{
			damage = 7 + (PlasmaAccuracyPerkLevel * 4) + (PlasmaAccuracyEXPerkLevel * 10); // 7
			extradmg1 = PlayerAGL * 0.40; // 40% of Agility
			extradmg2 = PlayerSTR * 0.1428282829; // 14.28~% of Strength 
		}

		if (type == 11) // Plasma
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 5; // 5 to 40
			extradmg1 = PlayerAGL * 0.9334; // 93.34% of Agility
			extradmg2 = PlayerSTR * 0.45; // 45% of Strength 
		}
		if (type == 12) // Plasma1 [BFG2704]
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 4; // 4 to 32
			extradmg1 = PlayerAGL * 1.00; // 100% of Agility
			extradmg2 = PlayerSTR * 0.55; // 55% of Strength 
		}
		if (type == 13) // Plasma2 [BFG2704]
		{
			baserand1 = 1 + PlasmaAccuracyPerkLevel;
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			damage = random(baserand1,baserand2) * 4; // 4 to 32
			extradmg1 = PlayerAGL * 1.10; // 110% of Agility
			extradmg2 = PlayerSTR * 0.50; // 50% of Strength 
		}

		if (type == 14) // BFG [Main]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 2);
			if (BFGAttunementPerkLevel <= 0) baserand1 += 2;
			if (BFGAttunementPerkLevel == 1) baserand1 += 4;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 8;
			baserand2 = PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 1.5);
			if (BFGAttunementPerkLevel <= 0) baserand2 += 16;
			if (BFGAttunementPerkLevel == 1) baserand2 += 17;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 20;
			damage = random(baserand1,baserand2) * 50; // 100 to 800
			extradmg1 = (PlayerAGL * 11); // 1100% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 12); // 1200% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 15); // 1500% of Agility
			extradmg2 = (PlayerSTR * 5.5); // 550% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 6); // 600% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 7.5); // 750% of Strength 
		}
		if (type == 15) // BFG [Tracer]
		{
			baserand1 =( PlasmaAccuracyPerkLevel * 1.5);
			if (BFGAttunementPerkLevel <= 0) baserand1 += 1;
			if (BFGAttunementPerkLevel == 1) baserand1 += 2;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 3;
			baserand2 = (PlasmaAccuracyPerkLevel * 0.75) + (PlasmaAccuracyEXPerkLevel * 1.375);
			if (BFGAttunementPerkLevel <= 0) baserand2 += 8;
			if (BFGAttunementPerkLevel == 1) baserand2 += 9;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 10;
	
			damage = random(baserand1,baserand2) + 15; // 100 to 800
			if (BFGAttunementPerkLevel == 1) damage = random(baserand1,baserand2) + 18; // 20 to 37
			if (BFGAttunementPerkLevel == 2) damage = random(baserand1,baserand2) + 22; // 25 to 32
			extradmg1 = (PlayerAGL * 2.2); // 220% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 2.4); // 240% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 3); // 300% of Agility
			extradmg2 = (PlayerSTR * 1); // 100% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 1.75); // 175% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 2.5); // 250% of Strength 
		}
		if (type == 16 || type == 17) // KSawBolt
		{
			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25);
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 1.0) + (PlasmaAccuracyEXPerkLevel * 2.5);
			damage = random(baserand1,baserand2) * 15; // 15 to 120
			extradmg1 = (PlayerAGL * 4.4); // 440% of Agility
			extradmg2 = (PlayerSTR * 2); // 200% of Strength
		}
		if (type >= 18 && type <= 20) // DiarisHolyArrows
		{
			damage = 384 + random(-48,192); // 336 to 576 damage
			
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 1) damage *= 1.5;
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 2) damage *= 2.25;
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 3) damage *= 3.375;
	
			if (type == 18) // DiarisHolyArrow [native]
			{
				extradmg1 = (PlayerAGL * 5); // 500% of Agility
				extradmg2 = (PlayerSTR * 0.4); // 40% of Strength 
			}
			if (type == 19) // DiarisHolyArrow2XDmg [native]
			{
				damage *= 2;
				extradmg1 = ((PlayerAGL * 6.25) * 2); // 625% of Agility
				extradmg2 = ((PlayerSTR * 0.5) * 2); // 50% of Strength 
			}
			if (type == 20) // DiarisHolyArrow3XDmg [native]
			{
				damage *= 3;
				extradmg1 = ((PlayerAGL * 7.5) * 3); // 750% of Agility
				extradmg2 = ((PlayerSTR * 0.6) * 3); // 60% of Strength 
			}
			
			damage /= 2;
			extradmg1 /= 2;
			extradmg2 /= 2;
		}
		if (type == 21) // CrossbowFX1New [HERETIC]
		{
			damage = 45 + random(-22,22); // 23 to 67 damage
			extradmg1 = (PlayerAGL * 2.50); // 250% of Agility
			extradmg2 = (PlayerSTR * 0.10); // 10% of Strength 
		}
		if (type == 22) // CrossbowFX2New [HERETIC]
		{
			damage = 27 + random(-13,13); // 14 to 40 damage
			extradmg1 = (PlayerAGL * 1.50); // 150% of Agility
			extradmg2 = (PlayerSTR * 0.06); // 6% of Strength 
		}
		if (type == 23) // CrossbowFX3New [HERETIC]
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerAGL * 0.50); // 50% of Agility
			extradmg2 = (PlayerSTR * 0.02); // 2% of Strength 
		}
		if (type == 24) // RipperNew [HERETIC] <MAGIC TYPE>
		{
			damage = 1 * random(1,8);
			extradmg1 = ((PlayerSOR * 0.125) * random(1,8)); // 12.5% of Sorcery
			extradmg2 = ((PlayerTHE * 0.0325) * random(1,8)); // 3.25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 25) // ElectricBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.125); // 12.5% of Strength 
		}
		if (type == 26) // PoisonBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.125); // 12.5% of Strength 
		}
		if (type == 27) // BlasterPuffNew [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32 damage
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.125); // 12.5% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 28) // BlasterFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.125); // 12.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.0325); // 3.125% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 29) // GoldWandPuff1New [HERETIC] <MAGIC TYPE>
		{
			damage = 8 + random(3,6);
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.2); // 20% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 30) // GoldWandPuff2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 1 to 8
			extradmg1 = (PlayerSOR * 0.3334); // 33.34% of Sorcery
			extradmg2 = (PlayerTHE * 0.13334); // 13.33~% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 31) // HornRodFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 14 + random(-7,8); // 7 to 22
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.041667); // 4.1667% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 32) // HornRodFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 0.3334); // 33.3% of Sorcery
			extradmg2 = (PlayerTHE * 0.141414); // 14.1414% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 33) // PhoenixFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 0.667); // 66.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.28571); // 28.571% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 34) // PhoenixFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.0667); // 6.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.028571); // 2.8571% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 35) // MaceFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.067); // 6.7% of Sorcery
			extradmg2 = (PlayerTHE * 0.027778); // 2.7778% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 36) // MaceFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 27 + random(-13,13); // 6 to 48
			extradmg1 = (PlayerSOR * 0.2); // 20% of Sorcery
			extradmg2 = (PlayerTHE * 0.0833); // 8.333% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 37) // MaceFX3New [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32
			extradmg1 = (PlayerSOR * 0.10); // 10% of Sorcery
			extradmg2 = (PlayerTHE * 0.041666); // 4.1666% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 38) // MaceFX4New [HERETIC] <MAGIC TYPE>
		{
			damage = 96 + random(-48,-48); // 18 to 144
			extradmg1 = (PlayerSOR * 0.8333); // 83.333% of Sorcery
			extradmg2 = (PlayerTHE * 0.285714); // 28.5714% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 39) // Sorcerer2FX1Player [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = ((PlayerSOR * 12) / 2); // 600% of Sorcery
			extradmg2 = ((PlayerTHE * 16) / 7); // 228.57% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 40) // Sorcerer2FX3 [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 3); // 300% of Sorcery
			extradmg2 = (PlayerTHE * 1.142856); // 114.2856% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 41) // GoldWandFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerSOR * 0.3334); // 33.3% of Sorcery
			extradmg2 = (PlayerTHE * 0.1334); // 13.34% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 42) // GoldWandFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 2 to 8 damage
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.0667); // 6.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 43) // RainPillarNew [HERETIC] <MAGIC TYPE>
		{
			damage = 23 + random(-11,11); // 12 to 34 damage
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.0667); // 6.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 44 || type == 45) // MageWandMissileNew & MageWandMissile2New <MAGIC TYPE>
		{
			damage = (6 + random(-3,3)) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.625); // 62.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 46) // HubbleBubbleSmall [main] <MAGIC TYPE>
		{
			damage = (10 + random(-3,4));
			extradmg1 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg2 = (PlayerTHE * 0.380952); // 38.0952% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 47) // HubbleBubbleLarge [main] <MAGIC TYPE>
		{
			damage = (30 + random(-9,12));
			extradmg1 = (PlayerSOR * 3.75); // 375% of Sorcery
			extradmg2 = (PlayerTHE * 1.1428); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 48) // A. Christina Blast
		{
			damage = random(176,293); //234); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 49) // A. Christina Long Range Blast (Weak)
		{
			damage = random(54,91); //125); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 50) // Unmaker Laser (Marines & Petra)
		{
			damage = random(1,8) * 10; // 10 to 80
			extradmg1 = (PlayerAGL * 1.0); // 100% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 
		}
		if (type == 51) // Unmaker Laser (Flora & Ailish)
		{
			damage = random(1,8) * 10; // 10 to 80
			extradmg1 = (PlayerAGL * 1.0); // 100% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 
		}
		if (type == 52) // Hell Warrior Shield Fireball <MAGIC TYPE>
		{
			damage = random(1,8) * 2; // 2 to 16
			extradmg1 = (PlayerSOR * 0.8); // 80.0% of Sorcery
			extradmg2 = (PlayerTHE * 0.4); // 40.0% of Therapeusis 
			ismagicalatk = 1;
		}
		if (type == 53) // A. Christina Long Range Blast (Normal)
		{
			damage = random(136,228); //182); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 54) // A. Christina Long Range Blast (Finale)
		{
			damage = random(340,570); //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 55) // A. Christina Bouncing Shot (Weak)
		{
			damage = random(54,90) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 56) // A. Christina Bouncing Shot (Normal)
		{
			damage = random(135,225) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
		}
		if (type == 57) // CStaffMissileNew (Serpent Staff projectile) <MAGIC TYPE>
		{
			damage = (random(1,8) * 5) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.625); // 62.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 58) // Railgun [Player]
		{
			damage = random(9,11) * 5; // 45 to 55
			extradmg1 = (PlayerAGL * 3.75); // 375% of Agility
			extradmg2 = (PlayerSTR * 1.8); // 180% of Strength 
		
			chargefactor = ( ( (CountInv("RailgunCharge", AAPTR_PLAYER1) * 2) + (CountInv("RailgunCharge", AAPTR_PLAYER1) * 0.3334) ) * 0.10);
			damage = damage * chargefactor;
			extradmg1 *= chargefactor;
			extradmg2 *= chargefactor;
			playershot += 1;
		}
		if (type == 59) // Thrown Poison Needle [Player]
		{
			int strengthcounter;
			damage = random(6,12);
			int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
			damage = (damage * (2 + stamdamagefactor) / 2);
			int PlayerSTR = CallACS("StatCheck",7);
			for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
			{
				damage += random(0,2);
				damage += random(0,1);
			}

			if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 10;

			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) Damage = Damage * 4 / 3; // +33.3~% Punch Damage
			if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) > 0) Damage = Damage * 7 / 4; // +75% Punch Damage
			
			int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
			int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
			if (MartialArtsMastery > 0)
			{
				int temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 25;
				if (MartialArtsMastery == 2) temp1 = 75;
				if (MartialArtsMastery == 3) temp1 = 225;
				if (MartialArtsMastery == 4) temp1 = 675;
				if (MartialArtsMastery >= 5) temp1 = 2025;
				int temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 500;
				if (MartialArtsMasteryEX == 2) temp2 = 1000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
			}
			
			int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
			int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
			if (StamUpPerkLevel > 0)
			{
				PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
				damage = damage * PerkFactor / 400;
			}
			
			damage /= random(10,20);
		}
		if (type == 60) // KDIZD Rifle Shell [Player]
		{
			damage = (random(3,5) * 25); //
			extradmg1 = PlayerAGL * 3.25; // 325% of Agility
			extradmg2 = PlayerSTR * 0.758333; // 0.758333% of Strength
		}
		if (type == 61) // Sorcerer2FX1Player (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,-24); // 104 to 152
			extradmg1 = ((PlayerSOR * 12) / 4); // 300% of Sorcery
			extradmg2 = ((PlayerTHE * 16) / 14); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 62) // PhoenixFX1New (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,24); // 104 to 152
			extradmg1 = (PlayerSOR * 1.334); // 133.4% of Sorcery
			extradmg2 = (PlayerTHE * 0.57142); // 57.142% of Therapeusis
			ismagicalatk = 1;
		}
		
		
		if (!(type == 14 || type == 15 || type == 59))
		{
			if (damage > 0) damage *= perkfactor;
			if (extradmg1 > 0) extradmg1 *= perkfactor;
			if (extradmg2 > 0) extradmg2 *= perkfactor;
			if (extradmg3 > 0) extradmg3 *= perkfactor;
			if (extradmg4 > 0) extradmg4 *= perkfactor;
			if (extradmg5 > 0) extradmg5 *= perkfactor;
			if (extradmg6 > 0) extradmg6 *= perkfactor;
		}

		string actorname = GetClassName();
		AetheriusPlayerPawn playpawn;
		if (target) playpawn = AetheriusPlayerPawn(target);
		if (playpawn || puff == 1 || playershot > 0)
		{
			if (debugplayeratkinfo) Console.Printf("Player Shot: %s", actorname);
			
			if (type == 45) // Reduce Sapphire Alt-Fire damage by 33%
			{
				damage *= 0.667;
				extradmg1 *= 0.667;
				extradmg2 *= 0.667;
				extradmg3 *= 0.667;
				extradmg4 *= 0.667;
				extradmg5 *= 0.667;
				extradmg6 *= 0.667;
			}
			
			rand1 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 0.75;
			rand2 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 1.25;
			finaldmg = damage + random(rand1,rand2);
			
			int misc1 = 1000;
			if (ismagicalatk)
			{
				if (CountInv("EvenstarNecklace", AAPTR_PLAYER1) > 0) misc1 += 125;
				if (CountInv("BalrogRing", AAPTR_PLAYER1) > 0) misc1 += 125;
				finaldmg = (finaldmg * misc1) / 1000;
			}
			
			int misc2 = 1000;
			if (type == 52)
			{
				if (CountInv("SauronHelmet", AAPTR_PLAYER1) > 0) misc2 += 125;
				if (CountInv("SauronGauntletsItem", AAPTR_PLAYER1) > 0) misc2 += 125;
				if (CountInv("TheOneRing", AAPTR_PLAYER1) > 0) misc2 += 500;
				finaldmg = (finaldmg * misc2) / 1000;
			}

			// Tries to Guarantee Poison Needles inflict at least 1 base damage
			if (type == 59)
			{
				if (finaldmg < 1) finaldmg = 1;
			}

			if (debugplayeratkinfo) Console.Printf("Actor Class: %s, Type#: %d, Puff?: %d, Base Dmg: %d, Extra Dmg #1: %d, Extra Dmg #2: %d, Extra Dmg #3: %d, Extra Dmg #4: %d, Extra Dmg #5: %d, Extra Dmg #6: %d, Random: %d - %d, BaseRandom: %d - %d, Perkfactor: %8f, ChargeFactor: %8f, Misc1: %d, Misc2: %d, \cyFinal Damage: %d\c-", 
											 												actorname, type, puff,
																							damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6,
																							rand1, rand2,
																							baserand1, baserand2,
																							perkfactor, chargefactor,
																							misc1, misc2,
																							finaldmg);
		}
		else
		{
			if (debugplayeratkinfo) Console.Printf("Non-Player Shot: %s", actorname);
			finaldmg = damage;
			
			if (debugplayeratkinfo) Console.Printf("Actor Class: %s, Type#: %d, Puff?: %d, Base Dmg: %d, \cyFinal Damage: %d\c-", 
																							actorname, type, puff,
																							damage, finaldmg);
		}
		
		if (CallACS("MiscVarCheckDECORATE",166) > 0)
		{
			int preboostdmg = finaldmg;
			finaldmg *= frandom(1.05,1.15);
			if (debugplayeratkinfo) Console.Printf("[Dash] PreBoost: %d, Total: %d", preboostdmg, finaldmg);
		}
		A_SetInventory("FinalDamageDealt",finaldmg,AAPTR_PLAYER1,true);
		return finaldmg;
	}

	int A_GetPunchDamage(int altfire = 0, int shockwave = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;
		String nm, nn, no, np;
		nm = "FistAilish";
		nn = "FistPetra";
		no = "SauronGauntletsAilish";
		np = "SauronGauntletsPetra";

		// Character Check [base damage]
		If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
		{
			if (altfire == 0)
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(6,12);
				if (CharacterClass == 9) damage = random(6,12);
			}
			else
			if (altfire == 1)
			{
				if (CharacterClass == 0) damage = random(126,148);
				if (CharacterClass == 1) damage = random(70,112);
				if (CharacterClass == 2) damage = random(42,84);
				if (CharacterClass == 9) damage = random(42,84);
			}
		}
		else
		{
			If (weapon is "PoisonNeedle")
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(6,12);
				if (CharacterClass == 9) damage = random(6,12);
				damage += random(1,2);
			}
			else
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(6,12);
				if (CharacterClass == 9) damage = random(6,12);
			}
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// Gauntlet Check #1 [base damage]
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			if (CharacterClass == 0) damage += random(14,18);
			if (CharacterClass == 1) damage += random(10,14);
			if (CharacterClass == 2) damage += random(8,12);
			if (CharacterClass == 9) damage += random(8,12);

			if (debugmelee) Console.Printf("GauntDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}
		
		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = (damage * (2 + stamdamagefactor) / 2);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);

		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR = CallACS("StatCheck",7);
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
			{
				if (altfire == 0)
				{
					if (CharacterClass == 0) damage += random(1,3);
					if (CharacterClass == 1) damage += random(1,2);
					if (CharacterClass == 2) damage += random(0,2);
					if (CharacterClass == 9) damage += random(0,2);
				}
				if (altfire == 1)
				{
					if (CharacterClass == 0) damage += random(8,12);
					if (CharacterClass == 1) damage += random(8,11);
					if (CharacterClass == 2) damage += random(6,10);
					if (CharacterClass == 9) damage += random(6,10);
				}
			}
			else
			{
				If (weapon is "PoisonNeedle")
				{
					if (CharacterClass == 0) damage += random(1,3);
					if (CharacterClass == 1) damage += random(1,2);
					if (CharacterClass == 2) damage += random(0,2);
					if (CharacterClass == 9) damage += random(0,2);
					damage += random(0,1);
				}
				else
				{
					if (CharacterClass == 0) damage += random(1,3);
					if (CharacterClass == 1) damage += random(1,2);
					if (CharacterClass == 2) damage += random(0,2);
					if (CharacterClass == 9) damage += random(0,2);
				}
			}
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		
		// Gauntlet Check #2 [strength stat check] [7 pts = roughly double the character's base gauntlet punch damage]
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
			{
				if (CharacterClass == 0) damage += random(2,3);
				if (CharacterClass == 1) damage += random(1,3);
				if (CharacterClass == 2) damage += random(1,2);
				if (CharacterClass == 9) damage += random(1,2);
			}
			if (debugmelee) Console.Printf("Gaunt2Dmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		}
	
		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 10;
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		// Flora Armor Checks
		previousdamage = damage;
		if (CharacterClass == 2) 
		{
			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) Damage = Damage * 4 / 3; // +33.3~% Punch Damage
			if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) > 0) Damage = Damage * 7 / 4; // +75% Punch Damage
			if (debugmelee) Console.Printf("FloArmorDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}
	
		// Gauntlet Check #3
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			if (altfire == 0) damage *= 10;
			if (altfire == 1) damage *= 25;
			if (debugmelee) Console.Printf("Gaunt3Dmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		}
		
		int PerkFactor;
		int temp1, temp2;
		
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		previousdamage = damage;
		if (shockwave > 0)
		{
			if (altfire == 0) damage = damage / 6;
			if (altfire == 1) damage = damage / 5;
			if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);

			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 50;
				if (MartialArtsMastery == 2) temp1 = 150;
				if (MartialArtsMastery == 3) temp1 = 450;
				if (MartialArtsMastery == 4) temp1 = 1350;
				if (MartialArtsMastery >= 5) temp1 = 4050;
				temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 1500;
				if (MartialArtsMasteryEX == 2) temp2 = 3000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);
			}
		}
		else
		{
			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 25;
				if (MartialArtsMastery == 2) temp1 = 75;
				if (MartialArtsMastery == 3) temp1 = 225;
				if (MartialArtsMastery == 4) temp1 = 675;
				if (MartialArtsMastery >= 5) temp1 = 2025;
				temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 500;
				if (MartialArtsMasteryEX == 2) temp2 = 1000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);
			}
		}
		
		previousdamage = damage;
		If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
		{
			if (altfire == 0) damage = damage;
			//if (altfire == 1) damage = damage / 4;
		}
		
		if (debugmelee && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Punch]", weaponname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Uppercut]", weaponname, damage, previousdamage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}
		
		if (debugmelee && altfire == 0) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Punch]", weaponname, actorname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Uppercut]", weaponname, actorname, damage, previousdamage);

		A_SetInventory("FinalMeleeDamageDealt",damage,AAPTR_PLAYER1,true);
		return damage;
	}

	int A_GetKickDamage(int altfire = 0, int shockwave = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;
		
		if (CharacterClass == 0) damage = random(45,60); // 2.5x
		if (CharacterClass == 1) damage = random(25,40); // 2.5x
		if (CharacterClass == 2) damage = random(26,51); // 4.25x
		if (CharacterClass == 8) damage = random(21,46); // 4.25x
		if (CharacterClass == 9) damage = random(35,60); // 
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = (damage * (4 + (stamdamagefactor * 3)) / 4);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);
		
		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR = CallACS("StatCheck",7);
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			if (CharacterClass == 0) damage += random(2,8); // 2.5x
			if (CharacterClass == 1) damage += random(2,5); // 2.5x
			if (CharacterClass == 2) damage += random(3,9); // 4.25x
			if (CharacterClass == 8) damage += random(2,8); // 4.25x
			if (CharacterClass == 9) damage += random(4,12); //
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
	
		// Reduce Check
		previousdamage = damage;
		if (altfire == 0) damage = (damage * random(5,6)) / 5;
		if (debugmelee) Console.Printf("ReduceDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
	
		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 10;
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		// Flora Armor Checks
		previousdamage = damage;
		if (CharacterClass == 2) 
		{
			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) Damage = Damage * 4 / 3; // +33.3~% Kick Damage
			if (CountInv("SafeTeaShoes", AAPTR_PLAYER1) > 0) Damage = Damage * 7 / 4; // +75% Kick Damage
			if (debugmelee) Console.Printf("FloArmorDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}
		
		int PerkFactor;
		int temp1, temp2;
		
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		previousdamage = damage;
		if (shockwave > 0)
		{
			if (altfire == 0) damage = damage / 6;
			if (altfire == 1) damage = damage / 5;
			if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);

			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 50;
				if (MartialArtsMastery == 2) temp1 = 150;
				if (MartialArtsMastery == 3) temp1 = 450;
				if (MartialArtsMastery == 4) temp1 = 1350;
				if (MartialArtsMastery >= 5) temp1 = 4050;
				temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 1500;
				if (MartialArtsMasteryEX == 2) temp2 = 3000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);
			}
		}
		else
		{
			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 25;
				if (MartialArtsMastery == 2) temp1 = 75;
				if (MartialArtsMastery == 3) temp1 = 225;
				if (MartialArtsMastery == 4) temp1 = 675;
				if (MartialArtsMastery >= 5) temp1 = 2025;
				temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 500;
				if (MartialArtsMasteryEX == 2) temp2 = 1000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = damage * PerkFactor / 1000;
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);
			}
		}
		
		previousdamage = damage;
		if (altfire == 0) damage = damage;
		if (altfire == 1) damage = damage / 4;
		if (debugmelee && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Kick]", weaponname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Roundhouse Kick]", weaponname, damage, previousdamage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}
		
		if (debugmelee && altfire == 0) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Kick]", weaponname, actorname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Roundhouse Kick]", weaponname, actorname, damage, previousdamage);

		A_SetInventory("FinalMeleeDamageDealt",damage,AAPTR_PLAYER1,true);
		return damage;
	}

	void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		if (dvds_punchrecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugmelee = dvdsdebug_showmeleeinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("StatCheck",3);
				int PlayerSTR = CallACS("StatCheck",7);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
				int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
				int BerserkAdd;
				
				
				// Base "Recoil"
				double baserecoil = -0.125;
				if (CharacterClass == 0) baserecoil = -0.0500;
				if (CharacterClass == 1) baserecoil = -0.0875;
				if (CharacterClass == 2) baserecoil = -0.125;
				if (CharacterClass == 8) baserecoil = -0.1625;
				if (CharacterClass == 9) baserecoil = -0.0875;
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * random(0,4);
				if (attacktype == 0) recoil = baserecoil * (random(0,4) + BerserkAdd);
				if (attacktype == 1) recoil = baserecoil * (random(2,10) + BerserkAdd);
				if (attacktype == 2) recoil = baserecoil * (random(4,8) + BerserkAdd);
				if (attacktype == 3) recoil = baserecoil * (random(8,20) + BerserkAdd);
				if (debugmelee) Console.Printf("\cxRecoil [Base]: %8f", recoil);
				
				// Berserk
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0)
				{
					recoil *= BerserkRecoilMulti;
					if (debugmelee) Console.Printf("\cxRecoil [Berserk]: %8f", recoil);
				}
				
				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.25) - (MartialArtsMasteryEX * 0.625) - (BerserkerFit * 0.25) - (BerserkerFitEX * 0.625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [MAM Perk]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugmelee) Console.Printf("\cxRecoil [Stats]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Random Chance for 0 recoil
				if (attacktype == 1) 
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugmelee) Console.Printf("\cxRecoil [Final]: %8f", recoil);

				
				A_Recoil(recoil);
			}
		}
	}

	void A_GetKickSwingRecoil(int attacktype = 0)
	{
		if (dvds_kickrecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugmelee = dvdsdebug_showmeleeinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("StatCheck",3);
				int PlayerSTR = CallACS("StatCheck",7);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
				int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
				
				
				// Base "Recoil"
				double baserecoil = -0.125;
				if (CharacterClass == 0) baserecoil = -0.0500;
				if (CharacterClass == 1) baserecoil = -0.0875;
				if (CharacterClass == 2) baserecoil = -0.125;
				if (CharacterClass == 8) baserecoil = -0.1625;
				if (CharacterClass == 9) baserecoil = -0.0875;
				recoil = baserecoil * random(-4,4);
				if (debugmelee) Console.Printf("\cxRecoil [Base]: %8f", recoil);
				
				// Berserk
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0)
				{
					recoil *= BerserkRecoilMulti;
					if (debugmelee) Console.Printf("\cxRecoil [Berserk]: %8f", recoil);
				}
				
				
				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.25) - (MartialArtsMasteryEX * 0.625) - (BerserkerFit * 0.25) - (BerserkerFitEX * 0.625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [MAM Perk]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugmelee) Console.Printf("\cxRecoil [Stats]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Random Chance for 0 recoil
				if (attacktype == 1) 
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugmelee) Console.Printf("\cxRecoil [Final]: %8f", recoil);

				A_Recoil(recoil);
			}
		}
	}

	void A_GetSceptreSwingRecoil(int attacktype = 0)
	{
		if (dvds_sceptrerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugmelee = dvdsdebug_showmeleeinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("StatCheck",3);
				int PlayerSTR = CallACS("StatCheck",7);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkAdd;
				
				
				// Base "Recoil"
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;
				recoil = -0.3125 * (random(0,12) + BerserkAdd);
				if (attacktype == 1) recoil = -0.3125 * random(-6,6);
				if (debugmelee) Console.Printf("\cxRecoil [Base]: %8f", recoil);
				
				// Berserk
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0)
				{
					recoil *= BerserkRecoilMulti;
					if (debugmelee) Console.Printf("\cxRecoil [Berserk]: %8f", recoil);
				}
				
				
				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.125) - (MartialArtsMasteryEX * 0.3125));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugmelee) Console.Printf("\cxRecoil [MAM Perk]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Sceptre-Level Mitigation
				recoilmulti = (1.0 - (SceptreActualLevel * 0.0625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [SceptreLevel]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [Stats]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Random Chance for 0 recoil
				if (attacktype == 1) 
				{
					if (random(1,96) <= SceptreActualLevel) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= SceptreActualLevel || recoil >= 0.0) recoil = 0.0;
				}
				if (debugmelee) Console.Printf("\cxRecoil [Final]: %8f", recoil);

				A_Recoil(recoil);
			}
		}
	}

	int A_GetSceptreDamage(int attacktype = 0, int attacklevel = 0, int shockwave = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int sceptrestrbase;
		int sceptrestrmin;
		int sceptrestrmax;
		int PerkFactor;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;
		
		if (SceptreActualLevel <= 0) damage = random(275,325); // Base Damage Range
		if (SceptreActualLevel == 1) damage = random(280,330); // +5 Damage Range
		if (SceptreActualLevel == 2) damage = random(290,340); // +10 Damage Range
		if (SceptreActualLevel == 3) damage = random(320,370); // +30 Damage Range
		if (SceptreActualLevel == 4) damage = random(340,390); // +20 Damage Range
		if (SceptreActualLevel == 5) damage = random(365,415); // +25 Damage Range
		if (SceptreActualLevel == 6) damage = random(425,475); // +60 Damage Range
		if (SceptreActualLevel == 7) damage = random(425,475); // +0 Damage Range
		if (SceptreActualLevel == 8) damage = random(545,595); // +120 Damage Range
		if (SceptreActualLevel == 9) damage = random(590,640); // +45 Damage Range
		if (SceptreActualLevel == 10) damage = random(640,690); // +50 Damage Range
		if (SceptreActualLevel == 11) damage = random(750,800); // +110 Damage Range
		if (SceptreActualLevel == 12) damage = random(810,860); // +60 Damage Range
		if (SceptreActualLevel == 13) damage = random(875,925); // +65 Damage Range
		if (SceptreActualLevel == 14) damage = random(1015,1065); // +140 Damage Range
		if (SceptreActualLevel == 15) damage = random(1015,1065); // +0 Damage Range
		if (SceptreActualLevel >= 16) damage = random(1255,1305); // +240 Damage Range
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = (damage * (4 + stamdamagefactor) / 4);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);
		
		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR = CallACS("StatCheck",7);
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			sceptrestrbase = ((SceptreActualLevel * (4 + (PlayerSTR / 32))) + (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64)))));
			sceptrestrmin = sceptrestrbase - (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64))));
			sceptrestrmax = sceptrestrbase + (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64)))); 

			if (debugmelee) Console.Printf("StrBase: %d, StrMin: %d, StrMax: %d", sceptrestrbase, sceptrestrmin, sceptrestrmax);

			damage += random(sceptrestrmin,sceptrestrmax);
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		
		if (attacktype == 1) damage = damage * 5 / 2; // If performing the Aireal Attack
		if (attacktype == 2)
		{
			if (attacklevel < 0)
			{
				if (SceptreActualLevel <= 0) attacklevel = 0;
				if (SceptreActualLevel == 1) attacklevel = 0;
				if (SceptreActualLevel == 2) attacklevel = 0;
				if (SceptreActualLevel == 3) attacklevel = 0;
				if (SceptreActualLevel == 4) attacklevel = 0;
				if (SceptreActualLevel == 5) attacklevel = 1;
				if (SceptreActualLevel == 6) attacklevel = 1;
				if (SceptreActualLevel == 7) attacklevel = 1;
				if (SceptreActualLevel == 8) attacklevel = 1;
				if (SceptreActualLevel == 9) attacklevel = 1;
				if (SceptreActualLevel == 10) attacklevel = 2;
				if (SceptreActualLevel == 11) attacklevel = 2;
				if (SceptreActualLevel == 12) attacklevel = 2;
				if (SceptreActualLevel == 13) attacklevel = 2;
				if (SceptreActualLevel == 14) attacklevel = 2;
				if (SceptreActualLevel == 15) attacklevel = 3;
				if (SceptreActualLevel >= 16) attacklevel = 3;
			}
		
			if (attacklevel == 0) damage = damage / 2; // If performing the Spinning Attack [50%]
			else if (attacklevel == 1) damage = damage * 3 / 4; // If performing the Spinning Attack [75%]
			else if (attacklevel == 2) damage = damage * 7 / 8; // If performing the Spinning Attack [87.5%]
			else if (attacklevel == 3) damage = damage * 15 / 16; // If performing the Spinning Attack [93.25%]
		
			damage = damage / 4;
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 10;
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		if (shockwave == 1) damage = damage / 6;
		if (debugmelee) Console.Printf("ShockWave: (%s) %d", weaponname, damage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}

		if (debugmelee) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Sceptre]", weaponname, actorname, damage, previousdamage);
		A_SetInventory("FinalMeleeDamageDealt",damage,AAPTR_PLAYER1,true);
		return damage;
	}

	int A_GetChainsawDamage(int sawtype)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int PerkFactor;
		int PlayerSTR = CallACS("StatCheck",7);
		int debugmelee = dvdsdebug_showmeleeinformation;
		
		if (sawtype <= 1) // Normal Chainsaw
		{
			damage = ((2 + (PlayerSTR / 10)) * random(1,10)); // 2 - 20 + (Strength * 10%)
		}
		if (sawtype >= 2) // Double-Bladed Chainsaw
		{
			damage = (((9 / 2) + (PlayerSTR * 9 / 40)) * random(3,12)); // 13.5 - 54 + (Strength * 22.5%)
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = (damage * (3 + stamdamagefactor) / 3);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);
		
		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1) > 0) damage = damage * 7 / 4; // 175% Damage when Berserked
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}

		if (debugmelee) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Chainsaw]", weaponname, actorname, damage, previousdamage);
		
		A_SetInventory("FinalMeleeDamageDealt",damage,AAPTR_PLAYER1,true);
		return damage;
	}
	
	// Sceptre Twirl Mana/MP Check [to "balance" sceptre alt-fire cheapness >.>]
	void A_SceptreTwirlManaCheck(int attacktype) 
	{
		int SceptreTimer = CountInv("SceptreTimer", AAPTR_PLAYER1);
		int HaveMana, ManaCost;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);

		int SceptreTimerLimit = 10;
		if (SceptreActualLevel == 0) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 1) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 2) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 3) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 4) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 5) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 6) SceptreTimerLimit = 13;
		if (SceptreActualLevel == 7) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 8) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 9) SceptreTimerLimit = 15;
		if (SceptreActualLevel == 10) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 11) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 12) SceptreTimerLimit = 17;
		if (SceptreActualLevel == 13) SceptreTimerLimit = 18;
		if (SceptreActualLevel == 14) SceptreTimerLimit = 19;
		if (SceptreActualLevel == 15) SceptreTimerLimit = 20;
		if (SceptreActualLevel == 16) SceptreTimerLimit = 22;
		
		int CurrentMana = CallACS("StatCheck",14); 
		if (attacktype == 1)
		{
			if (SceptreActualLevel <= 4 && CurrentMana >= 5) { CurrentMana -= 5; HaveMana++; }
			if (SceptreActualLevel > 4 && SceptreActualLevel <= 8 && CurrentMana >= 4 ) { CurrentMana -= 4; HaveMana++; }
			if (SceptreActualLevel > 8 && SceptreActualLevel <= 12 && CurrentMana >= 3 ) { CurrentMana -= 3; HaveMana++; }
			if (SceptreActualLevel > 12 && SceptreActualLevel <= 16 && CurrentMana >= 2 ) { CurrentMana -= 2; HaveMana++; }
			if (SceptreActualLevel == 16 && CurrentMana >= 1) { CurrentMana -= 1; HaveMana++; }
			if (CurrentMana < 0) CurrentMana = 0;
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		else
		{
			if (CurrentMana > 0) HaveMana++;
			if (random(1,16) == 1) SceptreTimer += 2; else SceptreTimer += 1;

			if (SceptreTimer >= SceptreTimerLimit)
			{
				ManaCost = random(1,2);
				if (SceptreActualLevel < 8) CurrentMana -= 2;
				if (SceptreActualLevel > 8 && SceptreActualLevel < 16) CurrentMana -= ManaCost; HaveMana++;
				if (SceptreActualLevel == 16) CurrentMana -= 1; HaveMana++;
				if (CurrentMana < 0) CurrentMana = 0;

				CallACS("OtherVarSetDECORATE",2,CurrentMana);
				CallACS("MiscVarSetDECORATE",243,CurrentMana);
				CallACS("MiscVarSetDECORATE",238,CurrentMana);
				SceptreTimer = 0;
			}
		}
		
		A_SetInventory("SceptreTimer",SceptreTimer,AAPTR_PLAYER1,true);
		//Console.Printf("SceptreTimer: %d / %d	", SceptreTimer, SceptreTimerLimit);
		//Console.Printf("HaveMana?: %d", HaveMana);
		if (HaveMana > 0) 
		{
			A_SetInventory("HaveMana",1,AAPTR_PLAYER1,true);
		}
		else 
		{
			A_SetInventory("HaveMana",0,AAPTR_PLAYER1,true);
		}
	}

	// Consumes a set amount of MP/MANA when called or checks for that much for an A_JumpIf call (for Heretic's Tome-fire modes)
	void A_UseManaAttack(int amount = 0, int check = 0, int infammocheck = 0, int musthaveammofirst = 0)
	{
		int CurrentMana = CallACS("StatCheck",14);
		int UseManaAttack;
		int breakcode;

		// Check 0 = Takes MP without a return value [i.e. infiniteammo is turned on].
		// Check 1 = Takes NO MP and gives a return value [for just checking]
		// Check 2 = Takes MP if applicable and gives a return value
		if (check > 0)
		{
			if (musthaveammofirst > 0)
			{
				if (CurrentMana >= amount) breakcode = 0; else breakcode = 1;
			}
			else breakcode = 0;

			if (breakcode <= 0)
			{
				if (infammocheck > 0 && (CountInv("RandomInfiniteAmmo", AAPTR_PLAYER1) > 0 || CountInv("PowerInfiniteAmmo", AAPTR_PLAYER1) > 0))
				{
					A_SetInventory("CanUseManaAttack",1,AAPTR_PLAYER1,true);
					UseManaAttack = 1;
				}
				else
				{
					if (CurrentMana >= amount) 
					{
						if (check > 1)
						{
							CurrentMana -= amount;
							if (CurrentMana < 1) CurrentMana = 0;
							CallACS("OtherVarSetDECORATE",2,CurrentMana);
							CallACS("MiscVarSetDECORATE",243,CurrentMana);
							CallACS("MiscVarSetDECORATE",238,CurrentMana);
						}
						A_SetInventory("CanUseManaAttack",1,AAPTR_PLAYER1,true);
						UseManaAttack = 1;
					}
					else 
					{
						A_SetInventory("CanUseManaAttack",0,AAPTR_PLAYER1,true);
						UseManaAttack = 0;
					}
				}
			}
			else
			{
				A_SetInventory("CanUseManaAttack",0,AAPTR_PLAYER1,true);
				UseManaAttack = 0;
			}
		}
		else
		{
			CurrentMana -= amount;
			if (CurrentMana < 1) CurrentMana = 0;
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		//Console.Printf("UseManaAttack?: %d (%d)", UseManaAttack, amount);
	}
	
	// Consumes a set amount of Stamina when called [1 = 0.01% stamina consumed, etc] or checks for that much for an A_JumpIf call
	void A_UseStaminaAttack(int amount = 0, int check = 0, int type = 0)
	{
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int powertripmode = dvds_musou_powertripmode;
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);

		int whole = amount / 100; 
		int modulus = amount % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}
		
		if (powertripmode == 1) amount *= 0.2;
		if (powertripmode == 2) amount *= 0.1;
		if (DQOomphTimer > 0) amount *= 0.80; // Oomph [80% consumption]
		if (DQBuffTimer > 0) amount *= 0.80; // Buff [80% consumption]
		if (DQAcceleratleTimer > 0) amount *= 0.80; // Acceleratle [80% consumption]
		if (DQBluntTimer > 0) amount *= 1.20; // Blunt [120% consumption]
		if (DQSapTimer > 0) amount *= 1.20; // Sap [120% consumption]
		if (DQDeceleratleTimer > 0) amount *= 1.20; // Deceleratle [120% consumption]
		if (CallACS("MiscVarCheckDECORATE",9043) > 0) 
		{
			if (CallACS("MiscVarCheckDECORATE",9043) <= 1) amount *= 0.5; // Death Rage [50% consumption]
			if (CallACS("MiscVarCheckDECORATE",9043) == 2) amount *= 0.25; // Death Rage [25% consumption]
			if (CallACS("MiscVarCheckDECORATE",9043) >= 3) amount *= 0.125; // Death Rage [12.5% consumption]
		}
		if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) amount *= 0.75; // Falcon Knife Earrings [75% Consumption]
		
		if (type == 1) // Hellcore [Hell Warrior Shield]
		{
			amount *= (1.00 - (CallACS("MiscVarCheckDECORATE",10033) * 0.05) - (CallACS("MiscVarCheckDECORATE",10034) * 0.125));
		}
		
		whole = amount / 100; 
		modulus = amount % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Final]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Final]: %d.%d%",whole, modulus);
		}
		
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		if (check > 0)
		{
			if (CurrentStamina >= amount) 
			{
				if (check > 1)
				{
					CurrentStamina -= amount;
					if (CurrentStamina < 1) CurrentStamina = 0;
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				A_SetInventory("StamUsed",1,AAPTR_PLAYER1,true);
				if (stamusedebug) Console.Printf("Stamina to be Used: Yes");
			}
			else 
			{ 
				A_SetInventory("StamUsed",0,AAPTR_PLAYER1,true); 
				if (stamusedebug) Console.Printf("Stamina to be Used: No");
			}
		}
		else
		{
			CurrentStamina -= amount;
			if (CurrentStamina < 1) CurrentStamina = 0;
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
	}
	
	int A_GetPunchStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int stamuse;
		int PerkFactor;
		int temp1, temp2;
		if (attacktype == -1) // Poison Needle
		{
			if (CharacterClass == 0) stamuse = 150;
			if (CharacterClass == 1) stamuse = 167;
			if (CharacterClass == 2) stamuse = 222;
			if (CharacterClass == 9) stamuse = 198;
		}
		else
		if (attacktype == 0) // Punch [normal]
		{
			if (CharacterClass == 0) stamuse = 225;
			if (CharacterClass == 1) stamuse = 250;
			if (CharacterClass == 2) stamuse = 333;
			if (CharacterClass == 9) stamuse = 298;
		}
		else
		if (attacktype == 1) // Gauntlet Punch [normal]
		{
			if (CharacterClass == 0) stamuse = 562;
			if (CharacterClass == 1) stamuse = 625;
			if (CharacterClass == 2) stamuse = 832;
			if (CharacterClass == 9) stamuse = 732;
		}
		else
		if (attacktype == 2) // Gauntlet Punch [altfire]
		{
			if (CharacterClass == 0) stamuse = 1405;
			if (CharacterClass == 1) stamuse = 1562;
			if (CharacterClass == 2) stamuse = 2081;
			if (CharacterClass == 9) stamuse = 1830;
		}
		else
		if (attacktype == 4) // Punch [uppercut]
		{
			if (CharacterClass == 0) stamuse = 374;
			if (CharacterClass == 1) stamuse = 415;
			if (CharacterClass == 2) stamuse = 553;
			if (CharacterClass == 9) stamuse = 495;
		}
		int whole = stamuse / 100; 
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}
		
		if (MartialArtsMastery > 0)
		{
			temp1 = 0;
			if (MartialArtsMastery == 1) temp1 = 50;
			if (MartialArtsMastery == 2) temp1 = 100;
			if (MartialArtsMastery == 3) temp1 = 175;
			if (MartialArtsMastery == 4) temp1 = 300;
			if (MartialArtsMastery >= 5) temp1 = 600;
			temp2 = 0;
			if (MartialArtsMasteryEX == 1) temp2 = 150;
			if (MartialArtsMasteryEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		
		if (BerserkerFit > 0)
		{
			temp1 = 0;
			if (BerserkerFit == 1) temp1 = 50;
			if (BerserkerFit == 2) temp1 = 100;
			if (BerserkerFit == 3) temp1 = 175;
			if (BerserkerFit == 4) temp1 = 300;
			if (BerserkerFit >= 5) temp1 = 600;
			temp2 = 0;
			if (BerserkerFitEX == 1) temp2 = 150;
			if (BerserkerFitEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After Perks]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After Perks]: %d.%d%",whole, modulus);
		}
		
		if (DQOomphTimer > 0) stamuse = stamuse * 19 / 20; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 7 / 8; // Berserk
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	int A_GetKickStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int stamuse;
		int PerkFactor;
		int temp1, temp2;
		if (attacktype == 0) // Kick [normal]
		{
			if (CharacterClass == 0) stamuse = 666;
			if (CharacterClass == 1) stamuse = 500;
			if (CharacterClass == 2) stamuse = 450;
			if (CharacterClass == 9) stamuse = 300;
		}
		else
		if (attacktype == 1) // Roundhouse Kick [normal]
		{
			if (CharacterClass == 0) stamuse = 1665;
			if (CharacterClass == 1) stamuse = 1250;
			if (CharacterClass == 2) stamuse = 1125;
			if (CharacterClass == 9) stamuse = 750;
		}
		int whole = stamuse / 100; 
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}
		
		if (MartialArtsMastery > 0)
		{
			temp1 = 0;
			if (MartialArtsMastery == 1) temp1 = 50;
			if (MartialArtsMastery == 2) temp1 = 100;
			if (MartialArtsMastery == 3) temp1 = 175;
			if (MartialArtsMastery == 4) temp1 = 300;
			if (MartialArtsMastery >= 5) temp1 = 600;
			temp2 = 0;
			if (MartialArtsMasteryEX == 1) temp2 = 150;
			if (MartialArtsMasteryEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		
		if (BerserkerFit > 0)
		{
			temp1 = 0;
			if (BerserkerFit == 1) temp1 = 50;
			if (BerserkerFit == 2) temp1 = 100;
			if (BerserkerFit == 3) temp1 = 175;
			if (BerserkerFit == 4) temp1 = 300;
			if (BerserkerFit >= 5) temp1 = 600;
			temp2 = 0;
			if (BerserkerFitEX == 1) temp2 = 150;
			if (BerserkerFitEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After Perks]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After Perks]: %d.%d%",whole, modulus);
		}
		
		if (DQOomphTimer > 0) stamuse = stamuse * 19 / 20; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 7 / 8; // Berserk
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	int A_GetSceptreStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int stamuse;
		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 1005;
			if (SceptreActualLevel == 1) stamuse = 996;
			if (SceptreActualLevel == 2) stamuse = 987;
			if (SceptreActualLevel == 3) stamuse = 978;
			if (SceptreActualLevel == 4) stamuse = 969;
			if (SceptreActualLevel == 5) stamuse = 960;
			if (SceptreActualLevel == 6) stamuse = 951;
			if (SceptreActualLevel == 7) stamuse = 942;
			if (SceptreActualLevel == 8) stamuse = 933;
			if (SceptreActualLevel == 9) stamuse = 924;
			if (SceptreActualLevel == 10) stamuse = 915;
			if (SceptreActualLevel == 11) stamuse = 903;
			if (SceptreActualLevel == 12) stamuse = 891;
			if (SceptreActualLevel == 13) stamuse = 879;
			if (SceptreActualLevel == 14) stamuse = 867;  
			if (SceptreActualLevel == 15) stamuse = 855;
			if (SceptreActualLevel >= 16) stamuse = 840;
		}

		int whole = stamuse / 100; 
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}

		if (DQOomphTimer > 0) stamuse = stamuse * 19 / 20; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 7 / 8; // Berserk
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	int A_GetRecoil(int type = 0)
	{
		double result;
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		if (type == 1) result = frandom(4.0,4.5); // Phoenix Rod
		if (type == 2) result = frandom(9.0,10.125); // Dual Phoenix Rods
		if (type == 1 || type == 2)
		{
			if (WandMasteryPerkLevel == 1) result *= 0.8334;
			if (WandMasteryPerkLevel == 2) result *= 0.6667;
			if (WandMasteryPerkLevel == 3) result *= 0.5;
			if (WandMasteryPerkLevel == 4) result *= 0.3333;
			if (WandMasteryPerkLevel >= 5) result *= 0.1666;
		}
		if (CountInv("PRMode",AAPTR_PLAYER1) == 0) result *= 1;
		if (CountInv("PRMode",AAPTR_PLAYER1) == 1) result *= 0.75;

		//Console.Printf("Recoil: %4f", result);
		A_SetInventory("RecoilAmt",result,AAPTR_PLAYER1,true);
		return result;
	}

	// script for Hellcore Energy and Heating usage [and also controls dealing Flora direct damage when using a Hellcore weapon when heating is 100% or higher]
	void A_IncreaseHellcoreHeat(int percent = 0, int trydamageuser = 0)
	{
		int hellcoredebug = dvdsdebug_hellcoreheatdisplay;
		int LevelHeatAlter, OldHealth, NewHealth, HealthDiff, DamageFactor, DamageDealt, DamageRatio, ObitTimes;
		int PlayerLevel = CallACS("StatCheck",0);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CharacterClass = CallACS("CheckCharacterClass");
		int PerkFactor;
		int temp1, temp2;
		
		int whole = percent / 100;
		int modulus = percent % 100;
		if (hellcoredebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Percent: %d.0%d %", whole, modulus, trydamageuser);
																	 else Console.Printf("Percent: %d.%d %", whole, modulus, trydamageuser);
		}
		
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		// Any damage from overheating is inflicted BEFORE increasing the heating counter (so going from below 100% to above 100% with a single attack doesn't harm you, only being above 100% at the moment of pulling the trigger will harm you)
		if (HellcoreOverheatLevel > 1000000 && trydamageuser != 0) // Translates to 100% or higher when you first fire your attack, which means you'll deal yourself damage upon use of this attack if above 100% at this point and the "trydamageuser" argument is set to something other than 0.
		{
			DamageFactor = (HellcoreOverheatLevel - 1000000) / 100;
			if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [unmitigated base]", DamageFactor);
			// Dove's Ribbon cuts Hellcore Overheating Damage in half
			if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0)
			{
				DamageFactor = DamageFactor * 1 / 5;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - Dove Ribbon]", DamageFactor);
			}
			else
			{
				DamageFactor = DamageFactor * 2 / 5;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - No Dove's Ribbon]", DamageFactor);
			}
		
			// Playing Unloved halves heat ratio
			if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0) 
			{
				DamageFactor = DamageFactor / 2;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - Playing Unloved]]", DamageFactor);
			}
		
			// Soul Mastery Reduces some damage taken if Overheated.
			if (SoulMasteryPerkLevel >= 0)
			{
				if (SoulMasteryPerkLevel == 1) temp1 = 3;
				if (SoulMasteryPerkLevel == 2) temp1 = 6;
				if (SoulMasteryPerkLevel == 3) temp1 = 9;
				if (SoulMasteryPerkLevel == 4) temp1 = 12;
				if (SoulMasteryPerkLevel == 5) temp1 = 15;
				if (SoulMasteryEXPerkLevel == 1) temp2 = random(7,8);
				if (SoulMasteryEXPerkLevel == 2) temp2 = 15;
				PerkFactor = 80 - (temp1 + temp2);
				DamageFactor = DamageFactor * PerkFactor / 80;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [Soul Mastery Perk]]", DamageFactor);
			}
		
			DamageDealt = DamageFactor * MaxHealthTrue / 10000;
			
			if (DamageDealt < 1) DamageDealt = 1;
			if (DamageDealt > MaxHealthLimit) DamageDealt = MaxHealthLimit;
			
			if (hellcoredebug) Console.Printf("Damage Dealt: %d", DamageDealt);

			// Deal the Actual Damage
			int CurrentHealth = health;
			OldHealth = health;
			if (health <= 0 || bINVULNERABLE || 
					player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || 
					CountInv("InvulnerabilitySpell",AAPTR_PLAYER1) > 0 || CountInv("IsInvulnerable",AAPTR_PLAYER1) > 0 || CountInv("MenuInvulnerability",AAPTR_PLAYER1) > 0)
			{
				A_GiveInventory("TookNoDamageInvuln",1);
				A_PlaySound("Player/TookNoDamageInvuln",CHAN_BODY,frandom(0.375,0.625),0,ATTN_NORM); 
			}
			else
			{
				DamageMobj(self, self, DamageDealt, 'HellcoreDrain');
			}
			NewHealth = health;
		
			HealthDiff = OldHealth - NewHealth;
			if (hellcoredebug) Console.Printf("HealthDiff: %d (%d - %d)", HealthDiff, OldHealth, NewHealth);
		
			// Get's the damage % for a fade screen
			DamageRatio = HealthDiff; // DamageDealt;
			DamageRatio = DamageRatio * 10000;
			DamageRatio = DamageRatio / MaxHealthTrue;
		
			if (health > 0)
			{
				if (NewHealth < OldHealth)
				{
					if (DamageRatio > 0 && DamageRatio < 1001) A_SetBlend("C0 00 40",0.15,random(21,22));
					if (DamageRatio > 1000 && DamageRatio < 2001) A_SetBlend("C0 00 40",0.30,random(21,22));
					if (DamageRatio > 2000 && DamageRatio < 3001) A_SetBlend("C0 00 40",0.45,random(21,22));
					if (DamageRatio > 3000 && DamageRatio < 4001) A_SetBlend("C0 00 40",0.60,random(21,22));
					if (DamageRatio > 4000 && DamageRatio < 5001) A_SetBlend("C0 00 40",0.75,random(21,22));
					if (DamageRatio > 5000 && DamageRatio < 6001) A_SetBlend("C0 00 40",0.90,random(21,22));
					if (DamageRatio > 6000 && DamageRatio < 7001) A_SetBlend("C0 00 40",1.05,random(21,22));
					if (DamageRatio > 7000 && DamageRatio < 8001) A_SetBlend("C0 00 40",1.20,random(21,22));
					if (DamageRatio > 8000 && DamageRatio < 9001) A_SetBlend("C0 00 40",1.35,random(21,22));
					if (DamageRatio > 9000 && DamageRatio < 10001) A_SetBlend("C0 00 40",1.50,random(21,22));
					if (DamageRatio > 10000) A_SetBlend("C0 00 40",1.65,random(21,22));
				}
			}
		}
		
		percent *= 100;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Base]", percent);
		
		int ArmorHellCoreRate = 200;
		// Armor Based items [Sauron-class or Flora's specfic] can alter the rate of how fast Hellcore heats up.
		if (CountInv("RuinousShield", AAPTR_PLAYER1) > 0) percent = percent * 2; 					// +100%
		if (CountInv("SauronHelmet", AAPTR_PLAYER1) > 0) percent = percent * 134 / 100; 			// +34%
		if (CountInv("SauronGauntletsFlora", AAPTR_PLAYER1) > 0) percent = percent * 134 / 100; 	// +34%
		if (CountInv("TheOneRing", AAPTR_PLAYER1) > 0) percent = percent * 75 / 100; 				// -25%
		
		if (CountInv("SafeTeaShoes", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 1; 			// -0.5% (1)
		if (CountInv("PearlyCorset", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 5; 			// -2.5% (5)
		if (CountInv("WaterFlyingDress", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 15; 	// -7.5% (15)
		if (CountInv("EvenstarNecklace", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 27; 	// -13.5% (27)
		if (CountInv("CloakofEvasion", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 3; 		// -1.5% (3)
		if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 9; 	// -4.5% (9)
		if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 7; 		// -3.5% (7)
		if (CountInv("KissaBra", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 13; 			// -6.5% (13)
		if (CountInv("DivineShield", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 25; 		// -12.5% (25)
		if (CountInv("BalrogRing", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 17; 			// -8.5% (17)
		if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0) ArmorHellCoreRate -= 11; 			// -5.5% (11)
																							// Total: -66.5% (133)
		
		percent = percent * ArmorHellCoreRate / 200;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Armor Reduction]", percent);
		
		LevelHeatAlter = PlayerLevel / 10;
		LevelHeatAlter = LevelHeatAlter * -1;
		LevelHeatAlter += 200;
		percent = percent * LevelHeatAlter / 200;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Level Alteration]", percent);
		
		// Check Hellcore Multiplier in Options
		percent = (percent * GetCVar("dvds_heatheatmultiplier")) / 100;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Menu Options]", percent);
		
		// Soul Mastery Reduces rate of heat increase
		if (SoulMasteryPerkLevel >= 0)
		{
			if (SoulMasteryPerkLevel == 1) temp1 = 1;
			if (SoulMasteryPerkLevel == 2) temp1 = 2;
			if (SoulMasteryPerkLevel == 3) temp1 = 3;
			if (SoulMasteryPerkLevel == 4) temp1 = 4;
			if (SoulMasteryPerkLevel == 5) temp1 = 5;
			if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
			if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
			PerkFactor = 16 - (temp1 + temp2);
			percent = percent * PerkFactor / 16;
			if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Soul Mastery]", percent);
		}
		
		if (CountInv("IsHaSatanNow", AAPTR_PLAYER1) > 0)
		{
			percent = percent / 16;
			if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [HaSatan Check]", percent);
		}
		
		if (percent < 1) percent = 1;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Final Amount]", percent);
		
		HellcoreOverheatLevel += percent;
		if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
		if (HellcoreOverheatLevel > 10000000) HellcoreOverheatLevel = 10000000;
		CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
	}

	void A_GetSceptreRange(int attacktype = 0)
	{
		int range;
		int baserange;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) range = 168;
			if (SceptreActualLevel == 1) range = 173; // +5
			if (SceptreActualLevel == 2) range = 178; // +5
			if (SceptreActualLevel == 3) range = 182; // +4
			if (SceptreActualLevel == 4) range = 187; // +5
			if (SceptreActualLevel == 5) range = 196; // +9
			if (SceptreActualLevel == 6) range = 201; // +5
			if (SceptreActualLevel == 7) range = 209; // +8
			if (SceptreActualLevel == 8) range = 222; // +13
			if (SceptreActualLevel == 9) range = 230; // +8
			if (SceptreActualLevel == 10) range = 236; // +6
			if (SceptreActualLevel == 11) range = 241; // +5
			if (SceptreActualLevel == 12) range = 247; // +6
			if (SceptreActualLevel == 13) range = 256; // +9
			if (SceptreActualLevel == 14) range = 262; // +6
			if (SceptreActualLevel == 15) range = 271; // +9
			if (SceptreActualLevel >= 16) range = 288; // +17
			range = range * 5 / 4;
		}
		baserange = range;
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("\cwMeleeRange: (SAttackType: %d) %d - (Base Range: %d)\c-", attacktype, range, baserange);
		A_SetInventory("MeleeAtkRange",range,AAPTR_PLAYER1,true);
	}
	
	// Melee Range
	int A_GetMeleeRange(int type = 0)
	{
		int baserange;
		int range;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (type == 0) range = 64; // Punch [normal]
		if (type == 1) range = 58; // Punch [uppercut]
		if (type == 2) range = 72; // Gauntlet Punch [normal]
		if (type == 3) range = 80; // Gauntlet Punch [alt-fire]
		if (type == 4) range = 104; // Kick
		if (type == 5) range = 73; // Chainsaw
		if (type == 6) range = random(74,75); // Dual-Bladed Chainsaw
		if (type == 7) range = 88; // Poison Needle
		
		baserange = range;
		if (CharacterClass == 2 && MartialArtsMastery > 0)
		{
			if (MartialArtsMastery == 1) range = range * 1015 / 1000;
			if (MartialArtsMastery == 2) range = range * 1030 / 1000;
			if (MartialArtsMastery == 3) range = range * 1045 / 1000;
			if (MartialArtsMastery == 4) range = range * 1060 / 1000;
			if (MartialArtsMastery == 5) range = range * 1075 / 1000;
		}
		
		if (CharacterClass != 2 && BerserkerFit > 0)
		{
			if (BerserkerFit == 1) range = range * 1010 / 1000;
			if (BerserkerFit == 2) range = range * 1020 / 1000;
			if (BerserkerFit == 3) range = range * 1030 / 1000;
			if (BerserkerFit == 4) range = range * 1040 / 1000;
			if (BerserkerFit == 5) range = range * 1050 / 1000;
		}
		
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("MeleeRange: (Type: %d) %d - (Base Range: %d)", type, range, baserange);
		A_SetInventory("MeleeAtkRange",range,AAPTR_PLAYER1,true);
		return range;
	}

	double A_GetHitScanXSpread(int type = 0)
	{
		double spread = 0.0;
		double spreadfactor = 1.0;
		double spreadfactor2 = 1.0;
		double spreadfactor3 = 1.0;
		double spreadfactor4 = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		if (type == 1) // Pistol [Single]
		{
			spread = 2.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}	
		if (type == 2) // Pistol [Dual]
		{
			spread = 2.785; // 4.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 3) // Shotgun
		{
			spread = 5.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 4) // Super Shotgun
		{
			spread = 11.2;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 5) // Plasma Repeater
		{
			spread = 5.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 6) // Strife's Electric Arrows
		{
			spread = 2.8125;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 7) // Strife's Poison Arrows
		{
			spread = 2.8125;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 8) // RocketLauncher Burst Mode
		{
			spread = 3.75;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 9) // PlasmaRifle Burst Mode
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 10) // Grenades [Burst Mode]
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 11) // Chaingun
		{
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 12) // Minigun
		{
			spread = 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 13) // Elven Wand[s]
		{
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 14) // Dragon Claw[s]
		{
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		spreadfactor4 = 1.0 - ((MartialArtsMastery * 0.025) + (MartialArtsMasteryEX * 0.0625) + (BerserkerFit * 0.025) + (BerserkerFitEX * 0.0625));
		
		spread *= spreadfactor;
		spread *= spreadfactor2;
		spread *= spreadfactor3;
		spread *= spreadfactor4;
		if (accuracydebug) Console.Printf("\cyXSpread: %8f, XSpreadFactor: %8f, XSpreadFactor2: %8f, XSpreadFactor3: %8f, XSpreadFactor4: %8f\c-" ,spread, spreadfactor, spreadfactor2, spreadfactor3, spreadfactor4);
		return spread;
	}
	
	double A_GetHitScanYSpread(int type = 0)
	{
		double spread = 0.0;
		double spreadfactor = 1.0;
		double spreadfactor2 = 1.0;
		double spreadfactor3 = 1.0;
		double spreadfactor4 = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		if (type == 1) // Pistol [Single]
		{
			spread = 1.3; // 2.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 2) // Pistol [Dual]
		{
			spread = 1.3925; // 2.785;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 3) // Shotgun
		{
			spread = 1.42;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 4) // Super Shotgun
		{
			spread = 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 5) // Plasma Repeater
		{
			spread = 4.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 6) // Strife's Electric Arrows
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 7) // Strife's Poison Arrows
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 8) // RocketLauncher Burst Mode
		{
			spread = 1.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 9) // PlasmaRifle Burst Mode
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 10) // Grenades [Burst Mode]
		{
			spread = 6.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 11) // Chaingun
		{
			spread = 2.8125; // 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 12) // Minigun
		{
			spread = 3.55; // 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 13) // Elven Wand[s]
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 14) // Dragon Claw[s]
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		
		spreadfactor4 = 1.0 - ((MartialArtsMastery * 0.0375) + (MartialArtsMasteryEX * 0.09375) + (BerserkerFit * 0.0375) + (BerserkerFitEX * 0.09375));
		
		spread *= spreadfactor;
		spread *= spreadfactor2;
		spread *= spreadfactor3;
		spread *= spreadfactor4;
		if (accuracydebug) Console.Printf("\cyYSpread: %8f, YSpreadFactor: %8f, YSpreadFactor2: %8f, YSpreadFactor3: %8f, YSpreadFactor4: %8f\c-" ,spread, spreadfactor, spreadfactor2, spreadfactor3, spreadfactor4);
		return spread;
	}

	void A_GetSapphireWandAltSpread(int type = 0)
	{
		int result = 400;
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		if (WandMasteryPerkLevel == 1) result = result * 5 / 6;
		if (WandMasteryPerkLevel == 2) result = result * 4 / 6;
		if (WandMasteryPerkLevel == 3) result = result * 3 / 6;
		if (WandMasteryPerkLevel == 4) result = result * 2 / 6;
		if (WandMasteryPerkLevel == 5) result = result * 1 / 6;
		//if (type == -1) result *= -1;

		if (accuracydebug) Console.Printf("\cyWandSpread: %8f", result);
		A_SetInventory("WandSpread",result,AAPTR_PLAYER1,true);
	}
	
	// Checks the Player's level to determine how much drawing the Diaris Longbow will slow you down while aiming
	void A_DrawBow(int isbowdrawn = 0)
	{
		int i = 0;
		int bowlevel;
		int bowlevelbase;
		int lvlforbowdraw;
		int strforbowdraw;
		int aglforbowdraw;
		int perklvlforbowdraw;
		string BowLevelItem;
		int PlayerLevel = CallACS("StatCheck",0);
		
		bowlevelbase = random(15,19);
		lvlforbowdraw = PlayerLevel / 8; // Max of +25%
		strforbowdraw = CallACS("MiscVarCheckDECORATE",35) / 16; // Max of +32%
		aglforbowdraw = CallACS("MiscVarCheckDECORATE",31) / 10; // Max of +51%
		perklvlforbowdraw = CallACS("MiscVarCheckDECORATE",10031) * 10; // Max of +50%
		bowlevel = bowlevelbase;
		bowlevel += lvlforbowdraw;
		bowlevel += strforbowdraw;
		bowlevel += aglforbowdraw;
		bowlevel += perklvlforbowdraw;
		if (CountInv("EvenstarNecklace") > 0) bowlevel = bowlevel * 4 / 3;
		
		if (bowlevel < 0) bowlevel = 0; // Min of 0
		if (bowlevel > 101) bowlevel = 101; // Max of 50
		
		CallACS("MiscVarSetDECORATE",398,isbowdrawn); // 398 - Bow is Drawn?
		CallACS("MiscVarSetDECORATE",84,bowlevel); // 8 - Bow Proficency/SpeedMovement%

		if (dvdsdebug_showplayeratkinformation > 0)
		{
			if (isbowdrawn) Console.Printf("isbowdrawn: %d, bowlevel: %d", isbowdrawn, bowlevel);
			else Console.Printf("isbowdrawn: %d", isbowdrawn);
		}
	}
	
	void A_CheckWeaponFlash(int modulous = 0, int increment = 0)
	{
		int result = CountInv("WeaponFlashResult");
		if (increment != 0)
		{
			result += increment;
			if (result >= modulous) result = 0;
		}
		else
		{
			result %= modulous;
		}
		A_SetInventory("WeaponFlashResult",result);
		//Console.Printf("result / modulous: %d / %d  [increment: %d]", result, modulous, increment);
	}
	
	void A_CheckMinigunHeat(int save = 0)
	{
		int heatsave;
		int heatdivisior = CallACS("MiscVarCheckDECORATE",191);
		if (save > 0) 
		{
			heatdivisior = CountInv("MinigunHeat") / save; 
			if (heatdivisior < 1) heatdivisior = 1;
			//Console.Printf("heatdivisior: %d - save: %d [FIRING]", heatdivisior, save);
		}
		else
		{
			if (heatdivisior > 0) A_TakeInventory("MinigunHeat",heatdivisior);
			//Console.Printf("heatdivisior: %d [COOLING]", heatdivisior);
		}
		CallACS("MiscVarSetDECORATE",191,heatdivisior);
	}
	
	
	
	
	
	
	void A_SceptreDvAvSwing()
	{
		if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); }
	}
	
	void A_SceptreSwingShield()
	{
		A_GetSceptreRange(0);
		let baseRange = CountInv("MeleeAtkRange",AAPTR_PLAYER1);
		let sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 4) { reflpiece = "ShieldSpawnerSwingAttack1D"; blckpiece = "ShieldSpawnerSwingAttack1"; }
		if (sceptrelevel >= 5 && sceptrelevel <= 9) { reflpiece = "ShieldSpawnerSwingAttack2D"; blckpiece = "ShieldSpawnerSwingAttack2"; }
		if (sceptrelevel >= 10 && sceptrelevel <= 13) { reflpiece = "ShieldSpawnerSwingAttack3D"; blckpiece = "ShieldSpawnerSwingAttack3"; }
		if (sceptrelevel >= 14 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSwingAttack4D"; blckpiece = "ShieldSpawnerSwingAttack4"; }
		let maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}
	
	void A_SceptreAltFireShield()
	{
		int xpos;
		int ypos;
		int zpos;
		int spawnchance = 1 - (CallACS("OtherVarCheckDECORATE",11) / 8);
		if (random(1,256) > spawnchance)
		{
			// 6 [No]
			xpos = 32; ypos = 0;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = 16;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = -16;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = 32;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = -32;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			
			spawnchance = 3 - ((CallACS("OtherVarCheckDECORATE",11) * 2) / 3);
			if (random(1,256) > spawnchance)
			{
				// 6 [No]
				xpos = 40; ypos = 0;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = 16;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = -16;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = 32;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = -32;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				
				
				spawnchance = 10 - ((CallACS("OtherVarCheckDECORATE",11) * 16) / 5);
				if (random(1,256) > spawnchance)
				{
					// 6 [Yes]
					xpos = 48; ypos = 0;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = 16;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = -16;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = 32;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = -32;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					
					
					spawnchance = 30 - ((CallACS("OtherVarCheckDECORATE",11) * 18) / 2);
					if (random(1,256) > spawnchance)
					{
						// 3 [No]
						xpos = 2; ypos = 40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 2; ypos = -40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = 40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = -40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = 40;
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = -40;
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						
						
						
					}
				}
			}
		}
		//A_SpawnItemEx("ShieldPart", cos(-pitch) * CallACS("SetShieldPieceDist",32), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",32)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
	}
	
	void A_SceptreSpinningShield()
	{
		A_GetSceptreRange(2);
		let baseRange = CountInv("MeleeAtkRange",AAPTR_PLAYER1);
		let sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 8) { reflpiece = "ShieldSpawnerSpinAttack1D"; blckpiece = "ShieldSpawnerSpinAttack1"; }
		if (sceptrelevel >= 9 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSpinAttack2D"; blckpiece = "ShieldSpawnerSpinAttack2"; }
		let maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}
	
	void A_UppercutBonusTake()
	{
		A_SetInventory("UppercutATKBonus1",0,AAPTR_PLAYER1); 
		A_SetInventory("UppercutATKBonus2",0,AAPTR_PLAYER1); 
		A_SetInventory("UppercutDEFBonus1",0,AAPTR_PLAYER1); 
		A_SetInventory("UppercutDEFBonus2",0,AAPTR_PLAYER1); 
		A_SetInventory("UppercutCritBonus1",0,AAPTR_PLAYER1); 
		A_SetInventory("UppercutCritBonus2",0,AAPTR_PLAYER1); 
	}

	void A_UppercutBonus()
	{
		if (random(1,6) == 1)
		{
			A_SetInventory("UppercutCritBonus2",1,AAPTR_PLAYER1); 
		}
		else
		{
			A_SetInventory("UppercutCritBonus1",1,AAPTR_PLAYER1); 
		}

		if (random(1,6) == 1)
		{
			if (random(1,6) == 1)
			{
				A_SetInventory("UppercutATKBonus2",1,AAPTR_PLAYER1); 
				A_SetInventory("UppercutDEFBonus2",1,AAPTR_PLAYER1); 
			}
			else
			{
				A_SetInventory("UppercutATKBonus1",1,AAPTR_PLAYER1); 
				A_SetInventory("UppercutDEFBonus1",1,AAPTR_PLAYER1); 
			}
		}
	}
 
	// Hell Warrior Shield
	void A_PHellWarShieldOff()
	{
		if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
		A_SetInventory("EWShieldDefendMode",0);
		A_SetInventory("EWShieldDefendModeExtra",0);
		bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}
	void A_PHellWarShieldOn()
	{
		A_SetInventory("EWShieldDefendMode",1);
		A_SetInventory("EWShieldDefendModeExtra",0);
		if (random(1,4) == 1) { A_SetInventory("EWShieldDefendModeExtra",1); } 
		bREFLECTIVE = 1;
		//bSHIELDREFLECT = 1;
	}
	
	// Fist Block Function
	void A_PFistBlockOn(int perkcheck)
	{
		A_SetInventory("FistPlayerBlock",0); A_SetInventory("FistPlayerBlock2",0); A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerSpeedFactor",0); A_SetInventory("FistPlayerSpeedFactor2",0); A_SetInventory("FistPlayerSpeedFactor3",0);
		if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 4) { A_SetInventory("FistPlayerBlock3",1); A_SetInventory("FistPlayerSpeedFactor3",1); }
		else if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 2) { A_SetInventory("FistPlayerBlock2",1); A_SetInventory("FistPlayerSpeedFactor2",1); }
		else { A_SetInventory("FistPlayerBlock",1); A_SetInventory("FistPlayerSpeedFactor",1); }
		A_SetInventory("FistPlayerBlockExtra",0);
		if (random(1,16) <= (1 + (CallACS("MiscVarCheckDECORATE",perkcheck)/2))) { A_SetInventory("FistPlayerBlockExtra",1); } 
	}
	
	void A_PFistBlockOff()
	{
		A_SetInventory("FistPlayerBlock",0); A_SetInventory("FistPlayerBlock2",0); A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerSpeedFactor",0); A_SetInventory("FistPlayerSpeedFactor2",0); A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockItem",0);
		bREFLECTIVE = 0;
		bSHIELDREFLECT = 0;
	}
	
	void A_KickBonusOff()
	{
		A_SetInventory("KickCritBonus1",0);
		A_SetInventory("KickCritBonus2",0);
		A_SetInventory("KickAttackDEFLvl1",0);
		A_SetInventory("KickAttackDEFLvl2",0);
		A_SetInventory("MartArtsMaster1",0);
		A_SetInventory("MartArtsMaster2",0);
		A_SetInventory("UsingMeleeAttack",0);
	}
	
	void A_SceptreShieldOff()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
	}
	
	void A_SceptreShieldOn(int type = 1)
	{
		if (type < 1) type = 1; 
		if (type > 3) type = 3; 

		int SceptreExpMultiplier = dvds_sceptreexpmultiplier;
		int piecethreshold = 100;
		int ExpPiecesToAdd = type * random(50,75);
		ExpPiecesToAdd = ExpPiecesToAdd * SceptreExpMultiplier / 100;
		if (ExpPiecesToAdd <= 0) ExpPiecesToAdd = 1;

		CallACS("MiscVarSetDECORATE",198,ExpPiecesToAdd,1);
		while (CallACS("MiscVarCheckDECORATE",198) >= piecethreshold) // if (MiscellaneousVars[198] > 3)
		{
			CallACS("MiscVarSetDECORATE",198,piecethreshold,2); 
			CallACS("MiscVarSetDECORATE",203,1,1);
		}
		while (CallACS("MiscVarCheckDECORATE",203) > 15) // if (MiscellaneousVars[203] > 15)
		{
			CallACS("MiscVarSetDECORATE",203,-16,1); 
			CallACS("OtherVarSetDECORATE",10,1,1);
		}
		string shldpiece;
		if (type == 1) 
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,1); 
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
		}
		if (type == 2) 
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,1); 
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
		}
		if (type == 3) 
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,1);
		}
	}
	
	// Spread Aura Function [Projectiles]
	void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Projectiles w/ AOE]
	void A_SpreadAuraFireProjectileAoE (Class<Actor> missiletype, Class<Actor> missiletypeaoe, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletypeaoe,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Melee Punch]
	void A_SpreadAuraCustomPunch (int damage, bool norandom = 0, int flags = 0, string pufftype = "", float range = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = "", sound misssound = "") 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
		}
	}

	// Spread Aura Function [Melee Chainsaw]
	void A_SpreadAuraSaw (string fullsound, string hitsound = "", int damage = 0, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 0.0, float spread_xy = 0.0, float spread_z = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "")
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
		}
	}

	// Spread Aura Function [Hitscan]
	void A_SpreadAuraFireBullets (double spread_horz, double spread_vert, int numbullets, int damage, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 8192, string missile = "", float spawnheight = 0.0, float spawnofs_xy = 0.0, int ammouseamount = 0, string ammousetype = "")
	{
		int user_pelletsfired;
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
		}
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Railgun]
	void A_SpreadAuraRailAttack (int damage, int spawnofs_xy = 0, int ammouseamount = 0, string ammousetype = "", color ringcolor = 0, color corecolor = 0, int flags = 0, int maxdiff = 0, string pufftype = "", float spread_xy = 0.0, float spread_z = 0.0, int range = 8192, int duration = 35, float sparsity = 1.0, float driftspeed = 1.0, string spawnclass = "", float spawnofs_z = 0.0, int spiraloffset = 270, int limit = 0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
		}
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}
	
	// Used to Create Multiple "Shields" for Punches/Melee when Spreader Aura is active
	void A_MeleeShieldPiece(string attackname = "", int spawnheight = 32, int spawndistance = 0)
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SetAngle(angle-spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SetAngle(angle-spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_SpawnItemEx(attackname, cos(-pitch) * CallACS("SetShieldPieceDist",spawndistance), 0, CallACS("SetShieldPieceDist",spawnheight) + (sin(-pitch) * CallACS("SetShieldPieceDist",spawndistance)), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
	}
	
	// Used for Hellcore weapons to allow them to shoot Crisis attacks when the player's health is low. :V
	void A_HellCoreCrisisCheck (void)
	{
		if (dvds_monstercrisisattacks)
		{
			A_SetInventory("PlayerCanUseCrisisAttacks",0,AAPTR_PLAYER1); 
			if (CountInv("CriticalHealth",AAPTR_PLAYER1) > 0) 
			{
				A_SetInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1);
				//Console.Printf("HellcoreCrisis: 1");
			}
			else 
			{
				if (CountInv("LowHealth",AAPTR_PLAYER1) > 0 && random(1,4) == 4) 
				{
					A_SetInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1); 
					//Console.Printf("HellcoreCrisis: 1");
				}
				else
				{
					//Console.Printf("HellcoreCrisis: 0");
				}
			}
		}
		else
		{
			A_SetInventory("PlayerCanUseCrisisAttacks",0,AAPTR_PLAYER1); 
			//Console.Printf("HellcoreCrisis: 0");
		}
	}

	void A_PlayCrisisAtkSound ()
	{
		A_PlaySound("crisisattack",6);
		A_PlaySound("crisisattack2",7);
	}
	
	// Allows the player to hold an arrow in the Diaris Longbow or unprime it to avoid wasting ammo.
	// Allows you to hold back the sceptre if holding down the primary fire to time a swing. :V
	void A_HoldInWeapon(int type = 0)
	{
		int buttons;

		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS); 
			if (buttons & BT_ALTATTACK) A_SetInventory("MiscResult",1); // SetResultValue(1);
			else if (buttons & BT_ATTACK) A_SetInventory("MiscResult",2); // SetResultValue(2);
			else A_SetInventory("MiscResult",0); // SetResultValue(0);
		}
	}

	// Allows the player to hold an arrow in the Diaris Longbow or unprime it to avoid wasting ammo.
	// Allows you to hold back the sceptre if holding down the primary fire to time a swing. :V
	void A_HoldInWeapon2(int type = 0)
	{
		int buttons;

		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS); 
			if (buttons & BT_ALTATTACK) A_SetInventory("MiscResult",1); // SetResultValue(1);
			else if (buttons & BT_ATTACK) A_SetInventory("MiscResult",2); // SetResultValue(2);
			else A_SetInventory("MiscResult",0); // SetResultValue(0);
		}
	}

	void A_FlameCount(int type = 0, int value = 0)
	{
		string nn;
		int AmmoUsed = 1;
		let weapon = player.ReadyWeapon;
		nn = "DualPhoenixRodNew";
		If (weapon is nn) AmmoUsed = 2;
		int FlameCount = CountInv("FlameCount", AAPTR_PLAYER1);
		If (weapon is nn) FlameCount = CountInv("DualFlameCount", AAPTR_PLAYER1);

		if (type == 0) 
		{
			if (FlameCount <= 0)
			{
				if (CountInv("RandomInfiniteAmmo",AAPTR_PLAYER1) > 0)
				{
					FlameCount = value; // Set
				}
				else
				{
					if (CountInv("PhoenixRodAmmo",AAPTR_PLAYER1) >= AmmoUsed) 
					{
						A_TakeInventory("PhoenixRodAmmo",AmmoUsed,TIF_NOTAKEINFINITE,AAPTR_PLAYER1);
						FlameCount = value; // Set
					}
					else
					{
						if (player != null)
						{
							AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
							if (flamethrower != null)
							{
								player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
								player.refire = 0;
								A_StopSound (CHAN_WEAPON);
								If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount, AAPTR_PLAYER1);
								else A_SetInventory("FlameCount", FlameCount, AAPTR_PLAYER1);
								return;
							}
						}
					}
				}
			}
		}
		if (type == 1) FlameCount += value; // Add/Sub
		if (type == 2 && FlameCount <= 0)
		{
			if (dvds_floraphoenixrodflamecounttype)
			{
				if (CountInv("RandomInfiniteAmmo",AAPTR_PLAYER1) > 0)
				{
					FlameCount = value; // Set
				}
				else
				{
					if (CountInv("PhoenixRodAmmo",AAPTR_PLAYER1) >= AmmoUsed) 
					{
						A_TakeInventory("PhoenixRodAmmo",AmmoUsed,TIF_NOTAKEINFINITE,AAPTR_PLAYER1);
						FlameCount = value; // Set
					}
					else
					{
						if (player != null)
						{
							AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
							if (flamethrower != null)
							{
								player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
								player.refire = 0;
								A_StopSound (CHAN_WEAPON);
								If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount, AAPTR_PLAYER1);
								else A_SetInventory("FlameCount", FlameCount, AAPTR_PLAYER1);
								return;
							}
						}
					}
				}
			}
			else
			{
				if (player != null)
				{
					AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
					if (flamethrower != null)
					{
						player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
						player.refire = 0;
						A_StopSound (CHAN_WEAPON);
						If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount, AAPTR_PLAYER1);
						else A_SetInventory("FlameCount", FlameCount, AAPTR_PLAYER1);
						return;
					}
				}
			}
		}
		
		If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount, AAPTR_PLAYER1);
		else A_SetInventory("FlameCount", FlameCount, AAPTR_PLAYER1);
		//Console.Printf("FlameCount: %d, type: %d, value: %d", FlameCount, type, value);
	}
	
	//Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	void A_SceptreTwirlFrameCheck(int FrameNo = 0)
	{
		int SceptreSpinFrameCount = CountInv("SceptreSpinFrameCount", AAPTR_PLAYER1);
		int ManaDrainTimer;
		if (FrameNo == 0) // 0 resets the timer to 0
		{ 
			SceptreSpinFrameCount = 0; 
		}
		else // FrameNo's value is the speed of the twirling
		{
			if (FrameNo > 16) FrameNo = 16;
			if (FrameNo < 1) FrameNo = 1;
			SceptreSpinFrameCount += FrameNo;
		
			while (SceptreSpinFrameCount < 1) { SceptreSpinFrameCount += 32; } // Prevents Timer Underflow
			while (SceptreSpinFrameCount > 32) { SceptreSpinFrameCount -= 32; } // Prevents Timer Overflow
		}
		A_SetInventory("SceptreSpinFrameCount", SceptreSpinFrameCount, AAPTR_PLAYER1);
		//Console.Printf("SceptreSpinFrameCount: %d, FrameNo: %d", SceptreSpinFrameCount, FrameNo);
	}
	
	void A_SceptreTwirlVisualFrames(int VisualSet = 0)
	{
		int FrameCount = CountInv("SceptreSpinFrameCount", AAPTR_PLAYER1);
		string vispart;
		if (VisualSet == 0)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl1",CHAN_WEAPON); vispart = "SceptrePartVisual5"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 1)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl2",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 2)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl3",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
	}
	
	// Check if to perform Sceptre's downswing alternate attack while falling or it's spinning alternate while grounded.
	void A_CheckSceptreAltFire()
	{
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) return;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int result;
		
		if (vel.z < 0)
		{
			if (buttons & BT_JUMP && PlayerLevel >= 13 && SceptreActualLevel >= 4)
			{
				result = 1;
			}
			else
			{
				if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
				{
					result = 2;
				}
				else
				{
					result = 0;
				}
			}
		}
		else
		{
			if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
			{
				result = 2;
			}
			else
			{
				result = 0;
			}
		}
		A_SetInventory("SceptreAltFireType",result,AAPTR_PLAYER1,true);
	}
	
	void A_CheckAChristinaCheck()
	{
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) return;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int result = 0;
		
		if (buttons & BT_RELOAD)
		{
			result = 3;
		}
		
		if (buttons & BT_ZOOM) // A. Christina weapons fire mode
		{
			if (vel.z < 0) // LGA Dodge can activate when Zoom key is pressed and on the ground
			{
				result = 2; // LGA Dodge can be used
			}
			else
			{
				result = 1; // Bouncing Beams and Heel Kick are only allowed when airborne
			}
		}
		A_SetInventory("AChristinaAltFireType",result,AAPTR_PLAYER1,true);
	}
	
	void A_GauntletsCheckCharacter()
	{
		string nm, nn, no, np;
		int CharacterClass = CallACS("CheckCharacterClass");
		if (CountInv("SauronGauntletsItem",AAPTR_PLAYER1) > 0) Thing_Remove(0); else A_SetInventory("CharacterClassCheck",CharacterClass);
	}
}

// To allow class gathering for weapons that allow Quick-Kicking :V
class QuickMeleeWeaponZSC : AetheriusBaseWeaponZSC
{
}

class CWeapStaffDVDS : AetheriusBaseWeaponZSC
{
	Default
	{
		Weapon.SelectionOrder 1600;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 25;
		Weapon.KickBack 150;
		Weapon.YAdjust 10;
		Weapon.AmmoType1 "Mana1";
		Inventory.PickupMessage "$TXT_WEAPON_C2";
		Obituary "$OB_MPCWEAPSTAFFM";
		Tag "$TAG_CWEAPSTAFF";
	}

	States
	{
		Spawn:
			WCSS A -1;
			Stop;
		Select:
			CSSF C 1 A_DVDSRaise(6);
			Loop;
		Deselect:
			CSSF B 3;
			CSSF C 4;
			CSSF C 1 A_DVDSLower(6);
			Wait;
		Ready:
			CSSF C 4;
			CSSF B 3 A_CStaffInitBlink;
			CSSF AAAAAAA 1 A_WeaponReady;
			CSSF A 1 A_CStaffCheckBlink;
			Goto Ready + 2;
		Fire:
			CSSF A 1 Offset (0, 45) A_CStaffCheck;
			CSSF J 1 Offset (0, 50) A_CStaffAttack;
			CSSF J 2 Offset (0, 50);
			CSSF J 2 Offset (0, 45);
			CSSF A 2 Offset (0, 40);
			CSSF A 2 Offset (0, 36);
			Goto Ready + 2;
		Blink:
			CSSF BBBCCCCCBBB 1 A_WeaponReady;
			Goto Ready + 2;
		Drain:
			CSSF K 10 Offset (0, 36);
			Goto Ready + 2;
	}
	
	//============================================================================
	//
	// A_CStaffCheck
	//
	//============================================================================

	action void A_CStaffCheck()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}
		Weapon weapon = player.ReadyWeapon;

		int damage = 20 + (random[StaffCheck]() & 15);
		int max = player.mo.GetMaxHealth();
		for (int i = 0; i < 3; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 1.5 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 1.5 * DEFMELEERANGE, slope, damage, 'Melee', "CStaffPuff", false, t);
					if (t.linetarget != null)
					{
						angle = t.angleFromSource;
						if (((t.linetarget.player && (!t.linetarget.IsTeammate(self) || level.teamdamage != 0)) || t.linetarget.bIsMonster)
							&& (!t.linetarget.bDormant && !t.linetarget.bInvulnerable))
						{
							int newLife = player.health + (damage >> 3);
							newLife = newLife > max ? max : newLife;
							if (newLife > player.health)
							{
								health = player.health = newLife;
							}
							if (weapon != null)
							{
								State newstate = weapon.FindState("Drain");
								if (newstate != null) player.SetPsprite(PSP_WEAPON, newstate);
							}
						}
						if (weapon != null)
						{
							weapon.DepleteAmmo(weapon.bAltFire, false);
						}
					}
					return;
				}
			}
		}
	}

	//============================================================================
	//
	// A_CStaffAttack
	//
	//============================================================================

	action void A_CStaffAttack()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		Actor mo = SpawnPlayerMissile ("CStaffMissile", angle - 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 32;
		}
		mo = SpawnPlayerMissile ("CStaffMissile", angle + 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 0;
		}
		A_PlaySound ("ClericCStaffFire", CHAN_WEAPON);
	}

	//============================================================================
	//
	// A_CStaffInitBlink
	//
	//============================================================================

	action void A_CStaffInitBlink()
	{
		weaponspecial = (random[CStaffBlink]() >> 1) + 20;
	}

	//============================================================================
	//
	// A_CStaffCheckBlink
	//
	//============================================================================

	action void A_CStaffCheckBlink()
	{
		if (player && player.ReadyWeapon)
		{
			if (!--weaponspecial)
			{
				player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState ("Blink"));
				weaponspecial = (random[CStaffBlink]() + 50) >> 2;
			}
			else 
			{
				A_WeaponReady();
			}
		}
	}
}



