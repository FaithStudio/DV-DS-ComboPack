// Base monster class [for later use, general monster use outside of game]
class AetheriusMonsterZSC : AetheriusBaseZSC
{
	// Gargoyle
	bool extremecrash;
	// Afrit
	const FIREDEMON_ATTACK_RANGE = 64*8.;
	int fdstrafecount;
	// Bishop
	int missilecount;
	int bobstate;
	int stealthstate, stealthtimer;
	int IsACrisisBulletAttack;
	int IsACrisisMeleeAttack;
	int IsACrisisComboAttack;
	int timesrevivedamonster;
	int timesrevivedpervile;
	int timesrevivedperdiabloist;
	int timesrevivedperbanshee;
	int hitsoundtimer;

	// General
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	int painchancefist, painchancekick, painchancegauntlets;
	int bossdeathactivate;
	int InitRenderType;
	double InitAlpha;
	int levelbehavior;
	int bullet_tracer_mode;
	int gfxeffectlevel;
	int AggressionLevelThreshold1, AggressionLevelThreshold2, AggressionLevelThreshold3;
	int neverbleeds, menufreezecheck;
	int LegendaryChance;
	int deathcounter;
	int fadecounter;
	int cannotres;
	double gravitypulsetimer;
	
	property AggressionLevelThreshold: AggressionLevelThreshold1, AggressionLevelThreshold2, AggressionLevelThreshold3;

	default
	{
    AetheriusMonsterZSC.AggressionLevelThreshold 60, 120, 180;
		Painchance "Dashing", 0;
	}

	double oldVelZ;
	int actortimer;
	int user_tookcrit;
	int LDLRerollTimer;
	int rerolldelay;
	int NORADDMG;
	
	
	/**
	* 32 random bits, generated separately for each actor. Each actor has its own unique random bits, but the random bits don't change over the actor's lifetime.
	*
	* The bottom 4 bits are used to schedule “once every n tics” computations so that all actors don't do it on the same tic, but it still happens exactly once every n tics.
	*/
	int ActorRandomBits;
	int glitterheight, glitterheight2, glitterwidth;
	
	private class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
	Actor lastattacker;
	Actor lastattackeratk;
	Actor playeriskiller;
	
	// IMPORTANT STUFF TO DO WHEN CanResurrect BECOMES AVAILABLE :V
	override bool CanResurrect(Actor other, bool passive)
	{
		int maxviletimesrevived = dvds_maxresperarchvile;
		if (maxviletimesrevived <= 0) maxviletimesrevived = 65536;
		int maxtimesrevivedpervile = dvds_maxarchrespermonster;
		if (maxtimesrevivedpervile <= 0) maxtimesrevivedpervile = 65536;

		int maxdiabtimesrevived = dvds_maxresperdiabloist;
		if (maxdiabtimesrevived <= 0) maxdiabtimesrevived = 65536;
		int maxtimesrevivedperdiab = dvds_maxdiabrespermonster;
		if (maxtimesrevivedperdiab <= 0) maxtimesrevivedperdiab = 65536;

		int maxbanshtimesrevived = dvds_maxresperbanshee;
		if (maxbanshtimesrevived <= 0) maxbanshtimesrevived = 65536;
		int maxtimesrevivedperbansh = dvds_maxbansrespermonster;
		if (maxtimesrevivedperbansh <= 0) maxtimesrevivedperbansh = 65536;

		bool ResSucceed;
		AetheriusMonsterZSC RevivedMonster;
		if (!passive) // Monster is the one REVIVING...
		{
			RevivedMonster = AetheriusMonsterZSC(other);
			if (GetClassName() == "DSArchvile")
			{
				if (timesrevivedamonster < maxviletimesrevived)
				{
					if (RevivedMonster.timesrevivedpervile < maxtimesrevivedpervile)
					{
						if (other.GetClassName() == "DSArchvile") { if (dvds_vilesressurectviles) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Diabloist") { if (dvds_vilesressurectdiabs) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "DSCyberdemon") { if (dvds_vilesressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Annihilator") { if (dvds_vilesressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "DSSpiderMastermind") { if (dvds_vilesressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Demolisher") { if (dvds_vilesressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
						else { ResSucceed = true; }
						if (ResSucceed > 0)
						{
							timesrevivedamonster++;
							if (RevivedMonster) 
							{
								RevivedMonster.timesrevivedpervile++;
								if (dvdsdebug_actorresurrectdisplays) Console.Printf("\cxRevivedMonster.timesrevivedpervile: %d\c-", RevivedMonster.timesrevivedpervile);
							}
						}
					}
					else
					{
						ResSucceed = false;
					}
				}
				else
				{
					ResSucceed = false;
				}
			}
			else
			if (GetClassName() == "Diabloist")
			{
				if (timesrevivedamonster < maxdiabtimesrevived)
				{
					if (RevivedMonster.timesrevivedperdiabloist < maxtimesrevivedperdiab)
					{
						if (other.GetClassName() == "DSArchvile") { if (dvds_diabsressurectviles) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Diabloist") { if (dvds_diabsressurectdiabs) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "DSCyberdemon") { if (dvds_diabsressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Annihilator") { if (dvds_diabsressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "DSSpiderMastermind") { if (dvds_diabsressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "Demolisher") { if (dvds_diabsressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
						else { ResSucceed = true; }
						if (ResSucceed > 0)
						{
							timesrevivedamonster++;
							if (RevivedMonster) 
							{
								RevivedMonster.timesrevivedperdiabloist++;
								if (dvdsdebug_actorresurrectdisplays) Console.Printf("\cxRevivedMonster.timesrevivedperdiabloist: %d\c-", RevivedMonster.timesrevivedperdiabloist);
							}
						}
					}
					else
					{
						ResSucceed = false;
					}
				}
				else
				{
					ResSucceed = false;
				}
			}
			else
			if (GetClassName() == "Banshee")
			{
				if (timesrevivedamonster < maxbanshtimesrevived)
				{
					if (RevivedMonster.timesrevivedperbanshee < maxtimesrevivedperbansh)
					{
						if (other.GetClassName() == "Banshee") { if (dvds_banshsressurectbanshs) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "IronlichNew") { if (dvds_banshsressurectliches) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "IceLich") { if (dvds_banshsressurectliches) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "GoldLich") { if (dvds_banshsressurectliches) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "BloodLich") { if (dvds_banshsressurectliches) { ResSucceed = true; } else { ResSucceed = false; } }
						else if (other.GetClassName() == "MaulotaurNew") { if (dvds_banshsressurecttaurs) { ResSucceed = true; } else { ResSucceed = false; } }
						else { ResSucceed = true; }
						if (ResSucceed > 0)
						{
							timesrevivedamonster++;
							if (RevivedMonster) 
							{
								RevivedMonster.timesrevivedperbanshee++;
								if (dvdsdebug_actorresurrectdisplays) Console.Printf("\cxRevivedMonster.timesrevivedperbanshee: %d\c-", RevivedMonster.timesrevivedperbanshee);
							}
						}
					}
					else
					{
						ResSucceed = false;
					}
				}
				else
				{
					ResSucceed = false;
				}
			}
			else
			{
				ResSucceed = true;
			}
			if (dvdsdebug_actorresurrectdisplays) Console.Printf("\cxResurrector\c-: \cx%s\c-, \cyResurrectee\c-: \cy%s\c- -- ResSucceed: %d", GetClassName(), other.GetClassName(), ResSucceed);
		}
		else // Monster is the one BEING REVIVED...
		{
			if (cannotres) ResSucceed = false; else ResSucceed = true;
		}

		return ResSucceed;
	}
	
	override void PostBeginPlay()
	{
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		/*
		STYLE_None (0)
		STYLE_Normal (1)
		STYLE_Fuzzy (2)
		STYLE_SoulTrans (3)
		STYLE_OptFuzzy (4)
		STYLE_Stencil (5)
		STYLE_Translucent (6)
		STYLE_Add (7)
		STYLE_Shaded (8)
		STYLE_TranslucentStencil (9)
		STYLE_Shadow (10)
		STYLE_Subtract (11)
		STYLE_AddStencil (12)
		STYLE_AddShaded (13)
		*/
		
		String nm = "LDLegendaryMonsterPickupEasy";
		LDLPreload = nm;

		nm = "LDLegendaryMonsterToken";
		LDLToken = nm;

		nm = "LDLegendaryMonsterTransformed";
		LDLCheck = nm;

		if (GetAge() < 1) // SO APPEARANTLY RELOADING HUB MAPS WILL RERUN PostBeginPlay() CODE, MEANING MONSTERS WITH STEALTH BECOME HARDER AND HARDER TO SEE UNLESS AN AGE CHECK IS RAN >__________>;
		{
			if (special == 0)
			{
				user_presetleveladd = Args[0];
				user_presetlevelrand1 = Args[1];
				user_presetlevelrand2 = Args[2];
			}

			InitRenderType = GetRenderStyle();
			InitAlpha = Alpha;
			if (!bSTEALTH)
			{
				if (InitRenderType == 0 && InitAlpha <= 0.000000001) 
				{ 
					InitAlpha = 1.0;
					InitRenderType = 1; 
					Alpha = 1.0;
					A_SetRenderStyle(1.0,1);
				}
			}
			StealthAlpha = Alpha;
			if (dvdsdebug_evolvestealthstuff) Console.Printf("InitRenderType: %d (InitAlpha: %8f) [Name: %s]", InitRenderType, InitAlpha, GetClassName());
			
			if (bNORADIUSDMG) NORADDMG = 1;
			if (bNOBLOOD) 
			{
				if (!bNOBLOODDECALS) bNOBLOODDECALS == 1;
				neverbleeds = 1;
			}
			if (bNOBLOODDECALS) 
			{
				if (!bNOBLOOD) bNOBLOOD == 1;
				neverbleeds = 1;
			}
		}

		if (self.health > 0 && CountInv("MonsterLevelCalcs") == 0) 
		{ 
			A_AetheriusStats(0); 
			if (self.health <= User_MaxHP) self.health = User_MaxHP;
			
			// LDL
			A_LegendaryCheck();
		}
		//Console.Printf("User_MaxHP: %d", User_MaxHP);

		ActorRandomBits = random();

		user_hyperlvl1 = 225;
		user_hyperlvl2 = 450;

		deathcounter = 0;
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick()
	{
		bullet_tracer_mode = dvds_monsterbulletstracers;
		levelbehavior = dvds_monsterlevelbehavior;
		gfxeffectlevel = dvds_gfxeffectlevel;
		
		if (self.health > 0 && CountInv("MonsterLevelCalcs") == 0) 
		{ 
			A_AetheriusStats(0); 
			if (self.health <= User_MaxHP) self.health = User_MaxHP;
			
			// LDL
			A_LegendaryCheck();
		}
		
		//******************
		//*"Stealth" Checks*
		//******************
		int stealthcheckinterval = dvds_rnd_stealth_refreshrate;
		if (stealthcheckinterval < 1) stealthcheckinterval = 1;
		if (stealthcheckinterval > 35) stealthcheckinterval = 35;
		if (user_isstealth && (gametic % stealthcheckinterval) == 0)
		{
			if (InStateSequence(curstate,ResolveState("See")) || 
				  InStateSequence(curstate,ResolveState("Spawn")) || 
				  InStateSequence(curstate,ResolveState("Idle")) || 
				  InStateSequence(curstate,ResolveState("Pain.Charm")) || 
				  InStateSequence(curstate,ResolveState("Pain.Heal1")) || 
				  InStateSequence(curstate,ResolveState("Pain.Heal2")) || 
				  InStateSequence(curstate,ResolveState("Pain.Heal3")) || 
				  InStateSequence(curstate,ResolveState("Raise")) ) 
			{
				A_RefreshStealthInfo(0);
				if (dvdsdebug_evolvestealthstuff) Console.Printf("gametic: %d (stealth type: 0)", gametic);
			}

			if (InStateSequence(curstate,ResolveState("Melee")) || 
				  InStateSequence(curstate,ResolveState("Missile")) ||
				  InStateSequence(curstate,ResolveState("Heal")) ||
				  InStateSequence(curstate,ResolveState("Pain")) || 
				  InStateSequence(curstate,ResolveState("Pain.DoomSpell")) || 
				  InStateSequence(curstate,ResolveState("Pain.Magic")) || 
				  InStateSequence(curstate,ResolveState("Pain.Holy")) || 
				  InStateSequence(curstate,ResolveState("Pain.Fire")) || 
				  InStateSequence(curstate,ResolveState("Pain.Ice")) || 
				  InStateSequence(curstate,ResolveState("Pain.Thunder")) || 
				  InStateSequence(curstate,ResolveState("Pain.Electric")) || 
				  InStateSequence(curstate,ResolveState("Pain.Lightning")) || 
				  InStateSequence(curstate,ResolveState("Pain.Shock")) || 
				  InStateSequence(curstate,ResolveState("Pain.Sceptre")) || 
				  InStateSequence(curstate,ResolveState("Pain.Fist")) || 
				  InStateSequence(curstate,ResolveState("Pain.Kick")) ||
				  InStateSequence(curstate,ResolveState("Pain.Gauntlets")) ) 
			{
				A_RefreshStealthInfo(1);
				if (dvdsdebug_evolvestealthstuff) Console.Printf("gametic: %d (stealth type: 1)", gametic);
			}

			if (InStateSequence(curstate,ResolveState("Death")) || 
				  InStateSequence(curstate,ResolveState("XDeath")) || 
				  InStateSequence(curstate,ResolveState("Crash")) || 
				  InStateSequence(curstate,ResolveState("Burn")) || 
				  InStateSequence(curstate,ResolveState("Disintergrate")) || 
				  InStateSequence(curstate,ResolveState("Ice")) ) 
			{
				A_RefreshStealthInfo(2);
				if (dvdsdebug_evolvestealthstuff) Console.Printf("gametic: %d (stealth type: 2)", gametic);
			}
		}

		//*********************************************************
		//*Ally/Charm Sparkle Code [for easily identifying allies]*
		//*********************************************************
		if (((gametic + (ActorRandomBits & 15)) & 15) == 1)
		{
			if (self.bFRIENDLY > 0 && self.health > 0 && !isFrozen())
			{
				let glitterheight = self.height / 2;
				let glitterheight2 = self.height / 4;
				let glitterwidth = self.radius * 5 / 4;
				
				for (int i = 1; i < 3; i++)
				{
					A_SpawnItemEx("FyggGlitter", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
					if (user_charmed <= 0 && random(1,15) == 1) A_SpawnItemEx("FyggGlitter", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
					if (user_charmed <= 0 && random(1,15) == 1) A_SpawnItemEx("FyggGlitter", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
				}
				if (user_charmed > 0)
				{
					if (CountInv("CharmMonsterAttack") <= 0) A_SetInventory("CharmMonsterAttack",1);
					if (CountInv("CharmMonsterDefense") <= 0) A_SetInventory("CharmMonsterDefense",1);
					for (int i = 1; i < 3; i++)
					{
						A_SpawnItemEx("ArmorGlitter2", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
						if (random(1,15) == 1) A_SpawnItemEx("ArmorGlitter", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
						if (random(1,15) == 1) A_SpawnItemEx("ArmorGlitter", random[TeleGlitter](-glitterwidth,glitterwidth), random[TeleGlitter](-glitterwidth,glitterwidth), glitterheight+random(-glitterheight2,glitterheight2)+random[TeleGlitter](0,31)-16,frandom(-0.75,0.75),frandom(-0.75,0.75),frandom(-0.75,0.75));
					}
				}
			}

			if (CountInv(LDLToken) > 0) user_willbecomelegendary = 1;

			// Undoes LDLite Tokens if the var is set to !0
			if (user_nolegendarytrans) SetInventory(LDLToken, 0);

			// Unsets BUDDHA from a transformed legendary [in the rare case a monster doesn't get it removed by the initial transformation]
			if (CountInv(LDLCheck)) bBuddha = false;
		}

		//********************************************************
		//*Sets Fading for monster corpses if option is turned on*
		//********************************************************
		if (health <= 0) 
		{
			if (dvds_deadwillfade)
			{
				if (deathcounter >= (dvds_deadbeforefadetimer*35))
				{
					fadecounter++;
					cannotres == 1;
					A_FadeOut((1.0/random(28,32)),FTF_REMOVE);
					if (fadecounter > 32) Destroy();
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- alpha: \cx%8f\c- - fadecounter: %d / 32", GetClassName(), alpha, fadecounter);
				}
				else
				{
					deathcounter++;
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- deathcounter: \cx%d\c-", GetClassName(), deathcounter);
				}
			}
		}

		if (health > 0 && hitsoundtimer > 0) hitsoundtimer--;
		/*
		if (health > 0 && !CountInv(LDLToken))
		{
			LDLRerollTimer++;
			if (LDLRerollTimer >= rerolldelay)
			{
				cvar LDLReroll = cvar.findcvar("LD_Reroll");
				if (LD_Reroll > 0) A_LegendaryCheck();
			}
			if (LD_legendaryrerolldebug) Console.Printf("\ca%s\c- - LDLRerollTimer: %d / %d", GetClassName(), LDLRerollTimer, rerolldelay);
		}
		*/

		//This space for rent.
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}

	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		string nm;
		if (user_isstealth)
		{
			A_SetRenderStyle(InitAlpha,InitRenderType);
			Alpha = InitAlpha;
		}

		if (self.health <= 0 && CountInv("MonsterLevelCalcs") == 1 && !bICECORPSE) 
		{ 
			nm = "LDLegendaryMonsterToken";
			LDLToken = nm;
			SetInventory(LDLToken, 0);

			A_AetheriusStats(1); 
		}

		if (CountInv("CharmMonsterAttack") > 0) A_SetInventory("CharmMonsterAttack",0);
		if (CountInv("CharmMonsterDefense") > 0) A_SetInventory("CharmMonsterDefense",0);
		if (user_charmed) user_charmed = 0;
		
		string Actorname = GetClassName();
		int ActorKillNumber = 8000;
		//*******************************************
		//* Increase Kill Counters [for Codex, etc] *
		//*******************************************
		// Doom & Doom 2
		ActorKillNumber++; if (ActorName == "DSZombieman") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSShotgunGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "PlasmaGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "RepeaterZombie") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "KarasawaGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "RocketLauncherGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSShotgunGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "SuperShotgunGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "FemaleRailZombie") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSChaingunGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Minigunner") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "BFGGuy") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "SuicideBomber") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSDoomImp") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DarkImp") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "STDarkImp") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "VoidDarkImp") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "NetherDarkImp") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSSpectre") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "BloodDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "BloodSpectre") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "ChaingunDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "ChaingunSpectre") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSWolfensteinSS") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSLostSoul") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "ForgottenOne") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSPainElemental") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSCacoDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Cacolantern") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Abaddon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSHellKnight") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSBaronofHell") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HellWarrior") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Belphegor") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "BruiserDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "ArchonofHell") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "PyroDemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSRevenant") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DeathIncarnate") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSFatso") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Hectebus") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Daedabus") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSArachnotron") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSRailArachnotron") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "ArachnotronMK2") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "FusionArachnotron") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSArchvile") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Diabloist") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSSpiderMastermind") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Demolisher") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSCyberdemon") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Annihilator") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSScriptedMarine") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HadesSphere") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HSOverlord") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "WeakenedFlyingBalrog") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "FlyingBalrog") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "CyBruiser") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HellCleric") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HadesElemental") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "HadesOverlord") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "Hierophant") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		ActorKillNumber++; if (Actorname == "DSBossBrain") CallACS("MiscVarCheckDECORATE",ActorKillNumber,1,1);
		
		// Heretic, Hexen & Strife
		ActorKillNumber = 8100;
		
		
		
		// Happy Time Circus [both] 
		ActorKillNumber = 8200;
		
		
		
		//
		//This space for rent.
		Super.Die(source, inflictor, dmgflags);
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// Pass through players, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.GetSpecies() == "Players")
			{
				return false; 
				//A_Log("False - Friendly - Player"); 
			}

			// Pass through other actors, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.bFRIENDLY == 1)
			{
				return false; 
				//A_Log("False - Friendly - Other Friendly"); 
			}

			// Pass through charm shots if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.GetClassName() == "CharmShot") 
			{
				return false; 
				//A_Log("False - Friendly - Charm Shot"); 
			}

			if (bFRIENDLY == 1 && other.GetClassName() == "Heal1Shot")
			{
				if (self.health < self.User_MaxHP) { return true; } 
				else 
				{
					return false; 
					//A_Log("False - Heal1"); 
				}
			}
			if (bFRIENDLY == 1 && other.GetClassName() == "Heal2Shot")
			{
				if (self.health < self.User_MaxHP) { return true; } 
				else
				{
					return false; 
					//A_Log("False - Heal2"); 
				}
			}
			if (bFRIENDLY == 1 && other.GetClassName() == "Heal3Shot")
			{
				if (self.health < (self.User_MaxHP*2)) { return true; }
				else
				{
					return false; 
					//A_Log("False - Heal3"); 
				}
			}
		}
		// We don't really care about others making the check.
		return true;
	}
	
	// Sceptre EXP Increase [Monster/Actor-Side Specfic Code]
	void A_AddSceptreEXP_M (int SExPts = 1, int DivAmount = 1)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int ExpPiecesToAdd;
		double EXPBonus1;
		int BossEnemy;
		int DeftnessExpBase = dvds_deftnessexpbase;
		int SceptreExpMultiplier = dvds_sceptreexpmultiplier;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		string vict = GetClassName();
		double sceptbasemulti = 1.00;
		int higherlearning = CallACS("MiscVarCheckDECORATE",11001);
		
		if (ModType == 0 && dvds_noscexpgains != 0) return;
		
		//if (BossEnemy != 0) DivAmount *= 5;
		if (DivAmount <= 1) DivAmount = 1;
		
		if (CharacterClass == 2)
		{
			if (user_MaxHP > 0) SExPts = user_MaxHP; else SExPts = SpawnHealth();
			if (ModType == 0) SExPts *= 1.334; // Classic Doom 1/2 / Heretic / Hexen / Strife
			SExPts *= 16; // * 16 is because each full Sceptre EXP Point is 16 "fragments".
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 1 - Base): %d / 16", SExPts);
			SExPts = SExPts / 300;
			if (clearofmind >= 1) SExPts += 4;
			if (clearofmind >= 2) SExPts += 5;
			if (clearofmind >= 3) SExPts += 6;
			if (clearofmind >= 4) SExPts += 7;
			if (clearofmind >= 5) SExPts += 8;
			if (clearofmindex >= 1) SExPts += 15;
			if (clearofmindex >= 2) SExPts += 15;
			if (higherlearning == 1) SExPts += 15; // [115%]
			if (higherlearning >= 2) SExPts += 30; // [130%]
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 1b - Base 2): %d / 16", SExPts);

			// Check for if the monster calling the script is a boss or strong monster [to cut down on SExp Gains]
			if (vict == "Benellus1DS") DivAmount *= 16;
			if (vict == "Benellus2DS") DivAmount *= 16;
			if (vict == "Benellus3DS") DivAmount *= 16;
			if (vict == "DragonNew") DivAmount *= 16;
			if (vict == "HeresiarchNew") DivAmount *= 16;
			if (vict == "ClericBossNew") DivAmount *= 16;
			if (vict == "MageBossNew") DivAmount *= 16;
			if (vict == "FighterBossNew") DivAmount *= 16;
			if (vict == "DSparilMountedNew") DivAmount *= 12; // 12
			if (vict == "DSparilUnmountedNew") DivAmount *= 16;
			if (vict == "KoraxNew") DivAmount *= 16;
			if (vict == "Zakachi") DivAmount *= 16;
			if (vict == "AvatarNew") DivAmount *= 16; // 32
			if (vict == "ProgrammerNew") DivAmount *= 16;
			if (vict == "StrifeBishopNew") DivAmount *= 16;
			if (vict == "OracleNew") DivAmount *= 16;
			if (vict == "Macil1New") DivAmount *= 16;
			if (vict == "Macil2New") DivAmount *= 16;
			if (vict == "LoremasterNew") DivAmount *= 16;
			if (vict == "SourceGuardian") DivAmount *= 16;
			if (vict == "AlienSpectre1New") DivAmount *= 16; // 24
			if (vict == "AlienSpectre2New") DivAmount *= 16; // 24
			if (vict == "AlienSpectre3New") DivAmount *= 16; // 24
			if (vict == "AlienSpectre4New") DivAmount *= 16; // 24
			if (vict == "AlienSpectre5New") DivAmount *= 16; // 24
			if (vict == "AlienSpectre1Model") DivAmount *= 16; // 24
			if (vict == "AlienSpectre2Model") DivAmount *= 16; // 24
			if (vict == "AlienSpectre3Model") DivAmount *= 16; // 24
			if (vict == "AlienSpectre4Model") DivAmount *= 16; // 24
			if (vict == "AlienSpectre5Model") DivAmount *= 16; // 24
			if (vict == "EntityBossNew") DivAmount *= 24; // 32
			if (vict == "EntitySecondNew") DivAmount *= 24; // 32
			if (vict == "EntityAscended") DivAmount *= 24; // 32
			if (vict == "DSMotherDemon64") DivAmount *= 16;
			if (vict == "ThamuzNew") DivAmount *= 24; // 32
			if (vict == "TchernobogNew") DivAmount *= 24; // 32
			if (vict == "PennywiseBoss") DivAmount *= 32; // 32
			if (vict == "TheSource") DivAmount *= 32; // 128
			if (vict == "Magmantis") DivAmount *= 64; // 32
			if (vict == "AdolfHitlerDS") DivAmount *= 64; // 32
			if (vict == "Sauravatar") DivAmount *= 96; // 128
		
			if (DivAmount >= 1) SExPts /= DivAmount;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 2a - Boss Check [%s]): %d / 16, DivAmount: %d", vict, SExPts, DivAmount);
			sceptbasemulti = frandompick(0.67,0.67,0.67,0.67,1.00,1.00,1.34);
			SExPts += (16 + (SceptreActualLevel * sceptbasemulti));
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 2b - Post Boss Check [%3f]): %d / 16", sceptbasemulti, SExPts);
		
			int Randomizer = random(1,256);
			if (Randomizer == 1) SExPts *= 8;
			if (Randomizer == 2) SExPts *= 4;
			if (Randomizer == 3) SExPts *= 4;
			if (Randomizer == 4) SExPts *= 2;
			if (Randomizer == 5) SExPts *= 2;
			if (Randomizer == 6) SExPts *= 2;
			if (Randomizer == 7) SExPts *= 2;
		
			// Higher Levels = slightly less chances to get all EXP
			if (SceptreActualLevel > 15 && Randomizer == 241) SExPts /= 2;
			if (SceptreActualLevel > 14 && Randomizer == 242) SExPts /= 2;
			if (SceptreActualLevel > 13 && Randomizer == 243) SExPts /= 2;
			if (SceptreActualLevel > 12 && Randomizer == 244) SExPts /= 2;
			if (SceptreActualLevel > 11 && Randomizer == 245) SExPts /= 2;
			if (SceptreActualLevel > 10 && Randomizer == 246) SExPts /= 2;
			if (SceptreActualLevel > 9 && Randomizer == 247) SExPts /= 2;
			if (SceptreActualLevel > 8 && Randomizer == 248) SExPts /= 2;
			if (SceptreActualLevel > 7 && Randomizer == 249) SExPts /= 2;
			if (SceptreActualLevel > 6 && Randomizer == 250) SExPts /= 2;
			if (SceptreActualLevel > 5 && Randomizer == 251) SExPts /= 2;
			if (SceptreActualLevel > 4 && Randomizer == 252) SExPts /= 2;
			if (SceptreActualLevel > 3 && Randomizer == 253) SExPts /= 2;
			if (SceptreActualLevel > 2 && Randomizer == 254) SExPts /= 2;
			if (SceptreActualLevel > 1 && Randomizer == 255) SExPts /= 2;
			if (SceptreActualLevel > 0 && Randomizer == 256) SExPts /= 2;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 3 - Randomizer Check [%d]): %d / 16", Randomizer, SExPts);
		
			EXPBonus1 = 1.000;
			// Safe Tea Shoes [+2.5/5% EXP Bonus]
			if (CountInv("SafeTeaShoes", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			// Pearly Corset [+20/30% EXP Bonus]
			if (CountInv("PearlyCorset", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.300; // 5% Chance of +30% EXP Bonus
				else EXPBonus1 += 0.200; // Else +20% EXP Bonus
			}
			// Dove's [+2.5/5% EXP Bonus]
			if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0)
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			SExPts *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 4 - Armor Check [%8f]): %d / 16", EXPBonus1, SExPts);
		
			EXPBonus1 = 1.000;
			// Divine Avatar {+25% EXP Bonus]
			if (CallACS("GetBuffTimer",7) > 0)
			{
				if (random(1,100) <= 20) EXPBonus1 += 0.500; // 20% Chance of +50% EXP Bonus
				else EXPBonus1 += 0.250; // 20% Else +25% EXP Bonus
			}
			SExPts *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 5 - Buff Check [%3f]): %d / 16", EXPBonus1, SExPts);
			SExPts = SExPts * (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)) / DeftnessExpBase;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 6 - Deftness Check): %d / 16 [DeftExpBase: %d / %d]", SExPts, (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)), DeftnessExpBase);
			SExPts = SExPts * SceptreExpMultiplier / 100;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 7 - Option Checker [%d%]): %d / 16", SceptreExpMultiplier, SExPts);
		
			// "Cleared of Mind" Perk
			double perkfactor = 1.00;
			if (clearofmind > 0)
			{
				if (clearofmind >= 1) perkfactor += 0.04;
				if (clearofmind >= 2) perkfactor += 0.05;
				if (clearofmind >= 3) perkfactor += 0.06;
				if (clearofmind >= 4) perkfactor += 0.07;
				if (clearofmind >= 5) perkfactor += 0.08;
				if (clearofmindex >= 1) perkfactor += 0.15;
				if (clearofmindex >= 2) perkfactor += 0.15;
				SExPts *= perkfactor;
			}
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 8 - Cleared of Mind [%8f]): %d / 16", perkfactor, SExPts);

			// "Higher Learning" Grand Mastery Perk
			if (higherlearning == 1) SExPts *= 1.15; // [115%]
			if (higherlearning >= 2) SExPts *= 1.30; // [130%]
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 9 - Higher Learning): %d / 16", SExPts);

			if (ModType == 0) ExpPiecesToAdd *= 1.334; // Classic Doom 1/2 / Heretic / Hexen / Strife
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 10 - ModType Checker): %d / 16", SExPts);

			SExPts = SExPts * 1.25;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (Step 11 - ?): %d / 16", SExPts);

			while (SExPts > 15)
			{
				SExPts -= 16;
				CallACS("OtherVarSetDECORATE",10,1,1);
				if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (while 1): %d / 16", SExPts);
			}
			CallACS("MiscVarSetDECORATE",203,SExPts,1); 
		
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (pre-while 2): %d / 16", CallACS("MiscVarCheckDECORATE",203));
			while (CallACS("MiscVarCheckDECORATE",203) > 15) // if (MiscellaneousVars[203] > 15)
			{
				CallACS("MiscVarSetDECORATE",203,-16,1); 
				CallACS("OtherVarSetDECORATE",10,1,1);
				if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxSExPts (while 2): %d / 16", CallACS("MiscVarCheckDECORATE",203));
			}
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input\c-: \cygametic = %d\c-)", gametic);
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int criticalhit;
		int CritChance, CritRoll;
		int oldhealth = self.health;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		
		if (mod == 'dashing')
		{
			if (NORADDMG == 1 && bNORADIUSDMG) 
			{
				bNORADIUSDMG = 0;
				if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP ? - UNSET NORADIUSDMG TEMPORARILY])");
			}
		}
		if (neverbleeds == 0)
		{
			bNOBLOOD = 0;
			bNOBLOODDECALS = 0;
		}
		int drainmaxdmg = self.health; // Prevents overdamage from gauntlets from being factored into Healing values
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor != null) lastattackeratk = inflictor;
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source != null) lastattacker = source;
		if (source == null) sour = "NONE"; else sour = source.GetClassName();

		int olddmg = damage;
		if (dvdsdebug_actordmgdisplays && olddmg > 0) Console.Printf("    (\czActor Defensive Input [STEP 1 - Base Damage]\c-: \cydmg = %d\c-)", olddmg);


		bool dealtcrit = false;
		double prevDamageFactor;
		double critdmgmulti = 2.0 + (0.01 * random(-10,10));
		double critextradmgmulti = 1.0 + (clearofmind * 0.10) + (clearofmindex * 0.25);
		critdmgmulti *= critextradmgmulti;
		double ldldmgmulti = 1.0;
		int preplayerdmg = damage;
		int prefriendlydmg = 0;
		int precritdmg = 0;
		int preldldmg = 0;
		int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		double PoisonNeedleCritChance = 12.5;
		int PoisonNeedleBossCheck = 0;
		// Player/Actor Check
		AetheriusPlayerPawn playpawn;
		AetheriusMonsterZSC DVDSActor;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusEffectProjectile ailmentproj;
		SingleDamageRipper singleripproj;
		SingleDamageFastRipper singlefastripproj;

		if (vict == "Sauravatar" || 
				vict == "PracticeTarget" || vict == "PracticeTarget2" ||
				vict == "ProgrammerNew" || vict == "StrifeBishopNew" || vict == "OracleNew" || vict == "Macil1New" || vict == "Macil2New" || vict == "LoremasterNew" ||
				vict == "AlienSpectre1New" || vict == "AlienSpectre2New" || vict == "AlienSpectre3New" || vict == "AlienSpectre4New" || vict == "AlienSpectre5New" ||
				vict == "AvatarNew" || vict == "Benellus1DS" || vict == "Benellus2DS" || vict == "Benellus3DS" ||
				vict == "TNTSpider" || vict == "SourceGuardian" || vict == "AdolfHitlerDS" ||
				vict == "DSparilUnmountedNew" || vict == "KoraxNew" || vict == "PennywiseBoss" ||
				vict == "EntityBossNew" || vict == "EntitySecondNew" || vict == "EntityAscended" || vict == "ThamuzNew" || vict == "TchernobogNew" ||
				vict == "Magmantis" || vict == "Zakachi") 
				PoisonNeedleBossCheck = 1;

		if (source) 
		{
			playpawn = AetheriusPlayerPawn(source);
			DVDSActor = AetheriusMonsterZSC(source);
		}
		if (inflictor)
		{
			UniqueProjectile = AetheriusProjectileZSC(inflictor);
			ailmentproj = AetheriusEffectProjectile(inflictor);
			singleripproj = SingleDamageRipper(inflictor);
			singlefastripproj = SingleDamageFastRipper(inflictor);
		}

		if (UniqueProjectile && UniqueProjectile.IsACrisisAttack)
		{
			olddmg = damage;
			damage *= dvds_monstercrisismulti;
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP 1a1 - Crisis Projectile Check [%s]]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \czdmgmulti: %8f\c-)", sour, olddmg, damage, dvds_monstercrisismulti);
			UniqueProjectile.IsACrisisAttack = false;
		}


		olddmg = damage;
		double buffdamagemulti = 1.0;
		// Checks Buffs on Monsters based on their Health Levels
		if (health <= user_HPBuffRange)
		{
					 if (vict == "DSparilUnmountedNew" || vict == "KoraxNew" || vict == "PennywiseBoss" ||
							 vict == "EntityBossNew" || vict == "EntitySecondNew" || vict == "EntityAscended" || 
							 vict == "ThamuzNew" || vict == "TchernobogNew" ||
							 vict == "Magmantis") buffdamagemulti = 0.625;
			else if (vict == "AlienSpectre1New" || vict == "AlienSpectre2New" || vict == "AlienSpectre3New" || 
							 vict == "AlienSpectre4New" || vict == "AlienSpectre5New" ||
							 vict == "DSCyberdemon" || vict == "FCyberdemon" || vict == "Annihilator" || vict == "FAnnihilator" ||
							 vict == "DSSpiderMastermind" || vict == "FSpiderMastermind" || vict == "Demolisher" || vict == "FDemolisher") buffdamagemulti = 0.75;
			else if (vict == "PyroDemon" || vict == "FPyroDemon" || 
							 vict == "FlyingBalrog" || vict == "Hierophant") buffdamagemulti = 0.8;
			else if (vict == "ArchonOfHell" || vict == "FArchonOfHell" ||
							 vict == "Cybruiser" || vict == "FCybruiser" ||
							 vict == "BruiserDemon" || vict == "FBruiserDemon") buffdamagemulti = 0.85;
			else if (vict == "Belphegor" || vict == "FBelphegor" ||
							 vict == "HadesElemental" || vict == "HadesOverlord") buffdamagemulti = 0.9;
			else if (vict == "Diabloist" || vict == "FDiabloist" ||
							 vict == "Abaddon" || vict == "FAbaddon") buffdamagemulti = 0.95;
			else if (vict == "DSArchvile" || vict == "FArchvile" ||
							 vict == "DSBaronOfHell" || vict == "FBaronOfHell" ||
							 vict == "DSHellKnight" || vict == "FHellKnight" ||
							 vict == "HellWarrior" || vict == "FHellWarrior")  buffdamagemulti = 0.975;
			else buffdamagemulti = 0.9875;

			if (health <= user_HPLowBuffRange) buffdamagemulti *= 0.875;
			if (user_legendaryevolved) buffdamagemulti *= frandom(0.925,0.975);
			damage *= buffdamagemulti;
			if (damage <= 0) damage = 1;
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP 1a1 - Attacker Monster Buffs/Debuffs [%s]]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \czdmgmulti: %8f\c-)", sour, olddmg, damage, buffdamagemulti);
		}
		buffdamagemulti = 1.0;
		if (DVDSActor && DVDSActor.health <= DVDSActor.user_HPBuffRange)
		{
					 if (sour == "DSparilUnmountedNew" || sour == "KoraxNew" || sour == "PennywiseBoss" ||
							 sour == "EntityBossNew" || sour == "EntitySecondNew" || sour == "EntityAscended" || 
							 sour == "ThamuzNew" || sour == "TchernobogNew" ||
							 sour == "Magmantis") buffdamagemulti = 1.75;
			else if (sour == "AlienSpectre1New" || sour == "AlienSpectre2New" || sour == "AlienSpectre3New" || 
							 sour == "AlienSpectre4New" || sour == "AlienSpectre5New" ||
							 sour == "DSCyberdemon" || sour == "FCyberdemon" || sour == "Annihilator" || sour == "FAnnihilator" ||
							 sour == "DSSpiderMastermind" || sour == "FSpiderMastermind" || sour == "Demolisher" || sour == "FDemolisher") buffdamagemulti = 1.5;
			else if (sour == "PyroDemon" || sour == "FPyroDemon" || 
							 sour == "FlyingBalrog" || sour == "Hierophant") buffdamagemulti = 1.4;
			else if (sour == "ArchonOfHell" || sour == "FArchonOfHell" ||
							 sour == "Cybruiser" || sour == "FCybruiser" ||
							 sour == "BruiserDemon" || sour == "FBruiserDemon") buffdamagemulti = 1.3;
			else if (sour == "Belphegor" || sour == "FBelphegor" ||
							 sour == "HadesElemental" || sour == "HadesOverlord") buffdamagemulti = 1.2;
			else if (sour == "Diabloist" || sour == "FDiabloist" ||
							 sour == "Abaddon" || sour == "FAbaddon") buffdamagemulti = 1.1;
			else if (sour == "DSArchvile" || sour == "FArchvile" ||
							 sour == "DSBaronOfHell" || sour == "FBaronOfHell" ||
							 sour == "DSHellKnight" || sour == "FHellKnight" ||
							 sour == "HellWarrior" || sour == "FHellWarrior")  buffdamagemulti = 1.05;
			else buffdamagemulti = 1.025;

			if (DVDSActor.health <= DVDSActor.user_HPLowBuffRange) buffdamagemulti *= 1.25;
			if (DVDSActor.user_legendaryevolved) buffdamagemulti *= frandom(1.05,1.15);
			damage *= buffdamagemulti;
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP 1a2 - Defender Monster Buffs/Debuffs [%s]]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \czdmgmulti: %8f\c-)", vict, olddmg, damage, buffdamagemulti);
		}

		if (playpawn && damage > 0)
		{
			prefriendlydmg = damage;
			if (bFRIENDLY)
			{
				damage /= 4;
				if (user_summoned > 0) damage /= 4;
				if (user_charmed > 0) damage /= 4;
				if (damage < 1) damage = 1;
				if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2a - Player-Friendly Dmg]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-)", prefriendlydmg, damage);
			}
			
			//**********************************
			//*Chance to RESIST a critical hit.*
			//**********************************
			double CritResistChance = 1.25;
			double ExtraBlock = 0.0;
			// Enemy Type
			if (vict == "ForgottenOne") CritResistChance = 25.0;
			// Enemy Flags
			if (bBOSS) CritResistChance *= 1.5;
			// Enemy Has "Item"
			if (CountInv("HWShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.45);
			if (CountInv("DKnightShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("DKnightShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.475);
			if (CountInv("AcolyteShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.125);
			if (CountInv("AcolyteShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.35);
			if (CountInv("CentaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.333);
			if (CountInv("CentaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.48666);
			if (CountInv("SlaughtaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.41667);
			if (CountInv("SlaughtaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.49333);
			if (CountInv("MaulotaurChargeDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("HeresiarchShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.4375);
			if (CountInv("HightmarePhaseOutDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.46875);
			String nm = "ThamuzApocalypseDefendMode"; MiscCheck = nm; if (CountInv(MiscCheck)) CritResistChance += ((100.0 - CritResistChance) * 0.4);
			// Flag Detection
			if (user_legendaryevolved) CritResistChance += ((100.0 - CritResistChance) * 0.1875);

			double CritResistChanceReduce = 1.0 - (clearofmind * 0.0125) + (clearofmindex * 0.03125);
			CritResistChance *= CritResistChanceReduce;

			// Ripper Detection
			if (infl == "RagingSpirit") 
			{
				if (random(1,24) != 1) CritResistChance = 200.0;
				if (UniqueProjectile && random(1,6) == 1) UniqueProjectile.user_fuse -= randompick(1,1,1,1,1,1,1,1,1,1,1,2);
			}
			if (infl == "RagingSpirit2")
			{
				if (random(1,6) != 1) CritResistChance = 200.0;
				if (UniqueProjectile && random(1,24) == 1) UniqueProjectile.user_fuse -= randompick(1,1,1,1,1,1,1,1,1,1,1,2);
			}
			if (inflictor && inflictor.bRIPPER) { if (!singleripproj && !singlefastripproj && random(1,6) != 1) CritResistChance = 200.0; } // 5 out of 6 times, Raging Spirits/Rippers can't Crit
			if (mod == 'PoisonNeedle') // Poison Needle will not thrust
			{
				if (playpawn.CountInv("DealCriticalHit") > 0) playpawn.A_SetInventory("DealCriticalHit",0); // Forces the Needle to use its own personal Crit Chance instead of the normal one.
				flags |= DMG_THRUSTLESS; flags |= DMG_NO_ARMOR; flags |= DMG_NO_FACTOR; flags |= DMG_NO_PROTECT; 
				CritResistChance = -200.0; // Cannot be resisted
				if (damage < 1) damage = randompick(1,1,1,1,2);
				PoisonNeedleCritChance += ((CallACS("MiscVarCheckDECORATE",10005) * 0.5) + (CallACS("MiscVarCheckDECORATE",10006) * 1.25)); // StamUp
				PoisonNeedleCritChance += ((CallACS("MiscVarCheckDECORATE",10035) * 1.0) + (CallACS("MiscVarCheckDECORATE",10036) * 2.5)); // Martial Arts Mastery
				PoisonNeedleCritChance += ((CallACS("MiscVarCheckDECORATE",10055) * 0.25) + (CallACS("MiscVarCheckDECORATE",10056) * 0.625)); // Cleared of Mind
				PoisonNeedleCritChance += ((CallACS("MiscVarCheckDECORATE",317) * 0.25) + (CallACS("MiscVarCheckDECORATE",318) * 0.75)); // Strife [Stamina and Accuracy]
				if (CallACS("GetBuffTimer",10) > 0) PoisonNeedleCritChance *= 1.25;
				if (CallACS("GetBuffTimer",13) > 0) PoisonNeedleCritChance *= 0.80;
				if (CallACS("GetBuffTimer",1) > 0)
				{
					if (playpawn) PoisonNeedleCritChance *= (((playpawn.InvisNeedleBonus - 1.00) / 3) + 1.00);
				}
				if (TensionLevel > 0) PoisonNeedleCritChance = (PoisonNeedleCritChance * (TensionLevel + 7)) / 7;
				if (PoisonNeedleBossCheck) PoisonNeedleCritChance /= 4;
				if (playpawn.CountInv("PlayerDashing") > 0) PoisonNeedleCritChance *= 2.5;

				if (vict == "PossessedBalloonNew" || vict == "BigBerthaNew" || vict == "BigBertha2New" || vict == "SuperBerthaNew" || vict == "ClownGhostNew") PoisonNeedleCritChance = 200.0; // "Balloon" type enemies in Circus666/Circus2 instantly "pop" from a hit of the needle

				if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2aa - Player-Crit Dmg (\cxPOISON NEEDLE Check\c-)]\c-: \cyPoisonNeedleCritChance = %8f\c-)", PoisonNeedleCritChance);
				if (frandom(0.1,100.0) <= PoisonNeedleCritChance) { if (playpawn.CountInv("DealCriticalHit") <= 0) playpawn.A_SetInventory("DealCriticalHit",1); }
			}
			// Dashing Detection
			if (mod == 'Dashing') // Dashing Cannot Crit, but it ignores damagefactors/protection/armor, and doesn't thrust enemies around.
			{ 
				CritResistChance = 200.0;
				flags |= DMG_THRUSTLESS; 
				flags |= DMG_PLAYERATTACK; 
				flags |= DMG_NO_ARMOR; 
				flags |= DMG_NO_FACTOR; 
				flags |= DMG_NO_ENHANCE; 
				flags |= DMG_NO_PROTECT; 
			}

			if (CountInv("CheatCritUltimate", AAPTR_PLAYER1) > 0) CritResistChance = -200.0;
			double CritResistRoll = frandom(0.1,100.0);

			//****************************
			//*Dealing with Critical hits*
			//****************************
			precritdmg = damage;

			if (CountInv("DealCriticalHit", AAPTR_PLAYER1) > 0 && CritResistRoll > CritResistChance)
			{
				if (CountInv("AnubisCufflinksFear", AAPTR_PLAYER1) > 0) critdmgmulti *= 1.25;
				if (CountInv("RuinousShield", AAPTR_PLAYER1) > 0) critdmgmulti *= 0.8;
				if (mod == 'PoisonNeedle') 
				{
					damage *= critdmgmulti;
					if (PoisonNeedleBossCheck) damage += ((self.User_MaxHP * random(1,2)) / 8); 
																else damage += (self.User_MaxHP * random(3,5));

					A_SetInventory("TookCriticalHit",1);
					dealtcrit = true;
					flags |= DMG_NO_ARMOR; 
					flags |= DMG_NO_FACTOR; 
					flags |= DMG_NO_PROTECT; 
					flags |= DMG_NO_ENHANCE; 
					if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2b - Player-Crit Dmg  (\cxPOISON NEEDLE\c-)]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \cacritdmgmulti = %3f\c-, \cacritextradmgmulti = %3f\c-)", precritdmg, damage, critdmgmulti, critextradmgmulti);
				}
				else
				{
					damage *= critdmgmulti;
					A_SetInventory("TookCriticalHit",1);
					dealtcrit = true;
					if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2b - Player-Crit Dmg]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \cacritdmgmulti = %3f\c-, \cacritextradmgmulti = %3f\c-)", precritdmg, damage, critdmgmulti, critextradmgmulti);
				}
			}

			// "Villain Killer" Perk [for extra damage specifically against Legendaries]
			preldldmg = damage;
			if (CountInv(LDLCheck) && (CallACS("MiscVarCheckDECORATE",10057) + CallACS("MiscVarCheckDECORATE",10058) > 0))
			{
				double ldlbasemod;
				if (bBOSS) ldlbasemod = frandom(0.15,0.2);
							else ldlbasemod = frandom(0.10,0.125);

				// DamageType Modifiers
				if (mod == 'Sceptre') ldlbasemod *= 1.5;
				if (mod == 'Gauntlets') ldlbasemod *= 1.25;
				if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw') ldlbasemod *= 1.125;

				ldldmgmulti += (ldlbasemod * CallACS("MiscVarCheckDECORATE",10057));
				ldldmgmulti += ((ldlbasemod * 2.5) * CallACS("MiscVarCheckDECORATE",10058));
				damage *= ldldmgmulti;
				if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2c - Player-LDLPerk Dmg]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \caldldmgmulti = %3f\c-)", preldldmg, damage, ldldmgmulti);
			}
			if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2x - Player Dmg]\c-: \cxprefdmg = %d\c-, \cxprefrienddmg = %d\c-, \cxprecritdmg = %d\c-, \cxpreldldmg = %d\c-, \cydmg = %d\c-, \cbCritResist: (%8f) / %8f\c-)", preplayerdmg, prefriendlydmg, precritdmg, preldldmg, damage, CritResistRoll, CritResistChance);
		}
		else
		if (DVDSActor && damage > 0 && dvds_monstercrits != 0)
		{
			// Dealing with Critical hits from other Monsters
			precritdmg = damage;
			string AilmentProjClass;
			if (ailmentproj) AilmentProjClass = ailmentproj.GetClassName();
			string ActorClass;
			ActorClass = DVDSActor.GetClassName();
			int meleeattack = 0;
			if (dvds_monstercrits != 0)
			{
				if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre') meleeattack = 1;
				//*****************************************************
				//**Allows Monsters to deal crits [4/256 base chance]**
				//*****************************************************
				// Base Chances
				CritChance = 8 + (DVDSActor.user_monsterlevel / 11.25); // 8 (+ 8 every 90 levels)
				if (DVDSActor && DVDSActor.bBOSS) CritChance = (CritChance * 3) / 2; // Boss Flag Check
				if (DVDSActor && DVDSActor.bJUSTHIT) CritChance *= 2; // JustHit Flag Check
				if (DVDSActor && DVDSActor.user_charmed > 0) CritChance = (CritChance * 3) / 2; // Charm Flag Check
				if (DVDSActor && DVDSActor.user_legendaryevolved) CritChance *= 4; // Legendaries have double crit rate
				if (DVDSActor && DVDSActor.health <= DVDSActor.user_HPBuffRange) CritChance = (CritChance * 6) / 4;
			
				// Actor Only Checks
				if (ActorClass == "DSHelperDog") CritChance *= 3; // Helper Dogs get triple crit rate
				if (ActorClass == "DSPainElemental" || ActorClass == "FPainElemental" || ActorClass == "DSPainElemental64" || ActorClass == "DSLostSoul" || ActorClass == "DSLostSoul2" || ActorClass == "ForgottenOne" || ActorClass == "DSLostSoul64" || ActorClass == "DSLostSoul642" ||
						ActorClass == "FLostSoul1" || ActorClass == "FLostSoul2") CritChance *= 4; // Pain-Elementals/Lost Souls are Crit-happy nuisances
				if (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate") CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have 50% more crit
				if (ActorClass == "ChainsawZombieNew") CritChance = (CritChance * 10) / 4; // Chainsaw Zombies have 150% more crit
				if (ActorClass == "NightmareNew" || ActorClass == "SirenNightmareNew") CritChance *= 4; // Nightmares are good at crits too
				if (ActorClass == "EvilDeadHandNew" || ActorClass == "BabyClownNew" || 
						ActorClass == "BabyClown2New" || ActorClass == "BouncingClownNew") CritChance *= 4;
				// Ally Specfic
				if (ActorClass == "RebelNew" || ActorClass == "Rebel1New" || ActorClass == "Rebel2New" || ActorClass == "Rebel3New" || 
						ActorClass == "Rebel4New" || ActorClass == "Rebel5New" || ActorClass == "Rebel6New") 
						CritChance = (CritChance * random(7,9)) / 4; // Strife Rebles have +75-125% more crit
				// Boss Only Checks
				if (ActorClass == "DragonNew" || ActorClass == "FDragon" || ActorClass == "HeresiarchNew" || ActorClass == "FHeresiarch" || 
						ActorClass == "DSparilMountedNew" || ActorClass == "ClericBossNew" || ActorClass == "FighterBossNew" || ActorClass == "MageBossNew" ||
						ActorClass == "ProgrammerNew" || ActorClass == "StrifeBishopNew" || ActorClass == "LoremasterNew" || ActorClass == "Macil1New" || ActorClass == "StrifMacil2NeweBishopNew") CritChance *= 4;
				if (ActorClass == "AlienSpectre1New" || ActorClass == "AlienSpectre2New" || ActorClass == "AlienSpectre3New" || ActorClass == "AlienSpectre4New" || ActorClass == "AlienSpectre5New" ||
						ActorClass == "AvatarNew" || ActorClass == "Benellus1DS" || ActorClass == "Benellus2DS" || ActorClass == "Benellus3DS" ||
						ActorClass == "TNTSpider" || ActorClass == "SourceGuardian" || ActorClass == "AdolfHitlerDS") CritChance *= 6;
				if (ActorClass == "DSparilUnmountedNew" || ActorClass == "KoraxNew" || ActorClass == "PennywiseBoss" ||
						ActorClass == "EntityBossNew" || ActorClass == "EntitySecondNew" || ActorClass == "EntityAscended" || ActorClass == "ThamuzNew" || ActorClass == "TchernobogNew" ||
						ActorClass == "Magmantis" || ActorClass == "Zakachi") CritChance *= 8;
		
				// Unique Checks
				if (meleeattack && (ActorClass == "WraithNew" || ActorClass == "WraithBuriedNew" || ActorClass == "FWraith")) 
						CritChance *= 4;

				if (meleeattack && (ActorClass == "Dragon" || ActorClass == "FDragon")) 
						CritChance *= 8;

				if (meleeattack && (ActorClass == "EttinNew" || ActorClass == "EttinCommander" || ActorClass == "Bormereth" ||
						ActorClass == "FEttinNew" || ActorClass == "FEttinCommander" || ActorClass == "FBormereth")) 
						CritChance = (CritChance * 9) / 4; // Ettins have 125% more crit for Melee
	
				if (meleeattack && (ActorClass == "StalkerNew" || ActorClass == "StalkerLeaderNew" || ActorClass == "IceStalker" || ActorClass == "IceStalkerLeader" || 
						ActorClass == "FStalker" || ActorClass == "FStalkerLeader")) 
						CritChance *= 2; // Hexen Stalkers have 2x more crit for Melee
	
				if (meleeattack && (ActorClass == "CentaurNew" || ActorClass == "SlaughtaurNew" || 
						ActorClass == "FCentaur" || ActorClass == "FSlaughtaur")) 
						CritChance *= 2; // Centaurs have 2x more crit for Melee

				if (meleeattack && (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate")) 
						CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have another +50% more crit when using melee

				if (meleeattack && (ActorClass == "KnightNew" || ActorClass == "FKnight" || ActorClass == "KnightGhostNew" || ActorClass == "FKnightGhost")) 
						CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have another +50% more crit when using melee

				if (meleeattack && (ActorClass == "ReaverNew")) 
						CritChance *= 3; // Reavers have 3x more crit for melee

				if (meleeattack && (ActorClass == "OStalkerNew")) 
						CritChance = (CritChance * 6) / 4; // Strife Stalkers have 50% more crit

				if (meleeattack && 
						(ActorClass == "DSCacodemon" || ActorClass == "DSCacodemon64" || ActorClass == "FCacodemon" ||
						ActorClass == "Cacolantern" || ActorClass == "FCacolantern" ||
						ActorClass == "Abaddon" || ActorClass == "FAbaddon")) 
						CritChance *= 2; // Cacos have 2x Crit for Melee

				if (meleeattack && 
						(ActorClass == "HadesElemental" || ActorClass == "FHadesElemental" ||
						ActorClass == "HadesOverlord" || ActorClass == "FHadesOverlord")) 
						CritChance *= 3; // Hades Scions have 3x Crit for Melee

				if (meleeattack && (ActorClass == "SatyrNew")) 
						CritChance *= 8; // Satyrs are very likely to crit too
						
				if (meleeattack && 
						(ActorClass == "DSDemon" || ActorClass == "DSDemon64" || 
						ActorClass == "DSSpectre" || ActorClass == "DSSpectre64" || 
						ActorClass == "BloodDemon" || ActorClass == "BloodSpectre" ||
						ActorClass == "BloodFiendNew" || ActorClass == "LurkerNew" ||
						ActorClass == "FDemon" || ActorClass == "FSpectre" || 
						ActorClass == "FBloodDemon" || ActorClass == "FBloodSpectre")) 
						CritChance = (CritChance * 6) / 4; // Pinkies have 50% more crit with Melee

				if (meleeattack && (ActorClass == "ClinkNew" || ActorClass == "FClink")) 
						CritChance = (CritChance * 6) / 4; // SabreClaws have 50% more crit with Melee

				if (meleeattack && 
						(ActorClass == "DSCyberdemon" || ActorClass == "DSCyberdemon64" || ActorClass == "Annihilator" || 
						ActorClass == "FCyberdemon" || ActorClass == "FAnnihilator")) 
						CritChance *= 8; // Cyberdemon Stomps/Melee have 8x chance to crit.

				if (meleeattack && 
						(ActorClass == "DSHellKnight" || ActorClass == "DSHellKnight64" || ActorClass == "FHellKnight" || 
						ActorClass == "HellWarrior" || ActorClass == "FHellWarrior" || 
						ActorClass == "DSBaronofHell" || ActorClass == "DSBaronofHell64" || ActorClass == "FBaronofHell" || 
						ActorClass == "Belphegor" || ActorClass == "FBelphegor" || 
						ActorClass == "BruiserDemon" || ActorClass == "FBruiserDemon" || 
						ActorClass == "CyBruiser" || ActorClass == "FCyBruiser" || 
						ActorClass == "ArchonofHell" || ActorClass == "FArchonofHell" ||
						ActorClass == "PyroDemon" || ActorClass == "FPyroDemon" ||
						ActorClass == "WeakenedFlyingBalrog" || ActorClass == "FlyingBalrog" || ActorClass == "FFlyingBalrog")) 
						CritChance *= 4; // Hell Nobles have 4x chance to Crit w/ melee attacks

				// Misc
				if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') // BFG related attacks have signficantly LESS chance to crit, but still always have at least a 1/512 chance :P
				{ 
					CritChance /= 16;
					if (CritChance < 1) CritChance = 1;
				}
				if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
						infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
						infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
						infl == "FireBreath" || infl == "FireBreathCrisis" ||
						infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
						infl == "Demon5Jet" || infl == "Demon5JetCrisis")
				{
					CritChance *= 4;
				}
				if (infl == "SuicideBomb" || infl == "SuicideBomber" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") CritChance = 0; // Kamikaze Monsters Cannot Crit
		
				// Final Crit Roll
				CritRoll = random(1,512);
				if (CritRoll <= CritChance && DVDSActor.health > 0 && !isFrozen() && dvds_monstercrits != 0) criticalhit = 1;
				if (dvdsdebug_actordmgdisplays && dvds_monstercrits != 0) Console.Printf("    (\czActor Defensive Input [Monster Crit Rate]\c-: %d / 512 (%d) \c-, \cyActorClass: = %s\c-)", CritRoll, CritChance, ActorClass);

				// Chance to RESIST a crit.
				double CritResistChance = 1.25;
				double ExtraBlock = 0.0;
				// Enemy Type
				if (vict == "ForgottenOne") CritResistChance = 25.0;
				// Enemy Flags
				if (bBOSS) CritResistChance *= 1.5;
				// Enemy Has "Item"
				if (CountInv("HWShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
				if (CountInv("ImpWarlordShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
				if (CountInv("ImpWarlordShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.45);
				if (CountInv("DKnightShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
				if (CountInv("DKnightShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.475);
				if (CountInv("AcolyteShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.125);
				if (CountInv("AcolyteShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.35);
				if (CountInv("CentaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.333);
				if (CountInv("CentaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.48666);
				if (CountInv("SlaughtaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.41667);
				if (CountInv("SlaughtaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.49333);
				if (CountInv("MaulotaurChargeDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
				if (CountInv("HeresiarchShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.4375);
				if (CountInv("HightmarePhaseOutDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.46875);
				String nm = "ThamuzApocalypseDefendMode"; MiscCheck = nm; if (CountInv(MiscCheck)) CritResistChance += ((100.0 - CritResistChance) * 0.4);
				// Flag Detection
				if (user_legendaryevolved) CritResistChance += ((100.0 - CritResistChance) * 0.1875);
				// Ripper Detection
				if (infl == "RagingSpirit" && random(1,6) != 1) CritResistChance = 200.0;
				if (inflictor && inflictor.bRIPPER) { if (!singleripproj && !singlefastripproj && random(1,6) != 1) CritResistChance = 200.0; }

				int CritResistRoll = frandom(0.1,100.0);
				if (criticalhit && CritResistRoll <= CritResistChance) 
				{
					criticalhit = 0;
					if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2b - Monster-Crit]\c-: \cxRESISTED\c-, \cbCritResist: (%8f) / %8f\c-)", CritResistRoll, CritResistChance);
				}
				
				if (criticalhit) 
				{
					damage *= critdmgmulti;
					A_SetInventory("TookCriticalHit",1);
					dealtcrit = true;
					if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 2b - Monster-Crit Dmg]\c-: \cxolddmg = %d\c-, \cydmg = %d\c-, \cacritdmgmulti = %3f\c-, \cacritextradmgmulti = %3f\c-, \cbCritResist: (%8f) / %8f\c-)", precritdmg, damage, critdmgmulti, critextradmgmulti, CritResistRoll, CritResistChance);
				}
			}
		}

		int predmginr = damage;
		// (Partial) Defense Ignoring Attacks
		double basedmgfactor = DamageFactor;

		double HubBubRand = frandompick(0.45,0.475,0.5,0.525,0.55);
		double RailRandom = frandompick(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.50,0.50,0.50,0.50,0.75,0.75,0.9875);
		double ActorDefenseIgnoreFactor = 0.00;
		// BFG Ignores roughly half of "normal" damagefactor
		if (inflictor == null && source == null) { }
		else
		{
			// Hellcore
			if (infl == "FloraBriscoletti" && (mod == 'ImpClaw' || mod == 'DarkImpClaw' ||
					mod == 'CacodemonEye' || mod == 'CacolanternEye' || mod == 'AbaddonEye' || 
					mod == 'KnightFist' || mod == 'BaronFist' || mod == 'BelphegorFist' || mod == 'BruiserFist' || mod == 'ArchonFist' || mod == 'PyroFist' || 
					mod == 'IncarnateSkull' || mod == 'BalrogFist' || mod == 'DiabloistHand'))
			{
				ActorDefenseIgnoreFactor += ((frandom(0.225,0.275) + (CallACS("MiscVarCheckDECORATE",10033) * frandom(0.0225,0.0275)) +  (CallACS("MiscVarCheckDECORATE",10034) * frandom(0.05625,0.06875))) * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Melee
			if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets')
			{
				ActorDefenseIgnoreFactor += ((random(0,10) * 0.01) * (1.00 - ActorDefenseIgnoreFactor));
			}
			// BFG
			if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') 
			{ 
				ActorDefenseIgnoreFactor += (frandom(0.45,0.55) * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Plasma Ignores 1/4th of "normal" damagefactor
			if (mod == 'Plasma') 
			{ 
				ActorDefenseIgnoreFactor += (frandom(0.225,0.275) * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Railguns
			if (infl == "DBTRailPuff") 
			{ 
				ActorDefenseIgnoreFactor += (RailRandom * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Hubble Bubbles
			if (infl == "HubbleBubbleSmall" || infl == "HubbleBubbleLarge") 
			{ 
				ActorDefenseIgnoreFactor += (HubBubRand * (1.00 - ActorDefenseIgnoreFactor));
				
				if (CountInv("HubbleBubbleSpeedPenalty1") < 1) A_GiveInventory("HubbleBubbleSpeedPenalty1",1);
				else
				{
					if (CountInv("HubbleBubbleSpeedPenalty1b") < 1) A_GiveInventory("HubbleBubbleSpeedPenalty1b",1);
				}
				if (random(1,3) == 1) 
				{
					if (CountInv("HubbleBubbleSpeedPenalty2") < 1) A_GiveInventory("HubbleBubbleSpeedPenalty2",1);
					else
					{
						if (CountInv("HubbleBubbleSpeedPenalty2b") < 1) A_GiveInventory("HubbleBubbleSpeedPenalty2b",1);
					}
				}
			}
			// Sceptre
			if (mod == 'Sceptre') 
			{ 
				double temp = (0.5 + (random(0,5) * 0.02));
				double temp2 = (((0.30 + (random(0,5) * 0.02)) / 16) * SceptreActualLevel);
				ActorDefenseIgnoreFactor += ((temp + temp2) * (1.00 - ActorDefenseIgnoreFactor));
				if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("\cz[Sceptre Defense Ignoring]\c-: \caDefenseIgnoreFactor = %8f\c-, \catemp1+2 = %8f", ActorDefenseIgnoreFactor, (temp+temp2));
			}
			// Diaris Arrows
			if (infl == 'DiarisHolyArrow' || infl == 'DiarisHolyArrow2xDmg' || infl == 'DiarisHolyArrow3xDmg' || 
			    infl == 'DiarisHolyArrowGlitter1' || infl == 'DiarisHolyArrowGlitter2' || infl == 'DiarisHolyArrowGlitter3') 
			{ 
				ActorDefenseIgnoreFactor += ((0.5 + (random(-10,10) * 0.01)) * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Poison Needle
			if (mod == 'PoisonNeedle') 
			{ 
				ActorDefenseIgnoreFactor += (0.625 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Poison Clouds
			if ((mod == "PoisonElemental" || mod == "Poison") && 
					(infl == "MinorPoisonCloud" || infl == "NormalPoisonCloud" || infl == "MajorPoisonCloud" ||
					 infl == "HexenPoisonCloud1" || infl == "HexenPoisonCloud2Source" || infl == "HexenPoisonCloud2Outer" || infl == "HexenPoisonCloud3Source" || infl == "HexenPoisonCloud3Outer"))
			{
				ActorDefenseIgnoreFactor += (frandompick(0.20,0.225,0.25,0.275,0.30) * (1.00 - ActorDefenseIgnoreFactor));
				
				if (CountInv("PoisonCloudSpeedPenalty1") < 1) A_GiveInventory("PoisonCloudSpeedPenalty1",1);
				else
				{
					if (CountInv("PoisonCloudSpeedPenalty1b") < 1) A_GiveInventory("PoisonCloudSpeedPenalty1b",1);
					else
					{
						if (CountInv("PoisonCloudSpeedPenalty1c") < 1) A_GiveInventory("PoisonCloudSpeedPenalty1c",1);
					}
				}
				A_GiveInventory("PoisonCloudATKPenalty1",1);
				A_GiveInventory("PoisonCloudDEFPenalty1",1);
				if (random(1,3) == 1) 
				{
					if (CountInv("PoisonCloudSpeedPenalty2") < 1) A_GiveInventory("PoisonCloudSpeedPenalty2",1);
					else
					{
						if (CountInv("PoisonCloudSpeedPenalty2b") < 1) A_GiveInventory("PoisonCloudSpeedPenalty2b",1);
						else
						{
							if (CountInv("PoisonCloudSpeedPenalty2c") < 1) A_GiveInventory("PoisonCloudSpeedPenalty2c",1);
						}
					}
					A_GiveInventory("PoisonCloudATKPenalty2",1);
					A_GiveInventory("PoisonCloudDEFPenalty2",1);
				}
				if (random(1,9) == 1) 
				{
					if (CountInv("PoisonCloudSpeedPenalty3") < 1) A_GiveInventory("PoisonCloudSpeedPenalty3",1);
					else
					{
						if (CountInv("PoisonCloudSpeedPenalty3b") < 1) A_GiveInventory("PoisonCloudSpeedPenalty3b",1);
						else
						{
							if (CountInv("PoisonCloudSpeedPenalty3c") < 1) A_GiveInventory("PoisonCloudSpeedPenalty3c",1);
						}
					}
					A_GiveInventory("PoisonCloudATKPenalty3",1);
					A_GiveInventory("PoisonCloudDEFPenalty3",1);
				}
				if (random(1,27) == 1) 
				{
					if (CountInv("PoisonCloudSpeedPenalty4") < 1) A_GiveInventory("PoisonCloudSpeedPenalty4",1);
					else
					{
						if (CountInv("PoisonCloudSpeedPenalty4b") < 1) A_GiveInventory("PoisonCloudSpeedPenalty4b",1);
						else
						{
							if (CountInv("PoisonCloudSpeedPenalty4c") < 1) A_GiveInventory("PoisonCloudSpeedPenalty4c",1);
						}
					}
					A_GiveInventory("PoisonCloudATKPenalty4",1);
					A_GiveInventory("PoisonCloudDEFPenalty4",1);
				}
				if (random(1,81) == 1) 
				{
					if (CountInv("PoisonCloudSpeedPenalty5") < 1) A_GiveInventory("PoisonCloudSpeedPenalty5",1);
					else
					{
						if (CountInv("PoisonCloudSpeedPenalty5b") < 1) A_GiveInventory("PoisonCloudSpeedPenalty5b",1);
						else
						{
							if (CountInv("PoisonCloudSpeedPenalty5c") < 1) A_GiveInventory("PoisonCloudSpeedPenalty5c",1);
						}
					}
					A_GiveInventory("PoisonCloudATKPenalty5",1);
					A_GiveInventory("PoisonCloudDEFPenalty5",1);
				}
			}
			if (mod == 'Drowning') 
			{
				ActorDefenseIgnoreFactor += (1.00 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Suicide Bombers/Kamikaze Enemy Attacks
			if (infl == "SuicideBomber" || infl == "SuicideBomb" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") 
			{
				ActorDefenseIgnoreFactor += (0.6667 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Chill Touch
			if (infl == "ChillTouch") 
			{
				ActorDefenseIgnoreFactor += (0.5 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Fire Breath
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				ActorDefenseIgnoreFactor += (0.75 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Legendaries
			if (DVDSActor && DVDSActor.user_legendaryevolved) 
			{ 
				ActorDefenseIgnoreFactor += (0.50 * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Player Buff Checks
			if (playpawn)
			{
				double temp = (0.025 * random(0,5));
				if (CallACS("GetBuffTimer",10) > 0) temp *= 1;
				if (CallACS("GetBuffTimer",13) > 0) temp -= 1;
				ActorDefenseIgnoreFactor += (temp * (1.00 - ActorDefenseIgnoreFactor));
			}
			// Target itself is a Legendary
			if (user_legendaryevolved)
			{
				if (ActorDefenseIgnoreFactor > 0.00) ActorDefenseIgnoreFactor /= random(2,6);
			}
		}

		//**********************************************************************
		//*This ignores damage factors [similar to how DQ crits ignore defense]*
		//**********************************************************************
		prevDamageFactor = DamageFactor;
		if (DamageFactor < 1.00) 
		{
			if (dealtcrit) ActorDefenseIgnoreFactor = 1.00;
			DamageFactor += ((1.00 - DamageFactor) * ActorDefenseIgnoreFactor); 
		}
		if (dvdsdebug_actordmgdisplays && damage > 0) 
		{
			if (ActorDefenseIgnoreFactor > 0.00) Console.Printf("    (\czActor Defensive Input [STEP 3a - Def Ignoring]\c-: \caDefenseIgnoreFactor = %8f\c-, \cadmgfactor = %8f\c-, \caprevdmgfactor = %8f\c-, \cypredmg = %d\c-, \cydmg = %d\c- (Monster Actor))", ActorDefenseIgnoreFactor, DamageFactor, prevDamageFactor, predmginr, damage);
																			else Console.Printf("    (\czActor Defensive Input [STEP 3a - Def Ignoring]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", predmginr);
		}

		int predirdmg = damage;
		prevDamageFactor = DamageFactor;
		// If the Attack was Deflected by the Player
		if (UniqueProjectile && UniqueProjectile.REFLECTEDMONSTERPROJ)
		{
			predirdmg = damage;
			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) > 0) 
			{
				damage *= 2;
				if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 3b - Player-Deflection Pre-Check [Earrings]\c-: \cypredmg = %d\c- / \cydmg = %d\c-)", predirdmg, damage);
			}

			double randomdmgmax = 1.50 + (random(0,50) * 0.01);
			if (DamageFactor < randomdmgmax) DamageFactor += ((randomdmgmax - DamageFactor) * frandompick(0.75,0.875,1.00,1.125,1.25));
			if (DamageFactor >= randomdmgmax) DamageFactor = randomdmgmax;
			if (dvdsdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 3c - Player-Deflection Checking]\c-: \caDamageFactor = %8f\c-, \caprevDamageFactor = %8f\c-, \carandomdmgmax = %8f, \cypredmg = %d\c- / \cydmg = %d\c-)", DamageFactor, prevDamageFactor, randomdmgmax, predirdmg, damage);
		}

		predirdmg = damage;
		// Direct Damage Changes
		if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
				infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
				infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
				infl == "FireBreath" || infl == "FireBreathCrisis" ||
				infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
				infl == "Demon5Jet" || infl == "Demon5JetCrisis")
		{
			damage *= 1.125;
		}
		if (dvdsdebug_actordmgdisplays && damage > 0) 
		{
			if (DamageFactor != basedmgfactor) Console.Printf("    (\czActor Defensive Input [STEP 4 - Direct Dmg Changes]:\c- \cypredmg = %d\c-, \cydmg = %d\c-)", predirdmg, damage);
																		else Console.Printf("    (\czActor Defensive Input [STEP 4 - Direct Dmg Changes]:\c- \caSKIPPED\c-, \cydmg = %d\c-)", predirdmg);
		}
		
		predirdmg = damage;
		double cheatnpcdmgtaken;
		cheatnpcdmgtaken = dvds_cheatnpcdmgtaken * 0.01;
		if (cheatnpcdmgtaken < 0.01) cheatnpcdmgtaken = 0.01;
		if (dvds_cheatnpcdmgtaken != 100)
		{
			if (damage > 0)
			{
				damage *= cheatnpcdmgtaken;
				if (damage < 1) damage = 1;
				if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP C1 - Direct Dmg Changes]:\c- \cypredmg = %d\c-, \cydmg = %d\c-, \cxcheatnpcdmgtaken = %2f)", predirdmg, damage, cheatnpcdmgtaken);
			}
		}

		double nrmldmgfctr = DamageFactor;
		// Space for rent :V
		//************************************************************************
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		//************************************************************************
		if (mod == 'dashing' && NORADDMG == 1 && !bNORADIUSDMG) 
		{
			bNORADIUSDMG = 1;
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP ? - RESET NORADIUSDMG])");
		}

		int outputdmg = damage;
		if (playpawn) outputdmg = playpawn.playoutputdmg;
		double finaldmgfactor = 1.00;
		if (outputdmg > 0) finaldmgfactor = 1.00 * ret / outputdmg;
		if (dvdsdebug_actordmgdisplays && outputdmg > 0) 
		{
			if (inflictor == null && source == null && mod == 'Melee' && health < 1) { }
			else
			{
				Console.Printf("    (\czActor Defensive Output [STEP 7 - Final Dmg]:\c- \cypredmg \c-/ \cyfinaldmg\c- = \cy%d\c- / \cy%d\c-, \cydmgdifffactor = %8f\c-, \cxhealth = %d (%d) / %d\c-, \cynormaldamagefactor\c- = \cy%8f\c-, \cyactualdamagefactor\c- = \cy%8f\c-, \cwdmgtype\c- = \cw%s\c-, \cavictim\c- = \ca%s\c-, \cdinflictor\c- = \cd%s\c-, \cnsource\c- = \cn%s\c-)", 
											outputdmg, ret, finaldmgfactor,
											health, oldhealth, user_MaxHP,
											basedmgfactor, nrmldmgfctr,
											mod, vict, infl, sour);
			}
		}

		string playedsound = "";
		int ComboTimerDelay = CallACS("MiscVarCheckDECORATE",162);
		int ComboTimerDelayIncrease = 0;
		// Play Q3A/QC Style "Hit" Sounds when the player hits a monster and does legit damage
		if (outputdmg > 0 && (oldhealth > 0 && oldhealth > health))
		{
			if (DVDSActor && DVDSActor.bFRIENDLY)
			{
				if (health <= 0 && dvds_q3aqckillsounds2) 
				{
					if (dvds_q3aqckillsoundtype == 0) playedsound = "misc/killsnd2";
					if (dvds_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED2";
					if (dvds_q3aqckillsoundtype >= 0) A_PlaySound(playedsound, CHAN_5, (dvds_q3aqckillsoundvol * frandom(0.75,1.25)), 0, ATTN_NONE);
				}
				if (dvds_q3aqchitsounds2 && hitsoundtimer <= 0) 
				{
					hitsoundtimer += dvds_q3aqchitsounddelay;
					if (dvds_q3aqchitsoundtype == 0) playedsound = "misc/hit2";
					if (dvds_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch2";
					if (dvds_q3aqchitsoundtype >= 0) A_PlaySound(playedsound, CHAN_6, (dvds_q3aqchitsoundvol * frandom(0.75,1.25)), 0, ATTN_NONE);
				}
				ComboTimerDelayIncrease = random(2,4);
			}
			else
			if (playpawn && source != null)
			{
				if (health <= 0 && dvds_q3aqckillsounds) 
				{
					if (dvds_q3aqckillsoundtype == 0) playedsound = "misc/killsnd";
					if (dvds_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED";
					if (dvds_q3aqckillsoundtype >= 0) A_PlaySound(playedsound, CHAN_5, (dvds_q3aqckillsoundvol * frandom(0.75,1.25)), 0, ATTN_NONE);
				}
				if (dvds_q3aqchitsounds && hitsoundtimer <= 0)
				{
					hitsoundtimer += dvds_q3aqchitsounddelay;
					if (dvds_q3aqchitsoundtype == 0) playedsound = "misc/hit";
					if (dvds_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch";
					if (dvds_q3aqchitsoundtype >= 0) A_PlaySound(playedsound, CHAN_6, (dvds_q3aqchitsoundvol * frandom(0.75,1.25)), 0, ATTN_NONE);
				}
				ComboTimerDelayIncrease = random(2,4);
			}
		}
		int EXPComboTimer = CallACS("MiscVarCheckDECORATE",157);
		if (outputdmg > 0 && ComboTimerDelayIncrease > 0 && EXPComboTimer > 0)
		{
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czINFO:\c- \cyComboTimerDelayIncrease [Base]\c-: \cy%8f\c-)", ComboTimerDelayIncrease);
			// "Legendary" Check
			if (CountInv(LDLCheck)) ComboTimerDelayIncrease *= 1.375; //2.5;
			// BOSS Flag Check
			if (bBOSS) ComboTimerDelayIncrease *= 1.125; //1.5;
			// STEALTH Flag Check
			if (bSTEALTH) ComboTimerDelayIncrease *= 1.125; //1.5;
			// "Cleared of Mind" Perk
			if (clearofmind == 1) ComboTimerDelayIncrease *= 1.00375; //1.015;
			if (clearofmind == 2) ComboTimerDelayIncrease *= 1.0075; //1.03;
			if (clearofmind == 3) ComboTimerDelayIncrease *= 1.015; //1.06;
			if (clearofmind == 4) ComboTimerDelayIncrease *= 1.03; //1.12;
			if (clearofmind == 5) ComboTimerDelayIncrease *= 1.06; //1.24;
			// "Higher Learning" Grand Mastery Perk
			if (CallACS("MiscVarCheckDECORATE",11001) == 1) ComboTimerDelayIncrease *= 1.0375; //1.15;
			if (CallACS("MiscVarCheckDECORATE",11001) == 2) ComboTimerDelayIncrease *= 1.075; //1.30;
			if (CallACS("GetBuffTimer",7) > 0) ComboTimerDelayIncrease *= 1.0625; //1.25; // Divine Avatar
			if (CallACS("GetBuffTimer",12) > 0) ComboTimerDelayIncrease *= 1.0625; //1.25; // Acceleratle
			if (CallACS("GetBuffTimer",15) > 0) ComboTimerDelayIncrease *= 0.95; //0.8; // Deceleratle
			double DamageRatio = 1.0;
			int ClampCheck = ret;
			if (ClampCheck > oldhealth) ClampCheck = oldhealth;
			if (User_MaxHP > 0)
			{
				if (outputdmg > 0) DamageRatio = (1.00 * ClampCheck) / User_MaxHP;
			}
			else
			{
				if (outputdmg > 0) DamageRatio = (1.00 * ClampCheck) / SpawnHealth();
			}
			ComboTimerDelayIncrease *= (1.0 + (DamageRatio * 0.5));
			ComboTimerDelay += ComboTimerDelayIncrease;
			if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czINFO:\c- \cxDamageRatio\c-: \cx\%8f\c-, \cyComboTimerDelayIncrease\c-: \cy%8f\c-)", DamageRatio, ComboTimerDelayIncrease);
		}
		CallACS("MiscVarSetDECORATE",162,ComboTimerDelay);

		// Unsets Alterations of target's DamageFactor
		DamageFactor = basedmgfactor;

		// Gauntlet HP/MP/AP drain
		if (ret > 0 && bFRIENDLY == 0)
		{
			int InvalidTargetType = 0;
			if (vict == "PracticeTarget" || vict == "PracticeTarget2") InvalidTargetType = 1;
			//if (dvdsdebug_actordmgdisplays) Console.Printf("    (\czINFO:\c- \cavict\c-: \ca%s\c-, \cdinfl\c-: \cd%s\c-)", vict, infl);

			if (InvalidTargetType == 0)
			{
				if (infl == "GauntletPuff" || infl == "GauntletAltPuff")
				{
					// Give some life when hurting a monster [1+(HP/250)]
					// Give more life when killing a monster [5+(HP/50)]
					
					let drainamt = ret;
					if (drainamt > drainmaxdmg) drainamt = drainmaxdmg;
					if (dvdsdebug_actordmgdisplays && drainamt > 0) Console.Printf("    (\czActor Def. Output [STEP (8) - Gauntlet Drain]:\c- \cy%d\c- / \cy%d\c-)", drainamt, drainmaxdmg);
					ACS_NamedExecuteAlways("SauronGauntletsHit",0,drainamt,(health > 0? 1 : 2),0); 
				}
				// Sceptre EXP Gain
				else if (infl == "SceptrePuff-Normal" || infl == "SceptrePuff-Spinning")
				{
					A_AddSceptreEXP_M(0,(health > 0? randompick(4,5,5,5,6) : 1));
				}
			}
		}

		if (ret == 0)
		{
			if (neverbleeds == 0)
			{
				bNOBLOOD = 1;
				bNOBLOODDECALS = 1;
			}
		}
		return ret;
	}

	//***********
	//**REVISED**
	//***********
	// Adds Crisis Attack Support
	void A_CustomBulletAttack(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", double range = 0, int flags = 0, int ptr = AAPTR_TARGET, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		let ref = GetPointer(ptr);

		if (range == 0)
			range = MISSILERANGE;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags & CBAF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;

		if (ref != NULL || (flags & CBAF_AIMFACING))
		{
			if (!(flags & CBAF_AIMFACING))
			{
				A_Face(ref);
			}
			bangle = self.Angle;

			if (!(flags & CBAF_NOPITCH)) bslope = AimLineAttack (bangle, MISSILERANGE);
			if (pufftype == null) pufftype = 'BulletPuff';

			IsACrisisBulletAttack = false;
			user_canusecrisisatk = 0;
			if (health <= user_HPLowRange) 
			{ 
				if (health <= user_HPCritRange) 
				{ 
					user_canusecrisisatk = 1; 
					//Console.Printf("user_HPCritRange");
				} 
				else 
				{ 
					if (random(1,4) == 4) user_canusecrisisatk = 1;
					//Console.Printf("user_HPLowRange");
				} 
			}
			if (dvds_monstercrisisattacks == 0) { user_canusecrisisatk = 0; }
			//Console.Printf("user_canusecrisisatk: %d", user_canusecrisisatk);
			if (user_canusecrisisatk)
			{
				A_PlaySound("crisisattack", CHAN_6);
				A_PlaySound("crisisattack2", CHAN_7);
				IsACrisisBulletAttack = true;
			}

			A_PlaySound(AttackSound, CHAN_WEAPON);
			for (i = 0; i < numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags & CBAF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cwbullet]() / 255.;
					slope += spread_z * Random2[cwbullet]() / 255.;
				}
				
				if (IsACrisisBulletAttack) damageperbullet *= dvds_monstercrisismulti;
				int damage = damageperbullet;

				if (!(flags & CBAF_NORANDOM))
					damage *= random[cwbullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags);
				if (missile != null && pufftype != null)
				{
					double ang = pangle - 90;
					let ofs = AngleToVector(ang, Spawnofs_xy);
					
					let pos = self.pos;
					SetXYZ(Vec3Offset(ofs.x, ofs.y, 0.));
					let proj = SpawnMissileAngleZSpeed(Pos.Z + GetBobOffset() + Spawnheight, missile, self.Angle, 0, GetDefaultByType(missile).Speed, self, false);
					SetXYZ(pos);
					
					if (proj)
					{
						bool temp = (puff == null);
						if (!puff)
						{
							puff = LineAttack(pangle, range, slope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT);
						}
						if (puff)
						{			
							AimBulletMissile(proj, puff, flags, temp, true);
						}
					}
				}
			}
		}
	}
	
	void A_DVDSCustomComboAttack(Class<Actor> missiletype = "", float spawnheight = 32.0, int meleedamage = 0, string meleesound = "", string meleedmgtype = "Melee", bool bleed = true)
	{
		if (!target) 
						return;
		//
		IsACrisisComboAttack = false;
		user_canusecrisisatk = 0;
		if (health <= user_HPLowRange) 
		{ 
			if (health <= user_HPCritRange) 
			{ 
				user_canusecrisisatk = 1; 
				//Console.Printf("user_HPCritRange");
			} 
			else 
			{ 
				if (random(1,4) == 4) user_canusecrisisatk = 1;
				//Console.Printf("user_HPLowRange");
			} 
		}
		if (dvds_monstercrisisattacks == 0) { user_canusecrisisatk = 0; }
		//Console.Printf("user_canusecrisisatk: %d", user_canusecrisisatk);
		if (user_canusecrisisatk)
		{
			A_PlaySound("crisisattack", CHAN_6);
			A_PlaySound("crisisattack2", CHAN_7);
			IsACrisisComboAttack = true;
		}
		//
    
		A_FaceTarget();
		if (CheckMeleeRange()) // Melee Attack
		{
			if (IsACrisisComboAttack) meleedamage *= dvds_monstercrisismulti; //
    
			if (damagetype == 'None')
							damagetype = 'Melee';	// Melee is the default type
			if (meleesound) 
						A_PlaySound(meleesound, CHAN_WEAPON, 1, ATTN_NORM);
			int newdam = target.DamageMobj(self, self, meleedamage, meleedmgtype);
			if (bleed) 
						target.TraceBleed (newdam > 0 ? newdam : meleedamage, self);
		}
		else if (missiletype) // Shoot a single Projectile
		{
			// This seemingly senseless code is needed for proper aiming.
			double add = spawnheight + GetBobOffset() - 32;
			AddZ(add);
			Actor missile = SpawnMissileXYZ((0,0,32), target, missiletype, false);
			AddZ(-add);
    
			if (missile)
			{
				AetheriusProjectileZSC UniqueProjectile; //
				UniqueProjectile = AetheriusProjectileZSC(missile); //
				if (IsACrisisComboAttack && UniqueProjectile) UniqueProjectile.IsACrisisAttack = true; //
    
				// automatic handling of seeker missiles
				if (missile.bSEEKERMISSILE)
				{
					missile.tracer = target;
				}
				missile.CheckMissileSpawn(radius);
			}
		}
		return;
	}
	
	enum CM_Flags
	{
		CMF_AIMMODE = 3,
		CMF_TRACKOWNER = 4,
		CMF_CHECKTARGETDEAD = 8,
	
		CMF_ABSOLUTEPITCH = 16,
		CMF_OFFSETPITCH = 32,
		CMF_SAVEPITCH = 64,
	
		CMF_ABSOLUTEANGLE = 128,
		CMF_BADPITCH = 256
	};
	
	Actor A_DVDSSpawnProjectile(class<Actor> missiletype, double spawnheight = 32, double spawnofs_xy = 0, double angle = 0, int flags = 0, double pitch = 0, int ptr = AAPTR_TARGET)
	{
		/*
		PARAM_SELF_PROLOGUE(AActor);
		PARAM_CLASS		(ti, AActor);
		PARAM_FLOAT	(Spawnheight);
		PARAM_FLOAT	(Spawnofs_xy);
		PARAM_ANGLE	(Angle);
		PARAM_INT	(flags);
		PARAM_ANGLE	(Pitch);
		PARAM_INT	(ptr);
		*/

		let ref = GetPointer(ptr); // AActor *ref = COPY_AAPTR(self, ptr);
		
		int aimmode = flags & CMF_AIMMODE;
		
		Actor targ; // AActor * targ;
		Actor missile = null; // AActor * missile = nullptr;
		
		if (ref != NULL || aimmode == 2)
		{
			if (missiletype) // if (ti)
			{
				angle -= 90; // DAngle angle = self->Angles.Yaw - 90;
				double x = Spawnofs_xy * cos(angle); // double x = Spawnofs_xy * angle.Cos();
				double y = Spawnofs_xy * sin(angle); // double y = Spawnofs_xy * angle.Sin();
				double z = Spawnheight + GetBobOffset() - 32 + (player? player.crouchoffset : 0.); // double z = Spawnheight + self->GetBobOffset() - 32 + (self->player? self->player->crouchoffset : 0.);
	
				Vector3 pos = (pos.x, pos.y, pos.z); // DVector3 pos = self->Pos();
				switch (aimmode)
				{
					case 0:
					default:
						// same adjustment as above (in all 3 directions this time) - for better aiming!
						SetXYZ(Vec3Offset(pos.x, pos.y, pos.z)); // self->SetXYZ(self->Vec3Offset(x, y, z));
						missile = SpawnMissileXYZ((0,0,32), ref, missiletype, false); // missile = P_SpawnMissileXYZ(self->PosPlusZ(32.), self, ref, ti, false);
						SetXYZ(pos); // self->SetXYZ(pos);
						break;
		
					case 1:
						missile = SpawnMissileXYZ(Vec3Offset(pos.x, pos.y, GetBobOffset() + Spawnheight), ref, missiletype, false); // missile = P_SpawnMissileXYZ(self->Vec3Offset(x, y, self->GetBobOffset() + Spawnheight), self, ref, ti, false);
						break;
		
					case 2:
						SetXYZ(Vec3Offset(pos.x, pos.y, 0.)); // self->SetXYZ(self->Vec3Offset(x, y, 0.));
						missile = SpawnMissileAngleZSpeed(pos.z + GetBobOffset() + Spawnheight, missiletype, angle, 0, GetDefaultByType(missiletype).Speed, self, false); // missile = P_SpawnMissileAngleZSpeed(self, self->Z() + self->GetBobOffset() + Spawnheight, ti, self->Angles.Yaw, 0, GetDefaultByType(ti)->Speed, self, false);
						SetXYZ(pos); // self->SetXYZ(pos);
		
						flags |= CMF_ABSOLUTEPITCH;
		
						break;
				}
	
				if (missile != NULL)
				{
					// Use the actual velocity instead of the missile's Speed property
					// so that this can handle missiles with a high vertical velocity 
					// component properly.
	
					double missilespeed;
	
					if ( (CMF_ABSOLUTEPITCH|CMF_OFFSETPITCH) & flags)
					{
						if (CMF_OFFSETPITCH & flags)
						{
							pitch += missile.pitch; // Pitch += missile->Vel.Pitch();
						}
						missilespeed = abs(Cos(pitch) * missile.Speed); // missilespeed = fabs(Pitch.Cos() * missile->Speed);
						missile.Vel.Z = Sin(pitch) * missile.Speed; // missile->Vel.Z = Pitch.Sin() * missile->Speed;
						if (!(flags & CMF_BADPITCH)) missile.Vel.Z *= -1; // if (!(flags & CMF_BADPITCH)) missile->Vel.Z *= -1;
					}
					else
					{
						missilespeed = missile.vel.xy.Length(); // missilespeed = missile->VelXYToSpeed();
					}
	
					if (CMF_SAVEPITCH & flags)
					{
						missile.pitch = pitch; // missile->Angles.Pitch = Pitch;
						// In aimmode 0 and 1 without absolutepitch or offsetpitch, the pitch parameter
						// contains the unapplied parameter. In that case, it is set as pitch without
						// otherwise affecting the spawned actor.
					}
	
					missile.angle = (CMF_ABSOLUTEANGLE & flags) ? Angle : missile.angle + Angle; // missile->Angles.Yaw = (CMF_ABSOLUTEANGLE & flags) ? Angle : missile->Angles.Yaw + Angle;
					missile.VelFromAngle(missilespeed); // missile->VelFromAngle(missilespeed);
		
					// handle projectile shooting projectiles - track the
					// links back to a real owner
					if (bMISSILE && (!!(flags & CMF_TRACKOWNER))) //if (self->isMissile(!!(flags & CMF_TRACKOWNER)))
					{
						Actor owner = self; // AActor *owner = self ;//->target;
						while (owner.bMISSILE && (!!(flags & CMF_TRACKOWNER)) && owner.target) // while (owner->isMissile(!!(flags & CMF_TRACKOWNER)) && owner.target)
										owner = owner.target; // owner = owner->target;
						targ = owner;
						missile.target = owner; // missile->target = owner;
						// automatic handling of seeker missiles
						if (bSEEKERMISSILE & missile.bSEEKERMISSILE) // if (self->flags2 & missile->flags2 & MF2_SEEKERMISSILE)
						{
							missile.tracer = tracer; // missile->tracer = self->tracer;
						}
					}
					else if (missile.bSEEKERMISSILE) // else if (missile->flags2 & MF2_SEEKERMISSILE)
					{
						// automatic handling of seeker missiles
						missile.tracer = target; // missile->tracer = self->target;
					}

					// we must redo the spectral check here because the owner is set after spawning so the FriendPlayer value may be wrong
					if (missile.bSPECTRAL) // if (missile->flags4 & MF4_SPECTRAL)
					{
						if (missile.target != NULL) // if (missile->target != NULL)
						{
							missile.SetFriendPlayer(missile.target.player); // missile->SetFriendPlayer(missile->target->player);
						}
						else
						{
							missile.FriendPlayer = 0; // missile->FriendPlayer = 0;
						}
					}
					CheckMissileSpawn(radius); // P_CheckMissileSpawn(missile, self->radius);
				}
			}
		}
		else if (flags & CMF_CHECKTARGETDEAD)
		{
			// Target is dead and the attack shall be aborted.
			if (SeeState != NULL && (health > 0 || !(bISMONSTER))) // if (self->SeeState != NULL && (self->health > 0 || !(self->flags3 & MF3_ISMONSTER)))
				SetState(SeeState); // self->SetState(self->SeeState);
		}
		return(missile); // ACTION_RETURN_OBJECT(missile);
	}
	
	void A_DVDSCustomMeleeAttack(int damage = 0, string meleesound = "", string misssound = "", string damagetype = "Melee", bool bleed = true)
	{
		if (damagetype == 'None')
						damagetype = 'Melee';	// Melee is the default type

		if (!target) 
						return;

		IsACrisisMeleeAttack = false; //
		let targ = target;
		//
		user_canusecrisisatk = 0;
		if (health <= user_HPLowRange) 
		{ 
			if (health <= user_HPCritRange) 
			{ 
				user_canusecrisisatk = 1; 
				//Console.Printf("user_HPCritRange");
			} 
			else 
			{ 
				if (random(1,4) == 4) user_canusecrisisatk = 1;
				//Console.Printf("user_HPLowRange");
			} 
		}
		if (dvds_monstercrisisattacks == 0) { user_canusecrisisatk = 0; }
		//Console.Printf("user_canusecrisisatk: %d", user_canusecrisisatk);
		if (user_canusecrisisatk)
		{
			A_PlaySound("crisisattack", CHAN_6);
			A_PlaySound("crisisattack2",CHAN_7);
			IsACrisisMeleeAttack = true;
		}
		if (IsACrisisMeleeAttack) damage *= dvds_monstercrisismulti;
		//
    
		A_FaceTarget();
		if (CheckMeleeRange())
		{
			if (meleesound) 
						A_PlaySound(meleesound, CHAN_WEAPON, 1, ATTN_NORM);
			int newdam = target.DamageMobj(self, self, damage, damagetype);
			if (bleed) 
						target.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
		else
		{
			if (misssound) 
						A_PlaySound(misssound, CHAN_WEAPON, 1, ATTN_NORM);
		}
		return;
	}
	
	enum CustomRailgun
	{
		CRF_DONTAIM = 0,
		CRF_AIMPARALLEL = 1,
		CRF_AIMDIRECT = 2,
		CRF_EXPLICITANGLE = 4,
	};
	
	void A_DVDSCustomRailgun(int damage, int spawnofs_xy = 0, color color1 = 0, color color2 = 0, int flags = 0, int aim = 0, double maxdiff = 0, class<Actor> pufftype = "BulletPuff", double spread_xy = 0, double spread_z = 0, double range = 0, int duration = 0, double sparsity = 1.0, double driftspeed = 1.0, class<Actor> spawnclass = null, double spawnofs_z = 0, int spiraloffset = 270, int limit = 0, double veleffect = 3)
	{
		/*
		PARAM_SELF_PROLOGUE(AActor);
		PARAM_INT		(damage);
		PARAM_INT	(spawnofs_xy)		
		PARAM_COLOR	(color1)			
		PARAM_COLOR	(color2)			
		PARAM_INT	(flags)				
		PARAM_INT	(aim)				
		PARAM_FLOAT	(maxdiff)			
		PARAM_CLASS	(pufftype, AActor)	
		PARAM_ANGLE	(spread_xy)			
		PARAM_ANGLE	(spread_z)			
		PARAM_FLOAT	(range)				
		PARAM_INT	(duration)			
		PARAM_FLOAT	(sparsity)			
		PARAM_FLOAT	(driftspeed)		
		PARAM_CLASS	(spawnclass, AActor)
		PARAM_FLOAT	(spawnofs_z)		
		PARAM_INT	(SpiralOffset)		
		PARAM_INT	(limit)				
		PARAM_FLOAT	(veleffect)
		*/
	
		if (range == 0) range = 8192.;
		if (sparsity == 0) sparsity = 1;
	
		FTranslatedLineTarget t;
	
		Vector3 savedpos = (pos.x, pos.y, pos.z); // DVector3 savedpos = self->Pos();
		double saved_angle = Angle; // DAngle saved_angle = self->Angles.Yaw;
		double saved_pitch = Pitch; // DAngle saved_pitch = self->Angles.Pitch;
	
		if (aim && target == NULL) // if (aim && self->target == NULL)
		{
			return; // return 0;
		}
		// [RH] Andy Baker's stealth monsters
		if (bSTEALTH) // if (self->flags & MF_STEALTH)
		{
			visdir = 1; // self->visdir = 1;
		}
	
		flags &= bAMBUSH; // self->flags &= ~MF_AMBUSH;
	
	
		if (aim)
		{
			Angle = AngleTo(target); // self->Angles.Yaw = self->AngleTo(self->target);
		}
		Pitch = AimLineAttack (Angle, MISSILERANGE, t, 60., 0, aim ? target : NULL); // self->Angles.Pitch = P_AimLineAttack (self, self->Angles.Yaw, MISSILERANGE, &t, 60., 0, aim ? self->target : NULL);
		if (t.linetarget == NULL && aim)
		{
			// We probably won't hit the target, but aim at it anyway so we don't look stupid.
			Vector2 xydiff = Vec2To(target); // DVector2 xydiff = self->Vec2To(self->target);
			double zdiff = (target.pos.z + (target.height/2)) - (pos.z + (height/2)) - Floorclip; // double zdiff = self->target->Center() - self->Center() - self->Floorclip;
			Pitch = -VectorAngle(xydiff.Length(), zdiff); // self->Angles.Pitch = -VecToAngle(xydiff.Length(), zdiff);
		}
		// Let the aim trail behind the player
		if (aim)
		{
			let vec = target.Vec2To (self) + (-target.Vel.X * veleffect, -target.Vel.Y * veleffect);  // saved_angle = self->Angles.Yaw = self->AngleTo(self->target, -self->target->Vel.X * veleffect, -self->target->Vel.Y * veleffect);
			saved_angle = angle = VectorAngle (vec.X, vec.Y);
	
			if (aim == CRF_AIMDIRECT)
			{
				// Tricky: We must offset to the angle of the current position
				// but then change the angle again to ensure proper aim.
				Vector3 dpos = (Vec2Offset(spawnofs_xy * Cos(angle), spawnofs_xy * Sin(angle)), pos.z); SetXYZ(dpos); // self->SetXY(self->Vec2Offset(spawnofs_xy * self->Angles.Yaw.Cos(), spawnofs_xy * self->Angles.Yaw.Sin()));
				spawnofs_xy = 0;
				vec = target.Vec2To (self) + (-target.Vel.X * veleffect, -target.Vel.Y * veleffect); // self->Angles.Yaw = self->AngleTo(self->target, -self->target->Vel.X * veleffect, -self->target->Vel.Y * veleffect);
				angle = VectorAngle (vec.X, vec.Y);
				
			}
	
			if (target.bSHADOW) // if (self->target->flags & MF_SHADOW)
			{
				double rnd = Random2[pr_crailgun]() * (45. / 256.); // DAngle rnd = pr_crailgun.Random2() * (45. / 256.);
				angle += rnd; // self->Angles.Yaw += rnd;
			}
		}
	
		if (!(flags & CRF_EXPLICITANGLE))
		{
			spread_xy = spread_xy * Random2[pr_crailgun]() / 255; // spread_xy = spread_xy * pr_crailgun.Random2() / 255;
			spread_z = spread_z * Random2[pr_crailgun]() / 255; // spread_z = spread_z * pr_crailgun.Random2() / 255;
		}
	
		/*
		FRailParams p;
		p.source = self;
		p.damage = damage;
		p.offset_xy = spawnofs_xy;
		p.offset_z = spawnofs_z;
		p.color1 = color1;
		p.color2 = color2;
		p.maxdiff = maxdiff;
		p.flags = flags;
		p.puff = pufftype;
		p.angleoffset = spread_xy;
		p.pitchoffset = spread_z;
		p.distance = range;
		p.duration = duration;
		p.sparsity = sparsity;
		p.drift = driftspeed;
		p.spawnclass = spawnclass;
		p.SpiralOffset = SpiralOffset;
		p.limit = 0;
		P_RailAttack(&p);
		*/
	
		SetXYZ(savedpos); // self->SetXYZ(savedpos);
		angle = saved_angle; // self->Angles.Yaw = saved_angle;
		pitch = saved_pitch; // self->Angles.Pitch = saved_pitch;
		return; // return 0;
	}
	
	
	//****************************
	//*AETHERIUS UNIQUE FUNCTIONS*
	//****************************
	void A_DVDSBossDeath()
	{
		bossdeathactivate++;
		A_BossDeath();
	}

	void A_DVDSPain()
	{
		A_Pain();
		A_RefreshStealthInfo(1);

		if (GetClassName() == "Diabloist" || GetClassName() == "FDiabloist")
		{
			if (bNOTARGETSWITCH) bNOTARGETSWITCH = false;
			if (!bQUICKTORETALIATE) bQUICKTORETALIATE = true;
		}
	}
	
	void A_LegendaryCheck()
	{
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		String nm = "LDLegendaryMonsterPickupEasy";
		LDLPreload = nm;
		
		if (!(GetClassName() == "PeasantNew" || GetClassName() == "Peasant1New" || GetClassName() == "Peasant2New" || GetClassName() == "Peasant3New"
				|| GetClassName() == "Peasant4New" || GetClassName() == "Peasant5New" || GetClassName() == "Peasant6New" || GetClassName() == "Peasant7New"
				|| GetClassName() == "Peasant8New" || GetClassName() == "Peasant9New" || GetClassName() == "Peasant10New" || GetClassName() == "Peasant11New"
				|| GetClassName() == "Peasant12New" || GetClassName() == "Peasant13New" || GetClassName() == "Peasant14New" || GetClassName() == "Peasant15New"
				|| GetClassName() == "Peasant16New" || GetClassName() == "Peasant17New" || GetClassName() == "Peasant18New" || GetClassName() == "Peasant19New"
				|| GetClassName() == "Peasant20New" || GetClassName() == "Peasant21New"|| GetClassName() == "Peasant22New" || GetClassName() == "BeggarNew"
				|| GetClassName() == "Beggar1New" || GetClassName() == "Beggar2New" || GetClassName() == "Beggar3New" || GetClassName() == "Beggar4New"
				|| GetClassName() == "Beggar5New" || GetClassName() == "MerchantNew" || GetClassName() == "WeaponSmithNew" || GetClassName() == "BarKeepNew"
				|| GetClassName() == "ArmorerNew" || GetClassName() == "MedicNew"))
		{
			if (TrueGameSkill <= SKILL_VERY_EASY) { nm = "LDLegendaryMonsterPickupEasy"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_EASY) { nm = "LDLegendaryMonsterPickupNormal"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_NORMAL) { nm = "LDLegendaryMonsterPickupHard"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_HARD) { nm = "LDLegendaryMonsterPickupUV"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_VERY_HARD) { nm = "LDLegendaryMonsterPickupNightmare"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_EXTREME) { nm = "LDLegendaryMonsterPickupExtreme"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_HORRIBLE) { nm = "LDLegendaryMonsterPickupHorrible"; LDLPreload = nm; }
			if (TrueGameSkill == SKILL_IMPOSSIBLE) { nm = "LDLegendaryMonsterPickupImpossible"; LDLPreload = nm; }
			if (TrueGameSkill >= SKILL_OMEGA) { nm = "LDLegendaryMonsterPickupOmega"; LDLPreload = nm; }
			self.A_GiveInventory(LDLPreload,1);

			LDLRerollTimer = 0;
			if (TrueGameSkill <= SKILL_VERY_EASY) rerolldelay = 35 * (LD_restartdelayseconds * 5 / 4);
			if (TrueGameSkill == SKILL_EASY) rerolldelay = 35 * (LD_restartdelayseconds * 9 / 8);
			if (TrueGameSkill == SKILL_NORMAL) rerolldelay = 35 * (LD_restartdelayseconds * 1 / 1);
			if (TrueGameSkill == SKILL_HARD) rerolldelay = 35 * (LD_restartdelayseconds * 7 / 8);
			if (TrueGameSkill == SKILL_VERY_HARD) rerolldelay = 35 * (LD_restartdelayseconds * 3 / 4);
			if (TrueGameSkill == SKILL_EXTREME) rerolldelay = 35 * (LD_restartdelayseconds * 5 / 8);
			if (TrueGameSkill == SKILL_HORRIBLE) rerolldelay = 35 * (LD_restartdelayseconds * 9 / 16);
			if (TrueGameSkill == SKILL_IMPOSSIBLE) rerolldelay = 35 * (LD_restartdelayseconds * 1 / 2);
			if (TrueGameSkill >= SKILL_OMEGA) rerolldelay = 35 * (LD_restartdelayseconds * 7 / 16);
			if (rerolldelay <= 35) rerolldelay = 35;
		}
	}
	
	void A_MonsterStatsHP_ATK_DEF_SPD(int type = 0, int extraflags = 0)
	{
		double MaxHP, MSpeed, Attack, Defense, Balance;
		double PreMaxHP, PreMSpeed, PreAttack, PreDefense, PreBalance;
		double RangeVar;
		int CurrHP, Temp, LevelCheck, MapCheck;
		int StealthChance;
		int nonstatmonster = 0;
		int debugstatcalc = dvdsdebug_showstatcalcstuff;
		int skilllevelcalctype = dvds_skilllevelcalctype;
		int deathkingsmapcalcmod = dvds_deathkingsmapcalcmod;
		int mapcalcfactorexact = 0;
		int mapcalcfactorpercent = 100;
		int BossEyeCheck = 0;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int PlayerLevel = CallACS("StatCheck",0);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		
		if (type < 0) type = 0;
		if (type > 1) type = 1;
		
	
		// extraflags
		// & 1 = Always multiply level by 4 instead of a 1/64 chance of it. [basically "Elitifies" the monster all the time when called]
		// & 2 = Multiplies the monsters' level by 4 [again]

		if (type == 0) // Giving Stats
		{
			if (CountInv("MonsterLevelCalcs") != 0) { if (debugstatcalc) Console.Printf("MonsterLevelCalcs [1]: %d", CountInv("MonsterLevelCalcs")); }
			else
			{
				if (user_checkmapskill > 0) { if (debugstatcalc) Console.Printf("user_checkmapskill [2]: %d", user_checkmapskill); }
				else
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("DSBossEye"); Actor mo; while (mo = Actor(Test1.Next())) { BossEyeCheck++; }
					if (debugstatcalc) Console.Printf("DSBossEye (Check): %d", BossEyeCheck);

					string ActorName = GetClassName();
					if (debugstatcalc) Console.Printf("\ckActorName: %s", ActorName);

					StealthChance = ACS_NamedExecuteWithResult("GetStealthChance");

					nonstatmonster = 0;
					if (ActorName == "PracticeTarget") nonstatmonster = 1;
					if (ActorName == "PracticeTarget2") nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
					if (random(1,256) <= StealthChance && nonstatmonster == 0)
					{
						user_isstealth = 1;
						A_RefreshStealthInfo(0); // Runs to check Stealth information [in case something like finding the Ring has happened]
					}
					else
					{
						user_isstealth = 0;
					}

					//*******************************************************
					//** Calculates Stats By Checking the Difficulty Level **
					//*******************************************************
					int DifficultyChecker = 1;
					if (ModType == 0)
					{
						if (dvds_monsterstatcalc_skill) DifficultyChecker = 1; else DifficultyChecker = 0;
					}
					else DifficultyChecker = 1;

					double SpeedFactor = 0.0;
					double AttackFactor = 0.0;
					double DefenseFactor = 0.0;
					double MaxHPFactor = 0.0;
					double BalanceFactor = 0.0;
					MSpeed = Speed;
					Attack = 1.0; 
					Defense = 1.0; 
					Balance = Mass; 
					MaxHP = SpawnHealth();
					PreMSpeed = MSpeed;
					PreAttack = Attack; 
					PreDefense = Defense; 
					PreBalance = Balance; 
					PreMaxHP = MaxHP;
					user_basespeed = Speed;
					user_basemass = Mass;
					if (debugstatcalc) Console.Printf("\chStart Speed: %8f, \cgStart Attack: %8f, \cdStart Defense: %8f, \caStart Max HP: %d, \cpStart Balance: %d", MSpeed, Attack, Defense, MaxHP, Balance);
					
					nonstatmonster = 0;
					if (ActorName == "PracticeTarget") nonstatmonster = 1;
					if (ActorName == "PracticeTarget2") nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
					if (DifficultyChecker == 1 && nonstatmonster == 0) // Difficulty-checking enabled
					{
						if (TrueGameSkill <= SKILL_VERY_EASY)
						{
							if (skilllevelcalctype == 0) { AttackFactor = -0.3333; DefenseFactor = 0.5000; SpeedFactor = -0.083334; MaxHPFactor = -0.15; BalanceFactor = -0.3333; }
							else { AttackFactor = -0.1667; DefenseFactor = 0.2000; SpeedFactor = -0.041667; MaxHPFactor = -0.075; BalanceFactor = -0.1667; }
						}
						else
						if (TrueGameSkill == SKILL_EASY)
						{
							if (skilllevelcalctype == 0) { AttackFactor = -0.1667; DefenseFactor = 0.2000; SpeedFactor = -0.041667; MaxHPFactor = -0.05; BalanceFactor = -0.1667; }
							else { AttackFactor = -0.08333; DefenseFactor = 0.090909; SpeedFactor = -0.0208333; MaxHPFactor = -0.025; BalanceFactor = -0.08333; }
						}
						else
						if (TrueGameSkill == SKILL_NORMAL)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 0.0; DefenseFactor = 0.0; SpeedFactor = 0.0; MaxHPFactor = 0.0; BalanceFactor = 0.0; }
							else { AttackFactor = 0.0; DefenseFactor = 0.0; SpeedFactor = 0.0; MaxHPFactor = 0.0; BalanceFactor = 0.0; }
						}
						else
						if (TrueGameSkill == SKILL_HARD)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 0.1667; DefenseFactor = -0.142857; SpeedFactor = 0.041667; MaxHPFactor = 0.05; BalanceFactor = 0.1667; }
							else { AttackFactor = 0.08333; DefenseFactor = -0.076924; SpeedFactor = 0.0208325; MaxHPFactor = 0.0375; BalanceFactor = 0.08333; }
						}
						else
						if (TrueGameSkill == SKILL_VERY_HARD)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 0.5; DefenseFactor = -0.333334; SpeedFactor = 0.125; MaxHPFactor = 0.15; BalanceFactor = 0.5; }
							else { AttackFactor = 0.2; DefenseFactor = -0.1667; SpeedFactor = 0.05; MaxHPFactor = 0.10; BalanceFactor = 0.2; }
						}
						else
						if (TrueGameSkill == SKILL_EXTREME)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 1.0; DefenseFactor = -0.5; SpeedFactor = 0.25; MaxHPFactor = 0.30; BalanceFactor = 1.0; }
							else { AttackFactor = 0.5; DefenseFactor = -0.3333; SpeedFactor = 0.125; MaxHPFactor = 0.225; BalanceFactor = 0.5; }
						}
						else
						if (TrueGameSkill == SKILL_HORRIBLE)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 1.2; DefenseFactor = -0.6666; SpeedFactor = 0.325; MaxHPFactor = 0.40; BalanceFactor = 1.25; }
							else { AttackFactor = 0.6; DefenseFactor = -0.3333; SpeedFactor = 0.1625; MaxHPFactor = 0.30; BalanceFactor = 0.625; }
						}
						else
						if (TrueGameSkill == SKILL_IMPOSSIBLE)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 1.35; DefenseFactor = -0.75; SpeedFactor = 0.40; MaxHPFactor = 0.45; BalanceFactor = 1.5; }
							else { AttackFactor = 0.675; DefenseFactor = -0.375; SpeedFactor = 0.20; MaxHPFactor = 0.3375; BalanceFactor = 0.75; }
						}
						else
						if (TrueGameSkill >= SKILL_OMEGA)
						{
							if (skilllevelcalctype == 0) { AttackFactor = 1.5; DefenseFactor = -0.825; SpeedFactor = 0.50; MaxHPFactor = 0.55; BalanceFactor = 1.625; }
							else { AttackFactor = 0.75; DefenseFactor = -0.4125; SpeedFactor = 0.25; MaxHPFactor = 0.4125; BalanceFactor = 0.8125; }
						}
						if (debugstatcalc) Console.Printf("\cgAttackFactor [Skill]: %8f, \cdDefenseFactor [Skill]: %8f, \chSpeedFactor [Skill]: %8f, \caMaxHPFactor [Skill]: %8f, \cpBalanceFactor [Skill]: %8f", AttackFactor, DefenseFactor, SpeedFactor, MaxHPFactor, BalanceFactor);

						SpeedFactor *= dvds_monsterspeedratio_skill;
						if (SpeedFactor < -4.00) SpeedFactor = -4.00;
						if (SpeedFactor > 4.00) SpeedFactor = 4.00;
						MSpeed *= (1.0 + SpeedFactor);
						Speed = MSpeed;
					
						AttackFactor *= dvds_monsterattackratio_skill;
						if (AttackFactor < -4.00) AttackFactor = -4.00;
						if (AttackFactor > 4.00) AttackFactor = 4.00;
						Attack *= (1.0 + AttackFactor);
						DamageMultiply = Attack;
					
						DefenseFactor *= dvds_monsterdefenseratio_skill;
						if (DefenseFactor < -4.00) DefenseFactor = -4.00;
						if (DefenseFactor > 4.00) DefenseFactor = 4.00;
						Defense *= (1.0 + DefenseFactor);
						DamageFactor = Defense; 
					
						MaxHPFactor *= dvds_monstermaxhpratio_skill;
						if (MaxHPFactor < -4.00) MaxHPFactor = -4.00;
						if (MaxHPFactor > 4.00) MaxHPFactor = 4.00;
						MaxHP *= (1.0 + MaxHPFactor);
					
						BalanceFactor *= dvds_monsterbalanceratio_skill;
						if (BalanceFactor < -4.00) BalanceFactor = -4.00;
						if (BalanceFactor > 4.00) BalanceFactor = 4.00;
						Balance *= (1.0 + BalanceFactor);
						Mass = Balance;
					
						if (Attack < 0.005) Attack = 0.005;
						if (Attack > 20.00) Attack = 20.00;
						if (Defense < 0.005) Defense = 0.005;
						if (Defense > 20.00) Defense = 20.00;
						if (Balance < 1) Balance = 1;
						if (Balance > 2500000) Balance = 2500000;
						if (MaxHP < 1) MaxHP = 1;
						if (MaxHP > 2147483647) MaxHP = 2147483647;
					
						if (debugstatcalc)
						{
							Console.Printf("\chSpeedFactor [Skill]: %8f, Speed After Skill: %8f (%8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
							Console.Printf("\cgAttackFactor [Skill]: %8f, Attack After Skill: %8f (%8f)", (1.0 + AttackFactor), Attack, PreAttack);
							Console.Printf("\cdDefenseFactor [Skill]: %8f, Defense After Skill: %8f (%8f)", (1.0 + DefenseFactor), Defense, PreDefense);
							Console.Printf("\caMaxHPFactor [Skill]: %8f, MaxHP After Skill: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
							Console.Printf("\cpBalanceFactor [Skill]: %8f, Balance After Skill: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
						}
					}
					//*************************************************
					//** Calculates Stats By Checking the Map Number **
					//*************************************************
					int MapChecker = 1;
					if (ModType == 0)
					{
						if (dvds_monsterstatcalc_maps) MapChecker = 1; else MapChecker = 0;
					}
					else MapChecker = 1;

					nonstatmonster = 0;
					if (ActorName == "PracticeTarget") nonstatmonster = 1;
					if (ActorName == "PracticeTarget2") nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
					if (MapChecker == 1 && nonstatmonster == 0) // Map-checking enabled
					{
						PreMSpeed = MSpeed;
						PreAttack = Attack; 
						PreDefense = Defense; 
						PreBalance = Balance; 
						PreMaxHP = MaxHP;
						if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
						{
							if (ClassicDoomType == 1 || ClassicDoomType == 2) // Doom 1 / Heretic [ExMx system]
							{
								MapCheck = level.levelnum;
								if (CallACS("MiscVarCheckDECORATE",259) > 0) MapCheck += deathkingsmapcalcmod;
								MapCheck += CallACS("MiscVarCheckDECORATE",53); // Map Inflation [Stats - Exact]
								MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
								MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",2) / 100; // Map Inflation [Stats - Percentile]
								MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
								if (MapCheck < 1) MapCheck = 1;
								if (MapCheck > 100) MapCheck = 100;
						
								AttackFactor = 0.0;
								if (MapCheck > 1) AttackFactor += (0.02 * (MapCheck - 1));
								if (MapCheck > 2) AttackFactor += (0.001 * (MapCheck - 2));
								if (MapCheck >= 1 && MapCheck <= 10) AttackFactor *= 1.0125;
								if (MapCheck >= 11 && MapCheck <= 20) AttackFactor *= 1.025;
								if (MapCheck >= 21 && MapCheck <= 30) AttackFactor *= 1.0375;
								if (MapCheck >= 31 && MapCheck <= 40) AttackFactor *= 1.05;
								if (MapCheck >= 41 && MapCheck <= 50) AttackFactor *= 1.0625;
								if (MapCheck >= 51 && MapCheck <= 60) AttackFactor *= 1.075;
								if (MapCheck >= 61 && MapCheck <= 70) AttackFactor *= 1.0875;
								if (MapCheck >= 71 && MapCheck <= 80) AttackFactor *= 1.1;
								if (MapCheck >= 81 && MapCheck <= 90) AttackFactor *= 1.1125;
								if (MapCheck >= 91) AttackFactor *= 1.25;
						
								DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
								DefenseFactor -= 1.0;
						
								SpeedFactor = AttackFactor / 4.0;
						
								MaxHPFactor = AttackFactor;
						
								BalanceFactor = AttackFactor;
							}
							else // Doom 2 / Hexen / Strife / Doom64 / PSXDoom [MAPxx system]
							{
								MapCheck = level.levelnum;
								if (CallACS("MiscVarCheckDECORATE",259) > 0) MapCheck += deathkingsmapcalcmod;
								MapCheck += CallACS("MiscVarCheckDECORATE",53); // Map Inflation [Stats - Exact]
								MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
								MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",2) / 100; // Map Inflation [Stats - Percentile]
								MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
								if (MapCheck < 1) MapCheck = 1;
								if (MapCheck > 100) MapCheck = 100;
						
								AttackFactor = 0.0;
								if (MapCheck > 1) AttackFactor += (0.025 * (MapCheck - 1));
						
								if (MapCheck >= 1 && MapCheck <= 6) AttackFactor *= 1.0125;
								if (MapCheck >= 7 && MapCheck <= 11) AttackFactor *= 1.025;
								if (MapCheck >= 12 && MapCheck <= 20) AttackFactor *= 1.0375;
								if (MapCheck == 31) AttackFactor *= 1.0375;
								if (MapCheck == 32) AttackFactor *= 1.0375;
								if (MapCheck >= 21 && MapCheck <= 30) AttackFactor *= 1.05;
								if (MapCheck >= 33 && MapCheck <= 40) AttackFactor *= 1.0625;
								if (MapCheck >= 41 && MapCheck <= 50) AttackFactor *= 1.075;
								if (MapCheck >= 51 && MapCheck <= 60) AttackFactor *= 1.0875;
								if (MapCheck >= 61 && MapCheck <= 70) AttackFactor *= 1.10;
								if (MapCheck >= 71 && MapCheck <= 80) AttackFactor *= 1.125;
								if (MapCheck >= 81 && MapCheck <= 90) AttackFactor *= 1.25;
								if (MapCheck >= 91) AttackFactor *= 1.375;
						
								DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
								DefenseFactor -= 1.0;
						
								SpeedFactor = AttackFactor / 4.0;
						
								MaxHPFactor = AttackFactor;
						
								BalanceFactor = AttackFactor;
							}
						}

						nonstatmonster = 0;
						if (ActorName == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "PracticeTarget2") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (ModType == 1 && nonstatmonster == 0) // Deus Vult 1
						{
							MapCheck = level.levelnum;
							if (MapCheck < 1101) MapCheck = 1101;
							if (MapCheck > 1104) MapCheck = 1104;
					
							AttackFactor = 0.0;
							if (MapCheck == 1101) AttackFactor = 0.0; // MAP01 - Insurgents
							if (MapCheck == 1102) AttackFactor = 0.25; // MAP02 - Torture Chamber
							if (MapCheck == 1103) AttackFactor = 0.75; // MAP03 - Cathedral
							if (MapCheck == 1104) AttackFactor = 1.5; // MAP04 - End Of Days
					
							DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
							DefenseFactor -= 1.0;
					
							SpeedFactor = AttackFactor / 4.0;
					
							MaxHPFactor = AttackFactor / 2.0;
					
							BalanceFactor = AttackFactor / 2.0;
						}
						
						if (ModType == 2 && (ActorName != "PracticeTarget" || ActorName != "PracticeTarget2")) // Deus Vult 2
						{
							MapCheck = level.levelnum;
							if (MapCheck < 1201) MapCheck = 1201;
							if (MapCheck > 1212) MapCheck = 1212;
					
							// Earth-type Levels
							if (MapCheck == 1201) // MAP01 - Entryway Pass
							{
								AttackFactor = 0.0; DefenseFactor = 0.0; SpeedFactor = 0.0; MaxHPFactor = 0.0; BalanceFactor = 0.0;
							}
							else
							if (MapCheck == 1202) // MAP02 - Mutagen
							{
								AttackFactor = 0.03; DefenseFactor = -0.029126; SpeedFactor = 0.0075; MaxHPFactor = 0.06; BalanceFactor = 0.03;
							}
							else
							if (MapCheck == 1203) // MAP03 - Crouching Demon, Hidden Archvile
							{
								AttackFactor = 0.09; DefenseFactor = -0.082569; SpeedFactor = 0.0225; MaxHPFactor = 0.12; BalanceFactor = 0.09;
							}
							else
							if (MapCheck == 1204) // MAP04 - Minas Morgul
							{
								AttackFactor = 0.18; DefenseFactor = -0.152542; SpeedFactor = 0.045; MaxHPFactor = 0.19; BalanceFactor = 0.18;
							}
							else
							if (MapCheck == 1205) // MAP05 - Eagle's Nest
							{
								AttackFactor = 0.30; DefenseFactor = -0.230769; SpeedFactor = 0.075; MaxHPFactor = 0.26; BalanceFactor = 0.30;
							}
							else
							if (MapCheck == 1206) // MAP05S - The Manliest Level Ever
							{
								AttackFactor = 0.45; DefenseFactor = -0.310345; SpeedFactor = 0.1125; MaxHPFactor = 0.34; BalanceFactor = 0.45;
							}
							else
							if (MapCheck == 1207) // MAP06 - Stargate
							{
								AttackFactor = 0.63; DefenseFactor = -0.386503; SpeedFactor = 0.1575; MaxHPFactor = 0.42; BalanceFactor = 0.63;
							}
							else
							if (MapCheck == 1208) // MAP07 - The Desert Temple
							{
								AttackFactor = 0.84; DefenseFactor = -0.456522; SpeedFactor = 0.21; MaxHPFactor = 0.50; BalanceFactor = 0.84;
							}
							else
							// Hell Levels
							if (MapCheck == 1209) // MAP08 - The Unholy Cathedral
							{
								AttackFactor = 1.14; DefenseFactor = -0.53271; SpeedFactor = 0.285; MaxHPFactor = 0.77; BalanceFactor = 1.14;
							}
							else
							if (MapCheck == 1210) // DV2M09 - You Shall Not Pass!
							{
								AttackFactor = 1.53; DefenseFactor = -0.604743; SpeedFactor = 0.3825; MaxHPFactor = 1.09; BalanceFactor = 1.53;
							}
							else
							if (MapCheck == 1211) // DV2M10 - Hell's Vendetta
							{
								AttackFactor = 2.01; DefenseFactor = -0.667774; SpeedFactor = 0.5025; MaxHPFactor = 1.48; BalanceFactor = 2.01;
							}
							else
							if (MapCheck == 1212) // DV2M10B - attedneV s'lleH
							{
								AttackFactor = 2.58; DefenseFactor = -0.72067; SpeedFactor = 0.645; MaxHPFactor = 1.92; BalanceFactor = 2.58;
							}
							else
							if (MapCheck == 1214) // DV2M12 - "The Wings of The Maiar" [DVI combined level remake]
							{
								AttackFactor = 1.56; DefenseFactor = -0.609375; SpeedFactor = 0.39; MaxHPFactor = 1.41; BalanceFactor = 1.56;
							}
							else
							if (MapCheck == 1215) // DV2M10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
							{
								AttackFactor = 2.58; DefenseFactor = -0.72067; SpeedFactor = 0.645; MaxHPFactor = 1.92; BalanceFactor = 2.58;
							}
						}
						if (debugstatcalc) Console.Printf("\cx[MAP] \czMapCheck: %d, \chSpeedFactor: %8f, \cgAttackFactor: %8f, \cdDefenseFactor: %8f, \caMaxHPFactor: %8f, \cpBalanceFactor: %8f", MapCheck, SpeedFactor, AttackFactor, DefenseFactor, MaxHPFactor, BalanceFactor);

						SpeedFactor *= dvds_monsterspeedratio_maps;
						if (SpeedFactor < -4.00) SpeedFactor = -4.00;
						if (SpeedFactor > 4.00) SpeedFactor = 4.00;
						MSpeed *= (1.0 + SpeedFactor);
						Speed = MSpeed;
					
						AttackFactor *= dvds_monsterattackratio_maps;
						if (AttackFactor < -4.00) AttackFactor = -4.00;
						if (AttackFactor > 4.00) AttackFactor = 4.00;
						Attack *= (1.0 + AttackFactor);
						DamageMultiply = Attack;
					
						DefenseFactor *= dvds_monsterdefenseratio_maps;
						if (DefenseFactor < -4.00) DefenseFactor = -4.00;
						if (DefenseFactor > 4.00) DefenseFactor = 4.00;
						Defense *= (1.0 + DefenseFactor);
						DamageFactor = Defense; 
					
						MaxHPFactor *= dvds_monstermaxhpratio_maps;
						if (MaxHPFactor < -4.00) MaxHPFactor = -4.00;
						if (MaxHPFactor > 4.00) MaxHPFactor = 4.00;
						MaxHP *= (1.0 + MaxHPFactor);
					
						BalanceFactor *= dvds_monsterbalanceratio_maps;
						if (BalanceFactor < -4.00) BalanceFactor = -4.00;
						if (BalanceFactor > 4.00) BalanceFactor = 4.00;
						Balance *= (1.0 + BalanceFactor);
						Mass = Balance;
					
						if (Attack < 0.0025) Attack = 0.0025;
						if (Attack > 40.00) Attack = 40.00;
						if (Defense < 0.0025) Defense = 0.0025;
						if (Defense > 40.00) Defense = 40.00;
						if (Balance < 1) Balance = 1;
						if (Balance > 5000000) Balance = 5000000;
						if (MaxHP < 1) MaxHP = 1;
						if (MaxHP > 2147483647) MaxHP = 2147483647;
					
						if (debugstatcalc)
						{
							Console.Printf("\chSpeedFactor [MAP]: %8f, Speed After Map: %8f (%8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
							Console.Printf("\cgAttackFactor [MAP]: %8f, Attack After Map: %8f (%8f)", (1.0 + AttackFactor), Attack, PreAttack);
							Console.Printf("\cdDefenseFactor [MAP]: %8f, Defense After Map: %8f (%8f)", (1.0 + DefenseFactor), Defense, PreDefense);
							Console.Printf("\caMaxHPFactor [MAP]: %8f, MaxHP After Map: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
							Console.Printf("\cpBalanceFactor [MAP]: %8f, Balance After Map: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
						}
					}

					//*****************************************************************
					//** Calculates Stats [and Level] By Checking the Player's Level **
					//*****************************************************************
					int LevelErrorRange;
					double LevelBaseMulti = 0.00375;
					if (TrueGameSkill <= SKILL_VERY_EASY) LevelBaseMulti = 0.00225;
					if (TrueGameSkill == SKILL_EASY) LevelBaseMulti = 0.003;
					if (TrueGameSkill == SKILL_NORMAL) LevelBaseMulti = 0.00375;
					if (TrueGameSkill == SKILL_HARD) LevelBaseMulti = 0.0045;
					if (TrueGameSkill == SKILL_VERY_HARD) LevelBaseMulti = 0.00525;
					if (TrueGameSkill == SKILL_EXTREME) LevelBaseMulti = 0.006;
					if (TrueGameSkill == SKILL_HORRIBLE) LevelBaseMulti = 0.00675;
					if (TrueGameSkill == SKILL_IMPOSSIBLE) LevelBaseMulti = 0.0075;
					if (TrueGameSkill >= SKILL_OMEGA) LevelBaseMulti = 0.00875;
					LevelBaseMulti *= dvds_monsterlevelstatfactor;
				
					int LevelChecker = 1;
					int LevelDifficultyInflation = dvds_leveldifficultyinflation;
					if (LevelDifficultyInflation < -2000) LevelDifficultyInflation = -2000;
					if (LevelDifficultyInflation > 2000) LevelDifficultyInflation = 2000;
					int LevelDifficultyInflationPercent = dvds_leveldifficultyinflation2;
					if (LevelDifficultyInflationPercent < -100) LevelDifficultyInflationPercent = -100;
					if (LevelDifficultyInflationPercent > 2000) LevelDifficultyInflationPercent = 2000;
				
					if (ModType == 0)
					{
						if (dvds_monsterstatcalc_levels) LevelChecker = 1; else LevelChecker = 0;
					}
					else LevelChecker = 1;
				
					nonstatmonster = 0;
					if (ActorName == "PracticeTarget") nonstatmonster = 1;
					if (ActorName == "PracticeTarget2") nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
					if (LevelChecker == 1 && nonstatmonster == 0)
					{
						PreMSpeed = MSpeed;
						PreAttack = Attack; 
						PreDefense = Defense; 
						PreBalance = Balance; 
						PreMaxHP = MaxHP;
						LevelCheck = user_presetleveladd; // Checks the "Preset" strength of a monster
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [PresetLevel Add]: %d (Add: %d)", LevelCheck, user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2);

						LevelCheck += random(user_presetlevelrand1,user_presetlevelrand2); // Checks the "Preset" strength of a monster
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [PresetLevel Rand]: %d (Error: +%d to %d)", LevelCheck, user_presetlevelrand1, user_presetlevelrand2);

						LevelCheck += PlayerLevel;
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [PlayerLevel Check]: %d (PlayLvl: +%d)", LevelCheck, PlayerLevel);
				
						LevelCheck += user_ressurrectstr; // Checks the "Resurrect" strength of a monster [Clay Devils in TCOTD:A get stronger each time they resurrect]
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [ResurrectStr Check]: %d (ResStr: +%d)", LevelCheck, user_ressurrectstr);
			
						LevelCheck += LevelDifficultyInflation;
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d)", LevelCheck, LevelDifficultyInflation);
			
						LevelCheck = LevelCheck * (100 + LevelDifficultyInflationPercent) / 100;
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%)", LevelCheck, (100 + LevelDifficultyInflationPercent));
						
						LevelErrorRange = LevelCheck * 0.1667;
						if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
						LevelCheck += random(-LevelErrorRange,LevelErrorRange);
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [error-range]: %d (Error Range: +-%d)", LevelCheck, LevelErrorRange);
						
						int PreviousLevelCheck = LevelCheck;
						if (ModType == 1) // DV1 [general]
						{
							LevelCheck += random(0,10);
						}
						else
						if (ModType == 2) // DV2 [general]
						{
							if (MapCheck >= 1209 && MapCheck <= 1215) // DV2's Hell Levels
							{
								LevelCheck += random(10,25);
							}
							else
							{
								LevelCheck += random(0,10);
							}
						}
						else // Normal Mode
						{
							// Specfic Actors
							if (ActorName == "RebelNew") LevelCheck += random(-3,7);
							if (ActorName == "Rebel1New") LevelCheck += random(-3,7);
							if (ActorName == "Rebel2New") LevelCheck += random(-3,7);
							if (ActorName == "Rebel3New") LevelCheck += random(-3,7);
							if (ActorName == "Rebel4New") LevelCheck += random(-3,7);
							if (ActorName == "Rebel5New") LevelCheck += random(-3,7);
							if (ActorName == "Rebel6New") LevelCheck += random(-3,7);
					
							// Specfic Monsters
							// Mini-Boss
							if (ActorName == "DSSpiderMastermind") LevelCheck += random(3,6);
							if (ActorName == "Demolisher") LevelCheck += random(3,6);
							if (ActorName == "DSCyberdemon") LevelCheck += random(3,6);
							if (ActorName == "Annihilator") LevelCheck += random(3,6);
							if (ActorName == "MaulotaurNew") LevelCheck += random(3,6);
					
							// Specfic Bosses
							// Tier 1 Boss
							if (ActorName == "DSparilMountedNew") LevelCheck += random(9,18);
							if (ActorName == "FighterBossNew") LevelCheck += random(9,18);
							if (ActorName == "ClericBossNew") LevelCheck += random(9,18);
							if (ActorName == "MagicBossNew") LevelCheck += random(9,18);
							if (ActorName == "ProgrammerNew") LevelCheck += random(9,18);
							if (ActorName == "StrifeBishopNew") LevelCheck += random(9,18);
							if (ActorName == "OracleNew") LevelCheck += random(9,18);
							if (ActorName == "Macil1New") LevelCheck += random(9,18);
							if (ActorName == "Macil2New") LevelCheck += random(9,18);
							if (ActorName == "LoremasterNew") LevelCheck += random(9,18);
							// Tier 2 Boss
							if (ActorName == "DSBossBrain") { LevelCheck += random(15,30); Thing_ChangeTID(0,1222); }
							if (ActorName == "AlienSpectre1New") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre2New") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre3New") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre4New") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre5New") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre1Model") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre2Model") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre3Model") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre4Model") LevelCheck += random(15,30);
							if (ActorName == "AlienSpectre5Model") LevelCheck += random(15,30);
							if (ActorName == "SourceGuardian") LevelCheck += random(15,30);
							// Tier 3 Boss
							if (ActorName == "DSparilUnmountedNew") LevelCheck += random(23,45);
							if (ActorName == "Zakachi") LevelCheck += random(23,45);
							if (ActorName == "KoraxNew") LevelCheck += random(23,45);
							if (ActorName == "ThamuzNew") LevelCheck += random(23,45);
							if (ActorName == "AvatarNew") LevelCheck += random(23,45);
							if (ActorName == "TchernobogNew") LevelCheck += random(23,45);
							if (ActorName == "AdolfHitlerDS") LevelCheck += random(23,45);
							if (ActorName == "DSMotherDemon64") LevelCheck += random(23,45);
							// Tier 4 Boss
							if (ActorName == "EntityBossNew") LevelCheck += random(37,75);
							if (ActorName == "EntitySecondNew") LevelCheck += random(37,75);
							if (ActorName == "PennywiseBoss") LevelCheck += random(37,75);
							if (ActorName == "Sauravatar") LevelCheck += random(37,75);
							if (ActorName == "TheSource") LevelCheck += random(37,75);
							// Tier 5 Boss
							if (ActorName == "EntityAscended") LevelCheck += random(75,112);
							// Oddball Tier Boss
							if (ActorName == "Benellus1DS") LevelCheck += random(37,75);
							if (ActorName == "Benellus2DS") LevelCheck += random(42,80);
							if (ActorName == "Benellus3DS") LevelCheck += random(47,85);
							if (ActorName == "Magmantis") LevelCheck += random(52,75);
						}
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [actor-check: %s]: %d (Previous: %d)", ActorName, LevelCheck, PreviousLevelCheck);
	
						// Check if the actor is one of Strife's Peasents [and if so, cancel out most level additions and divide their level by 4]
						int IsAPeasent = 0;
						If (ActorName == "PeasantNew") IsAPeasent++;
						If (ActorName == "Peasant1New") IsAPeasent++;
						If (ActorName == "Peasant2New") IsAPeasent++;
						If (ActorName == "Peasant3New") IsAPeasent++;
						If (ActorName == "Peasant4New") IsAPeasent++;
						If (ActorName == "Peasant5New") IsAPeasent++;
						If (ActorName == "Peasant6New") IsAPeasent++;
						If (ActorName == "Peasant7New") IsAPeasent++;
						If (ActorName == "Peasant8New") IsAPeasent++;
						If (ActorName == "Peasant9New") IsAPeasent++;
						If (ActorName == "Peasant10New") IsAPeasent++;
						If (ActorName == "Peasant11New") IsAPeasent++;
						If (ActorName == "Peasant12New") IsAPeasent++;
						If (ActorName == "Peasant13New") IsAPeasent++;
						If (ActorName == "Peasant14New") IsAPeasent++;
						If (ActorName == "Peasant15New") IsAPeasent++;
						If (ActorName == "Peasant16New") IsAPeasent++;
						If (ActorName == "Peasant17New") IsAPeasent++;
						If (ActorName == "Peasant18New") IsAPeasent++;
						If (ActorName == "Peasant19New") IsAPeasent++;
						If (ActorName == "Peasant20New") IsAPeasent++;
						If (ActorName == "Peasant21New") IsAPeasent++;
						If (ActorName == "Peasant22New") IsAPeasent++;
						If (ActorName == "BeggarNew") IsAPeasent++;
						If (ActorName == "Beggar1New") IsAPeasent++;
						If (ActorName == "Beggar2New") IsAPeasent++;
						If (ActorName == "Beggar3New") IsAPeasent++;
						If (ActorName == "Beggar4New") IsAPeasent++;
						If (ActorName == "Beggar5New") IsAPeasent++;
						If (ActorName == "MerchantNew") IsAPeasent++;
						If (ActorName == "WeaponSmithNew") IsAPeasent++;
						If (ActorName == "BarKeepNew") IsAPeasent++;
						If (ActorName == "ArmorerNew") IsAPeasent++;
						If (ActorName == "MedicNew") IsAPeasent++;
						
						If (IsAPeasent > 0) LevelCheck /= 4;
						else
						{
							if (random(1,10) <= 1)
							{
								if (random(1,10) <= 1)
								{
									if (random(1,10) <= 1)
									{
										LevelCheck += random(64,96);
									}
									else
									{
										LevelCheck += random(16,24);
									}
								}
								else
								{
									LevelCheck += random(4,6);
								}
							}
							if (extraflags & 1) { LevelCheck *= 4; } else { if (random(1,64) == 1) LevelCheck *= 4; }
							if (extraflags & 2) { LevelCheck *= 4; }
						}
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [peasent-checking]: %d, (IsAPeasent: %d)", LevelCheck, IsAPeasent);
						
						PreviousLevelCheck = LevelCheck;
						if (LevelCheck < 0) LevelCheck = 0;
						if (LevelCheck > 2000) LevelCheck = 2000;
						if (debugstatcalc) Console.Printf("\ckMonsterLevel [final calc]: %d (Previous: %d)", LevelCheck, PreviousLevelCheck);
						user_monsterlevel = LevelCheck;
						
						AttackFactor = 0.0;
						if (LevelCheck > 0) AttackFactor += (LevelBaseMulti * (LevelCheck));
				
						DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
						DefenseFactor -= 1.0;
				
						SpeedFactor = AttackFactor / 4.0;
				
						MaxHPFactor = AttackFactor;
				
						BalanceFactor = AttackFactor;
				
						if (debugstatcalc) Console.Printf("\cgAttackFactor [MonLevel]: %8f, \cdDefenseFactor [MonLevel]: %8f, \chSpeedFactor [MonLevel]: %8f, \caMaxHPFactor [MonLevel]: %8f, \cpBalanceFactor [MonLevel]: %8f", AttackFactor, DefenseFactor, SpeedFactor, MaxHPFactor, BalanceFactor);
						
						SpeedFactor *= dvds_monsterspeedratio_levels;
						if (SpeedFactor < -4.00) SpeedFactor = -4.00;
						if (SpeedFactor > 4.00) SpeedFactor = 4.00;
						MSpeed *= (1.0 + SpeedFactor);
						Speed = MSpeed;
					
						AttackFactor *= dvds_monsterattackratio_levels;
						if (AttackFactor < -4.00) AttackFactor = -4.00;
						if (AttackFactor > 4.00) AttackFactor = 4.00;
						Attack *= (1.0 + AttackFactor);
						DamageMultiply = Attack;
					
						DefenseFactor *= dvds_monsterdefenseratio_levels;
						if (DefenseFactor < -4.00) DefenseFactor = -4.00;
						if (DefenseFactor > 4.00) DefenseFactor = 4.00;
						Defense *= (1.0 + DefenseFactor);
						DamageFactor = Defense; 
					
						MaxHPFactor *= dvds_monstermaxhpratio_levels;
						if (MaxHPFactor < -4.00) MaxHPFactor = -4.00;
						if (MaxHPFactor > 4.00) MaxHPFactor = 4.00;
						MaxHP *= (1.0 + MaxHPFactor);
					
						BalanceFactor *= dvds_monsterbalanceratio_levels;
						if (BalanceFactor < -4.00) BalanceFactor = -4.00;
						if (BalanceFactor > 4.00) BalanceFactor = 4.00;
						Balance *= (1.0 + BalanceFactor);
						Mass = Balance;
					
						if (Attack < 0.005) Attack = 0.005;
						if (Attack > 20.00) Attack = 20.00;
						if (Defense < 0.005) Defense = 0.005;
						if (Defense > 20.00) Defense = 20.00;
						if (Balance < 1) Balance = 1;
						if (Balance > 5000000) Balance = 5000000;
						if (MaxHP < 1) MaxHP = 1;
						if (MaxHP > 2147483647) MaxHP = 2147483647;
					
						if (debugstatcalc)
						{
							Console.Printf("\chSpeedFactor [LEVELS]: %8f, Speed After Levels: %8f (%8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
							Console.Printf("\cgAttackFactor [LEVELS]: %8f, Attack After Levels: %8f (%8f)", (1.0 + AttackFactor), Attack, PreAttack);
							Console.Printf("\cdDefenseFactor [LEVELS]: %8f, Defense After Levels: %8f (%8f)", (1.0 + DefenseFactor), Defense, PreDefense);
							Console.Printf("\caMaxHPFactor [LEVELS]: %8f, MaxHP After Levels: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
							Console.Printf("\cpBalanceFactor [LEVELS]: %8f, Balance After Levels: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
						}
					}
					
					//**********************************************
					//** Calculates Stats Based on Varience/Error **
					//**********************************************
					int ErrorChecker = 1;
					if (ModType == 0)
					{
						if (dvds_monsterstatcalc_varience > 0) ErrorChecker = 1; else ErrorChecker = 0;
					}
					else ErrorChecker = 1;
				
					nonstatmonster = 0;
					if (ActorName == "PracticeTarget") nonstatmonster = 1;
					if (ActorName == "PracticeTarget2") nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
					if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
					if (ErrorChecker == 1 && nonstatmonster == 0)
					{
						PreMSpeed = MSpeed;
						PreAttack = Attack; 
						PreDefense = Defense; 
						PreBalance = Balance; 
						PreMaxHP = MaxHP;
						// HP Error
						double MaxHPErrorRange = (MaxHP * dvds_monstermaxhpvarience);
						MaxHP += random(-MaxHPErrorRange,MaxHPErrorRange);
						if (MaxHP < 1) MaxHP = 1;
					
						double SpeedErrorRange = (MSpeed * dvds_monsterspeedvarience);
						MSpeed += frandom(-SpeedErrorRange,SpeedErrorRange);
						Speed = MSpeed; //Set's Final Speed values
					
						double AttackErrorRange = (Attack * dvds_monsterattackvarience);
						Attack += frandom(-AttackErrorRange,AttackErrorRange);
						DamageMultiply = Attack;
					
						double DefenseErrorRange = (Defense * dvds_monsterdefensevarience);
						Defense += frandom(-DefenseErrorRange,DefenseErrorRange);
						DamageFactor = Defense;
					
						double BalanceErrorRange = (Balance * dvds_monsterbalancevarience);
						Balance += random(-BalanceErrorRange,BalanceErrorRange);
						Mass = Balance; 
					
						if (debugstatcalc) 
						{
							Console.Printf("\caMaxHP Error Range: %d, \chSpeed Error Range: %8f, \cgAttack Error Range: %8f, \cdDefense Error Range: %8f, \cpBalance Error Range: %8f", MaxHPErrorRange, SpeedErrorRange, AttackErrorRange, DefenseErrorRange, BalanceErrorRange);
							Console.Printf("\chSpeedFactor [ERROR]: %8f, Speed After Error: %8f (%8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
							Console.Printf("\cgAttackFactor [ERROR]: %8f, Attack After Error: %8f (%8f)", (1.0 + AttackFactor), Attack, PreAttack);
							Console.Printf("\cdDefenseFactor [ERROR]: %8f, Defense After Error: %8f (%8f)", (1.0 + DefenseFactor), Defense, PreDefense);
							Console.Printf("\caMaxHPFactor [ERROR]: %8f, MaxHP After Error: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
							Console.Printf("\cpBalanceFactor [ERROR]: %8f, Balance After Error: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
						}
					}
					
					//****************************
					//** Specialized Situations **
					//****************************
					// Strife Rebels
					int IsARebel = 0;
					if (ActorName == "RebelNew") IsARebel ++;
					if (ActorName == "Rebel1New") IsARebel ++;
					if (ActorName == "Rebel2New") IsARebel ++;
					if (ActorName == "Rebel3New") IsARebel ++;
					if (ActorName == "Rebel4New") IsARebel ++;
					if (ActorName == "Rebel5New") IsARebel ++;
					if (ActorName == "Rebel6New") IsARebel ++;
					if (IsARebel > 0)
					{
						int OldMaxHP = MaxHP;
						// Rebels get an HP boost dependant on the Player's "Stamina" stat in Strife [to reflect them having undergone the process as the player does to "keep up"] :V
						MaxHP = MaxHP * (100 + (CallACS("MiscVarCheckDECORATE",317) * 10)) / 100;
						if (debugstatcalc) Console.Printf("\caPre Stamina Max HP: %d, \caPost Stamina Max HP: %d, \cgPlayer's Stamina Level: %d", OldMaxHP, MaxHP, CallACS("MiscVarCheckDECORATE",317));

						string StaminaUpgradeItem = "StaminaUpgrade";
						StaminaUpgradeItem.AppendFormat("%d", CallACS("MiscVarCheckDECORATE",317));
						A_SetInventory(StaminaUpgradeItem,1);
					
						string AccuracyUpgradeItem = "AccuracyUpgrade";
						AccuracyUpgradeItem.AppendFormat("%d", CallACS("MiscVarCheckDECORATE",318));
						A_SetInventory(AccuracyUpgradeItem,1);
					}
					
					//*******************************************************************
					//** Specialized Boss Options [D'Sparil/Korax/Spectres/Entity/etc] **
					//*******************************************************************
					int OldMaxHP = MaxHP;
					// Doom2
					if (ActorName == "DSBossBrain" && dvds_improvediconofsin && BossEyeCheck > 0)
					{
						MaxHP *= 8;
						if (debugstatcalc) Console.Printf("\caMaxHP (Icon of Sin): %d (%d)", MaxHP, OldMaxHP);
					}
				
					// DUMP3
					if (ActorName == "AdolfHitlerDS")
					{
						MaxHP *= 5;
						if (debugstatcalc) Console.Printf("\caMaxHP (Hitler [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Benellus1DS")
					{
						MaxHP *= 5;
						if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 1 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Benellus2DS")
					{
						MaxHP *= 5;
						if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 2 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Benellus3DS")
					{
						MaxHP *= 4;
						if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 3 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
					}
					// KDIZD
					if (ActorName == "Magmantis")
					{
						MaxHP *= 7;
						if (debugstatcalc) Console.Printf("\caMaxHP (Magmantis): %d (%d)", MaxHP, OldMaxHP);
					}
					// Unloved
					if (ActorName == "AvatarNew")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Avatar): %d (%d)", MaxHP, OldMaxHP);
					}
					// Doom 64 Retribution
					if (ActorName == "DSMotherDemon64")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Mother Demon): %d (%d)", MaxHP, OldMaxHP);
					}
					// TCOTD:A
					if (ActorName == "ThamuzNew")
					{
						MaxHP = (MaxHP * 3) / 2;
						if (debugstatcalc) Console.Printf("\caMaxHP (Thamuz): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "TchernobogNew")
					{
						MaxHP = (MaxHP * 3) / 2;
						if (debugstatcalc) Console.Printf("\caMaxHP (Tchernobog): %d (%d)", MaxHP, OldMaxHP);
					}
					// HTC II
					if (ActorName == "PennywiseBoss")
					{
						MaxHP = (MaxHP * 3) / 2;
						if (debugstatcalc) Console.Printf("\caMaxHP (Thamuz): %d (%d)", MaxHP, OldMaxHP);
					}
					// TUTNT
					if (ActorName == "SourceGuardian")
					{
						MaxHP = (MaxHP * random(4,5)) / 4;
						if (debugstatcalc) Console.Printf("\caMaxHP (Source Guardian [TUTNT]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "TheSource")
					{
						MaxHP *= 4;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Source of All Evil [TUTNT]): %d (%d)", MaxHP, OldMaxHP);
					}
				
					// Hexen
					if (ActorName == "DragonNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Death Wyvern): %d (%d)", MaxHP, OldMaxHP);
					}
				
					// Hexen
					if (ActorName == "HeresiarchNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Heresiarch): %d (%d)", MaxHP, OldMaxHP);
					}
				
					if (ActorName == "ClericBossNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Traductus): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "MageBossNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Melenkir): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "FighterBossNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Zedek): %d (%d)", MaxHP, OldMaxHP);
					}
				
					// Heretic
					if (ActorName == "DSparilMountedNew")
					{
						// MaxHP *= 12;
						if (debugstatcalc) Console.Printf("\caMaxHP (D'Sparil [Mounted]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "DSparilUnmountedNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (D'Sparil [Unmounted]): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "KoraxNew")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Korax): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Zakachi")
					{
						// MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Zakachi Daemonbourne): %d (%d)", MaxHP, OldMaxHP);
					}
				
					// Strife
					if (ActorName == "ProgrammerNew")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Programmer): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "StrifeBishopNew")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Bishop): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "OracleNew")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Oracle): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Macil1New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Macil1): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "Macil2New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Macil2): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "LoremasterNew")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Loremaster): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre1New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Programmer's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre2New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Bishop's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre3New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Oracle's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre4New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Macil's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre5New")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Loremaster's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre1Model")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Programmer's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre2Model")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Bishop's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre3Model")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Oracle's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre4Model")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Macil's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "AlienSpectre5Model")
					{
						MaxHP *= 16;
						if (debugstatcalc) Console.Printf("\caMaxHP (Loremaster's Spectre): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "EntityBossNew")
					{
						MaxHP *= 24;
						if (debugstatcalc) Console.Printf("\caMaxHP (The Entity): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "EntitySecondNew")
					{
						MaxHP *= 24;
						if (debugstatcalc) Console.Printf("\caMaxHP (Mini Entity): %d (%d)", MaxHP, OldMaxHP);
					}
					if (ActorName == "EntityAscended")
					{
						MaxHP *= 24;
						if (debugstatcalc) Console.Printf("\caMaxHP (ASCENDED Entity): %d (%d)", MaxHP, OldMaxHP);
					}
					
					if (Attack < 0.005) Attack = 0.005;
					if (Attack > 20.00) Attack = 20.00;
					if (Defense < 0.005) Defense = 0.005;
					if (Defense > 20.00) Defense = 20.00;
					if (MaxHP < 1) MaxHP = 1;
					if (MaxHP > 2147483647) MaxHP = 2147483647;
					
					//** Set's Final MaxHP and Current HP values **
					self.health = MaxHP;
					//self.SpawnHealth() = MaxHP;
					if (debugstatcalc) Console.Printf("\chFinal Speed: %8f, \cgFinal Attack: %8f, \cdFinal Defense: %8f, \caFinal Max HP: %d, \cpFinal Balance: %d, \ck[Actor-Check: %s]", MSpeed, Attack, Defense, MaxHP, Balance, ActorName);
					
					if (ActorName != "Sauravatar") user_MaxHP = MaxHP; 
					if (ActorName == "HeresiarchNew") Score = MaxHP;
					
					// Sets the monster's "Buff" level. The level it must fall below in order to gain it's unique buffs
					RangeVar = 0.375;
					if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.250; // 25.0%
					if (TrueGameSkill == SKILL_EASY) RangeVar = 0.313; // 31.3%
					if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.375; // 37.5%
					if (TrueGameSkill == SKILL_HARD) RangeVar = 0.437; // 43.7%
					if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.500; // 50.0%
					if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.563; // 56.3%
					if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.625; // 62.5%
					if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.687; // 68.7%
					if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.750; // 75%
					Temp = MaxHP * RangeVar;
					Temp = Temp + 1;
					if (Temp < 2) Temp = 2;
					user_HPBuffRange = Temp;
					if (debugstatcalc) Console.Printf("user_HPBuffRange [%s]: %d", ActorName, user_HPBuffRange);

					// Sets the monster's "Desperation Buff" level. The level it must fall below in order to gain it's unique buffs
					RangeVar = 0.375;
					if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.250; // 25.0%
					if (TrueGameSkill == SKILL_EASY) RangeVar = 0.313; // 31.3%
					if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.375; // 37.5%
					if (TrueGameSkill == SKILL_HARD) RangeVar = 0.437; // 43.7%
					if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.500; // 50.0%
					if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.563; // 56.3%
					if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.625; // 62.5%
					if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.687; // 68.7%
					if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.750; // 75%
					RangeVar /= 3;
					Temp = MaxHP * RangeVar;
					Temp = Temp + 1;
					if (Temp < 2) Temp = 2;
					user_HPLowBuffRange = Temp;
					if (debugstatcalc) Console.Printf("user_HPLowBuffRange [%s]: %d", ActorName, user_HPLowBuffRange);
					
					// Sets the monster's "Low Range" of HP, meaning there is a 25% chance it will execute a "nova" or "shock" attack
					RangeVar = 0.160;
					if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.080; // 8.0%
					if (TrueGameSkill == SKILL_EASY) RangeVar = 0.120; // 12.0%
					if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.160; // 16.0%
					if (TrueGameSkill == SKILL_HARD) RangeVar = 0.200; // 20.0%
					if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.240; // 24.0%
					if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.320; // 32.0%
					if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.400; // 40.0%
					if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.450; // 45.0%
					if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.500; // 50%
					Temp = MaxHP * RangeVar;
					Temp = Temp + 1;
					if (Temp < 2) Temp = 2;
					user_HPLowRange = Temp;
					if (ActorName == "HeresiarchNew") Accuracy = Temp;
					if (debugstatcalc) Console.Printf("user_HPLowRange [%s]: %d", ActorName, user_HPLowRange);
					
					// Sets the monster's "Critical Range" of HP, meaning there is a 100% chance it will execute a "nova" or "shock" attack
					RangeVar = 20;
					if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.010; // 1.0%
					if (TrueGameSkill == SKILL_EASY) RangeVar = 0.015; // 1.5%
					if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.020; // 2.0%
					if (TrueGameSkill == SKILL_HARD) RangeVar = 0.025; // 2.5%
					if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.030; // 3.0%
					if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.040; // 4.0%
					if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.050; // 5.0%
					if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.060; // 6.0%
					if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.080; // 8.0%
					Temp = MaxHP * RangeVar;
					Temp = Temp + 1;
					if (Temp < 2) Temp = 2;
					user_HPCritRange = Temp;
					if (ActorName == "HeresiarchNew") Stamina = Temp;
					if (debugstatcalc) Console.Printf("user_HPCritRange [%s]: %d", ActorName, user_HPCritRange);
					
					// Sets the monster's "Extreme Death" range of HP, determining how much it takes to gib most monsters (or permenantly kill a Death Incarnate)
					Temp = MaxHP * -1; // -100.0%
					if (Temp > 0) Temp = 0;
					user_HPXDeathRange = Temp;

					// Excutes Lifebar-Related Code
					A_SetInventory("MonsterDisplayDMG",1);
					ACS_NamedExecuteAlways("DamageDisplays",0,0,0,0);
				
					A_SetInventory("MonsterLevelCalcs",1);
					user_checkmapskill += 1;
					if (bFRIENDLY) Thing_ChangeTID(0,1000);
				}
			}
		}
		else
		{
			if (CountInv("MonsterLevelCalcs") <= 0) { }
			else
			{
				if (user_checkmapskill < 1) { }
				else
				{
					if (bFRIENDLY) Thing_ChangeTID(0,0);
					self.speed = user_basespeed;
					self.mass = user_basemass;
				
					A_SetInventory("MonsterDisplayDMG",0);
					A_SetInventory("MonsterLevelCalcs",0);
					user_legendaryevolved = 0;
					user_monsterlevel = 0;
					user_checkmapskill = 0;
					user_isstealth = 0;
				}
			}
		}
	}
	
	void A_AetheriusStats(int type)
	{
		// 0 = Set special stats
		// 1 = Unset special stats
		int flagsbaselevel;
		levelbehavior = dvds_monsterlevelbehavior;
		if (type == 0 && CountInv("MonsterLevelCalcs") == 0) 
		{
			//Console.Printf("type %d!", type);
			A_MonsterStatsHP_ATK_DEF_SPD(type); // CallACS("MonsterStatsHP_ATK_DEF_SPD",type);
			if (levelbehavior > 0)
			{
				//Console.Printf("Level %d!", user_monsterlevel);
				if (user_monsterlevel > AggressionLevelThreshold3) { bMISSILEEVENMORE = true; bMISSILEMORE = true; }
				else if (user_monsterlevel > AggressionLevelThreshold2) { bMISSILEEVENMORE = true; bMISSILEMORE = false; }
				else if (user_monsterlevel > AggressionLevelThreshold1) { bMISSILEEVENMORE = false; bMISSILEMORE = true; }
			}
		}

		if (type != 0 && CountInv("MonsterLevelCalcs") > 0) 
		{
			A_MonsterStatsHP_ATK_DEF_SPD(type); // CallACS("MonsterStatsHP_ATK_DEF_SPD",type);
		}
	}

	void A_GiveGold(int basegold)
	{
		String nm = "LDLegendaryMonsterTransformed";
		LDLCheck = nm;

		int goldamt = CountInv("Coin",AAPTR_DEFAULT);
		user_golddrop = basegold;
		user_golddrop += goldamt;
		
		int LDLMulti = 2; // 2 = 100%
		if (CountInv(LDLCheck)) LDLMulti = random(4,6);
		user_golddrop = (user_golddrop * LDLMulti) / 2;
		
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int deftness = CallACS("MiscVarCheckDECORATE",33);
		int extragold;
		int extragold2;
		int deftbonus;
		int bonuspart1;
		int bonuspart2;
		int bonusgold;
		int bonusgold2;
		int basecoins = user_golddrop;

		AetheriusPlayerPawn playpawn;
		if (target) playpawn = AetheriusPlayerPawn(target);
		if (playpawn)
		{
			if (clearofmind > 0)
			{
				bonuspart1 = clearofmind * 6;
				bonuspart1 = (bonuspart1 * LDLMulti) / 4;
				bonusgold = (100 + bonuspart1);
				user_golddrop = user_golddrop * (bonusgold) / 100;

				bonuspart2 = ((clearofmind * 8) / 5);
				bonuspart2 = (bonuspart2 * LDLMulti) / 4;
				extragold = bonuspart2 - 5;
				if (extragold < 0) extragold = 0;
				user_golddrop += extragold;
			}
			
			deftbonus = deftness / 4;
			deftbonus = (deftbonus * LDLMulti) / 4;
			bonusgold2 = (100 + deftbonus);
			user_golddrop = user_golddrop * (bonusgold2) / 100;

			extragold2 = deftness / 32;
			if (extragold2 < 0) extragold2 = 0;
			extragold2 = (extragold2 * LDLMulti) / 4;

			user_golddrop += extragold2;
		}
		A_GiveToTarget("Coin",user_golddrop);
		A_TakeInventory("Coin",goldamt,0,AAPTR_DEFAULT);

		//if (playpawn) Console.Printf("Gained %d Coins! [bonusdft%: %d, extra2: %d, bonus%: %d, extra: %d, base2: %d, base1: %d, LDLMulti: %d / 2]", user_golddrop, bonusgold2, extragold2, bonusgold, extragold, basecoins, basegold, LDLMulti);
		if (playpawn) Console.Printf("Gained %d Coins!", user_golddrop);
	}

	void A_GetAccuracySpreads()
	{
		Console.Printf("ACCURACY: XY-: %.4f, XY+: %.4f, Z-: %.4f, Z+: %.4f", user_shotaccuracy1, user_shotaccuracy2, user_shotzaccuracy1, user_shotzaccuracy2);
	}

	void A_FastChaseCalc(int base = 3, int leveldivisor = 24)
	{
		if (levelbehavior > 0) { user_fastchaseextra = user_monsterlevel / leveldivisor; }
		user_fastchasechance = base + user_fastchaseextra + user_painfastchase;
		if (dvdsdebug_monsterspecialaidisplays) Console.Printf("Class: %s - \czFastChaseChance: %d (base: %d, leveldivisor: %d)\cz", GetClassName(), user_fastchasechance, base, leveldivisor); 
	}

	// Attempts to mitigate floating-monsters from drifting too out of control when fast-chasing or damaged [like if they get kicked backwards]
	// by slowing them down gradually and then stopping them at a certain interval that won't reset until they get hurt again or they attempt 
	// to fast-chase.
	void A_FloatLook(int time = 16)
	{
		A_Look();
		user_fastchasetimer = time;
		user_painreacttimer = time;
	}

	void A_FloatPain(int settime = 0, int settime2 = 8, int settime2chance = 64)
	{
		A_Pain();
		if (random(1,256) <= settime2chance) user_painreacttimer = settime2; else user_painreacttimer = settime;
	}

	void A_FloatSetFChaseT(int time = 0)
	{
		user_fastchasetimer = time;
	}

	void A_FloatChaseCheck(int time1 = 4, int time2 = 8, int time3 = 12, int time4 = 16, double decelrate1 = 0.5, double decelrate2 = 0.5)
	{
		user_painreacttimer++;
		if (user_painreacttimer == time1) { A_ScaleVelocity(decelrate1); }
		if (user_painreacttimer == time2) { A_ScaleVelocity(decelrate1); }
		if (user_painreacttimer == time3) { A_ScaleVelocity(decelrate1); }
		if (user_painreacttimer == time4) { A_ScaleVelocity(0); A_Stop(); }
		if (dvdsdebug_monsterspecialaidisplays) 
		{ 
			if (user_painreacttimer == time1 || user_painreacttimer == time2 || user_painreacttimer == time3 || user_painreacttimer == time4) Console.Printf("Class: %s - \cxFloatPain-painreacttimer: %d\c-", GetClassName(), user_painreacttimer); 
		}
		
		user_fastchasetimer++;
		if (user_fastchasetimer == time1) { A_ScaleVelocity(decelrate2); }
		if (user_fastchasetimer == time2) { A_ScaleVelocity(decelrate2);}
		if (user_fastchasetimer == time3) { A_ScaleVelocity(decelrate2); }
		if (user_fastchasetimer == time4) { A_ScaleVelocity(0); A_Stop(); }
		if (dvdsdebug_monsterspecialaidisplays) 
		{ 
			if (user_fastchasetimer == time1 || user_fastchasetimer == time2 || user_fastchasetimer == time3 || user_fastchasetimer == time4) Console.Printf("Class: %s - \cwFloatChase-fastchasetimer: %d\c-", GetClassName(), user_fastchasetimer);
		}
		
	}

	void A_MonsterCrisisCheck()
	{
		user_canusecrisisatk = 0;
		if (health <= user_HPLowRange) { if (health <= user_HPCritRange) { user_canusecrisisatk = 1; } else { if (random(1,4) == 4) { user_canusecrisisatk = 1; } } }
		if (dvds_monstercrisisattacks == 0) { user_canusecrisisatk = 0; }
	}

	void A_PlayCrisisAtkSound ()
	{
		A_PlaySound("crisisattack", CHAN_6);
		A_PlaySound("crisisattack2",CHAN_7);
	}

	void A_CrisisExplode (int damage = 128, int radius = 128, int flags = 1, bool alert = false, int fulldmgradius = 0, int nails = 0, int naildamage = 10, string pufftype = "BulletPuff", string damagetype = "none", bool playcrisissound = true)
	{
		//A_MonsterCrisisCheck(); // Inside CrisisAttack Function
		if (user_canusecrisisatk == 1) 
		{
			damage *= CallACS("CrisisMultiplier"); 
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
		}
		A_Explode(damage,radius,flags,alert,fulldmgradius,nails,naildamage,pufftype,damagetype);
	}

	void A_CrisisMushroom (string missiletype, string crisismissiletype, int amount = 0, int flags = 0, float vrange = 4.0, float hrange = 0.5, bool playcrisissound = true)
	{
		//A_MonsterCrisisCheck(); // Inside CrisisAttack Function
		string atktype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
			atktype = crisismissiletype;
		}
		A_MushRoom(atktype,amount,flags,vrange,hrange);
	}

	void A_CrisisSpawnProjectile (string missiletype, string crisismissiletype, float spawnheight = 32.0, float spawnofs_xy = 0.0, double angle = 0.0, int flags = 0, double pitch = 0.0, int ptr = AAPTR_TARGET, bool playcrisissound = true)
	{
		//A_MonsterCrisisCheck(); // Inside CrisisAttack Function
		string atktype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
			atktype = crisismissiletype;
		}

		if (flags & CMF_OFFSETPITCH) { if (flags & CMF_BADPITCH) flags &= ~CMF_BADPITCH; }
		
		A_SpawnProjectile(atktype,spawnheight,spawnofs_xy,angle,flags,pitch,ptr);
	}

	void A_CrisisRailgun(int damage, int spawnofs_xy = 0, color ringcolor = 0, color corecolor = 0, int flags = 0, int aim = 0, double maxdiff = 0, string pufftype = "", double spread_xy = 0.0, double spread_z = 0.0, int range = 8192, int duration = 35, double sparsity = 1.0, double driftspeed = 1.0, string spawnclass = "", double spawnofs_z = 0.0, int spiraloffset = 270, int limit = 0, double veleffect = 3.0, bool playcrisissound = true)
	{
		if (user_canusecrisisatk == 1) 
		{
			damage *= CallACS("CrisisMultiplier"); 
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
		}
		A_CustomRailgun(damage,spawnofs_xy,ringcolor,corecolor,flags,aim,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit,veleffect);
	}
 
	void A_CrisisComboAttack (string missiletype, string crisismissiletype, float spawnheight = 32.0, int meleedamage = 0, string meleesound = "imp/melee", string damagetype = "Melee", bool bleed = 1, bool playcrisissound = true)
	{
		string atktype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			meleedamage *= CallACS("CrisisMultiplier"); 
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); }
			atktype = crisismissiletype;
		}
		A_CustomComboAttack(atktype,spawnheight,meleedamage,meleesound,damagetype,bleed);
	}

	void A_CrisisMeleeAttack (int meleedamage, string meleesound = "", string misssound = "", string damagetype = "Melee", bool bleed = 1, bool playcrisissound = true)
	{
		A_MonsterCrisisCheck();
		if (user_canusecrisisatk == 1) 
		{
			meleedamage *= CallACS("CrisisMultiplier");
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); }
		}
		A_CustomMeleeAttack(meleedamage,meleesound,misssound,damagetype,bleed);
		//A_DVDSCustomMeleeAttack(meleedamage,meleesound,misssound,damagetype,bleed);
	}
	
	void A_CrisisSpawnItemEx (string type = "", string crisistype = "", float xofs = 0.0, float yofs = 0.0, float zofs = 0.0, float xvel = 0.0, float yvel = 0.0, float zvel = 0.0, float angle = 0.0, int flags = 0, int failchance = 0, int tid = 0, bool playcrisissound = true)
	{
		string spawntype = type;
		if (user_canusecrisisatk == 1) 
		{
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); }
			spawntype = crisistype;
		}
		A_SpawnItemEx(spawntype,xofs,yofs,zofs,xvel,yvel,zvel,angle,flags,failchance,tid);
	}
	
	
	
	
	// Shielding Imp Warlord
	void A_ImpWarShieldOff()
	{
		bNOBLOOD = 0; bNOPAIN = 0;
		A_SetInventory("ImpWarlordShieldDefend",0); // A_UnSetInvulnerable
		A_SetInventory("ImpWarlordShieldDefendExtra",0);
	}

	void A_ImpWarShieldOn()
	{
		bNOPAIN = 1; bNOBLOOD = 1;
		A_SetInventory("ImpWarlordShieldDefend",1); // A_SetInvulnerable
		A_SetInventory("ImpWarlordShieldDefendExtra",0);
		if (random(1,4) == 1) { A_SetInventory("ImpWarlordShieldDefendExtra",1); } 
	}

	// Shielding Death Knight
	void A_DeathKnightShieldOff()
	{
		user_defendtimer = 0; user_defendcycles = 0;
		bNOBLOOD = 0; bNOPAIN = 0; bREFLECTIVE = 0;
		A_SetInventory("DKnightShieldDefend",0); // A_UnSetInvulnerable
		A_SetInventory("DKnightShieldDefendExtra",0);
	}

	void A_DeathKnightShieldOn()
	{
		bNOBLOOD = 1; bNOPAIN = 1; bREFLECTIVE = 1;
		A_SetInventory("DKnightShieldDefend",1); // A_SetInvulnerable
		A_SetInventory("DKnightShieldDefendExtra",0);
		if (random(1,4) == 1) { A_SetInventory("DKnightShieldDefendExtra",1); } 
	}
	
	// Shielding Acolytes
	void A_AcolyteShieldOff()
	{
		bNOBLOOD = 0; bNOPAIN = 0;
		A_SetInventory("AcolyteShieldDefend",0); // A_UnSetInvulnerable
		A_SetInventory("AcolyteShieldDefendExtra",0);
	}

	void A_AcolyteShieldOn()
	{
		if (random(1,2) == 1) { bNOPAIN = 1; bNOBLOOD = 1; } else { bNOPAIN = 0; bNOBLOOD = 0; }
		A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
		A_SetInventory("AcolyteShieldDefendExtra",0);
		if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
	}
 
	// Shielding Centaur
	void A_CentaurShieldOff()
	{
		user_defendtimer = 0; user_defendcycles = 0;
		bNOBLOOD = 0; bNOPAIN = 0; bREFLECTIVE = 0;
		A_SetInventory("CentaurShieldDefend",0); // A_UnSetInvulnerable
		A_SetInventory("CentaurShieldDefendExtra",0);
	}

	void A_CentaurShieldOn()
	{
		bNOBLOOD = 1; bNOPAIN = 1; bREFLECTIVE = 1;
		A_SetInventory("CentaurShieldDefend",1); // A_SetInvulnerable
		A_SetInventory("CentaurShieldDefendExtra",0);
		if (random(1,4) == 1) { A_SetInventory("CentaurShieldDefendExtra",1); } 
	}

	// Shielding Slaughtaur
	void A_SlaughtaurShieldOff()
	{
		user_defendtimer = 0; user_defendcycles = 0;
		bNOBLOOD = 0; bNOPAIN = 0; bREFLECTIVE = 0;
		A_SetInventory("SlaughtaurShieldDefend",0); // A_UnSetInvulnerable
		A_SetInventory("SlaughtaurShieldDefendExtra",0);
	}

	void A_SlaughtaurShieldOn()
	{
		bNOBLOOD = 1; bNOPAIN = 1; bREFLECTIVE = 1;
		A_SetInventory("SlaughtaurShieldDefend",1); // A_SetInvulnerable
		A_SetInventory("SlaughtaurShieldDefendExtra",0);
		if (random(1,4) == 1) { A_SetInventory("SlaughtaurShieldDefendExtra",1); } 
	}

	// Shielding Hell Warrior
	void A_HellWarShieldOff()
	{
		bNOBLOOD = 0; bNOPAIN = 0; bREFLECTIVE = 0;
		A_SetInventory("EWShieldDefendMode",0); // A_UnSetInvulnerable
		A_SetInventory("EWShieldDefendModeExtra",0);
	}

	void A_HellWarShieldOn()
	{
		bNOBLOOD = 1; bNOPAIN = 1; bREFLECTIVE = 1;
		A_SetInventory("EWShieldDefendMode",1); // A_SetInvulnerable
		A_SetInventory("EWShieldDefendModeExtra",0);
		if (random(1,4) == 1) { A_SetInventory("EWShieldDefendModeExtra",1); } 
    }

	// Nightmare Stuff
	void A_NightmarePhaseOut()
	{
		bSHOOTABLE = 0; bNORADIUSDMG = 1; bNOPAIN = 1; bNOBLOOD = 1; 
		A_SetInventory("HightmarePhaseOutDefense",1); // A_SetInvulnerable
	}

	void A_NightmarePhaseIn()
	{
		bSHOOTABLE = 1; bNORADIUSDMG = 0; bNOPAIN = 0; bNOBLOOD = 0; 
		A_SetInventory("HightmarePhaseOutDefense",0); // A_SetInvulnerable
	}

	int A_GetExpMultiFactor()
	{
		int debugexp = dvdsdebug_showexpdebugstuff;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int PlayerLevel = CallACS("StatCheck",0);

		int ExpMultiFactor, MapCheck, Exp2;
		int deathkingsmapcalcmod = dvds_deathkingsmapcalcmod;
		int mapcalcfactorexact = 0;
		int mapcalcfactorpercent = 100;
		
		int mapdifficultyinflationEXP = dvds_mapdifficultyinflationEXP;
		if (mapdifficultyinflationEXP < -50) mapdifficultyinflationEXP = -50;
		if (mapdifficultyinflationEXP > 50) mapdifficultyinflationEXP = 50;
		
		int mapdifficultyinflationOVERALL = dvds_mapdifficultyinflationOVERALL;
		if (mapdifficultyinflationOVERALL < -50) mapdifficultyinflationOVERALL = -50;
		if (mapdifficultyinflationOVERALL > 50) mapdifficultyinflationOVERALL = 50;

		int mapdifficultyinflationEXP2 = dvds_mapdifficultyinflationEXP2;
		if (mapdifficultyinflationEXP2 < 1) mapdifficultyinflationEXP2 = 1;
		if (mapdifficultyinflationEXP2 > 5000) mapdifficultyinflationEXP2 = 5000;
		
		int mapdifficultyinflationOVERALL2 = dvds_mapdifficultyinflationOVERALL2;
		if (mapdifficultyinflationOVERALL2 < 1) mapdifficultyinflationOVERALL2 = 1;
		if (mapdifficultyinflationOVERALL2 > 5000) mapdifficultyinflationOVERALL2 = 5000;

		// Gets the Experience Multiplication Factor [Part 1]
		ExpMultiFactor = Random(90,120);
		if (PlayerLevel < 40) ExpMultiFactor += (PlayerLevel * 1.03125); // +6.25%
		else
		{
			if (PlayerLevel < 80) ExpMultiFactor += (PlayerLevel * 1.0625); // +12.5%
			else
			{
				if (PlayerLevel < 120) ExpMultiFactor += (PlayerLevel * 1.125); // +25%
				else
				{
					if (PlayerLevel < 160) ExpMultiFactor += (PlayerLevel * 1.25); // +50%
					else ExpMultiFactor += (PlayerLevel * 1.5); // +100%
				}
			}
		}
		
		// Gets the Experience Multiplication Factor [Part 2]
		MapCheck = level.levelnum;
		double TempExp2;
		double TempExp3;
		double MapCheckFactor = 1.0;
		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			if (ClassicDoomType == 1 || ClassicDoomType == 2) // Classic Doom 1 or Heretic
			{
				if (MapCheck != 1000 || MapCheck != 1010)
				{
					if (CallACS("MiscVarCheckDECORATE",259) > 0) MapCheck += deathkingsmapcalcmod;
					MapCheck += mapdifficultyinflationEXP; // Map Inflation [EXP - Exact]
					MapCheck += mapdifficultyinflationOVERALL; // Map Inflation [Overall - Exact]
					MapCheck = MapCheck * mapdifficultyinflationEXP2 / 100; // Map Inflation [EXP - Percentile]
					MapCheck = MapCheck * mapdifficultyinflationOVERALL2 / 100; // Map Inflation [Overall - Percentile]
					if (MapCheck < 1) MapCheck = 1;
					if (MapCheck > 100) MapCheck = 100;
				}
				// Episode 1
				if (MapCheck <= 1) TempExp2 = 0.00; 
				if (MapCheck == 2) TempExp2 = 0.010;
				if (MapCheck == 3) TempExp2 = 0.020;
				if (MapCheck == 4) TempExp2 = 0.030;
				if (MapCheck == 5) TempExp2 = 0.040;
				if (MapCheck == 6) TempExp2 = 0.050;
				if (MapCheck == 7) TempExp2 = 0.060;
				if (MapCheck == 8) TempExp2 = 0.070;
				if (MapCheck == 9) TempExp2 = 0.080;
				if (MapCheck == 10) TempExp2 = 0.090;
				// Episode 2
				if (MapCheck == 11) TempExp2 = 0.1125;
				if (MapCheck == 12) TempExp2 = 0.125; 
				if (MapCheck == 13) TempExp2 = 0.1375;
				if (MapCheck == 14) TempExp2 = 0.150; 
				if (MapCheck == 15) TempExp2 = 0.1625;
				if (MapCheck == 16) TempExp2 = 0.175; 
				if (MapCheck == 17) TempExp2 = 0.1875;
				if (MapCheck == 18) TempExp2 = 0.200; 
				if (MapCheck == 19) TempExp2 = 0.2125;
				if (MapCheck == 20) TempExp2 = 0.25; 
				// Episode 3
				if (MapCheck == 21) TempExp2 = 0.275; 
				if (MapCheck == 22) TempExp2 = 0.300; 
				if (MapCheck == 23) TempExp2 = 0.325; 
				if (MapCheck == 24) TempExp2 = 0.350; 
				if (MapCheck == 25) TempExp2 = 0.375; 
				if (MapCheck == 26) TempExp2 = 0.400; 
				if (MapCheck == 27) TempExp2 = 0.425; 
				if (MapCheck == 28) TempExp2 = 0.450; 
				if (MapCheck == 29) TempExp2 = 0.475; 
				if (MapCheck == 30) TempExp2 = 0.500;
				// Episode 4
				if (MapCheck == 31) TempExp2 = 0.550;
				if (MapCheck == 32) TempExp2 = 0.600;
				if (MapCheck == 33) TempExp2 = 0.650;
				if (MapCheck == 34) TempExp2 = 0.700;
				if (MapCheck == 35) TempExp2 = 0.750;
				if (MapCheck == 36) TempExp2 = 0.800;
				if (MapCheck == 37) TempExp2 = 0.850;
				if (MapCheck == 38) TempExp2 = 0.900;
				if (MapCheck == 39) TempExp2 = 0.950;
				if (MapCheck == 40) TempExp2 = 1.000;
				// Episode 5
				if (MapCheck == 41) TempExp2 = 1.125;
				if (MapCheck == 42) TempExp2 = 1.200;
				if (MapCheck == 43) TempExp2 = 1.275;
				if (MapCheck == 44) TempExp2 = 1.350;
				if (MapCheck == 45) TempExp2 = 1.425;
				if (MapCheck == 46) TempExp2 = 1.500;
				if (MapCheck == 47) TempExp2 = 1.575;
				if (MapCheck == 48) TempExp2 = 1.650;
				if (MapCheck == 49) TempExp2 = 1.725;
				if (MapCheck == 50) TempExp2 = 1.850;
				// Episode 6
				if (MapCheck == 51) TempExp2 = 2.000;
				if (MapCheck == 52) TempExp2 = 2.100;
				if (MapCheck == 53) TempExp2 = 2.200;
				if (MapCheck == 54) TempExp2 = 2.800;
				if (MapCheck == 55) TempExp2 = 2.900;
				if (MapCheck == 56) TempExp2 = 2.300;
				if (MapCheck == 57) TempExp2 = 2.400;
				if (MapCheck == 58) TempExp2 = 2.500;
				if (MapCheck == 59) TempExp2 = 2.600;
				if (MapCheck == 60) TempExp2 = 2.700;
				// Episode 7
				if (MapCheck == 61) TempExp2 = 3.000;
				if (MapCheck == 62) TempExp2 = 3.125;
				if (MapCheck == 63) TempExp2 = 3.250;
				if (MapCheck == 64) TempExp2 = 3.375;
				if (MapCheck == 65) TempExp2 = 3.500;
				if (MapCheck == 66) TempExp2 = 3.625;
				if (MapCheck == 67) TempExp2 = 3.750;
				if (MapCheck == 68) TempExp2 = 3.875;
				if (MapCheck == 69) TempExp2 = 4.000;
				if (MapCheck == 70) TempExp2 = 4.125;
				// Episode 8
				if (MapCheck == 71) TempExp2 = 4.250;
				if (MapCheck == 72) TempExp2 = 4.400;
				if (MapCheck == 73) TempExp2 = 4.550;
				if (MapCheck == 74) TempExp2 = 4.700;
				if (MapCheck == 75) TempExp2 = 4.850;
				if (MapCheck == 76) TempExp2 = 5.000;
				if (MapCheck == 77) TempExp2 = 5.150;
				if (MapCheck == 78) TempExp2 = 5.300;
				if (MapCheck == 79) TempExp2 = 5.450;
				if (MapCheck == 80) TempExp2 = 5.600;
				// Episode 9
				if (MapCheck == 81) TempExp2 = 5.900;
				if (MapCheck == 82) TempExp2 = 6.075;
				if (MapCheck == 83) TempExp2 = 6.250;
				if (MapCheck == 84) TempExp2 = 6.425;
				if (MapCheck == 85) TempExp2 = 6.600;
				if (MapCheck == 86) TempExp2 = 6.775;
				if (MapCheck == 87) TempExp2 = 6.950;
				if (MapCheck == 88) TempExp2 = 7.125;
				if (MapCheck == 89) TempExp2 = 7.300;
				if (MapCheck == 90) TempExp2 = 7.475;
				// Episode 10
				if (MapCheck == 91) TempExp2 = 7.650;
				if (MapCheck == 92) TempExp2 = 7.850;
				if (MapCheck == 93) TempExp2 = 8.050;
				if (MapCheck == 94) TempExp2 = 8.250;
				if (MapCheck == 95) TempExp2 = 8.450;
				if (MapCheck == 96) TempExp2 = 8.650;
				if (MapCheck == 97) TempExp2 = 8.850;
				if (MapCheck == 98) TempExp2 = 9.050;
				if (MapCheck == 99) TempExp2 = 9.250;
				if (MapCheck >= 100) TempExp2 = 9.450;
				TempExp2 *= 1.0;
				MapCheckFactor = 1.0;
				Exp2 = (MapCheck * MapCheckFactor) * (1.0 + TempExp2);
				
							if (MapCheck == 9) TempExp3 = 0.50;
				else if (MapCheck == 19) TempExp3 = 0.75;
				else if (MapCheck == 29) TempExp3 = 1.00;
				else if (MapCheck == 39) TempExp3 = 1.25;
				else if (MapCheck == 49) TempExp3 = 1.50;
				else if (MapCheck == 59) TempExp3 = 1.75;
				else if (MapCheck == 69) TempExp3 = 2.00;
				else if (MapCheck == 79) TempExp3 = 2.25;
				else if (MapCheck == 89) TempExp3 = 2.50;
				else if (MapCheck == 99) TempExp3 = 2.75;
														else TempExp3 = 0.25;
				TempExp3 *= 1.0;
				Exp2 *= (1.0 + TempExp3);

				if (MapCheck == 1000) Exp2 = 0; // E1M0 [Classic Doom 1]
				if (MapCheck == 1010) Exp2 = 0; // E1MA [Heretic]
			}
			else // Classic Doom 2 / Hexen / Strife / Doom64 / PSXDoom
			{
				if (MapCheck != 1050 || MapCheck != 1020 || MapCheck != 1030 || MapCheck != 1036 || MapCheck != 1037 || MapCheck != 1038 || MapCheck != 1039)
				{
					if (CallACS("MiscVarCheckDECORATE",259) > 0) MapCheck += deathkingsmapcalcmod;
					MapCheck += mapdifficultyinflationEXP; // Map Inflation [EXP - Exact]
					MapCheck += mapdifficultyinflationOVERALL; // Map Inflation [Overall - Exact]
					MapCheck = MapCheck * mapdifficultyinflationEXP2 / 100; // Map Inflation [EXP - Percentile]
					MapCheck = MapCheck * mapdifficultyinflationOVERALL2 / 100; // Map Inflation [Overall - Percentile]
					if (MapCheck < 1) MapCheck = 1;
					if (MapCheck > 100) MapCheck = 100;
				}
				// Main Game
				if (MapCheck <= 1) TempExp2 = 0.000;
				if (MapCheck == 2) TempExp2 = 0.0125;
				if (MapCheck == 3) TempExp2 = 0.025;
				if (MapCheck == 4) TempExp2 = 0.0375;
				if (MapCheck == 5) TempExp2 = 0.050;
		
				if (MapCheck == 6) TempExp2 = 0.069;
				if (MapCheck == 7) TempExp2 = 0.088;
				if (MapCheck == 8) TempExp2 = 0.107;
				if (MapCheck == 9) TempExp2 = 0.125;
				if (MapCheck == 10) TempExp2 = 0.144;
		
				if (MapCheck == 11) TempExp2 = 0.169;
				if (MapCheck == 12) TempExp2 = 0.194;
				if (MapCheck == 13) TempExp2 = 0.219;
				if (MapCheck == 14) TempExp2 = 0.244;
				if (MapCheck == 15) TempExp2 = 0.269;
		
				if (MapCheck == 31) TempExp2 = 0.519;
				if (MapCheck == 32) TempExp2 = 1.019;
		
				if (MapCheck == 16) TempExp2 = 0.300;
				if (MapCheck == 17) TempExp2 = 0.331;
				if (MapCheck == 18) TempExp2 = 0.363;
				if (MapCheck == 19) TempExp2 = 0.394;
				if (MapCheck == 20) TempExp2 = 0.425;
		
				if (MapCheck == 21) TempExp2 = 0.475;
				if (MapCheck == 22) TempExp2 = 0.525;
				if (MapCheck == 23) TempExp2 = 0.575;
				if (MapCheck == 24) TempExp2 = 0.625;
				if (MapCheck == 25) TempExp2 = 0.675;

				if (MapCheck == 26) TempExp2 = 0.743;
				if (MapCheck == 27) TempExp2 = 0.819;
				if (MapCheck == 28) TempExp2 = 0.900;
				if (MapCheck == 29) TempExp2 = 0.998;
				if (MapCheck == 30) TempExp2 = 1.688;

				if (MapCheck == 33) TempExp2 = 1.170;
				if (MapCheck == 34) TempExp2 = 1.270;
				if (MapCheck == 35) TempExp2 = 1.371;
				if (MapCheck == 36) TempExp2 = 1.473;
				if (MapCheck == 37) TempExp2 = 1.576;
				if (MapCheck == 38) TempExp2 = 1.680;
				if (MapCheck == 39) TempExp2 = 1.785;
				if (MapCheck == 40) TempExp2 = 1.891;

				if (MapCheck == 41) TempExp2 = 2.000;
				if (MapCheck == 42) TempExp2 = 2.102;
				if (MapCheck == 43) TempExp2 = 2.206;
				if (MapCheck == 44) TempExp2 = 2.312;
				if (MapCheck == 45) TempExp2 = 2.420;
				if (MapCheck == 46) TempExp2 = 2.530;
				if (MapCheck == 47) TempExp2 = 2.642;
				if (MapCheck == 48) TempExp2 = 2.756;
				if (MapCheck == 49) TempExp2 = 2.872;
				if (MapCheck == 50) TempExp2 = 2.992;

				if (MapCheck == 51) TempExp2 = 3.100;
				if (MapCheck == 52) TempExp2 = 3.204;
				if (MapCheck == 53) TempExp2 = 3.312;
				if (MapCheck == 54) TempExp2 = 3.424;
				if (MapCheck == 55) TempExp2 = 3.540;
				if (MapCheck == 56) TempExp2 = 3.660;
				if (MapCheck == 57) TempExp2 = 3.784;
				if (MapCheck == 58) TempExp2 = 3.902;
				if (MapCheck == 59) TempExp2 = 4.034;
				if (MapCheck == 60) TempExp2 = 4.170;

				if (MapCheck == 61) TempExp2 = 4.200;
				if (MapCheck == 62) TempExp2 = 4.304;
				if (MapCheck == 63) TempExp2 = 4.412;
				if (MapCheck == 64) TempExp2 = 4.524;
				if (MapCheck == 65) TempExp2 = 4.640;
				if (MapCheck == 66) TempExp2 = 4.760;
				if (MapCheck == 67) TempExp2 = 4.884;
				if (MapCheck == 68) TempExp2 = 5.002;
				if (MapCheck == 69) TempExp2 = 5.134;
				if (MapCheck == 70) TempExp2 = 5.270;

				if (MapCheck == 71) TempExp2 = 5.400;
				if (MapCheck == 72) TempExp2 = 5.504;
				if (MapCheck == 73) TempExp2 = 5.612;
				if (MapCheck == 74) TempExp2 = 5.724;
				if (MapCheck == 75) TempExp2 = 5.840;
				if (MapCheck == 76) TempExp2 = 5.960;
				if (MapCheck == 77) TempExp2 = 6.084;
				if (MapCheck == 78) TempExp2 = 6.212;
				if (MapCheck == 79) TempExp2 = 6.344;
				if (MapCheck == 80) TempExp2 = 6.480;

				if (MapCheck == 81) TempExp2 = 6.600;
				if (MapCheck == 82) TempExp2 = 6.744;
				if (MapCheck == 83) TempExp2 = 6.892;
				if (MapCheck == 84) TempExp2 = 7.044;
				if (MapCheck == 85) TempExp2 = 7.200;
				if (MapCheck == 86) TempExp2 = 7.360;
				if (MapCheck == 87) TempExp2 = 7.524;
				if (MapCheck == 88) TempExp2 = 7.692;
				if (MapCheck == 89) TempExp2 = 7.864;
				if (MapCheck == 90) TempExp2 = 8.040;

				if (MapCheck == 91) TempExp2 = 8.240;
				if (MapCheck == 92) TempExp2 = 8.424;
				if (MapCheck == 93) TempExp2 = 8.612;
				if (MapCheck == 94) TempExp2 = 8.804;
				if (MapCheck == 95) TempExp2 = 9.000;
				if (MapCheck == 96) TempExp2 = 9.200;
				if (MapCheck == 97) TempExp2 = 9.404;
				if (MapCheck == 98) TempExp2 = 9.612;
				if (MapCheck == 99) TempExp2 = 9.824;
				if (MapCheck >= 100) TempExp2 = 10.040;
				TempExp2 *= 1.0;
				MapCheckFactor = 1.0;
				Exp2 = (MapCheck * MapCheckFactor) * (1.0 + TempExp2);
	
						 if (MapCheck == 31) TempExp3 = 0.75; // [175%]
				else if (MapCheck == 32) TempExp3 = 0.25; // [225%]
														else TempExp3 = 0.25; // [125%]
				TempExp3 *= 1.0;
				Exp2 *= (1.0 + TempExp3);

				if (MapCheck == 1020) Exp2 = 0; // MAP0A [Hexen]
				if (MapCheck == 1030) Exp2 = 0; // MAPAA [Strife]
				if (MapCheck >= 1036 && MapCheck <= 1038) Exp2 = 0; // [Doom64]
				if (MapCheck == 1039) Exp2 = 0; // MAPP0 [PSXDoom]
				if (MapCheck == 1050) Exp2 = 0; // MAP00 [Classic Doom 2]
			}
		}
		else
		if (ModType == 1) // Deus Vult 1
		{
			if (MapCheck != 1100)
			{
				if (MapCheck < 1101) MapCheck = 1101;
				if (MapCheck > 1104) MapCheck = 1104;
			}
			if (MapCheck == 1101) TempExp2 = 0.00;
			if (MapCheck == 1102) TempExp2 = 0.20;
			if (MapCheck == 1103) TempExp2 = 0.44;
			if (MapCheck == 1104) TempExp2 = 0.92;

			TempExp2 *= 1.0;
			Exp2 = (MapCheck - 1100) * (1 + TempExp2);
		}
		else
		if (ModType == 2) // Deus Vult 2
		{
			if (MapCheck != 1200)
			{
				if (MapCheck < 1201) MapCheck = 1201;
				if (MapCheck > 1212) MapCheck = 1212;
			}
			// Zendaria Levels
			if (MapCheck == 1200) Exp2 = (MapCheck - 1200) * 1.04; // +4% Exp Bonus // Prolouge - The Mysterious Cave
			// Earth-type Levels
			if (MapCheck == 1201) TempExp2 = 0.00; // Monster Bonus // MAP01 - Entryway Pass
			if (MapCheck == 1202) TempExp2 = 0.06; // Monster Bonus // MAP02 - Mutagen
			if (MapCheck == 1203) TempExp2 = 0.12; // Monster Bonus // MAP03 - Crouching Demon, Hidden Archvile
			if (MapCheck == 1204) TempExp2 = 0.20; // Monster Bonus // MAP04 - Minas Morgul
			if (MapCheck == 1205) TempExp2 = 0.26; // Monster Bonus // MAP05 - Eagle's Nest
			if (MapCheck == 1206) TempExp2 = 0.34; // Monster Bonus // MAP05B - The Manliest Level Ever
			if (MapCheck == 1207) TempExp2 = 0.42; // Monster Bonus // MAP06 - Stargate
			if (MapCheck == 1208) TempExp2 = 0.50; // Monster Bonus // MAP07 - The Desert Temple
			// Hell Levels
			if (MapCheck == 1209) TempExp2 = 0.78; // Monster Bonus // MAP08 - The Unholy Cathedral
			if (MapCheck == 1210) TempExp2 = 0.10; // Monster Bonus // MAP09 - You Shall Not Pass!
			if (MapCheck == 1211) TempExp2 = 0.48; // Monster Bonus // MAP10 - Hell's Vendetta
			if (MapCheck == 1212) TempExp2 = 0.92; // Monster Bonus // MAP10B - attedneV s'lleH
			// Extra Levels
			if (MapCheck == 1214) TempExp2 = 0.40; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
			if (MapCheck == 1215) TempExp2 = 1.92; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)

			TempExp2 *= 1.0;
			Exp2 = (MapCheck - 1200) * (1 + TempExp2);
			// Ending Levels
			if (MapCheck == 1213) Exp2 = 0; // NO Exp Bonus since it's Heaven, foo. :P // MAP11 - St. Peter's Gate
			if (MapCheck == 1216) Exp2 = 0; // NO Exp Bonus in ending levels // MAP13 - The Return Home
			if (MapCheck == 1217) Exp2 = 0; // NO Exp Bonus in ending levels // ENDMAP - Credits and Cast
		}
		ExpMultiFactor += Exp2;
		if (debugexp) Console.Printf("\cxGetExpMultiFactor\c- - ClassicDoomType: %d, ModType: %d, \czMapCheck: %d\c-, TempExp2: %8f, TempExp3: %8f, Exp2: %d, ExpMultiFactor: %d", ClassicDoomType, ModType, MapCheck, TempExp2, TempExp3, Exp2, ExpMultiFactor);
		
		return ExpMultiFactor;
	}

	int A_GetExperience(int RealExpGain, int ExpMultiFactor)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int debugexp = dvdsdebug_showexpdebugstuff;
		int CharacterClass = CallACS("CheckCharacterClass");

		int DeftnessExpBase = dvds_deftnessexpbase;
		int ExpMultiplier = dvds_expmultiplier;
		if (debugexp) Console.Printf("\cxGetExperience\c- - Base: %d", RealExpGain);

		RealExpGain = RealExpGain * ExpMultiFactor / 100; // Randomizes some of the experience gained
		if (debugexp) Console.Printf("\cxGetExperience\c- - After Randomization: %d, [ExpMultiFactor: %d%]", RealExpGain, ExpMultiFactor);

		RealExpGain = RealExpGain * (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)) / DeftnessExpBase;
		if (debugexp) Console.Printf("\cxGetExperience\c- - Deftness: %d [DeftBonus: %d%]", RealExpGain, (DeftnessExpBase + CallACS("MiscVarCheckDECORATE",33)), DeftnessExpBase);

		RealExpGain = RealExpGain * ExpMultiplier / 100; // EXP Multiplier Option
		if (debugexp) Console.Printf("\cxGetExperience\c- - Multiplier: %d, [ExpMultiOption: %d%]", RealExpGain, ExpMultiplier);
		
		int perkfactor;
		// "Cleared of Mind" Perk
		perkfactor = 1.00;
		if (clearofmind > 0)
		{
			if (clearofmind >= 1) perkfactor += 0.04;
			if (clearofmind >= 2) perkfactor += 0.05;
			if (clearofmind >= 3) perkfactor += 0.06;
			if (clearofmind >= 4) perkfactor += 0.07;
			if (clearofmind >= 5) perkfactor += 0.08;
			if (clearofmindex >= 1) perkfactor += 0.15;
			if (clearofmindex >= 2) perkfactor += 0.15;
			RealExpGain *= perkfactor;
		}
		if (debugexp) Console.Printf("\cxGetExperience\c- - Cleared of Mind: %d, [perkfactor: %8f]", RealExpGain, perkfactor);

		// "Higher Learning" Grand Mastery Perk
		if (CallACS("MiscVarCheckDECORATE",11001) == 1)
		{
			if (CharacterClass == 0 | CharacterClass == 1) RealExpGain *= 1.225; // EXP Multiplier Option [122.5%]
			if (CharacterClass == 2) RealExpGain *= 1.15; // EXP Multiplier Option [115%]
		}
		if (CallACS("MiscVarCheckDECORATE",11001) == 2)
		{
			if (CharacterClass == 0 | CharacterClass == 1) RealExpGain *= 1.45; // EXP Multiplier Option [145%]
			if (CharacterClass == 2) RealExpGain *= 1.3; // EXP Multiplier Option [130%]
		}
		if (debugexp) Console.Printf("\cxGetExperience\c- - Grand Mastery Perk: %d", RealExpGain);

		if (TrueGameSkill <= SKILL_VERY_EASY) RealExpGain *= 2.25;
		else if (TrueGameSkill == SKILL_EASY) RealExpGain *= 1.5;
		else if (TrueGameSkill == SKILL_NORMAL) RealExpGain *= 1.0;
		else if (TrueGameSkill == SKILL_HARD) RealExpGain *= 0.834;
		else if (TrueGameSkill == SKILL_VERY_HARD) RealExpGain *= 0.75;
		else if (TrueGameSkill == SKILL_EXTREME) RealExpGain *= 0.67;
		else if (TrueGameSkill == SKILL_HORRIBLE) RealExpGain *= 0.625;
		else if (TrueGameSkill == SKILL_IMPOSSIBLE) RealExpGain *= 0.5;
		else if (TrueGameSkill >= SKILL_OMEGA) RealExpGain *= 0.4;
		if (debugexp) Console.Printf("\cxGetExperience\c- - Skill Level: %d", RealExpGain);

		double ArmorEXPMulti = 1.0;
		if (CharacterClass == 2)
		{
			if (CountInv("SafeTeaShoes", AAPTR_PLAYER1)) { if (random(1,100) < 6) { ArmorEXPMulti += 0.05; } else { ArmorEXPMulti += 0.025; } }
			if (CountInv("PearlyCorset", AAPTR_PLAYER1)) { if (random(1,100) < 6) { ArmorEXPMulti += 0.3; } else { ArmorEXPMulti += 0.2; } }
			if (CountInv("DoveRibbon", AAPTR_PLAYER1)) { if (random(1,100) < 6) { ArmorEXPMulti += 0.05; } else { ArmorEXPMulti += 0.025; } }
			RealExpGain *= ArmorEXPMulti;
		}
		if (debugexp) Console.Printf("\cxGetExperience\c- - Armor Items: %d, [ArmorEXPMulti: %8f]", RealExpGain, ArmorEXPMulti);

		if (CallACS("GetBuffTimer",7) > 0) { if (random(1,100) > 67) { RealExpGain *= 1.1667; } else { RealExpGain *= 1.08333; } } // Divine Avatar [+8.333% EXP, (33% chance of +16.67% EXP instead]
		if (debugexp) Console.Printf("\cxGetExperience\c- - Final/NewEXP: %d", RealExpGain);
		
		return RealExpGain;
	}

	void A_AddEXP(int baseamount = -2, int flags = 0, int incrementcombo = 1, int expfactor = 100)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int debugexp = dvdsdebug_showexpdebugstuff;
		int debuguncurse = dvdsdebug_shielduncursedisplay;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int terminate;

		int baseexp, finalexpamount, overkillhp, overkillhp2;
		int Exp1, Exp2, ExpMultiFactor, RealExpGain;
		int ComboMultiplier;
		double KillExpMultiplier;
		int KilledByPlayer = 1;
		int fakedeath;
		int random1;
		string ActorClass = GetClassName();
		string nm;

		if (expfactor == 0) expfactor = 100;
		if (flags & 2) fakedeath = 1;
		int MapValue = level.levelnum;
		//Console.Printf("MapNumber: %d", level.levelnum);
		int MonsterX = pos.x;
		int MonsterY = pos.y;
		int MonsterZ = pos.z;
		int DropTimes;
		int MaxDropTimes;
		double DropX, DropY, DropZ;
		double DropVels1, DropVels2;
		int maxdropval;

		double RandomArmorDropChance;
		double RandomArmorDropMulti;
		
		if (user_MaxHP <= 0) 
		{
			overkillhp = SpawnHealth() * -1; overkillhp2 = SpawnHealth() * -4; 
		} 
		else 
		{
			overkillhp = user_MaxHP * -1; overkillhp2 = user_MaxHP * -4; 
		}
				
		MaxDropTimes = 1;
		If (user_legendaryevolved > 0 || CountInv(LDLCheck)) 
		{
			if (bBOSS) MaxDropTimes = random(4,6); else MaxDropTimes = 3;
		}

		for (DropTimes = 0; DropTimes < MaxDropTimes; DropTimes++)
		{
			DropX = (DropTimes - 1) * 1.525;
			DropY = (DropTimes - 1) * 1.525;
			DropZ = (DropTimes - 1) * 3.05;
			DropVels1 = (DropTimes - 1) * 1.565;
			DropVels2 = (DropTimes - 1) * 2.3475;

			if (ClassicDoomType == 4) // Strife
			{
				nm = "DegninOrePickup"; MiscCheck = nm;
				// Enemies in the Degnin Mines or levels in the factory HUB can sometimes drop Degnin Ore depending on the area
				if (MapValue == 14) // Degnin Mines
				{
					if (random(1,768) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,384) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,192) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,96) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,72) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,48) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,24) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (random(1,12) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0);
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP14]", debugexp);
				}
				if (MapValue == 20) // Factory: Receiving
				{
					if (random(1,4096) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,256) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,64) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP20]", debugexp);
				}
				if (MapValue == 21) // Factory: Manufacturing
				{
					if (random(1,4096) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,256) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,64) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP21]", debugexp);
				}
				if (MapValue == 22) // Factory: Forge
				{
					if (random(1,192) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,160) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,128) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,96) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,64) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,32) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,16) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP22]", debugexp);
				}
				if (MapValue == 24) // Factory: Conversion Chapel
				{
					if (random(1,4096) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,256) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,64) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP24]", debugexp);
				}
				if (MapValue == 26) // Proving Grounds
				{
					if (random(1,7168) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1536) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,384) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,96) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP26]", debugexp);
				}
				if (MapValue == 27) // The Lab [Loremaster boss]
				{
					if (random(1,8192) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,512) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,128) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [MAP27]", debugexp);
				}
				if (CountInv("QuestItem29", AAPTR_PLAYER1) > 0) // Destroying the Transmitter allows any other enemy in the game to have a chance to drop Degnin Ore [any level]
				{
					if (random(1,8192) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,512) <= 1) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (debugexp) Console.Printf("\cxAddEXP\c- - Degnin Ore Drop Attempt [Post-Transmitter]", debugexp);
				}
			}
		}
		
		if (TrueGameSkill <= SKILL_VERY_EASY) RandomArmorDropMulti = 0.75;
		else if (TrueGameSkill == SKILL_EASY) RandomArmorDropMulti = 0.90;
		else if (TrueGameSkill == SKILL_NORMAL) RandomArmorDropMulti = 1.00;
		else if (TrueGameSkill == SKILL_HARD) RandomArmorDropMulti = 1.10;
		else if (TrueGameSkill == SKILL_VERY_HARD) RandomArmorDropMulti = 1.25;
		else if (TrueGameSkill == SKILL_EXTREME) RandomArmorDropMulti = 1.35;
		else if (TrueGameSkill == SKILL_HORRIBLE) RandomArmorDropMulti = 1.50;
		else if (TrueGameSkill == SKILL_IMPOSSIBLE) RandomArmorDropMulti = 1.65;
		else if (TrueGameSkill >= SKILL_OMEGA) RandomArmorDropMulti = 1.80;
		
		KilledByPlayer = 1;
		KillExpMultiplier = 1.0; // 20 = 100% [1 = 5%]
		string lastattackername; if (lastattacker) lastattackername = lastattacker.GetClassName();
		playeriskiller = AetheriusPlayerPawn(lastattacker);
		if (debugexp && lastattacker) Console.Printf("\cxAddEXP\c- - lastattacker: %s", lastattackername);
		if (debugexp && playeriskiller) Console.Printf("\cxAddEXP\c- - playeriskiller");
		if (GetCVar("dvds_exppropercredit") == 1)
		{
			if (!playeriskiller) // if (IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == FALSE)
			{
				// TODO: Detect if a friendly monster/summon is the killer of the monster to give EXP credit to the player
				if (lastattacker && lastattacker.bFRIENDLY)
				{
					KilledByPlayer = 0;
					KillExpMultiplier = frandom(0.65,0.90); // [65 to 90%]
					if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) > 0) KillExpMultiplier += 0.10;
					if (KillExpMultiplier >= 1.0) KillExpMultiplier = 1.0;
					if (debugexp) Console.Printf("\cxAddEXP\c- - Passed Player/Friendly-Monster Credit Check: YES, KillMultiplier: %8f", KillExpMultiplier);
				}
				else
				{
					if (debugexp) Console.Printf("\cxAddEXP\c- - Passed Player/Friendly-Monster Credit Check: NO", debugexp);
					terminate = 1;
				}
			}
		}
		
		if (debugexp)
		{
			if (KilledByPlayer == 1) Console.Printf("\cxAddEXP\c- - Passed Player/Friendly-Monster Credit Check: YES (PLAYER), ExpMultiplier: %8f", debugexp, KillExpMultiplier);
			else Console.Printf("\cxAddEXP\c- - Passed Player/Friendly-Monster Credit Check: YES (FRIENDLY ACTOR), ExpMultiplier: %8f", debugexp, KillExpMultiplier);
		}
		
		if (playeriskiller && playeriskiller.health <= 0)  
		{
			if (debugexp) Console.Printf("\cxAddEXP\c- - Passed Player-Alive Check: NO", debugexp);
			terminate = 1;
		}
		else
		{
			if (debugexp) Console.Printf("\cxAddEXP\c- - Passed Player-Alive Check: YES", debugexp);
		}
		
		if (bFRIENDLY) // Any "FRIENDLY" flagged monster who runs the script will not get beyond this point UNLESS they have bit 1 enabled.
		{
			if (flags & 1) { }
			else
			{
				if (debugexp) Console.Printf("\cxAddEXP\c- - Passed FRIENDLY Check: NO", debugexp);
				terminate = 1;
			}
		}
		else
		{
			if (debugexp) Console.Printf("\cxAddEXP\c- - Passed FRIENDLY Check: YES", debugexp);
		}
		
		if (!terminate)
		{
			int HellCoreRuinousDropChance = 5;
			if (CountInv("RuinousShield", AAPTR_PLAYER1) > 0) HellCoreRuinousDropChance *= 3; // Ruinous Shield triples drop rate
			if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0) HellCoreRuinousDropChance *= 4; // Playing Unloved sets this to drop 4x as often
			If (user_legendaryevolved > 0 || CountInv(LDLCheck)) HellCoreRuinousDropChance *= 3; // Being a Legendary triples drop rate.
			if (CharacterClass != 2) HellCoreRuinousDropChance = 0;
			// Monster Unique Drop Rates [Hellcore weapons]
			if (ActorClass == "DSDoomImp")			A_DropItem("ImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "ImpWarlordNew")	A_DropItem("ImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DarkImp")				A_DropItem("DarkImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "STDarkImp")			A_DropItem("DarkImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "VoidDarkImp")		A_DropItem("DarkImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "NetherDarkImp")	A_DropItem("DarkImpClawCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DSCacodemon")		A_DropItem("CacodemonEyeCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "Cacolantern")		A_DropItem("CacolanternEyeCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "Abaddon")				A_DropItem("AbaddonEyeCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DSHellKnight")		A_DropItem("KnightFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DSBaronofHell")	A_DropItem("BaronFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "Belphegor")			A_DropItem("BelphegorFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "BruiserDemon")		A_DropItem("BruiserFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "ArchonOfHell")		A_DropItem("ArchonFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "PyroDemon")			A_DropItem("PyroFistCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DeathIncarnate")	A_DropItem("IncarnateSkullCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "DSArchvile")			A_DropItem("ArchvileHandCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "Diabloist")			A_DropItem("DiabloistHandCI",1,HellCoreRuinousDropChance);
			if (ActorClass == "FlyingBalrog")		A_DropItem("BalrogFistCI",1,HellCoreRuinousDropChance);
			if (debugexp) Console.Printf("\cxAddEXP\c- - HellCoreRuinousDropChance: %d / 256", HellCoreRuinousDropChance);
			
			double uncursethreshold;
			double uncursethreshold2;
			int uncursepts;
			// Ruinous Shield Checks
			if (playeriskiller) // if (IsPointerEqual(AAPTR_TARGET, AAPTR_PLAYER1) == TRUE) 
			{
				if (CharacterClass == 2 && CountInv("RuinousShield", AAPTR_PLAYER1) > 0) // Flora
				{
					if (debugexp) Console.Printf("\cxAddEXP\c- - UncursePts: %d", CallACS("MiscVarCheckDECORATE",202));
					// Increase Ruinous Shield Counter by 1 or 2 pts [this allows the player to uncurse the shield slowly by killing enemies.
					uncursethreshold = 0.9375;
					uncursethreshold2 = 0.625;
					if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0)
					{
						uncursethreshold -= 0.0625;
						uncursethreshold2 -= 0.125;
					}
					if (CallACS("GetBuffTimer",7) > 0) 
					{
						uncursethreshold *= 0.9; 
						uncursethreshold2 *= 0.9; 
					}
					if (frandom(0.0001,1.0000) <= uncursethreshold)
					{
						if (frandom(0.0001,1.0000) <= uncursethreshold2) uncursepts = 1; else uncursepts = 2;
					}
					else
					{
						if (frandom(0.0001,1.0000) <= uncursethreshold2) uncursepts = 4; else uncursepts = 8;
					}
					if (CountInv("DoveRibbon", AAPTR_PLAYER1) > 0) uncursepts *= (2 * random(1,2));
					if (KilledByPlayer != 1) uncursepts /= 4;
					if (uncursepts < 1) uncursepts = 1;
					CallACS("MiscVarSetDECORATE",202,uncursepts,1); // Add
					
					if (debuguncurse) Console.Printf("Uncurse Pts: %d [+%d], Threshold1: %8f, Threshold2: %8f", CallACS("MiscVarCheckDECORATE",202), uncursepts, uncursethreshold, uncursethreshold2);
				}
				
				int donotincreasekills = 0;
				if (ActorClass == "DSBossBrain" || ActorClass == "ClayDevilNew") donotincreasekills = 1;
				if (donotincreasekills == 0) 
				{
					CallACS("MiscVarSetDECORATE",167,1,1); // Add // KillCounter += 1; // Increases Player's actual total kill count by 1
					if (debugexp) Console.Printf("\cxAddEXP\c- - Kills: %d", CallACS("MiscVarCheckDECORATE",167));
				}
			}
			
			int KillCounter = CallACS("MiscVarCheckDECORATE",167);
			double KillCounterFactor = 1.0;
			int KillThreshold1 = 50 * KillCounterFactor;
			int KillThreshold2 = 500 * KillCounterFactor;
			int KillThreshold3 = 2000 * KillCounterFactor;
			int KillThreshold4 = 3500 * KillCounterFactor;
			int KillThreshold5 = 5000 * KillCounterFactor;
			int KillThreshold6 = 7000 * KillCounterFactor;
			int KillThreshold7 = 9000 * KillCounterFactor;
			int KillThreshold8 = 11500 * KillCounterFactor;
			int KillThreshold9 = 14000 * KillCounterFactor;
			int KillThreshold10 = 16500 * KillCounterFactor;
			int KillThreshold11 = 19000 * KillCounterFactor;
			int KillThreshold12 = 22000 * KillCounterFactor;
			int KillThreshold13 = 25000 * KillCounterFactor;
			
			if (ModType == 0) // Classic Doom 1-2/Heretic/Hexen/Strife mode :P
			{
				if (CharacterClass == 2) // Flora
				{
					if (KillCounter == KillThreshold1) // 20 enemies killed, high chance of spawning an armor item for Flora
					{
						// 75% chance
						RandomArmorDropChance = 75.0 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold2) // 200 enemies killed, fair chance of spawning an armor item for Flora
					{
						// 50% chance
						RandomArmorDropChance = 50.0 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold3) // 800 enemies killed, low chance of spawning an armor item for Flora
					{
						// 25% chance
						RandomArmorDropChance = 25.0 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold4) // 1400 enemies killed, low chance of spawning an armor item for Flora
					{
						// 25% chance
						RandomArmorDropChance = 25.0 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold5) // 2000 enemies killed, low chance of spawning an armor item for Flora
					{
						// 12.5% chance
						RandomArmorDropChance = 12.5 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold6) // 2800 enemies killed, low chance of spawning an armor item for Flora
					{
						// 12.5% chance
						RandomArmorDropChance = 12.5 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold7) // 3600 enemies killed, low chance of spawning an armor item for Flora
					{
						// 6.25% chance
						RandomArmorDropChance = 6.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold8) // 4600 enemies killed, low chance of spawning an armor item for Flora
					{
						// 6.25% chance
						RandomArmorDropChance = 6.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold9) // 5600 enemies killed, low chance of spawning an armor item for Flora
					{
						// 6.25% chance
						RandomArmorDropChance = 6.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold10) // 6600 enemies killed, low chance of spawning an armor item for Flora
					{
						// 6.25% chance
						RandomArmorDropChance = 6.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold11) // 7600 enemies killed, low chance of spawning an armor item for Flora
					{
						// 6.25% chance
						RandomArmorDropChance = 6.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold12) // 8800 enemies killed, fair chance of spawning an armor item for Flora
					{
						// 36.25% chance
						RandomArmorDropChance = 36.25 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
					if (KillCounter == KillThreshold13) // 10000 enemies killed, huge chance of spawning an armor item for Flora
					{
						// 92.5% chance
						RandomArmorDropChance = 92.5 * RandomArmorDropMulti;
						if (frandom(0.1,100.0) <= RandomArmorDropChance) A_SpawnItemEx("FloraRandomArmorAlwaysDrop",0.0,0.0,8.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION,0);
					}
				}
			}
			
			int randomdropsallowed = 1;
			int experiessencefactor = 1 + (CallACS("MiscVarCheckDECORATE",33) / 384);
			int basedroprate = 1 + (CallACS("MiscVarCheckDECORATE",33) / 384);
			// Drops
			if (bBOSS) experiessencefactor *= random(8,16);
			if (bFRIENDLY || 
					ActorClass == "DSBossBrain" || 
					ActorClass == "ClayDevilNew" || 
					ActorClass == "FakeGoldLich" || 
					ActorClass == "FireDemonQueenClone" ||
					fakedeath > 0) 
			{ 
				randomdropsallowed = 0; 
				experiessencefactor = 0;
				basedroprate = 0;
			}
		
			if (randomdropsallowed > 0)
			{
				// Anything NOT meant to suspectible to LDL-altered drop rates goes here.
				nm = "TheOneRing"; MiscCheck = nm; 
				if (random(1,262144) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

				// Anything meant to suspectible to LDL-altered drop rates goes here.
				for (DropTimes = 0; DropTimes < MaxDropTimes; DropTimes++)
				{
					DropX = (DropTimes - 1) * 1.525;
					DropY = (DropTimes - 1) * 1.525;
					DropZ = (DropTimes - 1) * 3.05;
					DropVels1 = (DropTimes - 1) * 1.565;
					DropVels2 = (DropTimes - 1) * 2.3475;

					nm = "PoisonNeedle"; MiscCheck = nm; 
					if (CountInv(MiscCheck,AAPTR_PLAYER1) <= 0 && random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "Experiessence"; MiscCheck = nm; 
					if (random(1,256) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,4096) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "LargeExperiessence"; MiscCheck = nm; 
					if (random(1,1024) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,4096) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,16384) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "HugeExperiessence"; MiscCheck = nm; 
					if (random(1,4096) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,16384) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,65536) <= experiessencefactor) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "ElfinElixir"; MiscCheck = nm; 
					if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "GreaterVimstone"; MiscCheck = nm; 
					if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "LesserVimstone"; MiscCheck = nm; 
					if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "SageElixir"; MiscCheck = nm; 
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "PaxaPunch"; MiscCheck = nm; 
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "MercuryBandana"; MiscCheck = nm; 
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "RandomSeedDropAlways"; MiscCheck = nm; 
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "YggdrasilDew"; MiscCheck = nm; 
					if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "MagicWater"; MiscCheck = nm; 
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "RandomPowerupSpawner"; MiscCheck = nm; 
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "MiraclePotion"; MiscCheck = nm; 
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "RandomHerbSpawner"; MiscCheck = nm; 
					if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "RandomMagicSpawner"; MiscCheck = nm; 
					if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "MonsterMunchies"; MiscCheck = nm; 
					if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "RockBombShard"; MiscCheck = nm; 
					if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					nm = "SapphireWandNew"; MiscCheck = nm; 
					if (random(1,16384) <= basedroprate && CharacterClass == 2) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,8192) <= basedroprate && CharacterClass == 2) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					if (random(1,2048) <= basedroprate && CharacterClass == 2) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

					if (ModType == 0) // Classic Mode
					{
						if (ClassicDoomType == 0 || ClassicDoomType == 1 || ClassicDoomType == 5 || ClassicDoomType == 6) // Doom 2, Doom 1, Doom64 or PSXDoom
						{
							nm = "Berserk2"; MiscCheck = nm; 
							if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "MiniBerserk"; MiscCheck = nm; 
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "Medikit2"; MiscCheck = nm; 
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "Stimpack2"; MiscCheck = nm; 
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,128) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SeedofSkillForced"; MiscCheck = nm; 
							if (ActorClass == "HellCleric" && random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "FlyingBalrog" && random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "DSSpiderMastermind" && random(1,64) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "Demolisher" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "DSCyberdemon" && random(1,64) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "Annihilator" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							if (CharacterClass == 0 || CharacterClass == 1) // Deggaris & Illucia Specfic Drops
							{
								nm = "DiamondSkinGA"; MiscCheck = nm; 
								if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "StoneSkinGA"; MiscCheck = nm; 
								if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "DiamondSkin"; MiscCheck = nm; 
								if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "StoneSkin"; MiscCheck = nm; 
								if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "BlueArmorDS"; MiscCheck = nm; 
								if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "GreenArmorDS"; MiscCheck = nm; 
								if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								nm = "ArmorBonusDS2"; MiscCheck = nm; 
								if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								if (random(1,128) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								if (random(1,64) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								if (random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								if (random(1,16) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								if (random(1,8) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

								if (random(1,512) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipBoxNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellBoxNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketBoxNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellPackNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
								if (random(1,256) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipBoxNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellBoxNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketBoxNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellPackNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
								if (random(1,128) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipBoxNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellBoxNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketBoxNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellPackNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
								if (random(1,64) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketAmmoNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
								if (random(1,32) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketAmmoNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
								if (random(1,16) <= basedroprate)
								{
									random1 = random(1,8);
									nm = "ClipNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "ShellNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "RocketAmmoNew"; MiscCheck = nm; if (random1 == 7) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
									nm = "CellNew"; MiscCheck = nm; if (random1 == 8) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								}
							}
						}
						if (ClassicDoomType == 2 || ClassicDoomType == 3) // BOTH Heretic AND Hexen
						{
							nm = "SapphireWandNew"; MiscCheck = nm; 
							if (random(1,2048) <= basedroprate && CharacterClass == 2) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "ArtiSuperHealthNew"; MiscCheck = nm; 
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "ArtiHealthNew"; MiscCheck = nm; 
							if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "CrystalVialNew"; MiscCheck = nm; 
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,128) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						}
						if (ClassicDoomType == 2) // Heretic Only
						{
							nm = "CrystalVialNew"; MiscCheck = nm; 
							if (random(1,32768) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "RockBombShard"; MiscCheck = nm; 
							if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SeedofSkillForced"; MiscCheck = nm; 
							if (ActorClass == "IronlichNew" && random(1,96) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "IceLich" && random(1,96) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "GoldLich" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "BloodLich" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "MaulotaurNew" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "DSparilMountedNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "DSparilUnmountedNew" && random(1,16) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					
							if (random(1,2048) <= basedroprate)
							{
								nm = "RandomHereticWeapon2"; MiscCheck = nm; 
								A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
					
							if (random(1,8192) <= basedroprate)
							{
								nm = "RandomHereticWeapon2"; MiscCheck = nm; 
								A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
					
							if (random(1,32768) <= basedroprate)
							{
								nm = "RandomHereticWeapon2"; MiscCheck = nm; 
								A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
					
							if (random(1,2048) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandHeftyNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowHeftyNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterHeftyNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodHeftyNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodHeftyNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceHeftyNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
							if (random(1,1024) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandHeftyNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowHeftyNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterHeftyNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodHeftyNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodHeftyNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceHeftyNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
							if (random(1,512) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandHeftyNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowHeftyNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterHeftyNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodHeftyNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodHeftyNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceHeftyNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
							if (random(1,256) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandAmmoNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowAmmoNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterAmmoNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodAmmoNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodAmmoNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceAmmoNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
							if (random(1,128) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandAmmoNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowAmmoNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterAmmoNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodAmmoNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodAmmoNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceAmmoNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
							if (random(1,64) <= basedroprate)
							{
								random1 = random(1,12);
								nm = "GoldWandAmmoNew"; MiscCheck = nm; if (random1 >= 1 && random1 <= 3) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "CrossbowAmmoNew"; MiscCheck = nm; if (random1 >= 4 && random1 <= 6) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "BlasterAmmoNew"; MiscCheck = nm; if (random1 >= 7 && random1 <= 9) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "PhoenixRodAmmoNew"; MiscCheck = nm; if (random1 == 10) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "SkullRodAmmoNew"; MiscCheck = nm; if (random1 == 11) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
								nm = "MaceAmmoNew"; MiscCheck = nm; if (random1 == 12) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							}
						}
						if (ClassicDoomType == 3) // Hexen Only
						{
							nm = "ArtiBoostManaNew"; MiscCheck = nm; 
							if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "RockBombShard"; MiscCheck = nm; 
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SeedofSkillForced"; MiscCheck = nm; 
							if (ActorClass == "DragonNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "HeresiarchNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "FighterBossNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "ClericBossNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "MageBossNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "KoraxNew" && random(1,16) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						}
						if (ClassicDoomType == 4) // Strife
						{
							nm = "RandomSeedDropAlways"; MiscCheck = nm;
							if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "ElfinElixir"; MiscCheck = nm;
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "PoisonBoltsNew"; MiscCheck = nm; 
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SurgeryKitNew"; MiscCheck = nm; 
							if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SapphireWandNew"; MiscCheck = nm; 
							if (random(1,4096) <= basedroprate && CharacterClass == 2) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "ElectricBoltsNew"; MiscCheck = nm; 
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "RandomPowerupSpawner"; MiscCheck = nm; 
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SageElixir"; MiscCheck = nm; 
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "RandomHerbSpawner"; MiscCheck = nm; 
							if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "MedicalKitNew"; MiscCheck = nm; 
							if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "MagicWater"; MiscCheck = nm; 
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "MedPatchNew"; MiscCheck = nm; 
							if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (random(1,128) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

							nm = "SeedofSkillForced"; MiscCheck = nm; 
							if (ActorClass == "ProgrammerNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "StrifeBishopNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "Macil2New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "LoreMasterNew" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "AlienSpectre1New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "AlienSpectre2New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "AlienSpectre3New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "AlienSpectre4New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "AlienSpectre5New" && random(1,32) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "EntityBossNew" && random(1,16) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "EntitySecondNew" && random(1,16) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
							if (ActorClass == "EntityAscended" && random(1,8) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						}
					}
					else // DVI/DVII mode
					{
						nm = "Berserk2"; MiscCheck = nm; 
						if (random(1,16384) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (random(1,8192) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

						nm = "MiniBerserk"; MiscCheck = nm; 
						if (random(1,4096) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (random(1,2048) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

						nm = "Medikit2"; MiscCheck = nm; 
						if (random(1,1024) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (random(1,512) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

						nm = "Stimpack2"; MiscCheck = nm; 
						if (random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (random(1,128) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //

						nm = "SeedofSkillForced"; MiscCheck = nm; 
						if (ActorClass == "HellCleric" && random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (ActorClass == "FlyingBalrog" && random(1,256) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (ActorClass == "DSSpiderMastermind" && random(1,64) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (ActorClass == "Demolisher" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (ActorClass == "DSCyberdemon" && random(1,64) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
						if (ActorClass == "Annihilator" && random(1,48) <= basedroprate) A_SpawnItemEx(MiscCheck,frandom(-DropX,DropX),frandom(-DropY,DropY),frandom(-DropZ,DropZ),frandom(-DropVels1,DropVels1),frandom(-DropVels1,DropVels1),frandom(-DropVels2,DropVels2),0,SXF_NOCHECKPOSITION,0); //
					}
				}
			}
			
			//**********************
			//* START OF EXP GAINS *
			//**********************
			int EXPTimerIncrease;
			int ComboTimerDelayIncrease;
			if (ModType == 0 && dvds_noexpgains != 0) 
			{
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP Gains: STOPPED", debugexp);
			}
			else
			{
				// Increment the kill combo timer
				if (dvds_expcombosystem == 1)
				{
					int ComboTimerDelay = CallACS("MiscVarCheckDECORATE",162);
					int EXPTimer = CallACS("MiscVarCheckDECORATE",157);
					if (incrementcombo == 1)
					{
						if (EXPTimer <= 0) // If not set, set to 4 seconds, if already set, add 1 second
						{
							EXPTimerIncrease = 2800; // 140 tics [20 units / tic]
							EXPTimerIncrease += (CallACS("MiscVarCheckDECORATE",31) * 16); // 1 point of Agility = 0.8 tics [or 16 units] [5 points = 4 tics (or 80 units)]
							EXPTimerIncrease += (CallACS("MiscVarCheckDECORATE",33) * 4); // 1 point of Deftness = 0.2 tics [or 4 units] [20 points = 4 tics (or 80 units)]
							ComboTimerDelayIncrease = random(2,4) * 4;
						}
						else
						{
							EXPTimerIncrease = 700; // 35 tics [20 units / tic]
							EXPTimerIncrease += (CallACS("MiscVarCheckDECORATE",31) * 4); // 1 point of Agility = 0.8 tics [or 16 units] [5 points = 4 tics (or 80 units)]
							EXPTimerIncrease += (CallACS("MiscVarCheckDECORATE",33) * 1); // 1 point of Deftness = 0.2 tics [or 4 units] [20 points = 4 tics (or 80 units)]
							ComboTimerDelayIncrease = random(2,4) * 2;
						}
					
						// "Legendary" Check
						if (CountInv(LDLCheck)) { EXPTimerIncrease *= 2.5; ComboTimerDelayIncrease *= 2.5; }
						// BOSS Flag Check
						if (bBOSS) { EXPTimerIncrease *= 1.5; ComboTimerDelayIncrease *= 1.5; }
						// STEALTH Flag Check
						if (bSTEALTH) { EXPTimerIncrease *= 1.5; ComboTimerDelayIncrease *= 1.5; }
						// "Cleared of Mind" Perk
						if (clearofmind == 1) { EXPTimerIncrease *= 1.015; ComboTimerDelayIncrease *= 1.015; }
						if (clearofmind == 2) { EXPTimerIncrease *= 1.03; ComboTimerDelayIncrease *= 1.03; }
						if (clearofmind == 3) { EXPTimerIncrease *= 1.06; ComboTimerDelayIncrease *= 1.06; }
						if (clearofmind == 4) { EXPTimerIncrease *= 1.12; ComboTimerDelayIncrease *= 1.12; }
						if (clearofmind == 5) { EXPTimerIncrease *= 1.24; ComboTimerDelayIncrease *= 1.24; }
						// "Higher Learning" Grand Mastery Perk
						if (CallACS("MiscVarCheckDECORATE",11001) == 1) { EXPTimerIncrease *= 1.15; ComboTimerDelayIncrease *= 1.15; }
						if (CallACS("MiscVarCheckDECORATE",11001) == 2) { EXPTimerIncrease *= 1.30; ComboTimerDelayIncrease *= 1.30; }
					
						if (CallACS("GetBuffTimer",7) > 0) { EXPTimerIncrease *= 1.25; ComboTimerDelayIncrease *= 1.25; } // Divine Avatar
						if (CallACS("GetBuffTimer",12) > 0) { EXPTimerIncrease *= 1.25; ComboTimerDelayIncrease *= 1.25; } // Acceleratle
						if (CallACS("GetBuffTimer",15) > 0) { EXPTimerIncrease *= 0.8; ComboTimerDelayIncrease *= 0.8; } // Deceleratle
						EXPTimer += EXPTimerIncrease;
						ComboTimerDelay += ComboTimerDelayIncrease;
						if (CallACS("GetBuffTimer",7) > 0) 
						{
							if (EXPTimer >= 7000) EXPTimer = 7000; // Combo Timer maxes at 10 seconds.
						}
						else
						{
							if (EXPTimer >= 5600) EXPTimer = 5600; // Combo Timer maxes at 8 seconds.
						}
						CallACS("MiscVarSetDECORATE",157,EXPTimer,0);
						CallACS("MiscVarSetDECORATE",162,ComboTimerDelay,0);
						CallACS("MiscVarSetDECORATE",158,1,1); // combonumber += 1; // Increment Kill Combo Count by 1
					}
				}
				
				// Check Base Experience to see if it's a fixed amount or if it should be based on spawnhealth/user_MaxHP
				if (baseamount == -2) // Base on the menu option
				{
					if (dvds_monsterexpbase == 1)
					{
						if (user_MaxHP <= 0) baseexp = SpawnHealth(); else baseexp = user_MaxHP;
					}
					else
					{
						baseexp = SpawnHealth();
					}
				}
				else
				if (baseamount == -1) // ALWAYS use SpawnHealth and not user_MaxHP [if you always want it based only on their base HP and not their recalculated HP]
				{
					baseexp = SpawnHealth();
				}
				else
				if (baseamount == 0) // Checks for user_MaxHP first, but will use SpawnHealth if it's not been set
				{
					if (user_MaxHP <= 0) baseexp = SpawnHealth(); else baseexp = user_MaxHP;
				}
				else
				if (baseamount > 0) // Sets the EXP to the defined value as a fixed amount
				{
					baseexp = baseamount;
				}
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Base EXP]", baseexp);
				double basemulti = (frandompick(0.175,0.20,0.225,0.25,0.275,0.30,0.325) * 2);
				double basemulti2 = ((PlayerLevel * 1.0) * (basemulti * 0.01));
				baseexp *= (basemulti + basemulti2);
				if (baseexp < 1) baseexp = 1;
				finalexpamount = baseexp;
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [POST-Base EXP], %8f, %8f", finalexpamount, basemulti, basemulti2);
				
				finalexpamount = (finalexpamount * expfactor) / 100; 
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [ExtraFactor: %d / 100]", finalexpamount, expfactor);
				
				// Special Calls
				if (ActorClass == "ForgottenOne")
				{
					finalexpamount *= 2.5; 
				}
				if (ActorClass == "DSBossBrain")
				{
					finalexpamount *= random(3,5);
				}
				if (ActorClass == "Banshee" || ActorClass == "DeathKnight")
				{
					finalexpamount *= frandom(1.5,2.5);
					if (random(1,4) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,16) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,64) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
				}
				if (ActorClass == "Bormereth" || ActorClass == "FireDemonQueen" || ActorClass == "EtherealChaosSerpentNew" || ActorClass == "DarkPatriarch")
				{
					finalexpamount *= frandom(2.5,3.5);
					if (random(1,1) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,4) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,16) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
				}
				if (ActorClass == "IceGolem" || ActorClass == "IceGolemGhost" || ActorClass == "VampireDVDS")
				{
					finalexpamount *= frandom(1.0,2.0);
					if (random(1,24) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,96) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
					if (random(1,384) <= basedroprate) A_DropItem("RandomSeedDropForcedAlways",1,256);
				}
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Actor Check]", finalexpamount);
				
				if (fakedeath > 0) // Fake deaths [Death Incarnate, etc] cut EXP gain by 75/87.5%
				{
					finalexpamount = finalexpamount * 0.25;
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Fake-Death]", finalexpamount);
				}
				
				finalexpamount *= KillExpMultiplier;
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Multiplier: %8f]", finalexpamount, KillExpMultiplier);
				
				// Check for Fast Monsters setting
				if (sv_fastmonsters == 1)
				{
					finalexpamount *= 1.375; // [+37.5%]
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Fast Monsters On]", finalexpamount);
				}
				
				// Check Proper Flags
				if (user_isstealth)
				{
					if (CountInv("TheOneRing", AAPTR_PLAYER1) > 0) finalexpamount *= 1.0625;	// DV-DS Style Stealth = [+6.25%]
					else finalexpamount *= 1.4375;	// DV-DS Style Stealth = [+43.75%]
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Was Stealth]", finalexpamount);
				}
				if (bSTEALTH) // ZDoom Style STEALTH = [+100%]
				{
					finalexpamount = finalexpamount * 1.5;
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Has ZDoom(tm) Stealth]", finalexpamount);
				}
				
				// If LEGENDARY [LDL Compatiblity]
				If (user_legendaryevolved > 0 || CountInv(LDLCheck))
				{
					finalexpamount *= 1.75;
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP: %d [Is a 'Legendary' Monster? (LDL)]", finalexpamount);
				}
				
 
				if (health <= overkillhp) // Overkilled [+12.5%]
				{
					finalexpamount *= 1.125;
					CallACS("MiscVarSetDECORATE",2022,1); // OVERKILL display color
					CallACS("MiscVarSetDECORATE",2023,39); // OVERKILL Timer Tics
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP4a: %d", finalexpamount);
				}
				if (health <= overkillhp2) // Super-Overkilled [+12.5%]
				{
					finalexpamount *= 1.125; 
					CallACS("MiscVarSetDECORATE",2022,2); // OVERKILL display color 
					CallACS("MiscVarSetDECORATE",2023,52); // OVERKILL Timer Tics 
					if (debugexp) Console.Printf("\cxAddEXP\c- - EXP4b: %d", finalexpamount);
				}
				
				finalexpamount = A_GetExperience(finalexpamount,A_GetExpMultiFactor()); // FUNCTION CALL
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP5: %d", finalexpamount);
				
				double levelcheck = 1.000 + (user_monsterlevel * 0.0075); // Lvl 100 = +75% EXP (Lvl 200 = +150% EXP)
				if (levelcheck < 1.000) levelcheck = 1.000;
				if (levelcheck > 8.000) levelcheck = 8.000;
				finalexpamount = finalexpamount * levelcheck;
				if (debugexp) Console.Printf("\cxAddEXP\c- - EXP6: %d [levelcheck: %8fx]", finalexpamount, levelcheck);
				
				int PreComboEXP = finalexpamount;
				// EXP Combo Counter
				// [158] = number of enemies killed in current combo
				// [159] = current multiplier amount [xxx.xx% format]
				int combonumber = CallACS("MiscVarCheckDECORATE",158);
				double combomultiplieramt = CallACS("MiscVarCheckDECORATE",159);
				if (combonumber > 1)
				{
					if (combonumber < 11)
					{
						combomultiplieramt = combonumber * 0.16;
						// Each enemy = +0.16% to the bonus multiplier [2-11 enemies killed]
					}
					else
					if (combonumber > 10 && combonumber < 21)
					{
						combomultiplieramt = combonumber * 0.17;
						// Each enemy = +0.17% to the bonus multiplier [11-20 enemies killed]
					}
					else
					if (combonumber > 20 && combonumber < 36)
					{
						combomultiplieramt = combonumber * 0.20;
						// Each enemy = +0.20% to the bonus multiplier [21-35 enemies killed]
					}
					else
					if (combonumber > 35 && combonumber < 61)
					{
						combomultiplieramt = combonumber * 0.24;
						// Each enemy = +0.24% to the bonus multiplier [36-60 enemies killed]
					}
					else
					if (combonumber > 60 && combonumber < 101)
					{
						combomultiplieramt = combonumber * 0.28;
						// Each enemy = +0.28% to the bonus multiplier [61-100 enemies killed]
					}
					else
					if (combonumber > 100 && combonumber < 201)
					{
						combomultiplieramt = combonumber * 0.34;
						// Each enemy = +0.34% to the bonus multiplier [101-200 enemies killed]
					}
					else
					if (combonumber > 200 && combonumber < 501)
					{
						combomultiplieramt = combonumber * 0.40;
						// Each enemy = +0.40% to the bonus multiplier [201-500 enemies killed]
					}
					else
					if (combonumber > 500)
					{
						combomultiplieramt = combonumber * 0.52;
						// Each enemy = +0.52% to the bonus multiplier [501+ enemies killed]
					}
					combomultiplieramt = combomultiplieramt * dvds_expcombobasemultiplier / 100;
					if (combomultiplieramt < 0.01) combomultiplieramt = 0.01;
					combomultiplieramt = combomultiplieramt + 100.00;
				
					finalexpamount = (finalexpamount * combomultiplieramt) / 100;
					int combomultiplieramt2 = combomultiplieramt * 100;
					CallACS("MiscVarSetDECORATE",159,combomultiplieramt2);
					if (debugexp) Console.Printf("\cxAddEXP\c- - Combo %: %3f, EXP7: %d", combomultiplieramt, finalexpamount);
				}
				
				if (finalexpamount < 1) finalexpamount = 1;
				CallACS("ExpCheat",finalexpamount,0,0);
				if (debugexp) Console.Printf("\cxAddEXP\c- - LstHPAmt: %d / OverkillHP: %d, BaseEXP: %d / FinalEXP: %d, 'Friendly' Multiplier: %8f", health, overkillhp, baseexp, finalexpamount, KillExpMultiplier);
				
				CallACS("MiscVarSetDECORATE",2024,finalexpamount); // Total EXP for kill [for new HUD]
				CallACS("MiscVarSetDECORATE",2025,PreComboEXP); // Total EXP for kill [for new HUD]
				CallACS("MiscVarSetDECORATE",2026,78);
				
				if (dvds_expcombosystem == 1 && incrementcombo == 1) CallACS("MiscVarSetDECORATE",160,finalexpamount,1);
			}
		}
	}

	// Stealth Calculations
	void A_RefreshStealthInfo(int type = 0)
	{
		/*
		STYLE_None (0)
		STYLE_Normal (1)
		STYLE_Fuzzy (2)
		STYLE_SoulTrans (3)
		STYLE_OptFuzzy (4)
		STYLE_Stencil (5)
		STYLE_Translucent (6)
		STYLE_Add (7)
		STYLE_Shaded (8)
		STYLE_TranslucentStencil (9)
		STYLE_Shadow (10)
		STYLE_Subtract (11)
		STYLE_AddStencil (12)
		STYLE_AddShaded (13)
		*/
		int dvdsdebug_evolvestealthstuff = dvdsdebug_evolvestealthstuff;
		double TempAlpha;

		if (!bSTEALTH)
		{
			if (type == 0) // nothing special
			{
				if (user_isstealth > 0)
				{
					A_SetRenderStyle(InitAlpha,6); // Set to "Translucent"
					TempAlpha = InitAlpha;
					if (dvds_rnd_stealthlevel <= 0) TempAlpha *= 0.5;
					if (dvds_rnd_stealthlevel == 1) TempAlpha *= 0.25;
					if (dvds_rnd_stealthlevel == 2) TempAlpha *= 0.125;
					if (dvds_rnd_stealthlevel == 3) TempAlpha *= 0.0625;
					if (dvds_rnd_stealthlevel >= 4) TempAlpha *= 0.03125;
					if (InitRenderType == 4) TempAlpha *= 0.5;
					if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Base - Normal]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);

					// The One Ring - Quarters Stealth Cloaking
					if (CountInv("TheOneRing",AAPTR_PLAYER1) > 0) 
					{
						TempAlpha = 1.0 - ((1.0 - TempAlpha) * 0.25);
						if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Ring - Normal]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);
					}

					// Night-Vision - Halves Stealth Cloaking
					if (CallACS("GetBuffTimer",0) > 0)
					{
						TempAlpha = 1.0 - ((1.0 - TempAlpha) * 0.5);
						if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Night Vision - Normal]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);
					}

					Alpha = TempAlpha;
				}
				else
				{
					A_SetRenderStyle(InitAlpha,InitRenderType);
					Alpha = InitAlpha;
				}
			}

			if (type == 1) // attacking
			{
				if (user_isstealth > 0)
				{
					A_SetRenderStyle(InitAlpha,6); // Set to "Translucent"
					TempAlpha = InitAlpha;
					if (dvds_rnd_stealthlevel <= 0) TempAlpha *= 0.8334;
					if (dvds_rnd_stealthlevel == 1) TempAlpha *= 0.75;
					if (dvds_rnd_stealthlevel == 2) TempAlpha *= 0.7084;
					if (dvds_rnd_stealthlevel == 3) TempAlpha *= 0.6875;
					if (dvds_rnd_stealthlevel >= 4) TempAlpha *= 0.677083;
					if (InitRenderType == 4) TempAlpha *= 0.5;
					if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Base - Attacking]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);

					// The One Ring - Quarters Stealth Cloaking
					if (CountInv("TheOneRing",AAPTR_PLAYER1) > 0) 
					{
						TempAlpha = 1.0 - ((1.0 - TempAlpha) * 0.25);
						if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Ring - Attacking]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);
					}

					// Night-Vision - Halves Stealth Cloaking
					if (CallACS("GetBuffTimer",0) > 0)
					{
						TempAlpha = 1.0 - ((1.0 - TempAlpha) * 0.5);
						if (dvdsdebug_evolvestealthstuff) Console.Printf("TempAlpha [Night Vision - Attacking]: %8f (Name: %s) (InitAlpha: %8f)", TempAlpha, GetClassName(), InitAlpha);
					}

					Alpha = TempAlpha;
				}
				else
				{
					A_SetRenderStyle(InitAlpha,InitRenderType);
					Alpha = InitAlpha;
				}
			}

			if (type == 2) // dying
			{
				A_SetRenderStyle(InitAlpha,InitRenderType);
				Alpha = InitAlpha;
			}
		}
	}

	// Ice Death
	void A_DVDSIceDeath(int baseamount = -2, int flags = 0, int incrementcombo = 1, int expfactor = 100)
	{
		A_AddEXP(baseamount, flags, incrementcombo, expfactor);
		//CallACS("AddEXP", baseamount, flags, incrementcombo, expfactor);
		bCANTSEEK = TRUE; // Prevents seeking missiles from going after frozen enemies
		bICECORPSE = TRUE; // Prevents Frost spell missiles from impacting on frozen enemies
	}

	// Death
	void A_DVDSNormalDeath(int baseamount = -2, int flags = 0, int incrementcombo = 1, int expfactor = 100)
	{
		A_AddEXP(baseamount, flags, incrementcombo, expfactor);
		//CallACS("AddEXP", baseamount, flags, incrementcombo, expfactor);
	}
	
	// Diabloist Gravity Attack
	void A_DiabloistGravityCheck()
	{
		gravitypulsetimer = 0;
		Actor targ = target;
		if (targ)
		{
			if (random(1,8) <= 3)
			{
				user_gravitytype = 3;
			}
			else
			{
				user_gravitytype = random(1,2);
			}

			Actor playertarg = AetheriusPlayerPawn(target);
			if (!playertarg && user_gravitytype != 0) user_gravitytype = 1;
			//Console.Printf("user_gravitytype: %d", user_gravitytype);

			targ.A_PlaySound("diabloistgravitystart", CHAN_7);
			bNOTARGETSWITCH = true;
			if (random(1,256) <= (85.334 + (user_monsterlevel/4.5))) bNOPAIN = true;
			bQUICKTORETALIATE = false;
		}
	}
	
	void A_DiabloistSpawnGravityNodes()
	{
		gravitypulsetimer = 0;
		if (user_gravitytype == 1 || user_gravitytype == 3) 
		{
			//A_Log("HP Targetter");
			if (levelbehavior > 0 && user_monsterlevel > 240) { A_VileTarget("DiabloistGravityHPTargeter3"); }
			else if (levelbehavior > 0 && user_monsterlevel > 120) { A_VileTarget("DiabloistGravityHPTargeter2"); }
			else { A_VileTarget("DiabloistGravityHPTargeter"); }
		}
		if (user_gravitytype == 2 || user_gravitytype == 3)
		{
			//A_Log("MP Targetter");
			if (levelbehavior > 0 && user_monsterlevel > 240) { A_VileTarget("DiabloistGravityManaTargeter3"); }
			else if (levelbehavior > 0 && user_monsterlevel > 120) { A_VileTarget("DiabloistGravityManaTargeter2"); }
			else { A_VileTarget("DiabloistGravityManaTargeter"); }
		}
		bNOTARGETSWITCH = true;
		bQUICKTORETALIATE = false;
	}
	
	void A_DiabloistGravityPulse(double speed)
	{
		gravitypulsetimer += speed;
		
		if ((level.time % 3) == 0)
		{
			if (bNOPAIN)
			{
				if (random (1,256) <= (32+(user_monsterlevel/100)))
				{
					if (random (1,256) <= (256+(user_monsterlevel/12.5))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (213.334+(user_monsterlevel/15))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (170.667+(user_monsterlevel/18.75))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (128+(user_monsterlevel/25))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (85.334+(user_monsterlevel/37.5))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (42.667+(user_monsterlevel/50))) A_Chase(null,null, CHF_FASTCHASE);
				}
			}
			else
			{
				if (random (1,256) <= (128+(user_monsterlevel/25)))
				{
					if (random (1,256) <= (256+(user_monsterlevel/12.5))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (213.334+(user_monsterlevel/15))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (170.667+(user_monsterlevel/18.75))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (128+(user_monsterlevel/25))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (85.334+(user_monsterlevel/37.5))) A_Chase(null,null, CHF_FASTCHASE);
					if (random (1,256) <= (42.667+(user_monsterlevel/50))) A_Chase(null,null, CHF_FASTCHASE);
				}
			}
		}
		
		if (gravitypulsetimer > 22.5)
		{
			gravitypulsetimer -= 22.5;
			A_PlaySound("diabloistgravitypulse", CHAN_7);
		}
	}
	
	void A_DiabloistGravity(int gravitytype)
	{
		gravitypulsetimer = 0;
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		double GravityEffectFactor, FinalGravityFactor;
		int PropertyValue, TherapeusisFactor, LevelFactor;
		int basedmgratio;
		int AffectedStat, MultFactor, THEEffect;
		int CharacterClass = CallACS("CheckCharacterClass");
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);

		Actor targ = target;
		if (targ)
		{
			gravitytype -= 1;
			Actor playertarg = AetheriusPlayerPawn(target);
			if (!playertarg && gravitytype != 0) gravitytype = 0;

			A_FaceTarget();
			if (!CheckSight(targ, 0)) return;
			if (playertarg && playertarg.CountInv("PlayerDashing")) return;

			targ.A_PlaySound("diabloistgravityend", CHAN_7);

			if (playertarg)
			{
				if (InvulnerabilityTimer > 0)
				{
					//Console.Printf("gravitytype: %d [Invulnerable]", gravitytype);

					if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.0625;  
					if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.1250;  
					if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.2500;  
					if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.3750;  
					if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.4375;  
					if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.450;  
					if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.4625;  
					if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.475;  
					if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.490;
					if (gravitytype == 2) GravityEffectFactor *= 2;
					if (random(1,16) == 16) GravityEffectFactor *= 2;

					// SeedTHE Levels
					// Deggaris = 300 Needed to max out
					// Illucia = 200 Needed to max out
					// Flora = 150 Needed to max out
					if (CharacterClass == 0)
					{
						TherapeusisFactor = 300 - CallACS("MiscVarCheckDECORATE",36);
						if (TherapeusisFactor < 0) TherapeusisFactor = 0;
						GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 300;
					}
					if (CharacterClass == 1)
					{
						TherapeusisFactor = 200 - CallACS("MiscVarCheckDECORATE",36);
						if (TherapeusisFactor < 0) TherapeusisFactor = 0;
						GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 200;
					}
					if (CharacterClass == 2)
					{
						TherapeusisFactor = 150 - CallACS("MiscVarCheckDECORATE",36);
						if (TherapeusisFactor < 0) TherapeusisFactor = 0;
						GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 150;
					}
					if (CharacterClass == 8)
					{
						TherapeusisFactor = 175 - CallACS("MiscVarCheckDECORATE",36);
						if (TherapeusisFactor < 0) TherapeusisFactor = 0;
						GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 175;
					}
					if (CharacterClass == 9)
					{
						TherapeusisFactor = 225 - CallACS("MiscVarCheckDECORATE",36);
						if (TherapeusisFactor < 0) TherapeusisFactor = 0;
						GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 225;
					}
					FinalGravityFactor = 1.000 - GravityEffectFactor;
					if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
					if (GravityEffectFactor > 0.000)
					{
						double PrevInvulnTime = InvulnerabilityTimer;
						PropertyValue = InvulnerabilityTimer;
						PropertyValue = PropertyValue * FinalGravityFactor;
				
						if (PropertyValue < 1) PropertyValue = 1;
						CallACS("GetBuffTimer",4,1,PropertyValue);
						if (playertarg) playertarg.A_SetBlend("C0 C0 C0",1.25,random(39,40));
						PrevInvulnTime -= PropertyValue;
						PrevInvulnTime /= 35;
						if (playertarg) playertarg.A_Print(String.Format("%1f second[s] of your invulnerablity were sapped!", PrevInvulnTime));
					}
				}
				else
				{
					//Console.Printf("gravitytype: %d", gravitytype);

					if (gravitytype == 0) // HP only
					{
						if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.125;  
						if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.250;  
						if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.500;  
						if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.750;  
						if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.875;  
						if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.900;  
						if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.925;  
						if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.950;  
						if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.980;
						// SeedTHE Levels
						// Deggaris = 300 Needed to max out
						// Illucia = 200 Needed to max out
						// Flora = 150 Needed to max out
						if (CharacterClass == 0)
						{
							TherapeusisFactor = 300 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 300;
						}
						if (CharacterClass == 1)
						{
							TherapeusisFactor = 200 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 200;
						}
						if (CharacterClass == 2)
						{
							TherapeusisFactor = 150 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 150;
						}
						if (CharacterClass == 8)
						{
							TherapeusisFactor = 175 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 175;
						}
						if (CharacterClass == 9)
						{
							TherapeusisFactor = 225 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 225;
						}
						FinalGravityFactor = 1.000 - GravityEffectFactor;
						if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
						if (GravityEffectFactor > 0.000)
						{
							PropertyValue = targ.health;
							PropertyValue = PropertyValue * FinalGravityFactor;
					
							if (PropertyValue < 1) PropertyValue = 1;
							targ.health = PropertyValue;
							if (playertarg) playertarg.A_SetBlend("C0 00 00",1.25,random(39,40));
						}
					}
					else
					if (gravitytype == 1) // Mana only
					{
						if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.125;  
						if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.250;  
						if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.500;  
						if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.750;  
						if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.875;  
						if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.900;  
						if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.925;  
						if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.950;  
						if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.980;
						// SeedTHE Levels
						// Deggaris = 300 Needed to max out
						// Illucia = 200 Needed to max out
						// Flora = 150 Needed to max out
						if (CharacterClass == 0)
						{
							TherapeusisFactor = 300 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 300;
						}
						if (CharacterClass == 1)
						{
							TherapeusisFactor = 200 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 200;
						}
						if (CharacterClass == 2)
						{
							TherapeusisFactor = 150 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 150;
						}
						if (CharacterClass == 8)
						{
							TherapeusisFactor = 175 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 175;
						}
						if (CharacterClass == 9)
						{
							TherapeusisFactor = 225 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 225;
						}
						FinalGravityFactor = 1.000 - GravityEffectFactor;
						if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
						if (GravityEffectFactor > 0.000)
						{
							PropertyValue = CallACS("StatCheck",14);
							PropertyValue = PropertyValue * FinalGravityFactor;
					
							if (PropertyValue < 1) PropertyValue = 1;
							CallACS("OtherVarSetDECORATE",2,PropertyValue);
							if (playertarg) playertarg.A_SetBlend("00 00 C0",1.25,random(39,40));
						}
					}
					else
					if (gravitytype == 2) // HP & Mana
					{
						// HP Damage
						if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.125;  
						if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.250;  
						if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.500;  
						if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.750;  
						if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.875;  
						if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.900;  
						if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.925;  
						if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.950;  
						if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.980;
						// SeedTHE Levels
						// Deggaris = 300 Needed to max out
						// Illucia = 200 Needed to max out
						// Flora = 150 Needed to max out
						if (CharacterClass == 0)
						{
							TherapeusisFactor = 300 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 300;
						}
						if (CharacterClass == 1)
						{
							TherapeusisFactor = 200 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 200;
						}
						if (CharacterClass == 2)
						{
							TherapeusisFactor = 150 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 150;
						}
						if (CharacterClass == 8)
						{
							TherapeusisFactor = 175 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 175;
						}
						if (CharacterClass == 9)
						{
							TherapeusisFactor = 225 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 225;
						}
						FinalGravityFactor = 1.000 - GravityEffectFactor;
						if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
						if (GravityEffectFactor > 0.000)
						{
							PropertyValue = targ.health;
							PropertyValue = PropertyValue * FinalGravityFactor;
					
							if (PropertyValue < 1) PropertyValue = 1;
							targ.health = PropertyValue;
						}
						
						// MP Damage
						if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.125;  
						if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.250;  
						if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.500;  
						if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.750;  
						if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.875;  
						if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.900;  
						if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.925;  
						if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.950;  
						if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.980;
						if (random(1,16) != 16) GravityEffectFactor /= 2;
						// SeedTHE Levels
						// Deggaris = 300 Needed to max out
						// Illucia = 200 Needed to max out
						// Flora = 150 Needed to max out
						if (CharacterClass == 0)
						{
							TherapeusisFactor = 300 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 300;
						}
						if (CharacterClass == 1)
						{
							TherapeusisFactor = 200 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 200;
						}
						if (CharacterClass == 2)
						{
							TherapeusisFactor = 150 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 150;
						}
						if (CharacterClass == 8)
						{
							TherapeusisFactor = 175 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 175;
						}
						if (CharacterClass == 9)
						{
							TherapeusisFactor = 225 - CallACS("MiscVarCheckDECORATE",36);
							if (TherapeusisFactor < 0) TherapeusisFactor = 0;
							GravityEffectFactor = GravityEffectFactor * TherapeusisFactor / 225;
						}
						FinalGravityFactor = 1.000 - GravityEffectFactor;
						if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
						if (GravityEffectFactor > 0.000)
						{
							PropertyValue = CallACS("StatCheck",14);
							PropertyValue = PropertyValue * FinalGravityFactor;
					
							if (PropertyValue < 1) PropertyValue = 1;
							CallACS("OtherVarSetDECORATE",2,PropertyValue);
						}
						if (playertarg) playertarg.A_SetBlend("C0 00 C0",1.25,random(39,40));
					}
					
					// Inflict Possible Blindness
					if (playertarg && random(1,32) <= 1) ACS_NamedExecuteAlways("BuffTimer",0,8,19,random(17,51));
				}
			}
			else
			{
				if (TrueGameSkill <= SKILL_VERY_EASY) GravityEffectFactor = 0.125;  
				if (TrueGameSkill == SKILL_EASY) GravityEffectFactor = 0.250;  
				if (TrueGameSkill == SKILL_NORMAL) GravityEffectFactor = 0.500;  
				if (TrueGameSkill == SKILL_HARD) GravityEffectFactor = 0.750;  
				if (TrueGameSkill == SKILL_VERY_HARD) GravityEffectFactor = 0.875;  
				if (TrueGameSkill == SKILL_EXTREME) GravityEffectFactor = 0.900;  
				if (TrueGameSkill == SKILL_HORRIBLE) GravityEffectFactor = 0.925;  
				if (TrueGameSkill == SKILL_IMPOSSIBLE) GravityEffectFactor = 0.950;  
				if (TrueGameSkill >= SKILL_OMEGA) GravityEffectFactor = 0.980;

				LevelFactor = 512 - user_monsterlevel;
				GravityEffectFactor = GravityEffectFactor * LevelFactor / 512;

				FinalGravityFactor = 1.000 - GravityEffectFactor;
				if (GravityEffectFactor < 0.000) GravityEffectFactor = 0.000;
				if (GravityEffectFactor > 0.000)
				{
					PropertyValue = targ.health;
					PropertyValue = PropertyValue * FinalGravityFactor;
				
					if (PropertyValue < 1) PropertyValue = 1;
					targ.health = PropertyValue;
				}
			}
		}
		bQUICKTORETALIATE = true;
		bNOPAIN = false;
		bNOTARGETSWITCH = false;
	}
	
	//**************************
	//*HERETIC-UNIQUE FUNCTIONS*
	//**************************
	// Gargoyle
	void A_ImpMsAttack()
	{
		if (!target || random[ImpMSAtk]() > 64)
		{
			SetState (SeeState);
			return;
		}
		A_SkullAttack(12);
	}

	void A_ImpExplode()
	{
		Actor chunk;

		bNoGravity = false;

		chunk = Spawn("HereticImpChunk1", pos, ALLOW_REPLACE);
		if (chunk != null)
		{
			chunk.vel.x = random2[ImpExplode]() / 64.;
			chunk.vel.y = random2[ImpExplode]() / 64.;
			chunk.vel.z = 9;
		}

		chunk = Spawn("HereticImpChunk2", pos, ALLOW_REPLACE);
		if (chunk != null)
		{
			chunk.vel.x = random2[ImpExplode]() / 64.;
			chunk.vel.y = random2[ImpExplode]() / 64.;
			chunk.vel.z = 9;
		}
		
		if (extremecrash)
		{
			SetStateLabel ("XCrash");
		}
	}

 	void A_ImpDeath()
	{
		bSolid = false;
		bFloorClip = true;
	}

	void A_ImpXDeath1()
	{
		bSolid = false;
		bFloorClip = true;
		bNoGravity = true;
		extremecrash = true;
	}

	// Knight
	void A_KnightAttack ()
	{
		if (!target) return;
		if (CheckMeleeRange ())
		{
			int damage = random[KnightAttack](1, 8) * 3;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			A_PlaySound ("hknight/melee", CHAN_BODY);
			return;
		}
		// Throw axe
		A_PlaySound (AttackSound, CHAN_BODY);
		if (self.bShadow || random[KnightAttack]() < 40)
		{
			// Red axe
			SpawnMissileZ (pos.Z + 36, target, "RedAxe");
		}
		else
		{
			// Green axe
			SpawnMissileZ (pos.Z + 36, target, "KnightAxe");
		}
	}

	// Disciple
	void A_GhostOff ()
	{
		A_SetRenderStyle(1.0, STYLE_Normal);
		bGhost = false;
	}

	void A_WizAtk1 ()
	{
		A_FaceTarget ();
		A_GhostOff();
	}

	void A_WizAtk2 ()
	{
		A_FaceTarget ();
		A_SetRenderStyle(HR_SHADOW, STYLE_Translucent);
		bGhost = true;
	}

	// Disciple Shot [Heretic]
	void A_WizAtk3 (string missiletype = "WizardFX1New", string crisismissiletype = "WizardFX1Crisis", int meleedamage = 4, bool playcrisissound = 1)
	{
		A_GhostOff();
		if (!target) return;
		A_PlaySound (AttackSound, CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) { meleedamage *= CallACS("CrisisMultiplier"); if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } }
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		if (user_canusecrisisatk == 1) 
		{
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
			Actor mo = SpawnMissile (target, crisismissiletype);
			if (mo != null)
			{
				SpawnMissileAngle(crisismissiletype, mo.Angle - 45. / 8, mo.Vel.Z);
				SpawnMissileAngle(crisismissiletype, mo.Angle + 45. / 8, mo.Vel.Z);
			}
		}
		else
		{
			Actor mo = SpawnMissile (target, missiletype);
			if (mo != null)
			{
				SpawnMissileAngle(missiletype, mo.Angle - 45. / 8, mo.Vel.Z);
				SpawnMissileAngle(missiletype, mo.Angle + 45. / 8, mo.Vel.Z);
			}
		}
	}

	// Iron Lich
	void A_LichAttack (int fireshots = 5, int tornados = 1, int meleedamage = 6, string icemissile = "HeadFX1New", string icemissilecrisis = "HeadFX1Crisis", string firemissile = "HeadFX3New", string firemissilecrisis = "HeadFX3Crisis", string twistermissile = "WhirlwindNew", string twistermissilecrisis = "WhirlwindCrisis", bool playcrisissound = 1)
	{
		static const int atkResolve1[] = { 50, 150 };
		static const int atkResolve2[] = { 150, 200 };

		// Ice ball		(close 20% : far 60%)
		// Fire column	(close 40% : far 20%)
		// Whirlwind	(close 40% : far 20%)
		// Distance threshold = 8 cells

		if (target == null)
		{
			return;
		}
		A_FaceTarget ();
		if (CheckMeleeRange ())
		{
			A_MonsterCrisisCheck(); // LichAttack - Melee
			if (user_canusecrisisatk == 1) 
			{ 
				if (playcrisissound == 1) { A_PlayCrisisAtkSound(); } 
				meleedamage *= CallACS("CrisisMultiplier"); 
			}
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int dist = Distance2D(target) > 8 * 64;
		int randAttack = random[LichAttack]();
		if (randAttack < atkResolve1[dist])
		{
			// Ice ball
			A_MonsterCrisisCheck(); // LichAttack - Ice Ball
			if (user_canusecrisisatk == 1) 
			{
				if (playcrisissound == 1) { A_PlayCrisisAtkSound(); }
				SpawnMissile (target, icemissilecrisis); 
			}
			else 
			{
				SpawnMissile (target, icemissile); 
			}
			A_PlaySound ("ironlich/attack2", CHAN_BODY);
		}
		else if (randAttack < atkResolve2[dist])
		{
			// Fire column
			string firetype = firemissile;
			A_MonsterCrisisCheck(); // LichAttack - Fire Wall/Column
			if (user_canusecrisisatk == 1) { firetype = firemissilecrisis; }
			Actor baseFire = SpawnMissile (target, firetype);
			if (baseFire != null)
			{
				baseFire.SetStateLabel("NoGrow");
				for (int i = 0; i < fireshots; i++)
				{
					Actor fire = Spawn(firetype, baseFire.Pos, ALLOW_REPLACE);
					if (i == 0)
					{
						A_PlaySound ("ironlich/attack1", CHAN_BODY);
					}
					if (fire != null)
					{
						fire.target = baseFire.target;
						fire.angle = baseFire.angle;
						fire.Vel = baseFire.Vel;
						fire.SetDamage(0);
						fire.health = (i+1) * 2;
						fire.CheckMissileSpawn (radius);
					}
				}
			}
		}
		else
		{
			// Whirlwind
			for (int i = 0; i < tornados; i++)
			{
				string twistertype = twistermissile;
				A_MonsterCrisisCheck(); // LichAttack - Whirlwind
				if (user_canusecrisisatk == 1) { twistertype = twistermissilecrisis; }
				Actor mo = SpawnMissile (target, twistertype);
				if (mo != null)
				{
					mo.AddZ(-32+(i*16));
					mo.tracer = target;
					mo.health = 20*TICRATE; // Duration
					A_PlaySound ("ironlich/attack3", CHAN_BODY);
				}
			}
		}
	}

	//************************
	//*HEXEN-UNIQUE FUNCTIONS*
	//************************
	// Centaur
	void A_CentaurDefend()
	{
		A_FaceTarget ();
		if (CheckMeleeRange() && random[CentaurDefend]() < 32)
		{
			// This should unset REFLECTIVE as well
			// (unless you want the Centaur to reflect projectiles forever!)
			bReflective = false;
			bInvulnerable = false;
			SetState(MeleeState);
		}
	}

    // Afrit
	private void A_FiredSpawnRock ()
	{
		Actor mo;
		class<Actor> rtype;

		switch (random[FireDemonRock](0, 4))
		{
			case 0:
				rtype = "FireDemonRock1";
				break;
			case 1:
				rtype = "FireDemonRock2";
				break;
			case 2:
				rtype = "FireDemonRock3";
				break;
			case 3:
				rtype = "FireDemonRock4";
				break;
			case 4:
			default:
				rtype = "FireDemonRock5";
				break;
		}

		double xo = (random[FireDemonRock]() - 128) / 16.;
		double yo = (random[FireDemonRock]() - 128) / 16.;
		double zo = random[FireDemonRock]() / 32.;
		mo = Spawn (rtype, Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.Vel.X = (random[FireDemonRock]() - 128) / 64.;
			mo.Vel.Y = (random[FireDemonRock]() - 128) / 64.;
			mo.Vel.Z = (random[FireDemonRock]() / 64.);
			mo.special1 = 2;		// Number bounces
		}

		// Initialize fire demon
		fdstrafecount = 0;
		bJustAttacked = false;
	}

	void A_FiredRocks()
	{
		A_FiredSpawnRock ();
		A_FiredSpawnRock ();
		A_FiredSpawnRock ();
		A_FiredSpawnRock ();
		A_FiredSpawnRock ();
	}

	void A_FiredAttack()
	{
		if (target == null)	return;
		Actor mo = SpawnMissile (target, "FireDemonMissile");
		if (mo) A_PlaySound ("FireDemonAttack", CHAN_BODY);
	}

	void A_FireDChase(int minheight = 64, int strafecnt = 3, int strafechance = 30, int atkchance = 20)
	{
		int weaveindex = special1;
		double ang;
		double dist;

		if (reactiontime) reactiontime--;
		if (threshold) threshold--;

		// Float up and down
		AddZ(BobSin(weaveindex));
		special1 = (weaveindex + 2) & 63;

		// Ensure it stays above certain height
		if (pos.Z < floorz + minheight)
		{
			AddZ(2);
		}

		if(!target || !target.bShootable)
		{
			// Invalid target
			LookForPlayers (true);
			return;
		}

		// Strafe
		if (fdstrafecount > 0)
		{
			fdstrafecount--;
		}
		else
		{
			fdstrafecount = 0;
			Vel.X = Vel.Y = 0;
			dist = Distance2D(target);
			if (dist < FIREDEMON_ATTACK_RANGE)
			{
				if (random[FiredChase]() < strafechance)
				{
					ang = AngleTo(target);
					if (random[FiredChase]() < 128)
						ang += 90;
					else
						ang -= 90;
					Thrust(8, ang);
					fdstrafecount = strafecnt;	// strafe time
				}
			}
		}

		FaceMovementDirection ();

		// Normal movement
		if (!fdstrafecount)
		{
			if (--movecount<0 || !MonsterMove ())
			{
				NewChaseDir ();
			}
		}

		// Do missile attack
		if (!bJustAttacked)
		{
			if (CheckMissileRange () && (random[FiredChase]() < 20))
			{
				if(!target || !target.bShootable || target.health < 1)
				{
					// Invalid target
					LookForPlayers (true);
					return;
				}
				else
				{
					SetState (MissileState);
					bJustAttacked = true;
					return;
				}
			}
		}
		else
		{
			bJustAttacked = false;
		}

		// make active sound
		if (random[FiredChase]() < 3)
		{
			PlayActiveSound ();
		}
	}

	void A_FiredSplotch()
	{
		Actor mo;

		mo = Spawn ("FireDemonSplotch1", Pos, ALLOW_REPLACE);
		if (mo)
		{
			mo.Vel.X = (random[FireDemonSplotch]() - 128) / 32.;
			mo.Vel.Y = (random[FireDemonSplotch]() - 128) / 32.;
			mo.Vel.Z = (random[FireDemonSplotch]() / 64.) + 3;
		}
		mo = Spawn ("FireDemonSplotch2", Pos, ALLOW_REPLACE);
		if (mo)
		{
			mo.Vel.X = (random[FireDemonSplotch]() - 128) / 32.;
			mo.Vel.Y = (random[FireDemonSplotch]() - 128) / 32.;
			mo.Vel.Z = (random[FireDemonSplotch]() / 64.) + 3;
		}
	}
	
	// Bishop
	void A_BishopAttack(int meleedmg = 4, int missilenum = 5)
	{

		if (!target)
		{
			return;
		}
		A_PlaySound (AttackSound, CHAN_BODY);
		if (CheckMeleeRange())
		{
			A_MonsterCrisisCheck(); // A_BishopAttack - Melee
			if (user_canusecrisisatk == 1) 
			{
				meleedmg *= CallACS("CrisisMultiplier");
				A_PlayCrisisAtkSound();
			}
			int damage = meleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		missilecount = missilenum;
	}

	void A_BishopAttack2(string missiletype = "BishopFX", string crisismissiletype = "BishopFXCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // BishopAttack2 - Missiles
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; }

		if (!target || !missilecount)
		{
			missilecount = 0;
			SetState (SeeState);
			return;
		}
		Actor mo = SpawnMissile (target, atktype);
		if (mo != null)
		{
			mo.tracer = target;
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
		}
		missilecount--;
		return;
	}
	
	void A_BishopDecide()
	{
		if (random[BishopDecide]() >= 220)
		{
			SetStateLabel ("Blur");
		}
	}

	void A_BishopDoBlur(int blurrand = 3, int blurnum = 3)
	{
		missilecount = (random[BishopDoBlur]() & blurrand) + blurnum; // Random number of blurs
		if (random[BishopDoBlur]() < 120)
		{
			Thrust(11, Angle + 90);
		}
		else if (random[BishopDoBlur]() > 125)
		{
			Thrust(11, Angle - 90);
		}
		else
		{
			// Thrust forward
			Thrust(11);
		}
		A_PlaySound ("BishopBlur", CHAN_BODY);
	}

	void A_BishopSpawnBlur(int seestatechance = 96)
	{
		if (!--missilecount)
		{
			Vel.XY = (0,0);// = Vel.Y = 0;
			if (random[BishopSpawnBlur]() > seestatechance)
			{
				SetState (SeeState);
			}
			else
			{
				SetState (MissileState);
			}
		}
		Actor mo = Spawn ("BishopBlur", Pos, ALLOW_REPLACE);
		if (mo)
		{
			mo.angle = angle;
		}
	}

	void A_BishopChase()
	{
		double newz = pos.z - BobSin(bobstate) / 2.;
		bobstate = (bobstate + 4) & 63;
		newz += BobSin(bobstate) / 2.;
		SetZ(newz);
	}

	void A_BishopPainBlur(int chance = 64)
	{
		if (random[BishopPainBlur]() < chance)
		{
			SetStateLabel ("Blur");
			return;
		}
		double xo = random2[BishopPainBlur]() / 16.;
		double yo = random2[BishopPainBlue]() / 16.;
		double zo = random2[BishopPainBlue]() / 32.;
		Actor mo = Spawn ("BishopPainBlur", Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
		if (mo)
		{
			mo.angle = angle;
		}
	}

	// Stalker
	void A_SerpentUnHide()
	{
		bInvisible = false;
		Floorclip = 24;
	}
	void A_SerpentHide()
	{
		bInvisible = true;
		Floorclip = 0;
	}

	void A_SerpentRaiseHump()
	{
		Floorclip -= 4;
	}
	void A_SerpentLowerHump()
	{
		Floorclip += 4;
	}
	void A_SerpentHumpDecide()
	{
		if (MissileState != NULL)
		{
			if (random[SerpentHump]() > 30)
			{
				return;
			}
			else if (random[SerpentHump]() < 40)
			{
				// Missile attack
				SetState (MeleeState);
				return;
			}
		}
		else if (random[SerpentHump]() > 3)
		{
			return;
		}
		if (!CheckMeleeRange ())
		{
			// The hump shouldn't occur when within melee range
			if (MissileState != NULL && random[SerpentHump]() < 128)
			{
				SetState (MeleeState);
			}
			else
			{
				SetStateLabel("Hump");
				A_PlaySound ("SerpentActive", CHAN_BODY);
			}
		}
	}
	
	void A_SerpentCheckForAttack()
	{
		if (!target)
		{
			return;
		}
		if (MissileState != NULL)
		{
			if (!CheckMeleeRange ())
			{
				SetStateLabel ("Attack");
				return;
			}
		}
		if (CheckMeleeRange2 ())
		{
			SetStateLabel ("Walk");
		}
		else if (CheckMeleeRange ())
		{
			if (random[SerpentAttack]() < 32)
			{
				SetStateLabel ("Walk");
			}
			else
			{
				SetStateLabel ("Attack");
			}
		}
	}

	void A_SerpentChooseAttack()
	{
		if (!target || CheckMeleeRange())
		{
			return;
		}
		if (MissileState != NULL)
		{
			SetState (MissileState);
		}
	}

	void A_SerpentMeleeAttack()
	{
		if (!target)
		{
			return;
		}
		if (CheckMeleeRange ())
		{
			int damage = random[SerpentAttack](1, 8) * 5;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			A_PlaySound ("SerpentMeleeHit", CHAN_BODY);
		}
		if (random[SerpentAttack]() < 96)
		{
			A_SerpentCheckForAttack();
		}
	}

	void A_SerpentSpawnGibs()
	{
		static const class<Actor> GibTypes[] =
		{
			"SerpentGib3",
			"SerpentGib2",
			"SerpentGib1"
		};

		for (int i = 2; i >= 0; --i)
		{
			double x = (random[SerpentGibs]() - 128) / 16.;
			double y = (random[SerpentGibs]() - 128) / 16.;

			Actor mo = Spawn (GibTypes[i], Vec2OffsetZ(x, y, floorz + 1), ALLOW_REPLACE);
			if (mo)
			{
				mo.Vel.X = (random[SerpentGibs]() - 128) / 1024.f;
				mo.Vel.Y = (random[SerpentGibs]() - 128) / 1024.f;
				mo.Floorclip = 6;
			}
		}
	}

    // Reiver
	void A_WraithInit()
	{
		AddZ(48);

		// [RH] Make sure the wraith didn't go into the ceiling
		if (pos.z + height > ceilingz)
		{
			SetZ(ceilingz - Height);
		}

		WeaveIndexZ = 0;			// index into floatbob
	}

	void A_WraithChase()
	{
		int weaveindex = WeaveIndexZ;
		AddZ(BobSin(weaveindex));
		WeaveIndexZ = (weaveindex + 2) & 63;
		A_Chase ();
		A_WraithFX4 ();
	}

	void A_WraithFX3()
	{
		int numdropped = random[WraithFX3](0,14);

		while (numdropped-- > 0)
		{
			double xo = (random[WraithFX3]() - 128) / 32.;
			double yo = (random[WraithFX3]() - 128) / 32.;
			double zo = random[WraithFX3]() / 64.;

			Actor mo = Spawn("WraithFX3", Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
			if (mo)
			{
				mo.floorz = floorz;
				mo.ceilingz = ceilingz;
				mo.target = self;
			}
		}
	}

	void A_WraithFX4 ()
	{
		int chance = random[WraithFX4]();
		bool spawn4, spawn5;

		if (chance < 10)
		{
			spawn4 = true;
			spawn5 = false;
		}
		else if (chance < 20)
		{
			spawn4 = false;
			spawn5 = true;
		}
		else if (chance < 25)
		{
			spawn4 = true;
			spawn5 = true;
		}
		else
		{
			spawn4 = false;
			spawn5 = false;
		}

		if (spawn4)
		{
			double xo = (random[WraithFX4]() - 128) / 16.;
			double yo = (random[WraithFX4]() - 128) / 16.;
			double zo = (random[WraithFX4]() / 64.);

			Actor mo = Spawn ("WraithFX4", Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
			if (mo)
			{
				mo.floorz = floorz;
				mo.ceilingz = ceilingz;
				mo.target = self;
			}
		}
		if (spawn5)
		{
			double xo = (random[WraithFX4]() - 128) / 32.;
			double yo = (random[WraithFX4]() - 128) / 32.;
			double zo = (random[WraithFX4]() / 64.);

			Actor mo = Spawn ("WraithFX5", Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
			if (mo)
			{
				mo.floorz = floorz;
				mo.ceilingz = ceilingz;
				mo.target = self;
			}
		}
	}
	
	void A_WraithMelee(int drainamount)
	{
		int maxdrain;
		if (drainamount == 0) drainamount = random[StealHealth](1,8)*2;

		if (user_MaxHP <= 0) maxdrain = spawnhealth(); else maxdrain = user_MaxHP;
		// Steal health from target and give to self
		if (CheckMeleeRange() && (random[StealHealth]() < maxdrain))
		{
			A_MonsterCrisisCheck(); // WraithMelee - Life Drain
			if (user_canusecrisisatk == 1) 
			{
				drainamount *= CallACS("CrisisMultiplier");
				A_PlayCrisisAtkSound(); 
			}
			int amount = drainamount;
			target.DamageMobj (self, self, amount, 'Melee');
			if (health < maxdrain && target.bINVULNERABLE == 0)
			{
				health += amount;
				if (health > maxdrain) health = maxdrain;
			}
		}
	}

	void A_WraithRaiseInit()
	{
		bInvisible = false;
		bNonShootable = false;
		bDontBlast = false;
		bShootable = true;
		bSolid = true;
		Floorclip = Height;
	}

	void A_WraithRaise()
	{
		if (RaiseMobj (2))
		{
			// Reached it's target height
			// [RH] Once a buried wraith is fully raised, it should be
			// morphable, right?
			bDontMorph = false;
			bSpecialFloorClip = false;
			SetStateLabel ("Chase");
			// [RH] Reset PainChance to a normal wraith's.
			PainChance = GetDefaultByType("Wraith").PainChance;
		}

		SpawnDirt (radius);
	}

	// Wendigo
	private void SpawnWisp()
	{
		static const class<Actor> WispTypes[] = { "IceGuyWisp1", "IceGuyWisp2" };

		double dist = (random[IceGuyLook]() - 128) * radius / 128.;
		double an = angle + 90;
		Actor mo = Spawn(WispTypes[random[IceGuyLook]() & 1], Vec3Angle(dist, an, 60.), ALLOW_REPLACE);
		if (mo)
		{
			mo.Vel = Vel;
			mo.target = self;
		}
	}

	void A_IceGuyLook()
	{
		A_Look();
		if (random[IceGuyLook]() < 64) SpawnWisp();
	}

	void A_IceGuyChase()
	{
		A_Chase();
		if (random[IceGuyLook]() < 128) SpawnWisp();
	}

	void A_IceGuyAttack(string missiletype = "IceGuyFXNew", string crisismissiletype = "IceGuyFXCrisis", bool playcrisissound = 1)
	{
		if(!target) 
		{
			return;
		}
		string specialmissile = missiletype;

		A_MonsterCrisisCheck(); // IceGuyAttack
		if(user_canusecrisisatk == 1)
		{
			if (playcrisissound == 1) { A_PlayCrisisAtkSound(); A_PlayCrisisAtkSound(); } 
			specialmissile = crisismissiletype;
		}

		SpawnMissileXYZ(Vec3Angle(radius / 2, angle + 90, 40.), target, specialmissile);
		SpawnMissileXYZ(Vec3Angle(radius / 2, angle - 90, 40.), target, specialmissile);
		A_PlaySound (AttackSound, CHAN_WEAPON);
	}
	
    // Death Wyvern
	private void DragonSeek (double thresh, double turnMax, int meleedamage, string missiletype = "DragonFireball", string crisismissiletype = "DragonFireballCrisis")
	{
		double dist;
		double delta;
		Actor targ;
		int i;
		double bestAngle;
		double angleToSpot, angleToTarget;
		Actor mo;

		targ = tracer;
		if(targ == null)
		{
			return;
		}

		double diff = deltaangle(angle, AngleTo(targ));
		delta = abs(diff);

		if (delta > thresh)
		{
			delta /= 2;
			if (delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if (diff > 0)
		{
			// Turn clockwise
			angle = angle + delta;
		}
		else
		{
			// Turn counter clockwise
			angle = angle - delta;
		}
		VelFromAngle();

		dist = DistanceBySpeed(targ, Speed);
		if (pos.z + height < targ.pos.z || targ.pos.z + targ.height < pos.z)
		{
			Vel.Z = (targ.pos.z - pos.z) / dist;
		}
		if (targ.bShootable && random[DragonSeek]() < 64)
		{
			// attack the destination mobj if it's attackable
			Actor oldTarget;
			
			if (absangle(angle, AngleTo(targ)) < 22.5)
			{
				oldTarget = target;
				target = targ;
				if (CheckMeleeRange ())
				{
					A_MonsterCrisisCheck(); // DragonSeek - Melee
					int basedmg = meleedamage;
					if (user_canusecrisisatk == 1) 
					{
						basedmg *= CallACS("CrisisMultiplier");	
						A_PlayCrisisAtkSound();
					}

					int damage = basedmg;
					int newdam = target.DamageMobj (self, self, damage, 'Melee');
					target.TraceBleed (newdam > 0 ? newdam : damage, self);
					A_PlaySound (AttackSound, CHAN_WEAPON);
				}
				else if (random[DragonSeek]() < 128 && CheckMissileRange())
				{
					string atktype = missiletype;
					A_MonsterCrisisCheck(); // DragonSeek - Missile
					if(user_canusecrisisatk == 1)
					{
						A_PlayCrisisAtkSound();
						atktype = crisismissiletype;
					}
					SpawnMissile(targ, atktype);		
					A_PlaySound (AttackSound, CHAN_WEAPON);
				}
				target = oldTarget;
			}
		}
		if (dist < 4)
		{
			// Hit the target thing
			if (target && random[DragonSeek]() < 200)
			{
				Actor bestActor = null;
				bestAngle = 360.;
				angleToTarget = AngleTo(target);
				for (i = 0; i < 5; i++)
				{
					if (!targ.args[i])
					{
						continue;
					}
					ActorIterator iter = Level.CreateActorIterator(targ.args[i]);
					mo = iter.Next ();
					if (mo == null)
					{
						continue;
					}
					angleToSpot = AngleTo(mo);
					double diff = absangle(angleToSpot, angleToTarget);
					if (diff < bestAngle)
					{
						bestAngle = diff;
						bestActor = mo;
					}
				}
				if (bestActor != null)
				{
					tracer = bestActor;
				}
			}
			else
			{
				// [RH] Don't lock up if the dragon doesn't have any
				// targs defined
				for (i = 0; i < 5; ++i)
				{
					if (targ.args[i] != 0)
					{
						break;
					}
				}
				if (i < 5)
				{
					do
					{
						i = (random[DragonSeek]() >> 2) % 5;
					} while(!targ.args[i]);
					ActorIterator iter = Level.CreateActorIterator(targ.args[i]);
					tracer = iter.Next ();
				}
			}
		}
	}

	void A_DragonInitFlight()
	{
		ActorIterator iter = Level.CreateActorIterator(tid);

		do
		{
			// find the first tid identical to the dragon's tid
			tracer = iter.Next ();
			if (tracer == null)
			{
				SetState (SpawnState);
				return;
			}
		} while (tracer == self);
		RemoveFromHash ();
	}

	void A_DragonFlight(double thresh = 4., double turnMax = 8., int meleedamage = 10, string missiletype = "DragonFireball", string crisismissiletype = "DragonFireballCrisis")
	{
		double ang;

		DragonSeek (thresh, turnMax, meleedamage, missiletype, crisismissiletype);
		if (target)
		{
			if(!target.bShootable)
			{
				// target died
				target = null;
				return;
			}
			ang = absangle(angle, AngleTo(target));
			if (ang <22.5 && CheckMeleeRange())
			{
				int basedmg = meleedamage;
				A_MonsterCrisisCheck(); // DragonFlight - Melee
				if (user_canusecrisisatk == 1) 
				{
					basedmg *= CallACS("CrisisMultiplier");	
					A_PlayCrisisAtkSound();
				}

				int damage = basedmg;
				int newdam = target.DamageMobj (self, self, damage, 'Melee');
				target.TraceBleed (newdam > 0 ? newdam : damage, self);
				A_PlaySound (AttackSound, CHAN_WEAPON);
			}
			else if (ang <= 20)
			{
				SetState (MissileState);
				A_PlaySound (AttackSound, CHAN_WEAPON);
			}
		}
		else
		{
			LookForPlayers (true);
		}
	}

	void A_DragonFlap(double thresh = 4., double turnMax = 8., int meleedamage = 10, string missiletype = "DragonFireball", string crisismissiletype = "DragonFireballCrisis")
	{
		A_DragonFlight(thresh,turnMax,meleedamage,missiletype,crisismissiletype);
		if (random[DragonFlight]() < 240)
		{
			A_PlaySound ("DragonWingflap", CHAN_BODY);
		}
		else
		{
			PlayActiveSound ();
		}
	}

	void A_DragonAttack(string missiletype = "DragonFireball", string crisismissiletype = "DragonFireballCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // DragonAttack - Missile
		if(user_canusecrisisatk == 1)
		{
			A_PlayCrisisAtkSound();
			atktype = crisismissiletype;
		}
		SpawnMissile (target, atktype);
	}

	void A_DragonPain()
	{
		A_Pain();
		if (!tracer)
		{
			// no destination spot yet
			SetState (SeeState);
		}
	}

	void A_DragonCheckCrash()
	{
		if (pos.z <= floorz)
		{
			SetStateLabel ("Crash");
		}
	}
	
	// Traductus
	void A_ClericAttack(string missiletype = "HolyMissile", string crisismissiletype = "HolyMissileCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Cleric Attack - Projectile
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; A_PlayCrisisAtkSound(); }

		if (!target) return;

		Actor missile = SpawnMissileZ (pos.z + 40., target, atktype);
		if (missile != null) missile.tracer = null;	// No initial target
		A_PlaySound ("HolySymbolFire", CHAN_WEAPON);
	}

    // Menelkir	
	void MStaffSpawn2 (double angle, string missiletype = "MageStaffFX2", string crisismissiletype = "MageStaffFX2Crisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Magic Attack - Projectile
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; A_PlayCrisisAtkSound(); }

		Actor mo = SpawnMissileAngleZ (pos.z + 40, atktype, angle, 0.);
		if (mo)
		{
			mo.target = self;
			mo.tracer = RoughMonsterSearch(10, true, true);
		}
	}
	void A_MageAttack(string missiletype = "MageStaffFX2", string crisismissiletype = "MageStaffFX2Crisis")
	{
		if (target == NULL)
		{
			return;
		}
		MStaffSpawn2(angle,missiletype,crisismissiletype);
		MStaffSpawn2(angle-5,missiletype,crisismissiletype);
		MStaffSpawn2(angle+5,missiletype,crisismissiletype);
		A_PlaySound("MageStaffFire", CHAN_WEAPON);
	}

	// Zedek
	void A_FighterAttack(string missiletype = "FSwordMissile", string crisismissiletype = "FSwordMissileCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Fighter Attack - Projectile
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; A_PlayCrisisAtkSound(); }

		if (!target) return;

		SpawnMissileAngle(atktype, Angle + (45. / 4), 0);
		SpawnMissileAngle(atktype, Angle + (45. / 8), 0);
		SpawnMissileAngle(atktype, Angle, 0);
		SpawnMissileAngle(atktype, Angle - (45. / 8), 0);
		SpawnMissileAngle(atktype, Angle - (45. / 4), 0);
		A_PlaySound ("FighterSwordFire", CHAN_WEAPON);
	}



	//*************************
	//*STRIFE-UNIQUE FUNCTIONS*
	//*************************
	// Acolyte
	void A_AcolyteDie ()
	{
		// [RH] Disable translucency here.
		A_SetRenderStyle(1, STYLE_Normal);

		// Only the Blue Acolyte does extra stuff on death.
		if (self is "AcolyteBlue")
		{
			int i;
			// Make sure somebody is still alive
			for (i = 0; i < MAXPLAYERS; ++i)
			{
				if (playeringame[i] && players[i].health > 0)
					break;
			}
			if (i == MAXPLAYERS)
				return;

			// Make sure all the other blue acolytes are dead, but do this only once in case of simultaneous kills.
			if (CheckBossDeath() && !players[i].mo.FindInventory("QuestItem7"))
			{
				players[i].mo.GiveInventoryType ("QuestItem7");
				players[i].SetLogNumber (14);
				A_StopSound (CHAN_VOICE);
				A_PlaySound ("svox/voc14", CHAN_VOICE);
			}
		}
	}

	void A_BeShadowyFoe()
	{
		A_SetRenderStyle(HR_SHADOW, STYLE_Translucent);
		bFriendly = false;
	}

	void A_AcolyteBits()
	{
		if (SpawnFlags & MTF_SHADOW)
		{
			A_BeShadowyFoe();
		}
		if (SpawnFlags & MTF_ALTSHADOW)
		{
			if (bShadow)
			{
				// I dunno.
			}
			else
			{
				A_SetRenderStyle(0, STYLE_None);
			}
		}
	}
	
	// Templar
	void A_TemplarAttack()
	{
		if (target != null)
		{
			A_PlaySound ("templar/shoot", CHAN_WEAPON);
			A_FaceTarget ();
			double pitch = AimLineAttack (angle, MISSILERANGE);

			for (int i = 0; i < 10; ++i)
			{
				int damage = (random[Templar]() & 4) * 2;
				double ang = angle + random2[Templar]() * (11.25 / 256);
				LineAttack (ang, MISSILERANGE+64., pitch + random2[Templar]() * (7.097 / 256), damage, 'Hitscan', "MaulerPuff");
			}
		}
	}

	// Inquisitor
	void A_InquisitorWalk ()
	{
		A_PlaySound ("inquisitor/walk", CHAN_BODY);
		A_Chase ();
	}

	private bool InquisitorCheckDistance ()
	{
		if (reactiontime == 0 && CheckSight (target))
		{
			return Distance2D (target) < 264.;
		}
		return false;
	}

	void A_InquisitorDecide ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		if (!InquisitorCheckDistance ())
		{
			SetStateLabel("Grenade");
		}
		if (target.pos.z != pos.z)
		{
			if (pos.z + height + 54 < ceilingz)
			{
				SetStateLabel("Jump");
			}
		}
	}

	void A_InquisitorAttack (string missiletype = "InquisitorShot", string crisismissiletype = "InquisitorShotCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Inquisitor Attack - Projectile
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; A_PlayCrisisAtkSound(); }

		if (target == null)
			return;

		A_FaceTarget ();

		AddZ(32);
		angle -= 45./32;
		Actor proj = SpawnMissileZAimed (pos.z, target, atktype);
		if (proj != null)
		{
			proj.Vel.Z += 9;
		}
		angle += 45./16;
		proj = SpawnMissileZAimed (pos.z, target, atktype);
		if (proj != null)
		{
			proj.Vel.Z += 16;
		}
		AddZ(-32);
	}

	void A_InquisitorJump ()
	{
		if (target == null)
			return;

		A_PlaySound ("inquisitor/jump", CHAN_ITEM, 1, true);
		AddZ(64);
		A_FaceTarget ();
		let localspeed = Speed * (2./3);
		VelFromAngle(localspeed);
		double dist = DistanceBySpeed(target, localspeed);
		Vel.Z = (target.pos.z - pos.z) / dist;
		reactiontime = 60;
		bNoGravity = true;
	}

	void A_InquisitorCheckLand ()
	{
		reactiontime--;
		if (reactiontime < 0 ||
			Vel.X == 0 ||
			Vel.Y == 0 ||
			pos.z <= floorz)
		{
			SetState (SeeState);
			reactiontime = 0;
			bNoGravity = false;
			A_StopSound (CHAN_ITEM);
			return;
		}
		A_PlaySound ("inquisitor/jump", CHAN_ITEM, 1, true);
	}

	void A_TossArm ()
	{
		Actor foo = Spawn("InquisitorArm", Pos + (0,0,24), ALLOW_REPLACE);
		if (foo != null)
		{
			foo.angle = angle - 90. + Random2[Inquisitor]() * (360./1024.);
			foo.VelFromAngle(foo.Speed / 8);
			foo.Vel.Z = random[Inquisitor]() / 64.;
		}
	}
	
	// Reaver
	void A_ReaverRanged ()
	{
		if (target != null)
		{
			A_FaceTarget ();
			A_PlaySound ("reaver/attack", CHAN_WEAPON);
			double bangle = Angle;
			double pitch = AimLineAttack (bangle, MISSILERANGE);

			for (int i = 0; i < 3; ++i)
			{
				double ang = bangle + Random2[ReaverAttack]() * (22.5 / 256);
				int damage = ((random[ReaverAttack]() & 7) + 1) * 3;
				LineAttack (ang, MISSILERANGE, pitch, damage, 'Hitscan', "StrifePuff");
			}
		}
	}

	// Crusader
	private bool CrusaderCheckRange ()
	{
		if (reactiontime == 0 && CheckSight (target))
		{
			return Distance2D (target) < 264.;
		}
		return false;
	}

	void A_CrusaderChoose (string firemissile = "FastFlameMissile", string crisisfiremissile = "FastFlameMissileCrisis", string rockmissile = "CrusaderMissile", string crisisrockmissile = "CrusaderMissileCrisis")
	{
		string fireatktype = firemissile;
		string missileatktype = rockmissile;
		A_MonsterCrisisCheck(); // Crusader Attack - Projectiles
		if (user_canusecrisisatk == 1) { fireatktype = crisisfiremissile; missileatktype = crisisrockmissile; A_PlayCrisisAtkSound(); }

		if (target == null)
			return;

		if (CrusaderCheckRange ())
		{
			A_FaceTarget ();
			angle -= 180./16;
			SpawnMissileZAimed (pos.z + 40, target, fireatktype);
		}
		else
		{
			if (CheckMissileRange ())
			{
				A_FaceTarget ();
				SpawnMissileZAimed (pos.z + 56, target, missileatktype);
				angle -= 45./32;
				SpawnMissileZAimed (pos.z + 40, target, missileatktype);
				angle += 45./16;
				SpawnMissileZAimed (pos.z + 40, target, missileatktype);
				angle -= 45./16;
				reactiontime += 15;
			}
			SetState (SeeState);
		}
	}

	void A_CrusaderSweepLeft (string firemissile = "FastFlameMissile", string crisisfiremissile = "FastFlameMissileCrisis")
	{
		string fireatktype = firemissile;
		A_MonsterCrisisCheck(); // Inquisitor Attack - Fire [Leftward Sweep]
		if (user_canusecrisisatk == 1) { fireatktype = crisisfiremissile; A_PlayCrisisAtkSound(); }

		angle += 90./16;
		Actor misl = SpawnMissileZAimed (pos.z + 48, target, fireatktype);
		if (misl != null)
		{
			misl.Vel.Z += 1;
		}
	}

	void A_CrusaderSweepRight (string firemissile = "FastFlameMissile", string crisisfiremissile = "FastFlameMissileCrisis")
	{
		string fireatktype = firemissile;
		A_MonsterCrisisCheck(); // Inquisitor Attack - Fire [Rightward Sweep]
		if (user_canusecrisisatk == 1) { fireatktype = crisisfiremissile; A_PlayCrisisAtkSound(); }

		angle -= 90./16;
		Actor misl = SpawnMissileZAimed (pos.z + 48, target, fireatktype);
		if (misl != null)
		{
			misl.Vel.Z += 1;
		}
	}

	void A_CrusaderRefire ()
	{
		if (target == null ||
			target.health <= 0 ||
			!CheckSight (target))
		{
			SetState (SeeState);
		}
	}

	void A_CrusaderDeath ()
	{
		if (CheckBossDeath ())
		{
			Floor_LowerToLowest(667, 8);
		}
	}

    // Sentinel
	void A_SentinelAttack (string missiletype = "SentinelFX2", string crisismissiletype = "SentinelFX2Crisis", string trailtype = "SentinelFX1", int trailsize = 8)
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Sentinel Attack - Projectile
		if (user_canusecrisisatk == 1) { atktype = crisismissiletype; A_PlayCrisisAtkSound(); }
		
		// [BB] Without a target the P_SpawnMissileZAimed call will crash.
		if (!target)
		{
			return;
		}

		Actor missile = SpawnMissileZAimed (pos.z + 32, target, atktype);

		if (missile != NULL && (missile.Vel.X != 0 || missile.Vel.Y != 0))
		{
			for (int i = trailsize; i > 1; --i)
			{
				Actor trail = Spawn(trailtype, Vec3Angle(missile.radius*i, missile.angle, 32 + missile.Vel.Z / 4 * i), ALLOW_REPLACE);
				if (trail != NULL)
				{
					trail.target = self;
					trail.Vel = missile.Vel;
					trail.CheckMissileSpawn (radius);
				}
			}
			missile.AddZ(missile.Vel.Z / 4);
		}
	}

	// Stalker
	void A_StalkerChaseDecide ()
	{
		if (!bNoGravity)
		{
			SetStateLabel("SeeFloor");
		}
		else if (ceilingz > pos.z + height)
		{
			SetStateLabel("Drop");
		}
	}

	void A_StalkerLookInit ()
	{
		State st;
		if (bNoGravity)
		{
			st = FindState("LookCeiling");
		}
		else
		{
			st = FindState("LookFloor");
		}
		if (st != CurState.NextState)
		{
			SetState (st);
		}
	}

	void A_StalkerDrop ()
	{
		bNoVerticalMeleeRange = false;
		bNoGravity = false;
	}

	void A_StalkerAttack(int dmg = 2)
	{
		if (bNoGravity)
		{
			SetStateLabel("Drop");
		}
		else if (target != null)
		{
			A_FaceTarget ();
			if (CheckMeleeRange ())
			{
				A_MonsterCrisisCheck(); // [Order] Stalker Attack - Melee
				if (user_canusecrisisatk == 1) { dmg *= CallACS("CrisisMultiplier"); A_PlayCrisisAtkSound(); }

				int damage = dmg;
				int newdam = target.DamageMobj (self, self, damage, 'Melee');
				target.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
		}
	}

	void A_StalkerWalk ()
	{
		A_PlaySound ("stalker/walk", CHAN_BODY);
		A_Chase ();
	}
	
	// Programmer
	void A_ProgrammerMelee (int dmg = 6)
	{
		A_MonsterCrisisCheck(); // Programmer Attack - Melee
		if (user_canusecrisisatk == 1) { dmg *= CallACS("CrisisMultiplier"); A_PlayCrisisAtkSound(); }

		if (target == null)
			return;

		A_FaceTarget ();

		if (!CheckMeleeRange ())
			return;

		A_PlaySound("programmer/clank", CHAN_WEAPON);

		int damage = dmg;
		int newdam = target.DamageMobj (self, self, damage, 'Melee');
		target.TraceBleed (newdam > 0 ? newdam : damage, self);
	}

	void A_SpawnProgrammerBase ()
	{
		Actor foo = Spawn("ProgrammerBase", Pos + (0,0,24), ALLOW_REPLACE);
		if (foo != null)
		{
			foo.Angle = Angle + 180. + Random2[Programmer]() * (360. / 1024.);
			foo.VelFromAngle();
			foo.Vel.Z = random[Programmer]() / 128.;
		}
	}

	void A_ProgrammerDeath ()
	{
		if (!CheckBossDeath ())
			return;

		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].health > 0)
			{
				players[i].mo.GiveInventoryType ("ProgLevelEnder");
				break;
			}
		}
		// the sky change scripts are now done as special actions in MAPINFO
		bossdeathactivate++;
		A_BossDeath();
	}

	void A_SpotLightning(string missiletype = "SpectralLightningSpot", string crisismissiletype = "SpectralLightningSpotCrisis")
	{
		string atktype = missiletype;
		A_MonsterCrisisCheck(); // Spectres/Entity - Spot Lightning
		if (user_canusecrisisatk == 1) 
		{
			atktype = crisismissiletype;
			A_PlayCrisisAtkSound(); 
		}

		if (target == null) return;

		Actor spot = Spawn(atktype, (target.pos.xy, target.floorz), ALLOW_REPLACE);
		if (spot != null)
		{
			spot.threshold = 25;
			spot.target = self;
			spot.FriendPlayer = 0;
			spot.tracer = target;
		}
	}

	// Oracle
	void A_WakeOracleSpectre (Class<Actor> spawntype)
	{
		ThinkerIterator it = ThinkerIterator.Create(spawntype);
		Actor spectre = Actor(it.Next());

		if (spectre != NULL && spectre.health > 0 && self.target != spectre)
		{
			spectre.CurSector.SoundTarget = spectre.LastHeard = self.LastHeard;
			spectre.target = self.target;
			spectre.SetState (spectre.SeeState);
		}
	}
	
	void A_DropFire(string missiletype = "FireDroplet", int expdmg = 64, int exprad = 64, int expflags = XF_NOSPLASH, string type = "Fire")
	{
		Actor drop = Spawn(missiletype, pos + (0,0,24), ALLOW_REPLACE);
		if (drop != null)
		{
			drop.Vel.Z = -1.;
		}
		A_Explode(expdmg, exprad, expflags, damagetype: type);
	}	

	private static void BrainishExplosion(vector3 pos)
	{
		Actor boom = Actor.Spawn("Rocket", pos, NO_REPLACE);
		if (boom)
		{
			boom.DeathSound = "misc/brainexplode";
			boom.Vel.z = random[BrainScream](0, 255)/128.;

			boom.SetStateLabel ("Brainexplode");
			boom.bRocketTrail = false;
			boom.SetDamage(0);	// disables collision detection which is not wanted here
			boom.tics -= random[BrainScream](0, 7);
			if (boom.tics < 1) boom.tics = 1;
		}
	}
	void A_BrainScream(string dthsound = "brain/death")
	{
		for (double x = -196; x < +320; x += 8)
		{
			// (1 / 512.) is actually what the original value of 128 did, even though it probably meant 128 map units.
			BrainishExplosion(Vec2OffsetZ(x, -320, (1 / 512.) + random[BrainExplode](0, 255) * 2));
		}
		A_PlaySound(dthsound, CHAN_VOICE, 1, false, ATTN_NONE);
	}

	void A_BrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShot";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_PlaySound(self.AttackSound, CHAN_VOICE, 1., false, ATTN_NONE);
			}
			else
			{
				// compatibility fallback
				A_PlaySound("brain/spit", CHAN_VOICE, 1., false, ATTN_NONE);
			}
		}
	}

	double XSpread;
	double YSpread;
	void A_ActorGetHitScanXSpread(int type = 0)
	{
		double spread = 0.0;
		double spreadfactor = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		// Special
		if (type == 101) // Strife Rebel Shots [checking player's accuracy to set their own] :V
		{
			spread = 8.0;
			spreadfactor = 1.0 - (StrifeAccuracyLevel * 0.1);
		}
		
		spread *= spreadfactor;
		if (accuracydebug) Console.Printf("XSpread: %8f, XSpreadFactor %8f" ,spread, spreadfactor);
		XSpread = spread;
	}
	
	void A_ActorGetHitScanYSpread(int type = 0)
	{
		double spread = 0.0;
		double spreadfactor = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		// Special
		if (type == 101) // Strife Rebel Shots [checking player's accuracy to set their own] :V
		{
			spread = 0.0;
			spreadfactor = 1.0 - (StrifeAccuracyLevel * 0.1);
		}
		
		spread *= spreadfactor;
		if (accuracydebug) Console.Printf("YSpread: %8f, YSpreadFactor %8f" ,spread, spreadfactor);
		YSpread = spread;
	}
	
	// Cacodemons' Shadow Split
	void A_ActorStartShadowSplit()
	{
		A_Stop();
		A_PlaySound("caco/shadowsplit", CHAN_7, 1, 0, 1.4);
		A_FaceTarget();
		bSHOOTABLE = 0;
		
		int nonsolidchance = 1;
		if (GetClassName() == "DSCacodemon") nonsolidchance += (user_monsterlevel / 180);
		if (GetClassName() == "Cacolantern") nonsolidchance += (user_monsterlevel / 135);
		if (GetClassName() == "Abaddon") nonsolidchance += (user_monsterlevel / 90);
		if (GetClassName() == "DSPainElemental") nonsolidchance += (user_monsterlevel / 90);
		if (random(1,4) <= nonsolidchance) bSOLID = 0;
	}
	void A_ActorEndShadowSplit()
	{
		A_GiveInventory("ShadowSplitCooldown", 1);
		A_Stop();
		bSHOOTABLE = 1;
		if (!bSOLID) bSOLID = 1;
	}
	
	void A_HadesTeleport(int minlevel = 90, int minchance = 64)
	{
		string nm = "LDLegendaryMonsterTransformed";
		LDLCheck = nm;
		int splittype = 0; // 0;
		int splittype2 = 0; // 0;
		if (LDLCheck) minchance *= frandompick(1.25,1.5,1.75,2.0);

		int RandRoll = random(1,1024);
		if (levelbehavior > 0)
		{
			A_StopSound (CHAN_WEAPON);
			if (!CountInv("HadesTeleportCooldown")) 
			{
				if (user_monsterlevel >= (minlevel*9))
				{
					if (RandRoll <= (minchance*4)) splittype2 = 2;
				}
				else
				if (user_monsterlevel >= (minlevel*4))
				{
					if (RandRoll <= (minchance*2)) splittype2 = random(1,2);
				}
				else
				if (user_monsterlevel >= minlevel)
				{
					if (RandRoll <= minchance) splittype2 = randompick(1,1,1,1,1,1,1,2);
				}
				else
				if (user_monsterlevel >= (minlevel/2))
				{
					if (RandRoll <= minchance) splittype2 = 1;
				}
			}
		}
		
		if (splittype2 == 1)
		{
			SetStateLabel("Teleport");
		}
		else
		if (splittype2 == 2)
		{
			SetStateLabel("Teleport2");
		}
		if (dvdsdebug_monsterspecialaidisplays) Console.Printf("Class: %s - \cuHades Teleport --- (Level / RequiredLvl: %d / %d) splittype2: %d, splittype: %d\c-", GetClassName(), user_monsterlevel, minlevel, splittype2, splittype);
	}
	void A_HadesTeleportChoose(int minlevel = 90)
	{
		int splittype = 0; // 0;
		int splittype2 = 0; // 0;

		if (levelbehavior > 0)
		{
			if (!CountInv("HadesTeleportCooldown")) 
			{
				if (user_monsterlevel >= (minlevel*9))
				{
					splittype2 = 2;
				}
				else
				if (user_monsterlevel >= (minlevel*4))
				{
					splittype2 = random(1,2);
				}
				else
				if (user_monsterlevel >= minlevel)
				{
					randompick(1,1,1,1,1,1,1,2);
				}
				else
				if (user_monsterlevel >= (minlevel/2))
				{
					splittype2 = 1;
				}
			}
		}
		
		if (splittype2 == 1)
		{
			SetStateLabel("Teleport");
		}
		else
		if (splittype2 == 2)
		{
			SetStateLabel("Teleport2");
		}
		if (dvdsdebug_monsterspecialaidisplays) Console.Printf("Class: %s - \cuHades Teleport --- (Level / RequiredLvl: %d / %d) splittype2: %d, splittype: %d\c-", GetClassName(), user_monsterlevel, minlevel, splittype2, splittype);
	}
	
	void A_ActorShadowSplit(int minlevel = 60, int minchance = 256)
	{
		string nm = "LDLegendaryMonsterTransformed";
		LDLCheck = nm;
		if (LDLCheck) minchance *= frandompick(1.25,1.5,1.75,2.0);

		int splittype = 0; // 0;
		int splittype2 = 0; // 0;
		int RandRoll = random(1,1024);
		if (levelbehavior > 0)
		{
			A_StopSound (CHAN_WEAPON);
			if (!CountInv("ShadowSplitCooldown")) 
			{
				if (user_monsterlevel >= (minlevel*9))
				{
					if (RandRoll <= (minchance*4)) splittype2 = 2;
				}
				else
				if (user_monsterlevel >= (minlevel*4))
				{
					if (RandRoll <= (minchance*2)) splittype2 = random(1,2);
				}
				else
				if (user_monsterlevel >= minlevel)
				{
					if (RandRoll <= minchance) splittype2 = randompick(1,1,1,1,1,1,1,2);
				}
				else
				if (user_monsterlevel >= (minlevel/2))
				{
					if (RandRoll <= (minchance/4)) splittype2 = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				}
			}
		}

		if (splittype2 == 0)
		{
		}
		else
		if (splittype2 == 1)
		{
			splittype = random(1,4);
			if (splittype == 1) { SetStateLabel("Shadowsplit1"); }
			if (splittype == 2) { SetStateLabel("Shadowsplit2"); }
			if (splittype == 3) { SetStateLabel("Shadowsplit3"); }
			if (splittype == 4) { SetStateLabel("Shadowsplit4"); }
		}
		else
		if (splittype2 == 2)
		{
			splittype = random(1,4);
			if (splittype == 1) { SetStateLabel("Shadowsplit1a"); }
			if (splittype == 2) { SetStateLabel("Shadowsplit2a"); }
			if (splittype == 3) { SetStateLabel("Shadowsplit3a"); }
			if (splittype == 4) { SetStateLabel("Shadowsplit4a"); }
		}
		if (dvdsdebug_monsterspecialaidisplays) Console.Printf("Class: %s - \cuCacos' ShadowSplit --- (Level / RequiredLvl: %d / %d) splittype2: %d, splittype: %d\c-", GetClassName(), user_monsterlevel, minlevel, splittype2, splittype);
	}
	
	void A_GargDashCheck()
	{
		if (!target) { SetStateLabel("See"); }
	}
	
	void A_GargDashCheck2()
	{
		if (!target) 
		{ 
			SetStateLabel("See"); 
		}
		else
		{
			if (levelbehavior > 0 && user_monsterlevel > 45) 
			{
				if (!A_JumpIfTargetInLOS("See", frandom(77.5,82.5)))
				{
					A_Stop();
					SetStateLabel("See"); 
				}
			}
			else
			{
				if (random(1,8) <= 1)
				{
					if (!A_JumpIfTargetInLOS("See", frandom(77.5,82.5)))
					{
						A_Stop();
						SetStateLabel("See"); 
					}
				}
			}
		}
	}
	
	int A_EnemyRailgunDamage(int base = 0)
	{
		int damage = base;
		int charge = CountInv("RailgunCharge");
		int chargefactor = ( ( (charge * 2) + (charge / 3) ) * 10);
		damage = damage * chargefactor / 100;
		if (damage < (base/2)) damage = (base / 2);

		if (dvdsdebug_showmiscdmginformation) Console.Printf("Damage: %d, [Base: %d], [Charge: %d% / ChargeFactor: %d%", damage, base, charge, chargefactor);
		return damage;
	}
	
	
	
	
	States
	{
		Pain.Charm: 
			TNT1 A 0 
			{
				if (user_charmchance <= 0) { user_charmchance = 256; }
				if (random(1,256) <= user_charmchance)
				{
					if(bFRIENDLY != true)
					{
						ClearCounters();
						bFRIENDLY = true; 
						bCOUNTKILL = false; 
						health = user_MaxHP * frandompick(1.0,1.25,1.5,1.75,2.0);
						if (CountInv("CharmMonsterAttack") <= 0) A_SetInventory("CharmMonsterAttack",1);
						if (CountInv("CharmMonsterDefense") <= 0) A_SetInventory("CharmMonsterDefense",1);
						if (user_charmed <= 0) user_charmed = 1;
						ChangeTID(1000);
						//level.total_monsters--;
						A_PlaySound("Munchies/Charmed");
					}
				}
				SetStateLabel("See");
			}
		Pain.Heal1: 
			TNT1 A 0 
			{
				ACS_NamedExecuteAlways("Healing_Actor",0,0); 
				SetStateLabel("See");
			}
		Pain.Heal2: 
			TNT1 A 0 
			{
				ACS_NamedExecuteAlways("Healing_Actor",0,1); 
				SetStateLabel("See");
			}
		Pain.Heal3: 
			TNT1 A 0 
			{
				ACS_NamedExecuteAlways("Healing_Actor",0,2); 
				SetStateLabel("See");
			}
		Pain.Heal4: 
			TNT1 A 0 
			{
				ACS_NamedExecuteAlways("Healing_Actor",0,3); 
				SetStateLabel("See");
			}
	}
}

class AetheriusBossZSC : AetheriusMonsterZSC
{
}

class MaulotaurBase : AetheriusMonsterZSC
{
 const MAULATORTICS = 25 * TICRATE;
 const MNTR_CHARGE_SPEED =13.;
 const MINOTAUR_LOOK_DIST = 16*54.;
	
	void MinotaurSlam (Actor target)
	{
		double ang = AngleTo(target);
		double thrust = 16 + random[MinotaurSlam]() / 64.;
		target.VelFromAngle(ang, thrust);
		int damage = random[MinotaurSlam](1, 8) * (bSummonedMonster? 4 : 6);
		int newdam = target.DamageMobj (null, null, damage, 'Melee');
		target.TraceBleedAngle (newdam > 0 ? newdam : damage, ang, 0.);
		if (target.player)
		{
			target.reactiontime = random[MinotaurSlam](14, 21);
		}
	}

	override void Tick ()
	{
		Super.Tick ();
		
		// The unfriendly Minotaur (Heretic's) is invulnerable while charging
		if (!bSummonedMonster)
		{
			bInvulnerable = bSkullFly;
		}
	}

	override bool Slam (Actor thing)
	{
		// Slamming minotaurs shouldn't move non-creatures
		if (!thing.bIsMonster && !thing.player)
		{
			return false;
		}
		return Super.Slam (thing);
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		damage = Super.DoSpecialDamage (target, damage, damagetype);
		if (damage != -1 && bSkullFly)
		{
			// Slam only when in charge mode
			MinotaurSlam (target);
			return -1;
		}
		return damage;
	}

	void A_MinotaurAtk1(int atkdamage = 4, int squishamount = -16)
	{
		A_MonsterCrisisCheck(); // Maulotaur Attack - Hammer Smash [Melee]
		if (user_canusecrisisatk == 1) atkdamage *= CallACS("CrisisMultiplier");

		if (!target)
		{
			return;
		}
		A_PlaySound ("minotaur/melee", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
	}

	void A_MinotaurDecide()
	{
		bool friendly = bSummonedMonster;

		if (!target)
		{
			return;
		}
		if (!friendly)
		{
			A_PlaySound ("minotaur/sight", CHAN_WEAPON);
		}
		double dist = Distance2D(target);
		if (target.pos.z + target.height > pos.z
			&& target.pos.z + target.height < pos.z + height
			&& dist < (friendly ? 16*64. : 8*64.)
			&& dist > 1*64.
			&& random[MinotaurDecide]() < 150)
		{
			// Charge attack
			// Don't call the state function right away
			SetStateLabel("Charge", true);
			bSkullFly = true;
			if (!friendly)
			{
				// Heretic's Minotaur is invulnerable during charge attack
				// bInvulnerable = true;
				A_SetInventory("MaulotaurChargeDefense",1);
				bNoPain = true;
				bNoBlood = true;
			}
			A_FaceTarget ();
			VelFromAngle(MNTR_CHARGE_SPEED);
			special1 = TICRATE/2; // Charge duration
		}
		else if (target.pos.z == target.floorz
				&& dist < 9*64.
				&& random[MinotaurDecide]() < (friendly ? 100 : 220))
		{
			// Floor fire attack
			SetStateLabel("Hammer");
			special2 = 0;
		}
		else
		{
			// Swing attack
			A_FaceTarget ();
			// Don't need to call P_SetMobjState because the current state
			// falls through to the swing attack
		}
	}
	
	void A_MinotaurCharge()
	{
		if (target == null)
		{
			return;
		}
		if (special1 > 0)
		{
			Class<Actor> type;

			if (gameinfo.gametype == GAME_Heretic)
			{
				type = "PhoenixPuff";
			}
			else
			{
				type = "PunchPuff";
			}
			Actor puff = Spawn (type, Pos, ALLOW_REPLACE);
			if (puff != null) puff.Vel.Z = 2;
			special1--;
		}
		else
		{
			bSkullFly = false;
			bInvulnerable = false;
			bNoPain = false;
			bNoBlood = false;
			SetState (SeeState);
		}
	}

	void A_MinotaurAtk2(string missiletype = "MinotaurFX1", string crisismissiletype = "MinotaurFX1Crisis", int meleedamage = 5, int friendlymeleedamage = 3)
	{
		bool friendly = bSummonedMonster;

		int actualmeleedmg = meleedamage;
		if (friendly == 1) actualmeleedmg = friendlymeleedamage;
		string actualmissile = missiletype;

		A_MonsterCrisisCheck(); // Maulotaur Attack2 - Hammer Smash Projectile
		if (user_canusecrisisatk == 1) 
		{
			actualmeleedmg *= CallACS("CrisisMultiplier");
			actualmissile = crisismissiletype;
		}
		

		if (target == null)
		{
			return;
		}
		A_PlaySound ("minotaur/attack2", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = actualmeleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		double z = pos.z + 40;
		Class<Actor> fx = actualmissile;
		Actor mo = SpawnMissileZ (z, target, fx);
		if (mo != null)
		{
			//S_Sound (mo, CHAN_WEAPON, "minotaur/attack2", 1, ATTN_NORM);
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			double vz = mo.Vel.Z;
			double ang = mo.angle;
			SpawnMissileAngleZ (z, fx, ang-(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang-(45./16), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./16), vz);
		}
	}

	void A_MinotaurAtk3(int atkdamage = 4, int squishamount = -16, string missiletype = "MinotaurFX2New", string crisismissiletype = "MinotaurFX2Crisis")
	{
		A_MonsterCrisisCheck(); // Maulotaur Attack3 - Hammer Side-Swing Spread Shot
		string attacktype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			attacktype = crisismissiletype;
			atkdamage *= CallACS("CrisisMultiplier");
		}

		if (!target)
		{
			return;
		}
		A_PlaySound ("minotaur/attack3", CHAN_VOICE);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
		else
		{
			if (Floorclip > 0 && compat_minotaur)
			{
				// only play the sound. 
				A_PlaySound ("minotaur/fx2hit", CHAN_WEAPON);
			}
			else
			{
				if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
				Actor mo = SpawnMissile (target, attacktype);
				if (mo != null)
				{
					mo.A_PlaySound ("minotaur/attack1", CHAN_WEAPON);
				}
			}
		}
		if (random[MinotaurAtk3]() < 192 && special2 == 0)
		{
			SetStateLabel ("HammerLoop");
			special2 = 1;
		}
	}

	void A_MinotaurDeath()
	{
		if (Wads.CheckNumForName ("MNTRF1", Wads.ns_sprites) < 0 &&
			Wads.CheckNumForName ("MNTRF0", Wads.ns_sprites) < 0)
			SetStateLabel("FadeOut");
	}

	void A_MinotaurRoam()
	{
		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		let mf = MinotaurFriend(self);
		if (mf)
		{
			if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
			{
				DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
				return;
			}
		}

		if (random[MinotaurRoam]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (random[MinotaurRoam]() < 6)
		{
			//Choose new direction
			movedir = random[MinotaurRoam]() % 8;
			FaceMovementDirection ();
		}
		if (!MonsterMove())
		{
			// Turn
			if (random[MinotaurRoam]() & 1)
				movedir = (movedir + 1) % 8;
			else
				movedir = (movedir + 7) % 8;
			FaceMovementDirection ();
		}
	}

	void A_MinotaurLook()
	{
		if (!(self is "MinotaurFriend"))
		{
			A_Look();
			return;
		}

		Actor mo = null;
		PlayerInfo player;
		double dist;
		Actor master = tracer;

		target = null;
		if (deathmatch)					// Quick search for players
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				player = players[i];
				mo = player.mo;
				if (mo == master) continue;
				if (mo.health <= 0) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				target = mo;
				break;
			}
		}

		if (!target)				// Near player monster search
		{
			if (master && (master.health > 0) && (master.player))
				mo = master.RoughMonsterSearch(20);
			else
				mo = RoughMonsterSearch(20);
			target = mo;
		}

		if (!target)				// Normal monster search
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");

			while ((mo = Actor(it.Next())) != null)
			{
				if (!mo.bIsMonster) continue;
				if (mo.health <= 0) continue;
				if (!mo.bShootable) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				if (mo == master || mo == self) continue;
				if (mo.bSummonedMonster && mo.tracer == master) continue;
				target = mo;
				break;			// Found actor to attack
			}
		}

		if (target)
		{
			SetState (SeeState, true);
		}
		else
		{
			SetStateLabel ("Roam", true);
		}
	}

	void A_MinotaurChase()
	{
		let mf = MinotaurFriend(self);
		if (!mf)
		{
			A_Chase();
			return;
		}


		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
		{
			DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
			return;
		}

		if (random[MinotaurChase]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (!target || (target.health <= 0) || !target.bShootable)
		{
			// look for a new target
			SetIdle();
			return;
		}

		FaceMovementDirection ();
		reactiontime = 0;

		// Melee attack
		if (MeleeState && CheckMeleeRange ())
		{
			if (AttackSound)
			{
				A_PlaySound (AttackSound, CHAN_WEAPON);
			}
			SetState (MeleeState);
			return;
		}

		// Missile attack
		if (MissileState && CheckMissileRange())
		{
			SetState (MissileState);
			return;
		}

		// chase towards target
		if (!MonsterMove ())
		{
			NewChaseDir ();
			FaceMovementDirection ();
		}

		// Active sound
		if (random[MinotaurChase]() < 6)
		{
			PlayActiveSound ();
		}
	}	
}

