class AetheriusBaseWeaponZSC : Weapon 
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	void A_SceptreDvAvSwing()
	{
		if(CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); }
	}
	
	void A_SceptreSwingShield()
	{
		let baseRange = CallACS("GetSceptreRange", 0);
		let maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? "ShieldSpawnerSpinattack2D" : "ShieldSpawnerSpinattack2",
					CallACS("SetShieldPieceDist", baseRange - (piece * 32)),
					0, 0, 0, 0, 0, 0,
					SXF_NOCHECKPOSITION
			);
		}
/*
		int baserange = CallACS("GetSceptreRange",0);

		A_SpawnItemEx ("ShieldSpawnerSpinattack2D", CallACS("SetShieldPieceDist",baserange), 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		A_SpawnItemEx ("ShieldSpawnerSpinattack2", CallACS("SetShieldPieceDist",baserange-32), 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		A_SpawnItemEx ("ShieldSpawnerSpinattack2", CallACS("SetShieldPieceDist",baserange-64), 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		A_SpawnItemEx ("ShieldSpawnerSpinattack2", CallACS("SetShieldPieceDist",baserange-96), 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		A_SpawnItemEx ("ShieldSpawnerSpinattack2", CallACS("SetShieldPieceDist",baserange-128), 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
*/
	}
	
	void A_UppercutBonusTake()
	{
		A_TakeInventory("UppercutATKBonus1",9999,0,AAPTR_PLAYER1); 
		A_TakeInventory("UppercutATKBonus2",9999,0,AAPTR_PLAYER1); 
		A_TakeInventory("UppercutDEFBonus1",9999,0,AAPTR_PLAYER1); 
		A_TakeInventory("UppercutDEFBonus2",9999,0,AAPTR_PLAYER1); 
		A_TakeInventory("UppercutCritBonus1",9999,0,AAPTR_PLAYER1); 
		A_TakeInventory("UppercutCritBonus2",9999,0,AAPTR_PLAYER1); 
	}

	void A_UppercutBonus()
	{
		if (random(1,6) == 1)
		{
			A_GiveInventory("UppercutCritBonus2",1,AAPTR_PLAYER1); 
		}
		else
		{
			A_GiveInventory("UppercutCritBonus1",1,AAPTR_PLAYER1); 
		}

		if (random(1,6) == 1)
		{
			if (random(1,6) == 1)
			{
				A_GiveInventory("UppercutATKBonus2",1,AAPTR_PLAYER1); 
				A_GiveInventory("UppercutDEFBonus2",1,AAPTR_PLAYER1); 
			}
			else
			{
				A_GiveInventory("UppercutATKBonus1",1,AAPTR_PLAYER1); 
				A_GiveInventory("UppercutDEFBonus1",1,AAPTR_PLAYER1); 
			}
		}
	}
 
	// Hell Warrior Shield
	void A_PHellWarShieldOff()
	{
		if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
		A_TakeInventory("EWShieldDefendMode",0x7FFFFFFF);
		A_TakeInventory("EWShieldDefendModeExtra",0x7FFFFFFF);
		bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}
	void A_PHellWarShieldOn()
	{
		A_GiveInventory("EWShieldDefendMode",1);
		A_TakeInventory("EWShieldDefendModeExtra",0x7FFFFFFF);
		if (random(1,4) == 1) { A_GiveInventory("EWShieldDefendModeExtra",1); } 
		bREFLECTIVE = 1;
		//bSHIELDREFLECT = 1;
	}
	
	// Fist Block Function
	void A_PFistBlockOn(int perkcheck)
	{
		A_TakeInventory("FistPlayerBlock",0x7FFFFFFF); A_TakeInventory("FistPlayerBlock2",0x7FFFFFFF); A_TakeInventory("FistPlayerBlock3",0x7FFFFFFF);
		A_TakeInventory("FistPlayerSpeedFactor",0x7FFFFFFF); A_TakeInventory("FistPlayerSpeedFactor2",0x7FFFFFFF); A_TakeInventory("FistPlayerSpeedFactor3",0x7FFFFFFF);
		if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 4) { A_GiveInventory("FistPlayerBlock3",1); A_GiveInventory("FistPlayerSpeedFactor3",1); }
		else if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 2) { A_GiveInventory("FistPlayerBlock2",1); A_GiveInventory("FistPlayerSpeedFactor2",1); }
		else { A_GiveInventory("FistPlayerBlock",1); A_GiveInventory("FistPlayerSpeedFactor",1); }
		A_TakeInventory("FistPlayerBlockExtra",0x7FFFFFFF);
		if (random(1,16) == 1) { A_GiveInventory("FistPlayerBlockExtra",1); } 
	}
	
	void A_PFistBlockOff()
	{
		A_TakeInventory("FistPlayerBlock",0x7FFFFFFF); A_TakeInventory("FistPlayerBlock2",0x7FFFFFFF); A_TakeInventory("FistPlayerBlock3",0x7FFFFFFF);
		A_TakeInventory("FistPlayerSpeedFactor",0x7FFFFFFF); A_TakeInventory("FistPlayerSpeedFactor2",0x7FFFFFFF); A_TakeInventory("FistPlayerSpeedFactor3",0x7FFFFFFF);
		A_TakeInventory("FistPlayerBlockExtra",0x7FFFFFFF);
		A_TakeInventory("FistPlayerBlockItem",0x7FFFFFFF);
		bREFLECTIVE = 0;
		bSHIELDREFLECT = 0;
	}
	
	void A_KickBonusOff()
	{
		A_TakeInventory("KickCritBonus1",0x7FFFFFFF);
		A_TakeInventory("KickCritBonus2",0x7FFFFFFF);
		A_TakeInventory("KickAttackDEFLvl1",0x7FFFFFFF);
		A_TakeInventory("KickAttackDEFLvl2",0x7FFFFFFF);
		A_TakeInventory("MartArtsMaster1",0x7FFFFFFF);
		A_TakeInventory("MartArtsMaster2",0x7FFFFFFF);
		A_TakeInventory("UsingMeleeAttack",0x7FFFFFFF);
	}
	
	void A_SceptreShieldOff()
	{
		A_TakeInventory("ShieldDefense",9999); A_TakeInventory("ShieldDefense2",9999); A_TakeInventory("ShieldDefense3",9999);
	}
	
	void A_SceptreShield1()
	{
		A_GiveInventory("ShieldDefense",1); A_TakeInventory("ShieldDefense2",9999); A_TakeInventory("ShieldDefense3",9999);
	}
	
	void A_SceptreShield2()
	{
		A_TakeInventory("ShieldDefense",9999); A_GiveInventory("ShieldDefense2",1); A_TakeInventory("ShieldDefense3",9999);
	}
	
	void A_SceptreShield3()
	{
		A_TakeInventory("ShieldDefense",9999); A_TakeInventory("ShieldDefense2",9999); A_GiveInventory("ShieldDefense3",1);
	}
	
	// Spread Aura Function [Projectiles]
	void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Projectiles w/ AOE]
	void A_SpreadAuraFireProjectileAoE (Class<Actor> missiletype, Class<Actor> missiletypeaoe, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletypeaoe,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Melee Punch]
	void A_SpreadAuraCustomPunch (int damage, bool norandom = 0, int flags = 0, string pufftype = "", float range = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = "", sound misssound = "") 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
		}
	}

	// Spread Aura Function [Melee Chainsaw]
	void A_SpreadAuraSaw (string fullsound, string hitsound = "", int damage = 0, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 0.0, float spread_xy = 0.0, float spread_z = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "")
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
		}
	}

	// Spread Aura Function [Hitscan]
	void A_SpreadAuraFireBullets (double spread_horz, double spread_vert, int numbullets, int damage, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 8192, string missile = "", float spawnheight = 0.0, float spawnofs_xy = 0.0, int ammouseamount = 0, string ammousetype = "")
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
		}
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Railgun]
	void A_SpreadAuraRailAttack (int damage, int spawnofs_xy = 0, int ammouseamount = 0, string ammousetype = "", color ringcolor = 0, color corecolor = 0, int flags = 0, int maxdiff = 0, string pufftype = "", float spread_xy = 0.0, float spread_z = 0.0, int range = 8192, int duration = 35, float sparsity = 1.0, float driftspeed = 1.0, string spawnclass = "", float spawnofs_z = 0.0, int spiraloffset = 270, int limit = 0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
		}
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Used for Hellcore weapons to allow them to shoot Crisis attacks when the player's health is low. :V
	void A_HellCoreCrisisCheck (void)
	{
		A_TakeInventory("PlayerCanUseCrisisAttacks",9999,AAPTR_PLAYER1); 
		if (CountInv("CriticalHealth",AAPTR_PLAYER1) > 0) 
		{
			A_GiveInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1); 
		}
		else 
		{
			if (CountInv("LowHealth",AAPTR_PLAYER1) > 0 && random(1,4) == 4) 
			{
				A_GiveInventory("PlayerCanUseCrisisAttacks",1,AAPTR_PLAYER1); 
			}
		}
	}

	void A_PlayCrisisAtkSound ()
	{
		A_PlaySound("crisisattack",6);
		A_PlaySound("crisisattack2",7);
	}

}

class AetheriusBaseCustomInventoryZSC : CustomInventory 
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	// Spread Aura Function [Projectiles]
	void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

}

