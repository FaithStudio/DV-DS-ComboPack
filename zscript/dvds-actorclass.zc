// Base class [for later use]
class AetheriusBaseZSC : Actor
{
	float user_tempvar1, user_tempvar2, user_tempvar3, user_tempvar4, user_tempvar5;
	int user_bormpainreact;
	int user_hyperlvl1, user_hyperlvl2;
	int user_theta, user_dormant, user_isstealth, user_wasstealth, user_baseattack, user_basedefense, user_basemass; 
	int user_monsterlevel, user_lastmonsterlevel, user_extraevolvechance, user_extrastealthchance;
	int user_willbecomelegendary, user_legendaryevolved;
	int user_MaxHP, user_HPCritRange, user_HPBuffRange, user_HPLowBuffRange, user_HPXDeathRange, user_HPXDeathRange2, user_HPLowRange;
	int user_checkmapskill, user_ressurrectstr, user_resurrectedtimes, user_canusecrisisatk;
	int user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2;
	int user_barragecounter, user_shotsfired, user_shotsfiredmax;
	float user_shotaccuracy, user_shotaccuracy1, user_shotaccuracy2; 
	float user_shotzaccuracy, user_shotzaccuracy1, user_shotzaccuracy2; 
	float user_randominaccuracy, user_randominaccuracy2;
	float user_basespeed;
	int user_pelletsfired, user_currenttracer, user_aimangleorigin; 
	int user_ammotype, user_gravitytype, user_shotangle, user_chargeinterval, user_pulseinterval;
	int user_spread, user_spread1, user_spread2;
	int user_attacktype, user_attacks, user_attackmax, user_fastchasechance, user_fastchaseextra, user_painfastchase;
	int user_paintomissile;
	int user_painreacttimer;
	int user_fastchasetimer, user_fastchasetimermax;
	int user_walksound;

	int user_nolegendarytrans;
	int user_golddrop;
	int user_crisisprojectile;
	int user_defendtimer, user_defendtimermax, user_defendcycles;
	int user_autorestimer;
	int user_firevolleys, user_firevolleymax;
	int user_random, user_random1, user_ailment1, user_ailmentmaxchance, user_attackpoint;
	int user_chargechance; 
	int user_charmchance, user_charmed;
	int user_summoned;
	int user_regencycles, user_regencyclemax;
	int IsACrisisExplosion;
	
	void A_TimeBomb()
	{
		AddZ(32, false);
		A_SetRenderStyle(1., STYLE_Add);
		A_Explode();
	}

	// Altered A_Explode to have automatic Crisis Attack support. :V
	int A_DVDSExplode(int damage = -1, int distance = -1, int flags = XF_HURTSOURCE, bool alert = false, int fulldamagedistance = 0, int nails = 0, int naildamage = 10, class<Actor> pufftype = "BulletPuff", name damagetype = "none")
	{
		AetheriusMonsterZSC DVDSActor;
		DVDSActor = AetheriusMonsterZSC(tracer);
		AetheriusProjectileZSC UniqueProjectile;
		UniqueProjectile = AetheriusProjectileZSC(self);
		int CheckForCrisis = 0;

		IsACrisisExplosion = false;
		if (DVDSActor) 
		{
			if (flags & XF_NOTMISSILE)
			{
				CheckForCrisis = 1;
			}
			else
			{
				if (UniqueProjectile) CheckForCrisis = 2;
			}
		}
		
		if (CheckForCrisis > 0)
		{
			DVDSActor.user_canusecrisisatk = 0;
			if (DVDSActor.health <= DVDSActor.user_HPLowRange) 
			{ 
				if (DVDSActor.health <= DVDSActor.user_HPCritRange) 
				{ 
					DVDSActor.user_canusecrisisatk = 1; 
					//Console.Printf("user_HPCritRange");
				} 
				else 
				{ 
					if (random(1,4) == 4) DVDSActor.user_canusecrisisatk = 1;
					//Console.Printf("user_HPLowRange");
				} 
			}
			if (dvds_monstercrisisattacks == 0) { DVDSActor.user_canusecrisisatk = 0; }
			//Console.Printf("user_canusecrisisatk: %d", user_canusecrisisatk);
			if (DVDSActor.user_canusecrisisatk)
			{
				DVDSActor.A_PlaySound("crisisattack",6);
				DVDSActor.A_PlaySound("crisisattack2",7);
				IsACrisisExplosion = true;
			}
		}


		if (damage < 0)	// get parameters from metadata
		{
			damage = ExplosionDamage;
			distance = ExplosionRadius;
			flags = !DontHurtShooter;
			alert = false;
		}
		if (distance <= 0) distance = damage;
		
		if (IsACrisisExplosion) damage *= dvds_monstercrisismulti;

		// NailBomb effect, from SMMU but not from its source code: instead it was implemented and
		// generalized from the documentation at http://www.doomworld.com/eternity/engine/codeptrs.html

		if (nails)
		{
			if (IsACrisisExplosion) naildamage *= dvds_monstercrisismulti; //

			double ang;
			for (int i = 0; i < nails; i++)
			{
				ang = i*360./nails;
				// Comparing the results of a test wad with Eternity, it seems A_NailBomb does not aim
				LineAttack(ang, MISSILERANGE, 0.,
					//P_AimLineAttack (self, ang, MISSILERANGE), 
					naildamage, 'Hitscan', pufftype, bMissile ? LAF_TARGETISSOURCE : 0);
			}
		}

		if (!(flags & XF_EXPLICITDAMAGETYPE) && damagetype == 'None')
		{
			damagetype = self.DamageType;
		}

		int pflags = 0;
		if (flags & XF_HURTSOURCE)	pflags |= RADF_HURTSOURCE;
		if (flags & XF_NOTMISSILE)	pflags |= RADF_SOURCEISSPOT;

		int count = RadiusAttack (target, damage, distance, damagetype, pflags, fulldamagedistance);
		if (!(flags & XF_NOSPLASH)) CheckSplash(distance);
		if (alert && target != NULL && target.player != NULL)
		{
			SoundAlert(target);
		}
		return count;
	}
	
	// New Health Bonus Script :P
	action void A_EmulateGiveHealthBonus (Actor Source, int multiplier = 1, int givemanachance = 8, int staminagive = 100, int hellcorecool = 1)
	{
		AetheriusPlayerPawn playpawn;
		playpawn = AetheriusPlayerPawn(source);
		if (playpawn)
		{
			int CharacterClass = CallACS("CheckCharacterClass");
			int PlayerLevel = CallACS("StatCheck",0);
			int MaxHealthTrue = CallACS("StatCheck",1);
			int MaxMana = CallACS("StatCheck",2);
			int CurrentMana = CallACS("StatCheck",14);
			int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
			int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
			int MaxStamina5X = MaxStamina * 5;
			int StamToGain = CallACS("MiscVarCheckDECORATE",165);
			int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
			int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
			int MaxHealthLimit = MaxHealthTrue * 2;
			int MaxManaLimit = MaxMana * 2;
			int temp1, temp2;
			int PerkFactor;
			int CurrentHealth, TempHealAmount, TempHealAmount2, TempHealAmount3;
			
			if (multiplier <= 0) multiplier = 1;
			CurrentHealth = playpawn.player.mo.health;
			
			if (CurrentHealth < MaxHealthLimit)
			{
				TempHealAmount = MaxHealthTrue / 100;
				if (TempHealAmount < 1) TempHealAmount = 1;
			
				TempHealAmount2 = PlayerLevel / 25;
				TempHealAmount += TempHealAmount2;
				TempHealAmount *= multiplier;
				CurrentHealth += TempHealAmount;
				if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;

				playpawn.player.mo.health = playpawn.player.health = CurrentHealth;
			}
			
			if (random(1,100) <= givemanachance)
			{
				if (CurrentMana < MaxManaLimit)
				{
					TempHealAmount = MaxMana / 100;
					if (TempHealAmount < 1) TempHealAmount = 1;
				
					TempHealAmount2 = PlayerLevel / 25;
					TempHealAmount += TempHealAmount2;
					TempHealAmount *= multiplier;
					CurrentMana += TempHealAmount;
					if (CurrentMana >= MaxManaLimit) CurrentMana = MaxManaLimit;

					CallACS("OtherVarSetDECORATE",2,CurrentMana);
				}
			}
			
			if (staminagive >= 0)
			{
				// Add 0.5% to Stamina Value [up to 500%]
				StamToGain = MaxStamina / 200;
				StamToGain *= multiplier;
				int perktemp1 = StamToGain;
				
				PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
				perktemp1 = perktemp1 * PerkFactor / 10000;
				if (playpawn.player.mo.CountInv("WaterFlyingDress") > 0) perktemp1 = perktemp1 * 5 / 3;
				if (dvdsdebug_healitemdisplays) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, StamToGain);
				StamToGain = perktemp1;
				
				// Tweaks the multiplier for Stamina Recovery.
				StamToGain = StamToGain * staminagive / 100;
				
				if (CurrentStamina < MaxStamina5X) CurrentStamina += StamToGain; 
				if (CurrentStamina > MaxStamina5X) CurrentStamina = MaxStamina5X;
				
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			
			int HellcoreRestored;
			int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
			int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
			int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
			if (CharacterClass == 2 && hellcorecool > 0) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
			{
				if (HellcoreOverheatLevel > 0)
				{
					TempHealAmount = 2500; // 0.25% [10000000 is 1000.00% (maximum)]
					TempHealAmount *= multiplier;
					TempHealAmount2 = PlayerLevel * 10;
					TempHealAmount3 = random(-500,500);
					HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
					if (playpawn.player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
					if (SoulMasteryPerkLevel >= 0)
					{
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel == 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						HellcoreRestored = HellcoreRestored * PerkFactor / 16;
					}
					if (HellcoreRestored < 1) HellcoreRestored = 1;
					if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
				
					HellcoreOverheatLevel -= HellcoreRestored;
					if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
					
					CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
				}
			}
		}
	}
	
	action void A_SauronGauntletsHit(Actor source, int Amount = 0, int HitType = 0)
	{
		AetheriusPlayerPawn playpawn;
		playpawn = AetheriusPlayerPawn(source);
		if (playpawn)
		{
			int GMultiplier;
			int check;
			int PlayerLevel = CallACS("StatCheck",0);
			int CharacterClass = CallACS("CheckCharacterClass");
			int MaxHealthTrue = CallACS("StatCheck",1);
			int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
			int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
			int CurrentMana = CallACS("StatCheck",14);
			int MaxMana = CallACS("StatCheck",2);
			int MaxManaLimit = MaxMana * 2;
			bool gaveAnything = false;
			
			if (HitType <= 0) HitType = 1;
			if (HitType >= 3) HitType = 2;
			
			if (HitType == 1) Amount = (Amount / 250) + 1; // Give some life when hurting a monster [1+(Damage/250)]
			if (HitType == 2) Amount = (Amount / 50) + 5; // Give more life when killing a monster [5+(Damage/50)]
		
			If (Amount <= 0) Amount = 1;
			If (Amount >= 65) Amount = 64;
				
			// Restore Health & Stamina
			bool giveHealth = dvds_saurongauntlets_givehealth;
			bool giveStamina = dvds_saurongauntlets_givestamina;
			int previousHealth = playpawn.player.mo.health;
			int previousStamina = CurrentStamina;
			if (giveHealth || giveStamina)
			{
				int giveStaminaAmount = 50;
				if (!giveStamina) giveStaminaAmount = 0;
				
				A_EmulateGiveHealthBonus(playpawn,Amount,0,giveStaminaAmount,0);
				
				if (!giveHealth) playpawn.player.mo.health = playpawn.player.health = previousHealth;
				else if (!dvds_saurongauntlets_giveoverhealth && playpawn.player.mo.health > MaxHealthTrue) playpawn.player.mo.health = playpawn.player.health = MaxHealthTrue;
				
				if (previousHealth > playpawn.player.mo.health) playpawn.player.mo.health = playpawn.player.health = previousHealth;
				
				if (giveStamina && !dvds_saurongauntlets_giveoverstamina && CurrentStamina > MaxStamina) CurrentStamina = MaxStamina;
				
				if (previousStamina > CurrentStamina) CurrentStamina = previousStamina;
				
				if (CurrentStamina > previousStamina || playpawn.player.mo.health > previousHealth) gaveAnything = true;
			}
			
			// Restore Armor [Flora Cannot Gain Armor from it though]
			if (CharacterClass != 2 && dvds_saurongauntlets_givearmor)
			{
				if (playpawn.player.mo.CountInv("Armor") < dvds_saurongauntlets_givearmorlimit)
				{
					int ArmorAmount = (Amount * random(6,9)) / 15;
					If (ArmorAmount <= 0) ArmorAmount = 1;
					CallACS("EmulateGiveArmorBonus",0,ArmorAmount,1);
					gaveAnything = true;
				}
			}

			// Restore Mana
			if (dvds_saurongauntlets_givemana)
			{
				int MaxManaLimit = MaxMana;
				if (dvds_saurongauntlets_giveovermana) MaxManaLimit *= 2;
				
				if (CurrentMana < MaxManaLimit)
				{
					int prevMana = CurrentMana;
					int ManaAmount = (Amount * random(6,9)) / 9;
					GMultiplier = (PlayerLevel * 4) + 100;
					ManaAmount = Amount;
					ManaAmount = ManaAmount * GMultiplier / 100;
					if (CharacterClass == 2) ManaAmount = ManaAmount * random(5,7) / 4; // Flora will gain Extra Mana from a Gauntlet punch to make up for not being able to get armor.
					else if (CharacterClass == 8) ManaAmount = ManaAmount * random(4,6) / 4; // Ailish will gain Extra Mana from a Gauntlet punch as well.
					else ManaAmount = ManaAmount * random(9,15) / 12;
					If (ManaAmount <= 0) ManaAmount = 1;
					CurrentMana += ManaAmount;
					if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
					
					if (CurrentMana > prevMana)
						gaveAnything = true;
				}
			}
			
			if (gaveAnything)
			{
				// Only do this if the player actually received something (health, mana, armor, and/or stamina).
				if (CharacterClass == 2) playpawn.player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				else playpawn.player.mo.A_PlaySound("HealSpell1",CHAN_BODY,1.0,0,ATTN_NORM); 
				
				playpawn.player.mo.A_SetBlend("E0 E0 E0",0.33,random(17,18),"E0 E0 E0",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
			
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
	}
}

class AetheriusSpawnedItem : AetheriusBaseZSC
{
	bool IsACrisisSpawnedItem;
}

class AetheriusCustomGib : AetheriusBaseZSC
{
	int deathcounter;
	int fadecounter;
	int globalcounter;
	int ownedgib;

	override void Tick()
	{
		if (globalcounter >= 0 && globalcounter <= 4) { if (target != null) ownedgib = 1; }
		if (ownedgib)
		{
			if (dvds_gibswillfade)
			{
				if (deathcounter >= (dvds_gibsbeforefadetimer*35))
				{
					fadecounter++;
					A_FadeOut((1.0/random(32,38)),FTF_REMOVE);
					if (fadecounter > 39) Destroy();
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- alpha: \cx%8f\c- - fadecounter: %d / 40", GetClassName(), alpha, fadecounter);
				}
				else
				{
					deathcounter++;
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- deathcounter: \cx%d\c-", GetClassName(), deathcounter);
				}
			}
		}

		//This space for rent.
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
}

class AetheriusCustomInventory : CustomInventory
{
	int allowexperiessence, gfxeffectlevel;
	int animationtimer, heartbeattimer;
	int skilllevel;
	int frametimer;
	int autousemode;
	int NoOfBackPacks;
	
	string pickupmsg;
	
	// General
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;
	
	property AutoUse: autousemode;

	action void A_SeedDrop(int type = 0, int OldRand0 = 0, int Forced = 0)
	{
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int Rand0, Rand1, Rand2, PX, PY, PZ, FullOnSkill, FullOnSeeds, spawnedaitem, SeedDropChance;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		
		if (ModType == 0 && CallACS("MiscVarCheckDECORATE",110005) == 0) return;
		
		if (Forced == 0)
		{
			if (CallACS("MiscVarCheckDECORATE",37) >= CallACS("MiscVarCheckDECORATE",28)) FullOnSkill = 1;
			if (CallACS("MiscVarCheckDECORATE",30) >= CallACS("MiscVarCheckDECORATE",29)) FullOnSeeds = 1;
		}
		
		// Spawn Occurance Rate
		if (type == 2)
		{
			Rand0 = 1;
		}
		else
		if (type == 1)
		{
			Rand0 = OldRand0;
		}
		else
		{
			if (CallACS("MiscVarCheckDECORATE",27) < CallACS("MiscVarCheckDECORATE",26))
			{
				// "MiscellaneousVars[6]" is a randomly picked ID number that DV-DS will pick at the Very-First-Run, from (1 to "MiscellaneousVars[7]")
				if (random(1,CallACS("MiscVarCheckDECORATE",7)) == CallACS("MiscVarCheckDECORATE",6))
				{
					if (Forced == 1) 
					{
						A_SpawnItemEx("FyggForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("Fygg",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					Thing_Remove(0);
					return;
				}
			}
	
			if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,70); // 92
			if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,80); // 104
			if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,90); // 116
			if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,100); // 128
			if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,120); // 152 
			if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,132); // 152 
			if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,144); // 152 
			if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,156); // 152 
			if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,180); // 152 
			Rand0 = Rand0 * 5 / 2;
		}
		
		SeedDropChance = 1 + (CallACS("MiscVarCheckDECORATE",33) / 64);
		
		while (spawnedaitem == 0)
		{
			if (Rand0 <= SeedDropChance)
			{
				if (FullOnSkill == 1)
				{
					if (FullOnSeeds == 1) Rand1 = random(31,40);
					else Rand1 = random(1,40);
				}
				else
				{
					if (FullOnSeeds == 1) Rand1 = random(31,41);
					else Rand1 = random(1,41);
				}
			
				if (Rand1 > 0 && Rand1 < 6) // Seed of Agility
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfAgilityForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfAgility",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 5 && Rand1 < 11) // Seed of Defense
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfDefenseForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfDefense",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 10 && Rand1 < 16) // Seed of Deftness
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfDeftnessForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfDeftness",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 15 && Rand1 < 21) // Seed of Sorcery
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfSorceryForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfSorcery",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 20 && Rand1 < 26)// Seed of Strength
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfStrengthForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfStrength",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 25 && Rand1 < 31) // Seed of Therapeusis
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfTherapeusisForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfTherapeusis",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 30 && Rand1 < 36) // Seed of Life
				{
					A_SpawnItemEx("SeedOfLife",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 35 && Rand1 < 41) // Seed of Magic
				{
					A_SpawnItemEx("SeedOfMagic",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 == 41) // Seed of Skill
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfSkillForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfSkill",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			}
			else // No spawn
			{
				Thing_Remove(0);
				return;
			}
		}
	}

	action void A_GrabBackpack()
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);

		if (invoker)
		{
			invoker.NoOfBackPacks = CallACS("MiscVarCheckDECORATE",80);
			invoker.NoOfBackPacks += 1;
			if (invoker.NoOfBackPacks > 512) invoker.NoOfBackPacks = 512;
			CallACS("MiscVarSetDECORATE",80,invoker.NoOfBackPacks);
		}
	}

	void A_UseCustomInventoryItem(int type = 0)
	{
		String nm;
		double temp1, temp2, temp3, check1, check2, check3;
		double healmax;
		double perktemp1, perktemp2, perktemp3, perktemp4;
		double perkhealthlimit, perkstaminalimit, perkmanalimit;
		double PerkFactor;
		double perkbasemulti = 16;
		int CurrentHealth = player.mo.health;
		int CurrentMana = CallACS("StatCheck",14); 
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int PowerupTimeMulti = dvds_invpoweruptimemultiplier;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		nm = "SurgeryKitNew"; iDTech1Check = nm;
		if (type == -10 && player.mo.CountInv(iDTech1Check) > 0) // Medical Kit [Strife]
		{
			// Heal Health [100%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = perkhealthlimit;
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [200%]
			perkstaminalimit = MaxStamina * 2;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * 2;
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		nm = "MedicalKitNew"; iDTech1Check = nm;
		if (type == -9 && player.mo.CountInv(iDTech1Check) > 0) // Medical Kit [Strife]
		{
			// Heal Health [~20-30 HP + 20-30%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(20,30);
				perktemp1 = temp2;
				temp2 = MaxHealthTrue * (0.01 * random(20,30));
				perktemp1 += temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~45%-55%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.45,0.55);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		nm = "MedPatchNew"; iDTech1Check = nm;
		if (type == -8 && player.mo.CountInv(iDTech1Check) > 0) // Medical Patch [Strife]
		{
			// Heal Health [~8-12 HP + 8-12%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(8,12);
				perktemp1 = temp2;
				temp2 = MaxHealthTrue * (0.01 * random(8,12));
				perktemp1 += temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~18.75%-21.25%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.1875,0.2125);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		nm = "ArtiInvisibilityNew"; iDTech1Check = nm;
		if (type == -7 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 90);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",1,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerabilityNew"; iDTech1Check = nm;
		if (type == -6 && player.mo.CountInv(iDTech1Check) > 0) // Ring of Invincibility
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerability2New"; iDTech1Check = nm;
		if (type == -5 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealingRadiusNew"; iDTech1Check = nm;
		if (type == -4 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Ambit Incant
		{
			// Heal HP/Health [62.5%] up to 200%
			temp1 = CurrentHealth;
			healmax = MaxHealthLimit;
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += (MaxHealthTrue * 5 / 8);
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = player.health = temp1;
			}
		
			// Heal MP/Mana [62.5%] up to 200%
			healmax = MaxMana * 2;
			if (CurrentMana < healmax)
			{
				check1 += 1;
				CurrentMana += (MaxMana * 5 / 8);
				if (CurrentMana > healmax) CurrentMana = healmax;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [125%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 1.25;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("C0 80 C0",0.55,27); // FadeRange(192,128,192,0.55,192,128,192,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiBoostManaNew"; iDTech1Check = nm;
		if (type == -3 && player.mo.CountInv(iDTech1Check) > 0) // Krater of Might [Hexen]
		{
			if (player.mo.CountInv("Mana1") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana1",500);
			}
			if (player.mo.CountInv("Mana2") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana2",500);
			}
			if (CurrentMana < MaxMana * 2)
			{
				check1 += 1;
				CurrentMana = MaxMana * 2;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiSuperHealthNew"; iDTech1Check = nm;
		if (type == -2 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~100 to 110% HP] up to 192.5% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.925;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(1.0,1.1);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [62.50%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.625;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealthNew"; iDTech1Check = nm;
		if (type == -1 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~25 to 30% HP] up to 105% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.05;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(0.25,0.30);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = player.health = temp1;
			}

			// Heal Stamina [12.5%]
			healmax = MaxStamina;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;

			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.125;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicinalHerb"; iDTech1Check = nm;
		if (type == 1 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~25-35 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(25,35);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~7.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.075,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "StrongMedicine"; iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~55-65 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(55,65);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			
			// Heal Stamina [~16.5% - ~19.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.165,0.195);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SpecialMedicine"; iDTech1Check = nm;
		if (type == 3 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~85-105 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(85,105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			
			// Heal Stamina [~25.5% - ~31.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.225,0.315);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.77,31,"10 FF 10",0.01); // FadeRange(12,255,12,0.77,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "YggdrasilDew"; iDTech1Check = nm;
		if (type == 4 && player.mo.CountInv(iDTech1Check) > 0) // Yggdrasil Dew
		{
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				// Heal Health [90.0% - 110.0%]
				check1 += 1;
				temp2 = ((MaxHealthTrue * random(900,1100)) / 1000);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp1 += perktemp1;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
		
			// Heal Mana [22.5% - 27.5%]
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				check1 += 1;
				temp2 = MaxMana * frandom(0.225,0.275);
				perktemp3 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp3 = perktemp3 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp3 = perktemp3;
				CurrentMana += temp3;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [90.0% - 110.0%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.9,1.1);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.85,39,"10 FF 10",0.02); // FadeRange(12,255,12,0.85,16,255,16,0.02,1.12);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "PaxaPunch"; iDTech1Check = nm;
		if (type == 5 && player.mo.CountInv(iDTech1Check) > 0) // Paxa Punch
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && 
					CallACS("GetBuffTimer",10) < perktemp2 && 
					CallACS("GetBuffTimer",11) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("GetBuffTimer",10,2,perktemp4);
				CallACS("GetBuffTimer",11,2,perktemp4);
				player.mo.A_PlaySound("use_paxa",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("use_paxa2",CHAN_WEAPON,1.0,0,ATTN_NONE);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "LesserVimstone"; iDTech1Check = nm;
		if (type == 6 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 4) // Cooldown Timer is 0 and Tension is less than "100" [tier 4]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,2,1);
				player.mo.A_PlaySound("use_lesservimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "GreaterVimstone"; iDTech1Check = nm;
		if (type == 7 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 7) // Cooldown Timer is 0 and Tension is less than "1000" [tier 7]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
				player.mo.A_PlaySound("use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MercuryBandana"; iDTech1Check = nm;
		if (type == 8 && player.mo.CountInv(iDTech1Check) > 0) // Mercury Bandana
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && CallACS("GetBuffTimer",12) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("GetBuffTimer",12,2,perktemp4);
				player.mo.A_PlaySound("use_mercurybandana",CHAN_BODY,1.0,0,ATTN_NORM);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,2);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MagicWater"; iDTech1Check = nm;
		if (type == 9 && player.mo.CountInv(iDTech1Check) > 0) // Magic Water
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(30,35) + (MaxMana * 0.05));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.14,12,"10 FF 10",0.01); // FadeRange(12,255,12,0.14,16,255,16,0.01,0.33);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SageElixir"; iDTech1Check = nm;
		if (type == 10 && player.mo.CountInv(iDTech1Check) > 0) // Sage Elixir
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(90,105) + (MaxMana * 0.15));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.28,15,"10 FF 10",0.01); // FadeRange(12,255,12,0.28,16,255,16,0.01,0.44);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ElfinElixir"; iDTech1Check = nm;
		if (type == 11 && player.mo.CountInv(iDTech1Check) > 0) // Elfin Elixir
		{
			temp1 = MaxMana * 1.125;
			perkmanalimit = temp1;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = MaxMana;
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MiraclePotion"; iDTech1Check = nm;
		if (type == 12 && player.mo.CountInv(iDTech1Check) > 0) // Miracle Potion
		{
			perkhealthlimit = MaxHealthTrue;
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
			{
				perkhealthlimit *= 1.25;
				perkmanalimit *= 1.25;
			}
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentHealth >= perkhealthlimit && (CurrentMana >= perkmanalimit))
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
			else
			{
				if (CurrentHealth < perkhealthlimit) player.mo.health = player.health = perkhealthlimit;
				if (CurrentMana < perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
			
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
		}
		
		nm = "MedPatchNew"; iDTech1Check = nm;
		if (type == 13 && player.mo.CountInv(iDTech1Check) > 0) // Med Patch
		{
			// Heal Health [10%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.095,0.105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~9.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.095,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.11,8,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicalKitNew"; iDTech1Check = nm;
		if (type == 14 && player.mo.CountInv(iDTech1Check) > 0) // Medical Kit
		{
			// Heal Health [25%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.24,0.26);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~24% - ~26%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.24,0.26);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.265,14,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SurgeryKitNew"; iDTech1Check = nm;
		if (type == 15 && player.mo.CountInv(iDTech1Check) > 0) // Surgery Kit
		{
			// Heal Health [100%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.96,1.04);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			// Heal Stamina [~96% - ~104%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.96,1.04);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,22,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
	}
	
	// New Health Bonus Script :P
	action void A_EmulateGiveHealthBonus (int multiplier = 1, int givemanachance = 8, int staminagive = 100, int hellcorecool = 1)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int CurrentMana = CallACS("StatCheck",14);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStamina5X = MaxStamina * 5;
		int StamToGain = CallACS("MiscVarCheckDECORATE",165);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int MaxManaLimit = MaxMana * 2;
		int temp1, temp2;
		int PerkFactor;
		int CurrentHealth, TempHealAmount, TempHealAmount2, TempHealAmount3;
		
		if (multiplier <= 0) multiplier = 1;
		CurrentHealth = player.mo.health;
		
		if (CurrentHealth < MaxHealthLimit)
		{
			TempHealAmount = MaxHealthTrue / 100;
			if (TempHealAmount < 1) TempHealAmount = 1;
		
			TempHealAmount2 = PlayerLevel / 25;
			TempHealAmount += TempHealAmount2;
			TempHealAmount *= multiplier;
			CurrentHealth += TempHealAmount;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;

			player.mo.health = player.health = CurrentHealth;
		}
		
		if (random(1,100) <= givemanachance)
		{
			if (CurrentMana < MaxManaLimit)
			{
				TempHealAmount = MaxMana / 100;
				if (TempHealAmount < 1) TempHealAmount = 1;
			
				TempHealAmount2 = PlayerLevel / 25;
				TempHealAmount += TempHealAmount2;
				TempHealAmount *= multiplier;
				CurrentMana += TempHealAmount;
				if (CurrentMana >= MaxManaLimit) CurrentMana = MaxManaLimit;

				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		}
		
		if (staminagive >= 0)
		{
			// Add 0.5% to Stamina Value [up to 500%]
			StamToGain = MaxStamina / 200;
			StamToGain *= multiplier;
			int perktemp1 = StamToGain;
			
			PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
			perktemp1 = perktemp1 * PerkFactor / 10000;
			if (player.mo.CountInv("WaterFlyingDress") > 0) perktemp1 = perktemp1 * 5 / 3;
			if (dvdsdebug_healitemdisplays) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, StamToGain);
			StamToGain = perktemp1;
			
			// Tweaks the multiplier for Stamina Recovery.
			StamToGain = StamToGain * staminagive / 100;
			
			if (CurrentStamina < MaxStamina5X) CurrentStamina += StamToGain; 
			if (CurrentStamina > MaxStamina5X) CurrentStamina = MaxStamina5X;
			
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int HellcoreRestored;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		if (CharacterClass == 2 && hellcorecool > 0) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				TempHealAmount = 2500; // 0.25% [10000000 is 1000.00% (maximum)]
				TempHealAmount *= multiplier;
				TempHealAmount2 = PlayerLevel * 10;
				TempHealAmount3 = random(-500,500);
				HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
				if (SoulMasteryPerkLevel >= 0)
				{
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel == 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
				if (HellcoreRestored < 1) HellcoreRestored = 1;
				if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
				
				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}
	}
	
	// ManaCube Pickup script
	void A_PickupManaCube(int type = 0, int overmana = 0)
	{
		String nm, nn, no, np;
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int GiveManaAmount;
		int MaxManaDouble = MaxMana * 2;
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		if (type <= 1) GiveManaAmount = (20 + (MaxMana * 0.075)); // Small (0.75)
		if (type == 2) GiveManaAmount = (60 + (MaxMana * 0.1875)); // Medium (1.875)
		if (type >= 3) GiveManaAmount = (100 * (MaxMana * 0.30)); // Large (3)
		
		if (clearofmind > 0)
		{
			if (clearofmind == 1) GiveManaAmount *= 1.02;
			if (clearofmind == 2) GiveManaAmount *= 1.045;
			if (clearofmind == 3) GiveManaAmount *= 1.075;
			if (clearofmind == 4) GiveManaAmount *= 1.11;
			if (clearofmind == 5) GiveManaAmount *= 1.15;
		}
		
		if (CountInv("SauronHelmet",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 9 / 8; // Sauron Helmet = 112.5%
		if (CharacterClass == 0 && CountInv("SauronGauntlets",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CharacterClass == 1 && CountInv("SauronGauntletsIllucia",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CharacterClass == 2 && CountInv("SauronGauntletsFlora",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		no = "SauronGauntletsAilish"; APPackCheck3 = no; if (CharacterClass == 8 && CountInv(APPackCheck3,AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		no = "SauronGauntletsPetra"; APPackCheck3 = no; if (CharacterClass == 9 && CountInv(APPackCheck3,AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CountInv("TheOneRing",AAPTR_PLAYER1) > 0)
		{
			if (CharacterClass == 2 || CharacterClass == 8) GiveManaAmount = GiveManaAmount * 5 / 4;	// The One Ring [Flora & Ailish] = 125%
												else if (CharacterClass == 9) GiveManaAmount = GiveManaAmount * 7 / 8;	// The One Ring [Petra] = 87.5%
																								 else GiveManaAmount = GiveManaAmount / 2;		// The One Ring [Marines] = 50%
		}
		
		GiveManaAmount = GiveManaAmount * dvds_manaitemmultiplier / 100;
		
		CurrentMana += GiveManaAmount;
		if (overmana == 0 && CurrentMana > MaxMana) CurrentMana = MaxMana;
		if (overmana == 1 && CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
		
		CallACS("OtherVarSetDECORATE",2,CurrentMana);
		//CallACS("MiscVarSetDECORATE",243,CurrentMana);
		//CallACS("MiscVarSetDECORATE",238,CurrentMana);
	}
	
	// Mana Recovery Items
	action int A_CheckManaLevels(int overmana = 0)
	{
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int MaxManaLimit = MaxMana * 2;
		int ManaThreshold;

		if (overmana == 0) ManaThreshold = MaxMana;
		if (overmana == 1) ManaThreshold = MaxManaLimit;

		int result = 0;
		if (CurrentMana < ManaThreshold) result = 1;
		return result;
	}
	
	// New Soulsphere script :P
	action void A_GrabSoulsphere()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);

		if (CurrentHealth < MaxHealthLimit)
		{
			HealthValue = MaxHealthTrue;
			CurrentHealth += HealthValue;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;

			player.mo.health = player.health = CurrentHealth;
		}
		
		// Add 25% to Stamina Value [up to 500%]
		TrueStamValue = MaxStamina / 4;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;
		
		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems > 0) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue; 
			if (CurrentStamina > MaxStaminaLimit) CurrentStamina = MaxStaminaLimit;

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		// Add 50% MP/Mana to Deggaris/Illucia/Flora, 200% Max MP/Mana.
		MaxManaLimit = MaxMana * 2;
		if (CurrentMana < MaxManaLimit)
		{
			ManaValue = MaxMana / 2;
			CurrentMana += ManaValue;
			if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;

			CallACS("OtherVarSetDECORATE",2,CurrentMana);
		}
	
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				HellcoreRestored = 250000 + (PlayerLevel * 2500) + random(-50000,50000);
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
				if (SoulMasteryPerkLevel >= 0)
				{
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel == 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
			
				if (HellcoreRestored < 1) HellcoreRestored = 1;
				if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}
	}
	
	// New Megasphere Script [for health/stamina half] :P
	action void A_MegaSphereHealth()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int HealAmount;
		
		if (CurrentHealth < MaxHealthLimit)
		{
			HealAmount = MaxHealthLimit;
			CurrentHealth += HealAmount;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;
		
			player.mo.health = player.health = CurrentHealth;
		}
		
		// Add 50% to Stamina Value [up to 200%]
		TrueStamValue = MaxStamina / 2;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;

		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems > 0) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue; 
			if (CurrentStamina > MaxStaminaLimit) CurrentStamina = MaxStaminaLimit;

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				HellcoreRestored = 750000 + (PlayerLevel * 7500) + random(-150000,150000);
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
				if (SoulMasteryPerkLevel >= 0)
				{
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel == 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
			
				if (HellcoreRestored < 1) HellcoreRestored = 1;
				if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}
	}
	
	// MegaSphere Armor [Deggaris & Illucia Only] or Mana [All Three Characters]
	action void A_MegaSphereArmor()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int HealAmount;
		int ArmorClearValue, RawArmorValue;
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		
		if (CharacterClass == 9) // Petra gets no armor from a Soul Sphere, but gets Mana and Force Gauge refill.
		{
			CurrentMana = MaxMana * 2;
			//Insert code for refilling force gauge here
		}
		else
		if (CharacterClass == 2 || CharacterClass == 8) // Flora and Ailish do not get armor from a Soul Sphere, but instead gets Mana up to 200% of their maximum
		{
			CurrentMana = MaxMana * 2;
		}
		else
		if (CharacterClass <= 1)
		{
			MaxManaLimit = MaxMana * 2;
			CurrentMana = MaxManaLimit;
		
			// Saves original raw Armor Value
			RawArmorValue = player.mo.CountInv("BasicArmor");
			if (dvdsdebug_armorbonusdisplays) Console.Printf("BasicArmor: %d", RawArmorValue);
		
			// Clears Armor Types
			player.mo.A_SetInventory("BasicArmor", 0);
			player.mo.A_SetInventory("Armor", 0);
			player.mo.A_SetInventory("ArmorBonusDSGreen",0);
			player.mo.A_SetInventory("ArmorBonusDSBlue",0);
			player.mo.A_SetInventory("ArmorBonusDSStone1",0);
			player.mo.A_SetInventory("ArmorBonusDSStone2",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
			// Reinitalizes the proper Armor Class after the previous code above clears it
			if (CurrentArmorClass <= 1) 
			{ 
				CurrentArmorClass = 2;
				RawArmorValue = 200;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			}
			else if (CurrentArmorClass == 2) 
			{ 
				CurrentArmorClass = 3; 
				RawArmorValue = 500;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			}
			else if (CurrentArmorClass == 3) 
			{ 
				CurrentArmorClass = 4;
				RawArmorValue = 1250;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			}
			else if (CurrentArmorClass == 4) 
			{ 
				CurrentArmorClass = 5;
				RawArmorValue = 2000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			}
			else if (CurrentArmorClass >= 5) 
			{ 
				CurrentArmorClass = 6; 
				RawArmorValue = 5000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			}
			
			CurrentMaxArmor = 0;
			player.mo.A_SetInventory("DSNoArmorClass",0);
			player.mo.A_SetInventory("DSGreenArmorClass",0);
			player.mo.A_SetInventory("DSBlueArmorClass",0);
			player.mo.A_SetInventory("DSStoneArmorClass1",0);
			player.mo.A_SetInventory("DSDiamondArmorClass1",0);
			player.mo.A_SetInventory("DSStoneArmorClass2",0);
			player.mo.A_SetInventory("DSDiamondArmorClass2",0);

			if (CurrentArmorClass == 1) { CurrentMaxArmor = 100; player.mo.A_SetInventory("DSGreenArmorClass",1); }
			if (CurrentArmorClass == 2) { CurrentMaxArmor = 200; player.mo.A_SetInventory("DSBlueArmorClass",1); }
			if (CurrentArmorClass == 3) { CurrentMaxArmor = 500; player.mo.A_SetInventory("DSStoneArmorClass1",1); }
			if (CurrentArmorClass == 4) { CurrentMaxArmor = 1250; player.mo.A_SetInventory("DSDiamondArmorClass1",1); }
			if (CurrentArmorClass == 5) { CurrentMaxArmor = 2000; player.mo.A_SetInventory("DSStoneArmorClass2",1); }
			if (CurrentArmorClass == 6) { CurrentMaxArmor = 5000; player.mo.A_SetInventory("DSDiamondArmorClass2",1); }
		}
		if (dvdsdebug_armorbonusdisplays) Console.Printf("CurrentArmorClass: %d, CurrentMaxArmor: %d", CurrentArmorClass, CurrentMaxArmor);
		CallACS("OtherVarSetDECORATE",2,CurrentMana);
		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Stimpacks/Medikits/Berserk Packs (All games)
	action void A_PickupMedicalItem(int HealItemType = 0, int maxhealtype = 0) //
	{
		int HealAmount, ExtraHeal, CurrentHP;
		int tempstaminalimit;
		int perktemp1, perktemp2, perktemp3;
		int PerkFactor;
		int perkbasemulti = 16;
		int debughealitems = dvdsdebug_healitemdisplays;
		CurrentHP = player.mo.health;
		int CharacterClass = CallACS("CheckCharacterClass");
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int TrueStamValue;

		if (debughealitems) Console.Printf("HealItemType: %d", HealItemType);
		if (HealItemType == -1) // Source Guardian Lifeseed
		{
			HealAmount = MaxHealthTrue * 25 / 100;
			perktemp2 = HealAmount;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			tempstaminalimit = MaxStamina * 5;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			tempstaminalimit = tempstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < tempstaminalimit)
			{
				TrueStamValue = MaxStamina / 8; // 12.5%
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				if (CurrentStamina > tempstaminalimit) CurrentStamina = tempstaminalimit;
				
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		}

		if (HealItemType == 0 || HealItemType == 1) // Stimpack / Crystal Vial (1) and Medikit / Mini Berserk Pack (2) [Health]
		{
			if (HealItemType == 0) HealAmount = MaxHealthTrue * 10 / 100; // [Stimpack]
			if (HealItemType == 1) HealAmount = MaxHealthTrue * 25 / 100; // [Medikit/Mini-Berserk]
			perktemp2 = HealAmount;
		
			if (CharacterClass == 0 || CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			tempstaminalimit = MaxStamina;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			tempstaminalimit = tempstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < tempstaminalimit)
			{
				if (HealItemType == 0) TrueStamValue = MaxStamina / 20; // 5.0% [Stimpack/Vial]
				if (HealItemType == 1) TrueStamValue = MaxStamina / 8; // 12.5% [Medikit/Flask]
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				if (CurrentStamina > tempstaminalimit) CurrentStamina = tempstaminalimit;

				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		}
		
		if (HealItemType == 2) // Berserk Pack
		{
			HealAmount = MaxHealthTrue;
			perktemp2 = HealAmount;
			
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		}
		if (HealItemType == 3 || HealItemType == 4) // Full Berserk Pack (3) and Mini Berserk Pack (4) [Stamina]
		{
			if (HealItemType == 3) TrueStamValue = MaxStamina * 1; // 100% [Full Berserk Pack]
			if (HealItemType == 4) TrueStamValue = MaxStamina / 4; // 25% [Mini Berserk Pack]
			perktemp1 = TrueStamValue;
			if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
			PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
			perktemp1 = perktemp1 * PerkFactor / 10;
		
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
			tempstaminalimit = MaxStamina * 5;
		
			if (debughealitems) Console.Printf("Stamina Limit: [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, perktemp1, TrueStamValue);
			if (CurrentStamina < tempstaminalimit) CurrentStamina += perktemp1;
			if (CurrentStamina >= tempstaminalimit) CurrentStamina = tempstaminalimit; 
			
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int temphealthlimit = MaxHealthTrue;
		if (maxhealtype > 0) temphealthlimit *= 2;
		
		if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
		temphealthlimit = temphealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;

		if (temphealthlimit > (MaxHealthTrue*2)) temphealthlimit = MaxHealthTrue * 2;

		if (CurrentHP <= temphealthlimit)
		{
			CurrentHP += perktemp2;
			if (CurrentHP > temphealthlimit) CurrentHP = temphealthlimit;
			if (debughealitems) Console.Printf("Health Limit: %d VS [%d], Health Restored: %d VS [%d]", temphealthlimit, MaxHealthTrue, perktemp2, HealAmount);

			player.mo.health = player.health = CurrentHP;
		}
	}
	
		// Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
	action int A_CheckHealthLevels(int maxhealtype = 0)
	{
		int currenthealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int CharacterClass = CallACS("CheckCharacterClass");
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int perkhealthlimit = MaxHealthTrue;
		int perkbasemulti = 16;
		
		if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
		perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		if (maxhealtype > 0) perkhealthlimit *= 2;
		if (perkhealthlimit > (MaxHealthTrue*2)) perkhealthlimit = (MaxHealthTrue * 2);
		
		int result = 0;
		if (currenthealth < perkhealthlimit) result = 1;

		return result;
	}
	
	// Max Health Bonus Script
	action void A_MaxHPBonusPickup()
	{
		int HPError, IncreaseMultiplier, LevelExtraHealth, BonusMaxHP, CurrentHP, PerkFactor; 
		int ArmorHPBonus = 0;
		int MapNoBonus = 0;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int debugseedstuff = dvdsdebug_showseedstuff;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (CharacterClass == 0) BonusMaxHP = MaxHealthTrue / random(390,410);
			if (CharacterClass == 1) BonusMaxHP = MaxHealthTrue / random(410,430);
			if (CharacterClass == 2) BonusMaxHP = MaxHealthTrue / random(430,450);
			if (CharacterClass == 8) BonusMaxHP = MaxHealthTrue / random(440,460);
			if (CharacterClass == 9) BonusMaxHP = MaxHealthTrue / random(400,420);
			if (debugseedstuff) Console.Printf("BonusMaxHP [Base]: %d", BonusMaxHP);
			
			HPError = BonusMaxHP / 3;
			HPError += 1;
			if (debugseedstuff) Console.Printf("HPError: %d", HPError);

			BonusMaxHP = BonusMaxHP + random(-HPError,HPError);
			if (debugseedstuff) Console.Printf("BonusMaxHP [After HPError]: %d", BonusMaxHP);
			
			if (CharacterClass == 0) { IncreaseMultiplier = random(18,21); } // Deggaris receives 2nd most HP from a bonus
			if (CharacterClass == 1) { IncreaseMultiplier = random(15,17); } // Illucia receives less HP from a bonus than Petra & Deggaris, but more than Flora & Ailish
			if (CharacterClass == 2) { IncreaseMultiplier = random(12,14); } // Flora receives the 2nd least HP from a bonus
			if (CharacterClass == 8) { IncreaseMultiplier = random(10,12); } // Ailish receives the least HP from a bonus
			if (CharacterClass == 9) { IncreaseMultiplier = random(20,23); } // Petra receives most HP from a bonus
			BonusMaxHP = BonusMaxHP * IncreaseMultiplier / 16;
			if (debugseedstuff > 0) Console.Printf("Randomizer IncreaseMultiplier: %d / 16, BonusMaxHP [After HPError]: %d", IncreaseMultiplier, BonusMaxHP);
			
			// Flora's Armor Items [up to +55% Max HP gained from Max HP Bonuses]
			if (CharacterClass == 2)
			{
				if (player.mo.CountInv("PearlyCorset")) ArmorHPBonus += 20; // +20%
				if (player.mo.CountInv("KissaBra")) ArmorHPBonus += 10; // +10%
				if (player.mo.CountInv("BalrogRing")) ArmorHPBonus += 15; // +25%
				ArmorHPBonus += 100;
				BonusMaxHP = BonusMaxHP * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset / Kissa Bra / Balrog Ring
				if (debugseedstuff > 0) Console.Printf("ArmorHPBonus [Flora]: %d / 100, BonusMaxHP [After ArmorHPBonus]: %d", ArmorHPBonus, BonusMaxHP);
			}
			
			PerkFactor = ((CallACS("MiscVarCheckDECORATE",10001) * 500) + (CallACS("MiscVarCheckDECORATE",10002) * 1250)) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			if (debugseedstuff) Console.Printf("BonusMaxHP [LifeUp Perk]: %d", BonusMaxHP);
			
			PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			if (debugseedstuff) Console.Printf("BonusMaxHP [StaminaUpgrade (Strife)]: %d", BonusMaxHP);
			
			// Overall Modifier
			MapNoBonus = (level.levelnum * 9) / 20; // 45%
			if (debugseedstuff > 0) Console.Printf("MapNoBonus: %d", MapNoBonus);
			BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill <= SKILL_VERY_EASY)		BonusMaxHP = BonusMaxHP * (random(90,100) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EASY)				BonusMaxHP = BonusMaxHP * (random(80,90) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_NORMAL)			BonusMaxHP = BonusMaxHP * (random(75,85) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HARD)				BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_VERY_HARD)		BonusMaxHP = BonusMaxHP * (random(65,75) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EXTREME)			BonusMaxHP = BonusMaxHP * (random(60,70) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HORRIBLE)		BonusMaxHP = BonusMaxHP * (random(55,65) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_IMPOSSIBLE)	BonusMaxHP = BonusMaxHP * (random(50,60) + MapNoBonus) / 100;
			if (TrueGameSkill >= SKILL_OMEGA)	BonusMaxHP = BonusMaxHP * (random(45,55) + MapNoBonus) / 100;
			if (debugseedstuff) Console.Printf("BonusMaxHP [After MapNoBonus]: %d", BonusMaxHP);
			
			PerkFactor = 1;
			PerkFactor += ((CallACS("MiscVarCheckDECORATE",10001) * 1) / 10) + ((CallACS("MiscVarCheckDECORATE",317) * 1) / 4);
			PerkFactor += ((CallACS("MiscVarCheckDECORATE",317) * 1) / 4);
			if (BonusMaxHP < PerkFactor) BonusMaxHP = PerkFactor;
			if (debugseedstuff) Console.Printf("BonusMaxHP [Final]: %d", BonusMaxHP);
			
			CallACS("MiscVarSetDECORATE",222,BonusMaxHP,1);
			CallACS("MiscVarSetDECORATE",2031,105); 
			
			CurrentHP = player.mo.health;
			player.mo.health = player.health = (CurrentHP + BonusMaxHP);
			

			MaxHealthTrue += BonusMaxHP;
			int MaxHealthLimit = MaxHealthTrue * 2;
			//player.mo.SpawnHealth() = MaxHealthTrue;
			CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
			
			// Max HP Bonus also heals extra HP dependant on the character in use.
			CurrentHP = player.mo.health;
			if (CharacterClass == 0) CurrentHP = CurrentHP + random(2,4) + BonusMaxHP; // Deggaris receives the Least Healed HP from a bonus
			if (CharacterClass == 1) CurrentHP = CurrentHP + random(3,6) + BonusMaxHP; // Illucia receives a Median of Healed HP from a bonus
			if (CharacterClass == 2) CurrentHP = CurrentHP + random(5,10) + BonusMaxHP; // Flora used to receive the Most Healed HP from a bonus
			if (CharacterClass == 8) CurrentHP = CurrentHP + random(6,12) + BonusMaxHP; // Ailish receives the Most Healed HP from a bonus
			if (CharacterClass == 9) CurrentHP = CurrentHP + random(1,3) + BonusMaxHP; // Petra receives the Least Healed HP from a bonus
			
			int ExtraHP;
			ExtraHP = MaxHealthTrue / 100;
			if (ExtraHP < 1) ExtraHP = 1;
			
			LevelExtraHealth = PlayerLevel / 10;
			ExtraHP += LevelExtraHealth;
			CurrentHP += ExtraHP;
			
			if (CurrentHP > MaxHealthLimit) CurrentHP = MaxHealthLimit;
			
			player.mo.health = player.health = CurrentHP;
		}
	}

	// Checks Whether a Full Armor Item can be picked up or not
	action int A_CheckArmorLevels(int ArmorType = 0)
	{
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		int result = 0;
		if (CharacterClass != 2)
		{
			RawArmorValue = player.mo.CountInv("BasicArmor");
			if (ArmorType == 1 && CurrentArmorClass <= 1 && RawArmorValue < 100) result = 1;
			if (ArmorType == 2 && CurrentArmorClass <= 2 && RawArmorValue < 200) result = 1;
			if (ArmorType == 3 && CurrentArmorClass <= 3 && RawArmorValue < 500) result = 1;
			if (ArmorType == 4 && CurrentArmorClass <= 4 && RawArmorValue < 1250) result = 1;
			if (ArmorType == 5 && CurrentArmorClass <= 5 && RawArmorValue < 2000) result = 1;
			if (ArmorType == 6 && CurrentArmorClass <= 6 && RawArmorValue < 5000) result = 1;
		}
		//Console.Printf("ArmorType: %d, CurrentArmorClass: %d, RawArmorValue: %d, Result: %d", ArmorType, CurrentArmorClass, RawArmorValue, result);
		return result;
	}

	// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	action void A_PickupArmorMain(int ArmorType = 0)
	{
		int GiveArmorAmount;
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);

		// Saves original raw Armor Value
		RawArmorValue = player.mo.CountInv("BasicArmor");
		
		player.mo.A_SetInventory("BasicArmor",0);
		player.mo.A_SetInventory("Armor",0);
		player.mo.A_SetInventory("ArmorBonusDSGreen",0);
		player.mo.A_SetInventory("ArmorBonusDSBlue",0);
		player.mo.A_SetInventory("ArmorBonusDSStone1",0);
		player.mo.A_SetInventory("ArmorBonusDSStone2",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
		if (ArmorType == 1 && CurrentArmorClass <= 1) { CurrentArmorClass = 1; GiveArmorAmount = 100; }
		if (ArmorType == 2 && CurrentArmorClass <= 2) { CurrentArmorClass = 2; GiveArmorAmount = 200; }
		if (ArmorType == 3 && CurrentArmorClass <= 3) { CurrentArmorClass = 3; GiveArmorAmount = 500; }
		if (ArmorType == 4 && CurrentArmorClass <= 4) { CurrentArmorClass = 4; GiveArmorAmount = 1250; }
		if (ArmorType == 5 && CurrentArmorClass <= 5) { CurrentArmorClass = 5; GiveArmorAmount = 2000; }
		if (ArmorType == 6 && CurrentArmorClass <= 6) { CurrentArmorClass = 6; GiveArmorAmount = 5000; }
		
		player.mo.A_SetInventory("DSNoArmorClass",0);
		player.mo.A_SetInventory("DSGreenArmorClass",0);
		player.mo.A_SetInventory("DSBlueArmorClass",0);
		player.mo.A_SetInventory("DSStoneArmorClass1",0);
		player.mo.A_SetInventory("DSDiamondArmorClass1",0);
		player.mo.A_SetInventory("DSStoneArmorClass2",0);
		player.mo.A_SetInventory("DSDiamondArmorClass2",0);
		if (CurrentArmorClass == 1)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSGreen", 1); }
			CurrentMaxArmor = 100;
		}
		if (CurrentArmorClass == 2)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			CurrentMaxArmor = 200;
		}
		if (CurrentArmorClass == 3)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			CurrentMaxArmor = 500;
		}
		if (CurrentArmorClass == 4)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			CurrentMaxArmor = 1250;
		}
		if (CurrentArmorClass == 5)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			CurrentMaxArmor = 2000;
		}
		if (CurrentArmorClass == 6)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			CurrentMaxArmor = 5000;
		}

		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color based on the current Armor Class of Deggaris or Illucia [does not apply to Flora as she can't use Armor Bonuses and they aren't supposed to "appear" when she is in play]
	action void A_ArmorBonusEyeGlow()
	{
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9)
		{
			if (CurrentArmorClass == 0) { Thing_SetTranslation(0,18); } // If you have no Armor Class
			if (CurrentArmorClass == 1) { Thing_SetTranslation(0,18); } // If you have Green Armor Class
			if (CurrentArmorClass == 2) { Thing_SetTranslation(0,22); } // If you have Blue Armor Class
			if (CurrentArmorClass == 3) { Thing_SetTranslation(0,20); } // If you have Stone Armor [1] Class
			if (CurrentArmorClass == 4) { Thing_SetTranslation(0,21); } // If you have Diamond Armor [1] Class
			if (CurrentArmorClass == 5) { Thing_SetTranslation(0,20); } // If you have Stone Armor [2] Class
			if (CurrentArmorClass == 6) { Thing_SetTranslation(0,21); } // If you have Diamond Armor [2] Class
		}
	}
	
	action int A_CheckChainsaw()
	{
		int result = 0;
		if (CountInv("DoubleBladedChainsaw",AAPTR_PLAYER1) > 0) result = 2;
		else if (CountInv("Chainsaw2",AAPTR_PLAYER1) > 0) result = 1;
		return result;
	}
	
	// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
	action int A_ClassicDoom2ArmorCheck()
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int result = 0;
		
		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			if (CharacterClass == 0) result = 3;
			if (CharacterClass == 1) result = 4;
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) result = 5;
		}
		else
		{
			if (CharacterClass == 0) result = 0;
			if (CharacterClass == 1) result = 1;
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) result = 2;
		}
		return result;
	}
	
	// Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
	void A_CheckFloraArmorCopies(int Armortype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass == 2)
		{
			if (Armortype == 1 && CountInv("SafeTeaShoes",AAPTR_PLAYER1) > 0) Thing_Remove(0); // SafeTeaShoes
			if (Armortype == 2 && CountInv("PearlyCorset",AAPTR_PLAYER1) > 0) Thing_Remove(0); // PearlyCorset
			if (Armortype == 3 && CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) Thing_Remove(0); // WaterFlyingDress
			if (Armortype == 4 && CountInv("EvenstarNecklace",AAPTR_PLAYER1) > 0) Thing_Remove(0); // EvenstarNecklace
			if (Armortype == 5 && CountInv("CloakOfEvasion",AAPTR_PLAYER1) > 0) Thing_Remove(0); // CloakOfEvasion
			if (Armortype == 6 && CountInv("AnubisCufflinks",AAPTR_PLAYER1) > 0) Thing_Remove(0); // AnubisCufflinks
			if (Armortype == 7 && CountInv("KissaBra",AAPTR_PLAYER1) > 0) Thing_Remove(0); // KissaBra
			if (Armortype == 8) 
			{
				if (CountInv("DivineShield",AAPTR_PLAYER1) > 0) Thing_Remove(0);
				else if (CountInv("RuinousShield",AAPTR_PLAYER1) > 0) Thing_Remove(0);
			}
			if (Armortype == 9 && CountInv("DivineShield",AAPTR_PLAYER1) > 0) Thing_Remove(0); // DivineShield 
			if (Armortype == 10 && CountInv("BalrogRing",AAPTR_PLAYER1) > 0) Thing_Remove(0); // BalrogRing
			if (Armortype == 11 && CountInv("DoveRibbon",AAPTR_PLAYER1) > 0) Thing_Remove(0); // DoveRibbon
			if (Armortype == 12 && CountInv("FalconKnifeEarrings",AAPTR_PLAYER1) > 0) Thing_Remove(0); // FalconKnifeEarrings
		}
		else
		{
			Thing_Remove(0);
		}
	}
	
	// Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
	action void A_HellcoreWeaponCheckCharacter(int Weapontype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int IsWeaponLevelMaxed;

		if (CharacterClass == 2)
		{
			IsWeaponLevelMaxed = 0;
			if (Weapontype == 0 && CallACS("MiscVarCheckDECORATE",96) >= 8) IsWeaponLevelMaxed = 1; // Imp Claw [4]
			if (Weapontype == 1 && CallACS("MiscVarCheckDECORATE",97) >= 8) IsWeaponLevelMaxed = 1; // Dark Imp Claw [4]
		
			if (Weapontype == 2 && CallACS("MiscVarCheckDECORATE",98) >= 8) IsWeaponLevelMaxed = 1; // CacoDemon Eye [4]
			if (Weapontype == 3 && CallACS("MiscVarCheckDECORATE",99) >= 8) IsWeaponLevelMaxed = 1; // Cacolantern Eye [4]
			if (Weapontype == 4 && CallACS("MiscVarCheckDECORATE",100) >= 8) IsWeaponLevelMaxed = 1; // Abaddon Eye [4]
		
			if (Weapontype == 5 && CallACS("MiscVarCheckDECORATE",101) >= 8) IsWeaponLevelMaxed = 1; // Knight Fist [5]
			if (Weapontype == 6 && CallACS("MiscVarCheckDECORATE",102) >= 8) IsWeaponLevelMaxed = 1; // Baron Fist [5]
			if (Weapontype == 7 && CallACS("MiscVarCheckDECORATE",103) >= 8) IsWeaponLevelMaxed = 1; // Belphegor Fist [5]
			if (Weapontype == 8 && CallACS("MiscVarCheckDECORATE",104) >= 8) IsWeaponLevelMaxed = 1; // Bruiser Fist [5]
			if (Weapontype == 9 && CallACS("MiscVarCheckDECORATE",105) >= 8) IsWeaponLevelMaxed = 1; // Archon Fist [5]
			if (Weapontype == 10 && CallACS("MiscVarCheckDECORATE",106) >= 8) IsWeaponLevelMaxed = 1; // Pyro Fist [5]
		
			if (Weapontype == 11 && CallACS("MiscVarCheckDECORATE",107) >= 8) IsWeaponLevelMaxed = 1; // Incarnate Skull [6]
			if (Weapontype == 12 && CallACS("MiscVarCheckDECORATE",108) >= 8) IsWeaponLevelMaxed = 1; // Archvile Hand [6]
			if (Weapontype == 13 && CallACS("MiscVarCheckDECORATE",109) >= 8) IsWeaponLevelMaxed = 1; // Diabloist Hand  [6]
			if (Weapontype == 14 && CallACS("MiscVarCheckDECORATE",110) >= 8) IsWeaponLevelMaxed = 1; // Balrog Fist [6]
		
			if (Weapontype == 15 && CallACS("MiscVarCheckDECORATE",111) >= 8) IsWeaponLevelMaxed = 1; // Elemental's Eye [6]
			if (Weapontype == 16 && CallACS("MiscVarCheckDECORATE",112) >= 8) IsWeaponLevelMaxed = 1; // Overlord's Eye [6]

			if (IsWeaponLevelMaxed != 0) { Thing_Remove(0); }
		}
		else 
		{
			Thing_Remove(0); 
		}
	}
	
	// Checks to Remove Seeds on the Map if too many have been picked up already.
	action void A_SeedLimitChecker(int SeedType = 0)
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		if (ModType == 0 && dvds_canseedsappear == 0) Thing_Remove(0);
		if (SeedType == 0 && CallACS("MiscVarCheckDECORATE",37) >= CallACS("MiscVarCheckDECORATE",28)) Thing_Remove(0); // Seed of Skill
		if (SeedType == 1 && CallACS("MiscVarCheckDECORATE",30) >= CallACS("MiscVarCheckDECORATE",29)) Thing_Remove(0); // Seed of Agility/Defense/Deftness/Sorcery/Strength/Therapeusis
		if (SeedType == 2 && CallACS("MiscVarCheckDECORATE",27) >= CallACS("MiscVarCheckDECORATE",26)) Thing_Remove(0); // Fygg Fruit
		// SeedType == 3 is a 'blank' type for other Seed type items that aren't covered above, so it will run the script checker
	}
	
	// For Increasing the Strength Level of a Hellcore-type weapon when picking it up
	action void A_IncreaseHellcoreLevel(int HellcoreWeapon = 0)
	{
		int HellCoreID; int HellCoreLevel;

		HellCoreID = HellcoreWeapon + 95;
		HellCoreLevel = CallACS("MiscVarCheckDECORATE",HellCoreID);
		HellCoreLevel += 1;
		if (HellCoreLevel > 8) HellCoreLevel = 8;
		CallACS("MiscVarSetDECORATE",HellCoreID,HellCoreLevel);
	}
	
	action int A_MaxHPDropChance()
	{
		int Chance, roll;
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		
		if (TrueGameSkill <= SKILL_VERY_EASY) Chance = 72;
		else if (TrueGameSkill == SKILL_EASY) Chance = 64;
		else if (TrueGameSkill == SKILL_NORMAL) Chance = 56;
		else if (TrueGameSkill == SKILL_HARD) Chance = 48;
		else if (TrueGameSkill == SKILL_VERY_HARD) Chance = 32;
		else if (TrueGameSkill == SKILL_EXTREME) Chance = 28;
		else if (TrueGameSkill == SKILL_HORRIBLE) Chance = 24;
		else if (TrueGameSkill == SKILL_IMPOSSIBLE) Chance = 20;
		else if (TrueGameSkill >= SKILL_OMEGA) Chance = 16;
		else Chance = 56;
		
		roll = random(1,256);
		int result = 0;
		if (roll <= Chance) result = 1;
		if (ModType == 0 && dvds_canseedsappear == 0) result = 0;
		
		return result;
	}
	
	// Checks the first Chainsaw to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	action int A_SawCheckSceptre()
	{
		int Result, SceptreCheck = 0;
		int CharacterClass = CallACS("CheckCharacterClass");

		ThinkerIterator Test1 = ThinkerIterator.Create("SceptreOfEmpyrea"); Actor mo; while (mo = Actor(Test1.Next())) { SceptreCheck++; }

		if (CharacterClass == 2 && dvds_florastartsceptre == 0 && dvds_florasceptrecandrop != 0 && CountInv("SceptreOfEmpyrea",AAPTR_PLAYER1) == 0 && SceptreCheck < 1) Result = 1;
		
		//Console.Printf("SceptreOfEmpyrea (BerserkCheck): %d", SceptreCheck);
		//Console.Printf("Result: %d", Result);
		return result;
	}
	
	// Checks the Berserk Pack to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	action int A_BerserkCheckSceptre()
	{
		int Result, SceptreCheck = 0;
		int CharacterClass = CallACS("CheckCharacterClass");

		ThinkerIterator Test1 = ThinkerIterator.Create("SceptreOfEmpyrea"); Actor mo; while (mo = Actor(Test1.Next())) { SceptreCheck++; }

		if (CharacterClass == 2 && dvds_florastartsceptre == 0 && dvds_florasceptrecandrop != 0 && CountInv("SceptreOfEmpyrea",AAPTR_PLAYER1) == 0 && SceptreCheck < 1) Result = 1;
		
		//Console.Printf("SceptreOfEmpyrea (BerserkCheck): %d", SceptreCheck);
		//Console.Printf("Result: %d", Result);
		return result;
	}
	
	action void A_FloraRandomArmorDrop(int type = 0, int OldRand0 = 0, int DVIIMode = 0)
	{
		int Rand0, Rand1, Rand2, PX, PY, PZ, DVIIRandVal, spawnedaitem;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		
		DVIIRandVal = 1 + (CallACS("MiscVarCheckDECORATE",33) / 32); // Default value for randomizer

		if (dvdsdebug_armordropdisplays) Console.Printf("DVIIRandVal: %d, Type: %d, OldRand0: %d, DVIIMode: %d", DVIIRandVal, type, OldRand0, DVIIMode);
		// Do not run script if Flora is not the character in play
		if (CharacterClass != 2) { return; }
		else
		{
			// Do not run script if the game is Deus Vult II
			if (ModType == 2)
			{
				if (DVIIMode == 0) { return; }
				else DVIIRandVal = 1024; // Randomizer will ALWAYS roll positive in DVII-AltMode
			}
		}
			
		// Spawn Occurance Rate
		if (type == 5) // Given by an armorer in Strife [random]
		{
			DVIIRandVal = 1024;
			Rand0 = 0;
		}
		else
		if (type == 4) // ALWAYS SPAWNS [no random failure rate]
		{
			DVIIRandVal = 1024;
			Rand0 = 0;
		}
		else
		if (type == 3) // Doom2-Armor Bonuses
		{
			Rand0 = random(1,3072);
			if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,2208);
			if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,2496);
			if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,2784);
			if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,3072);
			if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,3648);
			if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,4096);
			if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,4608);
			if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,5120);
			if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,6144);
		}
		else
		if (type == 2) // Doom2-Armors
		{
			Rand0 = random(1,128);
			if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,92);
			if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,104);
			if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,116);
			if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,128);
			if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,152);
			if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,164);
			if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,178);
			if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,202);
			if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,226);
		}
		else
		if (type == 1)
		{
			Rand0 = OldRand0;
		}
		else
		{
			if (ModType == 1) // DVI has 4 levels
			{
				Rand0 = random(1,256);
				if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,184);
				if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,208);
				if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,232);
				if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,256);
				if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,304);
				if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,328);
				if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,356);
				if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,404);
				if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,452);
			}
			else // Classic has 32 levels [1/4th the spawn rate of DVI mode]
			{
				Rand0 = random(1,768);
				if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,552);
				if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,624);
				if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,696);
				if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,768);
				if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,912);
				if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,984);
				if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,1068);
				if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,1212);
				if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,1356);
			}
		}
		
		if (dvdsdebug_armordropdisplays) Console.Printf("DVIIRandVal / Rand0: %d / %d", DVIIRandVal, Rand0);
		if (Rand0 <= DVIIRandVal)
		{
			Rand1 = 0;
			if (CountInv("SafeTeaShoes",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("PearlyCorset",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("EvenstarNecklace",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("CloakOfEvasion",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("FalconKnifeEarrings",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("AnubisCufflinks",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("KissaBra",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("RuinousShield",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("DivineShield",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("BalrogRing",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (CountInv("DoveRibbon",AAPTR_PLAYER1) > 0) Rand1 += 1;
			if (dvdsdebug_armordropdisplays) Console.Printf("Rand1: %d / 11", Rand1);
			if (Rand1 > 10) { return; } // If all 11 items or more are detected on Flora, this script will not run past this point.
			
			int runtimes;
			int TempArmorCheck = 0;
			while (spawnedaitem == 0)
			{
				Rand2 = random(1,100);
				if (dvdsdebug_armordropdisplays) Console.Printf("Rand2: %d", Rand2);
				// PrintBold(d:Rand2,s:" / (",d:Rand0,s:") / [",d:Rand1,s:"]\n\n X",d:PX,s:" Y",d:PY,s:" Z",d:PZ);
				
				TempArmorCheck = 0;
				if (Rand2 > 0 && Rand2 < 10)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("SafeTeaShoes"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("SafeTeaShoes", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("SafeTeaShoes",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("SafeTeaShoes",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 9 && Rand2 < 19)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("PearlyCorset"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("PearlyCorset", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("PearlyCorset",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("PearlyCorset",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 18 && Rand2 < 28)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("WaterFlyingDress"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("WaterFlyingDress", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("WaterFlyingDress",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("WaterFlyingDress",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 27 && Rand2 < 37)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("EvenstarNecklace"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("EvenstarNecklace", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("EvenstarNecklace",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("EvenstarNecklace",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 36 && Rand2 < 46)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("CloakOfEvasion"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("CloakOfEvasion", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("CloakOfEvasion",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("CloakOfEvasion",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 45 && Rand2 < 55)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("FalconKnifeEarrings"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("FalconKnifeEarrings",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("FalconKnifeEarrings",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 54 && Rand2 < 64)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("AnubisCufflinks"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("AnubisCufflinks", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("AnubisCufflinks",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("AnubisCufflinks",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 63 && Rand2 < 73)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("KissaBra"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("KissaBra", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("KissaBra",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("KissaBra",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 72 && Rand2 < 82)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("DivineShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("DivineShield", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("RuinousShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck (2): %d", TempArmorCheck);
						if (CountInv("RuinousShield", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								A_GiveInventory("RuinousShield",1,AAPTR_PLAYER1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("RuinousShield",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
				}
				if (Rand2 > 81 && Rand2 < 91)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("BalrogRing"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("BalrogRing", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("BalrogRing",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("BalrogRing",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 90 && Rand2 < 100)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("DoveRibbon"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("DoveRibbon", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						if (type == 5) // Directly GIVE armor to the player instead of spawning it
						{
							A_GiveInventory("DoveRibbon",1,AAPTR_PLAYER1);
							spawnedaitem++;
						}
						else // Spawn it
						{
							A_SpawnItemEx("DoveRibbon",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							spawnedaitem++;
							Thing_Remove(0);
						}
					}
				}
				if (Rand2 > 99)
				{
					ThinkerIterator Test1 = ThinkerIterator.Create("RuinousShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
					if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
					if (CountInv("RuinousShield", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("DivineShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck (2): %d", TempArmorCheck);
						if (CountInv("DivineShield", AAPTR_PLAYER1) == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								A_GiveInventory("DivineShield",1,AAPTR_PLAYER1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("DivineShield",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
				}
				runtimes++;

				if (dvdsdebug_armordropdisplays) Console.Printf("runtimes: %d / 64", runtimes);
				if (runtimes > 63) { return; }
			}
		}
		else // No spawn
		{
			Thing_Remove(0);
		}
	}
	
	action void A_GiveBuffsPowerup(int powertype = 0, int powertimeadd = 0, int msgpopuptime = 0)
	{
		// powertype = Powerup Type
		// powertimeadd = Powerup Timer Additive
		
		powertimeadd = (powertimeadd * dvds_poweruptimemultiplier) / 100; // Checks Powerup Time Multiplier

		powertimeadd *= 35;
		powertimeadd = powertimeadd * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

		if (powertype == 0) // Light/Infared
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",0,2,powertimeadd);
			if (CallACS("GetBuffTimer",0) > 0) A_GiveInventory("NightVisionSpell",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-7);
		}
		if (powertype == 1) // Invisibility
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",1,2,powertimeadd);
			if (CallACS("GetBuffTimer",1) > 0) A_GiveInventory("InvisiblitySpell",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-1);
		}
		if (powertype == 2) // Flight
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",2,2,powertimeadd);
			if (CallACS("GetBuffTimer",2) > 0) A_GiveInventory("FlightSpell",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-2);
		}
		if (powertype == 3) // Stealth
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",3,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-6);
		}
		if (powertype == 4) // Invulnerability
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",4,2,powertimeadd);
			if (CallACS("GetBuffTimer",4) > 0) A_GiveInventory("InvulnerabilitySpell",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-5);
		}
		if (powertype == 5) // Time Freeze
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",5,2,powertimeadd);
			if (CallACS("GetBuffTimer",5) > 0) A_GiveInventory("AetheriusTimeFreezer",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-4);
		}
		if (powertype == 6) // Fear Aura
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",6,2,powertimeadd);
			if (CallACS("GetBuffTimer",6) > 0) A_GiveInventory("PowerFrightener",1);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-3);
		}
		if (powertype == 7) // Divine Avatar
		{
			if (msgpopuptime <= 0) msgpopuptime = 105;
			CallACS("GetBuffTimer",7,2,powertimeadd);
			if (CallACS("GetBuffTimer",7) > 0) 
			{
				A_GiveInventory("DivineAvatarDoubleFiringSpeed",1);
				A_GiveInventory("DivineAvatarHighJump",1);
			}
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-9);
		}
		if (powertype == 8) // Spreader Aura Lv. 1
		{
			if (CallACS("GetBuffTimer",9) == 0) // If lacking the Lv. 2 Aura, add to the Lv. 1
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",8,2,powertimeadd);
				if (CallACS("GetBuffTimer",8) > 0) A_GiveInventory("SpreaderAura1", 1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,6);
			}
			else // If possessing Lv. 2 aura, give the player the timer divided by 5 or 6 instead and add to the second level aura.
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				if (CallACS("GetBuffTimer",8) > 0) A_TakeInventory("SpreaderAura1",99999);
				CallACS("GetBuffTimer",8,1,0);
				powertimeadd = powertimeadd / random(5,6);
				CallACS("GetBuffTimer",9,2,powertimeadd);
				if (CallACS("GetBuffTimer",9) > 0) A_GiveInventory("SpreaderAura2", 1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,7);
			}
		}
		if (powertype == 9) // Spreader Aura Lv. 2
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",9,2,powertimeadd);
			if (CallACS("GetBuffTimer",9) > 0) A_GiveInventory("SpreaderAura2", 1);
			if (CallACS("GetBuffTimer",8) > 0) { A_TakeInventory("SpreaderAura1", 99999); CallACS("GetBuffTimer",8,1,0); }
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,7);
		}
		if (powertype == 10) // Oomph [double damage from player]
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",10,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,0);
		}
		if (powertype == 11) // Buff [-50% damage to player]
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",11,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,1);
		}
		if (powertype == 12) // Acceleratle [+33% speed for player]
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",12,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,2);
		}
		
		if (powertype == 22) // RadSuit [IronFeet, protection from most damage floors]
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",22,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,-8);
		}
		if (powertype == 23) // Berserk [10x damage on exertion based melee attacks]
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",23,2,powertimeadd);
			CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
			CallACS("MiscVarCheckDECORATE",2045,4);
		}
		if (powertype == 129) // GoE??
		{
			if (msgpopuptime <= 0) msgpopuptime = 70;
			CallACS("GetBuffTimer",129,2,powertimeadd);
		}
	}
	
}

// Custom Powerups/Items that obey the effect of "AetheriusTimeFreezer" that might be used for monsters [buffs/debuffs/cooldowns]
class AetheriusPowerup : Powerup
{
	override void Tick()
	{
		// Powerups cannot exist outside an inventory
		if (Owner == NULL)
		{
			Destroy();
		}

		if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0)
		{
			//Console.Printf("EffectTics: %d", EffectTics);
			EffectTics--;
		}
		if (EffectTics <= 0)
		{
			Destroy();
		}
	}
}

class AetheriusPowerIronFeet : PowerIronFeet
{
	Default
	{
		Powerup.Duration -60;
		Powerup.Color "00 ff 00", 0.125;
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Drowning')
		{
			newdamage = 0;
		}
	}

	override void DoEffect()
	{
		if (Owner.player != NULL)
		{
			Owner.player.mo.ResetAirSupply();
		}
	}
}

class AetheriusPowerStrength : PowerStrength
{
	Default
	{
		Powerup.Duration 1;
		Powerup.Color "ff 00 00", 0.5;
		+INVENTORY.HUBPOWER
	}
	
	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	//===========================================================================
	//
	// APowerStrength :: DoEffect
	//
	//===========================================================================
	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		int Point1 = 300; // 75
		int Point2 = Point1 + 120; // 105
		int increment = random(6,8);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, Increment: %d", EffectTics, Dire, Increment);

		if (Dire == 1)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0) EffectTics += increment;
			if (EffectTics >= Point2) Dire = 2;
		}
		else
		if (Dire == 2)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0) EffectTics -= increment;
			if (EffectTics <= Point1) Dire = 1;
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();

	}

	//===========================================================================
	//
	// APowerStrength :: GetBlend
	//
	//===========================================================================

	override color GetBlend()
	{
		// slowly fade the berserk out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class ShadowSplitCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class HadesTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class HSphereTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -3;
		+INVENTORY.UNTOSSABLE;
	}
}

class PyroDemonTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class ChaingunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class MinigunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class SpidMastChaingunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

// Keeps Sounds/Music active during time Freeze powerups
class AetheriusTimeFreezerMenu : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
		EffectTics = 350;
	}
}
class AetheriusTimeFreezer : AetheriusTimeFreezerMenu
{
	default
	{
		Powerup.Color "8f 8f 8f", 0.5;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0) EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0) EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();

	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class ShieldSpawnerBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTELESTOMP
	}
}

class TensionAuraLightPlayer : AetheriusBaseZSC
{
	default
	{
		-SOLID
		+NOINTERACTION
		+NOTIMEFREEZE
		RenderStyle "Add";
		Alpha 0.01;
		Scale 0.01;
		Radius 1;
		Height 1;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_Warp(AAPTR_PLAYER1,1,0,(0+CallACS("GetPlayerHeight",2)),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
				if (CallACS("GetBuffTimer",1) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",181) == 0) { return ResolveState("NoLight"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 1) { return resolvestate("Spawn5Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 2) { return resolvestate("Spawn20Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 3) { return resolvestate("Spawn50Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 4) { return resolvestate("Spawn100Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 5) { return resolvestate("Spawn250Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 6) { return resolvestate("Spawn500Invis"); }
					if (CallACS("MiscVarCheckDECORATE",181) >= 7) { return resolvestate("Spawn1000Invis"); }
					return resolvestate(null);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",181) == 0) { return ResolveState("NoLight"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 1) { return resolvestate("Spawn5Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 2) { return resolvestate("Spawn20Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 3) { return resolvestate("Spawn50Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 4) { return resolvestate("Spawn100Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 5) { return resolvestate("Spawn250Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) == 6) { return resolvestate("Spawn500Vis"); }
					if (CallACS("MiscVarCheckDECORATE",181) >= 7) { return resolvestate("Spawn1000Vis"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			loop;
		
		NoLight: 
			TNT1 A 1;
			goto Spawn;
		Spawn5Vis: 
			TSNA A 1 Light("TensionAuraLight5"); // { Console.Printf("TensionAuraLight5"); }
			goto Spawn;
		Spawn5Invis: 
			TSNB A 1 Light("TensionAuraInvis5"); // { Console.Printf("TensionAuraInvis5"); }
			goto Spawn;
		Spawn20Vis: 
			TSNA A 1 Light("TensionAuraLight20"); // { Console.Printf("TensionAuraLight20"); }
			goto Spawn;
		Spawn20Invis: 
			TSNB A 1 Light("TensionAuraInvis20"); // { Console.Printf("TensionAuraInvis20"); }
			goto Spawn;
		Spawn50Vis: 
			TSNA A 1 Light("TensionAuraLight50"); // { Console.Printf("TensionAuraLight50"); }
			goto Spawn;
		Spawn50Invis: 
			TSNB A 1 Light("TensionAuraInvis50"); // { Console.Printf("TensionAuraInvis50"); }
			goto Spawn;
		Spawn100Vis: 
			TSNA A 1 Light("TensionAuraLight100"); // { Console.Printf("TensionAuraLight100"); }
			goto Spawn;
		Spawn100Invis: 
			TSNB A 1 Light("TensionAuraInvis100"); // { Console.Printf("TensionAuraInvis100"); }
			goto Spawn;
		Spawn250Vis: 
			TSNA A 1 Light("TensionAuraLight250"); // { Console.Printf("TensionAuraLight250"); }
			goto Spawn;
		Spawn250Invis: 
			TSNB A 1 Light("TensionAuraInvis250"); // { Console.Printf("TensionAuraInvis250"); }
			goto Spawn;
		Spawn500Vis: 
			TSNA A 1 Light("TensionAuraLight500"); // { Console.Printf("TensionAuraLight500"); }
			goto Spawn;
		Spawn500Invis: 
			TSNB A 1 Light("TensionAuraInvis500"); // { Console.Printf("TensionAuraInvis500"); }
			goto Spawn;
		Spawn1000Vis: 
			TSNA A 1 Light("TensionAuraLight1000"); // { Console.Printf("TensionAuraLight1000"); }
			goto Spawn;
		Spawn1000Invis: 
			TSNB A 1 Light("TensionAuraInvis1000"); // { Console.Printf("TensionAuraInvis1000"); }
			goto Spawn;
	}
}

class AetheriusBaseTeleGlitter : Actor
{
	Default
	{
		+NOBLOCKMAP +NOGRAVITY +MISSILE +ZDOOMTRANS
		RenderStyle "Add";
		Damage 0;
	}

	States
	{
		Spawn:
			TGLT A 2 BRIGHT;
			TGLT B 2 BRIGHT A_AccTeleGlitter;
			TGLT C 2 BRIGHT;
			TGLT D 2 BRIGHT A_AccTeleGlitter;
			TGLT E 2 BRIGHT;
			Loop;
	}
	
	//----------------------------------------------------------------------------
	//
	// PROC A_AccTeleGlitter
	//
	//----------------------------------------------------------------------------

	void A_AccTeleGlitter ()
	{
		if (++health > 35)
		{
			Vel.Z *= 1.5;
		}
	}
}

class ShieldPartBase : Actor
{
}
