class PlayerStatItem : Inventory 
{
	int previoushealth;
	int currenthealth; 
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	private class<Inventory> APPackToken, APPackCheck;
	
	override void DoEffect()
	{
		String nm;
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);

		// RadiusDamageFactor
		currenthealth = owner.health;
		double TotalRDFactor = 1.00;
		int CharacterClass = CallACS("CheckCharacterClass");

		double EWShieldRDFactor = 1.00;
		If (weapon is "EvilWarriorShield") 
		{
			EWShieldRDFactor *= 0.67;
			if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldRDFactor *= 0.134;
			if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldRDFactor *= 0.0268;
		}

		double PlayerFistBlockRDFactor = 1.00;
		if (Owner.CountInv("FistPlayerBlock") > 0) PlayerFistBlockRDFactor *= 0.5;
		if (Owner.CountInv("FistPlayerBlock2") > 0) PlayerFistBlockRDFactor *= 0.375;
		if (Owner.CountInv("FistPlayerBlock3") > 0) PlayerFistBlockRDFactor *= 0.25;
		if (Owner.CountInv("FistPlayerBlockExtra") > 0) PlayerFistBlockRDFactor *= 0.1;
		
		double MarineArmorRDFactor = 1.00;
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			if (Owner.CountInv("DSGreenArmorClass") > 0) MarineArmorRDFactor -= 0.01;
			if (Owner.CountInv("DSBlueArmorClass") > 0) MarineArmorRDFactor -= 0.04;
			if (Owner.CountInv("DSStoneArmorClass1") > 0) MarineArmorRDFactor -= 0.15;
			if (Owner.CountInv("DSDiamondArmorClass1") > 0) MarineArmorRDFactor -= 0.075;
			if (Owner.CountInv("DSStoneArmorClass2") > 0) MarineArmorRDFactor -= 0.30;
			if (Owner.CountInv("DSDiamondArmorClass2") > 0) MarineArmorRDFactor -= 0.35;
		}

		double FloraArmorRDFactor = 1.00;
		if (CharacterClass == 2)
		{
			if (Owner.CountInv("WaterFlyingDress") > 0) FloraArmorRDFactor -= 0.20;
			if (Owner.CountInv("BalrogRing") > 0) FloraArmorRDFactor -= 0.25;
		}

		// "Demolition Expert" Perk
		double DemoExpertRDFactor = 1.00;
		DemoExpertRDFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) + (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
		if (DemoExpertRDFactor < 0.025) DemoExpertRDFactor = 0.025;

		// Death Rage [Invulnerablity?]
		double DeathRageRDFactor = 1.0;
		if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageRDFactor = 0.0;
		
		// DQ Buffs
		double DQBuffRDFactor = 1.00;
		if (CallACS("GetBuffTimer",11) > 0) DQBuffRDFactor *= 0.50; // Buff
		if (CallACS("GetBuffTimer",14) > 0) DQBuffRDFactor *= 2.00; // Sap
		if (CallACS("GetBuffTimer",19) > 0) // Sleep
		{
			if(random(1,16) == 1) DQBuffRDFactor *= 5.0; else DQBuffRDFactor *= 1.25;
		}

		// Sceptre Swinging [DEFENSIVE]
		double SceptreDefenseRDFactor = 1.0;
		if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseRDFactor *= 0.95;
		if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseRDFactor *= 0.8333;
		if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseRDFactor *= 0.6666;
		if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseRDFactor *= 0.5;
		if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseRDFactor *= 0.5;
		if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseRDFactor *= 0.25;
		if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseRDFactor *= 0.06125;
		if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseRDFactor *= 0.9375;
		if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseRDFactor *= 0.875;
		if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseRDFactor *= 0.75;
		if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseRDFactor *= 0.5;

		TotalRDFactor = 1.00
									* EWShieldRDFactor
									* PlayerFistBlockRDFactor
									* MarineArmorRDFactor
									* FloraArmorRDFactor
									* DemoExpertRDFactor
									* DeathRageRDFactor
									* DQBuffRDFactor
									* SceptreDefenseRDFactor;

		double BaseIgnoreFactor = 0.0;
		double DefenseIgnoreFactor = 0.0;
		playeractor.PlayerDefenseIgnoreFactor = playeractor.PlayerDefenseIgnoreFactor;
		if (playeractor.PlayerDefenseIgnoreFactor > 0.00)
		{
			BaseIgnoreFactor = (1.0 - TotalRDFactor);
			DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
			TotalRDFactor += DefenseIgnoreFactor;
		}
		owner.RadiusDamageFactor = TotalRDFactor;
		if (dvdsdebug_playerdmgdisplays > 0 && currenthealth < previoushealth) 
		{
			Console.Printf("    \czRADIUSDAMAGE\c-: \cyTotalRDFactor\c- = \cy%8f\c-, EWShieldRDFactor = %8f, PlayerFistBlockRDFactor = %8f, MarineArmorRDFactor = %8f, FloraArmorRDFactor = %8f, DemoExpertRDFactor = %8f, DeathRageRDFactor = %8f, DQBuffRDFactor = %8f, SceptreDefenseRDFactor = %8f", 
			TotalRDFactor, 
			EWShieldRDFactor, PlayerFistBlockRDFactor, 
			MarineArmorRDFactor, FloraArmorRDFactor, 
			DemoExpertRDFactor, DeathRageRDFactor, 
			DQBuffRDFactor, SceptreDefenseRDFactor);
		}

		// Mass
		int TotalMass = 100;
		if (CharacterClass == 0) // Deggaris
		{
			TotalMass = 116;
			TotalMass += (CallACS("MiscVarCheckDECORATE",32) / 9);		// Defense [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",35) / 15);		// Strength [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",34) / 27);		// Sorcery [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",36) / 21);		// Therapeusis [Seeds]
			
			if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
			if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
			if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
			if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
			if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
			if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
			
			// Add a point of mass for every 8 levels for Deggaris [max of 25]
			TotalMass = TotalMass + (CallACS("StatCheck",0) / 8);
		}
		if (CharacterClass == 1) // Illucia
		{
			TotalMass = 96;
			TotalMass += (CallACS("MiscVarCheckDECORATE",32) / 12);		// Defense [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",35) / 18);		// Strength [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",34) / 21);		// Sorcery [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",36) / 15);		// Therapeusis [Seeds]
			
			if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
			if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
			if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
			if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
			if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
			if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
			
			// Add a point of mass for every 10 levels for Illucia [max of 20]
			TotalMass = TotalMass + (CallACS("StatCheck",0) / 10);
		}
		if (CharacterClass == 2) // Flora
		{
			TotalMass = 68;
			TotalMass += (CallACS("MiscVarCheckDECORATE",32) / 15);		// Defense [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",35) / 21);		// Strength [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",34) / 15);		// Sorcery [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",36) / 9);		// Therapeusis [Seeds]

			if (Owner.CountInv("SafeTeaShoes") > 0)						TotalMass += 1;
			if (Owner.CountInv("PearlyCorset") > 0)						TotalMass += 3;
			if (Owner.CountInv("WaterFlyingDress") > 0)				TotalMass += 4;
			if (Owner.CountInv("EvenstarNecklace") > 0)				TotalMass += 1;
			if (Owner.CountInv("CloakofEvasion") > 0)					TotalMass += 3;
			if (Owner.CountInv("AnubisCufflinks") > 0)				TotalMass += 2;
			if (Owner.CountInv("KissaBra") > 0)								TotalMass += 1;
			if (Owner.CountInv("BalrogRing") > 0)							TotalMass += 1;
			if (Owner.CountInv("DoveRibbon") > 0)							TotalMass += 2;
			if (Owner.CountInv("DivineShield") > 0)					{ TotalMass += 10; TotalMass *= 2; }
			if (Owner.CountInv("RuinousShield") > 0)				{ TotalMass -= 10; TotalMass /= 2; }

			if (Owner.CountInv("DSSpiritualExoskin1") > 0)	{ TotalMass += 4; TotalMass = TotalMass * 102 / 100;}
			if (Owner.CountInv("DSSpiritualExoskin2") > 0)	{ TotalMass += 12; TotalMass = TotalMass * 106 / 100;}
			if (Owner.CountInv("DSSpiritualExoskin3") > 0)	{ TotalMass += 30; TotalMass = TotalMass * 115 / 100;}

			if (Owner.CountInv("ShieldDefense") > 0)				{ TotalMass = TotalMass * 5 / 4; }
			if (Owner.CountInv("ShieldDefense2") > 0)				{ TotalMass = TotalMass * 3 / 2; }
			if (Owner.CountInv("ShieldDefense3") > 0)				{ TotalMass = TotalMass * 15 / 8; }
			
			// Add a point of mass for every 12 levels for Flora [max of 16/17]
			TotalMass = TotalMass + (CallACS("StatCheck",0) / 12);
		}
		if (CharacterClass == 8) // Ailish
		{
			TotalMass = 66;
			TotalMass += (CallACS("MiscVarCheckDECORATE",32) / 9);		// Defense [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",35) / 15);		// Strength [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",34) / 21);		// Sorcery [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",36) / 21);		// Therapeusis [Seeds]

			// Add a point of mass for every 13 levels for Ailish [max of 15]
			TotalMass = TotalMass + (CallACS("StatCheck",0) / 13);
		}
		if (CharacterClass == 9) // Petra
		{
			TotalMass = 70;
			TotalMass += (CallACS("MiscVarCheckDECORATE",32) / 9);		// Defense [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",35) / 21);		// Strength [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",34) / 23);		// Sorcery [Seeds]
			TotalMass += (CallACS("MiscVarCheckDECORATE",36) / 13);		// Therapeusis [Seeds]

			// Add a point of mass for every 8 levels for Petra [max of 22]
			TotalMass = TotalMass + (CallACS("StatCheck",0) / 8);
		}
		
		// Buff Timers
		if (CallACS("GetBuffTimer",4) > 0) TotalMass *= 128;	// 128x Mass when Invulnerable
		if (CallACS("GetBuffTimer",7) > 0) TotalMass *= 4;		// 4x Mass when using Divine Avatar
		if (CallACS("GetBuffTimer",11) > 0) TotalMass *= 2;		// 2x Mass when using Buff

		// Sauron Items
		if (Owner.CountInv("SauronHelmet") > 0)						{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
		if (Owner.CountInv("SauronGauntletsIllucia") > 0)	{ TotalMass += 6;  TotalMass = TotalMass * 106 / 100; }
		if (Owner.CountInv("SauronGauntletsFlora") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 104 / 100; }
		if (Owner.CountInv("SauronGauntlets") > 0)				{ TotalMass += 5;  TotalMass = TotalMass * 105 / 100; }
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 3;  TotalMass = TotalMass * 103 / 100; }
		nm = "SauronGauntletsPetra"; APPackCheck = nm;
		if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 7;  TotalMass = TotalMass * 107 / 100; }
		if (Owner.CountInv("TheOneRing") > 0)							{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
		
		// Fist Blocks
		if (Owner.CountInv("FistPlayerBlock") > 0)					TotalMass = TotalMass * 2;
		if (Owner.CountInv("FistPlayerBlock2") > 0)					TotalMass = TotalMass * 8 / 3;
		if (Owner.CountInv("FistPlayerBlock3") > 0)					TotalMass = TotalMass * 4;

		// Final Calculations
		owner.mass = TotalMass;
		CallACS("SetMiscellaneousVar",201,TotalMass); // Set to the Total Mass
		//Console.Printf("    Calculated Mass: %d [Real Mass: %d]", TotalMass, owner.mass);

		
		// JumpZ
		// Character
		double CharacterJumpZ = 8.0;
		if (CharacterClass == 0) CharacterJumpZ = 7.5;
		if (CharacterClass == 1) CharacterJumpZ = 8.5;
		if (CharacterClass == 2) CharacterJumpZ = 9.0;
		if (CharacterClass == 8) CharacterJumpZ = 7.0;
		if (CharacterClass == 9) CharacterJumpZ = 9.5;

		// Level
		double LevelJumpZ = 1.00;
		int PlayerLevel = CallACS("StatCheck",0);
		if (CharacterClass == 0) LevelJumpZ += (PlayerLevel * 0.00226);
		if (CharacterClass == 1) LevelJumpZ += (PlayerLevel * 0.00256);
		if (CharacterClass == 2) LevelJumpZ += (PlayerLevel * 0.00276);
		if (CharacterClass == 8) LevelJumpZ += (PlayerLevel * 0.00216);
		if (CharacterClass == 9) LevelJumpZ += (PlayerLevel * 0.00296);

		// AGL
		double AGLJumpZ = 1.00;
		int PlayerAGL = CallACS("StatCheck",3);
		if (CharacterClass == 0) AGLJumpZ += (PlayerAGL * 0.00076);
		if (CharacterClass == 1) AGLJumpZ += (PlayerAGL * 0.00086);
		if (CharacterClass == 2) AGLJumpZ += (PlayerAGL * 0.00093);
		if (CharacterClass == 8) AGLJumpZ += (PlayerAGL * 0.00070);
		if (CharacterClass == 9) AGLJumpZ += (PlayerAGL * 0.00100);

		// Armor
		double ArmorJumpZ = 1.00;
		if (CharacterClass == 2)
		{
			if (Owner.CountInv("SafeTeaShoes") > 0) 				ArmorJumpZ += 0.10;
			if (Owner.CountInv("PearlyCorset") > 0) 				ArmorJumpZ += 0.005;
			if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorJumpZ += 0.005;
			if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorJumpZ += 0.0125;
			if (Owner.CountInv("CloakofEvasion") > 0)				ArmorJumpZ += 0.025;
			if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorJumpZ += 0.0125;
			if (Owner.CountInv("KissaBra") > 0)							ArmorJumpZ += 0.025;
			if (Owner.CountInv("DivineShield") > 0)					ArmorJumpZ += 0.00625;
			if (Owner.CountInv("BalrogRing") > 0)						ArmorJumpZ += 0.0125;
			if (Owner.CountInv("DoveRibbon") > 0)						ArmorJumpZ += 0.05;
			if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorJumpZ += 0.0375;
		}
		else
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			if (Owner.CountInv("DSGreenArmorClass") > 0)		ArmorJumpZ += 0.0334;
			if (Owner.CountInv("DSBlueArmorClass") > 0)			ArmorJumpZ += 0.05;
			if (Owner.CountInv("DSStoneArmorClass1") > 0)		ArmorJumpZ += 0.0667;
			if (Owner.CountInv("DSDiamondArmorClass1") > 0)	ArmorJumpZ += 0.09;
			if (Owner.CountInv("DSStoneArmorClass2") > 0)		ArmorJumpZ += 0.0833;
			if (Owner.CountInv("DSDiamondArmorClass2") > 0)	ArmorJumpZ += 0.095;
		}
		
		double SauronArmorJumpZ = 1.00;
		if (Owner.CountInv("SauronHelmet") > 0)						SauronArmorJumpZ -= 0.10;
		if (Owner.CountInv("SauronGauntlets") > 0)				SauronArmorJumpZ -= 0.05;
		if (Owner.CountInv("SauronGauntletsIllucia") > 0)	SauronArmorJumpZ -= 0.05;
		if (Owner.CountInv("SauronGauntletsFlora") > 0)		SauronArmorJumpZ -= 0.05;
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
		nm = "SauronGauntletsPetra"; APPackCheck = nm;
		if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
		if (Owner.CountInv("TheOneRing") > 0)							SauronArmorJumpZ += 0.25;

		double BuffJumpZ = 1.00;
		if (CallACS("GetBuffTimer",12) > 0) BuffJumpZ += 0.25;
		if (CallACS("GetBuffTimer",15) > 0) BuffJumpZ -= 0.25;

		double SceptreJumpZ = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreJumpZ -= 0.20;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreJumpZ -= 0.10;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreJumpZ -= 0.05;

		double DivineAvatarJumpZ = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarJumpZ *= 2.00;

		double PerkFactorJumpZ = 1.0;
		PerkFactorJumpZ += ((CallACS("MiscVarCheckDECORATE",10009) * 0.05) + (CallACS("MiscVarCheckDECORATE",10010) * 0.125));

		double StaminaJumpZ = 1.0;
		int StaminaLevel;
		int StaminaMax = 10000;
		if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
		StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;
		if (GetCVar("dvds_staminaaffectsspeed") > 0)
		{
			if (StaminaLevel < 157) StaminaJumpZ = 0.6625;
			if (StaminaLevel > 156 && StaminaLevel < 626) StaminaJumpZ = 0.7375;
			if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaJumpZ = 0.805;
			if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaJumpZ = 0.865;
			if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaJumpZ = 0.9175;
			if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaJumpZ = 0.9625;
			if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaJumpZ = 1.00;
			if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaJumpZ = 1.0375;
			if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaJumpZ = 1.0825;
			if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaJumpZ = 1.135;
			if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaJumpZ = 1.195;
			if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaJumpZ = 1.2625;
			if (StaminaLevel > 48750) StaminaJumpZ = 1.3375;
		}

		double FistBlockJumpZ = 1.00;
		if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockJumpZ = 0.75;
		if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockJumpZ = 0.825;
		if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockJumpZ = 0.90;
		
		double TotalJumpZ = CharacterJumpZ
											* LevelJumpZ
											* AGLJumpZ
											* ArmorJumpZ
											* SauronArmorJumpZ
											* BuffJumpZ
											* SceptreJumpZ
											* PerkFactorJumpZ
											* StaminaJumpZ
											* FistBlockJumpZ
											* DivineAvatarJumpZ;

		int TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
		PlayerPawn(Owner).JumpZ = TotalJumpZ;
		CallACS("SetMiscellaneousVar",200,TrueJumpHeight); // Set to the True Jump Height
		if (GetCVar("dvdsdebug_showmoveinformation") > 0)
		{
			Console.Printf("    \cwTotalJumpZ:\c- \cw%8f\c- [\cxTrueJumpHeight:\c- \cx%d\c-], CharacterJumpZ: %8f, LevelJumpZ: %8f, AGLJumpZ: %8f, ArmorJumpZ: %8f, SauronArmorJumpZ: %8f, BuffJumpZ: %8f, SceptreJumpZ: %8f, PerkFactorJumpZ: %8f, StaminaJumpZ: %8f, FistBlockJumpZ: %8f, DivineAvatarJumpZ: %8f", 
													TotalJumpZ, TrueJumpHeight,
													CharacterJumpZ, LevelJumpZ, 
													AGLJumpZ, ArmorJumpZ, 
													SauronArmorJumpZ, BuffJumpZ, 
													SceptreJumpZ, PerkFactorJumpZ, 
													StaminaJumpZ, FistBlockJumpZ, 
													DivineAvatarJumpZ);
		}
		
		previoushealth = owner.health;
		super.DoEffect();
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int InvisiblityLevel = 0;
		double InvisFactor = 1.0;
		double InvisBaseAmt = 1.0;
		if (Owner.CountInv("InvisiblitySpell") > 0)
		{
			if (random(1,100) <= 35)
			{
				InvisiblityLevel++;
				if (random(1,100) <= 25)
				{
					InvisiblityLevel++;
					if (random(1,100) <= 20)
					{
						InvisiblityLevel++;
						if (random(1,100) <= 10)
						{
							InvisiblityLevel++;
						}
					}
				}
			}
		}
		int InvisIgnored = random(1,3);

		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 10.00;
			if (CharacterClass == 0) LVLFactor = 1.00 + (PlayerLevel * .00117);				// Deggaris	(1 LVL = +0.117% Damage Dealt)
			if (CharacterClass == 1) LVLFactor = 1.00 + (PlayerLevel * .000863);			// Illucia	(1 LVL = +0.0863% Damage Dealt)
			if (CharacterClass == 2) LVLFactor = 1.00 + (PlayerLevel * .0011577);			// Flora		(1 LVL = +0.11577% Damage Dealt)
			if (CharacterClass == 8) LVLFactor = 1.00 + (PlayerLevel * .000825);			// Ailish		(1 LVL = +0.0825% Damage Dealt)
			if (CharacterClass == 9) LVLFactor = 1.00 + (PlayerLevel * .001075);			// Petra		(1 LVL = +0.1075% Damage Dealt)
			if (LVLfactor > LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Strength
			int PlayerSTR = CallACS("StatCheck",7);
			double STRfactor = 1.0; double STRfactorclamp = 10.00;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) STRfactor = 1.00 + (PlayerSTR * .006667);			// Deggaris	(1 STR = +0.6667~% Damage Dealt)
				if (CharacterClass == 1) STRfactor = 1.00 + (PlayerSTR * .005);					// Illucia	(1 STR = +0.5% Damage Dealt)
				if (CharacterClass == 2) STRfactor = 1.00 + (PlayerSTR * .003334);			// Flora		(1 STR = +0.3334~% Damage Dealt)
				if (CharacterClass == 8) STRfactor = 1.00 + (PlayerSTR * .003);					// Ailish		(1 STR = +0.3% Damage Dealt)
				if (CharacterClass == 9) STRfactor = 1.00 + (PlayerSTR * .00625);				// Petra		(1 STR = +0.625% Damage Dealt)
			}
			if (STRfactor > STRfactorclamp) STRfactor = STRfactorclamp;

			// Check Sorcery
			int PlayerSOR = CallACS("StatCheck",6);
			double SORfactor = 1.0; double SORfactorclamp = 10.00;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) SORfactor = 1.00 + (PlayerSOR * .003334);			// Deggaris	(1 SOR = +0.3334~% Damage Dealt)
				if (CharacterClass == 1) SORfactor = 1.00 + (PlayerSOR * .005);					// Illucia	(1 SOR = +0.5% Damage Dealt)
				if (CharacterClass == 2) SORfactor = 1.00 + (PlayerSOR * .006667);			// Flora		(1 SOR = +0.6667~% Damage Dealt)
				if (CharacterClass == 8) SORfactor = 1.00 + (PlayerSOR * .00625);				// Ailish		(1 SOR = +0.625% Damage Dealt)
				if (CharacterClass == 9) SORfactor = 1.00 + (PlayerSOR * .003);					// Petra		(1 SOR = +0.3% Damage Dealt)
			}
			if (SORfactor > SORfactorclamp) SORfactor = SORfactorclamp;

			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (GetCVar("dvds_musou_powertripmode") == 1) MusouFactor = 5.0;
			if (GetCVar("dvds_musou_powertripmode") == 2) MusouFactor = 10.0;

			// Hellcore Level Checker
			double HellcoreLevelFactor = 1.0;
			int HellcoreType = 0; 
			int HellcoreLevel = 0;
			// Slot 4 Hellcore Weapons
			if (damageType == 'ImpClaw') HellcoreType = 96;
			if (damageType == 'DarkImpClaw') HellcoreType = 97;
			if (damageType == 'CacodemonEye') HellcoreType = 98;
			if (damageType == 'CacolanternEye') HellcoreType = 99;
			if (damageType == 'AbaddonEye') HellcoreType = 100;
			// Slot 5 Hellcore Weapons
			if (damageType == 'KnightFist') HellcoreType = 101;
			if (damageType == 'BaronFist') HellcoreType = 102;
			if (damageType == 'BelphegorFist') HellcoreType = 103;
			if (damageType == 'BruiserFist') HellcoreType = 104;
			if (damageType == 'ArchonFist') HellcoreType = 105;
			if (damageType == 'PyroFist') HellcoreType = 106;
			// Slot 6 Hellcore Weapons
			if (damageType == 'IncarnateSkull') HellcoreType = 107;
			if (damageType == 'ArchvileHand') HellcoreType = 108;
			if (damageType == 'DiabloistHand') HellcoreType = 109;
			if (damageType == 'BalrogFist') HellcoreType = 110;
			if (damageType == 'ElementalEye') HellcoreType = 111;
			if (damageType == 'OverlordEye') HellcoreType = 112;
			if (HellcoreType != 0)
			{
				HellcoreLevel = CallACS("MiscVarCheckDECORATE",HellcoreType);
				if (HellcoreLevel > 0)
				{
					double HellcoreBaseMulti = 1.5;
					if (HellcoreLevel >= 1) HellcoreLevelFactor = HellcoreBaseMulti;
					if (HellcoreLevel >= 2) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 3) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 4) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 5) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 6) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 7) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 8) HellcoreLevelFactor *= HellcoreBaseMulti;
				}
				//Console.Printf("    (input: HellcoreLevelFactor [%d, LVL %d] = %10f)", HellcoreType, HellcoreLevel, HellcoreLevelFactor);
			}

			// "Soul Mastery" Perk [Hellcore damage ONLY]
			double SoulMasteryFactor = 1.0;
			if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
			    damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
			    damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
			{
				SoulMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10033) * .10) + (CallACS("MiscVarCheckDECORATE",10034) * .25));
			}
			
			// Sauron's Gauntlets
			double SauronGauntletsFactor = 1.0;
			if (Owner.CountInv("SauronGauntletsItem") > 0) SauronGauntletsFactor = 1.25;

			// Cursed Shield
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 0.390625;
				if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
						damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
						damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
				{
					CursedShieldFactor *= 2.56;
				}
			}
			
			// "MagiUp" and "Wand/Staff Mastery" Perks [Magic ONLY]
			double MagiUpATKFactor = 1.0;
			double WandStaffMasteryFactor = 1.0;
			if (damageType == 'Magic')
			{
				MagiUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10003) * .075) + (CallACS("MiscVarCheckDECORATE",10004) * .1875)); 
				WandStaffMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10053) * .0625) + (CallACS("MiscVarCheckDECORATE",10054) * .15625)); 
			}
			
			// Clearer of Mind "Perk"
			double ClearOfMindFactor = 1.0;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				ClearOfMindFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10055) * .0375) + (CallACS("MiscVarCheckDECORATE",10056) * .09375)); 
			}
			
			// "StamUp" Perk [Melee Oriented Attacks]
			double StamUpATKFactor = 1.0;
			if (damageType == 'Melee' || 
					damageType == 'Trample' || 
					damageType == 'Stomp' || 
					damageType == 'Sceptre' || 
					damageType == 'Gauntlets' || 
					damageType == 'Fist' || 
					damageType == 'Kick' || 
					damageType == 'Chainsaw' )
			{
				StamUpATKFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10005) * .075) + (CallACS("MiscVarCheckDECORATE",10006) * .1875)); 
			}
			
			// Death Rage
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0)
			{
				if (CallACS("MiscVarCheckDECORATE",10043) == 1) DeathRageFactor = 2.5;
				if (CallACS("MiscVarCheckDECORATE",10043) == 2) DeathRageFactor = 3.75;
				if (CallACS("MiscVarCheckDECORATE",10043) == 3) DeathRageFactor = 5.0;
			}
			
			// Strife's "Accuracy" Upgrades
			double StrifeAccuracyFactor = 1.0;
			StrifeAccuracyFactor = 1.00 + (CallACS("MiscVarCheckDECORATE",318) * .005);
			
			// Doomspell Bonuses
			double DoomSpellFactor = 1.0;
			if (CharacterClass == 0) // Deggaris
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.5;
				if (damageType == 'Ice') DoomSpellFactor = 1.0;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.0;
				if (damageType == 'Acid') DoomSpellFactor = 3.2;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 3.2;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CharacterClass == 1) // Illucia
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.333;
				if (damageType == 'Fire') DoomSpellFactor = 1.0;
				if (damageType == 'Holy') DoomSpellFactor = 0.75;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 3.2;
				if (damageType == 'Acid') DoomSpellFactor = 2.1;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 2.1;
				if (damageType == 'Sigil') DoomSpellFactor = 1.0625;
			}
			if (CharacterClass == 2) // Flora
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 4.0;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CharacterClass == 8) // Ailish
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.5;
				if (damageType == 'Fire') DoomSpellFactor = 3.2;
				if (damageType == 'Holy') DoomSpellFactor = 3.25;
				if (damageType == 'Ice') DoomSpellFactor = 3.2;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			if (CharacterClass == 9) // Petra
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.167;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 3.75;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.25;
			}
			
			// Invisibility [OFFENSIVE]
			double InvisFactor = 1.0;
			double InvisBaseAmt = 1.25;
			if (InvisiblityLevel >= 1)
			{
				InvisFactor *= InvisBaseAmt;
				if (InvisiblityLevel >= 2)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 3)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 4)
						{
							InvisFactor *= InvisBaseAmt;
						}
					}
				}
			}
			
			// Dashing Bonus
			double DashingFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",166) > 0)
			{
				if (damageType == 'Sceptre') DashingFactor = 1.75;
				if (damageType == 'Gauntlets') DashingFactor = 1.625;
				if (damageType == 'Fist' || damageType == 'Kick') DashingFactor = 1.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Chainsaw') DashingFactor = 1.25;
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (damageType == 'Fist' || damageType == 'Gauntlets')
			{
				if (Owner.CountInv("UppercutATKBonus1") > 0) UppercutFactor = 1.25;
				if (Owner.CountInv("UppercutATKBonus2") > 0) UppercutFactor = 1.625;
			}

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Sceptre' || damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw')
			{
				if (Owner.CountInv("LandingDMGBonus") > 0) LandingFactor = 2.0;
				if (Owner.CountInv("LandingDMGBonus2") > 0) LandingFactor = 3.5;
				if (Owner.CountInv("LandingDMGBonus3") > 0) LandingFactor = 6.5625;
				if (Owner.CountInv("LandingDMGBonus4") > 0) LandingFactor = 13.9453125;
			}

			// Tension Level [OFFENSIVE]
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = GetCVar("dvds_allowtension");
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 1.7;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 3;			// "20" Tension
				if (TensionLevel == 3) TensionFactor = 5;			// "50" Tension
				if (TensionLevel == 4) TensionFactor = 7.5;		// "100" Tension
				if (TensionLevel == 5) TensionFactor = 11.25;	// "250" Tension
				if (TensionLevel == 6) TensionFactor = 17.5;	// "500" Tension
				if (TensionLevel == 7) TensionFactor = 25;		// "1000" Tension
			}
			
			// Flora Armor
			double FloraArmorFactor = 1.0;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("EvenstarNecklace") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
					if (damageType == 'Fire') FloraArmorFactor += 0.5;
					if (damageType == 'Ice') FloraArmorFactor += 0.5;
					if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') FloraArmorFactor += 0.5;
					if (damageType == 'Holy') FloraArmorFactor += 0.5;
				}
				if (Owner.CountInv("DoveRibbon") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
				}
				if (Owner.CountInv("FalconKnifeEarrings") > 0)
				{
					FloraArmorFactor *= 2.0;
					if (damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick') FloraArmorFactor *= 1.3333;
				}
			}
			
			// The One Ring [OFFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 2.5;

			// DQ Buffs [OFFENSIVE]
			double DQBuffFactor = 1.0;
			if (CallACS("GetBuffTimer",10) > 0) DQBuffFactor *= 2.0; // Oomph
			if (CallACS("GetBuffTimer",13) > 0) DQBuffFactor *= 0.5; // Blunt
			if (CallACS("GetBuffTimer",19) > 0) // Blind
			{
				if (random(1,16) == 1) DQBuffFactor *= 0.2; else DQBuffFactor *= 0.8; 
			}

			// Divine Avatar [OFFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 4.0;

			// GoE? [OFFENSIVE]
			double GoEFactor = 1.0;
			if (CallACS("GetBuffTimer",129) > 0) GoEFactor = 10.0;

			double TOTALFactor = LVLfactor 
													* STRfactor 
													* SORfactor 
													* MusouFactor 
													* MagiUpATKFactor 
													* WandStaffMasteryFactor 
													* StamUpATKFactor 
													* DeathRageFactor 
													* StrifeAccuracyFactor 
													* ClearOfMindFactor 
													* HellcoreLevelFactor
													* SoulMasteryFactor
													* SauronGauntletsFactor
													* CursedShieldFactor
													* DoomSpellFactor
													* InvisFactor
													* DashingFactor
													* UppercutFactor
													* LandingFactor
													* TensionFactor
													* FloraArmorFactor
													* RingFactor
													* DQBuffFactor
													* DivineAvatarFactor
													* GoEFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (dvdsdebug_actordmgdisplays > 0 && damage > 0) 
			{
				Console.Printf("    (\czPlayer Offensive Input\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, STRfactor [%d] = %8f, SORfactor [%d] = %8f, MusouFactor = %8f, StamUpATKFactor = %8f, MagiUpATKFactor = %8f, WandStaffMasteryFactor = %8f, DeathRageFactor = %8f, StrifeAccuracyFactor = %8f, ClearOfMindFactor = %8f, HellcoreLevelFactor = %8f, SoulMasteryFactor = %8f, SauronGauntletsFactor = %8f, CursedShieldFactor = %8f, DoomSpellFactor = %8f, InvisFactor = %8f, DashingFactor = %8f, UppercutFactor = %8f, LandingFactor = %8f, TensionFactor = %8f, FloraArmorFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, damage, newdamage, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerSTR, STRfactor, PlayerSOR, SORfactor, 
				MusouFactor, StamUpATKFactor, MagiUpATKFactor, 
				WandStaffMasteryFactor, DeathRageFactor, StrifeAccuracyFactor, 
				ClearOfMindFactor, HellcoreLevelFactor, SoulMasteryFactor, 
				SauronGauntletsFactor, CursedShieldFactor, DoomSpellFactor, 
				InvisFactor, DashingFactor, UppercutFactor, 
				LandingFactor, TensionFactor, FloraArmorFactor, 
				RingFactor, DQBuffFactor, DivineAvatarFactor, GoEFactor);
			}
		}

		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int predmg = playeractor.mobjdmg;
			double factorchange = 1.0 * damage / predmg;
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\czplayer-StatItem input [STEP 3 (\cwsuper.DamageMobj\cz)]\c-: \cypredmg\c- / \cydamage\c- = \cy%d\c- /  \cy%d\c-, \cafactorchange\c- = \ca%8f\c-)", predmg, damage, factorchange);

			// ****************************************
			// *DEFENSE THAT CAN BE IGNORED GOES FIRST*
			// ****************************************
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 0.05;
			if (CharacterClass == 0) LVLFactor = 1.00 - (PlayerLevel * .00117);				// Deggaris	(1 LVL = -0.117% Damage Taken)
			if (CharacterClass == 1) LVLFactor = 1.00 - (PlayerLevel * .0009707);			// Illucia	(1 LVL = -0.09707% Damage Taken)
			if (CharacterClass == 2) LVLFactor = 1.00 - (PlayerLevel * .0007633);			// Flora		(1 LVL = -0.07633% Damage Taken)
			if (CharacterClass == 8) LVLFactor = 1.00 - (PlayerLevel * .000800);			// Ailish		(1 LVL = -0.0800% Damage Taken)
			if (CharacterClass == 9) LVLFactor = 1.00 - (PlayerLevel * .0010875);			// Petra		(1 LVL = -0.10875% Damage Taken)
			if (LVLfactor < LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Defense
			int PlayerDEF = CallACS("StatCheck",4);
			double DEFfactor = 1.0; double DEFfactorclamp = 0.05;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) DEFfactor = 1.00 - (PlayerDEF * .006667);			// Deggaris	(1 DEF = -0.6667~% Physical Damage)
				if (CharacterClass == 1) DEFfactor = 1.00 - (PlayerDEF * .005);					// Illucia	(1 DEF = -0.5000% Physical Damage)
				if (CharacterClass == 2) DEFfactor = 1.00 - (PlayerDEF * .003334);			// Flora		(1 DEF = -0.3334~% Physical Damage)
				if (CharacterClass == 8) DEFfactor = 1.00 - (PlayerDEF * .003);					// Ailish		(1 DEF = -0.3000% Physical Damage)
				if (CharacterClass == 9) DEFfactor = 1.00 - (PlayerDEF * .00725);				// Petra		(1 DEF = -0.7250% Physical Damage)
			}
			if (DEFfactor < DEFfactorclamp) DEFfactor = DEFfactorclamp;

			// Check Therapeusis
			int PlayerTHE = CallACS("StatCheck",8);
			double THEfactor = 1.0; double THEfactorclamp = 0.05;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) THEfactor = 1.00 - (PlayerTHE * .003334);			// Deggaris	(1 THE = -0.3334~% Magic Damage)
				if (CharacterClass == 1) THEfactor = 1.00 - (PlayerTHE * .005);					// Illucia	(1 THE = -0.5000% Magic Damage)
				if (CharacterClass == 2) THEfactor = 1.00 - (PlayerTHE * .006667);			// Flora		(1 THE = -0.6667~% Magic Damage)
				if (CharacterClass == 8) THEfactor = 1.00 - (PlayerTHE * .00725);				// Ailish		(1 THE = -0.7250% Magic Damage)
				if (CharacterClass == 9) THEfactor = 1.00 - (PlayerTHE * .003);					// Petra		(1 THE = -0.3000% Magic Damage)
			}
			if (THEfactor < THEfactorclamp) THEfactor = THEfactorclamp;
			
			// "LifeUp" Perk
			double LifeUpDEFFactor = 1.0;
			LifeUpDefFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10001) * .075) + (CallACS("MiscVarCheckDECORATE",10002) * .1875)); 

			// "Demolition Expert" Perk
			double DemoExpertFactor = 1.00;
			if (damageType == 'Explosive')
			{
				DemoExpertFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom(0.07,0.14)) - (CallACS("MiscVarCheckDECORATE",10026) * (frandom(0.07,0.14) * 5 / 2))); 
				if (DemoExpertFactor < 0.025) DemoExpertFactor = 0.025;
			}

			// Strife's "Stamina" Upgrades
			double StrifeStaminaFactor = 1.0;
			StrifeStaminaFactor = 1.00 - (CallACS("MiscVarCheckDECORATE",317) * .005);
			
			// Invisibility [DEFENSIVE] [if ignored] (33% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored == 3)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) UppercutFactor = 0.80;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) UppercutFactor = 0.615;

			// Kicking Bonus
			double KickingFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) KickingFactor = 0.75;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) KickingFactor = 0.5625;

			// Kicking Bonus
			double MartArtFactor = 1.0;
			if (Owner.CountInv("MartArtsMaster1") > 0)
			{
				MartArtFactor *= 0.80;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.90;
			}
			if (Owner.CountInv("MartArtsMaster2") > 0)
			{
				MartArtFactor *= 0.50;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.75;
			}

			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldFactor *= 0.0268;
			}

			double PlayerFistBlockFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) 
			{
				PlayerFistBlockFactor *= 0.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.5;
			}
			if (Owner.CountInv("FistPlayerBlock2") > 0) 
			{
				PlayerFistBlockFactor *= 0.375;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.375;
			}
			if (Owner.CountInv("FistPlayerBlock3") > 0) 
			{
				PlayerFistBlockFactor *= 0.25;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.25;
			}
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.1;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseFactor = 1.0;
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseFactor *= 0.125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseFactor *= 0.5;

			// Sauron Equipment [DEFENSIVE]
			double SauronEquipFactor = 1.0;
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SauronEquipFactor *= 0.75; // General Reduction
				if (damageType == 'Bullet') SauronEquipFactor *= 0.833334;
			}

			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 0.4;

			// DQ Buffs [DEFENSIVE]
			double DQBuffFactor = 1.0;
			if (CallACS("GetBuffTimer",11) > 0) DQBuffFactor *= 0.50; // Buff
			if (CallACS("GetBuffTimer",14) > 0) DQBuffFactor *= 2.00; // Sap
			if (CallACS("GetBuffTimer",19) > 0) // Sleep
			{
				if(random(1,16) == 1) DQBuffFactor *= 5.0; else DQBuffFactor *= 1.25;
			}

			//********************************************************************
			// TOTALFactor is for defenses that can be ignored by various attacks
			//********************************************************************
			double TOTALFactor = 1.0
													* LVLfactor 
													* DEFfactor 
													* THEfactor 
													* LifeUpDEFFactor 
													* DemoExpertFactor 
													* StrifeStaminaFactor
													* InvisFactor
													* UppercutFactor
													* KickingFactor
													* MartArtFactor
													* EWShieldFactor
													* PlayerFistBlockFactor
													* SceptreDefenseFactor
													* SauronEquipFactor
													* RingFactor
													* DQBuffFactor;
													
			// The following allows TOTALFactor to be affected by varying types of (Partial)Defense-Ignoring attacks.
			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor.PlayerDefenseIgnoreFactor > 0.00 && TOTALFactor <= 1.00)
			{
				BaseIgnoreFactor = (1.0 - TOTALFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\czplayer-StatItem input [STEP 4]\c-: \caDmgIgnFctr\c- = \ca%8f\c- / \cy%8f\c-, \cwPlyrDmgIgnFctr\c- = \cw%8f\c- (StatItem Actor)", 
					DefenseIgnoreFactor, BaseIgnoreFactor, playeractor.PlayerDefenseIgnoreFactor);
				}
				TOTALFactor += DefenseIgnoreFactor;
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\czStatItem input [STEP 4]\c-: \caSKIPPED\c-)", DefenseIgnoreFactor);
				}
			}

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			int postdef1dmg = newdamage;
			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) 
			{
				Console.Printf("    (\czStatItem input ([Ignorables]) [STEP 5]\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, DEFfactor [%d] = %8f, THEfactor [%d] = %8f, LifeUpDEFFactor = %8f, DemoExpertFactor = %8f, StrifeStaminaFactor = %8f, InvisFactor = %8f, EWShieldFactor = %8f, PlayerFistBlockFactor = %8f, SceptreDefenseFactor = %8f, UppercutFactor = %8f, KickingFactor = %8f, MartArtFactor = %8f, SauronEquipFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f)", 
				damageType, damage, postdef1dmg, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerDEF, DEFfactor, PlayerTHE, THEfactor, 
				LifeUpDEFFactor, DemoExpertFactor, StrifeStaminaFactor, 
				InvisFactor, EWShieldFactor,
				PlayerFistBlockFactor, SceptreDefenseFactor, UppercutFactor, 
				KickingFactor, MartArtFactor, SauronEquipFactor, 
				RingFactor, DQBuffFactor);
			}


			// ******************************************
			// *DEFENSE THAT CANNOT BE IGNORED GOES LAST*
			// ******************************************
			// "Power Trip" Mode ===Unignorable===
			double MusouFactor = 1.0;
			if (GetCVar("dvds_musou_powertripmode") == 1) MusouFactor = 0.2;
			if (GetCVar("dvds_musou_powertripmode") == 2) MusouFactor = 0.1;

			// Death Rage [Invulnerablity?] ===Unignorable===
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageFactor = 0.0;
			
			// Focusing ===Unignorable===
			double FocusFactor = 1.00;
			if (CallACS("MiscVarCheckDECORATE",212) > 0) FocusFactor = 4.00;

			// Invisibility [DEFENSIVE] [if NOT ignored] (67% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored <= 2)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Cursed Shield [DEFENSIVE] ===Unignorable===
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 2.56;
				if (damageType == 'Dark' || damageType == 'IncarnateGlare')
				{
					CursedShieldFactor *= 0.390625;
				}
			}
			
			// Tension Level [DEFENSIVE] ===Unignorable===
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = GetCVar("dvds_allowtension");
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 0.975;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 0.925;		// "20" Tension
				if (TensionLevel == 3) TensionFactor = 0.825;		// "50" Tension
				if (TensionLevel == 4) TensionFactor = 0.7;			// "100" Tension
				if (TensionLevel == 5) TensionFactor = 0.55;		// "250" Tension
				if (TensionLevel == 6) TensionFactor = 0.35;		// "500" Tension
				if (TensionLevel == 7) TensionFactor = 0.1;			// "1000" Tension
			}

			// Divine Avatar [DEFENSIVE] ===Unignorable===
			double DivineAvatarFactor = 1.0;
			if (CallACS("GetBuffTimer",7) > 0) DivineAvatarFactor = 0.25;

			// GoE? [DEFENSIVE] ===Unignorable===
			double GoEFactor = 1.0;
			if (CallACS("GetBuffTimer",129) > 0) GoEFactor = 0.1;

			//************************************************************************
			// TOTALFactor2 is for defenses that CANNOT be ignored by various attacks
			//************************************************************************
			double TOTALFactor2 = 1.0
													* MusouFactor
													* DeathRageFactor
													* FocusFactor
													* InvisFactor
													* CursedShieldFactor
													* TensionFactor
													* DivineAvatarFactor
													* GoEFactor;

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, postdef1dmg, postdef1dmg * TOTALFactor2));
			if (dvdsdebug_playerdmgdisplays > 0 && postdef1dmg > 0) 
			{
				Console.Printf("    (\czStatItem input ([UNIgnorables]) [STEP 6]\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor2\c- = \ca%8f\c-, MusouFactor = %8f, DeathRageFactor = %8f, FocusFactor = %8f, InvisFactor = %8f, CursedShieldFactor = %8f, TensionFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f", 
				damageType, postdef1dmg, newdamage, TOTALFactor2, 
				MusouFactor, DeathRageFactor, FocusFactor,
				InvisFactor, CursedShieldFactor,
				TensionFactor, DivineAvatarFactor, GoEFactor);
			}
		}
	}

	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		double CVarAdjustSpeed = 1.00;
		CVarAdjustSpeed = GetCVar("dvds_speedmult");

		double StaminaSpeed = 1.00;
		int StamRatio = CallACS("MiscVarCheckDECORATE",41);
		if (GetCVar("dvds_staminaaffectsspeed") > 0)
		{
			if (StamRatio < 157) StaminaSpeed = 0.325;
			if (StamRatio > 156 && StamRatio < 626) StaminaSpeed = 0.475;
			if (StamRatio > 625 && StamRatio < 1251) StaminaSpeed = 0.61;
			if (StamRatio > 1250 && StamRatio < 2501) StaminaSpeed = 0.73;
			if (StamRatio > 2500 && StamRatio < 5001) StaminaSpeed = 0.835;
			if (StamRatio > 5000 && StamRatio < 7501) StaminaSpeed = 0.925;
			if (StamRatio > 7500 && StamRatio < 12501) StaminaSpeed = 1.00;
			if (StamRatio > 12500 && StamRatio < 20001) StaminaSpeed = 1.075;
			if (StamRatio > 20000 && StamRatio < 27501) StaminaSpeed = 1.165;
			if (StamRatio > 27500 && StamRatio < 35001) StaminaSpeed = 1.27;
			if (StamRatio > 35000 && StamRatio < 42501) StaminaSpeed = 1.39;
			if (StamRatio > 42500 && StamRatio < 48751) StaminaSpeed = 1.525;
			if (StamRatio > 48750) StaminaSpeed = 1.675;
		}

		double DodgeMoreSpeed = 1.00;
		DodgeMoreSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10007) * 0.01) + (CallACS("MiscVarCheckDECORATE",10008) * 0.025));

		double JumpMoreSpeed = 1.00;
		JumpMoreSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10009) * 0.01) + (CallACS("MiscVarCheckDECORATE",10010) * 0.025));

		double OnTheMoveSpeed = 1.00;
		OnTheMoveSpeed = 1.0 + ((CallACS("MiscVarCheckDECORATE",10045) * 0.02) + (CallACS("MiscVarCheckDECORATE",10046) * 0.05));

		double ArmorSpeed = 1.00;
		if (Owner.CountInv("CloakofEvasion") > 0) ArmorSpeed += 0.10;
		if (Owner.CountInv("DoveRibbon") > 0) ArmorSpeed += 0.15;

		double OneRingSpeed = 1.00;
		if (Owner.CountInv("TheOneRing") > 0) OneRingSpeed = 1.50;

		double LVLSpeed = 1.00;
		int PlayerLevel = CallACS("StatCheck",0);
		if (GetCVar("dvds_levelaffectsspeed"))
		{
			if (CharacterClass == 0) LVLSpeed = 1.0 + (PlayerLevel * 0.000669);
			if (CharacterClass == 1) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
			if (CharacterClass == 2) LVLSpeed = 1.0 + (PlayerLevel * 0.001389);
			if (CharacterClass == 8) LVLSpeed = 1.0 + (PlayerLevel * 0.00128255555555);
			if (CharacterClass == 9) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
		}

		double AGLSpeed = 1.00;
		int PlayerAGL = CallACS("StatCheck",3);
		if (CharacterClass == 0) AGLSpeed = 1.0 + (PlayerAGL * 0.00111113333333);
		if (CharacterClass == 1) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 
		if (CharacterClass == 2) AGLSpeed = 1.0 + (PlayerAGL * 0.00222223333333);
		if (CharacterClass == 8) AGLSpeed = 1.0 + (PlayerAGL * 0.00188888888889); 
		if (CharacterClass == 9) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 

		double HWShieldSpeed = 1.00;
		If (weapon is "EvilWarriorShield") 
		{
			if (Owner.CountInv("HWShieldBlockHold") > 0) HWShieldSpeed = 0.81; else HWShieldSpeed = 0.9;
		}

		double MinigunFiringSpeed = 1.00;
		If (weapon is "Minigun")
		{
			if (Owner.CountInv("MinigunSlowdownWhenFiring") > 0) 
			{
				MinigunFiringSpeed = 0.2 + (CallACS("MiscVarCheckDECORATE",10019) * 0.05) + (CallACS("MiscVarCheckDECORATE",10020) * 0.125);
				
			}
		}

		double FistBlockSpeed = 1.00;
		if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockSpeed = 0.75;
		if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockSpeed = 0.825;
		if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockSpeed = 0.90;

		double LongbowSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",398) == 1)
		{
			LongbowSpeed = CallACS("MiscVarCheckDECORATE",8) * 0.01;
			if (LongbowSpeed > 1.0) LongbowSpeed = 1.00;
		}
		double SceptreShieldSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreShieldSpeed = 0.25;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreShieldSpeed = 0.5;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreShieldSpeed = 0.875;

		double BuffSpeed = 1.00;
		if (CallACS("GetBuffTimer",12) > 0) BuffSpeed *= 1.3334; 
		if (CallACS("GetBuffTimer",15) > 0) BuffSpeed *= 0.6667; 

		double TensionSpeed = 1.00;
		int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int CanUseTension = GetCVar("dvds_allowtension");
		if (CanUseTension > 0)
		{
			if (TensionLevel == 1) TensionSpeed = 1.035;
			if (TensionLevel == 2) TensionSpeed = 1.15;
			if (TensionLevel == 3) TensionSpeed = 1.25;
			if (TensionLevel == 4) TensionSpeed = 1.375;
			if (TensionLevel == 5) TensionSpeed = 1.5625;
			if (TensionLevel == 6) TensionSpeed = 1.875;
			if (TensionLevel == 7) TensionSpeed = 2.25;
		}

		double FocusSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",212) > 0) FocusSpeed = 0.25;

		double DivineAvatarSpeed = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarSpeed = 1.5;

		Speed = 1.00
					* CVarAdjustSpeed
					* StaminaSpeed 
					* DodgeMoreSpeed
					* JumpMoreSpeed
					* OnTheMoveSpeed
					* FocusSpeed
					* LVLSpeed
					* AGLSpeed
					* ArmorSpeed
					* OneRingSpeed
					* HWShieldSpeed
					* MinigunFiringSpeed
					* FistBlockSpeed
					* LongbowSpeed
					* SceptreShieldSpeed
					* BuffSpeed
					* TensionSpeed
					* DivineAvatarSpeed;
		if (GetCVar("dvdsdebug_showmoveinformation") > 0) Console.Printf("    (\czSpeed Input\c-: \cyTotalSpeed\c- = \cy%8f\c-, CVarAdjustSpeed = %8f, StaminaSpeed [%d] = %8f, DodgeMoreSpeed = %8f, JumpMoreSpeed = %8f, OnTheMoveSpeed = %8f, FocusSpeed = %8f, LVLSpeed = %8f, AGLSpeed = %8f, ArmorSpeed = %8f, OneRingSpeed = %8f, HWShieldSpeed = %8f, MinigunFiringSpeed = %8f, FistBlockSpeed = %8f, LongbowSpeed = %8f, SceptreShieldSpeed = %8f, BuffSpeed = %8f, TensionSpeed = %8f, DivineAvatarSpeed = %8f)", Speed, CVarAdjustSpeed, StamRatio, StaminaSpeed, DodgeMoreSpeed, JumpMoreSpeed, OnTheMoveSpeed, FocusSpeed, LVLSpeed, AGLSpeed, ArmorSpeed, OneRingSpeed, HWShieldSpeed, MinigunFiringSpeed, FistBlockSpeed, LongbowSpeed, SceptreShieldSpeed, BuffSpeed, TensionSpeed, DivineAvatarSpeed);
		return Speed; 
	}

}

// Resistance code [w/ some help from argv :V]
class Resistances : Inventory 
{
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage) 
	{
		double resist = 0;
		double resistN = 0;

		// Calculates any non-normal damage type in a separate factor
		for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
		{
			if (inv is "ResistanceGrantingItem") resist += ResistanceGrantingItem(inv).GetResistForDamageType(damageType);
		}
		newdamage = damage * (1.0 - resist);

		// "Normal" Damage Type is counted separately from other resistances
		int newdmg1 = newdamage;
		if (damageType != 'Drowning')
		{
			for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
			{
				if (inv is "ResistanceGrantingItem") resistN += ResistanceGrantingItem(inv).ResistNormal;
			}
		}
		newdamage = newdmg1 * (1.0 - resistN);
		int tempdamage = newdamage;

		// The "Omniblock" Bonus from the Divine Shield is Armor based defense, so it gets placed here now 
		// instead of PlayerStatItem [which also prevents standard def-ignoring attacks from bypassing it]
		int shieldblockdmg1 = newdamage;
		int ShieldBonusOn = 0;
		double DivineShieldBlockChance = 0.0;
		double DivShldBonus = 0.0;
		if (Owner.CountInv("DivineShield") > 0)
		{
			DivineShieldBlockChance += 7.8; // 13.0
			DivShldBonus += 0.042; // 0.07
			if (Owner.CountInv("SafeTeaShoes") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("PearlyCorset") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("WaterFlyingDress") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("EvenstarNecklace") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("CloakofEvasion") > 0)				{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("AnubisCufflinks") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("KissaBra") > 0)							{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("BalrogRing") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("DoveRibbon") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("FalconKnifeEarrings") > 0)	{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }

			if (frandom(0.001,100.000) <= DivineShieldBlockChance) 
			{ 
				ShieldBonusOn = 1;
				newdamage = shieldblockdmg1 * (1.0 - DivShldBonus);
				A_Playsound("SceptreEmpyrea/Reflect");
			}
		}
		int tempdamage2 = newdamage;

		if (GetCVar("dvdsdebug_playerdmgdisplays") > 0) 
		{
			Console.Printf("    (\czFlora Armor input  [STEP 7]\c-:  \cwDmgType\c- = \cw%s\c-, \cydmg\c- = \cy%d\c-, \cares\c- = \ca%.4f\c-, \cynewdmg1\c- = \cy%d\c-, \caresN\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-)", damageType, damage, resist, newdmg1, resistN, tempdamage);

			if (ShieldBonusOn > 0) Console.Printf("    (\czFlora Omniblock Input [STEP 8]\c-: \cwDmgType\c- = \cw%s\c-, \cyshieldblockdmg1\c- = \cy%d\c-, \caDivShldBonus\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-)", damageType, shieldblockdmg1, DivShldBonus, tempdamage2);
												else Console.Printf("    (\czFlora Omniblock Input [STEP 8]\c-: \caSKIPPED\c-)", damageType);
		}
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ResistanceGrantingItem : CustomInventory 
{
	double ResistNormal, ResistPhysical, ResistMelee, ResistBullet, ResistMagic;
	double ResistFire, ResistIce, ResistThunder, ResistHoly, ResistDark, ResistWind, ResistEarth;
	double ResistSlime, ResistMagma, ResistCrush, ResistDrowning, ResistFalling, ResistExplosive;
	double ResistSceptre, ResistFist, ResistKick, ResistGauntlets, ResistChainsaw;
	double ResistAcid, ResistPoison;

	property ResistNormal: ResistNormal;
	property ResistPhysical: ResistPhysical;
	property ResistMelee: ResistMelee;
	property ResistBullet: ResistBullet;
	property ResistMagic: ResistMagic;

	property ResistFire: ResistFire;
	property ResistIce: ResistIce;
	property ResistThunder: ResistThunder;
	property ResistHoly: ResistHoly;
	property ResistDark: ResistDark;
	property ResistWind: ResistWind;
	property ResistEarth: ResistEarth;

	property ResistSlime: ResistSlime;
	property ResistMagma: ResistMagma;
	property ResistCrush: ResistCrush;
	property ResistDrowning: ResistDrowning;
	property ResistFalling: ResistFalling;
	property ResistExplosive: ResistExplosive;

	property ResistSceptre: ResistSceptre;
	property ResistFist: ResistFist;
	property ResistKick: ResistKick;
	property ResistGauntlets: ResistGauntlets;
	property ResistChainsaw: ResistChainsaw;

	property ResistAcid: ResistAcid;
	property ResistPoison: ResistPoison;
    
	double GetResistForDamageType(Name damageType) 
	{
		if (damageType == 'Physical')
				return ResistPhysical;
		else if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' || damageType == 'Gauntlets')
				return ResistMelee;
		else if (damageType == 'Bullet' || damageType == 'Railgun')
				return ResistBullet;
		else if (damageType == 'Magic')
				return ResistMagic;
		else if (damageType == 'Fire' || damageType == 'Lava')
				return ResistFire;
		else if (damageType == 'Ice')
				return ResistIce;
		else if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Shock')
				return ResistThunder;
		else if (damageType == 'Holy')
				return ResistHoly;
		else if (damageType == 'Dark')
				return ResistDark;
		else if (damageType == 'Wind')
				return ResistWind;
		else if (damageType == 'Earth')
				return ResistEarth;
		else if (damageType == 'Slime')
				return ResistSlime;
		else if (damageType == 'Magma')
				return ResistMagma;
		else if (damageType == 'Crush')
				return ResistCrush;
		else if (damageType == 'Drowning')
				return ResistDrowning;
		else if (damageType == 'Falling')
				return ResistFalling;
		else if (damageType == 'Explosive' || damagetype == 'MOD_ROCKET' || damagetype == 'MOD_R_SPLASH' || damagetype == 'MOD_BARREL')
				return ResistExplosive;
		else if (damageType == 'Sceptre')
				return ResistSceptre;
		else if (damageType == 'Fist;')
				return ResistFist;
		else if (damageType == 'Kick')
				return ResistKick;
		else if (damageType == 'Gauntlets')
				return ResistGauntlets;
		else if (damageType == 'Chainsaw')
				return ResistChainsaw;
		else if (damageType == 'Acid')
				return ResistAcid;
		else if (damageType == 'Poison' || damageType == 'PoisonElemental')
				return ResistPoison;
		else
				return 0;
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItemZSC : ResistanceGrantingItem
{
	int loopernum, armorhumtimer;
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1 RenderStyle Add
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}
	property loopernum: loopernum;

	override void PostBeginPlay()
	{
		if (CountInv("PlayingDoom64",AAPTR_PLAYER1)) { scale.x * 1.2; scale.y * 1.2; }
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick() 
	{
		int gfxeffectlvl = GetCVar("dvds_gfxeffectlevel");
		if (Owner == null)
		{
			ACS_NamedExecuteAlways("CheckFloraArmorCopies",0,loopernum,0,0);
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			armorhumtimer++;
			if (armorhumtimer >= 42)
			{
				A_Stopsound(CHAN_ITEM);
				A_Playsound("FloraArmor/Hum",CHAN_ITEM);
				armorhumtimer = 0;
			}
		}
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_PlaySound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

// Item 1
class SafeTeaShoes : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRA0"
		inventory.icon "FAMRA0";
		Inventory.PickupMessage "Got the \chSafe Tea Shoes\c-!!";
		ResistanceGrantingItem.ResistSlime 0.275;
		ResistanceGrantingItem.ResistMagma 0.275;
		ResistanceGrantingItem.ResistNormal 0.03;
		ResistanceGrantingItem.ResistMagic 0.0125;
		ResistanceGrantingItem.ResistFalling 0.75;
		BaseFloraArmorItemZSC.loopernum 1;
	}

	override void DoEffect() 
	{
		ResistSlime = 0.25 + (0.005 * random[safeteashoes](0,10));
		//if (GetCVar("dvdsdebug_playerdmgdisplays") > 0) Console.Printf("    (\czFloraArmorAbsorb\c-: ResistSlime = %8f)", ResistSlime);
		Super.DoEffect(); 
	}

	States
	{
		Spawn:
			FAMR A 1 bright NoDelay;
			loop;
	}
}

// Item 2
class PearlyCorset : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRB0"
		inventory.icon "FAMRB0";
		Inventory.PickupMessage "Got the \chPearly Corset\c-!!";
		ResistanceGrantingItem.ResistNormal 0.07;
		ResistanceGrantingItem.ResistFire 0.02;
		ResistanceGrantingItem.ResistMagma 0.02;
		ResistanceGrantingItem.ResistIce 0.02;
		ResistanceGrantingItem.ResistThunder 0.02;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.025;
		ResistanceGrantingItem.ResistBullet 0.25;
		BaseFloraArmorItemZSC.loopernum 2;
	}

	States
	{
		Spawn:
			FAMR B 1 bright NoDelay;
			loop;
	}
}

// Item 3
class WaterFlyingDress : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRC0"
		inventory.icon "FAMRC0";
		Inventory.PickupMessage "Got the \chWater Flying Dress\c-!!";
		ResistanceGrantingItem.ResistNormal 0.08;
		ResistanceGrantingItem.ResistFire 0.3;
		ResistanceGrantingItem.ResistMagma 0.3;
		ResistanceGrantingItem.ResistMagic 0.25;
		ResistanceGrantingItem.ResistBullet 0.15;
		ResistanceGrantingItem.ResistExplosive 0.20;
		BaseFloraArmorItemZSC.loopernum 3;
	}

	States
	{
		Spawn:
			FAMR C 1 bright NoDelay;
			loop;
	}
}

// Item 4
class EvenstarNecklace : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRD0"
		inventory.icon "FAMRD0";
		Inventory.PickupMessage "Got the \chEvenstar Necklace\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.2;
		ResistanceGrantingItem.ResistMagma 0.2;
		ResistanceGrantingItem.ResistIce 0.2;
		ResistanceGrantingItem.ResistThunder 0.2;
		ResistanceGrantingItem.ResistDark 0.2;
		ResistanceGrantingItem.ResistMagic 0.2;
		BaseFloraArmorItemZSC.loopernum 4;
	}

	States
	{
		Spawn:
			FAMR D 1 bright NoDelay;
			loop;
	}
}

// Item 5
class CloakOfEvasion : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRE0"
		inventory.icon "FAMRE0";
		Inventory.PickupMessage "Got the \chCloak of Evasion\c-!!";
		ResistanceGrantingItem.ResistNormal 0.04;
		ResistanceGrantingItem.ResistIce 0.05;
		ResistanceGrantingItem.ResistThunder 0.025;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 5;
	}

	States
	{
		Spawn:
			FAMR E 1 bright NoDelay;
			loop;
	}
}

// Item 6
class AnubisCufflinks : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRF0"
		inventory.icon "FAMRF0";
		Inventory.PickupMessage "Got the \chAnubis Cufflinks\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		ResistanceGrantingItem.ResistThunder 0.0625;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 6;
	}

	States
	{
		Spawn:
			FAMR F 1 bright NoDelay;
			loop;
	}
}

// Item 7
class KissaBra : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRG0"
		inventory.icon "FAMRG0";
		Inventory.PickupMessage "Got \chKissa's Armored Brasseire\c-!!";
		ResistanceGrantingItem.ResistNormal 0.06;
		ResistanceGrantingItem.ResistBullet 0.2;
		BaseFloraArmorItemZSC.loopernum 7;
	}

	States
	{
	Spawn:
		FAMR G 1 bright NoDelay;
		loop;
	}
}

// Item 8
class DivineShield : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRH0"
		inventory.icon "FAMRH0";
		Inventory.PickupMessage "Got the \chDivine Shield\c-!!";
		ResistanceGrantingItem.ResistNormal 0.16;
		ResistanceGrantingItem.ResistFire 0.25;
		ResistanceGrantingItem.ResistMagma 0.25;
		ResistanceGrantingItem.ResistIce 0.25;
		ResistanceGrantingItem.ResistThunder 0.25;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.3;
		BaseFloraArmorItemZSC.loopernum 9;
	}

	States
	{
		Spawn:
			FAMR H 1 bright NoDelay;
			loop;
	}
}

// Item 9
class BalrogRing : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRI0"
		inventory.icon "FAMRI0";
		Inventory.PickupMessage "Got the \chBalrog's Ring\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.15;
		ResistanceGrantingItem.ResistMagma 0.15;
		ResistanceGrantingItem.ResistIce 0.225;
		ResistanceGrantingItem.ResistExplosive 0.25;
		BaseFloraArmorItemZSC.loopernum 10;
	}

	States
	{
		Spawn:
			FAMR I 1 bright NoDelay;
			loop;
	}
}

// Item 10
class DoveRibbon : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRJ0"
		inventory.icon "FAMRJ0";
		Inventory.PickupMessage "Got the \chDove's Ribbon\c-!!";
		ResistanceGrantingItem.ResistNormal 0.09;
		ResistanceGrantingItem.ResistFire 0.0125;
		ResistanceGrantingItem.ResistMagma 0.0125;
		ResistanceGrantingItem.ResistIce 0.0625;
		ResistanceGrantingItem.ResistThunder 0.15;
		ResistanceGrantingItem.ResistDark 0.125;
		ResistanceGrantingItem.ResistMagic 0.0625;
		ResistanceGrantingItem.ResistBullet 0.05;
		BaseFloraArmorItemZSC.loopernum 11;
	}

	States
	{
		Spawn:
			FAMR J 1 bright NoDelay;
			loop;
	}
}

// Item 11
class FalconKnifeEarrings : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRK0"
		inventory.icon "FAMRK0";
		Inventory.PickupMessage "Got the \chFalcon Knife Earrings\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		BaseFloraArmorItemZSC.loopernum 12;
	}

	States
	{
		Spawn:
			FAMR K 1 bright NoDelay;
			loop;
	}
}