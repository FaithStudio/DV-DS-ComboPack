class BaseExperiessence : AetheriusCustomInventory
{
	int user_transpulsetype;
	int ActorVar1;
	
	action void A_PickupExperiessence(double percentage = 1.0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int ClearedOfMindParkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXParkLevel = CallACS("MiscVarCheckDECORATE",10056);
		
		if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("percentage: %.8f", percentage);
		double BaseEXPGain = percentage;
		double perkfactor;
		if (random(1,64) == 1) BaseEXPGain *= 2.0;
		if (random(1,256) == 1) BaseEXPGain *= 2.0;
		if (random(1,1024) == 1) BaseEXPGain *= 2.0;
		
		int EXPGiven;
		
		if (PlayerLevel == 0) { EXPGiven = (CallACS("ExpTableCheckDECORATE",PlayerLevel) * BaseEXPGain) / 100; }
		else if (PlayerLevel >= 1) { EXPGiven = ((CallACS("ExpTableCheckDECORATE",PlayerLevel) - CallACS("ExpTableCheckDECORATE",(PlayerLevel-1))) * BaseEXPGain) / 100; }
		if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Base]", EXPGiven);
		
		if (ClearedOfMindParkLevel > 0)
		{
			perkfactor = 1.00;
			if (ClearedOfMindParkLevel >= 1) perkfactor += 0.04;
			if (ClearedOfMindParkLevel >= 2) perkfactor += 0.05;
			if (ClearedOfMindParkLevel >= 3) perkfactor += 0.06;
			if (ClearedOfMindParkLevel >= 4) perkfactor += 0.07;
			if (ClearedOfMindParkLevel >= 5) perkfactor += 0.08;
			if (ClearedOfMindEXParkLevel >= 1) perkfactor += 0.10;
			if (ClearedOfMindEXParkLevel >= 2) perkfactor += 0.20;
			EXPGiven *= perkfactor;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Perks1], PerkFactor: %.8f", EXPGiven, perkfactor);
		}
		if (CallACS("MiscVarCheckDECORATE",11001) > 0)
		{
			if (CallACS("MiscVarCheckDECORATE",11001) == 1)
			{
				if (CharacterClass == 0 | CharacterClass == 1) EXPGiven *= 1.225; // EXP Multiplier Option [122.5%]
				if (CharacterClass == 2) EXPGiven *= 1.15; // EXP Multiplier Option [115%]
			}
			if (CallACS("MiscVarCheckDECORATE",11001) == 2)
			{
				if (CharacterClass == 0 | CharacterClass == 1) EXPGiven *= 1.45; // EXP Multiplier Option [145%]
				if (CharacterClass == 2) EXPGiven *= 1.3; // EXP Multiplier Option [130%]
			}
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Perks2]", EXPGiven);
		}
	
		int ExpMultiplier = dvds_expmultiplier;
		int basemulti;
		if (EXPGiven > 0)
		{
			basemulti = random(25,35) * 25;
			EXPGiven = (EXPGiven * basemulti) / 1000;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Factor1], BaseMult: %d / 1000", EXPGiven, basemulti);
	
			EXPGiven = (EXPGiven * ExpMultiplier) / 100;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [ExpMulti], ExpMultiplier: %d / 100", EXPGiven, ExpMultiplier);

			CallACS("ExpCheat",ExpGiven); // Experience += EXPGiven;
		}
	}
}

class BaseSeed : AetheriusCustomInventory
{
	action void A_GrabSeedOther(int SeedType = 0, int SeedAmount = 0, int SeedLimitTypeIncrease = 0)
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		int SkillSeedRuns, MaxSkillSeedRuns, SkillSeedRND, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE, OldAeonPts, NewAeonPts;
		int SeedMulti;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (SeedAmount < 1) SeedAmount = 1;
			
			// "0" is for non-dropped or map-placed seeds as to not impose a limit on those
			if (SeedLimitTypeIncrease == 1) CallACS("MiscVarSetDECORATE",30,1,1); // "1" is Normal Seeds
			if (SeedLimitTypeIncrease == 2) CallACS("MiscVarSetDECORATE",37,1,1); // "2" is Skill Seeds
			if (SeedLimitTypeIncrease == 3) CallACS("MiscVarSetDECORATE",27,1,1); // "3" is Fyggs
			
			if (SeedType < 0) SeedAmount = 0;
			if (SeedType > 7) SeedAmount = 0;
			
			OldAeonPts = CallACS("MiscVarCheckDECORATE",25);
			OldAGL = CallACS("MiscVarCheckDECORATE",31);
			OldDEF = CallACS("MiscVarCheckDECORATE",32);
			OldDFT = CallACS("MiscVarCheckDECORATE",33);
			OldSOR = CallACS("MiscVarCheckDECORATE",34);
			OldSTR = CallACS("MiscVarCheckDECORATE",35);
			OldTHE = CallACS("MiscVarCheckDECORATE",36);
			
			SeedMulti = 1;
			if (random(1,25) == 25) { if (random(1,625) == 625) SeedMulti = 3; else SeedMulti = 2; }
			
			if (SeedType == 0) // Seed of Skill [special seed, 4+ AeonPts ]
			{
				SeedAmount = 4;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			}
			
			if (SeedType == 1) // Seed of Agility [Speed/Movement]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
			}
			
			if (SeedType == 2) // Seed of Defense [Overall Resistance]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
			}
			
			if (SeedType == 3) // Seed of Deftness [EXP Gain %]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
			}
			
			if (SeedType == 4) // Seed of Sorcery [Magical Attack]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
			}
			
			if (SeedType == 5) // Seed of Strength [Overall Attack]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
			}
			
			if (SeedType == 6) // Seed of Therapeusis [Magical Resistance]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 7) // Fygg (extremely rare) [all stats +16]
			{
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 8) // Platinum Fygg (extremely rare) [+16 to all stats & +64 Aeon Points]
			{
				SeedAmount = 64;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 9) // Enhanced Seed of Skill [special seed, 16+ AeonPts ]
			{
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			}
			
			if (CallACS("MiscVarCheckDECORATE",31) > 512) CallACS("MiscVarSetDECORATE",31,512);
			if (CallACS("MiscVarCheckDECORATE",32) > 512) CallACS("MiscVarSetDECORATE",32,512);
			if (CallACS("MiscVarCheckDECORATE",33) > 512) CallACS("MiscVarSetDECORATE",33,512);
			if (CallACS("MiscVarCheckDECORATE",34) > 512) CallACS("MiscVarSetDECORATE",34,512);
			if (CallACS("MiscVarCheckDECORATE",35) > 512) CallACS("MiscVarSetDECORATE",35,512);
			if (CallACS("MiscVarCheckDECORATE",36) > 512) CallACS("MiscVarSetDECORATE",36,512);
			NewAeonPts = CallACS("MiscVarCheckDECORATE",25);
			NewAGL = CallACS("MiscVarCheckDECORATE",31);
			NewDEF = CallACS("MiscVarCheckDECORATE",32);
			NewDFT = CallACS("MiscVarCheckDECORATE",33);
			NewSOR = CallACS("MiscVarCheckDECORATE",34);
			NewSTR = CallACS("MiscVarCheckDECORATE",35);
			NewTHE = CallACS("MiscVarCheckDECORATE",36);
			
			if (NewAeonPts-OldAeonPts > 0)
			{
				CallACS("MiscVarSetDECORATE",224,(NewAeonPts-OldAeonPts),1); 
				CallACS("MiscVarSetDECORATE",2033,105); 
			}
			if (NewAGL-OldAGL > 0)
			{
				CallACS("MiscVarSetDECORATE",225,(NewAGL-OldAGL),1); 
				CallACS("MiscVarSetDECORATE",2034,105); 
			}
			if (NewDEF-OldDEF > 0)
			{
				CallACS("MiscVarSetDECORATE",226,(NewDEF-OldDEF),1); 
				CallACS("MiscVarSetDECORATE",2035,105); 
			}
			if (NewDFT-OldDFT > 0)
			{
				CallACS("MiscVarSetDECORATE",227,(NewDFT-OldDFT),1); 
				CallACS("MiscVarSetDECORATE",2036,105); 
			}
			if (NewSOR-OldSOR > 0)
			{
				CallACS("MiscVarSetDECORATE",228,(NewSOR-OldSOR),1); 
				CallACS("MiscVarSetDECORATE",2037,105); 
			}
			if (NewSTR-OldSTR > 0)
			{
				CallACS("MiscVarSetDECORATE",229,(NewSTR-OldSTR),1); 
				CallACS("MiscVarSetDECORATE",2038,105); 
			}
			if (NewTHE-OldTHE > 0)
			{
				CallACS("MiscVarSetDECORATE",230,(NewTHE-OldTHE),1); 
				CallACS("MiscVarSetDECORATE",2039,105); 
			}
			
			if (SeedType == 0) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Skill!\n\n\cjAeonPts: %d --> %d", OldAeonPts, NewAeonPts), frandom(1.542,1.08));
			}
			
			if (SeedType == 1) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Agility!\n\n\cjAgility: %d --> %d", OldAGL, NewAGL), frandom(1.028,1.2));
			}
			
			if (SeedType == 2) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Defense!\n\n\cjDefense: %d --> %d", OldDEF, NewDEF), frandom(1.028,1.2));
			}
			
			if (SeedType == 3) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Deftness!\n\n\cjDeftness: %d --> %d", OldDFT, NewDFT), frandom(1.028,1.2));
			}
			
			if (SeedType == 4) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Sorcery!\n\n\cjSorcery: %d --> %d", OldSOR, NewSOR), frandom(1.028,1.2));
			}
			
			if (SeedType == 5) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Strength!\n\n\cjStrength: %d --> %d", OldSTR, NewSTR), frandom(1.028,1.2));
			}
			
			if (SeedType == 6) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Therapeusis!\n\n\cjTherapeusis: %d --> %d", OldTHE, NewTHE), frandom(1.028,1.2));
			}
			
			if (SeedType == 7) 
			{
				A_PrintBold(String.Format("\cjZOMG You've Ate a Fygg!!!!\n\n\cjAgility: %d --> %d\n\cjDefense: %d --> %d\n\cjDeftness: %d --> %d\n\cjSorcery: %d --> %d\n\cjStrength: %d --> %d\n\cjTherapeusis: %d --> %d", OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE), frandom(2.057,2.4));
			}
			
			if (SeedType == 8) 
			{
				A_PrintBold(String.Format("\cjZOMG You've Ate a PLATNIUM Fygg!!!!\n\n\cjAeonPts: %d --> %d\n\cjAgility: %d --> %d\n\cjDefense: %d --> %d\n\cjDeftness: %d --> %d\n\cjSorcery: %d --> %d\n\cjStrength: %d --> %d\n\cjTherapeusis: %d --> %d", OldAeonPts, NewAeonPts, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE), frandom(2.057,2.4));
			}
			
			if (SeedType == 9) 
			{
				A_PrintBold(String.Format("\cjYou've Ate an Enhanced Seed of Skill!\n\n\cjAeonPts: %d --> %d", OldAeonPts, NewAeonPts), frandom(1.542,1.08));
			}
		}
	}
	
	action void A_GrabLifeManaSeed(int SeedType = 0, int SeedAmount = 0, int SeedLimitTypeIncrease = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int CurrentMana = CallACS("StatCheck",14);
		int debugseedstuff = dvdsdebug_showseedstuff;
		
		int SkillSeedRuns, SkillSeedRND, OldHP, NewHP, OldMP, NewMP, StatGain1, StatGain2, ArmorHPBonus, PerkFactor;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (SeedAmount < 1) SeedAmount = 1;
			
			if (SeedType < 1) SeedAmount = 1;
			if (SeedType > 2) SeedAmount = 2;
			
			OldHP = MaxHealthTrue;
			OldMP = MaxMana;
			
			if (SeedType == 1) // Seed of Life
			{
				StatGain1 = MaxHealthTrue / 80;
				if (CharacterClass == 0) StatGain1 += 3;
				if (CharacterClass == 1) StatGain1 += 2;
				if (CharacterClass == 2) StatGain1 += 1;
				if (CharacterClass == 8) StatGain1 += 1;
				if (CharacterClass == 9) StatGain1 += 3;
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Base]: %d", StatGain1);
			
				SkillSeedRND = random(1,13);
			
				if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
				if (SkillSeedRND >= 2 && SkillSeedRND <= 4) StatGain1 = StatGain1 * 3 / 2;
				if (SkillSeedRND >= 5 && SkillSeedRND <= 9) StatGain1 = StatGain1 * 2;
				if (SkillSeedRND >= 10 && SkillSeedRND <= 12) StatGain1 = StatGain1 * 5 / 2;
				if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Randomizer1]: %d", StatGain1);
			
				StatGain1 *= SeedAmount;
				StatGain1 *= CallACS("MiscVarCheckDECORATE",87);
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Multipliers]: %d", StatGain1);
			
				// Flora's Armor Items [up to +45% Max HP gained from Max HP Bonuses]
				if (CharacterClass == 2)
				{
					if (player.mo.CountInv("PearlyCorset")) ArmorHPBonus += 20; // +20%
					if (player.mo.CountInv("KissaBra")) ArmorHPBonus += 10; // +10%
					if (player.mo.CountInv("BalrogRing")) ArmorHPBonus += 15; // +15%
					ArmorHPBonus += 100;
					if (debugseedstuff > 0) Console.Printf("ArmorHPBonus: %d", ArmorHPBonus);
					StatGain1 = StatGain1 * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset
					if (debugseedstuff > 0) Console.Printf("StatGain1 [ArmorHPBonus]: %d", StatGain1);
				}
			
				PerkFactor = ((CallACS("MiscVarCheckDECORATE",10001) * 500) + (CallACS("MiscVarCheckDECORATE",10002) * 1250)) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
				if (debugseedstuff > 0) Console.Printf("StatGain1 [LifeUp Perks]: %d", StatGain1);
			
				PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Stamina Upgrade (Strife)]: %d", StatGain1);
			
				if (StatGain1 < 1) StatGain1 = 1;
				CallACS("MiscVarSetDECORATE",222,StatGain1,1);
				CallACS("MiscVarSetDECORATE",2031,105); 
				
				player.mo.health = player.health += StatGain1;
				MaxHealthTrue += StatGain1;
				CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
			}
			
			if (SeedType == 2) // Seed of Magic
			{
				StatGain1 = MaxMana / 80;
				if (CharacterClass == 0) StatGain1 += 1;
				if (CharacterClass == 1) StatGain1 += 2;
				if (CharacterClass == 2) StatGain1 += 4;
				if (CharacterClass == 8) StatGain1 += 4;
				if (CharacterClass == 9) StatGain1 += 2;
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Base]: %d", StatGain1);
			
				SkillSeedRND = random(1,13);
			
				if (SkillSeedRND == 1) StatGain1 = StatGain1 * 1;
				if (SkillSeedRND >= 2 && SkillSeedRND <= 4) StatGain1 = StatGain1 * 3 / 2;
				if (SkillSeedRND >= 5 && SkillSeedRND <= 9) StatGain1 = StatGain1 * 2;
				if (SkillSeedRND >= 10 && SkillSeedRND <= 12) StatGain1 = StatGain1 * 5 / 2;
				if (SkillSeedRND == 13) StatGain1 = StatGain1 * 3;
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Randomizer1]: %d", StatGain1);
			
				StatGain1 *= SeedAmount;
				StatGain1 *= CallACS("MiscVarCheckDECORATE",87);
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Multipliers]: %d", StatGain1);
			
				PerkFactor = ((CallACS("MiscVarCheckDECORATE",10003) * 500) + (CallACS("MiscVarCheckDECORATE",10004) * 1250)) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
				if (debugseedstuff > 0) Console.Printf("StatGain1 [LifeUp Perks]: %d", StatGain1);
			
				PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
				if (debugseedstuff > 0) Console.Printf("StatGain1 [Stamina Upgrade (Strife)]: %d", StatGain1);
			
				if (StatGain1 < 1) StatGain1 = 1;
				CallACS("MiscVarSetDECORATE",223,StatGain1,1);
				CallACS("MiscVarSetDECORATE",2032,105); 
			
				MaxMana += StatGain1;
				CurrentMana += StatGain1;
				CallACS("OtherVarSetDECORATE",1,MaxMana);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			
			NewHP = MaxHealthTrue;
			NewMP = MaxMana;
			
			if (SeedType == 1) 
			{
				A_PrintBold(String.Format("\cjYou've Found a Seed of Life!\n\n\cjHP/Health: %d --> %d", OldHP, NewHP), frandom(1.028,1.2));
			}
			
			if (SeedType == 2) 
			{
				A_PrintBold(String.Format("\cjYou've Found a Seed of Magic!\n\n\cjMP/Mana: %d --> %d", OldMP, NewMP), frandom(1.028,1.2));
			}
		}
	}
	
	
	
}

class AetheriusPowerMask : AetheriusPowerIronFeet
{
	Default
	{
		Powerup.Duration -80;
		Powerup.Color "00 00 00", 0;
		+INVENTORY.HUBPOWER
		Inventory.Icon "";
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Magma') newdamage = damage * 0.05;
		if (damageType == 'Slime' || damageType == 'Drowning') newdamage = 0;
	}

	override void DoEffect ()
	{
		if (Owner.player != NULL) Owner.player.mo.ResetAirSupply();
	}
}


class AetheriusBaseCustomInventoryZSC : CustomInventory 
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	// Spread Aura Function [Projectiles]
	action void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

}

class BackPackNew : AetheriusCustomInventory
{
}

class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB
		+NOTIMEFREEZE
	}
}

//********************************
//** ACTUAL Item Definitions V: **
//********************************
class RandomHellcoreWeapon : RandomSpawner2 //26902
{
	//$Sprite "RNDCA0"
	//$Category DV-DS Random Spawners
	Default
	{
		Tag "Random Hellcore Soul: Spawns a random Hellcore Soul";
		+DONTGIB;
		DropItem "ImpSoulCI";
		DropItem "DarkImpSoulCI";
		DropItem "CacodemonSoulCI";
		DropItem "CacolanternSoulCI";
		DropItem "AbaddonSoulCI";
		DropItem "KnightSoulCI";
		DropItem "BaronSoulCI";
		DropItem "BelphegorSoulCI";
		DropItem "BruiserSoulCI";
		DropItem "ArchonSoulCI";
		DropItem "PyroDemonSoulCI";
		DropItem "IncarnateSoulCI";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
	}
}

class BaseItemSpawner : AetheriusBaseZSC
{
	default
	{
		+NOTIMEFREEZE;
	}
	const SpawnerFlags = SXF_TRANSFERPOINTERS | SXF_TRANSFERSPECIAL;
}

class RandomMagicSpawner : BaseItemSpawner //32109
{
	default
	{
		//$Sprite "RNDMA0"
		//$Category DV-DS Random Spawners
		Tag "Random Magic Spawn: Spawns a random Magic item type";
		RenderStyle "Add";
		Radius 16;
		Height 16;
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	States
	{
		Spawn:
			RNDH A 0 NoDelay;
			RNDH A 0 A_Jump(256,"Herb1","Herb1","Herb1","Herb2","Herb2","Herb3");
			RNDH A 0 A_FadeOut(1.0);
			Stop;

		Herb1:
			TNT1 A 0 A_SpawnItemEx("MagicWater",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb2:
			TNT1 A 0 A_SpawnItemEx("SageElixir",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb3:
			TNT1 A 0 A_SpawnItemEx("ElfinElixir",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
	}
}

class RandomHerbSpawner : BaseItemSpawner //32110
{
	default
	{
		//$Sprite "RNDHA0"
		//$Category DV-DS Random Spawners
		Tag "Random Herb Spawn: Spawns a random Medicinal Herb type";
		RenderStyle "Add";
		Radius 16;
		Height 16;
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	States
	{
		Spawn:
			RNDH A 0;
			RNDH A 0 A_Jump(256,"Herb1","Herb1","Herb1","Herb2","Herb2","Herb3");
			RNDH A 0 A_FadeOut(1.0);
			Stop;

		Herb1:
			TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb2:
			TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb3:
			TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
	}
}

class RandomArmorSpawner : AetheriusBaseZSC //32111
{
	default
	{
		//$Category DV-DS Random Spawners
		RenderStyle "Add";
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	int user_spawntimes;

	States
	{
		Spawn:
			FLAR AAAAA 1 NoDelay 
			{
				if (CallACS("CheckCharacterClass") == 2) { Thing_Remove(0); }
			}
			FLAR A 0 A_Jump(256,"Green","Blue","Stone","Diamond","Bonuses");
			FLAR A 0 A_FadeOut(1.0);
			Stop;

		Green:
			TNT1 A 0 A_SpawnItemEx("GreenArmorDS",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Blue:
			TNT1 A 0 A_SpawnItemEx("BlueArmorDS",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Stone:
			TNT1 A 0 A_Jump(8,3);
			TNT1 A 0 A_SpawnItemEx("StoneSkin",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_Jump(8,2);
			TNT1 A 0 A_SpawnItemEx("StoneSkinGA",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Diamond:
			TNT1 A 0 A_Jump(8,3);
			TNT1 A 0 A_SpawnItemEx("DiamondSkin",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_Jump(8,2);
			TNT1 A 0 A_SpawnItemEx("DiamondSkinGA",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Bonuses:
			TNT1 A 0 { user_spawntimes = 0; }
		BonusLoop:
			TNT1 A 0 A_SpawnItemEx("ArmorBonus",0,0,0,random(-8,8),random(-8,8),random(-8,8),0,0,8);
			TNT1 A 0 { user_spawntimes += 1; }
			TNT1 A 0 A_JumpIf(user_spawntimes>=64,"BonusEnd");
			loop;
		BonusEnd:
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
	}
}

class RandomPowerupSpawner : RandomSpawner2 //32112
{
	default
	{
		DropItem "SoulSphere2", 256, 10;
		DropItem "MegaSphere2", 256, 10;
		DropItem "InvulnerabilitySphere2", 256, 10;
		DropItem "BlurSphere2", 256, 10;
		DropItem "SpreadSphereSpawner", 256, 10;
		DropItem "DoubleSphere", 256, 10;
		DropItem "GuardSphere", 256, 10;
		DropItem "TimeFreezeSphere", 256, 10;
		DropItem "DivinationSphere", 256, 1;
	}
}

class AetheriusUsableInventory : AetheriusCustomInventory
{
	override void DoEffect ()
	{
		double value1a, value1b;
		double value2a, value2b;
		double value3a, value3b;
		double value4a, value4b;
		string tagedit = GetTag("");
		int CharacterClass = CallACS("CheckCharacterClass");
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		double perkbasemulti = 16;
		double PerkFactor;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		bool changed = false;
		int buttons = GetPlayerInput(0, INPUT_BUTTONS);
		
		if (GetClassName() == "MedicinalHerb")
		{
			value1a = 25; value1b = 35;
			value2a = 7.5; value2b = 10.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "StrongMedicine")
		{
			value1a = 55; value1b = 65;
			value2a = 16.5; value2b = 19.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Strong Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "SpecialMedicine")
		{
			value1a = 85; value1b = 105;
			value2a = 25.5; value2b = 31.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Special Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "MagicWater")
		{
			value1a = 30; value1b = 30;
			value2a = 5.0; value2b = 5.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Magic Water: Restores (%d + %.1f%) MP", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "SageElixir")
		{
			value1a = 90; value1b = 90;
			value2a = 14.25; value2b = 15.75;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Sage Elixir: Restores (%d + %.1f-%.1f%) MP", value1a, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "ElfinElixir")
		{
			value1a = 100.0; value1b = 100.0;
			value2a = 112.5; value2b = 112.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Elfin Elixir: Restores %.1f% MP up to %.1f% MP", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "MiraclePotion")
		{
			value1a = 100.0; value1b = 100.0;
			value2a = 100.0; value2b = 100.0;
			value3a = 125.0; value3b = 125.0;
			
			if (buttons & BT_ZOOM)
			{
			}
			else
			{
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
				{
					value2a *= 1.25;
					value2b *= 1.25;
				}

				if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
				{
					value3a *= 1.667;
					value3b *= 1.667;
				}
				if (CharacterClass == 2)
				{
					int temp1, temp2;
					if (SoulMasteryPerkLevel >= 0)
					{
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel == 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						value3a = value3a * PerkFactor / 16;
						value3b = value3b * PerkFactor / 16;
					}
				}
			}
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Miracle Potion: Restores %.1f% HP, %.1f% Mana, reduces Hellcore Heat by %.1f%%", value1a, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "YggdrasilDew")
		{
			value1a = 90.0; value1b = 110.0;
			value2a = 22.5; value2b = 27.5;
			value3a = 90.0; value3b = 110.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Yggdrasil Dew: Recovers %.1f-%.1f% HP (you/allies in long range), %.1f-%.1f% Mana (you only) & %.1f-%.1f% Stamina (you only)", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "PaxaPunch")
		{
			value1a = 60.0; value1b = 60.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2a = 180.0; value2b = 180.0;
			value2a = value2a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2b = value2b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Paxa Punch: Doubles Damage and Resistance for %.1f Seconds, up to a maximum of over %.1f Seconds [timer stacks]", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "MercuryBandana")
		{
			value1a = 60.0; value1b = 60.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2a = 180.0; value2b = 180.0;
			value2a = value2a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2b = value2b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Mercury Bandana: Increases movement-speed by 33%% for %.1f Seconds, up to a maximum of over %.1f Seconds [timer stacks]", value1a, value2a);
			changed = true;
		}
		// Heretic/Hexen
		if (GetClassName() == "ArtiHealthNew")
		{
			value1a = 25.0; value1b = 30.0;
			value2a = 105.0; value2b = 105.0;
			value3a = 12.5; value3b = 12.5;
			value4a = 105.0; value4b = 105.0;
			
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value4a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value4b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value4a *= 1.667;
				value4b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value4a *= PerkFactor;
			value4b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);
			round(value4a);
			round(value4b);

			tagedit = String.Format("Quartz Flask: Recovers %.1f-%.1f% HP to %.1f%% of Maximum, and %.1f%% Stamina up to %.1f%%", value1a, value1b, value2a, value3a, value4a);
			changed = true;
		}
		if (GetClassName() == "ArtiSuperHealthNew")
		{
			value1a = 100.0; value1b = 110.0;
			value2a = 192.5; value2b = 192.5;
			value3a = 62.5; value3b = 62.5;
			
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (value2a > 200) value2a = 200.0;
			if (value2b > 200) value2b = 200.0;

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);
			round(value4a);
			round(value4b);

			tagedit = String.Format("Mystic Urn: Recovers %.1f-%.1f% HP to %.1f%% of Maximum, and %.1f%% Stamina up to 500%", value1a, value1b, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "ArtiHealingRadiusNew")
		{
			value1a = 62.5; value1b = 62.5;
			value2a = 62.5; value2b = 62.5;
			value3a = 125.0; value3b = 125.0;

			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0 && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Mystic Ambit Incant: Recovers %.1f% HP (you/allies in moderate range), %.1f% MP (you only) and %.1f% Stamina (you only) up to 200%/500%% of Maximums", value1a, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvulnerabilityNew")
		{
			value1a = 45.0; value1b = 45.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Valador's Ring of Invincibility: Gives %.1f Seconds of Invulnerability", value1a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvulnerability2New")
		{
			value1a = 45.0; value1b = 45.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Icon of the Defender: Gives %.1f Seconds of Invulnerability", value1a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvisibilityNew")
		{
			value1a = 90.0; value1b = 90.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("ShadowSphere: Gives partial invisiblity for %.1f seconds", value1a);
			changed = true;
		}

		// Strife
		if (GetClassName() == "MedPatchNew")
		{
			value1a = 8.0; value1b = 12.0;
			value2a = 8.0; value2b = 12.0;
			value3a = 18.75; value3b = 21.25;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0 && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Medical Patch: Restores (%d-%d + %.1f-%.1f%) HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "MedicalKitNew")
		{
			value1a = 20.0; value1b = 30.0;
			value2a = 20.0; value2b = 30.0;
			value3a = 45.0; value3b = 55.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0 && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Medical Kit: Restores (%d-%d + %.1f-%.1f%) HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "SurgeryKitNew")
		{
			value1a = 200.0; value1b = 200.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0 && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);

			tagedit = String.Format("Surgery Kit: Fully restores all HP and gives %.1f% Stamina.", value1a);
			changed = true;
		}
		if (GetClassName() == "ShadowArmorNew")
		{
			value1a = 80.0; value1b = 80.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Shadow Armor: Gives player invisibility for %.1f seconds", value1a);
			changed = true;
		}
		if (GetClassName() == "EnvironmentalSuitNew")
		{
			value1a = 80.0; value1b = 80.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Environmental Suit: Protects from Hazardous Waste, as well as Fire, for %.1f seconds", value1a);
			changed = true;
		}

		if (changed) SetTag(tagedit);
		super.DoEffect();
	}
}