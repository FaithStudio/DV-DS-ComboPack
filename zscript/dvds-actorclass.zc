// Base class [for later use]
class AetheriusBaseZSC : Actor
{
	float user_tempvar1, user_tempvar2, user_tempvar3, user_tempvar4, user_tempvar5;
	int user_hyperlvl1, user_hyperlvl2;
	int user_theta, user_dormant, user_isstealth, user_baseattack, user_basedefense, user_basemass; 
	int user_monsterlevel, user_extraevolvechance, user_extrastealthchance;
	int user_willbecomelegendary, user_legendaryevolved;
	int user_MaxHP, user_HPCritRange, user_HPBuffRange, user_HPXDeathRange, user_HPXDeathRange2, user_HPLowRange;
	int user_checkmapskill, user_ressurrectstr, user_resurrectedtimes, user_canusecrisisatk;
	int user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2;
	int user_barragecounter, user_shotsfired, user_shotsfiredmax;
	float user_shotaccuracy, user_shotaccuracy1, user_shotaccuracy2; 
	float user_shotzaccuracy, user_shotzaccuracy1, user_shotzaccuracy2; 
	float user_randominaccuracy, user_randominaccuracy2;
	float user_basespeed;
	int user_pelletsfired, user_currenttracer, user_aimangleorigin; 
	int user_ammotype, user_gravitytype, user_shotangle, user_chargeinterval, user_pulseinterval;
	int user_spread, user_spread1, user_spread2;
	int user_attacktype, user_attacks, user_attackmax, user_fastchasechance, user_fastchaseextra, user_painfastchase;
	int user_paintomissile;
	int user_painreacttimer;
	int user_fastchasetimer, user_fastchasetimermax;
	int user_walksound;

	int user_nolegendarytrans;
	int user_golddrop;
	int user_crisisprojectile;
	int user_defendtimer, user_defendtimermax, user_defendcycles;
	int user_autorestimer;
	int user_firevolleys, user_firevolleymax;
	int user_random, user_random1, user_ailment1, user_ailmentmaxchance, user_attackpoint;
	int user_chargechance; 
	int user_charmchance, user_charmed;
	int user_summoned;
	int user_regencycles, user_regencyclemax;
}

class AetheriusCustomInventory : CustomInventory
{
	int allowexperiessence, gfxeffectlevel;
	int animationtimer, heartbeattimer;
	int skilllevel;
	int frametimer;
	int autousemode;
	int ManaPickupResult;
	
	// General
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;
	
	property HealthAutoUse: autousemode;

	void A_UseCustomInventoryItem(int type = 0)
	{
		String nm;
		double temp1, temp2, temp3, check1, check2, check3;
		double healmax;
		double perktemp1, perktemp2, perktemp3, perktemp4;
		double perkhealthlimit, perkstaminalimit, perkmanalimit;
		double PerkFactor;
		double perkbasemulti = 16;
		int CurrentHealth = player.mo.health;
		int CurrentMana = CallACS("StatCheck",14); 
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int PowerupTimeMulti = dvds_invpoweruptimemultiplier;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		nm = "ArtiInvisibilityNew"; iDTech1Check = nm;
		if (type == -7 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 90);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",1,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerabilityNew"; iDTech1Check = nm;
		if (type == -6 && player.mo.CountInv(iDTech1Check) > 0) // Ring of Invincibility
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerability2New"; iDTech1Check = nm;
		if (type == -5 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealingRadiusNew"; iDTech1Check = nm;
		if (type == -4 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Ambit Incant
		{
			// Heal HP/Health [62.5%] up to 200%
			temp1 = CurrentHealth;
			healmax = MaxHealthLimit;
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += (MaxHealthTrue * 5 / 8);
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}
		
			// Heal MP/Mana [62.5%] up to 200%
			healmax = MaxMana * 2;
			if (CurrentMana < healmax)
			{
				check1 += 1;
				CurrentMana += (MaxMana * 5 / 8);
				if (CurrentMana > healmax) CurrentMana = healmax;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [125%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 1.25;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("C0 80 C0",0.55,27); // FadeRange(192,128,192,0.55,192,128,192,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiBoostManaNew"; iDTech1Check = nm;
		if (type == -3 && player.mo.CountInv(iDTech1Check) > 0) // Krater of Might [Hexen]
		{
			if (player.mo.CountInv("Mana1") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana1",500);
			}
			if (player.mo.CountInv("Mana2") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana2",500);
			}
			if (CurrentMana < MaxMana * 2)
			{
				check1 += 1;
				CurrentMana = MaxMana * 2;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiSuperHealthNew"; iDTech1Check = nm;
		if (type == -2 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~100 to 110% HP] up to 192.5% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.925;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(1.0,1.1);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}
			// Heal Stamina [62.50%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.625;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealthNew"; iDTech1Check = nm;
		if (type == -1 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~25 to 30% HP] up to 105% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.05;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(0.25,0.30);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}

			// Heal Stamina [12.5%]
			healmax = MaxStamina;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;

			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.125;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicinalHerb"; iDTech1Check = nm;
		if (type == 1 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~25-35 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(25,35);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~7.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.075,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "StrongMedicine"; iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~55-65 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(55,65);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			
			// Heal Stamina [~16.5% - ~19.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.165,0.195);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SpecialMedicine"; iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~85-105 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(85,105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			
			// Heal Stamina [~25.5% - ~31.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.225,0.315);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.77,31,"10 FF 10",0.01); // FadeRange(12,255,12,0.77,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "YggdrasilDew"; iDTech1Check = nm;
		if (type == 4 && player.mo.CountInv(iDTech1Check) > 0) // Yggdrasil Dew
		{
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				// Heal Health [90.0% - 110.0%]
				check1 += 1;
				temp2 = ((MaxHealthTrue * random(900,1100)) / 1000);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp1 += perktemp1;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
		
			// Heal Mana [22.5% - 27.5%]
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				check1 += 1;
				temp2 = MaxMana * frandom(0.225,0.275);
				perktemp3 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp3 = perktemp3 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp3 = perktemp3;
				CurrentMana += temp3;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [90.0% - 110.0%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.9,1.1);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.85,39,"10 FF 10",0.02); // FadeRange(12,255,12,0.85,16,255,16,0.02,1.12);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "PaxaPunch"; iDTech1Check = nm;
		if (type == 5 && player.mo.CountInv(iDTech1Check) > 0) // Paxa Punch
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && 
					CallACS("MiscVarCheckDECORATE",10) < perktemp2 && 
					CallACS("MiscVarCheckDECORATE",11) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("MiscVarSetDECORATE",10,perktemp4,1);
				CallACS("MiscVarSetDECORATE",11,perktemp4,1);
				player.mo.A_PlaySound("use_paxa",CHAN_BODY,1.0,0,ATTN_NORM);
				A_PlaySound("use_paxa2",CHAN_BODY,1.0,0,ATTN_NONE);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "LesserVimstone"; iDTech1Check = nm;
		if (type == 6 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 4) // Cooldown Timer is 0 and Tension is less than "100" [tier 4]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,2,1);
				player.mo.A_PlaySound("use_lesservimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "GreaterVimstone"; iDTech1Check = nm;
		if (type == 7 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 7) // Cooldown Timer is 0 and Tension is less than "1000" [tier 7]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
				player.mo.A_PlaySound("use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MercuryBandana"; iDTech1Check = nm;
		if (type == 8 && player.mo.CountInv(iDTech1Check) > 0) // Mercury Bandana
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && CallACS("MiscVarCheckDECORATE",12) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("MiscVarSetDECORATE",12,perktemp4,1);
				player.mo.A_PlaySound("use_mercurybandana",CHAN_BODY,1.0,0,ATTN_NORM);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MagicWater"; iDTech1Check = nm;
		if (type == 9 && player.mo.CountInv(iDTech1Check) > 0) // Magic Water
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(30,35) + (MaxMana * 0.05));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.14,12,"10 FF 10",0.01); // FadeRange(12,255,12,0.14,16,255,16,0.01,0.33);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SageElixir"; iDTech1Check = nm;
		if (type == 10 && player.mo.CountInv(iDTech1Check) > 0) // Sage Elixir
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(90,105) + (MaxMana * 0.15));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.28,15,"10 FF 10",0.01); // FadeRange(12,255,12,0.28,16,255,16,0.01,0.44);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ElfinElixir"; iDTech1Check = nm;
		if (type == 11 && player.mo.CountInv(iDTech1Check) > 0) // Elfin Elixir
		{
			temp1 = MaxMana * 1.125;
			perkmanalimit = temp1;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = MaxMana;
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MiraclePotion"; iDTech1Check = nm;
		if (type == 12 && player.mo.CountInv(iDTech1Check) > 0) // Miracle Potion
		{
			perkhealthlimit = MaxHealthTrue;
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
			{
				perkhealthlimit *= 1.25;
				perkmanalimit *= 1.25;
			}
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentHealth >= perkhealthlimit && (CurrentMana >= perkmanalimit))
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
			else
			{
				if (CurrentHealth < perkhealthlimit) player.mo.health;
				if (CurrentMana < perkmanalimit) CurrentMana = perkmanalimit;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
			
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
		}
		
		nm = "MedPatchNew"; iDTech1Check = nm;
		if (type == 13 && player.mo.CountInv(iDTech1Check) > 0) // Med Patch
		{
			// Heal Health [10%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.095,0.105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~9.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.095,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.11,8,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicalKitNew"; iDTech1Check = nm;
		if (type == 14 && player.mo.CountInv(iDTech1Check) > 0) // Medical Kit
		{
			// Heal Health [25%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.24,0.26);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~24% - ~26%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.24,0.26);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.265,14,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SurgeryKitNew"; iDTech1Check = nm;
		if (type == 15 && player.mo.CountInv(iDTech1Check) > 0) // Surgery Kit
		{
			// Heal Health [100%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.96,1.04);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~96% - ~104%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.96,1.04);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,22,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
	}
	
	// ManaCube Pickup script
	void A_PickupManaCube(int type = 0, int overmana = 0)
	{
		String nm, nn, no, np;
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int GiveManaAmount;
		int MaxManaDouble = MaxMana * 2;
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		if (type <= 1) GiveManaAmount = 50; // Small
		if (type == 2) GiveManaAmount = 125; // Medium
		if (type >= 3) GiveManaAmount = 350; // Large
		
		if (clearofmind > 0)
		{
			if (clearofmind == 1) GiveManaAmount *= 1.02;
			if (clearofmind == 2) GiveManaAmount *= 1.045;
			if (clearofmind == 3) GiveManaAmount *= 1.075;
			if (clearofmind == 4) GiveManaAmount *= 1.11;
			if (clearofmind == 5) GiveManaAmount *= 1.15;
		}
		
		if (CountInv("SauronHelmet",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 9 / 8; // Sauron Helmet = 112.5%
		if (CharacterClass == 0 && CountInv("SauronGauntlets",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CharacterClass == 1 && CountInv("SauronGauntletsIllucia",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CharacterClass == 2 && CountInv("SauronGauntletsFlora",AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		no = "SauronGauntletsAilish"; APPackCheck3 = no; if (CharacterClass == 8 && CountInv(APPackCheck3,AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		no = "SauronGauntletsPetra"; APPackCheck3 = no; if (CharacterClass == 9 && CountInv(APPackCheck3,AAPTR_PLAYER1) > 0) GiveManaAmount = GiveManaAmount * 5 / 4; // Sauron Gauntlets = 125%
		if (CountInv("TheOneRing",AAPTR_PLAYER1) > 0)
		{
			if (CharacterClass == 2 || CharacterClass == 8) GiveManaAmount = GiveManaAmount * 5 / 4;	// The One Ring [Flora & Ailish] = 125%
												else if (CharacterClass == 9) GiveManaAmount = GiveManaAmount * 7 / 8;	// The One Ring [Petra] = 87.5%
																								 else GiveManaAmount = GiveManaAmount / 2;		// The One Ring [Marines] = 50%
		}
		
		GiveManaAmount = GiveManaAmount * GetCVar("dvds_manaitemmultiplier") / 100;
		
		CurrentMana += GiveManaAmount;
		if (overmana == 0 && CurrentMana > MaxMana) CurrentMana = MaxMana;
		if (overmana == 1 && CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
		
		CallACS("OtherVarSetDECORATE",2,CurrentMana);
		//CallACS("MiscVarSetDECORATE",243,CurrentMana);
		//CallACS("MiscVarSetDECORATE",238,CurrentMana);
	}
	
	// Mana Recovery Items
	void A_CheckManaLevels(int overmana = 0)
	{
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int MaxManaLimit = MaxMana * 2;
		int ManaThreshold;

		if (overmana == 0) ManaThreshold = MaxMana;
		if (overmana == 1) ManaThreshold = MaxManaLimit;

		self.A_SetInventory("ManaPickupResult",0);
		if (CurrentMana < ManaThreshold) self.A_SetInventory("ManaPickupResult",1);
	}
	
	// New Soulsphere script :P
	void A_GrabSoulsphere()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);

		if (CurrentHealth < MaxHealthLimit)
		{
			HealthValue = MaxHealthTrue;
			CurrentHealth += HealthValue;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;

			player.mo.health = CurrentHealth;
		}
		
		// Add 25% to Stamina Value [up to 500%]
		TrueStamValue = MaxStamina / 4;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;
		
		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems > 0) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue; 
			if (CurrentStamina > MaxStaminaLimit) CurrentStamina = MaxStaminaLimit;

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		// Add 50% MP/Mana to Deggaris/Illucia/Flora, 200% Max MP/Mana.
		MaxManaLimit = MaxMana * 2;
		if (CurrentMana < MaxManaLimit)
		{
			ManaValue = MaxMana / 2;
			CurrentMana += ManaValue;
			if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;

			CallACS("OtherVarSetDECORATE",2,CurrentMana);
		}
	
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				HellcoreRestored = 250000 + (PlayerLevel * 2500) + random(-50000,50000);
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
				if (SoulMasteryPerkLevel >= 0)
				{
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel == 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
			
				if (HellcoreRestored < 1) HellcoreRestored = 1;
				if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}
	}
	
	// New Megasphere Script [for health/stamina half] :P
	void A_MegaSphereHealth()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int HealAmount;
		
		if (CurrentHealth < MaxHealthLimit)
		{
			HealAmount = MaxHealthLimit;
			CurrentHealth += HealAmount;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;
		
			player.mo.health = CurrentHealth;
		}
		
		// Add 50% to Stamina Value [up to 200%]
		TrueStamValue = MaxStamina / 2;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;

		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems > 0) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue; 
			if (CurrentStamina > MaxStaminaLimit) CurrentStamina = MaxStaminaLimit;

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				HellcoreRestored = 750000 + (PlayerLevel * 7500) + random(-150000,150000);
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored = HellcoreRestored * 5 / 3;
				if (SoulMasteryPerkLevel >= 0)
				{
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel == 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
			
				if (HellcoreRestored < 1) HellcoreRestored = 1;
				if (HellcoreRestored > 10000000) HellcoreRestored = 10000000;
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}
	}
	
	// MegaSphere Armor [Deggaris & Illucia Only] or Mana [All Three Characters]
	void A_MegaSphereArmor()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int HealAmount;
		int ArmorClearValue, RawArmorValue;
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		
		if (CharacterClass == 9) // Petra gets no armor from a Soul Sphere, but gets Mana and Force Gauge refill.
		{
			CurrentMana = MaxMana * 2;
			//Insert code for refilling force gauge here
		}
		else
		if (CharacterClass == 2 || CharacterClass == 8) // Flora and Ailish do not get armor from a Soul Sphere, but instead gets Mana up to 200% of their maximum
		{
			CurrentMana = MaxMana * 2;
		}
		else
		if (CharacterClass <= 1)
		{
			MaxManaLimit = MaxMana * 2;
			CurrentMana = MaxManaLimit;
		
			// Saves original raw Armor Value
			RawArmorValue = player.mo.CountInv("BasicArmor");
			//Console.Printf("BasicArmor: %d", RawArmorValue);
		
			// Clears Armor Types
			player.mo.A_SetInventory("BasicArmor", 0);
			player.mo.A_SetInventory("Armor", 0);
			player.mo.A_SetInventory("ArmorBonusDSGreen",0);
			player.mo.A_SetInventory("ArmorBonusDSBlue",0);
			player.mo.A_SetInventory("ArmorBonusDSStone1",0);
			player.mo.A_SetInventory("ArmorBonusDSStone2",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
			// Reinitalizes the proper Armor Class after the previous code above clears it
			if (CurrentArmorClass <= 1) 
			{ 
				CurrentArmorClass = 2;
				RawArmorValue = 200;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			}
			else if (CurrentArmorClass == 2) 
			{ 
				CurrentArmorClass = 3; 
				RawArmorValue = 500;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			}
			else if (CurrentArmorClass == 3) 
			{ 
				CurrentArmorClass = 4;
				RawArmorValue = 1250;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			}
			else if (CurrentArmorClass == 4) 
			{ 
				CurrentArmorClass = 5;
				RawArmorValue = 2000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			}
			else if (CurrentArmorClass >= 5) 
			{ 
				CurrentArmorClass = 6; 
				RawArmorValue = 5000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			}
			
			CurrentMaxArmor = 0;
			player.mo.A_SetInventory("DSNoArmorClass",0);
			player.mo.A_SetInventory("DSGreenArmorClass",0);
			player.mo.A_SetInventory("DSBlueArmorClass",0);
			player.mo.A_SetInventory("DSStoneArmorClass1",0);
			player.mo.A_SetInventory("DSDiamondArmorClass1",0);
			player.mo.A_SetInventory("DSStoneArmorClass2",0);
			player.mo.A_SetInventory("DSDiamondArmorClass2",0);

			if (CurrentArmorClass == 1) { CurrentMaxArmor = 100; player.mo.A_SetInventory("DSGreenArmorClass",1); }
			if (CurrentArmorClass == 2) { CurrentMaxArmor = 200; player.mo.A_SetInventory("DSBlueArmorClass",1); }
			if (CurrentArmorClass == 3) { CurrentMaxArmor = 500; player.mo.A_SetInventory("DSStoneArmorClass1",1); }
			if (CurrentArmorClass == 4) { CurrentMaxArmor = 1250; player.mo.A_SetInventory("DSDiamondArmorClass1",1); }
			if (CurrentArmorClass == 5) { CurrentMaxArmor = 2000; player.mo.A_SetInventory("DSStoneArmorClass2",1); }
			if (CurrentArmorClass == 6) { CurrentMaxArmor = 5000; player.mo.A_SetInventory("DSDiamondArmorClass2",1); }
		}
		CallACS("OtherVarSetDECORATE",2,CurrentMana);
		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Stimpacks/Medikits/Berserk Packs (All games)
	void A_PickupMedicalItem(int HealItemType = 0, int maxhealtype = 0) //
	{
		int HealAmount, ExtraHeal, CurrentHP;
		int tempstaminalimit;
		int perktemp1, perktemp2, perktemp3;
		int PerkFactor;
		int perkbasemulti = 16;
		int debughealitems = dvdsdebug_healitemdisplays;
		CurrentHP = player.mo.health;
		int CharacterClass = CallACS("CheckCharacterClass");
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int TrueStamValue;

		if (debughealitems) Console.Printf("HealItemType: %d", HealItemType);
		if (HealItemType == -1) // Source Guardian Lifeseed
		{
			HealAmount = MaxHealthTrue * 25 / 100;
			perktemp2 = HealAmount;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			tempstaminalimit = MaxStamina * 5;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			tempstaminalimit = tempstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < tempstaminalimit)
			{
				TrueStamValue = MaxStamina / 8; // 12.5%
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				if (CurrentStamina > tempstaminalimit) CurrentStamina = tempstaminalimit;
				
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		}

		if (HealItemType == 0 || HealItemType == 1) // Stimpack / Crystal Vial (1) and Medikit / Mini Berserk Pack (2) [Health]
		{
			if (HealItemType == 0) HealAmount = MaxHealthTrue * 10 / 100; // [Stimpack]
			if (HealItemType == 1) HealAmount = MaxHealthTrue * 25 / 100; // [Medikit/Mini-Berserk]
			perktemp2 = HealAmount;
		
			if (CharacterClass == 0 || CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			tempstaminalimit = MaxStamina;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			tempstaminalimit = tempstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < tempstaminalimit)
			{
				if (HealItemType == 0) TrueStamValue = MaxStamina / 20; // 5.0% [Stimpack/Vial]
				if (HealItemType == 1) TrueStamValue = MaxStamina / 8; // 12.5% [Medikit/Flask]
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				if (CurrentStamina > tempstaminalimit) CurrentStamina = tempstaminalimit;

				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		}
		
		if (HealItemType == 2) // Berserk Pack
		{
			HealAmount = MaxHealthTrue;
			perktemp2 = HealAmount;
			
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		}
		if (HealItemType == 3 || HealItemType == 4) // Full Berserk Pack (3) and Mini Berserk Pack (4) [Stamina]
		{
			if (HealItemType == 3) TrueStamValue = MaxStamina * 2; // 200% [Full Berserk Pack]
			if (HealItemType == 4) TrueStamValue = MaxStamina / 2; // 50% [Mini Berserk Pack]
			perktemp1 = TrueStamValue;
			if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
			PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
			perktemp1 = perktemp1 * PerkFactor / 10;
		
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
			tempstaminalimit = MaxStamina * 5;
		
			if (debughealitems) Console.Printf("Stamina Limit: [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, perktemp1, TrueStamValue);
			if (CurrentStamina < tempstaminalimit) CurrentStamina += perktemp1;
			if (CurrentStamina >= tempstaminalimit) CurrentStamina = tempstaminalimit; 
			
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int temphealthlimit = MaxHealthTrue;
		if (maxhealtype > 0) temphealthlimit *= 2;
		
		if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
		temphealthlimit = temphealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;

		if (temphealthlimit > (MaxHealthTrue*2)) temphealthlimit = MaxHealthTrue * 2;

		if (CurrentHP <= temphealthlimit)
		{
			CurrentHP += perktemp2;
			if (CurrentHP > temphealthlimit) CurrentHP = temphealthlimit;
			if (debughealitems) Console.Printf("Health Limit: %d VS [%d], Health Restored: %d VS [%d]", temphealthlimit, MaxHealthTrue, perktemp2, HealAmount);

			player.mo.health = CurrentHP;
		}
	}
	
		// Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
	void A_CheckHealthLevels(int maxhealtype = 0)
	{
		int currenthealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int CharacterClass = CallACS("CheckCharacterClass");
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int perkhealthlimit = MaxHealthTrue;
		int perkbasemulti = 16;
		
		if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
		perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		if (maxhealtype > 0) perkhealthlimit *= 2;
		if (perkhealthlimit > (MaxHealthTrue*2)) perkhealthlimit = (MaxHealthTrue * 2);
		
		self.A_SetInventory("HealthPickupResult",0);
		if (currenthealth < perkhealthlimit) self.A_SetInventory("HealthPickupResult",1);
	}
	
	// Max Health Bonus Script
	void A_MaxHPBonusPickup()
	{
		int HPError, IncreaseMultiplier, LevelExtraHealth, BonusMaxHP, CurrentHP, PerkFactor; 
		int ArmorHPBonus = 0;
		int MapNoBonus = 0;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int debugseedstuff = GetCVar("dvdsdebug_showseedstuff");
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (CharacterClass == 0) BonusMaxHP = MaxHealthTrue / random(390,410);
			if (CharacterClass == 1) BonusMaxHP = MaxHealthTrue / random(410,430);
			if (CharacterClass == 2) BonusMaxHP = MaxHealthTrue / random(430,450);
			if (CharacterClass == 8) BonusMaxHP = MaxHealthTrue / random(440,460);
			if (CharacterClass == 9) BonusMaxHP = MaxHealthTrue / random(400,420);
			if (debugseedstuff) Console.Printf("BonusMaxHP [Base]: %d", BonusMaxHP);
			
			HPError = BonusMaxHP / 3;
			HPError += 1;
			if (debugseedstuff) Console.Printf("HPError: %d", HPError);

			BonusMaxHP = BonusMaxHP + random(-HPError,HPError);
			if (debugseedstuff) Console.Printf("BonusMaxHP [After HPError]: %d", BonusMaxHP);
			
			if (CharacterClass == 0) { IncreaseMultiplier = random(18,21); } // Deggaris receives 2nd most HP from a bonus
			if (CharacterClass == 1) { IncreaseMultiplier = random(15,17); } // Illucia receives less HP from a bonus than Petra & Deggaris, but more than Flora & Ailish
			if (CharacterClass == 2) { IncreaseMultiplier = random(12,14); } // Flora receives the 2nd least HP from a bonus
			if (CharacterClass == 8) { IncreaseMultiplier = random(10,12); } // Ailish receives the least HP from a bonus
			if (CharacterClass == 9) { IncreaseMultiplier = random(20,23); } // Petra receives most HP from a bonus
			BonusMaxHP = BonusMaxHP * IncreaseMultiplier / 16;
			if (debugseedstuff > 0) Console.Printf("Randomizer IncreaseMultiplier: %d / 16, BonusMaxHP [After HPError]: %d", IncreaseMultiplier, BonusMaxHP);
			
			// Flora's Armor Items [up to +55% Max HP gained from Max HP Bonuses]
			if (CharacterClass == 2)
			{
				if (player.mo.CountInv("PearlyCorset")) ArmorHPBonus += 20; // +20%
				if (player.mo.CountInv("KissaBra")) ArmorHPBonus += 10; // +10%
				if (player.mo.CountInv("BalrogRing")) ArmorHPBonus += 15; // +25%
				ArmorHPBonus += 100;
				BonusMaxHP = BonusMaxHP * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset / Kissa Bra / Balrog Ring
				if (debugseedstuff > 0) Console.Printf("ArmorHPBonus [Flora]: %d / 100, BonusMaxHP [After ArmorHPBonus]: %d", ArmorHPBonus, BonusMaxHP);
			}
			
			PerkFactor = ((CallACS("MiscVarCheckDECORATE",10001) * 500) + (CallACS("MiscVarCheckDECORATE",10002) * 1250)) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			if (debugseedstuff) Console.Printf("BonusMaxHP [LifeUp Perk]: %d", BonusMaxHP);
			
			PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			if (debugseedstuff) Console.Printf("BonusMaxHP [StaminaUpgrade (Strife)]: %d", BonusMaxHP);
			
			// Overall Modifier
			MapNoBonus = (level.levelnum * 9) / 20; // 45%
			if (debugseedstuff > 0) Console.Printf("MapNoBonus: %d", MapNoBonus);
			BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill <= SKILL_VERY_EASY)		BonusMaxHP = BonusMaxHP * (random(90,100) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EASY)				BonusMaxHP = BonusMaxHP * (random(80,90) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_NORMAL)			BonusMaxHP = BonusMaxHP * (random(75,85) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HARD)				BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_VERY_HARD)		BonusMaxHP = BonusMaxHP * (random(65,75) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EXTREME)			BonusMaxHP = BonusMaxHP * (random(60,70) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HORRIBLE)		BonusMaxHP = BonusMaxHP * (random(55,65) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_IMPOSSIBLE)	BonusMaxHP = BonusMaxHP * (random(50,60) + MapNoBonus) / 100;
			if (TrueGameSkill >= SKILL_OMEGA)	BonusMaxHP = BonusMaxHP * (random(45,55) + MapNoBonus) / 100;
			if (debugseedstuff) Console.Printf("BonusMaxHP [After MapNoBonus]: %d", BonusMaxHP);
			
			PerkFactor = 1;
			PerkFactor += ((CallACS("MiscVarCheckDECORATE",10001) * 1) / 10) + ((CallACS("MiscVarCheckDECORATE",317) * 1) / 4);
			PerkFactor += ((CallACS("MiscVarCheckDECORATE",317) * 1) / 4);
			if (BonusMaxHP < PerkFactor) BonusMaxHP = PerkFactor;
			if (debugseedstuff) Console.Printf("BonusMaxHP [Final]: %d", BonusMaxHP);
			
			CallACS("MiscVarSetDECORATE",222,BonusMaxHP,1);
			CallACS("MiscVarSetDECORATE",2031,105); 
			
			CurrentHP = player.mo.health;
			player.mo.health = (CurrentHP + BonusMaxHP);

			MaxHealthTrue += BonusMaxHP;
			int MaxHealthLimit = MaxHealthTrue * 2;
			//player.mo.SpawnHealth() = MaxHealthTrue;
			CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
			
			// Max HP Bonus also heals extra HP dependant on the character in use.
			CurrentHP = player.mo.health;
			if (CharacterClass == 0) CurrentHP = CurrentHP + random(2,4) + BonusMaxHP; // Deggaris receives the Least Healed HP from a bonus
			if (CharacterClass == 1) CurrentHP = CurrentHP + random(3,6) + BonusMaxHP; // Illucia receives a Median of Healed HP from a bonus
			if (CharacterClass == 2) CurrentHP = CurrentHP + random(5,10) + BonusMaxHP; // Flora used to receive the Most Healed HP from a bonus
			if (CharacterClass == 8) CurrentHP = CurrentHP + random(6,12) + BonusMaxHP; // Ailish receives the Most Healed HP from a bonus
			if (CharacterClass == 9) CurrentHP = CurrentHP + random(1,3) + BonusMaxHP; // Petra receives the Least Healed HP from a bonus
			
			int ExtraHP;
			ExtraHP = MaxHealthTrue / 100;
			if (ExtraHP < 1) ExtraHP = 1;
			
			LevelExtraHealth = PlayerLevel / 10;
			ExtraHP += LevelExtraHealth;
			CurrentHP += ExtraHP;
			
			if (CurrentHP > MaxHealthLimit) CurrentHP = MaxHealthLimit;
			
			player.mo.health = CurrentHP;
		}
	}

	// Checks Whether a Full Armor Item can be picked up or not
	void A_CheckArmorLevels(int ArmorType = 0)
	{
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		self.A_SetInventory("ArmorPickupResult",0); // Stops Flora from getting armor benefits and sets the item's result value to 0 to make the item fail to pickup
		if (CharacterClass != 2)
		{
			RawArmorValue = player.mo.CountInv("BasicArmor");
			if (ArmorType == 1 && CurrentArmorClass <= 1 && RawArmorValue < 100) self.A_SetInventory("ArmorPickupResult",1);
			if (ArmorType == 2 && CurrentArmorClass <= 2 && RawArmorValue < 200) self.A_SetInventory("ArmorPickupResult",1);
			if (ArmorType == 3 && CurrentArmorClass <= 3 && RawArmorValue < 500) self.A_SetInventory("ArmorPickupResult",1);
			if (ArmorType == 4 && CurrentArmorClass <= 4 && RawArmorValue < 1250) self.A_SetInventory("ArmorPickupResult",1);
			if (ArmorType == 5 && CurrentArmorClass <= 5 && RawArmorValue < 2000) self.A_SetInventory("ArmorPickupResult",1);
			if (ArmorType == 6 && CurrentArmorClass <= 6 && RawArmorValue < 5000) self.A_SetInventory("ArmorPickupResult",1);
		}
	}

	// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	void A_PickupArmorMain(int ArmorType = 0)
	{
		int GiveArmorAmount;
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);

		// Saves original raw Armor Value
		RawArmorValue = player.mo.CountInv("BasicArmor");
		
		player.mo.A_SetInventory("BasicArmor",0);
		player.mo.A_SetInventory("Armor",0);
		player.mo.A_SetInventory("ArmorBonusDSGreen",0);
		player.mo.A_SetInventory("ArmorBonusDSBlue",0);
		player.mo.A_SetInventory("ArmorBonusDSStone1",0);
		player.mo.A_SetInventory("ArmorBonusDSStone2",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
		if (ArmorType == 1 && CurrentArmorClass <= 1) { CurrentArmorClass = 1; GiveArmorAmount = 100; }
		if (ArmorType == 2 && CurrentArmorClass <= 2) { CurrentArmorClass = 2; GiveArmorAmount = 200; }
		if (ArmorType == 3 && CurrentArmorClass <= 3) { CurrentArmorClass = 3; GiveArmorAmount = 500; }
		if (ArmorType == 4 && CurrentArmorClass <= 4) { CurrentArmorClass = 4; GiveArmorAmount = 1250; }
		if (ArmorType == 5 && CurrentArmorClass <= 5) { CurrentArmorClass = 5; GiveArmorAmount = 2000; }
		if (ArmorType == 6 && CurrentArmorClass <= 6) { CurrentArmorClass = 6; GiveArmorAmount = 5000; }
		
		player.mo.A_SetInventory("DSNoArmorClass",0);
		player.mo.A_SetInventory("DSGreenArmorClass",0);
		player.mo.A_SetInventory("DSBlueArmorClass",0);
		player.mo.A_SetInventory("DSStoneArmorClass1",0);
		player.mo.A_SetInventory("DSDiamondArmorClass1",0);
		player.mo.A_SetInventory("DSStoneArmorClass2",0);
		player.mo.A_SetInventory("DSDiamondArmorClass2",0);
		if (CurrentArmorClass == 1)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSGreen", 1); }
			CurrentMaxArmor = 100;
		}
		if (CurrentArmorClass == 2)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			CurrentMaxArmor = 200;
		}
		if (CurrentArmorClass == 3)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			CurrentMaxArmor = 500;
		}
		if (CurrentArmorClass == 4)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			CurrentMaxArmor = 1250;
		}
		if (CurrentArmorClass == 5)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			CurrentMaxArmor = 2000;
		}
		if (CurrentArmorClass == 6)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			CurrentMaxArmor = 5000;
		}

		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Sets the "glowing eyes" in the "Armor Bonus" items to a specfic color based on the current Armor Class of Deggaris or Illucia [does not apply to Flora as she can't use Armor Bonuses and they aren't supposed to "appear" when she is in play]
	void A_ArmorBonusEyeGlow()
	{
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9)
		{
			if (CurrentArmorClass == 0) Thing_SetTranslation(0,18); // If you have no Armor Class
			if (CurrentArmorClass == 1) Thing_SetTranslation(0,18); // If you have Green Armor Class
			if (CurrentArmorClass == 2) Thing_SetTranslation(0,22); // If you have Blue Armor Class
			if (CurrentArmorClass == 3) Thing_SetTranslation(0,20); // If you have Stone Armor [1] Class
			if (CurrentArmorClass == 4) Thing_SetTranslation(0,21); // If you have Diamond Armor [1] Class
			if (CurrentArmorClass == 5) Thing_SetTranslation(0,20); // If you have Stone Armor [2] Class
			if (CurrentArmorClass == 6) Thing_SetTranslation(0,21); // If you have Diamond Armor [2] Class
		}
	}
	
	void A_CheckChainsaw()
	{
		if (CountInv("DoubleBladedChainsaw",AAPTR_PLAYER1) > 0) A_SetInventory("ChainsawCheckResult",2); // SetResultValue(2);
		else if (CountInv("Chainsaw2",AAPTR_PLAYER1) > 0) A_SetInventory("ChainsawCheckResult",1); // SetResultValue(1);
		else A_SetInventory("ChainsawCheckResult",0);
	}
	
	// Makes Armor Bonuses check for Flora's presense in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
	void A_ClassicDoom2ArmorCheck()
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			if (CharacterClass == 0) A_SetInventory("ArmorPickupResult",3);
			if (CharacterClass == 1) A_SetInventory("ArmorPickupResult",4);
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) A_SetInventory("ArmorPickupResult",5);
		}
		else
		{
			if (CharacterClass == 0) A_SetInventory("ArmorPickupResult",0);
			if (CharacterClass == 1) A_SetInventory("ArmorPickupResult",1);
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) A_SetInventory("ArmorPickupResult",2);
		}
	}
	
	// Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
	void A_CheckFloraArmorCopies(int Armortype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass == 2)
		{
			if (Armortype == 1 && CountInv("SafeTeaShoes",AAPTR_PLAYER1) > 0) Thing_Remove(0); // SafeTeaShoes
			if (Armortype == 2 && CountInv("PearlyCorset",AAPTR_PLAYER1) > 0) Thing_Remove(0); // PearlyCorset
			if (Armortype == 3 && CountInv("WaterFlyingDress",AAPTR_PLAYER1) > 0) Thing_Remove(0); // WaterFlyingDress
			if (Armortype == 4 && CountInv("EvenstarNecklace",AAPTR_PLAYER1) > 0) Thing_Remove(0); // EvenstarNecklace
			if (Armortype == 5 && CountInv("CloakOfEvasion",AAPTR_PLAYER1) > 0) Thing_Remove(0); // CloakOfEvasion
			if (Armortype == 6 && CountInv("AnubisCufflinks",AAPTR_PLAYER1) > 0) Thing_Remove(0); // AnubisCufflinks
			if (Armortype == 7 && CountInv("KissaBra",AAPTR_PLAYER1) > 0) Thing_Remove(0); // KissaBra
			if (Armortype == 8) 
			{
				if (CountInv("DivineShield",AAPTR_PLAYER1) > 0) Thing_Remove(0);
				else if (CountInv("RuinousShield",AAPTR_PLAYER1) > 0) Thing_Remove(0);
			}
			if (Armortype == 9 && CountInv("DivineShield",AAPTR_PLAYER1) > 0) Thing_Remove(0); // DivineShield 
			if (Armortype == 10 && CountInv("BalrogRing",AAPTR_PLAYER1) > 0) Thing_Remove(0); // BalrogRing
			if (Armortype == 11 && CountInv("DoveRibbon",AAPTR_PLAYER1) > 0) Thing_Remove(0); // DoveRibbon
			if (Armortype == 12 && CountInv("FalconKnifeEarrings",AAPTR_PLAYER1) > 0) Thing_Remove(0); // FalconKnifeEarrings
		}
		else
		{
			Thing_Remove(0);
		}
	}
	
	// Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
	void A_HellcoreWeaponCheckCharacter(int Weapontype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int IsWeaponLevelMaxed;

		if (CharacterClass == 2)
		{
			IsWeaponLevelMaxed = 0;
			if (Weapontype == 0 && CallACS("MiscVarCheckDECORATE",96) >= 8) IsWeaponLevelMaxed = 1; // Imp Claw [4]
			if (Weapontype == 1 && CallACS("MiscVarCheckDECORATE",97) >= 8) IsWeaponLevelMaxed = 1; // Dark Imp Claw [4]
		
			if (Weapontype == 2 && CallACS("MiscVarCheckDECORATE",98) >= 8) IsWeaponLevelMaxed = 1; // CacoDemon Eye [4]
			if (Weapontype == 3 && CallACS("MiscVarCheckDECORATE",99) >= 8) IsWeaponLevelMaxed = 1; // Cacolantern Eye [4]
			if (Weapontype == 4 && CallACS("MiscVarCheckDECORATE",100) >= 8) IsWeaponLevelMaxed = 1; // Abaddon Eye [4]
		
			if (Weapontype == 5 && CallACS("MiscVarCheckDECORATE",101) >= 8) IsWeaponLevelMaxed = 1; // Knight Fist [5]
			if (Weapontype == 6 && CallACS("MiscVarCheckDECORATE",102) >= 8) IsWeaponLevelMaxed = 1; // Baron Fist [5]
			if (Weapontype == 7 && CallACS("MiscVarCheckDECORATE",103) >= 8) IsWeaponLevelMaxed = 1; // Belphegor Fist [5]
			if (Weapontype == 8 && CallACS("MiscVarCheckDECORATE",104) >= 8) IsWeaponLevelMaxed = 1; // Bruiser Fist [5]
			if (Weapontype == 9 && CallACS("MiscVarCheckDECORATE",105) >= 8) IsWeaponLevelMaxed = 1; // Archon Fist [5]
			if (Weapontype == 10 && CallACS("MiscVarCheckDECORATE",106) >= 8) IsWeaponLevelMaxed = 1; // Pyro Fist [5]
		
			if (Weapontype == 11 && CallACS("MiscVarCheckDECORATE",107) >= 8) IsWeaponLevelMaxed = 1; // Incarnate Skull [6]
			if (Weapontype == 12 && CallACS("MiscVarCheckDECORATE",108) >= 8) IsWeaponLevelMaxed = 1; // Archvile Hand [6]
			if (Weapontype == 13 && CallACS("MiscVarCheckDECORATE",109) >= 8) IsWeaponLevelMaxed = 1; // Diabloist Hand  [6]
			if (Weapontype == 14 && CallACS("MiscVarCheckDECORATE",110) >= 8) IsWeaponLevelMaxed = 1; // Balrog Fist [6]
		
			if (Weapontype == 15 && CallACS("MiscVarCheckDECORATE",111) >= 8) IsWeaponLevelMaxed = 1; // Elemental's Eye [6]
			if (Weapontype == 16 && CallACS("MiscVarCheckDECORATE",112) >= 8) IsWeaponLevelMaxed = 1; // Overlord's Eye [6]

			if (IsWeaponLevelMaxed != 0) { Thing_Remove(0); }
		}
		else 
		{
			Thing_Remove(0); 
		}
	}
	
	
}

// Keeps Sounds/Music active during time Freeze powerups
class AetheriusTimeFreezer : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
	}
}

class ShieldSpawnerBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTELESTOMP
	}
}
